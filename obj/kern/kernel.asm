
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 20 19 00 	lgdtl  0x192018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 1f 19 f0       	mov    $0xf0191fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 1c 26 78 f0 01 	movl   $0x1,0xf078261c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 f0 25 78 f0 01 	movl   $0x1,0xf07825f0
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 7c 27 78 f0       	mov    $0xf078277c,%edx
f010006a:	b8 60 1a 78 f0       	mov    $0xf0781a60,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 60 1a 78 f0       	push   $0xf0781a60
f010007e:	e8 85 12 03 00       	call   f0131308 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 18 26 78 f0 ff 	movl   $0xffffffff,0xf0782618
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 48 9b 00 00       	call   f0109bf6 <env_init>
	idt_init();
f01000ae:	e8 00 b1 00 00       	call   f010b1b3 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 33 dc 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 d6 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f2 75 00 00       	call   f01076c9 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 c1 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 73 fb 02 00       	call   f012fc6b <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 e8 25 78 f0 61 	movl   $0x61,0xf07825e8
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 74 25 78 f0 59 	movl   $0x59,0xf0782574
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 9d df 00 00       	call   f010e0cb <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 bd dc 00 00       	call   f010ddf8 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 98 dc 00 00       	call   f010dde0 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 b8 dc 00 00       	call   f010de10 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 c0 33 13 f0       	push   $0xf01333c0
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 ec 33 13 f0       	push   $0xf01333ec
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 11 34 13 f0       	push   $0xf0133411
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 18 34 13 f0       	push   $0xf0133418
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 60 34 13 f0       	push   $0xf0133460
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 a8 34 13 f0       	push   $0xf01334a8
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 60 34 13 f0       	push   $0xf0133460
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 18 34 13 f0       	push   $0xf0133418
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 ed 34 13 f0       	push   $0xf01334ed
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 f2 34 13 f0       	push   $0xf01334f2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 0b 35 13 f0       	push   $0xf013350b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 7c 98 00 00       	call   f0109aeb <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 0d 35 13 f0       	push   $0xf013350d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 f2 34 13 f0       	push   $0xf01334f2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 0b 35 13 f0       	push   $0xf013350b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 f2 34 13 f0       	push   $0xf01334f2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 0b 35 13 f0       	push   $0xf013350b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 22 35 13 f0       	push   $0xf0133522
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 0b 35 13 f0       	push   $0xf013350b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 80 1a 78 f0       	mov    %eax,0xf0781a80
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 84 1a 78 f0 b4 	movl   $0x3b4,0xf0781a84
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 84 1a 78 f0 d4 	movl   $0x3d4,0xf0781a84
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 88 1a 78 f0       	mov    %eax,0xf0781a88
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 88 1a 78 f0    	mov    0xf0781a88,%edx
f0100771:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d 8c 1a 78 f0 	mov    0xf0781a8c,%cx
f01007a4:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d 88 1a 78 f0    	mov    0xf0781a88,%ecx
f010080e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 8c 1a 78 f0 	mov    %dx,0xf0781a8c
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 88 1a 78 f0       	mov    0xf0781a88,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 88 1a 78 f0       	mov    0xf0781a88,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 de 0a 03 00       	call   f0131338 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 88 1a 78 f0    	mov    0xf0781a88,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 84 1a 78 f0    	mov    0xf0781a84,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 84 1a 78 f0    	mov    0xf0781a84,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 21 19 f0    	mov    -0xfe6dee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 25 19 f0 	mov    -0xfe6dae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 3d 35 13 f0       	push   $0xf013353d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 a0 1c 78 f0    	mov    0xf0781ca0,%edx
f0100b03:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 a0 1c 78 f0    	mov    %edx,0xf0781ca0
f0100b1a:	8a 80 a0 1a 78 f0    	mov    -0xf87e560(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 a0 1c 78 f0 00 	movl   $0x0,0xf0781ca0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 a0 1c 78 f0    	mov    0xf0781ca0,%edx
f0100bf3:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 a0 1c 78 f0    	mov    %edx,0xf0781ca0
f0100c0a:	8a 80 a0 1a 78 f0    	mov    -0xf87e560(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 a0 1c 78 f0 00 	movl   $0x0,0xf0781ca0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 49 35 13 f0       	push   $0xf0133549
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 66 fd 02 00       	call   f0130a6c <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 66 35 13 f0       	push   $0xf0133566
f0100d4c:	e8 c3 01 03 00       	call   f0130f14 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 6c 35 13 f0       	push   $0xf013356c
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 c0 09 03 00       	call   f013174e <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 4a 04 03 00       	call   f0131226 <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 22 03 03 00       	call   f013111a <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 40 04 03 00       	call   f013125e <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 25 19 f0       	add    $0xf0192548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 71 35 13 f0       	push   $0xf0133571
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 87 35 13 f0       	push   $0xf0133587
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 1c 26 78 f0 00 	movl   $0x0,0xf078261c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 1c 26 78 f0 01 	movl   $0x1,0xf078261c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 1c 26 78 f0 02 	movl   $0x2,0xf078261c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 1c 26 78 f0 03 	movl   $0x3,0xf078261c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 1c 26 78 f0 04 	movl   $0x4,0xf078261c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 f0 25 78 f0 01 	movl   $0x1,0xf07825f0
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 f0 25 78 f0 02 	movl   $0x2,0xf07825f0
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 f0 25 78 f0 03 	movl   $0x3,0xf07825f0
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 f0 25 78 f0 04 	movl   $0x4,0xf07825f0
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 8c 35 13 f0       	push   $0xf013358c
f0101046:	6a 55                	push   $0x55
f0101048:	68 b4 35 13 f0       	push   $0xf01335b4
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 25 19 f0       	add    $0xf0192544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 25 19 f0       	add    $0xf0192540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 2e 44 13 f0       	push   $0xf013442e
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 37 44 13 f0       	push   $0xf0134437
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 2d 19 f0    	mov    0xf0192d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 2d 19 f0    	mov    0xf0192d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 4c 44 13 f0       	push   $0xf013444c
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 68 44 13 f0       	push   $0xf0134468
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 84 44 13 f0       	push   $0xf0134484
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 a1 33 13 00       	mov    $0x1333a1,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 a1 33 13 f0       	push   $0xf01333a1
f0101172:	68 c0 44 13 f0       	push   $0xf01344c0
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 60 1a 78 00       	mov    $0x781a60,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 60 1a 78 f0       	push   $0xf0781a60
f010118d:	68 fc 44 13 f0       	push   $0xf01344fc
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 7c 27 78 00       	mov    $0x78277c,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 7c 27 78 f0       	push   $0xf078277c
f01011a8:	68 44 45 13 f0       	push   $0xf0134544
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 7c 27 78 f0       	mov    $0xf078277c,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 80 45 13 f0       	push   $0xf0134580
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 ac 45 13 f0       	push   $0xf01345ac
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 cd 45 13 f0       	push   $0xf01345cd
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 ac 45 13 f0       	push   $0xf01345ac
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 cd 45 13 f0       	push   $0xf01345cd
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 ac 45 13 f0       	push   $0xf01345ac
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 cd 45 13 f0       	push   $0xf01345cd
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 ac 45 13 f0       	push   $0xf01345ac
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 cd 45 13 f0       	push   $0xf01345cd
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 ac 45 13 f0       	push   $0xf01345ac
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 cd 45 13 f0       	push   $0xf01345cd
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 ac 45 13 f0       	push   $0xf01345ac
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 cd 45 13 f0       	push   $0xf01345cd
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 ac 45 13 f0       	push   $0xf01345ac
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 cd 45 13 f0       	push   $0xf01345cd
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 a7 01 03 00       	call   f013147a <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 56 01 03 00       	call   f013147a <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 ac 45 13 f0       	push   $0xf01345ac
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 cd 45 13 f0       	push   $0xf01345cd
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 ac 45 13 f0       	push   $0xf01345ac
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 cd 45 13 f0       	push   $0xf01345cd
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 d0 00 03 00       	call   f013147a <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 8f 00 03 00       	call   f013147a <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 01 87 00 00       	call   f0109b0a <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 59 00 03 00       	call   f013147a <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 e4 45 13 f0       	push   $0xf01345e4
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 d3 ff 02 00       	call   f013147a <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 b3 ff 02 00       	call   f013147a <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 35 fc 02 00       	call   f013111a <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 26 ff 02 00       	call   f013147a <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 0e 46 13 f0       	push   $0xf013460e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 da fe 02 00       	call   f013147a <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 4c 85 00 00       	call   f0109b0a <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 a4 fe 02 00       	call   f013147a <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 0e 46 13 f0       	push   $0xf013460e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 28 46 13 f0       	push   $0xf0134628
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 13 fe 02 00       	call   f013147a <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 f3 fd 02 00       	call   f013147a <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 52 46 13 f0       	push   $0xf0134652
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 55 46 13 f0       	push   $0xf0134655
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 88 fd 02 00       	call   f013147a <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 fa 83 00 00       	call   f0109b0a <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 52 fd 02 00       	call   f013147a <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 37 fd 02 00       	call   f013147a <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 57 46 13 f0       	push   $0xf0134657
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 9b fc 02 00       	call   f013147a <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 0d 83 00 00       	call   f0109b0a <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 54 fc 02 00       	call   f013147a <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 15 62 00 00       	call   f0107a77 <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e2 60 00 00       	call   f0107950 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 68 46 13 f0       	push   $0xf0134668
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 5f fb 02 00       	call   f013147a <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 d1 81 00 00       	call   f0109b0a <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 18 fb 02 00       	call   f013147a <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 92 46 13 f0       	push   $0xf0134692
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 ac 46 13 f0       	push   $0xf01346ac
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 f0 46 13 f0       	push   $0xf01346f0
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 34 26 78 f0       	mov    0xf0782634,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 48 47 13 f0       	push   $0xf0134748
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 4e c2 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 84 47 13 f0       	push   $0xf0134784
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 4f f9 02 00       	call   f013147a <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 34 f9 02 00       	call   f013147a <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 19 f9 02 00       	call   f013147a <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 cd c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 e8 f8 02 00       	call   f013147a <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 cb f8 02 00       	call   f013147a <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 b0 f8 02 00       	call   f013147a <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 67 c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 44 48 13 f0       	push   $0xf0134844
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 68 f8 02 00       	call   f013147a <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 d4 48 13 f0       	push   $0xf01348d4
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 6c 49 13 f0       	push   $0xf013496c
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 dd c0 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 ac 49 13 f0       	push   $0xf01349ac
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 04 4a 13 f0       	push   $0xf0134a04
f0101c98:	68 49 4a 13 f0       	push   $0xf0134a49
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 cd 45 13 f0       	push   $0xf01345cd
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 04 4a 13 f0       	push   $0xf0134a04
f0101cb7:	68 49 4a 13 f0       	push   $0xf0134a49
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 cd 45 13 f0       	push   $0xf01345cd
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 81 71 00 00       	call   f0108e63 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 5e 4a 13 f0       	push   $0xf0134a5e
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 34 26 78 f0 00 	movl   $0x0,0xf0782634
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 03 f7 02 00       	call   f013147a <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 5e 4a 13 f0       	push   $0xf0134a5e
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 34 26 78 f0 00 	movl   $0x0,0xf0782634
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 74 4a 13 f0       	push   $0xf0134a74
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 19 f6 02 00       	call   f013147a <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 40 be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 d4 4a 13 f0       	push   $0xf0134ad4
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 1a be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 18 4b 13 f0       	push   $0xf0134b18
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 58 4b 13 f0       	push   $0xf0134b58
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 8e f5 02 00       	call   f013147a <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 2e be 00 00       	call   f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 ac 4b 13 f0       	push   $0xf0134bac
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 c9 bd 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 e0 4b 13 f0       	push   $0xf0134be0
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 b7 bd 00 00       	call   f010dcfb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 0c 4c 13 f0       	push   $0xf0134c0c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 a5 bd 00 00       	call   f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 34 4c 13 f0       	push   $0xf0134c34
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 e2 f4 02 00       	call   f013147a <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 68 4c 13 f0       	push   $0xf0134c68
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 8e f4 02 00       	call   f013147a <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 5b f4 02 00       	call   f013147a <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 a0 4c 13 f0       	push   $0xf0134ca0
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 cd 4c 13 f0       	push   $0xf0134ccd
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 55 46 13 f0       	push   $0xf0134655
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 d4 4c 13 f0       	push   $0xf0134cd4
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 cd 4c 13 f0       	push   $0xf0134ccd
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 55 46 13 f0       	push   $0xf0134655
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 08 4d 13 f0       	push   $0xf0134d08
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 44 4d 13 f0       	push   $0xf0134d44
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 0e f3 02 00       	call   f013147a <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 1f e2 02 00       	call   f01303a0 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 94 4d 13 f0       	push   $0xf0134d94
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 95 bb 00 00       	call   f010dd59 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 b8 4d 13 f0       	push   $0xf0134db8
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 5c bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 e0 4d 13 f0       	push   $0xf0134de0
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 39 bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 20 4e 13 f0       	push   $0xf0134e20
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 4c bb 00 00       	call   f010dd74 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 5c 4e 13 f0       	push   $0xf0134e5c
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 4c bb 00 00       	call   f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 80 4e 13 f0       	push   $0xf0134e80
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 b0 4e 13 f0       	push   $0xf0134eb0
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 dc 4e 13 f0       	push   $0xf0134edc
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 0c 4f 13 f0       	push   $0xf0134f0c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 3c 4f 13 f0       	push   $0xf0134f3c
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 6c 4f 13 f0       	push   $0xf0134f6c
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 9c 4f 13 f0       	push   $0xf0134f9c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 c8 4f 13 f0       	push   $0xf0134fc8
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 f4 4f 13 f0       	push   $0xf0134ff4
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 20 50 13 f0       	push   $0xf0135020
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 4c 50 13 f0       	push   $0xf013504c
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 78 50 13 f0       	push   $0xf0135078
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 78 50 13 f0       	push   $0xf0135078
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 ac 50 13 f0       	push   $0xf01350ac
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 dc 50 13 f0       	push   $0xf01350dc
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 0c 51 13 f0       	push   $0xf013510c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 40 51 13 f0       	push   $0xf0135140
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 7c 51 13 f0       	push   $0xf013517c
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 ac 51 13 f0       	push   $0xf01351ac
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 d8 51 13 f0       	push   $0xf01351d8
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 04 52 13 f0       	push   $0xf0135204
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 34 52 13 f0       	push   $0xf0135234
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 2c b9 00 00       	call   f010de06 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 64 52 13 f0       	push   $0xf0135264
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 e6 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 a0 52 13 f0       	push   $0xf01352a0
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 e7 b8 00 00       	call   f010de06 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 64 52 13 f0       	push   $0xf0135264
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 a1 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 c4 52 13 f0       	push   $0xf01352c4
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 8f b8 00 00       	call   f010ddf8 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 6a b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 e4 52 13 f0       	push   $0xf01352e4
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 58 b8 00 00       	call   f010ddf8 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 33 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 69 b8 00 00       	call   f010de1e <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 00 53 13 f0       	push   $0xf0135300
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 30 53 13 f0       	push   $0xf0135330
f01025d5:	e8 3a e9 02 00       	call   f0130f14 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 8d ee 02 00       	call   f013147a <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 17 b8 00 00       	call   f010de10 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 1d b8 00 00       	call   f010de1e <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 5c 53 13 f0       	push   $0xf013535c
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 81 53 13 f0       	push   $0xf0135381
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 d2 b7 00 00       	call   f010de06 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 9c 53 13 f0       	push   $0xf013539c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 9f b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 ec 53 13 f0       	push   $0xf01353ec
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 02 ee 02 00       	call   f013147a <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 8c b7 00 00       	call   f010de10 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 92 b7 00 00       	call   f010de1e <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 5c 53 13 f0       	push   $0xf013535c
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 57 b7 00 00       	call   f010de06 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 9c 53 13 f0       	push   $0xf013539c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 24 b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 ec 53 13 f0       	push   $0xf01353ec
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 3b b7 00 00       	call   f010de1e <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 32 54 13 f0       	push   $0xf0135432
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 57 ed 02 00       	call   f013147a <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 d2 4e 01 00       	call   f0117609 <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 50 54 13 f0       	push   $0xf0135450
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 22 9d 01 00       	call   f011c492 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 b0 b0 01 00       	call   f011d834 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 a0 54 13 f0       	push   $0xf01354a0
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 4f 4e 01 00       	call   f0117609 <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 95 77 01 00       	call   f0119f5c <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 de 89 01 00       	call   f011b1b2 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 f0 54 13 f0       	push   $0xf01354f0
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 02 4e 01 00       	call   f0117609 <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 53 60 01 00       	call   f0118867 <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 a5 be 01 00       	call   f011e6c9 <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 23 f6 01 00       	call   f0121e6b <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 ca d4 01 00       	call   f011fd19 <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 06 10 02 00       	call   f0123867 <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 c4 24 02 00       	call   f0124d37 <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 8f 39 02 00       	call   f0126214 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 8b 93 02 00       	call   f012bc2b <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 2b b3 02 00       	call   f012dbdb <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 5c 39 01 00       	call   f011621e <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 30 43 01 00       	call   f0116c04 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 68 3b 02 00       	call   f012644e <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 42 52 02 00       	call   f0127b3a <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 b1 5f 02 00       	call   f01288bb <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 8c 6e 02 00       	call   f01297a8 <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 3c eb 02 00       	call   f013147a <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 3e 55 13 f0       	push   $0xf013553e
f010296c:	50                   	push   %eax
f010296d:	e8 b4 e8 02 00       	call   f0131226 <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01029b1:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 48 55 13 f0       	push   $0xf0135548
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 81 55 13 f0       	push   $0xf0135581
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 cd 45 13 f0       	push   $0xf01345cd
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 14 e5 00 00       	call   f0110f1a <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 98 55 13 f0       	push   $0xf0135598
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 d0 55 13 f0       	push   $0xf01355d0
f0102a46:	50                   	push   %eax
f0102a47:	e8 da e7 02 00       	call   f0131226 <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 6c ba 00 00       	call   f010e4c4 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 d5 55 13 f0       	push   $0xf01355d5
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 b3 e7 02 00       	call   f0131226 <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 59 bb 00 00       	call   f010e5d8 <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 db 55 13 f0       	push   $0xf01355db
f0102a94:	50                   	push   %eax
f0102a95:	e8 8c e7 02 00       	call   f0131226 <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 f0 bf 00 00       	call   f010ea96 <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 e0 55 13 f0       	push   $0xf01355e0
f0102abb:	50                   	push   %eax
f0102abc:	e8 65 e7 02 00       	call   f0131226 <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 e3 55 13 f0       	push   $0xf01355e3
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 48 e7 02 00       	call   f0131226 <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 07 c3 00 00       	call   f010edf1 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 e6 55 13 f0       	push   $0xf01355e6
f0102aff:	50                   	push   %eax
f0102b00:	e8 21 e7 02 00       	call   f0131226 <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 e9 55 13 f0       	push   $0xf01355e9
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 04 e7 02 00       	call   f0131226 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 41 c7 00 00       	call   f010f26f <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 ec 55 13 f0       	push   $0xf01355ec
f0102b43:	50                   	push   %eax
f0102b44:	e8 dd e6 02 00       	call   f0131226 <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 ef 55 13 f0       	push   $0xf01355ef
f0102b60:	50                   	push   %eax
f0102b61:	e8 c0 e6 02 00       	call   f0131226 <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 84 cd 00 00       	call   f010f8f6 <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 f2 55 13 f0       	push   $0xf01355f2
f0102b84:	50                   	push   %eax
f0102b85:	e8 9c e6 02 00       	call   f0131226 <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 f8 55 13 f0       	push   $0xf01355f8
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 7f e6 02 00       	call   f0131226 <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 d1 d5 00 00       	call   f0110184 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 00 56 13 f0       	push   $0xf0135600
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 39 56 13 f0       	push   $0xf0135639
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 30 e6 02 00       	call   f0131226 <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 ac ed 00 00       	call   f01119ae <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 42 56 13 f0       	push   $0xf0135642
f0102c17:	50                   	push   %eax
f0102c18:	e8 09 e6 02 00       	call   f0131226 <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 d0 f7 00 00       	call   f01123f9 <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 4c 56 13 f0       	push   $0xf013564c
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 e2 e5 02 00       	call   f0131226 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 a7 08 01 00       	call   f01134f7 <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 52 56 13 f0       	push   $0xf0135652
f0102c62:	50                   	push   %eax
f0102c63:	e8 be e5 02 00       	call   f0131226 <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 ab 12 01 00       	call   f0113f1f <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 5b 56 13 f0       	push   $0xf013565b
f0102c86:	50                   	push   %eax
f0102c87:	e8 9a e5 02 00       	call   f0131226 <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 36 1b 01 00       	call   f01147ce <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 6a 56 13 f0       	push   $0xf013566a
f0102caa:	50                   	push   %eax
f0102cab:	e8 76 e5 02 00       	call   f0131226 <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 86 23 01 00       	call   f0115042 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 7c 56 13 f0       	push   $0xf013567c
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 b2 56 13 f0       	push   $0xf01356b2
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 27 e5 02 00       	call   f0131226 <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 94 e3 00 00       	call   f011109f <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 ba 56 13 f0       	push   $0xf01356ba
f0102d20:	50                   	push   %eax
f0102d21:	e8 00 e5 02 00       	call   f0131226 <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 d0 e5 00 00       	call   f0111302 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 c2 56 13 f0       	push   $0xf01356c2
f0102d47:	50                   	push   %eax
f0102d48:	e8 d9 e4 02 00       	call   f0131226 <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 f2 e5 00 00       	call   f011134b <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 ca 56 13 f0       	push   $0xf01356ca
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 b5 e4 02 00       	call   f0131226 <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 12 e7 00 00       	call   f011148f <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 d1 56 13 f0       	push   $0xf01356d1
f0102d8f:	50                   	push   %eax
f0102d90:	e8 91 e4 02 00       	call   f0131226 <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 47 e8 00 00       	call   f01115e8 <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 d8 56 13 f0       	push   $0xf01356d8
f0102db3:	50                   	push   %eax
f0102db4:	e8 6d e4 02 00       	call   f0131226 <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 5b e8 00 00       	call   f0111620 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 dc 56 13 f0       	push   $0xf01356dc
f0102de2:	50                   	push   %eax
f0102de3:	e8 3e e4 02 00       	call   f0131226 <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 e4 56 13 f0       	push   $0xf01356e4
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 dc 56 13 f0       	push   $0xf01356dc
f0102e1f:	50                   	push   %eax
f0102e20:	e8 01 e4 02 00       	call   f0131226 <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 34 57 13 f0       	push   $0xf0135734
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 e0 55 13 f0       	push   $0xf01355e0
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 c4 e3 02 00       	call   f0131226 <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 e3 55 13 f0       	push   $0xf01355e3
f0102e79:	50                   	push   %eax
f0102e7a:	e8 a7 e3 02 00       	call   f0131226 <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 7c 51 13 f0       	push   $0xf013517c
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 e6 55 13 f0       	push   $0xf01355e6
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 70 e3 02 00       	call   f0131226 <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 e9 55 13 f0       	push   $0xf01355e9
f0102ecd:	50                   	push   %eax
f0102ece:	e8 53 e3 02 00       	call   f0131226 <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 ac 51 13 f0       	push   $0xf01351ac
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 ec 55 13 f0       	push   $0xf01355ec
f0102f01:	50                   	push   %eax
f0102f02:	e8 1f e3 02 00       	call   f0131226 <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 ef 55 13 f0       	push   $0xf01355ef
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 02 e3 02 00       	call   f0131226 <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 d8 51 13 f0       	push   $0xf01351d8
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 dc 56 13 f0       	push   $0xf01356dc
f0102f50:	50                   	push   %eax
f0102f51:	e8 d0 e2 02 00       	call   f0131226 <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 04 e5 02 00       	call   f013147a <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 50 54 13 f0       	push   $0xf0135450
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 59 46 01 00       	call   f0117609 <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 d2 94 01 00       	call   f011c492 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 60 a8 01 00       	call   f011d834 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 a0 54 13 f0       	push   $0xf01354a0
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 fc 45 01 00       	call   f0117609 <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 42 6f 01 00       	call   f0119f5c <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 8b 81 01 00       	call   f011b1b2 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 f0 54 13 f0       	push   $0xf01354f0
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 ac 45 01 00       	call   f0117609 <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 fd 57 01 00       	call   f0118867 <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 78 57 13 f0       	push   $0xf0135778
f0103084:	50                   	push   %eax
f0103085:	e8 9c e1 02 00       	call   f0131226 <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 c3 ed 01 00       	call   f0121e6b <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 6a cc 01 00       	call   f011fd19 <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 7e 57 13 f0       	push   $0xf013577e
f01030c9:	50                   	push   %eax
f01030ca:	e8 57 e1 02 00       	call   f0131226 <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 8c 07 02 00       	call   f0123867 <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 88 57 13 f0       	push   $0xf0135788
f01030f2:	50                   	push   %eax
f01030f3:	e8 2e e1 02 00       	call   f0131226 <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 33 1c 02 00       	call   f0124d37 <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 92 57 13 f0       	push   $0xf0135792
f010311b:	50                   	push   %eax
f010311c:	e8 05 e1 02 00       	call   f0131226 <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 a5 aa 02 00       	call   f012dbdb <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 05 e7 02 00       	call   f013186d <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 16 e8 02 00       	call   f01319ad <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 9c 57 13 f0       	push   $0xf013579c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 b3 57 13 f0       	push   $0xf01357b3
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 78 26 78 f0 00 	movl   $0x0,0xf0782678
f01031ca:	00 00 00 
f01031cd:	c7 05 7c 26 78 f0 00 	movl   $0x0,0xf078267c
f01031d4:	00 00 00 
f01031d7:	c7 05 84 26 78 f0 00 	movl   $0x0,0xf0782684
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 d0 57 13 f0       	push   $0xf01357d0
f010322d:	6a 59                	push   $0x59
f010322f:	68 b3 57 13 f0       	push   $0xf01357b3
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103261:	8b 1d 9c 25 78 f0    	mov    0xf078259c,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f0103293:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f01032ac:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 84 26 78 f0       	mov    %eax,0xf0782684
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 9c 25 78 f0    	mov    0xf078259c,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 78 26 78 f0       	mov    0xf0782678,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 f3 57 13 f0       	push   $0xf01357f3
f010334c:	6a 78                	push   $0x78
f010334e:	68 b3 57 13 f0       	push   $0xf01357b3
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 84 26 78 f0       	mov    %eax,0xf0782684
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 d0 57 13 f0       	push   $0xf01357d0
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 b3 57 13 f0       	push   $0xf01357b3
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f010344f:	8b 1d 9c 25 78 f0    	mov    0xf078259c,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f0103481:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f010349a:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 84 26 78 f0       	mov    %eax,0xf0782684
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 77 45 00 00       	call   f0107a77 <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 14 58 13 f0       	push   $0xf0135814
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 b3 57 13 f0       	push   $0xf01357b3
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 18 43 00 00       	call   f0107885 <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 fb 44 00 00       	call   f0107aa3 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 43 dd 02 00       	call   f0131308 <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 20 26 78 f0       	mov    0xf0782620,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 44 58 13 f0       	push   $0xf0135844
f0103679:	68 6a 58 13 f0       	push   $0xf013586a
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 b3 57 13 f0       	push   $0xf01357b3
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 44 58 13 f0       	push   $0xf0135844
f0103729:	68 6a 58 13 f0       	push   $0xf013586a
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 b3 57 13 f0       	push   $0xf01357b3
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 44 58 13 f0       	push   $0xf0135844
f01037ec:	68 6a 58 13 f0       	push   $0xf013586a
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 b3 57 13 f0       	push   $0xf01357b3
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 80 58 13 f0       	push   $0xf0135880
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 b3 57 13 f0       	push   $0xf01357b3
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 ac 58 13 f0       	push   $0xf01358ac
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 b3 57 13 f0       	push   $0xf01357b3
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 f8 58 13 f0       	push   $0xf01358f8
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 b3 57 13 f0       	push   $0xf01357b3
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 d3 40 00 00       	call   f0107bad <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 b8 3e 00 00       	call   f0107a77 <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 20 3d 00 00       	call   f0107950 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 fb 3c 00 00       	call   f0107950 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 bd 3c 00 00       	call   f0107950 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 af 3b 00 00       	call   f0107885 <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 a5 3d 00 00       	call   f0107aa3 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 ea d5 02 00       	call   f0131308 <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 ff 3c 00 00       	call   f0107a77 <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 78 26 78 f0       	mov    0xf0782678,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 80 26 78 f0       	mov    0xf0782680,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 80 26 78 f0       	mov    %eax,0xf0782680
f0103e01:	a1 80 26 78 f0       	mov    0xf0782680,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 49 3a 00 00       	call   f0107885 <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 3f 3c 00 00       	call   f0107aa3 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 84 d4 02 00       	call   f0131308 <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 44 58 13 f0       	push   $0xf0135844
f0103ea2:	68 6a 58 13 f0       	push   $0xf013586a
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 b3 57 13 f0       	push   $0xf01357b3
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 74 59 13 f0       	push   $0xf0135974
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 42 d9 02 00       	call   f01319ad <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 98 59 13 f0       	push   $0xf0135998
f0104168:	6a 33                	push   $0x33
f010416a:	68 f4 59 13 f0       	push   $0xf01359f4
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 98 59 13 f0       	push   $0xf0135998
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 f4 59 13 f0       	push   $0xf01359f4
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 08 5a 13 f0       	push   $0xf0135a08
f01044ae:	68 16 5a 13 f0       	push   $0xf0135a16
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 2b 5a 13 f0       	push   $0xf0135a2b
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 3c 5a 13 f0       	push   $0xf0135a3c
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 2b 5a 13 f0       	push   $0xf0135a2b
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 2b 5a 13 f0       	push   $0xf0135a2b
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 08 5a 13 f0       	push   $0xf0135a08
f01045f7:	68 16 5a 13 f0       	push   $0xf0135a16
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0104620:	6a 45                	push   $0x45
f0104622:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 80 5a 13 f0       	push   $0xf0135a80
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 a8 bc 02 00       	call   f01303d9 <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 18 26 78 f0 01 	movl   $0x1,0xf0782618
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010475a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 51 bc 02 00       	call   f0130416 <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 8b 52 00 00       	call   f0109a6c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 40 26 78 f0 01 	movb   $0x1,0xf0782640
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 51 30 00 00       	call   f0107885 <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 a8 25 78 f0       	mov    %eax,0xf07825a8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 38 30 00 00       	call   f0107885 <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 ec 25 78 f0       	mov    %eax,0xf07825ec
#endif
	quantums[0] = quantum;
f0104855:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 0c 26 78 f0 00 	movl   $0x0,0xf078260c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 b4 5a 13 f0       	push   $0xf0135ab4
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 2b 5a 13 f0       	push   $0xf0135a2b
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 c8 25 78 f0 00 	movl   $0x0,0xf07825c8
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 fc 25 78 f0       	push   $0xf07825fc
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 b4 25 78 f0       	push   $0xf07825b4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 24 30 00 00       	call   f0107950 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 0a 30 00 00       	call   f0107950 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 5f 5a 13 f0       	push   $0xf0135a5f
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 2b 5a 13 f0       	push   $0xf0135a2b
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 fc 25 78 f0       	push   $0xf07825fc
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 00 26 78 f0       	mov    %eax,0xf0782600
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 fc 25 78 f0       	mov    %eax,0xf07825fc
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 08 26 78 f0       	mov    0xf0782608,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 08 26 78 f0       	mov    %eax,0xf0782608
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 9b 92 00 00       	call   f010de06 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 60 63 00 00       	call   f010aeda <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 b4 25 78 f0       	push   $0xf07825b4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 b8 25 78 f0       	mov    %eax,0xf07825b8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 b4 25 78 f0       	mov    %eax,0xf07825b4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 c0 25 78 f0       	mov    0xf07825c0,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 c0 25 78 f0       	mov    %eax,0xf07825c0
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 e4 5a 13 f0       	push   $0xf0135ae4
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 06 5b 13 f0       	push   $0xf0135b06
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104cac:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 10 5b 13 f0       	push   $0xf0135b10
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 2c 5b 13 f0       	push   $0xf0135b2c
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 60 5b 13 f0       	push   $0xf0135b60
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 06 5b 13 f0       	push   $0xf0135b06
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 88 5b 13 f0       	push   $0xf0135b88
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 2c 5b 13 f0       	push   $0xf0135b2c
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 ac 5b 13 f0       	push   $0xf0135bac
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 06 5b 13 f0       	push   $0xf0135b06
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f0104e28:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 ce 5b 13 f0       	push   $0xf0135bce
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104e9f:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 ec 5b 13 f0       	push   $0xf0135bec
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 18 5c 13 f0       	push   $0xf0135c18
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 9a 4b 00 00       	call   f0109ac0 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 2b 5c 13 f0       	push   $0xf0135c2b
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104f59:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 31 5c 13 f0       	push   $0xf0135c31
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 2c 5b 13 f0       	push   $0xf0135b2c
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 4c 5c 13 f0       	push   $0xf0135c4c
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 18 5c 13 f0       	push   $0xf0135c18
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 17 4a 00 00       	call   f0109ac0 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 2b 5c 13 f0       	push   $0xf0135c2b
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 88 5b 13 f0       	push   $0xf0135b88
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 2c 5b 13 f0       	push   $0xf0135b2c
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 80 5c 13 f0       	push   $0xf0135c80
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 18 5c 13 f0       	push   $0xf0135c18
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 1f 49 00 00       	call   f0109ac0 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 2b 5c 13 f0       	push   $0xf0135c2b
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01051d4:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 ce 5b 13 f0       	push   $0xf0135bce
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f010528d:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0105306:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 5f 5a 13 f0       	push   $0xf0135a5f
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 ac 5c 13 f0       	push   $0xf0135cac
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 14 44 00 00       	call   f0109ac0 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 2b 5c 13 f0       	push   $0xf0135c2b
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f01056e6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 d4 5c 13 f0       	push   $0xf0135cd4
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 5f 5a 13 f0       	push   $0xf0135a5f
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 97 42 00 00       	call   f0109ac0 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 2b 5c 13 f0       	push   $0xf0135c2b
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 40 26 78 f0       	mov    0xf0782640,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 00 5d 13 f0       	push   $0xf0135d00
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 b3 41 00 00       	call   f0109ac0 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 2b 5c 13 f0       	push   $0xf0135c2b
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f0105947:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 28 5d 13 f0       	push   $0xf0135d28
f0105991:	68 16 5a 13 f0       	push   $0xf0135a16
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 2b 5a 13 f0       	push   $0xf0135a2b
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 48 5d 13 f0       	push   $0xf0135d48
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 ef 40 00 00       	call   f0109ac0 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 2b 5c 13 f0       	push   $0xf0135c2b
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 28 83 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 c6 21 00 00       	call   f0107c61 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b2 20 00 00       	call   f0107bad <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 df 21 00 00       	call   f0107d80 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 c5 21 00 00       	call   f0107da4 <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ac 1c 78 f0 01 	movl   $0x1,0xf0781cac
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 28 19 f0    	mov    %ax,0xf01928b0
	if (!didinit)
f0105d5d:	a1 ac 1c 78 f0       	mov    0xf0781cac,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 3c 26 78 f0       	mov    %eax,0xf078263c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 36 b5 02 00       	call   f0131308 <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 74 5d 13 f0       	push   $0xf0135d74
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 a8 5d 13 f0       	push   $0xf0135da8
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 6c 26 78 f0       	mov    %eax,0xf078266c
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 a0 18 f0 	movl   $0xf018a000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 74 5d 13 f0       	push   $0xf0135d74
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 a8 5d 13 f0       	push   $0xf0135da8
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 d0 25 78 f0    	mov    0xf07825d0,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 14 26 78 f0       	mov    %eax,0xf0782614
	memset(frames_info, 0, array_size);
f0105eca:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 2b b4 02 00       	call   f0131308 <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 9c 25 78 f0       	mov    %eax,0xf078259c
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 9c 25 78 f0       	mov    0xf078259c,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 f6 b3 02 00       	call   f0131308 <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 65 9f 02 00       	call   f012fe8c <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 c8 5d 13 f0       	push   $0xf0135dc8
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 b0 1c 78 f0       	mov    %eax,0xf0781cb0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 94 b3 02 00       	call   f0131308 <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 74 5d 13 f0       	push   $0xf0135d74
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 a8 5d 13 f0       	push   $0xf0135da8
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 3c 26 78 f0    	mov    0xf078263c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 66 a6 02 00       	call   f0130673 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 b0 25 78 f0 19 	movl   $0x19,0xf07825b0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 38 26 78 f0 7c 	movl   $0xf078277c,0xf0782638
f0106035:	27 78 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 38 26 78 f0       	mov    %eax,0xf0782638

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 38 26 78 f0    	mov    0xf0782638,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 38 26 78 f0       	mov    %eax,0xf0782638

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 f0 5d 13 f0       	push   $0xf0135df0
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 a8 5d 13 f0       	push   $0xf0135da8
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 74 5d 13 f0       	push   $0xf0135d74
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 a8 5d 13 f0       	push   $0xf0135da8
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 d0 25 78 f0       	mov    %eax,0xf07825d0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 20 5e 13 f0       	push   $0xf0135e20
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 41 5e 13 f0       	push   $0xf0135e41
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 28 19 f0 	lgdtl  0xf01928f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 74 5d 13 f0       	push   $0xf0135d74
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 a8 5d 13 f0       	push   $0xf0135da8
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 74 5d 13 f0       	push   $0xf0135d74
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 a8 5d 13 f0       	push   $0xf0135da8
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 60 5e 13 f0       	push   $0xf0135e60
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 85 5e 13 f0       	push   $0xf0135e85
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 d8 25 78 f0 00 	movl   $0x0,0xf07825d8
f0106531:	00 00 00 
f0106534:	c7 05 dc 25 78 f0 00 	movl   $0x0,0xf07825dc
f010653b:	00 00 00 
f010653e:	c7 05 e4 25 78 f0 00 	movl   $0x0,0xf07825e4
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 78 25 78 f0 00 	movl   $0x0,0xf0782578
f010654f:	00 00 00 
f0106552:	c7 05 7c 25 78 f0 00 	movl   $0x0,0xf078257c
f0106559:	00 00 00 
f010655c:	c7 05 84 25 78 f0 00 	movl   $0x0,0xf0782584
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 20 26 78 f0 00 	movl   $0xf0001000,0xf0782620
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 44 26 78 f0 00 	movl   $0xf0002000,0xf0782644
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 20 26 78 f0    	mov    0xf0782620,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 c3 5e 13 f0       	push   $0xf0135ec3
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106677:	8b 1d 14 26 78 f0    	mov    0xf0782614,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f01066a9:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f01066c2:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 e0 5e 13 f0       	push   $0xf0135ee0
f0106752:	6a 64                	push   $0x64
f0106754:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0106814:	6a 70                	push   $0x70
f0106816:	68 c3 5e 13 f0       	push   $0xf0135ec3
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106848:	8b 1d 14 26 78 f0    	mov    0xf0782614,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f010687a:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f0106893:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 1c aa 02 00       	call   f0131308 <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 14 5f 13 f0       	push   $0xf0135f14
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 61 5f 13 f0       	push   $0xf0135f61
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d0 12 00 00       	call   f0107cbc <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 d8 25 78 f0       	mov    0xf07825d8,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 85 0f 00 00       	call   f0107a77 <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 80 5f 13 f0       	push   $0xf0135f80
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 43 5b 00 00       	call   f010c6af <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 d7 0e 00 00       	call   f0107a77 <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 80 5f 13 f0       	push   $0xf0135f80
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 6a 0c 00 00       	call   f0107885 <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 af 5f 13 f0       	push   $0xf0135faf
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 46 0e 00 00       	call   f0107aa3 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 91 a6 02 00       	call   f0131308 <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 80 5f 13 f0       	push   $0xf0135f80
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 d9 a5 02 00       	call   f0131308 <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 cc 5f 13 f0       	push   $0xf0135fcc
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 35 0b 00 00       	call   f0107a77 <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 80 5f 13 f0       	push   $0xf0135f80
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 c3 5e 13 f0       	push   $0xf0135ec3
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 d8 25 78 f0       	mov    0xf07825d8,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 e0 25 78 f0       	mov    0xf07825e0,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 e0 25 78 f0       	mov    %eax,0xf07825e0
f0107034:	a1 e0 25 78 f0       	mov    0xf07825e0,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 78 25 78 f0       	mov    0xf0782578,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 80 25 78 f0       	mov    %eax,0xf0782580
f010706f:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 e8 25 78 f0       	mov    %eax,0xf07825e8
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 5f 07 00 00       	call   f0107885 <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ac 25 78 f0       	mov    %eax,0xf07825ac
	if (shares == NULL)
f010712e:	a1 ac 25 78 f0       	mov    0xf07825ac,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 f0 5f 13 f0       	push   $0xf0135ff0
f010713f:	6a 21                	push   $0x21
f0107141:	68 34 60 13 f0       	push   $0xf0136034
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 8d a1 02 00       	call   f0131308 <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 6d a0 02 00       	call   f0131308 <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 06 9f 02 00       	call   f0131226 <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a0 05 00 00       	call   f0107950 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 2e 9f 02 00       	call   f0131308 <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 70 04 00 00       	call   f0107885 <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 55 60 13 f0       	push   $0xf0136055
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 34 60 13 f0       	push   $0xf0136034
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 54 05 00 00       	call   f0107a77 <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 21 04 00 00       	call   f0107950 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	83 ec 18             	sub    $0x18,%esp
f01075a2:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a5:	88 45 f4             	mov    %al,-0xc(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f01075a8:	83 ec 04             	sub    $0x4,%esp
f01075ab:	68 74 60 13 f0       	push   $0xf0136074
f01075b0:	68 10 01 00 00       	push   $0x110
f01075b5:	68 34 60 13 f0       	push   $0xf0136034
f01075ba:	e8 46 8c ff ff       	call   f0100205 <_panic>

f01075bf <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01075bf:	55                   	push   %ebp
f01075c0:	89 e5                	mov    %esp,%ebp
f01075c2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f01075c5:	83 ec 04             	sub    $0x4,%esp
f01075c8:	68 a8 60 13 f0       	push   $0xf01360a8
f01075cd:	68 23 01 00 00       	push   $0x123
f01075d2:	68 34 60 13 f0       	push   $0xf0136034
f01075d7:	e8 29 8c ff ff       	call   f0100205 <_panic>

f01075dc <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01075dc:	55                   	push   %ebp
f01075dd:	89 e5                	mov    %esp,%ebp
f01075df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01075e2:	83 ec 04             	sub    $0x4,%esp
f01075e5:	68 d8 60 13 f0       	push   $0xf01360d8
f01075ea:	68 3a 01 00 00       	push   $0x13a
f01075ef:	68 34 60 13 f0       	push   $0xf0136034
f01075f4:	e8 0c 8c ff ff       	call   f0100205 <_panic>

f01075f9 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01075f9:	55                   	push   %ebp
f01075fa:	89 e5                	mov    %esp,%ebp
f01075fc:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0107601:	83 f8 01             	cmp    $0x1,%eax
f0107604:	75 04                	jne    f010760a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107606:	b0 01                	mov    $0x1,%al
f0107608:	eb 02                	jmp    f010760c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010760a:	b0 00                	mov    $0x0,%al
f010760c:	5d                   	pop    %ebp
f010760d:	c3                   	ret    

f010760e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010760e:	55                   	push   %ebp
f010760f:	89 e5                	mov    %esp,%ebp
f0107611:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0107616:	83 f8 02             	cmp    $0x2,%eax
f0107619:	75 04                	jne    f010761f <isKHeapPlacementStrategyBESTFIT+0x11>
f010761b:	b0 01                	mov    $0x1,%al
f010761d:	eb 02                	jmp    f0107621 <isKHeapPlacementStrategyBESTFIT+0x13>
f010761f:	b0 00                	mov    $0x0,%al
f0107621:	5d                   	pop    %ebp
f0107622:	c3                   	ret    

f0107623 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107623:	55                   	push   %ebp
f0107624:	89 e5                	mov    %esp,%ebp
f0107626:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f010762b:	83 f8 03             	cmp    $0x3,%eax
f010762e:	75 04                	jne    f0107634 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107630:	b0 01                	mov    $0x1,%al
f0107632:	eb 02                	jmp    f0107636 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107634:	b0 00                	mov    $0x0,%al
f0107636:	5d                   	pop    %ebp
f0107637:	c3                   	ret    

f0107638 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107638:	55                   	push   %ebp
f0107639:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763b:	8b 45 08             	mov    0x8(%ebp),%eax
f010763e:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0107644:	29 d0                	sub    %edx,%eax
f0107646:	c1 f8 03             	sar    $0x3,%eax
f0107649:	89 c2                	mov    %eax,%edx
f010764b:	89 d0                	mov    %edx,%eax
f010764d:	c1 e0 02             	shl    $0x2,%eax
f0107650:	01 d0                	add    %edx,%eax
f0107652:	c1 e0 02             	shl    $0x2,%eax
f0107655:	01 d0                	add    %edx,%eax
f0107657:	c1 e0 02             	shl    $0x2,%eax
f010765a:	01 d0                	add    %edx,%eax
f010765c:	89 c1                	mov    %eax,%ecx
f010765e:	c1 e1 08             	shl    $0x8,%ecx
f0107661:	01 c8                	add    %ecx,%eax
f0107663:	89 c1                	mov    %eax,%ecx
f0107665:	c1 e1 10             	shl    $0x10,%ecx
f0107668:	01 c8                	add    %ecx,%eax
f010766a:	01 c0                	add    %eax,%eax
f010766c:	01 d0                	add    %edx,%eax
}
f010766e:	5d                   	pop    %ebp
f010766f:	c3                   	ret    

f0107670 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107670:	55                   	push   %ebp
f0107671:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107673:	ff 75 08             	pushl  0x8(%ebp)
f0107676:	e8 bd ff ff ff       	call   f0107638 <to_frame_number>
f010767b:	83 c4 04             	add    $0x4,%esp
f010767e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107681:	c9                   	leave  
f0107682:	c3                   	ret    

f0107683 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107683:	55                   	push   %ebp
f0107684:	89 e5                	mov    %esp,%ebp
f0107686:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107689:	8b 45 08             	mov    0x8(%ebp),%eax
f010768c:	c1 e8 0c             	shr    $0xc,%eax
f010768f:	89 c2                	mov    %eax,%edx
f0107691:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0107696:	39 c2                	cmp    %eax,%edx
f0107698:	72 14                	jb     f01076ae <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010769a:	83 ec 04             	sub    $0x4,%esp
f010769d:	68 08 61 13 f0       	push   $0xf0136108
f01076a2:	6a 55                	push   $0x55
f01076a4:	68 2d 61 13 f0       	push   $0xf013612d
f01076a9:	e8 57 8b ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01076ae:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01076b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01076b7:	c1 e8 0c             	shr    $0xc,%eax
f01076ba:	89 c1                	mov    %eax,%ecx
f01076bc:	89 c8                	mov    %ecx,%eax
f01076be:	01 c0                	add    %eax,%eax
f01076c0:	01 c8                	add    %ecx,%eax
f01076c2:	c1 e0 03             	shl    $0x3,%eax
f01076c5:	01 d0                	add    %edx,%eax
}
f01076c7:	c9                   	leave  
f01076c8:	c3                   	ret    

f01076c9 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01076c9:	55                   	push   %ebp
f01076ca:	89 e5                	mov    %esp,%ebp
f01076cc:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01076cf:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f01076d6:	00 00 00 
f01076d9:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f01076e0:	00 00 00 
f01076e3:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f01076ea:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01076ed:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f01076f4:	00 00 00 
f01076f7:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f01076fe:	00 00 00 
f0107701:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f0107708:	00 00 00 
	uint32 arr_size = 0;
f010770b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107712:	c7 05 c4 25 78 f0 ff 	movl   $0x9fff,0xf07825c4
f0107719:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010771c:	c7 05 98 25 78 f0 00 	movl   $0xf6000000,0xf0782598
f0107723:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107726:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010772d:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f0107732:	c1 e0 04             	shl    $0x4,%eax
f0107735:	89 c2                	mov    %eax,%edx
f0107737:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010773a:	01 d0                	add    %edx,%eax
f010773c:	48                   	dec    %eax
f010773d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107740:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107743:	ba 00 00 00 00       	mov    $0x0,%edx
f0107748:	f7 75 f0             	divl   -0x10(%ebp)
f010774b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010774e:	29 d0                	sub    %edx,%eax
f0107750:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107753:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107758:	6a 03                	push   $0x3
f010775a:	ff 75 f4             	pushl  -0xc(%ebp)
f010775d:	68 00 00 00 f6       	push   $0xf6000000
f0107762:	50                   	push   %eax
f0107763:	e8 bd 13 00 00       	call   f0108b25 <allocate_chunk>
f0107768:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f010776b:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f0107770:	83 ec 0c             	sub    $0xc,%esp
f0107773:	50                   	push   %eax
f0107774:	e8 0b a5 02 00       	call   f0131c84 <initialize_MemBlocksList>
f0107779:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f010777c:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0107781:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107784:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107787:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010778d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107790:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107793:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107798:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010779b:	89 c2                	mov    %eax,%edx
f010779d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077a0:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01077a3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01077a7:	75 14                	jne    f01077bd <initialize_dyn_block_system+0xf4>
f01077a9:	83 ec 04             	sub    $0x4,%esp
f01077ac:	68 47 61 13 f0       	push   $0xf0136147
f01077b1:	6a 30                	push   $0x30
f01077b3:	68 65 61 13 f0       	push   $0xf0136165
f01077b8:	e8 48 8a ff ff       	call   f0100205 <_panic>
f01077bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	85 c0                	test   %eax,%eax
f01077c4:	74 10                	je     f01077d6 <initialize_dyn_block_system+0x10d>
f01077c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c9:	8b 00                	mov    (%eax),%eax
f01077cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077ce:	8b 52 04             	mov    0x4(%edx),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 0b                	jmp    f01077e1 <initialize_dyn_block_system+0x118>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	8b 40 04             	mov    0x4(%eax),%eax
f01077dc:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f01077e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e4:	8b 40 04             	mov    0x4(%eax),%eax
f01077e7:	85 c0                	test   %eax,%eax
f01077e9:	74 0f                	je     f01077fa <initialize_dyn_block_system+0x131>
f01077eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077ee:	8b 40 04             	mov    0x4(%eax),%eax
f01077f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077f4:	8b 12                	mov    (%edx),%edx
f01077f6:	89 10                	mov    %edx,(%eax)
f01077f8:	eb 0a                	jmp    f0107804 <initialize_dyn_block_system+0x13b>
f01077fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077fd:	8b 00                	mov    (%eax),%eax
f01077ff:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0107804:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010780d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107810:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107817:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010781c:	48                   	dec    %eax
f010781d:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107822:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107826:	75 14                	jne    f010783c <initialize_dyn_block_system+0x173>
f0107828:	83 ec 04             	sub    $0x4,%esp
f010782b:	68 78 61 13 f0       	push   $0xf0136178
f0107830:	6a 32                	push   $0x32
f0107832:	68 65 61 13 f0       	push   $0xf0136165
f0107837:	e8 c9 89 ff ff       	call   f0100205 <_panic>
f010783c:	8b 15 24 26 78 f0    	mov    0xf0782624,%edx
f0107842:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107845:	89 10                	mov    %edx,(%eax)
f0107847:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010784a:	8b 00                	mov    (%eax),%eax
f010784c:	85 c0                	test   %eax,%eax
f010784e:	74 0d                	je     f010785d <initialize_dyn_block_system+0x194>
f0107850:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0107855:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107858:	89 50 04             	mov    %edx,0x4(%eax)
f010785b:	eb 08                	jmp    f0107865 <initialize_dyn_block_system+0x19c>
f010785d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107860:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0107865:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107868:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010786d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107870:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107877:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010787c:	40                   	inc    %eax
f010787d:	a3 30 26 78 f0       	mov    %eax,0xf0782630

}
f0107882:	90                   	nop
f0107883:	c9                   	leave  
f0107884:	c3                   	ret    

f0107885 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107885:	55                   	push   %ebp
f0107886:	89 e5                	mov    %esp,%ebp
f0107888:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f010788b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107892:	8b 55 08             	mov    0x8(%ebp),%edx
f0107895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107898:	01 d0                	add    %edx,%eax
f010789a:	48                   	dec    %eax
f010789b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010789e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01078a6:	f7 75 f0             	divl   -0x10(%ebp)
f01078a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078ac:	29 d0                	sub    %edx,%eax
f01078ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f01078b1:	e8 43 fd ff ff       	call   f01075f9 <isKHeapPlacementStrategyFIRSTFIT>
f01078b6:	84 c0                	test   %al,%al
f01078b8:	74 13                	je     f01078cd <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f01078ba:	83 ec 0c             	sub    $0xc,%esp
f01078bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01078c0:	e8 81 a7 02 00       	call   f0132046 <alloc_block_FF>
f01078c5:	83 c4 10             	add    $0x10,%esp
f01078c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078cb:	eb 36                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f01078cd:	e8 3c fd ff ff       	call   f010760e <isKHeapPlacementStrategyBESTFIT>
f01078d2:	84 c0                	test   %al,%al
f01078d4:	74 13                	je     f01078e9 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f01078d6:	83 ec 0c             	sub    $0xc,%esp
f01078d9:	ff 75 e8             	pushl  -0x18(%ebp)
f01078dc:	e8 32 a9 02 00       	call   f0132213 <alloc_block_BF>
f01078e1:	83 c4 10             	add    $0x10,%esp
f01078e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078e7:	eb 1a                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01078e9:	e8 35 fd ff ff       	call   f0107623 <isKHeapPlacementStrategyNEXTFIT>
f01078ee:	84 c0                	test   %al,%al
f01078f0:	74 11                	je     f0107903 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f01078f2:	83 ec 0c             	sub    $0xc,%esp
f01078f5:	ff 75 e8             	pushl  -0x18(%ebp)
f01078f8:	e8 27 ab 02 00       	call   f0132424 <alloc_block_NF>
f01078fd:	83 c4 10             	add    $0x10,%esp
f0107900:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107903:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107907:	74 40                	je     f0107949 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010790c:	8b 50 08             	mov    0x8(%eax),%edx
f010790f:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107914:	6a 03                	push   $0x3
f0107916:	ff 75 e8             	pushl  -0x18(%ebp)
f0107919:	52                   	push   %edx
f010791a:	50                   	push   %eax
f010791b:	e8 05 12 00 00       	call   f0108b25 <allocate_chunk>
f0107920:	83 c4 10             	add    $0x10,%esp
f0107923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010792a:	75 16                	jne    f0107942 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f010792c:	83 ec 0c             	sub    $0xc,%esp
f010792f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107932:	e8 82 a4 02 00       	call   f0131db9 <insert_sorted_allocList>
f0107937:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f010793a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010793d:	8b 40 08             	mov    0x8(%eax),%eax
f0107940:	eb 0c                	jmp    f010794e <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107942:	b8 00 00 00 00       	mov    $0x0,%eax
f0107947:	eb 05                	jmp    f010794e <kmalloc+0xc9>
	}
	return NULL;
f0107949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010794e:	c9                   	leave  
f010794f:	c3                   	ret    

f0107950 <kfree>:
void kfree(void* virtual_address)
{
f0107950:	55                   	push   %ebp
f0107951:	89 e5                	mov    %esp,%ebp
f0107953:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107956:	8b 45 08             	mov    0x8(%ebp),%eax
f0107959:	83 ec 08             	sub    $0x8,%esp
f010795c:	50                   	push   %eax
f010795d:	68 88 25 78 f0       	push   $0xf0782588
f0107962:	e8 fa a3 02 00       	call   f0131d61 <find_block>
f0107967:	83 c4 10             	add    $0x10,%esp
f010796a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f010796d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107971:	0f 84 fd 00 00 00    	je     f0107a74 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107977:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010797b:	75 14                	jne    f0107991 <kfree+0x41>
f010797d:	83 ec 04             	sub    $0x4,%esp
f0107980:	68 47 61 13 f0       	push   $0xf0136147
f0107985:	6a 5a                	push   $0x5a
f0107987:	68 65 61 13 f0       	push   $0xf0136165
f010798c:	e8 74 88 ff ff       	call   f0100205 <_panic>
f0107991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107994:	8b 00                	mov    (%eax),%eax
f0107996:	85 c0                	test   %eax,%eax
f0107998:	74 10                	je     f01079aa <kfree+0x5a>
f010799a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010799d:	8b 00                	mov    (%eax),%eax
f010799f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079a2:	8b 52 04             	mov    0x4(%edx),%edx
f01079a5:	89 50 04             	mov    %edx,0x4(%eax)
f01079a8:	eb 0b                	jmp    f01079b5 <kfree+0x65>
f01079aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079ad:	8b 40 04             	mov    0x4(%eax),%eax
f01079b0:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f01079b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b8:	8b 40 04             	mov    0x4(%eax),%eax
f01079bb:	85 c0                	test   %eax,%eax
f01079bd:	74 0f                	je     f01079ce <kfree+0x7e>
f01079bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079c2:	8b 40 04             	mov    0x4(%eax),%eax
f01079c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079c8:	8b 12                	mov    (%edx),%edx
f01079ca:	89 10                	mov    %edx,(%eax)
f01079cc:	eb 0a                	jmp    f01079d8 <kfree+0x88>
f01079ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d1:	8b 00                	mov    (%eax),%eax
f01079d3:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f01079d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01079e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01079eb:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01079f0:	48                   	dec    %eax
f01079f1:	a3 94 25 78 f0       	mov    %eax,0xf0782594
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f01079f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f9:	8b 40 08             	mov    0x8(%eax),%eax
f01079fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a07:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107a0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a14:	8b 50 08             	mov    0x8(%eax),%edx
f0107a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a1a:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a1d:	01 c2                	add    %eax,%edx
f0107a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a22:	01 d0                	add    %edx,%eax
f0107a24:	48                   	dec    %eax
f0107a25:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107a28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a30:	f7 75 e4             	divl   -0x1c(%ebp)
f0107a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a36:	29 d0                	sub    %edx,%eax
f0107a38:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a41:	eb 1b                	jmp    f0107a5e <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107a43:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107a48:	83 ec 08             	sub    $0x8,%esp
f0107a4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a4e:	50                   	push   %eax
f0107a4f:	e8 22 f4 ff ff       	call   f0106e76 <unmap_frame>
f0107a54:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a57:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a61:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107a64:	72 dd                	jb     f0107a43 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107a66:	83 ec 0c             	sub    $0xc,%esp
f0107a69:	ff 75 f0             	pushl  -0x10(%ebp)
f0107a6c:	e8 80 af 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0107a71:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a74:	90                   	nop
f0107a75:	c9                   	leave  
f0107a76:	c3                   	ret    

f0107a77 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107a77:	55                   	push   %ebp
f0107a78:	89 e5                	mov    %esp,%ebp
f0107a7a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107a7d:	83 ec 0c             	sub    $0xc,%esp
f0107a80:	ff 75 08             	pushl  0x8(%ebp)
f0107a83:	e8 fb fb ff ff       	call   f0107683 <to_frame_info>
f0107a88:	83 c4 10             	add    $0x10,%esp
f0107a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107a8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a92:	74 08                	je     f0107a9c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a97:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a9a:	eb 05                	jmp    f0107aa1 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a9c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107aa1:	c9                   	leave  
f0107aa2:	c3                   	ret    

f0107aa3 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107aa3:	55                   	push   %ebp
f0107aa4:	89 e5                	mov    %esp,%ebp
f0107aa6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107aa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107ab0:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107ab5:	83 ec 04             	sub    $0x4,%esp
f0107ab8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107abb:	52                   	push   %edx
f0107abc:	ff 75 08             	pushl  0x8(%ebp)
f0107abf:	50                   	push   %eax
f0107ac0:	e8 41 f3 ff ff       	call   f0106e06 <get_frame_info>
f0107ac5:	83 c4 10             	add    $0x10,%esp
f0107ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107acb:	83 ec 0c             	sub    $0xc,%esp
f0107ace:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ad1:	e8 9a fb ff ff       	call   f0107670 <to_physical_address>
f0107ad6:	83 c4 10             	add    $0x10,%esp
f0107ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ae0:	74 05                	je     f0107ae7 <kheap_physical_address+0x44>
		return address_physical;
f0107ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ae5:	eb 05                	jmp    f0107aec <kheap_physical_address+0x49>
	return 0;
f0107ae7:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107aec:	c9                   	leave  
f0107aed:	c3                   	ret    

f0107aee <kfreeall>:


void kfreeall()
{
f0107aee:	55                   	push   %ebp
f0107aef:	89 e5                	mov    %esp,%ebp
f0107af1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107af4:	83 ec 04             	sub    $0x4,%esp
f0107af7:	68 9b 61 13 f0       	push   $0xf013619b
f0107afc:	68 89 00 00 00       	push   $0x89
f0107b01:	68 65 61 13 f0       	push   $0xf0136165
f0107b06:	e8 fa 86 ff ff       	call   f0100205 <_panic>

f0107b0b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107b0b:	55                   	push   %ebp
f0107b0c:	89 e5                	mov    %esp,%ebp
f0107b0e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b11:	83 ec 04             	sub    $0x4,%esp
f0107b14:	68 9b 61 13 f0       	push   $0xf013619b
f0107b19:	68 8f 00 00 00       	push   $0x8f
f0107b1e:	68 65 61 13 f0       	push   $0xf0136165
f0107b23:	e8 dd 86 ff ff       	call   f0100205 <_panic>

f0107b28 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107b28:	55                   	push   %ebp
f0107b29:	89 e5                	mov    %esp,%ebp
f0107b2b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b2e:	83 ec 04             	sub    $0x4,%esp
f0107b31:	68 9b 61 13 f0       	push   $0xf013619b
f0107b36:	68 94 00 00 00       	push   $0x94
f0107b3b:	68 65 61 13 f0       	push   $0xf0136165
f0107b40:	e8 c0 86 ff ff       	call   f0100205 <_panic>

f0107b45 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107b45:	55                   	push   %ebp
f0107b46:	89 e5                	mov    %esp,%ebp
f0107b48:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107b4b:	83 ec 04             	sub    $0x4,%esp
f0107b4e:	68 ac 61 13 f0       	push   $0xf01361ac
f0107b53:	68 ab 00 00 00       	push   $0xab
f0107b58:	68 65 61 13 f0       	push   $0xf0136165
f0107b5d:	e8 a3 86 ff ff       	call   f0100205 <_panic>

f0107b62 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107b62:	55                   	push   %ebp
f0107b63:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b68:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0107b6e:	29 d0                	sub    %edx,%eax
f0107b70:	c1 f8 03             	sar    $0x3,%eax
f0107b73:	89 c2                	mov    %eax,%edx
f0107b75:	89 d0                	mov    %edx,%eax
f0107b77:	c1 e0 02             	shl    $0x2,%eax
f0107b7a:	01 d0                	add    %edx,%eax
f0107b7c:	c1 e0 02             	shl    $0x2,%eax
f0107b7f:	01 d0                	add    %edx,%eax
f0107b81:	c1 e0 02             	shl    $0x2,%eax
f0107b84:	01 d0                	add    %edx,%eax
f0107b86:	89 c1                	mov    %eax,%ecx
f0107b88:	c1 e1 08             	shl    $0x8,%ecx
f0107b8b:	01 c8                	add    %ecx,%eax
f0107b8d:	89 c1                	mov    %eax,%ecx
f0107b8f:	c1 e1 10             	shl    $0x10,%ecx
f0107b92:	01 c8                	add    %ecx,%eax
f0107b94:	01 c0                	add    %eax,%eax
f0107b96:	01 d0                	add    %edx,%eax
}
f0107b98:	5d                   	pop    %ebp
f0107b99:	c3                   	ret    

f0107b9a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b9a:	55                   	push   %ebp
f0107b9b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b9d:	ff 75 08             	pushl  0x8(%ebp)
f0107ba0:	e8 bd ff ff ff       	call   f0107b62 <to_frame_number>
f0107ba5:	83 c4 04             	add    $0x4,%esp
f0107ba8:	c1 e0 0c             	shl    $0xc,%eax
}
f0107bab:	c9                   	leave  
f0107bac:	c3                   	ret    

f0107bad <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107bb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bba:	83 ec 04             	sub    $0x4,%esp
f0107bbd:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107bc0:	50                   	push   %eax
f0107bc1:	ff 75 0c             	pushl  0xc(%ebp)
f0107bc4:	ff 75 08             	pushl  0x8(%ebp)
f0107bc7:	e8 e5 ee ff ff       	call   f0106ab1 <get_page_table>
f0107bcc:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd2:	85 c0                	test   %eax,%eax
f0107bd4:	74 75                	je     f0107c4b <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bdc:	c1 ea 0c             	shr    $0xc,%edx
f0107bdf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107be5:	c1 e2 02             	shl    $0x2,%edx
f0107be8:	01 d0                	add    %edx,%eax
f0107bea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107bf0:	c1 e9 0c             	shr    $0xc,%ecx
f0107bf3:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107bf9:	c1 e1 02             	shl    $0x2,%ecx
f0107bfc:	01 ca                	add    %ecx,%edx
f0107bfe:	8b 12                	mov    (%edx),%edx
f0107c00:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107c03:	f7 d1                	not    %ecx
f0107c05:	21 ca                	and    %ecx,%edx
f0107c07:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c0f:	c1 ea 0c             	shr    $0xc,%edx
f0107c12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c18:	c1 e2 02             	shl    $0x2,%edx
f0107c1b:	01 c2                	add    %eax,%edx
f0107c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c23:	c1 e9 0c             	shr    $0xc,%ecx
f0107c26:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c2c:	c1 e1 02             	shl    $0x2,%ecx
f0107c2f:	01 c8                	add    %ecx,%eax
f0107c31:	8b 00                	mov    (%eax),%eax
f0107c33:	0b 45 10             	or     0x10(%ebp),%eax
f0107c36:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c3b:	83 ec 08             	sub    $0x8,%esp
f0107c3e:	50                   	push   %eax
f0107c3f:	6a 00                	push   $0x0
f0107c41:	e8 c8 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107c46:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c49:	eb 14                	jmp    f0107c5f <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c4b:	83 ec 04             	sub    $0x4,%esp
f0107c4e:	68 d3 61 13 f0       	push   $0xf01361d3
f0107c53:	6a 19                	push   $0x19
f0107c55:	68 f0 61 13 f0       	push   $0xf01361f0
f0107c5a:	e8 a6 85 ff ff       	call   f0100205 <_panic>
	}
}
f0107c5f:	c9                   	leave  
f0107c60:	c3                   	ret    

f0107c61 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107c61:	55                   	push   %ebp
f0107c62:	89 e5                	mov    %esp,%ebp
f0107c64:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107c67:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c6e:	83 ec 04             	sub    $0x4,%esp
f0107c71:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107c74:	50                   	push   %eax
f0107c75:	ff 75 0c             	pushl  0xc(%ebp)
f0107c78:	ff 75 08             	pushl  0x8(%ebp)
f0107c7b:	e8 31 ee ff ff       	call   f0106ab1 <get_page_table>
f0107c80:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c86:	85 c0                	test   %eax,%eax
f0107c88:	74 2b                	je     f0107cb5 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c90:	c1 ea 0c             	shr    $0xc,%edx
f0107c93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c99:	c1 e2 02             	shl    $0x2,%edx
f0107c9c:	01 d0                	add    %edx,%eax
f0107c9e:	8b 00                	mov    (%eax),%eax
f0107ca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107ca3:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cad:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107cb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb3:	eb 05                	jmp    f0107cba <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107cb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107cba:	c9                   	leave  
f0107cbb:	c3                   	ret    

f0107cbc <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107cbc:	55                   	push   %ebp
f0107cbd:	89 e5                	mov    %esp,%ebp
f0107cbf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107cc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107cc9:	83 ec 04             	sub    $0x4,%esp
f0107ccc:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ccf:	50                   	push   %eax
f0107cd0:	ff 75 0c             	pushl  0xc(%ebp)
f0107cd3:	ff 75 08             	pushl  0x8(%ebp)
f0107cd6:	e8 d6 ed ff ff       	call   f0106ab1 <get_page_table>
f0107cdb:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce1:	85 c0                	test   %eax,%eax
f0107ce3:	74 2d                	je     f0107d12 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ceb:	c1 ea 0c             	shr    $0xc,%edx
f0107cee:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cf4:	c1 e2 02             	shl    $0x2,%edx
f0107cf7:	01 d0                	add    %edx,%eax
f0107cf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107cff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d02:	83 ec 08             	sub    $0x8,%esp
f0107d05:	50                   	push   %eax
f0107d06:	6a 00                	push   $0x0
f0107d08:	e8 01 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107d0d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107d10:	eb 14                	jmp    f0107d26 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107d12:	83 ec 04             	sub    $0x4,%esp
f0107d15:	68 d3 61 13 f0       	push   $0xf01361d3
f0107d1a:	6a 42                	push   $0x42
f0107d1c:	68 f0 61 13 f0       	push   $0xf01361f0
f0107d21:	e8 df 84 ff ff       	call   f0100205 <_panic>
	}
}
f0107d26:	c9                   	leave  
f0107d27:	c3                   	ret    

f0107d28 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107d28:	55                   	push   %ebp
f0107d29:	89 e5                	mov    %esp,%ebp
f0107d2b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107d35:	83 ec 04             	sub    $0x4,%esp
f0107d38:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d3b:	50                   	push   %eax
f0107d3c:	ff 75 0c             	pushl  0xc(%ebp)
f0107d3f:	ff 75 08             	pushl  0x8(%ebp)
f0107d42:	e8 6a ed ff ff       	call   f0106ab1 <get_page_table>
f0107d47:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d4d:	85 c0                	test   %eax,%eax
f0107d4f:	74 28                	je     f0107d79 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107d51:	83 ec 04             	sub    $0x4,%esp
f0107d54:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d57:	50                   	push   %eax
f0107d58:	ff 75 0c             	pushl  0xc(%ebp)
f0107d5b:	ff 75 08             	pushl  0x8(%ebp)
f0107d5e:	e8 a3 f0 ff ff       	call   f0106e06 <get_frame_info>
f0107d63:	83 c4 10             	add    $0x10,%esp
f0107d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107d69:	83 ec 0c             	sub    $0xc,%esp
f0107d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d6f:	e8 26 fe ff ff       	call   f0107b9a <to_physical_address>
f0107d74:	83 c4 10             	add    $0x10,%esp
f0107d77:	eb 05                	jmp    f0107d7e <virtual_to_physical+0x56>
	}
	return -1;
f0107d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107d7e:	c9                   	leave  
f0107d7f:	c3                   	ret    

f0107d80 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107d80:	55                   	push   %ebp
f0107d81:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d86:	c1 e8 16             	shr    $0x16,%eax
f0107d89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d93:	01 d0                	add    %edx,%eax
f0107d95:	8b 00                	mov    (%eax),%eax
f0107d97:	83 e0 20             	and    $0x20,%eax
f0107d9a:	85 c0                	test   %eax,%eax
f0107d9c:	0f 95 c0             	setne  %al
f0107d9f:	0f b6 c0             	movzbl %al,%eax
}
f0107da2:	5d                   	pop    %ebp
f0107da3:	c3                   	ret    

f0107da4 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dad:	c1 e8 16             	shr    $0x16,%eax
f0107db0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dba:	01 d0                	add    %edx,%eax
f0107dbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dbf:	c1 ea 16             	shr    $0x16,%edx
f0107dc2:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107dc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107dcc:	01 ca                	add    %ecx,%edx
f0107dce:	8b 12                	mov    (%edx),%edx
f0107dd0:	83 e2 df             	and    $0xffffffdf,%edx
f0107dd3:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dd8:	83 ec 08             	sub    $0x8,%esp
f0107ddb:	50                   	push   %eax
f0107ddc:	6a 00                	push   $0x0
f0107dde:	e8 2b e7 ff ff       	call   f010650e <tlb_invalidate>
f0107de3:	83 c4 10             	add    $0x10,%esp
}
f0107de6:	90                   	nop
f0107de7:	c9                   	leave  
f0107de8:	c3                   	ret    

f0107de9 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107de9:	55                   	push   %ebp
f0107dea:	89 e5                	mov    %esp,%ebp
f0107dec:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df2:	c1 e8 16             	shr    $0x16,%eax
f0107df5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dff:	01 d0                	add    %edx,%eax
f0107e01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e07:	0f 20 d8             	mov    %cr3,%eax
f0107e0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e10:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e13:	90                   	nop
f0107e14:	c9                   	leave  
f0107e15:	c3                   	ret    

f0107e16 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e16:	55                   	push   %ebp
f0107e17:	89 e5                	mov    %esp,%ebp
f0107e19:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e23:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e2a:	eb 21                	jmp    f0107e4d <env_page_ws_get_size+0x37>
f0107e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e32:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107e35:	89 d0                	mov    %edx,%eax
f0107e37:	01 c0                	add    %eax,%eax
f0107e39:	01 d0                	add    %edx,%eax
f0107e3b:	c1 e0 03             	shl    $0x3,%eax
f0107e3e:	01 c8                	add    %ecx,%eax
f0107e40:	8a 40 04             	mov    0x4(%eax),%al
f0107e43:	84 c0                	test   %al,%al
f0107e45:	75 03                	jne    f0107e4a <env_page_ws_get_size+0x34>
f0107e47:	ff 45 f8             	incl   -0x8(%ebp)
f0107e4a:	ff 45 fc             	incl   -0x4(%ebp)
f0107e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e50:	8b 50 74             	mov    0x74(%eax),%edx
f0107e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e56:	39 c2                	cmp    %eax,%edx
f0107e58:	77 d2                	ja     f0107e2c <env_page_ws_get_size+0x16>
	return counter;
f0107e5a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107e5d:	c9                   	leave  
f0107e5e:	c3                   	ret    

f0107e5f <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107e5f:	55                   	push   %ebp
f0107e60:	89 e5                	mov    %esp,%ebp
f0107e62:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107e65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107e6c:	eb 4c                	jmp    f0107eba <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e71:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e77:	89 d0                	mov    %edx,%eax
f0107e79:	01 c0                	add    %eax,%eax
f0107e7b:	01 d0                	add    %edx,%eax
f0107e7d:	c1 e0 03             	shl    $0x3,%eax
f0107e80:	01 c8                	add    %ecx,%eax
f0107e82:	8b 00                	mov    (%eax),%eax
f0107e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e8f:	89 c2                	mov    %eax,%edx
f0107e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e9f:	39 c2                	cmp    %eax,%edx
f0107ea1:	75 14                	jne    f0107eb7 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea6:	83 ec 08             	sub    $0x8,%esp
f0107ea9:	50                   	push   %eax
f0107eaa:	ff 75 08             	pushl  0x8(%ebp)
f0107ead:	e8 b9 00 00 00       	call   f0107f6b <env_page_ws_clear_entry>
f0107eb2:	83 c4 10             	add    $0x10,%esp
			break;
f0107eb5:	eb 10                	jmp    f0107ec7 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107eb7:	ff 45 f4             	incl   -0xc(%ebp)
f0107eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ebd:	8b 50 74             	mov    0x74(%eax),%edx
f0107ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec3:	39 c2                	cmp    %eax,%edx
f0107ec5:	77 a7                	ja     f0107e6e <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107ec7:	90                   	nop
f0107ec8:	c9                   	leave  
f0107ec9:	c3                   	ret    

f0107eca <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107eca:	55                   	push   %ebp
f0107ecb:	89 e5                	mov    %esp,%ebp
f0107ecd:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed3:	8b 40 74             	mov    0x74(%eax),%eax
f0107ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ed9:	77 16                	ja     f0107ef1 <env_page_ws_set_entry+0x27>
f0107edb:	68 0c 62 13 f0       	push   $0xf013620c
f0107ee0:	68 42 62 13 f0       	push   $0xf0136242
f0107ee5:	6a 26                	push   $0x26
f0107ee7:	68 58 62 13 f0       	push   $0xf0136258
f0107eec:	e8 14 83 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107ef1:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107ef8:	76 16                	jbe    f0107f10 <env_page_ws_set_entry+0x46>
f0107efa:	68 78 62 13 f0       	push   $0xf0136278
f0107eff:	68 42 62 13 f0       	push   $0xf0136242
f0107f04:	6a 27                	push   $0x27
f0107f06:	68 58 62 13 f0       	push   $0xf0136258
f0107f0b:	e8 f5 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f13:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f16:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f19:	89 d0                	mov    %edx,%eax
f0107f1b:	01 c0                	add    %eax,%eax
f0107f1d:	01 d0                	add    %edx,%eax
f0107f1f:	c1 e0 03             	shl    $0x3,%eax
f0107f22:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107f25:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f33:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f38:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3e:	89 d0                	mov    %edx,%eax
f0107f40:	01 c0                	add    %eax,%eax
f0107f42:	01 d0                	add    %edx,%eax
f0107f44:	c1 e0 03             	shl    $0x3,%eax
f0107f47:	01 c8                	add    %ecx,%eax
f0107f49:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f56:	89 d0                	mov    %edx,%eax
f0107f58:	01 c0                	add    %eax,%eax
f0107f5a:	01 d0                	add    %edx,%eax
f0107f5c:	c1 e0 03             	shl    $0x3,%eax
f0107f5f:	01 c8                	add    %ecx,%eax
f0107f61:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107f68:	90                   	nop
}
f0107f69:	c9                   	leave  
f0107f6a:	c3                   	ret    

f0107f6b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107f6b:	55                   	push   %ebp
f0107f6c:	89 e5                	mov    %esp,%ebp
f0107f6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f74:	8b 40 74             	mov    0x74(%eax),%eax
f0107f77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f7a:	77 16                	ja     f0107f92 <env_page_ws_clear_entry+0x27>
f0107f7c:	68 ac 62 13 f0       	push   $0xf01362ac
f0107f81:	68 42 62 13 f0       	push   $0xf0136242
f0107f86:	6a 32                	push   $0x32
f0107f88:	68 58 62 13 f0       	push   $0xf0136258
f0107f8d:	e8 73 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f95:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9b:	89 d0                	mov    %edx,%eax
f0107f9d:	01 c0                	add    %eax,%eax
f0107f9f:	01 d0                	add    %edx,%eax
f0107fa1:	c1 e0 03             	shl    $0x3,%eax
f0107fa4:	01 c8                	add    %ecx,%eax
f0107fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0107faf:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fb2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb5:	89 d0                	mov    %edx,%eax
f0107fb7:	01 c0                	add    %eax,%eax
f0107fb9:	01 d0                	add    %edx,%eax
f0107fbb:	c1 e0 03             	shl    $0x3,%eax
f0107fbe:	01 c8                	add    %ecx,%eax
f0107fc0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107fc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcd:	89 d0                	mov    %edx,%eax
f0107fcf:	01 c0                	add    %eax,%eax
f0107fd1:	01 d0                	add    %edx,%eax
f0107fd3:	c1 e0 03             	shl    $0x3,%eax
f0107fd6:	01 c8                	add    %ecx,%eax
f0107fd8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107fdf:	90                   	nop
f0107fe0:	c9                   	leave  
f0107fe1:	c3                   	ret    

f0107fe2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107fe2:	55                   	push   %ebp
f0107fe3:	89 e5                	mov    %esp,%ebp
f0107fe5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0107feb:	8b 40 74             	mov    0x74(%eax),%eax
f0107fee:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ff1:	77 16                	ja     f0108009 <env_page_ws_get_virtual_address+0x27>
f0107ff3:	68 ac 62 13 f0       	push   $0xf01362ac
f0107ff8:	68 42 62 13 f0       	push   $0xf0136242
f0107ffd:	6a 3a                	push   $0x3a
f0107fff:	68 58 62 13 f0       	push   $0xf0136258
f0108004:	e8 fc 81 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108009:	8b 45 08             	mov    0x8(%ebp),%eax
f010800c:	8b 48 78             	mov    0x78(%eax),%ecx
f010800f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108012:	89 d0                	mov    %edx,%eax
f0108014:	01 c0                	add    %eax,%eax
f0108016:	01 d0                	add    %edx,%eax
f0108018:	c1 e0 03             	shl    $0x3,%eax
f010801b:	01 c8                	add    %ecx,%eax
f010801d:	8b 00                	mov    (%eax),%eax
f010801f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010802a:	c9                   	leave  
f010802b:	c3                   	ret    

f010802c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010802c:	55                   	push   %ebp
f010802d:	89 e5                	mov    %esp,%ebp
f010802f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108032:	8b 45 08             	mov    0x8(%ebp),%eax
f0108035:	8b 40 74             	mov    0x74(%eax),%eax
f0108038:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010803b:	77 16                	ja     f0108053 <env_page_ws_get_time_stamp+0x27>
f010803d:	68 ac 62 13 f0       	push   $0xf01362ac
f0108042:	68 42 62 13 f0       	push   $0xf0136242
f0108047:	6a 40                	push   $0x40
f0108049:	68 58 62 13 f0       	push   $0xf0136258
f010804e:	e8 b2 81 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108053:	8b 45 08             	mov    0x8(%ebp),%eax
f0108056:	8b 48 78             	mov    0x78(%eax),%ecx
f0108059:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805c:	89 d0                	mov    %edx,%eax
f010805e:	01 c0                	add    %eax,%eax
f0108060:	01 d0                	add    %edx,%eax
f0108062:	c1 e0 03             	shl    $0x3,%eax
f0108065:	01 c8                	add    %ecx,%eax
f0108067:	8b 40 08             	mov    0x8(%eax),%eax
}
f010806a:	c9                   	leave  
f010806b:	c3                   	ret    

f010806c <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010806c:	55                   	push   %ebp
f010806d:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010806f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108072:	8b 48 78             	mov    0x78(%eax),%ecx
f0108075:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108078:	89 d0                	mov    %edx,%eax
f010807a:	01 c0                	add    %eax,%eax
f010807c:	01 d0                	add    %edx,%eax
f010807e:	c1 e0 03             	shl    $0x3,%eax
f0108081:	01 c8                	add    %ecx,%eax
f0108083:	8a 40 04             	mov    0x4(%eax),%al
f0108086:	0f b6 c0             	movzbl %al,%eax
}
f0108089:	5d                   	pop    %ebp
f010808a:	c3                   	ret    

f010808b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010808b:	55                   	push   %ebp
f010808c:	89 e5                	mov    %esp,%ebp
f010808e:	53                   	push   %ebx
f010808f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108092:	83 ec 0c             	sub    $0xc,%esp
f0108095:	6a 02                	push   $0x2
f0108097:	e8 a7 5c 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010809c:	83 c4 10             	add    $0x10,%esp
f010809f:	85 c0                	test   %eax,%eax
f01080a1:	0f 84 fe 00 00 00    	je     f01081a5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01080a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01080ae:	83 ec 0c             	sub    $0xc,%esp
f01080b1:	68 e4 62 13 f0       	push   $0xf01362e4
f01080b6:	e8 53 8c ff ff       	call   f0100d0e <cprintf>
f01080bb:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01080c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080ca:	eb 2c                	jmp    f01080f8 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080cf:	8b 10                	mov    (%eax),%edx
f01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d4:	8d 48 01             	lea    0x1(%eax),%ecx
f01080d7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080da:	83 ec 04             	sub    $0x4,%esp
f01080dd:	52                   	push   %edx
f01080de:	50                   	push   %eax
f01080df:	68 fe 62 13 f0       	push   $0xf01362fe
f01080e4:	e8 25 8c ff ff       	call   f0100d0e <cprintf>
f01080e9:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ef:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01080f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080fc:	74 08                	je     f0108106 <env_page_ws_print+0x7b>
f01080fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108101:	8b 40 10             	mov    0x10(%eax),%eax
f0108104:	eb 05                	jmp    f010810b <env_page_ws_print+0x80>
f0108106:	b8 00 00 00 00       	mov    $0x0,%eax
f010810b:	8b 55 08             	mov    0x8(%ebp),%edx
f010810e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108114:	8b 45 08             	mov    0x8(%ebp),%eax
f0108117:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010811d:	85 c0                	test   %eax,%eax
f010811f:	75 ab                	jne    f01080cc <env_page_ws_print+0x41>
f0108121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108125:	75 a5                	jne    f01080cc <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108127:	83 ec 0c             	sub    $0xc,%esp
f010812a:	68 06 63 13 f0       	push   $0xf0136306
f010812f:	e8 da 8b ff ff       	call   f0100d0e <cprintf>
f0108134:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108137:	8b 45 08             	mov    0x8(%ebp),%eax
f010813a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108140:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108143:	eb 2c                	jmp    f0108171 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108148:	8b 10                	mov    (%eax),%edx
f010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010814d:	8d 48 01             	lea    0x1(%eax),%ecx
f0108150:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108153:	83 ec 04             	sub    $0x4,%esp
f0108156:	52                   	push   %edx
f0108157:	50                   	push   %eax
f0108158:	68 fe 62 13 f0       	push   $0xf01362fe
f010815d:	e8 ac 8b ff ff       	call   f0100d0e <cprintf>
f0108162:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108165:	8b 45 08             	mov    0x8(%ebp),%eax
f0108168:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108171:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108175:	74 08                	je     f010817f <env_page_ws_print+0xf4>
f0108177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817a:	8b 40 10             	mov    0x10(%eax),%eax
f010817d:	eb 05                	jmp    f0108184 <env_page_ws_print+0xf9>
f010817f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108184:	8b 55 08             	mov    0x8(%ebp),%edx
f0108187:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108196:	85 c0                	test   %eax,%eax
f0108198:	75 ab                	jne    f0108145 <env_page_ws_print+0xba>
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	75 a5                	jne    f0108145 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01081a0:	e9 95 01 00 00       	jmp    f010833a <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01081a5:	83 ec 0c             	sub    $0xc,%esp
f01081a8:	68 21 63 13 f0       	push   $0xf0136321
f01081ad:	e8 5c 8b ff ff       	call   f0100d0e <cprintf>
f01081b2:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01081b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01081bc:	e9 6a 01 00 00       	jmp    f010832b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 48 78             	mov    0x78(%eax),%ecx
f01081c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081ca:	89 d0                	mov    %edx,%eax
f01081cc:	01 c0                	add    %eax,%eax
f01081ce:	01 d0                	add    %edx,%eax
f01081d0:	c1 e0 03             	shl    $0x3,%eax
f01081d3:	01 c8                	add    %ecx,%eax
f01081d5:	8a 40 04             	mov    0x4(%eax),%al
f01081d8:	84 c0                	test   %al,%al
f01081da:	74 43                	je     f010821f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01081dc:	83 ec 0c             	sub    $0xc,%esp
f01081df:	68 2b 63 13 f0       	push   $0xf013632b
f01081e4:	e8 25 8b ff ff       	call   f0100d0e <cprintf>
f01081e9:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01081ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ef:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01081f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01081f8:	75 10                	jne    f010820a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01081fa:	83 ec 0c             	sub    $0xc,%esp
f01081fd:	68 3a 63 13 f0       	push   $0xf013633a
f0108202:	e8 07 8b ff ff       	call   f0100d0e <cprintf>
f0108207:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010820a:	83 ec 0c             	sub    $0xc,%esp
f010820d:	68 40 63 13 f0       	push   $0xf0136340
f0108212:	e8 f7 8a ff ff       	call   f0100d0e <cprintf>
f0108217:	83 c4 10             	add    $0x10,%esp
				continue;
f010821a:	e9 09 01 00 00       	jmp    f0108328 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010821f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108222:	8b 48 78             	mov    0x78(%eax),%ecx
f0108225:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108228:	89 d0                	mov    %edx,%eax
f010822a:	01 c0                	add    %eax,%eax
f010822c:	01 d0                	add    %edx,%eax
f010822e:	c1 e0 03             	shl    $0x3,%eax
f0108231:	01 c8                	add    %ecx,%eax
f0108233:	8b 00                	mov    (%eax),%eax
f0108235:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108238:	8b 45 08             	mov    0x8(%ebp),%eax
f010823b:	8b 48 78             	mov    0x78(%eax),%ecx
f010823e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108241:	89 d0                	mov    %edx,%eax
f0108243:	01 c0                	add    %eax,%eax
f0108245:	01 d0                	add    %edx,%eax
f0108247:	c1 e0 03             	shl    $0x3,%eax
f010824a:	01 c8                	add    %ecx,%eax
f010824c:	8b 40 08             	mov    0x8(%eax),%eax
f010824f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108252:	8b 45 08             	mov    0x8(%ebp),%eax
f0108255:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108258:	83 ec 08             	sub    $0x8,%esp
f010825b:	ff 75 e8             	pushl  -0x18(%ebp)
f010825e:	50                   	push   %eax
f010825f:	e8 fd f9 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108264:	83 c4 10             	add    $0x10,%esp
f0108267:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010826a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010826d:	83 e0 40             	and    $0x40,%eax
f0108270:	85 c0                	test   %eax,%eax
f0108272:	0f 95 c0             	setne  %al
f0108275:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108278:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010827b:	83 e0 20             	and    $0x20,%eax
f010827e:	85 c0                	test   %eax,%eax
f0108280:	0f 95 c0             	setne  %al
f0108283:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108286:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108289:	25 00 02 00 00       	and    $0x200,%eax
f010828e:	85 c0                	test   %eax,%eax
f0108290:	0f 95 c0             	setne  %al
f0108293:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108296:	8b 45 08             	mov    0x8(%ebp),%eax
f0108299:	8b 48 78             	mov    0x78(%eax),%ecx
f010829c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010829f:	89 d0                	mov    %edx,%eax
f01082a1:	01 c0                	add    %eax,%eax
f01082a3:	01 d0                	add    %edx,%eax
f01082a5:	c1 e0 03             	shl    $0x3,%eax
f01082a8:	01 c8                	add    %ecx,%eax
f01082aa:	8b 00                	mov    (%eax),%eax
f01082ac:	83 ec 04             	sub    $0x4,%esp
f01082af:	50                   	push   %eax
f01082b0:	ff 75 ec             	pushl  -0x14(%ebp)
f01082b3:	68 42 63 13 f0       	push   $0xf0136342
f01082b8:	e8 51 8a ff ff       	call   f0100d0e <cprintf>
f01082bd:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01082c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c9:	89 d0                	mov    %edx,%eax
f01082cb:	01 c0                	add    %eax,%eax
f01082cd:	01 d0                	add    %edx,%eax
f01082cf:	c1 e0 03             	shl    $0x3,%eax
f01082d2:	01 c8                	add    %ecx,%eax
f01082d4:	8b 58 0c             	mov    0xc(%eax),%ebx
f01082d7:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01082db:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01082df:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01082e3:	83 ec 08             	sub    $0x8,%esp
f01082e6:	53                   	push   %ebx
f01082e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01082ea:	51                   	push   %ecx
f01082eb:	52                   	push   %edx
f01082ec:	50                   	push   %eax
f01082ed:	68 54 63 13 f0       	push   $0xf0136354
f01082f2:	e8 17 8a ff ff       	call   f0100d0e <cprintf>
f01082f7:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01082fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fd:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108303:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108306:	75 10                	jne    f0108318 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108308:	83 ec 0c             	sub    $0xc,%esp
f010830b:	68 9b 63 13 f0       	push   $0xf013639b
f0108310:	e8 f9 89 ff ff       	call   f0100d0e <cprintf>
f0108315:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108318:	83 ec 0c             	sub    $0xc,%esp
f010831b:	68 40 63 13 f0       	push   $0xf0136340
f0108320:	e8 e9 89 ff ff       	call   f0100d0e <cprintf>
f0108325:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108328:	ff 45 ec             	incl   -0x14(%ebp)
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 40 74             	mov    0x74(%eax),%eax
f0108331:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108334:	0f 87 87 fe ff ff    	ja     f01081c1 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010833a:	90                   	nop
f010833b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010833e:	c9                   	leave  
f010833f:	c3                   	ret    

f0108340 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108340:	55                   	push   %ebp
f0108341:	89 e5                	mov    %esp,%ebp
f0108343:	53                   	push   %ebx
f0108344:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108347:	83 ec 0c             	sub    $0xc,%esp
f010834a:	68 a0 63 13 f0       	push   $0xf01363a0
f010834f:	e8 ba 89 ff ff       	call   f0100d0e <cprintf>
f0108354:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108357:	83 ec 0c             	sub    $0xc,%esp
f010835a:	68 d5 63 13 f0       	push   $0xf01363d5
f010835f:	e8 aa 89 ff ff       	call   f0100d0e <cprintf>
f0108364:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010836e:	e9 10 01 00 00       	jmp    f0108483 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108373:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108376:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108379:	89 d0                	mov    %edx,%eax
f010837b:	01 c0                	add    %eax,%eax
f010837d:	01 d0                	add    %edx,%eax
f010837f:	c1 e0 03             	shl    $0x3,%eax
f0108382:	01 c8                	add    %ecx,%eax
f0108384:	83 e8 80             	sub    $0xffffff80,%eax
f0108387:	8a 00                	mov    (%eax),%al
f0108389:	84 c0                	test   %al,%al
f010838b:	74 43                	je     f01083d0 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010838d:	83 ec 0c             	sub    $0xc,%esp
f0108390:	68 2b 63 13 f0       	push   $0xf013632b
f0108395:	e8 74 89 ff ff       	call   f0100d0e <cprintf>
f010839a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010839d:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083a9:	75 10                	jne    f01083bb <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01083ab:	83 ec 0c             	sub    $0xc,%esp
f01083ae:	68 3a 63 13 f0       	push   $0xf013633a
f01083b3:	e8 56 89 ff ff       	call   f0100d0e <cprintf>
f01083b8:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083bb:	83 ec 0c             	sub    $0xc,%esp
f01083be:	68 40 63 13 f0       	push   $0xf0136340
f01083c3:	e8 46 89 ff ff       	call   f0100d0e <cprintf>
f01083c8:	83 c4 10             	add    $0x10,%esp
			continue;
f01083cb:	e9 b0 00 00 00       	jmp    f0108480 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01083d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083d6:	89 d0                	mov    %edx,%eax
f01083d8:	01 c0                	add    %eax,%eax
f01083da:	01 d0                	add    %edx,%eax
f01083dc:	c1 e0 03             	shl    $0x3,%eax
f01083df:	01 c8                	add    %ecx,%eax
f01083e1:	83 c0 7c             	add    $0x7c,%eax
f01083e4:	8b 00                	mov    (%eax),%eax
f01083e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01083e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083ef:	89 d0                	mov    %edx,%eax
f01083f1:	01 c0                	add    %eax,%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	c1 e0 03             	shl    $0x3,%eax
f01083f8:	01 c8                	add    %ecx,%eax
f01083fa:	83 c0 7c             	add    $0x7c,%eax
f01083fd:	8b 00                	mov    (%eax),%eax
f01083ff:	83 ec 04             	sub    $0x4,%esp
f0108402:	50                   	push   %eax
f0108403:	ff 75 f4             	pushl  -0xc(%ebp)
f0108406:	68 e0 63 13 f0       	push   $0xf01363e0
f010840b:	e8 fe 88 ff ff       	call   f0100d0e <cprintf>
f0108410:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108413:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108419:	89 d0                	mov    %edx,%eax
f010841b:	01 c0                	add    %eax,%eax
f010841d:	01 d0                	add    %edx,%eax
f010841f:	c1 e0 03             	shl    $0x3,%eax
f0108422:	01 c8                	add    %ecx,%eax
f0108424:	05 84 00 00 00       	add    $0x84,%eax
f0108429:	8b 18                	mov    (%eax),%ebx
f010842b:	8b 45 08             	mov    0x8(%ebp),%eax
f010842e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108431:	83 ec 08             	sub    $0x8,%esp
f0108434:	ff 75 f0             	pushl  -0x10(%ebp)
f0108437:	50                   	push   %eax
f0108438:	e8 43 f9 ff ff       	call   f0107d80 <pd_is_table_used>
f010843d:	83 c4 10             	add    $0x10,%esp
f0108440:	83 ec 04             	sub    $0x4,%esp
f0108443:	53                   	push   %ebx
f0108444:	50                   	push   %eax
f0108445:	68 f8 63 13 f0       	push   $0xf01363f8
f010844a:	e8 bf 88 ff ff       	call   f0100d0e <cprintf>
f010844f:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108452:	8b 45 08             	mov    0x8(%ebp),%eax
f0108455:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010845b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845e:	75 10                	jne    f0108470 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108460:	83 ec 0c             	sub    $0xc,%esp
f0108463:	68 9b 63 13 f0       	push   $0xf013639b
f0108468:	e8 a1 88 ff ff       	call   f0100d0e <cprintf>
f010846d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108470:	83 ec 0c             	sub    $0xc,%esp
f0108473:	68 40 63 13 f0       	push   $0xf0136340
f0108478:	e8 91 88 ff ff       	call   f0100d0e <cprintf>
f010847d:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108480:	ff 45 f4             	incl   -0xc(%ebp)
f0108483:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108487:	0f 86 e6 fe ff ff    	jbe    f0108373 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010848d:	90                   	nop
f010848e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108491:	c9                   	leave  
f0108492:	c3                   	ret    

f0108493 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108493:	55                   	push   %ebp
f0108494:	89 e5                	mov    %esp,%ebp
f0108496:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108499:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01084a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01084a7:	eb 20                	jmp    f01084c9 <env_table_ws_get_size+0x36>
f01084a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01084af:	89 d0                	mov    %edx,%eax
f01084b1:	01 c0                	add    %eax,%eax
f01084b3:	01 d0                	add    %edx,%eax
f01084b5:	c1 e0 03             	shl    $0x3,%eax
f01084b8:	01 c8                	add    %ecx,%eax
f01084ba:	83 e8 80             	sub    $0xffffff80,%eax
f01084bd:	8a 00                	mov    (%eax),%al
f01084bf:	84 c0                	test   %al,%al
f01084c1:	75 03                	jne    f01084c6 <env_table_ws_get_size+0x33>
f01084c3:	ff 45 f8             	incl   -0x8(%ebp)
f01084c6:	ff 45 fc             	incl   -0x4(%ebp)
f01084c9:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01084cd:	7e da                	jle    f01084a9 <env_table_ws_get_size+0x16>
	return counter;
f01084cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01084d2:	c9                   	leave  
f01084d3:	c3                   	ret    

f01084d4 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01084d4:	55                   	push   %ebp
f01084d5:	89 e5                	mov    %esp,%ebp
f01084d7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01084da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01084e1:	eb 4c                	jmp    f010852f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01084e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e9:	89 d0                	mov    %edx,%eax
f01084eb:	01 c0                	add    %eax,%eax
f01084ed:	01 d0                	add    %edx,%eax
f01084ef:	c1 e0 03             	shl    $0x3,%eax
f01084f2:	01 c8                	add    %ecx,%eax
f01084f4:	83 c0 7c             	add    $0x7c,%eax
f01084f7:	8b 00                	mov    (%eax),%eax
f01084f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108504:	89 c2                	mov    %eax,%edx
f0108506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108509:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010850c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010850f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108514:	39 c2                	cmp    %eax,%edx
f0108516:	75 14                	jne    f010852c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010851b:	83 ec 08             	sub    $0x8,%esp
f010851e:	50                   	push   %eax
f010851f:	ff 75 08             	pushl  0x8(%ebp)
f0108522:	e8 b8 00 00 00       	call   f01085df <env_table_ws_clear_entry>
f0108527:	83 c4 10             	add    $0x10,%esp
			break;
f010852a:	eb 09                	jmp    f0108535 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010852c:	ff 45 f4             	incl   -0xc(%ebp)
f010852f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108533:	7e ae                	jle    f01084e3 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108535:	90                   	nop
f0108536:	c9                   	leave  
f0108537:	c3                   	ret    

f0108538 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108538:	55                   	push   %ebp
f0108539:	89 e5                	mov    %esp,%ebp
f010853b:	53                   	push   %ebx
f010853c:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010853f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108543:	76 19                	jbe    f010855e <env_table_ws_set_entry+0x26>
f0108545:	68 1c 64 13 f0       	push   $0xf013641c
f010854a:	68 42 62 13 f0       	push   $0xf0136242
f010854f:	68 b6 00 00 00       	push   $0xb6
f0108554:	68 58 62 13 f0       	push   $0xf0136258
f0108559:	e8 a7 7c ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010855e:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108565:	76 19                	jbe    f0108580 <env_table_ws_set_entry+0x48>
f0108567:	68 78 62 13 f0       	push   $0xf0136278
f010856c:	68 42 62 13 f0       	push   $0xf0136242
f0108571:	68 b7 00 00 00       	push   $0xb7
f0108576:	68 58 62 13 f0       	push   $0xf0136258
f010857b:	e8 85 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108580:	8b 45 10             	mov    0x10(%ebp),%eax
f0108583:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108589:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010858e:	89 c1                	mov    %eax,%ecx
f0108590:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108596:	89 d0                	mov    %edx,%eax
f0108598:	01 c0                	add    %eax,%eax
f010859a:	01 d0                	add    %edx,%eax
f010859c:	c1 e0 03             	shl    $0x3,%eax
f010859f:	01 d8                	add    %ebx,%eax
f01085a1:	83 c0 7c             	add    $0x7c,%eax
f01085a4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01085a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ac:	89 d0                	mov    %edx,%eax
f01085ae:	01 c0                	add    %eax,%eax
f01085b0:	01 d0                	add    %edx,%eax
f01085b2:	c1 e0 03             	shl    $0x3,%eax
f01085b5:	01 c8                	add    %ecx,%eax
f01085b7:	83 e8 80             	sub    $0xffffff80,%eax
f01085ba:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01085bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085c3:	89 d0                	mov    %edx,%eax
f01085c5:	01 c0                	add    %eax,%eax
f01085c7:	01 d0                	add    %edx,%eax
f01085c9:	c1 e0 03             	shl    $0x3,%eax
f01085cc:	01 c8                	add    %ecx,%eax
f01085ce:	05 84 00 00 00       	add    $0x84,%eax
f01085d3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01085d9:	90                   	nop
}
f01085da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01085dd:	c9                   	leave  
f01085de:	c3                   	ret    

f01085df <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01085df:	55                   	push   %ebp
f01085e0:	89 e5                	mov    %esp,%ebp
f01085e2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085e5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085e9:	76 19                	jbe    f0108604 <env_table_ws_clear_entry+0x25>
f01085eb:	68 1c 64 13 f0       	push   $0xf013641c
f01085f0:	68 42 62 13 f0       	push   $0xf0136242
f01085f5:	68 c2 00 00 00       	push   $0xc2
f01085fa:	68 58 62 13 f0       	push   $0xf0136258
f01085ff:	e8 01 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108604:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108607:	8b 55 0c             	mov    0xc(%ebp),%edx
f010860a:	89 d0                	mov    %edx,%eax
f010860c:	01 c0                	add    %eax,%eax
f010860e:	01 d0                	add    %edx,%eax
f0108610:	c1 e0 03             	shl    $0x3,%eax
f0108613:	01 c8                	add    %ecx,%eax
f0108615:	83 c0 7c             	add    $0x7c,%eax
f0108618:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010861e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108621:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108624:	89 d0                	mov    %edx,%eax
f0108626:	01 c0                	add    %eax,%eax
f0108628:	01 d0                	add    %edx,%eax
f010862a:	c1 e0 03             	shl    $0x3,%eax
f010862d:	01 c8                	add    %ecx,%eax
f010862f:	83 e8 80             	sub    $0xffffff80,%eax
f0108632:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108635:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108638:	8b 55 0c             	mov    0xc(%ebp),%edx
f010863b:	89 d0                	mov    %edx,%eax
f010863d:	01 c0                	add    %eax,%eax
f010863f:	01 d0                	add    %edx,%eax
f0108641:	c1 e0 03             	shl    $0x3,%eax
f0108644:	01 c8                	add    %ecx,%eax
f0108646:	05 84 00 00 00       	add    $0x84,%eax
f010864b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108651:	90                   	nop
f0108652:	c9                   	leave  
f0108653:	c3                   	ret    

f0108654 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108654:	55                   	push   %ebp
f0108655:	89 e5                	mov    %esp,%ebp
f0108657:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010865a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010865e:	76 19                	jbe    f0108679 <env_table_ws_get_virtual_address+0x25>
f0108660:	68 1c 64 13 f0       	push   $0xf013641c
f0108665:	68 42 62 13 f0       	push   $0xf0136242
f010866a:	68 ca 00 00 00       	push   $0xca
f010866f:	68 58 62 13 f0       	push   $0xf0136258
f0108674:	e8 8c 7b ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867f:	89 d0                	mov    %edx,%eax
f0108681:	01 c0                	add    %eax,%eax
f0108683:	01 d0                	add    %edx,%eax
f0108685:	c1 e0 03             	shl    $0x3,%eax
f0108688:	01 c8                	add    %ecx,%eax
f010868a:	83 c0 7c             	add    $0x7c,%eax
f010868d:	8b 00                	mov    (%eax),%eax
f010868f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108692:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108695:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010869a:	c9                   	leave  
f010869b:	c3                   	ret    

f010869c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010869c:	55                   	push   %ebp
f010869d:	89 e5                	mov    %esp,%ebp
f010869f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a2:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a6:	76 19                	jbe    f01086c1 <env_table_ws_get_time_stamp+0x25>
f01086a8:	68 1c 64 13 f0       	push   $0xf013641c
f01086ad:	68 42 62 13 f0       	push   $0xf0136242
f01086b2:	68 d1 00 00 00       	push   $0xd1
f01086b7:	68 58 62 13 f0       	push   $0xf0136258
f01086bc:	e8 44 7b ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01086c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086c7:	89 d0                	mov    %edx,%eax
f01086c9:	01 c0                	add    %eax,%eax
f01086cb:	01 d0                	add    %edx,%eax
f01086cd:	c1 e0 03             	shl    $0x3,%eax
f01086d0:	01 c8                	add    %ecx,%eax
f01086d2:	05 84 00 00 00       	add    $0x84,%eax
f01086d7:	8b 00                	mov    (%eax),%eax
}
f01086d9:	c9                   	leave  
f01086da:	c3                   	ret    

f01086db <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01086db:	55                   	push   %ebp
f01086dc:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01086de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e4:	89 d0                	mov    %edx,%eax
f01086e6:	01 c0                	add    %eax,%eax
f01086e8:	01 d0                	add    %edx,%eax
f01086ea:	c1 e0 03             	shl    $0x3,%eax
f01086ed:	01 c8                	add    %ecx,%eax
f01086ef:	83 e8 80             	sub    $0xffffff80,%eax
f01086f2:	8a 00                	mov    (%eax),%al
f01086f4:	0f b6 c0             	movzbl %al,%eax
}
f01086f7:	5d                   	pop    %ebp
f01086f8:	c3                   	ret    

f01086f9 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01086f9:	55                   	push   %ebp
f01086fa:	89 e5                	mov    %esp,%ebp
f01086fc:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01086ff:	83 ec 04             	sub    $0x4,%esp
f0108702:	68 50 64 13 f0       	push   $0xf0136450
f0108707:	68 e5 00 00 00       	push   $0xe5
f010870c:	68 58 62 13 f0       	push   $0xf0136258
f0108711:	e8 ef 7a ff ff       	call   f0100205 <_panic>

f0108716 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108716:	55                   	push   %ebp
f0108717:	89 e5                	mov    %esp,%ebp
f0108719:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010871c:	83 ec 04             	sub    $0x4,%esp
f010871f:	68 7c 64 13 f0       	push   $0xf013647c
f0108724:	68 ec 00 00 00       	push   $0xec
f0108729:	68 58 62 13 f0       	push   $0xf0136258
f010872e:	e8 d2 7a ff ff       	call   f0100205 <_panic>

f0108733 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108733:	55                   	push   %ebp
f0108734:	89 e5                	mov    %esp,%ebp
f0108736:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108739:	83 ec 04             	sub    $0x4,%esp
f010873c:	68 ac 64 13 f0       	push   $0xf01364ac
f0108741:	68 f3 00 00 00       	push   $0xf3
f0108746:	68 58 62 13 f0       	push   $0xf0136258
f010874b:	e8 b5 7a ff ff       	call   f0100205 <_panic>

f0108750 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108750:	55                   	push   %ebp
f0108751:	89 e5                	mov    %esp,%ebp
f0108753:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108756:	8b 45 10             	mov    0x10(%ebp),%eax
f0108759:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f010875c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010875f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108762:	8b 45 10             	mov    0x10(%ebp),%eax
f0108765:	25 ff 0f 00 00       	and    $0xfff,%eax
f010876a:	85 c0                	test   %eax,%eax
f010876c:	74 11                	je     f010877f <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f010876e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108777:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010877c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f010877f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108782:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108787:	85 c0                	test   %eax,%eax
f0108789:	74 11                	je     f010879c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f010878b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010878e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108791:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108794:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108799:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010879c:	8b 45 14             	mov    0x14(%ebp),%eax
f010879f:	c1 e0 0c             	shl    $0xc,%eax
f01087a2:	89 c2                	mov    %eax,%edx
f01087a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087a7:	01 d0                	add    %edx,%eax
f01087a9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087af:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01087b2:	eb 4b                	jmp    f01087ff <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f01087b4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01087bb:	83 ec 04             	sub    $0x4,%esp
f01087be:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087c1:	50                   	push   %eax
f01087c2:	ff 75 ec             	pushl  -0x14(%ebp)
f01087c5:	ff 75 08             	pushl  0x8(%ebp)
f01087c8:	e8 e4 e2 ff ff       	call   f0106ab1 <get_page_table>
f01087cd:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087d0:	83 ec 04             	sub    $0x4,%esp
f01087d3:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087d6:	50                   	push   %eax
f01087d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01087da:	ff 75 08             	pushl  0x8(%ebp)
f01087dd:	e8 24 e6 ff ff       	call   f0106e06 <get_frame_info>
f01087e2:	83 c4 10             	add    $0x10,%esp
f01087e5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f01087e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01087ec:	74 0a                	je     f01087f8 <cut_paste_pages+0xa8>
			return -1;
f01087ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01087f3:	e9 d4 00 00 00       	jmp    f01088cc <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087f8:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01087ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108802:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108805:	72 ad                	jb     f01087b4 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010880a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010880d:	e9 a9 00 00 00       	jmp    f01088bb <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108812:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108819:	83 ec 04             	sub    $0x4,%esp
f010881c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010881f:	50                   	push   %eax
f0108820:	ff 75 e8             	pushl  -0x18(%ebp)
f0108823:	ff 75 08             	pushl  0x8(%ebp)
f0108826:	e8 86 e2 ff ff       	call   f0106ab1 <get_page_table>
f010882b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010882e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108831:	85 c0                	test   %eax,%eax
f0108833:	75 14                	jne    f0108849 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108835:	83 ec 08             	sub    $0x8,%esp
f0108838:	ff 75 e8             	pushl  -0x18(%ebp)
f010883b:	ff 75 08             	pushl  0x8(%ebp)
f010883e:	e8 c4 e3 ff ff       	call   f0106c07 <create_page_table>
f0108843:	83 c4 10             	add    $0x10,%esp
f0108846:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010884f:	50                   	push   %eax
f0108850:	ff 75 e8             	pushl  -0x18(%ebp)
f0108853:	ff 75 08             	pushl  0x8(%ebp)
f0108856:	e8 ab e5 ff ff       	call   f0106e06 <get_frame_info>
f010885b:	83 c4 10             	add    $0x10,%esp
f010885e:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108861:	83 ec 08             	sub    $0x8,%esp
f0108864:	ff 75 f0             	pushl  -0x10(%ebp)
f0108867:	ff 75 08             	pushl  0x8(%ebp)
f010886a:	e8 f2 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010886f:	83 c4 10             	add    $0x10,%esp
f0108872:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108875:	83 ec 08             	sub    $0x8,%esp
f0108878:	ff 75 f0             	pushl  -0x10(%ebp)
f010887b:	ff 75 08             	pushl  0x8(%ebp)
f010887e:	e8 f3 e5 ff ff       	call   f0106e76 <unmap_frame>
f0108883:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108886:	83 ec 0c             	sub    $0xc,%esp
f0108889:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010888c:	50                   	push   %eax
f010888d:	e8 60 e0 ff ff       	call   f01068f2 <allocate_frame>
f0108892:	83 c4 10             	add    $0x10,%esp
f0108895:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108898:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010889b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010889e:	ff 75 e8             	pushl  -0x18(%ebp)
f01088a1:	50                   	push   %eax
f01088a2:	ff 75 08             	pushl  0x8(%ebp)
f01088a5:	e8 97 e4 ff ff       	call   f0106d41 <map_frame>
f01088aa:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f01088ad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01088b4:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01088bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01088be:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01088c1:	0f 82 4b ff ff ff    	jb     f0108812 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f01088c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01088cc:	c9                   	leave  
f01088cd:	c3                   	ret    

f01088ce <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01088ce:	55                   	push   %ebp
f01088cf:	89 e5                	mov    %esp,%ebp
f01088d1:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f01088d4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f01088db:	8b 45 10             	mov    0x10(%ebp),%eax
f01088de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f01088e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01088e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01088e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01088ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01088ed:	e9 d1 00 00 00       	jmp    f01089c3 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f01088f2:	83 ec 04             	sub    $0x4,%esp
f01088f5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01088f8:	50                   	push   %eax
f01088f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01088fc:	ff 75 08             	pushl  0x8(%ebp)
f01088ff:	e8 ad e1 ff ff       	call   f0106ab1 <get_page_table>
f0108904:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108907:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010890a:	85 c0                	test   %eax,%eax
f010890c:	75 14                	jne    f0108922 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010890e:	83 ec 08             	sub    $0x8,%esp
f0108911:	ff 75 f0             	pushl  -0x10(%ebp)
f0108914:	ff 75 08             	pushl  0x8(%ebp)
f0108917:	e8 eb e2 ff ff       	call   f0106c07 <create_page_table>
f010891c:	83 c4 10             	add    $0x10,%esp
f010891f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108922:	83 ec 04             	sub    $0x4,%esp
f0108925:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108928:	50                   	push   %eax
f0108929:	ff 75 f0             	pushl  -0x10(%ebp)
f010892c:	ff 75 08             	pushl  0x8(%ebp)
f010892f:	e8 d2 e4 ff ff       	call   f0106e06 <get_frame_info>
f0108934:	83 c4 10             	add    $0x10,%esp
f0108937:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f010893a:	83 ec 08             	sub    $0x8,%esp
f010893d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108940:	ff 75 08             	pushl  0x8(%ebp)
f0108943:	e8 19 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108948:	83 c4 10             	add    $0x10,%esp
f010894b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f010894e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108951:	85 c0                	test   %eax,%eax
f0108953:	74 14                	je     f0108969 <copy_paste_chunk+0x9b>
f0108955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108958:	83 e0 02             	and    $0x2,%eax
f010895b:	85 c0                	test   %eax,%eax
f010895d:	75 0a                	jne    f0108969 <copy_paste_chunk+0x9b>
			return -1;
f010895f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108964:	e9 a7 00 00 00       	jmp    f0108a10 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108969:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010896c:	85 c0                	test   %eax,%eax
f010896e:	75 45                	jne    f01089b5 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108970:	83 ec 08             	sub    $0x8,%esp
f0108973:	ff 75 f4             	pushl  -0xc(%ebp)
f0108976:	ff 75 08             	pushl  0x8(%ebp)
f0108979:	e8 e3 f2 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010897e:	83 c4 10             	add    $0x10,%esp
f0108981:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108987:	83 e0 04             	and    $0x4,%eax
f010898a:	83 c8 02             	or     $0x2,%eax
f010898d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108990:	83 ec 0c             	sub    $0xc,%esp
f0108993:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108996:	50                   	push   %eax
f0108997:	e8 56 df ff ff       	call   f01068f2 <allocate_frame>
f010899c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010899f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01089a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01089a5:	52                   	push   %edx
f01089a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01089a9:	50                   	push   %eax
f01089aa:	ff 75 08             	pushl  0x8(%ebp)
f01089ad:	e8 8f e3 ff ff       	call   f0106d41 <map_frame>
f01089b2:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f01089b5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01089bc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01089c3:	8b 55 10             	mov    0x10(%ebp),%edx
f01089c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01089c9:	01 d0                	add    %edx,%eax
f01089cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01089ce:	0f 87 1e ff ff ff    	ja     f01088f2 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f01089d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01089d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f01089da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089e6:	eb 16                	jmp    f01089fe <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f01089e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089eb:	8b 10                	mov    (%eax),%edx
f01089ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089f0:	89 10                	mov    %edx,(%eax)
	    frame++;
f01089f2:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f01089f6:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089fa:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f01089fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a01:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a04:	01 d0                	add    %edx,%eax
f0108a06:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108a09:	77 dd                	ja     f01089e8 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a10:	c9                   	leave  
f0108a11:	c3                   	ret    

f0108a12 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108a12:	55                   	push   %ebp
f0108a13:	89 e5                	mov    %esp,%ebp
f0108a15:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108a18:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a22:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108a30:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108a37:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a3d:	01 c2                	add    %eax,%edx
f0108a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108a42:	01 d0                	add    %edx,%eax
f0108a44:	48                   	dec    %eax
f0108a45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a50:	f7 75 e8             	divl   -0x18(%ebp)
f0108a53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a56:	29 d0                	sub    %edx,%eax
f0108a58:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a61:	e9 ac 00 00 00       	jmp    f0108b12 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108a66:	83 ec 04             	sub    $0x4,%esp
f0108a69:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a6c:	50                   	push   %eax
f0108a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a70:	ff 75 08             	pushl  0x8(%ebp)
f0108a73:	e8 39 e0 ff ff       	call   f0106ab1 <get_page_table>
f0108a78:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108a7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a7e:	85 c0                	test   %eax,%eax
f0108a80:	75 14                	jne    f0108a96 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108a82:	83 ec 08             	sub    $0x8,%esp
f0108a85:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a88:	ff 75 08             	pushl  0x8(%ebp)
f0108a8b:	e8 77 e1 ff ff       	call   f0106c07 <create_page_table>
f0108a90:	83 c4 10             	add    $0x10,%esp
f0108a93:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a96:	83 ec 04             	sub    $0x4,%esp
f0108a99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a9c:	50                   	push   %eax
f0108a9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108aa0:	ff 75 08             	pushl  0x8(%ebp)
f0108aa3:	e8 5e e3 ff ff       	call   f0106e06 <get_frame_info>
f0108aa8:	83 c4 10             	add    $0x10,%esp
f0108aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108aae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108ab2:	74 07                	je     f0108abb <share_chunk+0xa9>
           return -1;
f0108ab4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ab9:	eb 68                	jmp    f0108b23 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108abb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 0c             	pushl  0xc(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 0c             	pushl  0xc(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108aef:	8b 45 18             	mov    0x18(%ebp),%eax
f0108af2:	50                   	push   %eax
f0108af3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108af6:	ff 75 d8             	pushl  -0x28(%ebp)
f0108af9:	ff 75 08             	pushl  0x8(%ebp)
f0108afc:	e8 40 e2 ff ff       	call   f0106d41 <map_frame>
f0108b01:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108b04:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108b0b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108b18:	0f 82 48 ff ff ff    	jb     f0108a66 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108b1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108b23:	c9                   	leave  
f0108b24:	c3                   	ret    

f0108b25 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108b25:	55                   	push   %ebp
f0108b26:	89 e5                	mov    %esp,%ebp
f0108b28:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108b2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108b32:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b35:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b38:	01 d0                	add    %edx,%eax
f0108b3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108b3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108b44:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108b4b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108b52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108b6a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b71:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b77:	01 d0                	add    %edx,%eax
f0108b79:	48                   	dec    %eax
f0108b7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b85:	f7 75 dc             	divl   -0x24(%ebp)
f0108b88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b8b:	29 d0                	sub    %edx,%eax
f0108b8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b96:	e9 9d 00 00 00       	jmp    f0108c38 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ba1:	83 ec 04             	sub    $0x4,%esp
f0108ba4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ba7:	50                   	push   %eax
f0108ba8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bab:	ff 75 08             	pushl  0x8(%ebp)
f0108bae:	e8 fe de ff ff       	call   f0106ab1 <get_page_table>
f0108bb3:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108bb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bb9:	85 c0                	test   %eax,%eax
f0108bbb:	75 14                	jne    f0108bd1 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108bbd:	83 ec 08             	sub    $0x8,%esp
f0108bc0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bc3:	ff 75 08             	pushl  0x8(%ebp)
f0108bc6:	e8 3c e0 ff ff       	call   f0106c07 <create_page_table>
f0108bcb:	83 c4 10             	add    $0x10,%esp
f0108bce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108bd1:	83 ec 04             	sub    $0x4,%esp
f0108bd4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108bd7:	50                   	push   %eax
f0108bd8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bdb:	ff 75 08             	pushl  0x8(%ebp)
f0108bde:	e8 23 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108be3:	83 c4 10             	add    $0x10,%esp
f0108be6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bec:	85 c0                	test   %eax,%eax
f0108bee:	74 07                	je     f0108bf7 <allocate_chunk+0xd2>
		{
			return -1;
f0108bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bf5:	eb 52                	jmp    f0108c49 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108bf7:	83 ec 0c             	sub    $0xc,%esp
f0108bfa:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bfd:	50                   	push   %eax
f0108bfe:	e8 ef dc ff ff       	call   f01068f2 <allocate_frame>
f0108c03:	83 c4 10             	add    $0x10,%esp
f0108c06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108c09:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108c0d:	74 22                	je     f0108c31 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c12:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108c15:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108c18:	8b 55 14             	mov    0x14(%ebp),%edx
f0108c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c1e:	52                   	push   %edx
f0108c1f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108c22:	50                   	push   %eax
f0108c23:	ff 75 08             	pushl  0x8(%ebp)
f0108c26:	e8 16 e1 ff ff       	call   f0106d41 <map_frame>
f0108c2b:	83 c4 10             	add    $0x10,%esp
f0108c2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108c31:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c3b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c3e:	0f 82 57 ff ff ff    	jb     f0108b9b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c49:	c9                   	leave  
f0108c4a:	c3                   	ret    

f0108c4b <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108c4b:	55                   	push   %ebp
f0108c4c:	89 e5                	mov    %esp,%ebp
f0108c4e:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c54:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c5a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108c73:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108c7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c80:	01 d0                	add    %edx,%eax
f0108c82:	48                   	dec    %eax
f0108c83:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c8e:	f7 75 e0             	divl   -0x20(%ebp)
f0108c91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c94:	29 d0                	sub    %edx,%eax
f0108c96:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c9c:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108c9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108ca2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cac:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108cb1:	85 c0                	test   %eax,%eax
f0108cb3:	75 37                	jne    f0108cec <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108cb5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108cbc:	83 ec 04             	sub    $0x4,%esp
f0108cbf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cc2:	50                   	push   %eax
f0108cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cc6:	ff 75 08             	pushl  0x8(%ebp)
f0108cc9:	e8 e3 dd ff ff       	call   f0106ab1 <get_page_table>
f0108cce:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108cd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108cd4:	85 c0                	test   %eax,%eax
f0108cd6:	74 14                	je     f0108cec <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108cd8:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cdb:	8b 00                	mov    (%eax),%eax
f0108cdd:	8d 50 01             	lea    0x1(%eax),%edx
f0108ce0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ce3:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108ce5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108cec:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108cf0:	75 2d                	jne    f0108d1f <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108cf2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108cf9:	83 ec 04             	sub    $0x4,%esp
f0108cfc:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cff:	50                   	push   %eax
f0108d00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d03:	ff 75 08             	pushl  0x8(%ebp)
f0108d06:	e8 fb e0 ff ff       	call   f0106e06 <get_frame_info>
f0108d0b:	83 c4 10             	add    $0x10,%esp
f0108d0e:	85 c0                	test   %eax,%eax
f0108d10:	74 0d                	je     f0108d1f <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108d12:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d15:	8b 00                	mov    (%eax),%eax
f0108d17:	8d 50 01             	lea    0x1(%eax),%edx
f0108d1a:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d1d:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108d1f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d32:	01 d0                	add    %edx,%eax
f0108d34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d37:	0f 87 6c ff ff ff    	ja     f0108ca9 <calculate_allocated_space+0x5e>
}
f0108d3d:	90                   	nop
f0108d3e:	c9                   	leave  
f0108d3f:	c3                   	ret    

f0108d40 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108d40:	55                   	push   %ebp
f0108d41:	89 e5                	mov    %esp,%ebp
f0108d43:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108d4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108d62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108d65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d68:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d79:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108d7e:	85 c0                	test   %eax,%eax
f0108d80:	75 26                	jne    f0108da8 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108d82:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108d89:	83 ec 04             	sub    $0x4,%esp
f0108d8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d8f:	50                   	push   %eax
f0108d90:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d93:	ff 75 08             	pushl  0x8(%ebp)
f0108d96:	e8 16 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d9b:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108d9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108da1:	85 c0                	test   %eax,%eax
f0108da3:	75 03                	jne    f0108da8 <calculate_required_frames+0x68>
				number_of_tables++;
f0108da5:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108da8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108daf:	83 ec 04             	sub    $0x4,%esp
f0108db2:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108db5:	50                   	push   %eax
f0108db6:	ff 75 e8             	pushl  -0x18(%ebp)
f0108db9:	ff 75 08             	pushl  0x8(%ebp)
f0108dbc:	e8 45 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108dc1:	83 c4 10             	add    $0x10,%esp
f0108dc4:	85 c0                	test   %eax,%eax
f0108dc6:	75 03                	jne    f0108dcb <calculate_required_frames+0x8b>
			number_of_pages++;
f0108dc8:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108dcb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108dd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108dd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108dd8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ddb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dde:	01 d0                	add    %edx,%eax
f0108de0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108de3:	77 91                	ja     f0108d76 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108de5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108deb:	01 d0                	add    %edx,%eax
}
f0108ded:	c9                   	leave  
f0108dee:	c3                   	ret    

f0108def <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108def:	55                   	push   %ebp
f0108df0:	89 e5                	mov    %esp,%ebp
f0108df2:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108df5:	83 ec 04             	sub    $0x4,%esp
f0108df8:	68 d8 64 13 f0       	push   $0xf01364d8
f0108dfd:	68 25 01 00 00       	push   $0x125
f0108e02:	68 08 65 13 f0       	push   $0xf0136508
f0108e07:	e8 f9 73 ff ff       	call   f0100205 <_panic>

f0108e0c <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e0c:	55                   	push   %ebp
f0108e0d:	89 e5                	mov    %esp,%ebp
f0108e0f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108e12:	83 ec 04             	sub    $0x4,%esp
f0108e15:	68 24 65 13 f0       	push   $0xf0136524
f0108e1a:	68 2f 01 00 00       	push   $0x12f
f0108e1f:	68 08 65 13 f0       	push   $0xf0136508
f0108e24:	e8 dc 73 ff ff       	call   f0100205 <_panic>

f0108e29 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e29:	55                   	push   %ebp
f0108e2a:	89 e5                	mov    %esp,%ebp
f0108e2c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108e2f:	83 ec 04             	sub    $0x4,%esp
f0108e32:	68 50 65 13 f0       	push   $0xf0136550
f0108e37:	68 3d 01 00 00       	push   $0x13d
f0108e3c:	68 08 65 13 f0       	push   $0xf0136508
f0108e41:	e8 bf 73 ff ff       	call   f0100205 <_panic>

f0108e46 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108e46:	55                   	push   %ebp
f0108e47:	89 e5                	mov    %esp,%ebp
f0108e49:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108e4c:	83 ec 04             	sub    $0x4,%esp
f0108e4f:	68 90 65 13 f0       	push   $0xf0136590
f0108e54:	68 4d 01 00 00       	push   $0x14d
f0108e59:	68 08 65 13 f0       	push   $0xf0136508
f0108e5e:	e8 a2 73 ff ff       	call   f0100205 <_panic>

f0108e63 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108e63:	55                   	push   %ebp
f0108e64:	89 e5                	mov    %esp,%ebp
f0108e66:	57                   	push   %edi
f0108e67:	56                   	push   %esi
f0108e68:	53                   	push   %ebx
f0108e69:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108e6f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108e76:	83 ec 0c             	sub    $0xc,%esp
f0108e79:	ff 75 08             	pushl  0x8(%ebp)
f0108e7c:	e8 0b 22 00 00       	call   f010b08c <get_user_program_info>
f0108e81:	83 c4 10             	add    $0x10,%esp
f0108e84:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108e87:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108e8b:	75 0a                	jne    f0108e97 <env_create+0x34>
f0108e8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e92:	e9 cd 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108e97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e9a:	8b 40 08             	mov    0x8(%eax),%eax
f0108e9d:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108ea0:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108ea7:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108eaa:	83 ec 0c             	sub    $0xc,%esp
f0108ead:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108eb3:	50                   	push   %eax
f0108eb4:	e8 d3 0e 00 00       	call   f0109d8c <allocate_environment>
f0108eb9:	83 c4 10             	add    $0x10,%esp
f0108ebc:	85 c0                	test   %eax,%eax
f0108ebe:	79 0a                	jns    f0108eca <env_create+0x67>
	{
		return 0;
f0108ec0:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ec5:	e9 9a 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108eca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ecd:	8b 00                	mov    (%eax),%eax
f0108ecf:	83 ec 0c             	sub    $0xc,%esp
f0108ed2:	50                   	push   %eax
f0108ed3:	e8 42 82 02 00       	call   f013111a <strlen>
f0108ed8:	83 c4 10             	add    $0x10,%esp
f0108edb:	83 f8 3f             	cmp    $0x3f,%eax
f0108ede:	7f 20                	jg     f0108f00 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ee3:	8b 00                	mov    (%eax),%eax
f0108ee5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108eeb:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108ef1:	83 ec 08             	sub    $0x8,%esp
f0108ef4:	50                   	push   %eax
f0108ef5:	52                   	push   %edx
f0108ef6:	e8 6e 82 02 00       	call   f0131169 <strcpy>
f0108efb:	83 c4 10             	add    $0x10,%esp
f0108efe:	eb 20                	jmp    f0108f20 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108f00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f03:	8b 00                	mov    (%eax),%eax
f0108f05:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108f0b:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108f11:	83 ec 04             	sub    $0x4,%esp
f0108f14:	6a 3f                	push   $0x3f
f0108f16:	50                   	push   %eax
f0108f17:	52                   	push   %edx
f0108f18:	e8 7a 82 02 00       	call   f0131197 <strncpy>
f0108f1d:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108f20:	e8 6d 0f 00 00       	call   f0109e92 <create_user_directory>
f0108f25:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108f28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108f2b:	83 ec 0c             	sub    $0xc,%esp
f0108f2e:	50                   	push   %eax
f0108f2f:	e8 6f eb ff ff       	call   f0107aa3 <kheap_physical_address>
f0108f34:	83 c4 10             	add    $0x10,%esp
f0108f37:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108f3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f43:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108f46:	83 ec 0c             	sub    $0xc,%esp
f0108f49:	6a 02                	push   $0x2
f0108f4b:	e8 f3 4d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0108f50:	83 c4 10             	add    $0x10,%esp
f0108f53:	85 c0                	test   %eax,%eax
f0108f55:	74 21                	je     f0108f78 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108f57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f5d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f60:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108f66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f6f:	2b 55 10             	sub    0x10(%ebp),%edx
f0108f72:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108f78:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108f7c:	75 12                	jne    f0108f90 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108f7e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f84:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108f8b:	00 00 00 
f0108f8e:	eb 0f                	jmp    f0108f9f <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108f90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f96:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f99:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fa5:	83 ec 04             	sub    $0x4,%esp
f0108fa8:	ff 75 ac             	pushl  -0x54(%ebp)
f0108fab:	ff 75 b0             	pushl  -0x50(%ebp)
f0108fae:	50                   	push   %eax
f0108faf:	e8 fa 15 00 00       	call   f010a5ae <initialize_environment>
f0108fb4:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108fb7:	0f 20 d8             	mov    %cr3,%eax
f0108fba:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108fbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108fc0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108fc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fc9:	8b 40 60             	mov    0x60(%eax),%eax
f0108fcc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108fd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108fd8:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108fdb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108fe2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108fe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fef:	8b 40 74             	mov    0x74(%eax),%eax
f0108ff2:	48                   	dec    %eax
f0108ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ff6:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108ffd:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109000:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109006:	83 ec 08             	sub    $0x8,%esp
f0109009:	ff 75 b8             	pushl  -0x48(%ebp)
f010900c:	50                   	push   %eax
f010900d:	e8 af 1d 00 00       	call   f010adc1 <PROGRAM_SEGMENT_FIRST>
f0109012:	83 c4 0c             	add    $0xc,%esp
f0109015:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010901b:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109021:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109026:	89 c7                	mov    %eax,%edi
f0109028:	89 d6                	mov    %edx,%esi
f010902a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010902c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109032:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109035:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109038:	8b 40 10             	mov    0x10(%eax),%eax
f010903b:	83 f8 ff             	cmp    $0xffffffff,%eax
f010903e:	75 07                	jne    f0109047 <env_create+0x1e4>
f0109040:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109047:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010904a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010904d:	e9 15 03 00 00       	jmp    f0109367 <env_create+0x504>
	{
		segment_counter++;
f0109052:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109055:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f010905c:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010905f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109065:	83 ec 0c             	sub    $0xc,%esp
f0109068:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010906e:	52                   	push   %edx
f010906f:	ff 75 dc             	pushl  -0x24(%ebp)
f0109072:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109078:	52                   	push   %edx
f0109079:	ff 75 e4             	pushl  -0x1c(%ebp)
f010907c:	50                   	push   %eax
f010907d:	e8 4b 0e 00 00       	call   f0109ecd <program_segment_alloc_map_copy_workingset>
f0109082:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109085:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010908b:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010908e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109091:	8b 00                	mov    (%eax),%eax
f0109093:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109099:	8b 40 0c             	mov    0xc(%eax),%eax
f010909c:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010909f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090a2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01090a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01090a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090ad:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01090b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01090b7:	8b 55 98             	mov    -0x68(%ebp),%edx
f01090ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01090bd:	01 d0                	add    %edx,%eax
f01090bf:	48                   	dec    %eax
f01090c0:	89 45 88             	mov    %eax,-0x78(%ebp)
f01090c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01090cb:	f7 75 8c             	divl   -0x74(%ebp)
f01090ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090d1:	29 d0                	sub    %edx,%eax
f01090d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01090d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090d9:	2b 45 90             	sub    -0x70(%ebp),%eax
f01090dc:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01090df:	a1 44 26 78 f0       	mov    0xf0782644,%eax
f01090e4:	83 ec 04             	sub    $0x4,%esp
f01090e7:	68 00 10 00 00       	push   $0x1000
f01090ec:	6a 00                	push   $0x0
f01090ee:	50                   	push   %eax
f01090ef:	e8 14 82 02 00       	call   f0131308 <memset>
f01090f4:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01090f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01090fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01090fd:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f0109103:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109106:	01 d0                	add    %edx,%eax
f0109108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010910b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010910e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109111:	eb 13                	jmp    f0109126 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109113:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109116:	8a 10                	mov    (%eax),%dl
f0109118:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010911b:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010911d:	ff 45 cc             	incl   -0x34(%ebp)
f0109120:	ff 45 d4             	incl   -0x2c(%ebp)
f0109123:	ff 45 d0             	incl   -0x30(%ebp)
f0109126:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109129:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f010912c:	72 e5                	jb     f0109113 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010912e:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f0109134:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010913a:	83 ec 04             	sub    $0x4,%esp
f010913d:	52                   	push   %edx
f010913e:	ff 75 90             	pushl  -0x70(%ebp)
f0109141:	50                   	push   %eax
f0109142:	e8 ce a5 ff ff       	call   f0103715 <pf_add_env_page>
f0109147:	83 c4 10             	add    $0x10,%esp
f010914a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010914d:	75 17                	jne    f0109166 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010914f:	83 ec 04             	sub    $0x4,%esp
f0109152:	68 bc 65 13 f0       	push   $0xf01365bc
f0109157:	68 e1 00 00 00       	push   $0xe1
f010915c:	68 01 66 13 f0       	push   $0xf0136601
f0109161:	e8 9f 70 ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109166:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109169:	8b 50 04             	mov    0x4(%eax),%edx
f010916c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010916f:	01 d0                	add    %edx,%eax
f0109171:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109177:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010917d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109182:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109188:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010918b:	8b 50 04             	mov    0x4(%eax),%edx
f010918e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109191:	01 d0                	add    %edx,%eax
f0109193:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109199:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010919c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010919f:	eb 43                	jmp    f01091e4 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01091a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01091a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091aa:	83 ec 04             	sub    $0x4,%esp
f01091ad:	ff 75 d4             	pushl  -0x2c(%ebp)
f01091b0:	52                   	push   %edx
f01091b1:	50                   	push   %eax
f01091b2:	e8 5e a5 ff ff       	call   f0103715 <pf_add_env_page>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091bd:	75 17                	jne    f01091d6 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091bf:	83 ec 04             	sub    $0x4,%esp
f01091c2:	68 bc 65 13 f0       	push   $0xf01365bc
f01091c7:	68 ee 00 00 00       	push   $0xee
f01091cc:	68 01 66 13 f0       	push   $0xf0136601
f01091d1:	e8 2f 70 ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01091d6:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091dd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01091e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091e7:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01091ed:	72 b2                	jb     f01091a1 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01091ef:	a1 44 26 78 f0       	mov    0xf0782644,%eax
f01091f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01091f7:	83 ec 04             	sub    $0x4,%esp
f01091fa:	68 00 10 00 00       	push   $0x1000
f01091ff:	6a 00                	push   $0x0
f0109201:	ff 75 d0             	pushl  -0x30(%ebp)
f0109204:	e8 ff 80 02 00       	call   f0131308 <memset>
f0109209:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010920c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109212:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109215:	eb 13                	jmp    f010922a <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109217:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010921a:	8a 10                	mov    (%eax),%dl
f010921c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010921f:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109221:	ff 45 cc             	incl   -0x34(%ebp)
f0109224:	ff 45 d4             	incl   -0x2c(%ebp)
f0109227:	ff 45 d0             	incl   -0x30(%ebp)
f010922a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010922d:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109233:	72 e2                	jb     f0109217 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109235:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f010923b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109241:	83 ec 04             	sub    $0x4,%esp
f0109244:	52                   	push   %edx
f0109245:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010924b:	50                   	push   %eax
f010924c:	e8 c4 a4 ff ff       	call   f0103715 <pf_add_env_page>
f0109251:	83 c4 10             	add    $0x10,%esp
f0109254:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109257:	75 17                	jne    f0109270 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109259:	83 ec 04             	sub    $0x4,%esp
f010925c:	68 bc 65 13 f0       	push   $0xf01365bc
f0109261:	68 fd 00 00 00       	push   $0xfd
f0109266:	68 01 66 13 f0       	push   $0xf0136601
f010926b:	e8 95 6f ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109270:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109277:	10 00 00 
f010927a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010927d:	8b 50 04             	mov    0x4(%eax),%edx
f0109280:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109283:	01 c2                	add    %eax,%edx
f0109285:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010928b:	01 d0                	add    %edx,%eax
f010928d:	48                   	dec    %eax
f010928e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109294:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010929a:	ba 00 00 00 00       	mov    $0x0,%edx
f010929f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01092a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01092ab:	29 d0                	sub    %edx,%eax
f01092ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01092b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092b3:	8b 50 08             	mov    0x8(%eax),%edx
f01092b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092b9:	01 d0                	add    %edx,%eax
f01092bb:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01092be:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01092c4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01092cb:	eb 41                	jmp    f010930e <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01092cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d3:	83 ec 04             	sub    $0x4,%esp
f01092d6:	6a 01                	push   $0x1
f01092d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01092db:	50                   	push   %eax
f01092dc:	e8 03 a3 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01092e1:	83 c4 10             	add    $0x10,%esp
f01092e4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01092e7:	75 17                	jne    f0109300 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01092e9:	83 ec 04             	sub    $0x4,%esp
f01092ec:	68 bc 65 13 f0       	push   $0xf01365bc
f01092f1:	68 0a 01 00 00       	push   $0x10a
f01092f6:	68 01 66 13 f0       	push   $0xf0136601
f01092fb:	e8 05 6f ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109300:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109307:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010930e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109315:	10 00 00 
f0109318:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f010931e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109324:	01 d0                	add    %edx,%eax
f0109326:	48                   	dec    %eax
f0109327:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010932d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109333:	ba 00 00 00 00       	mov    $0x0,%edx
f0109338:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010933e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109344:	29 d0                	sub    %edx,%eax
f0109346:	89 c2                	mov    %eax,%edx
f0109348:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010934b:	39 c2                	cmp    %eax,%edx
f010934d:	0f 87 7a ff ff ff    	ja     f01092cd <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109353:	83 ec 08             	sub    $0x8,%esp
f0109356:	ff 75 b8             	pushl  -0x48(%ebp)
f0109359:	ff 75 e4             	pushl  -0x1c(%ebp)
f010935c:	e8 55 19 00 00       	call   f010acb6 <PROGRAM_SEGMENT_NEXT>
f0109361:	83 c4 10             	add    $0x10,%esp
f0109364:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109367:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010936b:	0f 85 e1 fc ff ff    	jne    f0109052 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109371:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109378:	e9 9d 00 00 00       	jmp    f010941a <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010937d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109383:	8b 48 78             	mov    0x78(%eax),%ecx
f0109386:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109389:	89 d0                	mov    %edx,%eax
f010938b:	01 c0                	add    %eax,%eax
f010938d:	01 d0                	add    %edx,%eax
f010938f:	c1 e0 03             	shl    $0x3,%eax
f0109392:	01 c8                	add    %ecx,%eax
f0109394:	8a 40 04             	mov    0x4(%eax),%al
f0109397:	84 c0                	test   %al,%al
f0109399:	75 7c                	jne    f0109417 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010939b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093a1:	8b 48 78             	mov    0x78(%eax),%ecx
f01093a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01093a7:	89 d0                	mov    %edx,%eax
f01093a9:	01 c0                	add    %eax,%eax
f01093ab:	01 d0                	add    %edx,%eax
f01093ad:	c1 e0 03             	shl    $0x3,%eax
f01093b0:	01 c8                	add    %ecx,%eax
f01093b2:	8b 00                	mov    (%eax),%eax
f01093b4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01093ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093c3:	83 ec 04             	sub    $0x4,%esp
f01093c6:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01093cc:	52                   	push   %edx
f01093cd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01093d3:	50                   	push   %eax
f01093d4:	e8 d8 d6 ff ff       	call   f0106ab1 <get_page_table>
f01093d9:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01093dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01093e2:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01093e8:	c1 ea 0c             	shr    $0xc,%edx
f01093eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01093f1:	c1 e2 02             	shl    $0x2,%edx
f01093f4:	01 d0                	add    %edx,%eax
f01093f6:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01093fc:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109402:	c1 e9 0c             	shr    $0xc,%ecx
f0109405:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010940b:	c1 e1 02             	shl    $0x2,%ecx
f010940e:	01 ca                	add    %ecx,%edx
f0109410:	8b 12                	mov    (%edx),%edx
f0109412:	83 e2 bf             	and    $0xffffffbf,%edx
f0109415:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109417:	ff 45 c4             	incl   -0x3c(%ebp)
f010941a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109420:	8b 50 74             	mov    0x74(%eax),%edx
f0109423:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109426:	39 c2                	cmp    %eax,%edx
f0109428:	0f 87 4f ff ff ff    	ja     f010937d <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010942e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109431:	8b 50 08             	mov    0x8(%eax),%edx
f0109434:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010943a:	83 ec 08             	sub    $0x8,%esp
f010943d:	52                   	push   %edx
f010943e:	50                   	push   %eax
f010943f:	e8 bc 16 00 00       	call   f010ab00 <set_environment_entry_point>
f0109444:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109447:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944d:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109454:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109457:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010945e:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109461:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109468:	e9 53 05 00 00       	jmp    f01099c0 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010946d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109474:	00 00 00 
		allocate_frame(&pp);
f0109477:	83 ec 0c             	sub    $0xc,%esp
f010947a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109480:	50                   	push   %eax
f0109481:	e8 6c d4 ff ff       	call   f01068f2 <allocate_frame>
f0109486:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109489:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010948f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109495:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109498:	6a 06                	push   $0x6
f010949a:	ff 75 c0             	pushl  -0x40(%ebp)
f010949d:	52                   	push   %edx
f010949e:	50                   	push   %eax
f010949f:	e8 59 da ff ff       	call   f0106efd <loadtime_map_frame>
f01094a4:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01094a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094aa:	83 ec 04             	sub    $0x4,%esp
f01094ad:	68 00 10 00 00       	push   $0x1000
f01094b2:	6a 00                	push   $0x0
f01094b4:	50                   	push   %eax
f01094b5:	e8 4e 7e 02 00       	call   f0131308 <memset>
f01094ba:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01094bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cf:	83 ec 04             	sub    $0x4,%esp
f01094d2:	ff 75 c0             	pushl  -0x40(%ebp)
f01094d5:	52                   	push   %edx
f01094d6:	50                   	push   %eax
f01094d7:	e8 ee e9 ff ff       	call   f0107eca <env_page_ws_set_entry>
f01094dc:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094df:	83 ec 0c             	sub    $0xc,%esp
f01094e2:	6a 02                	push   $0x2
f01094e4:	e8 5a 48 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01094e9:	83 c4 10             	add    $0x10,%esp
f01094ec:	85 c0                	test   %eax,%eax
f01094ee:	0f 84 6b 04 00 00    	je     f010995f <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01094fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109503:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109509:	89 d0                	mov    %edx,%eax
f010950b:	01 c0                	add    %eax,%eax
f010950d:	01 d0                	add    %edx,%eax
f010950f:	c1 e0 03             	shl    $0x3,%eax
f0109512:	01 c8                	add    %ecx,%eax
f0109514:	85 c0                	test   %eax,%eax
f0109516:	75 17                	jne    f010952f <env_create+0x6cc>
f0109518:	83 ec 04             	sub    $0x4,%esp
f010951b:	68 1e 66 13 f0       	push   $0xf013661e
f0109520:	68 41 01 00 00       	push   $0x141
f0109525:	68 01 66 13 f0       	push   $0xf0136601
f010952a:	e8 d6 6c ff ff       	call   f0100205 <_panic>
f010952f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109535:	8b 48 78             	mov    0x78(%eax),%ecx
f0109538:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109544:	89 d0                	mov    %edx,%eax
f0109546:	01 c0                	add    %eax,%eax
f0109548:	01 d0                	add    %edx,%eax
f010954a:	c1 e0 03             	shl    $0x3,%eax
f010954d:	01 c8                	add    %ecx,%eax
f010954f:	8b 40 10             	mov    0x10(%eax),%eax
f0109552:	85 c0                	test   %eax,%eax
f0109554:	74 4b                	je     f01095a1 <env_create+0x73e>
f0109556:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010955c:	8b 48 78             	mov    0x78(%eax),%ecx
f010955f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109565:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010956b:	89 d0                	mov    %edx,%eax
f010956d:	01 c0                	add    %eax,%eax
f010956f:	01 d0                	add    %edx,%eax
f0109571:	c1 e0 03             	shl    $0x3,%eax
f0109574:	01 c8                	add    %ecx,%eax
f0109576:	8b 50 10             	mov    0x10(%eax),%edx
f0109579:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109582:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109588:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010958e:	89 c8                	mov    %ecx,%eax
f0109590:	01 c0                	add    %eax,%eax
f0109592:	01 c8                	add    %ecx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	01 d8                	add    %ebx,%eax
f0109599:	8b 40 14             	mov    0x14(%eax),%eax
f010959c:	89 42 14             	mov    %eax,0x14(%edx)
f010959f:	eb 2f                	jmp    f01095d0 <env_create+0x76d>
f01095a1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ad:	8b 58 78             	mov    0x78(%eax),%ebx
f01095b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095bc:	89 c8                	mov    %ecx,%eax
f01095be:	01 c0                	add    %eax,%eax
f01095c0:	01 c8                	add    %ecx,%eax
f01095c2:	c1 e0 03             	shl    $0x3,%eax
f01095c5:	01 d8                	add    %ebx,%eax
f01095c7:	8b 40 14             	mov    0x14(%eax),%eax
f01095ca:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01095d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01095d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095e5:	89 d0                	mov    %edx,%eax
f01095e7:	01 c0                	add    %eax,%eax
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	c1 e0 03             	shl    $0x3,%eax
f01095ee:	01 c8                	add    %ecx,%eax
f01095f0:	8b 40 14             	mov    0x14(%eax),%eax
f01095f3:	85 c0                	test   %eax,%eax
f01095f5:	74 4b                	je     f0109642 <env_create+0x7df>
f01095f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0109600:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109606:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010960c:	89 d0                	mov    %edx,%eax
f010960e:	01 c0                	add    %eax,%eax
f0109610:	01 d0                	add    %edx,%eax
f0109612:	c1 e0 03             	shl    $0x3,%eax
f0109615:	01 c8                	add    %ecx,%eax
f0109617:	8b 50 14             	mov    0x14(%eax),%edx
f010961a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109620:	8b 58 78             	mov    0x78(%eax),%ebx
f0109623:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109629:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010962f:	89 c8                	mov    %ecx,%eax
f0109631:	01 c0                	add    %eax,%eax
f0109633:	01 c8                	add    %ecx,%eax
f0109635:	c1 e0 03             	shl    $0x3,%eax
f0109638:	01 d8                	add    %ebx,%eax
f010963a:	8b 40 10             	mov    0x10(%eax),%eax
f010963d:	89 42 10             	mov    %eax,0x10(%edx)
f0109640:	eb 2f                	jmp    f0109671 <env_create+0x80e>
f0109642:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109648:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010964e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109651:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109657:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010965d:	89 c8                	mov    %ecx,%eax
f010965f:	01 c0                	add    %eax,%eax
f0109661:	01 c8                	add    %ecx,%eax
f0109663:	c1 e0 03             	shl    $0x3,%eax
f0109666:	01 d8                	add    %ebx,%eax
f0109668:	8b 40 10             	mov    0x10(%eax),%eax
f010966b:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109671:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109677:	8b 48 78             	mov    0x78(%eax),%ecx
f010967a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109680:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109686:	89 d0                	mov    %edx,%eax
f0109688:	01 c0                	add    %eax,%eax
f010968a:	01 d0                	add    %edx,%eax
f010968c:	c1 e0 03             	shl    $0x3,%eax
f010968f:	01 c8                	add    %ecx,%eax
f0109691:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109698:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010969e:	8b 48 78             	mov    0x78(%eax),%ecx
f01096a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096ad:	89 d0                	mov    %edx,%eax
f01096af:	01 c0                	add    %eax,%eax
f01096b1:	01 d0                	add    %edx,%eax
f01096b3:	c1 e0 03             	shl    $0x3,%eax
f01096b6:	01 c8                	add    %ecx,%eax
f01096b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01096bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c5:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01096cb:	4a                   	dec    %edx
f01096cc:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01096d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d8:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01096de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e4:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01096ea:	39 c2                	cmp    %eax,%edx
f01096ec:	0f 83 39 01 00 00    	jae    f010982b <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01096fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109701:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109707:	89 d0                	mov    %edx,%eax
f0109709:	01 c0                	add    %eax,%eax
f010970b:	01 d0                	add    %edx,%eax
f010970d:	c1 e0 03             	shl    $0x3,%eax
f0109710:	01 c8                	add    %ecx,%eax
f0109712:	85 c0                	test   %eax,%eax
f0109714:	75 17                	jne    f010972d <env_create+0x8ca>
f0109716:	83 ec 04             	sub    $0x4,%esp
f0109719:	68 3c 66 13 f0       	push   $0xf013663c
f010971e:	68 46 01 00 00       	push   $0x146
f0109723:	68 01 66 13 f0       	push   $0xf0136601
f0109728:	e8 d8 6a ff ff       	call   f0100205 <_panic>
f010972d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109733:	8b 48 78             	mov    0x78(%eax),%ecx
f0109736:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109742:	89 d0                	mov    %edx,%eax
f0109744:	01 c0                	add    %eax,%eax
f0109746:	01 d0                	add    %edx,%eax
f0109748:	c1 e0 03             	shl    $0x3,%eax
f010974b:	01 c8                	add    %ecx,%eax
f010974d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109753:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109759:	89 50 10             	mov    %edx,0x10(%eax)
f010975c:	8b 40 10             	mov    0x10(%eax),%eax
f010975f:	85 c0                	test   %eax,%eax
f0109761:	74 31                	je     f0109794 <env_create+0x931>
f0109763:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109769:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010976f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109775:	8b 58 78             	mov    0x78(%eax),%ebx
f0109778:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109784:	89 c8                	mov    %ecx,%eax
f0109786:	01 c0                	add    %eax,%eax
f0109788:	01 c8                	add    %ecx,%eax
f010978a:	c1 e0 03             	shl    $0x3,%eax
f010978d:	01 d8                	add    %ebx,%eax
f010978f:	89 42 14             	mov    %eax,0x14(%edx)
f0109792:	eb 2c                	jmp    f01097c0 <env_create+0x95d>
f0109794:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010979a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097af:	89 c8                	mov    %ecx,%eax
f01097b1:	01 c0                	add    %eax,%eax
f01097b3:	01 c8                	add    %ecx,%eax
f01097b5:	c1 e0 03             	shl    $0x3,%eax
f01097b8:	01 d8                	add    %ebx,%eax
f01097ba:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01097c0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cc:	8b 58 78             	mov    0x78(%eax),%ebx
f01097cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097db:	89 c8                	mov    %ecx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 c8                	add    %ecx,%eax
f01097e1:	c1 e0 03             	shl    $0x3,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01097ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109801:	89 d0                	mov    %edx,%eax
f0109803:	01 c0                	add    %eax,%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	c1 e0 03             	shl    $0x3,%eax
f010980a:	01 c8                	add    %ecx,%eax
f010980c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109813:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109819:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010981f:	42                   	inc    %edx
f0109820:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109826:	e9 34 01 00 00       	jmp    f010995f <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010982b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109831:	8b 48 78             	mov    0x78(%eax),%ecx
f0109834:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109840:	89 d0                	mov    %edx,%eax
f0109842:	01 c0                	add    %eax,%eax
f0109844:	01 d0                	add    %edx,%eax
f0109846:	c1 e0 03             	shl    $0x3,%eax
f0109849:	01 c8                	add    %ecx,%eax
f010984b:	85 c0                	test   %eax,%eax
f010984d:	75 17                	jne    f0109866 <env_create+0xa03>
f010984f:	83 ec 04             	sub    $0x4,%esp
f0109852:	68 3c 66 13 f0       	push   $0xf013663c
f0109857:	68 4a 01 00 00       	push   $0x14a
f010985c:	68 01 66 13 f0       	push   $0xf0136601
f0109861:	e8 9f 69 ff ff       	call   f0100205 <_panic>
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 48 78             	mov    0x78(%eax),%ecx
f010986f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109875:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010987b:	89 d0                	mov    %edx,%eax
f010987d:	01 c0                	add    %eax,%eax
f010987f:	01 d0                	add    %edx,%eax
f0109881:	c1 e0 03             	shl    $0x3,%eax
f0109884:	01 c8                	add    %ecx,%eax
f0109886:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988c:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109892:	89 50 10             	mov    %edx,0x10(%eax)
f0109895:	8b 40 10             	mov    0x10(%eax),%eax
f0109898:	85 c0                	test   %eax,%eax
f010989a:	74 31                	je     f01098cd <env_create+0xa6a>
f010989c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098a2:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01098a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01098b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098bd:	89 c8                	mov    %ecx,%eax
f01098bf:	01 c0                	add    %eax,%eax
f01098c1:	01 c8                	add    %ecx,%eax
f01098c3:	c1 e0 03             	shl    $0x3,%eax
f01098c6:	01 d8                	add    %ebx,%eax
f01098c8:	89 42 14             	mov    %eax,0x14(%edx)
f01098cb:	eb 2c                	jmp    f01098f9 <env_create+0xa96>
f01098cd:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d9:	8b 58 78             	mov    0x78(%eax),%ebx
f01098dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098e8:	89 c8                	mov    %ecx,%eax
f01098ea:	01 c0                	add    %eax,%eax
f01098ec:	01 c8                	add    %ecx,%eax
f01098ee:	c1 e0 03             	shl    $0x3,%eax
f01098f1:	01 d8                	add    %ebx,%eax
f01098f3:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01098f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109905:	8b 58 78             	mov    0x78(%eax),%ebx
f0109908:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109914:	89 c8                	mov    %ecx,%eax
f0109916:	01 c0                	add    %eax,%eax
f0109918:	01 c8                	add    %ecx,%eax
f010991a:	c1 e0 03             	shl    $0x3,%eax
f010991d:	01 d8                	add    %ebx,%eax
f010991f:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109925:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992b:	8b 48 78             	mov    0x78(%eax),%ecx
f010992e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109934:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010993a:	89 d0                	mov    %edx,%eax
f010993c:	01 c0                	add    %eax,%eax
f010993e:	01 d0                	add    %edx,%eax
f0109940:	c1 e0 03             	shl    $0x3,%eax
f0109943:	01 c8                	add    %ecx,%eax
f0109945:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010994c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109952:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109958:	42                   	inc    %edx
f0109959:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f010995f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109965:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010996b:	42                   	inc    %edx
f010996c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109972:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109978:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109984:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010998a:	8b 5a 74             	mov    0x74(%edx),%ebx
f010998d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109992:	f7 f3                	div    %ebx
f0109994:	89 d0                	mov    %edx,%eax
f0109996:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010999c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a2:	83 ec 04             	sub    $0x4,%esp
f01099a5:	6a 01                	push   $0x1
f01099a7:	ff 75 c0             	pushl  -0x40(%ebp)
f01099aa:	50                   	push   %eax
f01099ab:	e8 34 9c ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01099b0:	83 c4 10             	add    $0x10,%esp
f01099b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01099b9:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01099c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01099c3:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01099c9:	0f 83 9e fa ff ff    	jae    f010946d <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01099cf:	83 ec 0c             	sub    $0xc,%esp
f01099d2:	6a 02                	push   $0x2
f01099d4:	e8 6a 43 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01099d9:	83 c4 10             	add    $0x10,%esp
f01099dc:	85 c0                	test   %eax,%eax
f01099de:	74 72                	je     f0109a52 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01099e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01099e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ed:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01099f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01099f6:	eb 2b                	jmp    f0109a23 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01099f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01099fb:	8b 10                	mov    (%eax),%edx
f01099fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a03:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a06:	6a 01                	push   $0x1
f0109a08:	6a 00                	push   $0x0
f0109a0a:	52                   	push   %edx
f0109a0b:	50                   	push   %eax
f0109a0c:	e8 9c e1 ff ff       	call   f0107bad <pt_set_page_permissions>
f0109a11:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109a14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a20:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109a23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a29:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a2d:	74 08                	je     f0109a37 <env_create+0xbd4>
f0109a2f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109a32:	8b 52 10             	mov    0x10(%edx),%edx
f0109a35:	eb 05                	jmp    f0109a3c <env_create+0xbd9>
f0109a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a3c:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109a42:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a48:	85 c0                	test   %eax,%eax
f0109a4a:	75 ac                	jne    f01099f8 <env_create+0xb95>
f0109a4c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a50:	75 a6                	jne    f01099f8 <env_create+0xb95>
f0109a52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109a55:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109a58:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109a5b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109a5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109a67:	5b                   	pop    %ebx
f0109a68:	5e                   	pop    %esi
f0109a69:	5f                   	pop    %edi
f0109a6a:	5d                   	pop    %ebp
f0109a6b:	c3                   	ret    

f0109a6c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109a6c:	55                   	push   %ebp
f0109a6d:	89 e5                	mov    %esp,%ebp
f0109a6f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109a72:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a7a:	74 25                	je     f0109aa1 <env_run+0x35>
	{
		curenv = e ;
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4
		curenv->env_runs++ ;
f0109a84:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a89:	8b 50 58             	mov    0x58(%eax),%edx
f0109a8c:	42                   	inc    %edx
f0109a8d:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109a90:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a95:	8b 40 60             	mov    0x60(%eax),%eax
f0109a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a9e:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109aa1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109aa6:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109aad:	e8 0d a7 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ab2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	50                   	push   %eax
f0109abb:	e8 0f 01 00 00       	call   f0109bcf <env_pop_tf>

f0109ac0 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109ac0:	55                   	push   %ebp
f0109ac1:	89 e5                	mov    %esp,%ebp
f0109ac3:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109ac6:	83 ec 0c             	sub    $0xc,%esp
f0109ac9:	ff 75 08             	pushl  0x8(%ebp)
f0109acc:	e8 3e 11 00 00       	call   f010ac0f <unshare_pws_at_user_space>
f0109ad1:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ad4:	83 ec 04             	sub    $0x4,%esp
f0109ad7:	68 60 66 13 f0       	push   $0xf0136660
f0109adc:	68 9d 01 00 00       	push   $0x19d
f0109ae1:	68 01 66 13 f0       	push   $0xf0136601
f0109ae6:	e8 1a 67 ff ff       	call   f0100205 <_panic>

f0109aeb <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109aeb:	55                   	push   %ebp
f0109aec:	89 e5                	mov    %esp,%ebp
f0109aee:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109af1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109af6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109af9:	83 ec 0c             	sub    $0xc,%esp
f0109afc:	50                   	push   %eax
f0109afd:	e8 a0 b7 ff ff       	call   f01052a2 <sched_exit_env>
f0109b02:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109b05:	e8 1c ac ff ff       	call   f0104726 <fos_scheduler>

f0109b0a <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109b0a:	55                   	push   %ebp
f0109b0b:	89 e5                	mov    %esp,%ebp
f0109b0d:	53                   	push   %ebx
f0109b0e:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109b11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109b15:	75 15                	jne    f0109b2c <envid2env+0x22>
		*env_store = curenv;
f0109b17:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b20:	89 10                	mov    %edx,(%eax)
		return 0;
f0109b22:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b27:	e9 9e 00 00 00       	jmp    f0109bca <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109b2c:	8b 1d b0 1c 78 f0    	mov    0xf0781cb0,%ebx
f0109b32:	83 ec 0c             	sub    $0xc,%esp
f0109b35:	68 b1 02 00 00       	push   $0x2b1
f0109b3a:	e8 4d 63 02 00       	call   f012fe8c <nearest_pow2_ceil>
f0109b3f:	83 c4 10             	add    $0x10,%esp
f0109b42:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b48:	21 c2                	and    %eax,%edx
f0109b4a:	89 d0                	mov    %edx,%eax
f0109b4c:	c1 e0 03             	shl    $0x3,%eax
f0109b4f:	01 d0                	add    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 04             	shl    $0x4,%eax
f0109b61:	01 d8                	add    %ebx,%eax
f0109b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b69:	8b 40 54             	mov    0x54(%eax),%eax
f0109b6c:	85 c0                	test   %eax,%eax
f0109b6e:	74 0b                	je     f0109b7b <envid2env+0x71>
f0109b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b73:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b76:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b79:	74 10                	je     f0109b8b <envid2env+0x81>
		*env_store = 0;
f0109b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b84:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b89:	eb 3f                	jmp    f0109bca <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109b8b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109b8f:	74 2c                	je     f0109bbd <envid2env+0xb3>
f0109b91:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109b96:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b99:	74 22                	je     f0109bbd <envid2env+0xb3>
f0109b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b9e:	8b 50 50             	mov    0x50(%eax),%edx
f0109ba1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109ba6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ba9:	39 c2                	cmp    %eax,%edx
f0109bab:	74 10                	je     f0109bbd <envid2env+0xb3>
		*env_store = 0;
f0109bad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109bb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109bbb:	eb 0d                	jmp    f0109bca <envid2env+0xc0>
	}

	*env_store = e;
f0109bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc3:	89 10                	mov    %edx,(%eax)
	return 0;
f0109bc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109bcd:	c9                   	leave  
f0109bce:	c3                   	ret    

f0109bcf <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109bcf:	55                   	push   %ebp
f0109bd0:	89 e5                	mov    %esp,%ebp
f0109bd2:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109bd5:	8b 65 08             	mov    0x8(%ebp),%esp
f0109bd8:	61                   	popa   
f0109bd9:	07                   	pop    %es
f0109bda:	1f                   	pop    %ds
f0109bdb:	83 c4 08             	add    $0x8,%esp
f0109bde:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109bdf:	83 ec 04             	sub    $0x4,%esp
f0109be2:	68 87 66 13 f0       	push   $0xf0136687
f0109be7:	68 fd 01 00 00       	push   $0x1fd
f0109bec:	68 01 66 13 f0       	push   $0xf0136601
f0109bf1:	e8 0f 66 ff ff       	call   f0100205 <_panic>

f0109bf6 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109bf6:	55                   	push   %ebp
f0109bf7:	89 e5                	mov    %esp,%ebp
f0109bf9:	53                   	push   %ebx
f0109bfa:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109bfd:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109c04:	e9 73 01 00 00       	jmp    f0109d7c <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109c09:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c12:	89 d0                	mov    %edx,%eax
f0109c14:	c1 e0 03             	shl    $0x3,%eax
f0109c17:	01 d0                	add    %edx,%eax
f0109c19:	01 c0                	add    %eax,%eax
f0109c1b:	01 d0                	add    %edx,%eax
f0109c1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c24:	01 d0                	add    %edx,%eax
f0109c26:	c1 e0 04             	shl    $0x4,%eax
f0109c29:	01 c8                	add    %ecx,%eax
f0109c2b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109c32:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c3b:	89 d0                	mov    %edx,%eax
f0109c3d:	c1 e0 03             	shl    $0x3,%eax
f0109c40:	01 d0                	add    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c4d:	01 d0                	add    %edx,%eax
f0109c4f:	c1 e0 04             	shl    $0x4,%eax
f0109c52:	01 c8                	add    %ecx,%eax
f0109c54:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109c5b:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c64:	89 d0                	mov    %edx,%eax
f0109c66:	c1 e0 03             	shl    $0x3,%eax
f0109c69:	01 d0                	add    %edx,%eax
f0109c6b:	01 c0                	add    %eax,%eax
f0109c6d:	01 d0                	add    %edx,%eax
f0109c6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c76:	01 d0                	add    %edx,%eax
f0109c78:	c1 e0 04             	shl    $0x4,%eax
f0109c7b:	01 c8                	add    %ecx,%eax
f0109c7d:	85 c0                	test   %eax,%eax
f0109c7f:	75 17                	jne    f0109c98 <env_init+0xa2>
f0109c81:	83 ec 04             	sub    $0x4,%esp
f0109c84:	68 3c 66 13 f0       	push   $0xf013663c
f0109c89:	68 19 02 00 00       	push   $0x219
f0109c8e:	68 01 66 13 f0       	push   $0xf0136601
f0109c93:	e8 6d 65 ff ff       	call   f0100205 <_panic>
f0109c98:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ca1:	89 d0                	mov    %edx,%eax
f0109ca3:	c1 e0 03             	shl    $0x3,%eax
f0109ca6:	01 d0                	add    %edx,%eax
f0109ca8:	01 c0                	add    %eax,%eax
f0109caa:	01 d0                	add    %edx,%eax
f0109cac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cb3:	01 d0                	add    %edx,%eax
f0109cb5:	c1 e0 04             	shl    $0x4,%eax
f0109cb8:	01 c8                	add    %ecx,%eax
f0109cba:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109cc0:	89 50 44             	mov    %edx,0x44(%eax)
f0109cc3:	8b 40 44             	mov    0x44(%eax),%eax
f0109cc6:	85 c0                	test   %eax,%eax
f0109cc8:	74 2d                	je     f0109cf7 <env_init+0x101>
f0109cca:	8b 0d b8 1c 78 f0    	mov    0xf0781cb8,%ecx
f0109cd0:	8b 1d b0 1c 78 f0    	mov    0xf0781cb0,%ebx
f0109cd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cd9:	89 d0                	mov    %edx,%eax
f0109cdb:	c1 e0 03             	shl    $0x3,%eax
f0109cde:	01 d0                	add    %edx,%eax
f0109ce0:	01 c0                	add    %eax,%eax
f0109ce2:	01 d0                	add    %edx,%eax
f0109ce4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ceb:	01 d0                	add    %edx,%eax
f0109ced:	c1 e0 04             	shl    $0x4,%eax
f0109cf0:	01 d8                	add    %ebx,%eax
f0109cf2:	89 41 48             	mov    %eax,0x48(%ecx)
f0109cf5:	eb 27                	jmp    f0109d1e <env_init+0x128>
f0109cf7:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109cfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d00:	89 d0                	mov    %edx,%eax
f0109d02:	c1 e0 03             	shl    $0x3,%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	01 c0                	add    %eax,%eax
f0109d09:	01 d0                	add    %edx,%eax
f0109d0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d12:	01 d0                	add    %edx,%eax
f0109d14:	c1 e0 04             	shl    $0x4,%eax
f0109d17:	01 c8                	add    %ecx,%eax
f0109d19:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f0109d1e:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d27:	89 d0                	mov    %edx,%eax
f0109d29:	c1 e0 03             	shl    $0x3,%eax
f0109d2c:	01 d0                	add    %edx,%eax
f0109d2e:	01 c0                	add    %eax,%eax
f0109d30:	01 d0                	add    %edx,%eax
f0109d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d39:	01 d0                	add    %edx,%eax
f0109d3b:	c1 e0 04             	shl    $0x4,%eax
f0109d3e:	01 c8                	add    %ecx,%eax
f0109d40:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f0109d45:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d4e:	89 d0                	mov    %edx,%eax
f0109d50:	c1 e0 03             	shl    $0x3,%eax
f0109d53:	01 d0                	add    %edx,%eax
f0109d55:	01 c0                	add    %eax,%eax
f0109d57:	01 d0                	add    %edx,%eax
f0109d59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d60:	01 d0                	add    %edx,%eax
f0109d62:	c1 e0 04             	shl    $0x4,%eax
f0109d65:	01 c8                	add    %ecx,%eax
f0109d67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d6e:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f0109d73:	40                   	inc    %eax
f0109d74:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d79:	ff 4d f4             	decl   -0xc(%ebp)
f0109d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d80:	0f 89 83 fe ff ff    	jns    f0109c09 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d86:	90                   	nop
f0109d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d8a:	c9                   	leave  
f0109d8b:	c3                   	ret    

f0109d8c <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d8c:	55                   	push   %ebp
f0109d8d:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d8f:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	89 10                	mov    %edx,(%eax)
f0109d9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9d:	8b 00                	mov    (%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	75 07                	jne    f0109daa <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109da3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109da8:	eb 11                	jmp    f0109dbb <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dad:	8b 00                	mov    (%eax),%eax
f0109daf:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109dbb:	5d                   	pop    %ebp
f0109dbc:	c3                   	ret    

f0109dbd <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109dbd:	55                   	push   %ebp
f0109dbe:	89 e5                	mov    %esp,%ebp
f0109dc0:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109dc3:	83 ec 04             	sub    $0x4,%esp
f0109dc6:	68 f0 05 00 00       	push   $0x5f0
f0109dcb:	6a 00                	push   $0x0
f0109dcd:	ff 75 08             	pushl  0x8(%ebp)
f0109dd0:	e8 33 75 02 00       	call   f0131308 <memset>
f0109dd5:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109dd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ddb:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109de2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109de6:	75 17                	jne    f0109dff <free_environment+0x42>
f0109de8:	83 ec 04             	sub    $0x4,%esp
f0109deb:	68 3c 66 13 f0       	push   $0xf013663c
f0109df0:	68 36 02 00 00       	push   $0x236
f0109df5:	68 01 66 13 f0       	push   $0xf0136601
f0109dfa:	e8 06 64 ff ff       	call   f0100205 <_panic>
f0109dff:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	89 50 44             	mov    %edx,0x44(%eax)
f0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e11:	85 c0                	test   %eax,%eax
f0109e13:	74 0d                	je     f0109e22 <free_environment+0x65>
f0109e15:	a1 b8 1c 78 f0       	mov    0xf0781cb8,%eax
f0109e1a:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0109e20:	eb 08                	jmp    f0109e2a <free_environment+0x6d>
f0109e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e25:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f0109e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e35:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e3c:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f0109e41:	40                   	inc    %eax
f0109e42:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
}
f0109e47:	90                   	nop
f0109e48:	c9                   	leave  
f0109e49:	c3                   	ret    

f0109e4a <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109e4a:	55                   	push   %ebp
f0109e4b:	89 e5                	mov    %esp,%ebp
f0109e4d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f0109e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109e53:	89 d0                	mov    %edx,%eax
f0109e55:	01 c0                	add    %eax,%eax
f0109e57:	01 d0                	add    %edx,%eax
f0109e59:	c1 e0 03             	shl    $0x3,%eax
f0109e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f0109e5f:	83 ec 0c             	sub    $0xc,%esp
f0109e62:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e65:	e8 1b da ff ff       	call   f0107885 <kmalloc>
f0109e6a:	83 c4 10             	add    $0x10,%esp
f0109e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f0109e70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e74:	75 17                	jne    f0109e8d <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109e76:	83 ec 04             	sub    $0x4,%esp
f0109e79:	68 93 66 13 f0       	push   $0xf0136693
f0109e7e:	68 44 02 00 00       	push   $0x244
f0109e83:	68 01 66 13 f0       	push   $0xf0136601
f0109e88:	e8 78 63 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f0109e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f0109e90:	c9                   	leave  
f0109e91:	c3                   	ret    

f0109e92 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109e92:	55                   	push   %ebp
f0109e93:	89 e5                	mov    %esp,%ebp
f0109e95:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f0109e98:	83 ec 0c             	sub    $0xc,%esp
f0109e9b:	68 00 10 00 00       	push   $0x1000
f0109ea0:	e8 e0 d9 ff ff       	call   f0107885 <kmalloc>
f0109ea5:	83 c4 10             	add    $0x10,%esp
f0109ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f0109eab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109eaf:	75 17                	jne    f0109ec8 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109eb1:	83 ec 04             	sub    $0x4,%esp
f0109eb4:	68 93 66 13 f0       	push   $0xf0136693
f0109eb9:	68 53 02 00 00       	push   $0x253
f0109ebe:	68 01 66 13 f0       	push   $0xf0136601
f0109ec3:	e8 3d 63 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f0109ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f0109ecb:	c9                   	leave  
f0109ecc:	c3                   	ret    

f0109ecd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109ecd:	55                   	push   %ebp
f0109ece:	89 e5                	mov    %esp,%ebp
f0109ed0:	53                   	push   %ebx
f0109ed1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109ed4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ed7:	8b 40 0c             	mov    0xc(%eax),%eax
f0109eda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109edd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ee0:	8b 40 08             	mov    0x8(%eax),%eax
f0109ee3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109ee6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109eed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109ef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109ef3:	01 c2                	add    %eax,%edx
f0109ef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109ef8:	01 d0                	add    %edx,%eax
f0109efa:	48                   	dec    %eax
f0109efb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109efe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f06:	f7 75 dc             	divl   -0x24(%ebp)
f0109f09:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f0c:	29 d0                	sub    %edx,%eax
f0109f0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109f11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109f17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109f22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109f29:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109f30:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109f39:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109f40:	0f 85 c8 05 00 00    	jne    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
f0109f46:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f49:	05 5c 05 00 00       	add    $0x55c,%eax
f0109f4e:	83 ec 08             	sub    $0x8,%esp
f0109f51:	68 b0 66 13 f0       	push   $0xf01366b0
f0109f56:	50                   	push   %eax
f0109f57:	e8 ca 72 02 00       	call   f0131226 <strcmp>
f0109f5c:	83 c4 10             	add    $0x10,%esp
f0109f5f:	85 c0                	test   %eax,%eax
f0109f61:	0f 84 a7 05 00 00    	je     f010a50e <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109f67:	8b 45 14             	mov    0x14(%ebp),%eax
f0109f6a:	83 f8 06             	cmp    $0x6,%eax
f0109f6d:	76 05                	jbe    f0109f74 <program_segment_alloc_map_copy_workingset+0xa7>
f0109f6f:	b8 06 00 00 00       	mov    $0x6,%eax
f0109f74:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109f77:	e9 92 05 00 00       	jmp    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109f7c:	83 ec 0c             	sub    $0xc,%esp
f0109f7f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109f82:	50                   	push   %eax
f0109f83:	e8 6a c9 ff ff       	call   f01068f2 <allocate_frame>
f0109f88:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109f8b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f91:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f94:	6a 06                	push   $0x6
f0109f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f99:	52                   	push   %edx
f0109f9a:	50                   	push   %eax
f0109f9b:	e8 5d cf ff ff       	call   f0106efd <loadtime_map_frame>
f0109fa0:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fb2:	89 d0                	mov    %edx,%eax
f0109fb4:	01 c0                	add    %eax,%eax
f0109fb6:	01 d0                	add    %edx,%eax
f0109fb8:	c1 e0 03             	shl    $0x3,%eax
f0109fbb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fc1:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fd2:	89 d0                	mov    %edx,%eax
f0109fd4:	01 c0                	add    %eax,%eax
f0109fd6:	01 d0                	add    %edx,%eax
f0109fd8:	c1 e0 03             	shl    $0x3,%eax
f0109fdb:	01 c8                	add    %ecx,%eax
f0109fdd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	01 c0                	add    %eax,%eax
f0109ff4:	01 d0                	add    %edx,%eax
f0109ff6:	c1 e0 03             	shl    $0x3,%eax
f0109ff9:	01 c8                	add    %ecx,%eax
f0109ffb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a002:	83 ec 0c             	sub    $0xc,%esp
f010a005:	6a 02                	push   $0x2
f010a007:	e8 37 3d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a00c:	83 c4 10             	add    $0x10,%esp
f010a00f:	85 c0                	test   %eax,%eax
f010a011:	0f 84 c8 03 00 00    	je     f010a3df <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a026:	89 d0                	mov    %edx,%eax
f010a028:	01 c0                	add    %eax,%eax
f010a02a:	01 d0                	add    %edx,%eax
f010a02c:	c1 e0 03             	shl    $0x3,%eax
f010a02f:	01 c8                	add    %ecx,%eax
f010a031:	85 c0                	test   %eax,%eax
f010a033:	75 17                	jne    f010a04c <program_segment_alloc_map_copy_workingset+0x17f>
f010a035:	83 ec 04             	sub    $0x4,%esp
f010a038:	68 1e 66 13 f0       	push   $0xf013661e
f010a03d:	68 85 02 00 00       	push   $0x285
f010a042:	68 01 66 13 f0       	push   $0xf0136601
f010a047:	e8 b9 61 ff ff       	call   f0100205 <_panic>
f010a04c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a052:	8b 45 08             	mov    0x8(%ebp),%eax
f010a055:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05b:	89 d0                	mov    %edx,%eax
f010a05d:	01 c0                	add    %eax,%eax
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	c1 e0 03             	shl    $0x3,%eax
f010a064:	01 c8                	add    %ecx,%eax
f010a066:	8b 40 10             	mov    0x10(%eax),%eax
f010a069:	85 c0                	test   %eax,%eax
f010a06b:	74 3f                	je     f010a0ac <program_segment_alloc_map_copy_workingset+0x1df>
f010a06d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a070:	8b 48 78             	mov    0x78(%eax),%ecx
f010a073:	8b 45 08             	mov    0x8(%ebp),%eax
f010a076:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a07c:	89 d0                	mov    %edx,%eax
f010a07e:	01 c0                	add    %eax,%eax
f010a080:	01 d0                	add    %edx,%eax
f010a082:	c1 e0 03             	shl    $0x3,%eax
f010a085:	01 c8                	add    %ecx,%eax
f010a087:	8b 50 10             	mov    0x10(%eax),%edx
f010a08a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a090:	8b 45 08             	mov    0x8(%ebp),%eax
f010a093:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a099:	89 c8                	mov    %ecx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 c8                	add    %ecx,%eax
f010a09f:	c1 e0 03             	shl    $0x3,%eax
f010a0a2:	01 d8                	add    %ebx,%eax
f010a0a4:	8b 40 14             	mov    0x14(%eax),%eax
f010a0a7:	89 42 14             	mov    %eax,0x14(%edx)
f010a0aa:	eb 26                	jmp    f010a0d2 <program_segment_alloc_map_copy_workingset+0x205>
f010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0af:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0bb:	89 d0                	mov    %edx,%eax
f010a0bd:	01 c0                	add    %eax,%eax
f010a0bf:	01 d0                	add    %edx,%eax
f010a0c1:	c1 e0 03             	shl    $0x3,%eax
f010a0c4:	01 c8                	add    %ecx,%eax
f010a0c6:	8b 50 14             	mov    0x14(%eax),%edx
f010a0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0cc:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0db:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0e1:	89 d0                	mov    %edx,%eax
f010a0e3:	01 c0                	add    %eax,%eax
f010a0e5:	01 d0                	add    %edx,%eax
f010a0e7:	c1 e0 03             	shl    $0x3,%eax
f010a0ea:	01 c8                	add    %ecx,%eax
f010a0ec:	8b 40 14             	mov    0x14(%eax),%eax
f010a0ef:	85 c0                	test   %eax,%eax
f010a0f1:	74 3f                	je     f010a132 <program_segment_alloc_map_copy_workingset+0x265>
f010a0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a102:	89 d0                	mov    %edx,%eax
f010a104:	01 c0                	add    %eax,%eax
f010a106:	01 d0                	add    %edx,%eax
f010a108:	c1 e0 03             	shl    $0x3,%eax
f010a10b:	01 c8                	add    %ecx,%eax
f010a10d:	8b 50 14             	mov    0x14(%eax),%edx
f010a110:	8b 45 08             	mov    0x8(%ebp),%eax
f010a113:	8b 58 78             	mov    0x78(%eax),%ebx
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a11f:	89 c8                	mov    %ecx,%eax
f010a121:	01 c0                	add    %eax,%eax
f010a123:	01 c8                	add    %ecx,%eax
f010a125:	c1 e0 03             	shl    $0x3,%eax
f010a128:	01 d8                	add    %ebx,%eax
f010a12a:	8b 40 10             	mov    0x10(%eax),%eax
f010a12d:	89 42 10             	mov    %eax,0x10(%edx)
f010a130:	eb 26                	jmp    f010a158 <program_segment_alloc_map_copy_workingset+0x28b>
f010a132:	8b 45 08             	mov    0x8(%ebp),%eax
f010a135:	8b 48 78             	mov    0x78(%eax),%ecx
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a141:	89 d0                	mov    %edx,%eax
f010a143:	01 c0                	add    %eax,%eax
f010a145:	01 d0                	add    %edx,%eax
f010a147:	c1 e0 03             	shl    $0x3,%eax
f010a14a:	01 c8                	add    %ecx,%eax
f010a14c:	8b 50 10             	mov    0x10(%eax),%edx
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a158:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a161:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a167:	89 d0                	mov    %edx,%eax
f010a169:	01 c0                	add    %eax,%eax
f010a16b:	01 d0                	add    %edx,%eax
f010a16d:	c1 e0 03             	shl    $0x3,%eax
f010a170:	01 c8                	add    %ecx,%eax
f010a172:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a182:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a188:	89 d0                	mov    %edx,%eax
f010a18a:	01 c0                	add    %eax,%eax
f010a18c:	01 d0                	add    %edx,%eax
f010a18e:	c1 e0 03             	shl    $0x3,%eax
f010a191:	01 c8                	add    %ecx,%eax
f010a193:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a1a3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a1c1:	48                   	dec    %eax
f010a1c2:	39 c2                	cmp    %eax,%edx
f010a1c4:	0f 83 0d 01 00 00    	jae    f010a2d7 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	01 c8                	add    %ecx,%eax
f010a1e4:	85 c0                	test   %eax,%eax
f010a1e6:	75 17                	jne    f010a1ff <program_segment_alloc_map_copy_workingset+0x332>
f010a1e8:	83 ec 04             	sub    $0x4,%esp
f010a1eb:	68 3c 66 13 f0       	push   $0xf013663c
f010a1f0:	68 89 02 00 00       	push   $0x289
f010a1f5:	68 01 66 13 f0       	push   $0xf0136601
f010a1fa:	e8 06 60 ff ff       	call   f0100205 <_panic>
f010a1ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a202:	8b 48 78             	mov    0x78(%eax),%ecx
f010a205:	8b 45 08             	mov    0x8(%ebp),%eax
f010a208:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a20e:	89 d0                	mov    %edx,%eax
f010a210:	01 c0                	add    %eax,%eax
f010a212:	01 d0                	add    %edx,%eax
f010a214:	c1 e0 03             	shl    $0x3,%eax
f010a217:	01 c8                	add    %ecx,%eax
f010a219:	8b 55 08             	mov    0x8(%ebp),%edx
f010a21c:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a222:	89 50 10             	mov    %edx,0x10(%eax)
f010a225:	8b 40 10             	mov    0x10(%eax),%eax
f010a228:	85 c0                	test   %eax,%eax
f010a22a:	74 28                	je     f010a254 <program_segment_alloc_map_copy_workingset+0x387>
f010a22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22f:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a235:	8b 45 08             	mov    0x8(%ebp),%eax
f010a238:	8b 58 78             	mov    0x78(%eax),%ebx
f010a23b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a244:	89 c8                	mov    %ecx,%eax
f010a246:	01 c0                	add    %eax,%eax
f010a248:	01 c8                	add    %ecx,%eax
f010a24a:	c1 e0 03             	shl    $0x3,%eax
f010a24d:	01 d8                	add    %ebx,%eax
f010a24f:	89 42 14             	mov    %eax,0x14(%edx)
f010a252:	eb 24                	jmp    f010a278 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a254:	8b 45 08             	mov    0x8(%ebp),%eax
f010a257:	8b 48 78             	mov    0x78(%eax),%ecx
f010a25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a263:	89 d0                	mov    %edx,%eax
f010a265:	01 c0                	add    %eax,%eax
f010a267:	01 d0                	add    %edx,%eax
f010a269:	c1 e0 03             	shl    $0x3,%eax
f010a26c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a272:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a278:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a287:	89 d0                	mov    %edx,%eax
f010a289:	01 c0                	add    %eax,%eax
f010a28b:	01 d0                	add    %edx,%eax
f010a28d:	c1 e0 03             	shl    $0x3,%eax
f010a290:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a29c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2ab:	89 d0                	mov    %edx,%eax
f010a2ad:	01 c0                	add    %eax,%eax
f010a2af:	01 d0                	add    %edx,%eax
f010a2b1:	c1 e0 03             	shl    $0x3,%eax
f010a2b4:	01 c8                	add    %ecx,%eax
f010a2b6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c0:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a2c6:	8d 50 01             	lea    0x1(%eax),%edx
f010a2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cc:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a2d2:	e9 08 01 00 00       	jmp    f010a3df <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2da:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2e6:	89 d0                	mov    %edx,%eax
f010a2e8:	01 c0                	add    %eax,%eax
f010a2ea:	01 d0                	add    %edx,%eax
f010a2ec:	c1 e0 03             	shl    $0x3,%eax
f010a2ef:	01 c8                	add    %ecx,%eax
f010a2f1:	85 c0                	test   %eax,%eax
f010a2f3:	75 17                	jne    f010a30c <program_segment_alloc_map_copy_workingset+0x43f>
f010a2f5:	83 ec 04             	sub    $0x4,%esp
f010a2f8:	68 3c 66 13 f0       	push   $0xf013663c
f010a2fd:	68 8e 02 00 00       	push   $0x28e
f010a302:	68 01 66 13 f0       	push   $0xf0136601
f010a307:	e8 f9 5e ff ff       	call   f0100205 <_panic>
f010a30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a312:	8b 45 08             	mov    0x8(%ebp),%eax
f010a315:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a31b:	89 d0                	mov    %edx,%eax
f010a31d:	01 c0                	add    %eax,%eax
f010a31f:	01 d0                	add    %edx,%eax
f010a321:	c1 e0 03             	shl    $0x3,%eax
f010a324:	01 c8                	add    %ecx,%eax
f010a326:	8b 55 08             	mov    0x8(%ebp),%edx
f010a329:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a32f:	89 50 10             	mov    %edx,0x10(%eax)
f010a332:	8b 40 10             	mov    0x10(%eax),%eax
f010a335:	85 c0                	test   %eax,%eax
f010a337:	74 28                	je     f010a361 <program_segment_alloc_map_copy_workingset+0x494>
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	8b 58 78             	mov    0x78(%eax),%ebx
f010a348:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a351:	89 c8                	mov    %ecx,%eax
f010a353:	01 c0                	add    %eax,%eax
f010a355:	01 c8                	add    %ecx,%eax
f010a357:	c1 e0 03             	shl    $0x3,%eax
f010a35a:	01 d8                	add    %ebx,%eax
f010a35c:	89 42 14             	mov    %eax,0x14(%edx)
f010a35f:	eb 24                	jmp    f010a385 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a361:	8b 45 08             	mov    0x8(%ebp),%eax
f010a364:	8b 48 78             	mov    0x78(%eax),%ecx
f010a367:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a370:	89 d0                	mov    %edx,%eax
f010a372:	01 c0                	add    %eax,%eax
f010a374:	01 d0                	add    %edx,%eax
f010a376:	c1 e0 03             	shl    $0x3,%eax
f010a379:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a37c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37f:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a385:	8b 45 08             	mov    0x8(%ebp),%eax
f010a388:	8b 48 78             	mov    0x78(%eax),%ecx
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a394:	89 d0                	mov    %edx,%eax
f010a396:	01 c0                	add    %eax,%eax
f010a398:	01 d0                	add    %edx,%eax
f010a39a:	c1 e0 03             	shl    $0x3,%eax
f010a39d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a3:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3b8:	89 d0                	mov    %edx,%eax
f010a3ba:	01 c0                	add    %eax,%eax
f010a3bc:	01 d0                	add    %edx,%eax
f010a3be:	c1 e0 03             	shl    $0x3,%eax
f010a3c1:	01 c8                	add    %ecx,%eax
f010a3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3cd:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a3d3:	8d 50 01             	lea    0x1(%eax),%edx
f010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d9:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e2:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3e8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ee:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3fd:	8b 55 08             	mov    0x8(%ebp),%edx
f010a400:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a403:	ba 00 00 00 00       	mov    $0x0,%edx
f010a408:	f7 f1                	div    %ecx
f010a40a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a416:	c1 e8 16             	shr    $0x16,%eax
f010a419:	89 c2                	mov    %eax,%edx
f010a41b:	8b 45 18             	mov    0x18(%ebp),%eax
f010a41e:	8b 00                	mov    (%eax),%eax
f010a420:	39 c2                	cmp    %eax,%edx
f010a422:	0f 84 cf 00 00 00    	je     f010a4f7 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a428:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a434:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a43a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a43f:	89 c1                	mov    %eax,%ecx
f010a441:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a444:	89 d0                	mov    %edx,%eax
f010a446:	01 c0                	add    %eax,%eax
f010a448:	01 d0                	add    %edx,%eax
f010a44a:	c1 e0 03             	shl    $0x3,%eax
f010a44d:	01 d8                	add    %ebx,%eax
f010a44f:	83 c0 7c             	add    $0x7c,%eax
f010a452:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a45d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a460:	89 d0                	mov    %edx,%eax
f010a462:	01 c0                	add    %eax,%eax
f010a464:	01 d0                	add    %edx,%eax
f010a466:	c1 e0 03             	shl    $0x3,%eax
f010a469:	01 c8                	add    %ecx,%eax
f010a46b:	83 e8 80             	sub    $0xffffff80,%eax
f010a46e:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a471:	8b 45 08             	mov    0x8(%ebp),%eax
f010a474:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a47a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a47d:	89 d0                	mov    %edx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 d0                	add    %edx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	01 c8                	add    %ecx,%eax
f010a488:	05 84 00 00 00       	add    $0x84,%eax
f010a48d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a49c:	8d 50 01             	lea    0x1(%eax),%edx
f010a49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a2:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ab:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4b1:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f010a4bb:	f7 f1                	div    %ecx
f010a4bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c0:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a4c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c9:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4cf:	85 c0                	test   %eax,%eax
f010a4d1:	75 17                	jne    f010a4ea <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a4d3:	83 ec 04             	sub    $0x4,%esp
f010a4d6:	68 b4 66 13 f0       	push   $0xf01366b4
f010a4db:	68 9e 02 00 00       	push   $0x29e
f010a4e0:	68 01 66 13 f0       	push   $0xf0136601
f010a4e5:	e8 1b 5d ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ed:	c1 e8 16             	shr    $0x16,%eax
f010a4f0:	89 c2                	mov    %eax,%edx
f010a4f2:	8b 45 18             	mov    0x18(%ebp),%eax
f010a4f5:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a4f7:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4fa:	8b 00                	mov    (%eax),%eax
f010a4fc:	8d 50 01             	lea    0x1(%eax),%edx
f010a4ff:	8b 45 10             	mov    0x10(%ebp),%eax
f010a502:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a504:	ff 45 f0             	incl   -0x10(%ebp)
f010a507:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a50e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a511:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a514:	73 0c                	jae    f010a522 <program_segment_alloc_map_copy_workingset+0x655>
f010a516:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a519:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a51c:	0f 82 5a fa ff ff    	jb     f0109f7c <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a522:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a525:	8b 00                	mov    (%eax),%eax
f010a527:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a52a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a52d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a530:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a533:	eb 10                	jmp    f010a545 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a535:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a538:	8a 10                	mov    (%eax),%dl
f010a53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a53d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a53f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a542:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a548:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a54b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a54e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a553:	89 c2                	mov    %eax,%edx
f010a555:	8b 45 10             	mov    0x10(%ebp),%eax
f010a558:	8b 00                	mov    (%eax),%eax
f010a55a:	c1 e0 0c             	shl    $0xc,%eax
f010a55d:	01 c2                	add    %eax,%edx
f010a55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a562:	39 c2                	cmp    %eax,%edx
f010a564:	76 1d                	jbe    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a566:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a569:	8b 50 04             	mov    0x4(%eax),%edx
f010a56c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a56f:	01 c2                	add    %eax,%edx
f010a571:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a574:	39 c2                	cmp    %eax,%edx
f010a576:	77 bd                	ja     f010a535 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a578:	eb 09                	jmp    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a57a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a57d:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a580:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a586:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a589:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a58c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a591:	89 c2                	mov    %eax,%edx
f010a593:	8b 45 10             	mov    0x10(%ebp),%eax
f010a596:	8b 00                	mov    (%eax),%eax
f010a598:	c1 e0 0c             	shl    $0xc,%eax
f010a59b:	01 c2                	add    %eax,%edx
f010a59d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a5a0:	39 c2                	cmp    %eax,%edx
f010a5a2:	77 d6                	ja     f010a57a <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a5a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a5a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a5ac:	c9                   	leave  
f010a5ad:	c3                   	ret    

f010a5ae <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a5ae:	55                   	push   %ebp
f010a5af:	89 e5                	mov    %esp,%ebp
f010a5b1:	53                   	push   %ebx
f010a5b2:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a5bb:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	8b 55 10             	mov    0x10(%ebp),%edx
f010a5c4:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5ce:	eb 17                	jmp    f010a5e7 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a5d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d9:	c1 e2 02             	shl    $0x2,%edx
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5e4:	ff 45 f4             	incl   -0xc(%ebp)
f010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5ea:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a5ef:	76 df                	jbe    f010a5d0 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a5f1:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a5f8:	eb 22                	jmp    f010a61c <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a5fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a600:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a603:	c1 e2 02             	shl    $0x2,%edx
f010a606:	01 c2                	add    %eax,%edx
f010a608:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010a60d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a610:	c1 e1 02             	shl    $0x2,%ecx
f010a613:	01 c8                	add    %ecx,%eax
f010a615:	8b 00                	mov    (%eax),%eax
f010a617:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a619:	ff 45 f4             	incl   -0xc(%ebp)
f010a61c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a623:	7e d5                	jle    f010a5fa <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a625:	8b 45 08             	mov    0x8(%ebp),%eax
f010a628:	8b 40 74             	mov    0x74(%eax),%eax
f010a62b:	83 ec 08             	sub    $0x8,%esp
f010a62e:	50                   	push   %eax
f010a62f:	ff 75 08             	pushl  0x8(%ebp)
f010a632:	e8 13 f8 ff ff       	call   f0109e4a <create_user_page_WS>
f010a637:	83 c4 10             	add    $0x10,%esp
f010a63a:	89 c2                	mov    %eax,%edx
f010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63f:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a642:	83 ec 0c             	sub    $0xc,%esp
f010a645:	ff 75 08             	pushl  0x8(%ebp)
f010a648:	e8 f3 04 00 00       	call   f010ab40 <share_pws_at_user_space>
f010a64d:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a650:	83 ec 0c             	sub    $0xc,%esp
f010a653:	6a 02                	push   $0x2
f010a655:	e8 e9 36 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a65a:	83 c4 10             	add    $0x10,%esp
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	0f 84 04 01 00 00    	je     f010a769 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a665:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a66c:	e9 e7 00 00 00       	jmp    f010a758 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 48 78             	mov    0x78(%eax),%ecx
f010a677:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a67a:	89 d0                	mov    %edx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 d0                	add    %edx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	01 c8                	add    %ecx,%eax
f010a685:	85 c0                	test   %eax,%eax
f010a687:	75 17                	jne    f010a6a0 <initialize_environment+0xf2>
f010a689:	83 ec 04             	sub    $0x4,%esp
f010a68c:	68 3c 66 13 f0       	push   $0xf013663c
f010a691:	68 fc 02 00 00       	push   $0x2fc
f010a696:	68 01 66 13 f0       	push   $0xf0136601
f010a69b:	e8 65 5b ff ff       	call   f0100205 <_panic>
f010a6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6a9:	89 d0                	mov    %edx,%eax
f010a6ab:	01 c0                	add    %eax,%eax
f010a6ad:	01 d0                	add    %edx,%eax
f010a6af:	c1 e0 03             	shl    $0x3,%eax
f010a6b2:	01 c8                	add    %ecx,%eax
f010a6b4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6b7:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a6bd:	89 50 10             	mov    %edx,0x10(%eax)
f010a6c0:	8b 40 10             	mov    0x10(%eax),%eax
f010a6c3:	85 c0                	test   %eax,%eax
f010a6c5:	74 22                	je     f010a6e9 <initialize_environment+0x13b>
f010a6c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ca:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6d9:	89 c8                	mov    %ecx,%eax
f010a6db:	01 c0                	add    %eax,%eax
f010a6dd:	01 c8                	add    %ecx,%eax
f010a6df:	c1 e0 03             	shl    $0x3,%eax
f010a6e2:	01 d8                	add    %ebx,%eax
f010a6e4:	89 42 14             	mov    %eax,0x14(%edx)
f010a6e7:	eb 1e                	jmp    f010a707 <initialize_environment+0x159>
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6f2:	89 d0                	mov    %edx,%eax
f010a6f4:	01 c0                	add    %eax,%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	c1 e0 03             	shl    $0x3,%eax
f010a6fb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a701:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a70d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a710:	89 d0                	mov    %edx,%eax
f010a712:	01 c0                	add    %eax,%eax
f010a714:	01 d0                	add    %edx,%eax
f010a716:	c1 e0 03             	shl    $0x3,%eax
f010a719:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a725:	8b 45 08             	mov    0x8(%ebp),%eax
f010a728:	8b 48 78             	mov    0x78(%eax),%ecx
f010a72b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a72e:	89 d0                	mov    %edx,%eax
f010a730:	01 c0                	add    %eax,%eax
f010a732:	01 d0                	add    %edx,%eax
f010a734:	c1 e0 03             	shl    $0x3,%eax
f010a737:	01 c8                	add    %ecx,%eax
f010a739:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a740:	8b 45 08             	mov    0x8(%ebp),%eax
f010a743:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a749:	8d 50 01             	lea    0x1(%eax),%edx
f010a74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74f:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a755:	ff 45 f0             	incl   -0x10(%ebp)
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 50 74             	mov    0x74(%eax),%edx
f010a75e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a761:	39 c2                	cmp    %eax,%edx
f010a763:	0f 87 08 ff ff ff    	ja     f010a671 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a770:	eb 50                	jmp    f010a7c2 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	8b 48 78             	mov    0x78(%eax),%ecx
f010a778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77b:	89 d0                	mov    %edx,%eax
f010a77d:	01 c0                	add    %eax,%eax
f010a77f:	01 d0                	add    %edx,%eax
f010a781:	c1 e0 03             	shl    $0x3,%eax
f010a784:	01 c8                	add    %ecx,%eax
f010a786:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a795:	89 d0                	mov    %edx,%eax
f010a797:	01 c0                	add    %eax,%eax
f010a799:	01 d0                	add    %edx,%eax
f010a79b:	c1 e0 03             	shl    $0x3,%eax
f010a79e:	01 c8                	add    %ecx,%eax
f010a7a0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7bf:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c5:	8b 50 74             	mov    0x74(%eax),%edx
f010a7c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7cb:	39 c2                	cmp    %eax,%edx
f010a7cd:	77 a3                	ja     f010a772 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d2:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a7d9:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7e3:	eb 50                	jmp    f010a835 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7eb:	89 d0                	mov    %edx,%eax
f010a7ed:	01 c0                	add    %eax,%eax
f010a7ef:	01 d0                	add    %edx,%eax
f010a7f1:	c1 e0 03             	shl    $0x3,%eax
f010a7f4:	01 c8                	add    %ecx,%eax
f010a7f6:	83 c0 7c             	add    $0x7c,%eax
f010a7f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a7ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a805:	89 d0                	mov    %edx,%eax
f010a807:	01 c0                	add    %eax,%eax
f010a809:	01 d0                	add    %edx,%eax
f010a80b:	c1 e0 03             	shl    $0x3,%eax
f010a80e:	01 c8                	add    %ecx,%eax
f010a810:	83 e8 80             	sub    $0xffffff80,%eax
f010a813:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a816:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a81c:	89 d0                	mov    %edx,%eax
f010a81e:	01 c0                	add    %eax,%eax
f010a820:	01 d0                	add    %edx,%eax
f010a822:	c1 e0 03             	shl    $0x3,%eax
f010a825:	01 c8                	add    %ecx,%eax
f010a827:	05 84 00 00 00       	add    $0x84,%eax
f010a82c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a832:	ff 45 f4             	incl   -0xc(%ebp)
f010a835:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a839:	7e aa                	jle    f010a7e5 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a845:	00 00 00 

	e->pageFaultsCounter=0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a852:	00 00 00 
	e->tableFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a85f:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a86c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a879:	00 00 00 

	e->nModifiedPages=0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a886:	00 00 00 
	e->nNotModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a893:	00 00 00 
	e->nClocks = 0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a8a0:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a8ad:	00 00 00 
	e->nPageOut = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a8ba:	00 00 00 
	e->nNewPageAdded = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a8c7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ca:	83 ec 0c             	sub    $0xc,%esp
f010a8cd:	ff 75 08             	pushl  0x8(%ebp)
f010a8d0:	e8 09 00 00 00       	call   f010a8de <complete_environment_initialization>
f010a8d5:	83 c4 10             	add    $0x10,%esp
}
f010a8d8:	90                   	nop
f010a8d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8dc:	c9                   	leave  
f010a8dd:	c3                   	ret    

f010a8de <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8de:	55                   	push   %ebp
f010a8df:	89 e5                	mov    %esp,%ebp
f010a8e1:	53                   	push   %ebx
f010a8e2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8eb:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	8b 40 60             	mov    0x60(%eax),%eax
f010a8f7:	83 c8 03             	or     $0x3,%eax
f010a8fa:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a902:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a908:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90b:	8b 40 60             	mov    0x60(%eax),%eax
f010a90e:	83 c8 05             	or     $0x5,%eax
f010a911:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a913:	8b 45 08             	mov    0x8(%ebp),%eax
f010a916:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a91d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a920:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a931:	8b 45 08             	mov    0x8(%ebp),%eax
f010a934:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a941:	83 ec 0c             	sub    $0xc,%esp
f010a944:	68 b1 02 00 00       	push   $0x2b1
f010a949:	e8 73 55 02 00       	call   f012fec1 <log2_ceil>
f010a94e:	83 c4 10             	add    $0x10,%esp
f010a951:	ba 01 00 00 00       	mov    $0x1,%edx
f010a956:	88 c1                	mov    %al,%cl
f010a958:	d3 e2                	shl    %cl,%edx
f010a95a:	89 d0                	mov    %edx,%eax
f010a95c:	01 d8                	add    %ebx,%eax
f010a95e:	89 c3                	mov    %eax,%ebx
f010a960:	83 ec 0c             	sub    $0xc,%esp
f010a963:	68 b1 02 00 00       	push   $0x2b1
f010a968:	e8 1f 55 02 00       	call   f012fe8c <nearest_pow2_ceil>
f010a96d:	83 c4 10             	add    $0x10,%esp
f010a970:	f7 d8                	neg    %eax
f010a972:	21 d8                	and    %ebx,%eax
f010a974:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a97b:	7f 1e                	jg     f010a99b <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a97d:	83 ec 0c             	sub    $0xc,%esp
f010a980:	68 b1 02 00 00       	push   $0x2b1
f010a985:	e8 37 55 02 00       	call   f012fec1 <log2_ceil>
f010a98a:	83 c4 10             	add    $0x10,%esp
f010a98d:	ba 01 00 00 00       	mov    $0x1,%edx
f010a992:	88 c1                	mov    %al,%cl
f010a994:	d3 e2                	shl    %cl,%edx
f010a996:	89 d0                	mov    %edx,%eax
f010a998:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99e:	8b 15 b0 1c 78 f0    	mov    0xf0781cb0,%edx
f010a9a4:	29 d0                	sub    %edx,%eax
f010a9a6:	c1 f8 04             	sar    $0x4,%eax
f010a9a9:	89 c2                	mov    %eax,%edx
f010a9ab:	89 d0                	mov    %edx,%eax
f010a9ad:	c1 e0 03             	shl    $0x3,%eax
f010a9b0:	01 d0                	add    %edx,%eax
f010a9b2:	01 c0                	add    %eax,%eax
f010a9b4:	01 d0                	add    %edx,%eax
f010a9b6:	c1 e0 03             	shl    $0x3,%eax
f010a9b9:	01 d0                	add    %edx,%eax
f010a9bb:	89 c1                	mov    %eax,%ecx
f010a9bd:	c1 e1 08             	shl    $0x8,%ecx
f010a9c0:	01 c8                	add    %ecx,%eax
f010a9c2:	01 c0                	add    %eax,%eax
f010a9c4:	01 d0                	add    %edx,%eax
f010a9c6:	01 c0                	add    %eax,%eax
f010a9c8:	01 d0                	add    %edx,%eax
f010a9ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a9d1:	01 d0                	add    %edx,%eax
f010a9d3:	89 c2                	mov    %eax,%edx
f010a9d5:	c1 e2 09             	shl    $0x9,%edx
f010a9d8:	29 c2                	sub    %eax,%edx
f010a9da:	89 d0                	mov    %edx,%eax
f010a9dc:	f7 d8                	neg    %eax
f010a9de:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a9e1:	89 c2                	mov    %eax,%edx
f010a9e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e6:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a9e9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010a9ee:	85 c0                	test   %eax,%eax
f010a9f0:	75 0c                	jne    f010a9fe <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a9fc:	eb 0e                	jmp    f010aa0c <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a9fe:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010aa03:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa06:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa09:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0f:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa16:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa19:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa20:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa23:	83 ec 04             	sub    $0x4,%esp
f010aa26:	6a 44                	push   $0x44
f010aa28:	6a 00                	push   $0x0
f010aa2a:	50                   	push   %eax
f010aa2b:	e8 d8 68 02 00       	call   f0131308 <memset>
f010aa30:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa36:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa51:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa58:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5b:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa61:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa64:	8b 40 38             	mov    0x38(%eax),%eax
f010aa67:	80 cc 02             	or     $0x2,%ah
f010aa6a:	89 c2                	mov    %eax,%edx
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aa72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa76:	75 17                	jne    f010aa8f <complete_environment_initialization+0x1b1>
f010aa78:	83 ec 04             	sub    $0x4,%esp
f010aa7b:	68 1e 66 13 f0       	push   $0xf013661e
f010aa80:	68 60 03 00 00       	push   $0x360
f010aa85:	68 01 66 13 f0       	push   $0xf0136601
f010aa8a:	e8 76 57 ff ff       	call   f0100205 <_panic>
f010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa92:	8b 40 44             	mov    0x44(%eax),%eax
f010aa95:	85 c0                	test   %eax,%eax
f010aa97:	74 11                	je     f010aaaa <complete_environment_initialization+0x1cc>
f010aa99:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9c:	8b 40 44             	mov    0x44(%eax),%eax
f010aa9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaa2:	8b 52 48             	mov    0x48(%edx),%edx
f010aaa5:	89 50 48             	mov    %edx,0x48(%eax)
f010aaa8:	eb 0b                	jmp    f010aab5 <complete_environment_initialization+0x1d7>
f010aaaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaad:	8b 40 48             	mov    0x48(%eax),%eax
f010aab0:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	8b 40 48             	mov    0x48(%eax),%eax
f010aabb:	85 c0                	test   %eax,%eax
f010aabd:	74 11                	je     f010aad0 <complete_environment_initialization+0x1f2>
f010aabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac2:	8b 40 48             	mov    0x48(%eax),%eax
f010aac5:	8b 55 08             	mov    0x8(%ebp),%edx
f010aac8:	8b 52 44             	mov    0x44(%edx),%edx
f010aacb:	89 50 44             	mov    %edx,0x44(%eax)
f010aace:	eb 0b                	jmp    f010aadb <complete_environment_initialization+0x1fd>
f010aad0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad3:	8b 40 44             	mov    0x44(%eax),%eax
f010aad6:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f010aadb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aade:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aaef:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f010aaf4:	48                   	dec    %eax
f010aaf5:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
	return ;
f010aafa:	90                   	nop
}
f010aafb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aafe:	c9                   	leave  
f010aaff:	c3                   	ret    

f010ab00 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab00:	55                   	push   %ebp
f010ab01:	89 e5                	mov    %esp,%ebp
f010ab03:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0f:	8b 00                	mov    (%eax),%eax
f010ab11:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab16:	74 17                	je     f010ab2f <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab18:	83 ec 04             	sub    $0x4,%esp
f010ab1b:	68 57 67 13 f0       	push   $0xf0136757
f010ab20:	68 6c 03 00 00       	push   $0x36c
f010ab25:	68 01 66 13 f0       	push   $0xf0136601
f010ab2a:	e8 d6 56 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab32:	8b 40 18             	mov    0x18(%eax),%eax
f010ab35:	89 c2                	mov    %eax,%edx
f010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3a:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab3d:	90                   	nop
f010ab3e:	c9                   	leave  
f010ab3f:	c3                   	ret    

f010ab40 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ab40:	55                   	push   %ebp
f010ab41:	89 e5                	mov    %esp,%ebp
f010ab43:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ab46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab49:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ab50:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ab53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab56:	8b 40 78             	mov    0x78(%eax),%eax
f010ab59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	8b 50 74             	mov    0x74(%eax),%edx
f010ab62:	89 d0                	mov    %edx,%eax
f010ab64:	01 c0                	add    %eax,%eax
f010ab66:	01 d0                	add    %edx,%eax
f010ab68:	c1 e0 03             	shl    $0x3,%eax
f010ab6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ab7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7d:	8b 40 78             	mov    0x78(%eax),%eax
f010ab80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ab83:	eb 71                	jmp    f010abf6 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ab85:	83 ec 0c             	sub    $0xc,%esp
f010ab88:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab8b:	e8 13 cf ff ff       	call   f0107aa3 <kheap_physical_address>
f010ab90:	83 c4 10             	add    $0x10,%esp
f010ab93:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ab96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab99:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab9c:	83 ec 04             	sub    $0x4,%esp
f010ab9f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aba2:	52                   	push   %edx
f010aba3:	ff 75 f0             	pushl  -0x10(%ebp)
f010aba6:	50                   	push   %eax
f010aba7:	e8 05 bf ff ff       	call   f0106ab1 <get_page_table>
f010abac:	83 c4 10             	add    $0x10,%esp
f010abaf:	83 f8 01             	cmp    $0x1,%eax
f010abb2:	75 18                	jne    f010abcc <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010abb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abba:	83 ec 08             	sub    $0x8,%esp
f010abbd:	ff 75 f0             	pushl  -0x10(%ebp)
f010abc0:	50                   	push   %eax
f010abc1:	e8 41 c0 ff ff       	call   f0106c07 <create_page_table>
f010abc6:	83 c4 10             	add    $0x10,%esp
f010abc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010abcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abcf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abd2:	c1 ea 0c             	shr    $0xc,%edx
f010abd5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010abdb:	c1 e2 02             	shl    $0x2,%edx
f010abde:	01 d0                	add    %edx,%eax
f010abe0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010abe3:	83 ca 05             	or     $0x5,%edx
f010abe6:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010abe8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010abef:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf9:	8b 40 78             	mov    0x78(%eax),%eax
f010abfc:	89 c2                	mov    %eax,%edx
f010abfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac01:	01 d0                	add    %edx,%eax
f010ac03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac06:	0f 87 79 ff ff ff    	ja     f010ab85 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ac0c:	90                   	nop
f010ac0d:	c9                   	leave  
f010ac0e:	c3                   	ret    

f010ac0f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ac0f:	55                   	push   %ebp
f010ac10:	89 e5                	mov    %esp,%ebp
f010ac12:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1b:	89 d0                	mov    %edx,%eax
f010ac1d:	01 c0                	add    %eax,%eax
f010ac1f:	01 d0                	add    %edx,%eax
f010ac21:	c1 e0 03             	shl    $0x3,%eax
f010ac24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac36:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ac3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac42:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ac47:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac4a:	eb 46                	jmp    f010ac92 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac52:	83 ec 04             	sub    $0x4,%esp
f010ac55:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ac58:	52                   	push   %edx
f010ac59:	ff 75 f4             	pushl  -0xc(%ebp)
f010ac5c:	50                   	push   %eax
f010ac5d:	e8 4f be ff ff       	call   f0106ab1 <get_page_table>
f010ac62:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010ac65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac68:	83 ec 0c             	sub    $0xc,%esp
f010ac6b:	50                   	push   %eax
f010ac6c:	e8 df cc ff ff       	call   f0107950 <kfree>
f010ac71:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010ac74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac77:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac7d:	c1 ea 16             	shr    $0x16,%edx
f010ac80:	c1 e2 02             	shl    $0x2,%edx
f010ac83:	01 d0                	add    %edx,%eax
f010ac85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac8b:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010ac92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac95:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac9b:	89 c2                	mov    %eax,%edx
f010ac9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aca0:	01 d0                	add    %edx,%eax
f010aca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aca5:	77 a5                	ja     f010ac4c <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aca7:	0f 20 d8             	mov    %cr3,%eax
f010acaa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010acad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb0:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010acb3:	90                   	nop
f010acb4:	c9                   	leave  
f010acb5:	c3                   	ret    

f010acb6 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010acb6:	55                   	push   %ebp
f010acb7:	89 e5                	mov    %esp,%ebp
f010acb9:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010acbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbf:	8b 40 10             	mov    0x10(%eax),%eax
f010acc2:	8d 48 01             	lea    0x1(%eax),%ecx
f010acc5:	8b 55 08             	mov    0x8(%ebp),%edx
f010acc8:	89 4a 10             	mov    %ecx,0x10(%edx)
f010accb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010acd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acd7:	8b 00                	mov    (%eax),%eax
f010acd9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010acde:	74 17                	je     f010acf7 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ace0:	83 ec 04             	sub    $0x4,%esp
f010ace3:	68 57 67 13 f0       	push   $0xf0136757
f010ace8:	68 b6 03 00 00       	push   $0x3b6
f010aced:	68 01 66 13 f0       	push   $0xf0136601
f010acf2:	e8 0e 55 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acfa:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad00:	01 d0                	add    %edx,%eax
f010ad02:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ad05:	eb 0f                	jmp    f010ad16 <PROGRAM_SEGMENT_NEXT+0x60>
f010ad07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0a:	8b 40 10             	mov    0x10(%eax),%eax
f010ad0d:	8d 50 01             	lea    0x1(%eax),%edx
f010ad10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad13:	89 50 10             	mov    %edx,0x10(%eax)
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	8b 40 10             	mov    0x10(%eax),%eax
f010ad1c:	c1 e0 05             	shl    $0x5,%eax
f010ad1f:	89 c2                	mov    %eax,%edx
f010ad21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad24:	01 d0                	add    %edx,%eax
f010ad26:	8b 00                	mov    (%eax),%eax
f010ad28:	83 f8 01             	cmp    $0x1,%eax
f010ad2b:	74 13                	je     f010ad40 <PROGRAM_SEGMENT_NEXT+0x8a>
f010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad30:	8b 50 10             	mov    0x10(%eax),%edx
f010ad33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad36:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad39:	0f b7 c0             	movzwl %ax,%eax
f010ad3c:	39 c2                	cmp    %eax,%edx
f010ad3e:	72 c7                	jb     f010ad07 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ad40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad43:	8b 40 10             	mov    0x10(%eax),%eax
f010ad46:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad4c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad4f:	0f b7 c0             	movzwl %ax,%eax
f010ad52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ad55:	7e 63                	jle    f010adba <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad5a:	c1 e0 05             	shl    $0x5,%eax
f010ad5d:	89 c2                	mov    %eax,%edx
f010ad5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad62:	01 d0                	add    %edx,%eax
f010ad64:	8b 50 04             	mov    0x4(%eax),%edx
f010ad67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad6a:	01 c2                	add    %eax,%edx
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad74:	c1 e0 05             	shl    $0x5,%eax
f010ad77:	89 c2                	mov    %eax,%edx
f010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad7c:	01 d0                	add    %edx,%eax
f010ad7e:	8b 50 14             	mov    0x14(%eax),%edx
f010ad81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad84:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ad87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad8a:	c1 e0 05             	shl    $0x5,%eax
f010ad8d:	89 c2                	mov    %eax,%edx
f010ad8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad92:	01 d0                	add    %edx,%eax
f010ad94:	8b 50 10             	mov    0x10(%eax),%edx
f010ad97:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9a:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ad9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ada0:	c1 e0 05             	shl    $0x5,%eax
f010ada3:	89 c2                	mov    %eax,%edx
f010ada5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ada8:	01 d0                	add    %edx,%eax
f010adaa:	8b 40 08             	mov    0x8(%eax),%eax
f010adad:	89 c2                	mov    %eax,%edx
f010adaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb2:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010adb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb8:	eb 05                	jmp    f010adbf <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010adba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010adbf:	c9                   	leave  
f010adc0:	c3                   	ret    

f010adc1 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010adc1:	55                   	push   %ebp
f010adc2:	89 e5                	mov    %esp,%ebp
f010adc4:	57                   	push   %edi
f010adc5:	56                   	push   %esi
f010adc6:	53                   	push   %ebx
f010adc7:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010adca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010add1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010add7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adda:	8b 00                	mov    (%eax),%eax
f010addc:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ade1:	74 17                	je     f010adfa <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ade3:	83 ec 04             	sub    $0x4,%esp
f010ade6:	68 57 67 13 f0       	push   $0xf0136757
f010adeb:	68 d2 03 00 00       	push   $0x3d2
f010adf0:	68 01 66 13 f0       	push   $0xf0136601
f010adf5:	e8 0b 54 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010adfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adfd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ae00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ae08:	eb 07                	jmp    f010ae11 <PROGRAM_SEGMENT_FIRST+0x50>
f010ae0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae0d:	40                   	inc    %eax
f010ae0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ae11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae14:	c1 e0 05             	shl    $0x5,%eax
f010ae17:	89 c2                	mov    %eax,%edx
f010ae19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae1c:	01 d0                	add    %edx,%eax
f010ae1e:	8b 00                	mov    (%eax),%eax
f010ae20:	83 f8 01             	cmp    $0x1,%eax
f010ae23:	74 10                	je     f010ae35 <PROGRAM_SEGMENT_FIRST+0x74>
f010ae25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ae28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae2b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae2e:	0f b7 c0             	movzwl %ax,%eax
f010ae31:	39 c2                	cmp    %eax,%edx
f010ae33:	72 d5                	jb     f010ae0a <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ae35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae38:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ae3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae3e:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae41:	0f b7 c0             	movzwl %ax,%eax
f010ae44:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ae47:	7e 68                	jle    f010aeb1 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ae49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae4c:	c1 e0 05             	shl    $0x5,%eax
f010ae4f:	89 c2                	mov    %eax,%edx
f010ae51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae54:	01 d0                	add    %edx,%eax
f010ae56:	8b 50 04             	mov    0x4(%eax),%edx
f010ae59:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae5c:	01 d0                	add    %edx,%eax
f010ae5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ae61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae64:	c1 e0 05             	shl    $0x5,%eax
f010ae67:	89 c2                	mov    %eax,%edx
f010ae69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae6c:	01 d0                	add    %edx,%eax
f010ae6e:	8b 40 14             	mov    0x14(%eax),%eax
f010ae71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ae74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae77:	c1 e0 05             	shl    $0x5,%eax
f010ae7a:	89 c2                	mov    %eax,%edx
f010ae7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae7f:	01 d0                	add    %edx,%eax
f010ae81:	8b 40 10             	mov    0x10(%eax),%eax
f010ae84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ae87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae8a:	c1 e0 05             	shl    $0x5,%eax
f010ae8d:	89 c2                	mov    %eax,%edx
f010ae8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae92:	01 d0                	add    %edx,%eax
f010ae94:	8b 40 08             	mov    0x8(%eax),%eax
f010ae97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ae9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae9d:	89 c3                	mov    %eax,%ebx
f010ae9f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aea2:	ba 05 00 00 00       	mov    $0x5,%edx
f010aea7:	89 df                	mov    %ebx,%edi
f010aea9:	89 c6                	mov    %eax,%esi
f010aeab:	89 d1                	mov    %edx,%ecx
f010aead:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010aeaf:	eb 1c                	jmp    f010aecd <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010aeb1:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	89 c3                	mov    %eax,%ebx
f010aebd:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aec0:	ba 05 00 00 00       	mov    $0x5,%edx
f010aec5:	89 df                	mov    %ebx,%edi
f010aec7:	89 c6                	mov    %eax,%esi
f010aec9:	89 d1                	mov    %edx,%ecx
f010aecb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010aed3:	5b                   	pop    %ebx
f010aed4:	5e                   	pop    %esi
f010aed5:	5f                   	pop    %edi
f010aed6:	5d                   	pop    %ebp
f010aed7:	c2 04 00             	ret    $0x4

f010aeda <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010aeda:	55                   	push   %ebp
f010aedb:	89 e5                	mov    %esp,%ebp
f010aedd:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010aee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aee7:	a1 78 25 78 f0       	mov    0xf0782578,%eax
f010aeec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aeef:	e9 c3 00 00 00       	jmp    f010afb7 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aef7:	8b 40 10             	mov    0x10(%eax),%eax
f010aefa:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aefd:	0f 85 ac 00 00 00    	jne    f010afaf <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010af03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af06:	8b 50 0c             	mov    0xc(%eax),%edx
f010af09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af0c:	8b 40 10             	mov    0x10(%eax),%eax
f010af0f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af12:	83 ec 08             	sub    $0x8,%esp
f010af15:	52                   	push   %edx
f010af16:	50                   	push   %eax
f010af17:	e8 a0 cd ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f010af1c:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010af1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af23:	75 17                	jne    f010af3c <cleanup_buffers+0x62>
f010af25:	83 ec 04             	sub    $0x4,%esp
f010af28:	68 1e 66 13 f0       	push   $0xf013661e
f010af2d:	68 f9 03 00 00       	push   $0x3f9
f010af32:	68 01 66 13 f0       	push   $0xf0136601
f010af37:	e8 c9 52 ff ff       	call   f0100205 <_panic>
f010af3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af3f:	8b 00                	mov    (%eax),%eax
f010af41:	85 c0                	test   %eax,%eax
f010af43:	74 10                	je     f010af55 <cleanup_buffers+0x7b>
f010af45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af48:	8b 00                	mov    (%eax),%eax
f010af4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4d:	8b 52 04             	mov    0x4(%edx),%edx
f010af50:	89 50 04             	mov    %edx,0x4(%eax)
f010af53:	eb 0b                	jmp    f010af60 <cleanup_buffers+0x86>
f010af55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af58:	8b 40 04             	mov    0x4(%eax),%eax
f010af5b:	a3 7c 25 78 f0       	mov    %eax,0xf078257c
f010af60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af63:	8b 40 04             	mov    0x4(%eax),%eax
f010af66:	85 c0                	test   %eax,%eax
f010af68:	74 0f                	je     f010af79 <cleanup_buffers+0x9f>
f010af6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af6d:	8b 40 04             	mov    0x4(%eax),%eax
f010af70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af73:	8b 12                	mov    (%edx),%edx
f010af75:	89 10                	mov    %edx,(%eax)
f010af77:	eb 0a                	jmp    f010af83 <cleanup_buffers+0xa9>
f010af79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af7c:	8b 00                	mov    (%eax),%eax
f010af7e:	a3 78 25 78 f0       	mov    %eax,0xf0782578
f010af83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010af96:	a1 84 25 78 f0       	mov    0xf0782584,%eax
f010af9b:	48                   	dec    %eax
f010af9c:	a3 84 25 78 f0       	mov    %eax,0xf0782584

			free_frame(ptr_fi);
f010afa1:	83 ec 0c             	sub    $0xc,%esp
f010afa4:	ff 75 f4             	pushl  -0xc(%ebp)
f010afa7:	e8 5b ba ff ff       	call   f0106a07 <free_frame>
f010afac:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010afaf:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f010afb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010afb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afbb:	74 07                	je     f010afc4 <cleanup_buffers+0xea>
f010afbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afc0:	8b 00                	mov    (%eax),%eax
f010afc2:	eb 05                	jmp    f010afc9 <cleanup_buffers+0xef>
f010afc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc9:	a3 80 25 78 f0       	mov    %eax,0xf0782580
f010afce:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f010afd3:	85 c0                	test   %eax,%eax
f010afd5:	0f 85 19 ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
f010afdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afdf:	0f 85 0f ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010afe5:	90                   	nop
f010afe6:	c9                   	leave  
f010afe7:	c3                   	ret    

f010afe8 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010afe8:	55                   	push   %ebp
f010afe9:	89 e5                	mov    %esp,%ebp
f010afeb:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010afee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010aff2:	7e 06                	jle    f010affa <set_program_priority+0x12>
f010aff4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010aff8:	7e 14                	jle    f010b00e <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010affa:	83 ec 04             	sub    $0x4,%esp
f010affd:	68 70 67 13 f0       	push   $0xf0136770
f010b002:	6a 10                	push   $0x10
f010b004:	68 94 67 13 f0       	push   $0xf0136794
f010b009:	e8 f7 51 ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b00e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b012:	74 75                	je     f010b089 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b014:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b018:	77 56                	ja     f010b070 <set_program_priority+0x88>
f010b01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b01d:	c1 e0 02             	shl    $0x2,%eax
f010b020:	05 d0 67 13 f0       	add    $0xf01367d0,%eax
f010b025:	8b 00                	mov    (%eax),%eax
f010b027:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b029:	83 ec 08             	sub    $0x8,%esp
f010b02c:	6a 01                	push   $0x1
f010b02e:	ff 75 08             	pushl  0x8(%ebp)
f010b031:	e8 fd d6 ff ff       	call   f0108733 <half_WS_Size>
f010b036:	83 c4 10             	add    $0x10,%esp
			break;
f010b039:	eb 35                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b03b:	83 ec 08             	sub    $0x8,%esp
f010b03e:	6a 00                	push   $0x0
f010b040:	ff 75 08             	pushl  0x8(%ebp)
f010b043:	e8 eb d6 ff ff       	call   f0108733 <half_WS_Size>
f010b048:	83 c4 10             	add    $0x10,%esp
			break;
f010b04b:	eb 23                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b04d:	83 ec 08             	sub    $0x8,%esp
f010b050:	6a 01                	push   $0x1
f010b052:	ff 75 08             	pushl  0x8(%ebp)
f010b055:	e8 bc d6 ff ff       	call   f0108716 <double_WS_Size>
f010b05a:	83 c4 10             	add    $0x10,%esp
			break;
f010b05d:	eb 11                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b05f:	83 ec 08             	sub    $0x8,%esp
f010b062:	6a 00                	push   $0x0
f010b064:	ff 75 08             	pushl  0x8(%ebp)
f010b067:	e8 aa d6 ff ff       	call   f0108716 <double_WS_Size>
f010b06c:	83 c4 10             	add    $0x10,%esp
			break;
f010b06f:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b070:	8b 45 08             	mov    0x8(%ebp),%eax
f010b073:	8b 40 74             	mov    0x74(%eax),%eax
f010b076:	83 ec 08             	sub    $0x8,%esp
f010b079:	50                   	push   %eax
f010b07a:	68 b1 67 13 f0       	push   $0xf01367b1
f010b07f:	e8 8a 5c ff ff       	call   f0100d0e <cprintf>
f010b084:	83 c4 10             	add    $0x10,%esp
f010b087:	eb 01                	jmp    f010b08a <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b089:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b08a:	c9                   	leave  
f010b08b:	c3                   	ret    

f010b08c <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b08c:	55                   	push   %ebp
f010b08d:	89 e5                	mov    %esp,%ebp
f010b08f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b099:	eb 29                	jmp    f010b0c4 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b09b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b09e:	89 d0                	mov    %edx,%eax
f010b0a0:	01 c0                	add    %eax,%eax
f010b0a2:	01 d0                	add    %edx,%eax
f010b0a4:	c1 e0 02             	shl    $0x2,%eax
f010b0a7:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b0ac:	8b 00                	mov    (%eax),%eax
f010b0ae:	83 ec 08             	sub    $0x8,%esp
f010b0b1:	50                   	push   %eax
f010b0b2:	ff 75 08             	pushl  0x8(%ebp)
f010b0b5:	e8 6c 61 02 00       	call   f0131226 <strcmp>
f010b0ba:	83 c4 10             	add    $0x10,%esp
f010b0bd:	85 c0                	test   %eax,%eax
f010b0bf:	74 0f                	je     f010b0d0 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b0c1:	ff 45 f4             	incl   -0xc(%ebp)
f010b0c4:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0c9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0cc:	7c cd                	jl     f010b09b <get_user_program_info+0xf>
f010b0ce:	eb 01                	jmp    f010b0d1 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b0d0:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b0d1:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0d9:	75 1a                	jne    f010b0f5 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b0db:	83 ec 08             	sub    $0x8,%esp
f010b0de:	ff 75 08             	pushl  0x8(%ebp)
f010b0e1:	68 65 73 13 f0       	push   $0xf0137365
f010b0e6:	e8 23 5c ff ff       	call   f0100d0e <cprintf>
f010b0eb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0f3:	eb 11                	jmp    f010b106 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b0f8:	89 d0                	mov    %edx,%eax
f010b0fa:	01 c0                	add    %eax,%eax
f010b0fc:	01 d0                	add    %edx,%eax
f010b0fe:	c1 e0 02             	shl    $0x2,%eax
f010b101:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b106:	c9                   	leave  
f010b107:	c3                   	ret    

f010b108 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b108:	55                   	push   %ebp
f010b109:	89 e5                	mov    %esp,%ebp
f010b10b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b10e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b115:	eb 30                	jmp    f010b147 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b11a:	89 d0                	mov    %edx,%eax
f010b11c:	01 c0                	add    %eax,%eax
f010b11e:	01 d0                	add    %edx,%eax
f010b120:	c1 e0 02             	shl    $0x2,%eax
f010b123:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b128:	8b 00                	mov    (%eax),%eax
f010b12a:	8b 55 08             	mov    0x8(%ebp),%edx
f010b12d:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b133:	83 ec 08             	sub    $0x8,%esp
f010b136:	50                   	push   %eax
f010b137:	52                   	push   %edx
f010b138:	e8 e9 60 02 00       	call   f0131226 <strcmp>
f010b13d:	83 c4 10             	add    $0x10,%esp
f010b140:	85 c0                	test   %eax,%eax
f010b142:	74 0f                	je     f010b153 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b144:	ff 45 f4             	incl   -0xc(%ebp)
f010b147:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b14c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b14f:	7c c6                	jl     f010b117 <get_user_program_info_by_env+0xf>
f010b151:	eb 01                	jmp    f010b154 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b153:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b154:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b159:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b15c:	75 17                	jne    f010b175 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b15e:	83 ec 0c             	sub    $0xc,%esp
f010b161:	68 80 73 13 f0       	push   $0xf0137380
f010b166:	e8 a3 5b ff ff       	call   f0100d0e <cprintf>
f010b16b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b16e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b173:	eb 11                	jmp    f010b186 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b178:	89 d0                	mov    %edx,%eax
f010b17a:	01 c0                	add    %eax,%eax
f010b17c:	01 d0                	add    %edx,%eax
f010b17e:	c1 e0 02             	shl    $0x2,%eax
f010b181:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b186:	c9                   	leave  
f010b187:	c3                   	ret    

f010b188 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b188:	55                   	push   %ebp
f010b189:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b18b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18e:	83 f8 13             	cmp    $0x13,%eax
f010b191:	77 0c                	ja     f010b19f <trapname+0x17>
		return excnames[trapno];
f010b193:	8b 45 08             	mov    0x8(%ebp),%eax
f010b196:	8b 04 85 c0 77 13 f0 	mov    -0xfec8840(,%eax,4),%eax
f010b19d:	eb 12                	jmp    f010b1b1 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b19f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b1a3:	75 07                	jne    f010b1ac <trapname+0x24>
		return "System call";
f010b1a5:	b8 a0 73 13 f0       	mov    $0xf01373a0,%eax
f010b1aa:	eb 05                	jmp    f010b1b1 <trapname+0x29>
	return "(unknown trap)";
f010b1ac:	b8 ac 73 13 f0       	mov    $0xf01373ac,%eax
}
f010b1b1:	5d                   	pop    %ebp
f010b1b2:	c3                   	ret    

f010b1b3 <idt_init>:


void
idt_init(void)
{
f010b1b3:	55                   	push   %ebp
f010b1b4:	89 e5                	mov    %esp,%ebp
f010b1b6:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b1b9:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b1be:	66 a3 50 1d 78 f0    	mov    %ax,0xf0781d50
f010b1c4:	66 c7 05 52 1d 78 f0 	movw   $0x8,0xf0781d52
f010b1cb:	08 00 
f010b1cd:	a0 54 1d 78 f0       	mov    0xf0781d54,%al
f010b1d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1d5:	a2 54 1d 78 f0       	mov    %al,0xf0781d54
f010b1da:	a0 54 1d 78 f0       	mov    0xf0781d54,%al
f010b1df:	83 e0 1f             	and    $0x1f,%eax
f010b1e2:	a2 54 1d 78 f0       	mov    %al,0xf0781d54
f010b1e7:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b1ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ef:	83 c8 0e             	or     $0xe,%eax
f010b1f2:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b1f7:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b1fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ff:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b204:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b209:	83 e0 9f             	and    $0xffffff9f,%eax
f010b20c:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b211:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b216:	83 c8 80             	or     $0xffffff80,%eax
f010b219:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b21e:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b223:	c1 e8 10             	shr    $0x10,%eax
f010b226:	66 a3 56 1d 78 f0    	mov    %ax,0xf0781d56
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b22c:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b231:	66 a3 60 1e 78 f0    	mov    %ax,0xf0781e60
f010b237:	66 c7 05 62 1e 78 f0 	movw   $0x8,0xf0781e62
f010b23e:	08 00 
f010b240:	a0 64 1e 78 f0       	mov    0xf0781e64,%al
f010b245:	83 e0 e0             	and    $0xffffffe0,%eax
f010b248:	a2 64 1e 78 f0       	mov    %al,0xf0781e64
f010b24d:	a0 64 1e 78 f0       	mov    0xf0781e64,%al
f010b252:	83 e0 1f             	and    $0x1f,%eax
f010b255:	a2 64 1e 78 f0       	mov    %al,0xf0781e64
f010b25a:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b25f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b262:	83 c8 0e             	or     $0xe,%eax
f010b265:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b26a:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b26f:	83 e0 ef             	and    $0xffffffef,%eax
f010b272:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b277:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b27c:	83 c8 60             	or     $0x60,%eax
f010b27f:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b284:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b289:	83 c8 80             	or     $0xffffff80,%eax
f010b28c:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b291:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b296:	c1 e8 10             	shr    $0x10,%eax
f010b299:	66 a3 66 1e 78 f0    	mov    %ax,0xf0781e66
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b29f:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b2a4:	66 a3 20 1d 78 f0    	mov    %ax,0xf0781d20
f010b2aa:	66 c7 05 22 1d 78 f0 	movw   $0x8,0xf0781d22
f010b2b1:	08 00 
f010b2b3:	a0 24 1d 78 f0       	mov    0xf0781d24,%al
f010b2b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bb:	a2 24 1d 78 f0       	mov    %al,0xf0781d24
f010b2c0:	a0 24 1d 78 f0       	mov    0xf0781d24,%al
f010b2c5:	83 e0 1f             	and    $0x1f,%eax
f010b2c8:	a2 24 1d 78 f0       	mov    %al,0xf0781d24
f010b2cd:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2d5:	83 c8 0e             	or     $0xe,%eax
f010b2d8:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2dd:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2e2:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e5:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2ea:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2ef:	83 e0 9f             	and    $0xffffff9f,%eax
f010b2f2:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2f7:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2fc:	83 c8 80             	or     $0xffffff80,%eax
f010b2ff:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b304:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b309:	c1 e8 10             	shr    $0x10,%eax
f010b30c:	66 a3 26 1d 78 f0    	mov    %ax,0xf0781d26


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b312:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b317:	66 a3 e0 1c 78 f0    	mov    %ax,0xf0781ce0
f010b31d:	66 c7 05 e2 1c 78 f0 	movw   $0x8,0xf0781ce2
f010b324:	08 00 
f010b326:	a0 e4 1c 78 f0       	mov    0xf0781ce4,%al
f010b32b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32e:	a2 e4 1c 78 f0       	mov    %al,0xf0781ce4
f010b333:	a0 e4 1c 78 f0       	mov    0xf0781ce4,%al
f010b338:	83 e0 1f             	and    $0x1f,%eax
f010b33b:	a2 e4 1c 78 f0       	mov    %al,0xf0781ce4
f010b340:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b345:	83 e0 f0             	and    $0xfffffff0,%eax
f010b348:	83 c8 0e             	or     $0xe,%eax
f010b34b:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b350:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b355:	83 e0 ef             	and    $0xffffffef,%eax
f010b358:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b35d:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b362:	83 c8 60             	or     $0x60,%eax
f010b365:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b36a:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b36f:	83 c8 80             	or     $0xffffff80,%eax
f010b372:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b377:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b37c:	c1 e8 10             	shr    $0x10,%eax
f010b37f:	66 a3 e6 1c 78 f0    	mov    %ax,0xf0781ce6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b385:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b38a:	66 a3 e8 1c 78 f0    	mov    %ax,0xf0781ce8
f010b390:	66 c7 05 ea 1c 78 f0 	movw   $0x8,0xf0781cea
f010b397:	08 00 
f010b399:	a0 ec 1c 78 f0       	mov    0xf0781cec,%al
f010b39e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3a1:	a2 ec 1c 78 f0       	mov    %al,0xf0781cec
f010b3a6:	a0 ec 1c 78 f0       	mov    0xf0781cec,%al
f010b3ab:	83 e0 1f             	and    $0x1f,%eax
f010b3ae:	a2 ec 1c 78 f0       	mov    %al,0xf0781cec
f010b3b3:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3b8:	83 c8 0f             	or     $0xf,%eax
f010b3bb:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3c0:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3c5:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c8:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3cd:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3d2:	83 c8 60             	or     $0x60,%eax
f010b3d5:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3da:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3df:	83 c8 80             	or     $0xffffff80,%eax
f010b3e2:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3e7:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b3ec:	c1 e8 10             	shr    $0x10,%eax
f010b3ef:	66 a3 ee 1c 78 f0    	mov    %ax,0xf0781cee
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b3f5:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b3fa:	66 a3 f0 1c 78 f0    	mov    %ax,0xf0781cf0
f010b400:	66 c7 05 f2 1c 78 f0 	movw   $0x8,0xf0781cf2
f010b407:	08 00 
f010b409:	a0 f4 1c 78 f0       	mov    0xf0781cf4,%al
f010b40e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b411:	a2 f4 1c 78 f0       	mov    %al,0xf0781cf4
f010b416:	a0 f4 1c 78 f0       	mov    0xf0781cf4,%al
f010b41b:	83 e0 1f             	and    $0x1f,%eax
f010b41e:	a2 f4 1c 78 f0       	mov    %al,0xf0781cf4
f010b423:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b428:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42b:	83 c8 0e             	or     $0xe,%eax
f010b42e:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b433:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b438:	83 e0 ef             	and    $0xffffffef,%eax
f010b43b:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b440:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b445:	83 c8 60             	or     $0x60,%eax
f010b448:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b44d:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b452:	83 c8 80             	or     $0xffffff80,%eax
f010b455:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b45a:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b45f:	c1 e8 10             	shr    $0x10,%eax
f010b462:	66 a3 f6 1c 78 f0    	mov    %ax,0xf0781cf6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b468:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b46d:	66 a3 f8 1c 78 f0    	mov    %ax,0xf0781cf8
f010b473:	66 c7 05 fa 1c 78 f0 	movw   $0x8,0xf0781cfa
f010b47a:	08 00 
f010b47c:	a0 fc 1c 78 f0       	mov    0xf0781cfc,%al
f010b481:	83 e0 e0             	and    $0xffffffe0,%eax
f010b484:	a2 fc 1c 78 f0       	mov    %al,0xf0781cfc
f010b489:	a0 fc 1c 78 f0       	mov    0xf0781cfc,%al
f010b48e:	83 e0 1f             	and    $0x1f,%eax
f010b491:	a2 fc 1c 78 f0       	mov    %al,0xf0781cfc
f010b496:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b49b:	83 c8 0f             	or     $0xf,%eax
f010b49e:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4a3:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ab:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4b0:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4b5:	83 c8 60             	or     $0x60,%eax
f010b4b8:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4bd:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4c2:	83 c8 80             	or     $0xffffff80,%eax
f010b4c5:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4ca:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b4cf:	c1 e8 10             	shr    $0x10,%eax
f010b4d2:	66 a3 fe 1c 78 f0    	mov    %ax,0xf0781cfe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b4d8:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b4dd:	66 a3 00 1d 78 f0    	mov    %ax,0xf0781d00
f010b4e3:	66 c7 05 02 1d 78 f0 	movw   $0x8,0xf0781d02
f010b4ea:	08 00 
f010b4ec:	a0 04 1d 78 f0       	mov    0xf0781d04,%al
f010b4f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f4:	a2 04 1d 78 f0       	mov    %al,0xf0781d04
f010b4f9:	a0 04 1d 78 f0       	mov    0xf0781d04,%al
f010b4fe:	83 e0 1f             	and    $0x1f,%eax
f010b501:	a2 04 1d 78 f0       	mov    %al,0xf0781d04
f010b506:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b50b:	83 c8 0f             	or     $0xf,%eax
f010b50e:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b513:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b518:	83 e0 ef             	and    $0xffffffef,%eax
f010b51b:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b520:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b525:	83 c8 60             	or     $0x60,%eax
f010b528:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b52d:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b532:	83 c8 80             	or     $0xffffff80,%eax
f010b535:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b53a:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b53f:	c1 e8 10             	shr    $0x10,%eax
f010b542:	66 a3 06 1d 78 f0    	mov    %ax,0xf0781d06
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b548:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b54d:	66 a3 08 1d 78 f0    	mov    %ax,0xf0781d08
f010b553:	66 c7 05 0a 1d 78 f0 	movw   $0x8,0xf0781d0a
f010b55a:	08 00 
f010b55c:	a0 0c 1d 78 f0       	mov    0xf0781d0c,%al
f010b561:	83 e0 e0             	and    $0xffffffe0,%eax
f010b564:	a2 0c 1d 78 f0       	mov    %al,0xf0781d0c
f010b569:	a0 0c 1d 78 f0       	mov    0xf0781d0c,%al
f010b56e:	83 e0 1f             	and    $0x1f,%eax
f010b571:	a2 0c 1d 78 f0       	mov    %al,0xf0781d0c
f010b576:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b57b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57e:	83 c8 0e             	or     $0xe,%eax
f010b581:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b586:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b58b:	83 e0 ef             	and    $0xffffffef,%eax
f010b58e:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b593:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b598:	83 c8 60             	or     $0x60,%eax
f010b59b:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b5a0:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b5a5:	83 c8 80             	or     $0xffffff80,%eax
f010b5a8:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b5ad:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b5b2:	c1 e8 10             	shr    $0x10,%eax
f010b5b5:	66 a3 0e 1d 78 f0    	mov    %ax,0xf0781d0e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b5bb:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b5c0:	66 a3 10 1d 78 f0    	mov    %ax,0xf0781d10
f010b5c6:	66 c7 05 12 1d 78 f0 	movw   $0x8,0xf0781d12
f010b5cd:	08 00 
f010b5cf:	a0 14 1d 78 f0       	mov    0xf0781d14,%al
f010b5d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d7:	a2 14 1d 78 f0       	mov    %al,0xf0781d14
f010b5dc:	a0 14 1d 78 f0       	mov    0xf0781d14,%al
f010b5e1:	83 e0 1f             	and    $0x1f,%eax
f010b5e4:	a2 14 1d 78 f0       	mov    %al,0xf0781d14
f010b5e9:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b5ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f1:	83 c8 0e             	or     $0xe,%eax
f010b5f4:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b5f9:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b5fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b601:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b606:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b60b:	83 c8 60             	or     $0x60,%eax
f010b60e:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b613:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b618:	83 c8 80             	or     $0xffffff80,%eax
f010b61b:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b620:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b625:	c1 e8 10             	shr    $0x10,%eax
f010b628:	66 a3 16 1d 78 f0    	mov    %ax,0xf0781d16
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b62e:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b633:	66 a3 18 1d 78 f0    	mov    %ax,0xf0781d18
f010b639:	66 c7 05 1a 1d 78 f0 	movw   $0x8,0xf0781d1a
f010b640:	08 00 
f010b642:	a0 1c 1d 78 f0       	mov    0xf0781d1c,%al
f010b647:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64a:	a2 1c 1d 78 f0       	mov    %al,0xf0781d1c
f010b64f:	a0 1c 1d 78 f0       	mov    0xf0781d1c,%al
f010b654:	83 e0 1f             	and    $0x1f,%eax
f010b657:	a2 1c 1d 78 f0       	mov    %al,0xf0781d1c
f010b65c:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b661:	83 e0 f0             	and    $0xfffffff0,%eax
f010b664:	83 c8 0e             	or     $0xe,%eax
f010b667:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b66c:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b671:	83 e0 ef             	and    $0xffffffef,%eax
f010b674:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b679:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b67e:	83 c8 60             	or     $0x60,%eax
f010b681:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b686:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b68b:	83 c8 80             	or     $0xffffff80,%eax
f010b68e:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b693:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b698:	c1 e8 10             	shr    $0x10,%eax
f010b69b:	66 a3 1e 1d 78 f0    	mov    %ax,0xf0781d1e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b6a1:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b6a6:	66 a3 30 1d 78 f0    	mov    %ax,0xf0781d30
f010b6ac:	66 c7 05 32 1d 78 f0 	movw   $0x8,0xf0781d32
f010b6b3:	08 00 
f010b6b5:	a0 34 1d 78 f0       	mov    0xf0781d34,%al
f010b6ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6bd:	a2 34 1d 78 f0       	mov    %al,0xf0781d34
f010b6c2:	a0 34 1d 78 f0       	mov    0xf0781d34,%al
f010b6c7:	83 e0 1f             	and    $0x1f,%eax
f010b6ca:	a2 34 1d 78 f0       	mov    %al,0xf0781d34
f010b6cf:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d7:	83 c8 0e             	or     $0xe,%eax
f010b6da:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6df:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6e4:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e7:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6ec:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6f1:	83 c8 60             	or     $0x60,%eax
f010b6f4:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6f9:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6fe:	83 c8 80             	or     $0xffffff80,%eax
f010b701:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b706:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b70b:	c1 e8 10             	shr    $0x10,%eax
f010b70e:	66 a3 36 1d 78 f0    	mov    %ax,0xf0781d36
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b714:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b719:	66 a3 38 1d 78 f0    	mov    %ax,0xf0781d38
f010b71f:	66 c7 05 3a 1d 78 f0 	movw   $0x8,0xf0781d3a
f010b726:	08 00 
f010b728:	a0 3c 1d 78 f0       	mov    0xf0781d3c,%al
f010b72d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b730:	a2 3c 1d 78 f0       	mov    %al,0xf0781d3c
f010b735:	a0 3c 1d 78 f0       	mov    0xf0781d3c,%al
f010b73a:	83 e0 1f             	and    $0x1f,%eax
f010b73d:	a2 3c 1d 78 f0       	mov    %al,0xf0781d3c
f010b742:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b747:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74a:	83 c8 0e             	or     $0xe,%eax
f010b74d:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b752:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b757:	83 e0 ef             	and    $0xffffffef,%eax
f010b75a:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b75f:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b764:	83 c8 60             	or     $0x60,%eax
f010b767:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b76c:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b771:	83 c8 80             	or     $0xffffff80,%eax
f010b774:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b779:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b77e:	c1 e8 10             	shr    $0x10,%eax
f010b781:	66 a3 3e 1d 78 f0    	mov    %ax,0xf0781d3e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b787:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b78c:	66 a3 40 1d 78 f0    	mov    %ax,0xf0781d40
f010b792:	66 c7 05 42 1d 78 f0 	movw   $0x8,0xf0781d42
f010b799:	08 00 
f010b79b:	a0 44 1d 78 f0       	mov    0xf0781d44,%al
f010b7a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a3:	a2 44 1d 78 f0       	mov    %al,0xf0781d44
f010b7a8:	a0 44 1d 78 f0       	mov    0xf0781d44,%al
f010b7ad:	83 e0 1f             	and    $0x1f,%eax
f010b7b0:	a2 44 1d 78 f0       	mov    %al,0xf0781d44
f010b7b5:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7ba:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7bd:	83 c8 0e             	or     $0xe,%eax
f010b7c0:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7c5:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7ca:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cd:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7d2:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7d7:	83 c8 60             	or     $0x60,%eax
f010b7da:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7df:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7e4:	83 c8 80             	or     $0xffffff80,%eax
f010b7e7:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7ec:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b7f1:	c1 e8 10             	shr    $0x10,%eax
f010b7f4:	66 a3 46 1d 78 f0    	mov    %ax,0xf0781d46
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b7fa:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b7ff:	66 a3 48 1d 78 f0    	mov    %ax,0xf0781d48
f010b805:	66 c7 05 4a 1d 78 f0 	movw   $0x8,0xf0781d4a
f010b80c:	08 00 
f010b80e:	a0 4c 1d 78 f0       	mov    0xf0781d4c,%al
f010b813:	83 e0 e0             	and    $0xffffffe0,%eax
f010b816:	a2 4c 1d 78 f0       	mov    %al,0xf0781d4c
f010b81b:	a0 4c 1d 78 f0       	mov    0xf0781d4c,%al
f010b820:	83 e0 1f             	and    $0x1f,%eax
f010b823:	a2 4c 1d 78 f0       	mov    %al,0xf0781d4c
f010b828:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b82d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b830:	83 c8 0e             	or     $0xe,%eax
f010b833:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b838:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b83d:	83 e0 ef             	and    $0xffffffef,%eax
f010b840:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b845:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b84a:	83 c8 60             	or     $0x60,%eax
f010b84d:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b852:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b857:	83 c8 80             	or     $0xffffff80,%eax
f010b85a:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b85f:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b864:	c1 e8 10             	shr    $0x10,%eax
f010b867:	66 a3 4e 1d 78 f0    	mov    %ax,0xf0781d4e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b86d:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b872:	66 a3 60 1d 78 f0    	mov    %ax,0xf0781d60
f010b878:	66 c7 05 62 1d 78 f0 	movw   $0x8,0xf0781d62
f010b87f:	08 00 
f010b881:	a0 64 1d 78 f0       	mov    0xf0781d64,%al
f010b886:	83 e0 e0             	and    $0xffffffe0,%eax
f010b889:	a2 64 1d 78 f0       	mov    %al,0xf0781d64
f010b88e:	a0 64 1d 78 f0       	mov    0xf0781d64,%al
f010b893:	83 e0 1f             	and    $0x1f,%eax
f010b896:	a2 64 1d 78 f0       	mov    %al,0xf0781d64
f010b89b:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8a0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a3:	83 c8 0e             	or     $0xe,%eax
f010b8a6:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8ab:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8b0:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b3:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8b8:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8bd:	83 c8 60             	or     $0x60,%eax
f010b8c0:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8c5:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8ca:	83 c8 80             	or     $0xffffff80,%eax
f010b8cd:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8d2:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b8d7:	c1 e8 10             	shr    $0x10,%eax
f010b8da:	66 a3 66 1d 78 f0    	mov    %ax,0xf0781d66
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b8e0:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b8e5:	66 a3 68 1d 78 f0    	mov    %ax,0xf0781d68
f010b8eb:	66 c7 05 6a 1d 78 f0 	movw   $0x8,0xf0781d6a
f010b8f2:	08 00 
f010b8f4:	a0 6c 1d 78 f0       	mov    0xf0781d6c,%al
f010b8f9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fc:	a2 6c 1d 78 f0       	mov    %al,0xf0781d6c
f010b901:	a0 6c 1d 78 f0       	mov    0xf0781d6c,%al
f010b906:	83 e0 1f             	and    $0x1f,%eax
f010b909:	a2 6c 1d 78 f0       	mov    %al,0xf0781d6c
f010b90e:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b913:	83 e0 f0             	and    $0xfffffff0,%eax
f010b916:	83 c8 0e             	or     $0xe,%eax
f010b919:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b91e:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b923:	83 e0 ef             	and    $0xffffffef,%eax
f010b926:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b92b:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b930:	83 c8 60             	or     $0x60,%eax
f010b933:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b938:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b93d:	83 c8 80             	or     $0xffffff80,%eax
f010b940:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b945:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b94a:	c1 e8 10             	shr    $0x10,%eax
f010b94d:	66 a3 6e 1d 78 f0    	mov    %ax,0xf0781d6e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b953:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b958:	66 a3 70 1d 78 f0    	mov    %ax,0xf0781d70
f010b95e:	66 c7 05 72 1d 78 f0 	movw   $0x8,0xf0781d72
f010b965:	08 00 
f010b967:	a0 74 1d 78 f0       	mov    0xf0781d74,%al
f010b96c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96f:	a2 74 1d 78 f0       	mov    %al,0xf0781d74
f010b974:	a0 74 1d 78 f0       	mov    0xf0781d74,%al
f010b979:	83 e0 1f             	and    $0x1f,%eax
f010b97c:	a2 74 1d 78 f0       	mov    %al,0xf0781d74
f010b981:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b986:	83 e0 f0             	and    $0xfffffff0,%eax
f010b989:	83 c8 0e             	or     $0xe,%eax
f010b98c:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b991:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b996:	83 e0 ef             	and    $0xffffffef,%eax
f010b999:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b99e:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b9a3:	83 c8 60             	or     $0x60,%eax
f010b9a6:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b9ab:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b9b0:	83 c8 80             	or     $0xffffff80,%eax
f010b9b3:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b9b8:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b9bd:	c1 e8 10             	shr    $0x10,%eax
f010b9c0:	66 a3 76 1d 78 f0    	mov    %ax,0xf0781d76
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b9c6:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010b9cb:	66 a3 78 1d 78 f0    	mov    %ax,0xf0781d78
f010b9d1:	66 c7 05 7a 1d 78 f0 	movw   $0x8,0xf0781d7a
f010b9d8:	08 00 
f010b9da:	a0 7c 1d 78 f0       	mov    0xf0781d7c,%al
f010b9df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e2:	a2 7c 1d 78 f0       	mov    %al,0xf0781d7c
f010b9e7:	a0 7c 1d 78 f0       	mov    0xf0781d7c,%al
f010b9ec:	83 e0 1f             	and    $0x1f,%eax
f010b9ef:	a2 7c 1d 78 f0       	mov    %al,0xf0781d7c
f010b9f4:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010b9f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fc:	83 c8 0e             	or     $0xe,%eax
f010b9ff:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba04:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba09:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0c:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba11:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba16:	83 c8 60             	or     $0x60,%eax
f010ba19:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba1e:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba23:	83 c8 80             	or     $0xffffff80,%eax
f010ba26:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba2b:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010ba30:	c1 e8 10             	shr    $0x10,%eax
f010ba33:	66 a3 7e 1d 78 f0    	mov    %ax,0xf0781d7e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010ba39:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010ba3e:	66 a3 e0 1d 78 f0    	mov    %ax,0xf0781de0
f010ba44:	66 c7 05 e2 1d 78 f0 	movw   $0x8,0xf0781de2
f010ba4b:	08 00 
f010ba4d:	a0 e4 1d 78 f0       	mov    0xf0781de4,%al
f010ba52:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba55:	a2 e4 1d 78 f0       	mov    %al,0xf0781de4
f010ba5a:	a0 e4 1d 78 f0       	mov    0xf0781de4,%al
f010ba5f:	83 e0 1f             	and    $0x1f,%eax
f010ba62:	a2 e4 1d 78 f0       	mov    %al,0xf0781de4
f010ba67:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba6c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6f:	83 c8 0e             	or     $0xe,%eax
f010ba72:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba77:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba7c:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7f:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba84:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba89:	83 c8 60             	or     $0x60,%eax
f010ba8c:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba91:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba96:	83 c8 80             	or     $0xffffff80,%eax
f010ba99:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba9e:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010baa3:	c1 e8 10             	shr    $0x10,%eax
f010baa6:	66 a3 e6 1d 78 f0    	mov    %ax,0xf0781de6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010baac:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bab1:	66 a3 e8 1d 78 f0    	mov    %ax,0xf0781de8
f010bab7:	66 c7 05 ea 1d 78 f0 	movw   $0x8,0xf0781dea
f010babe:	08 00 
f010bac0:	a0 ec 1d 78 f0       	mov    0xf0781dec,%al
f010bac5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac8:	a2 ec 1d 78 f0       	mov    %al,0xf0781dec
f010bacd:	a0 ec 1d 78 f0       	mov    0xf0781dec,%al
f010bad2:	83 e0 1f             	and    $0x1f,%eax
f010bad5:	a2 ec 1d 78 f0       	mov    %al,0xf0781dec
f010bada:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010badf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae2:	83 c8 0e             	or     $0xe,%eax
f010bae5:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010baea:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010baef:	83 e0 ef             	and    $0xffffffef,%eax
f010baf2:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010baf7:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010bafc:	83 c8 60             	or     $0x60,%eax
f010baff:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010bb04:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010bb09:	83 c8 80             	or     $0xffffff80,%eax
f010bb0c:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010bb11:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bb16:	c1 e8 10             	shr    $0x10,%eax
f010bb19:	66 a3 ee 1d 78 f0    	mov    %ax,0xf0781dee
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bb1f:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb24:	66 a3 f0 1d 78 f0    	mov    %ax,0xf0781df0
f010bb2a:	66 c7 05 f2 1d 78 f0 	movw   $0x8,0xf0781df2
f010bb31:	08 00 
f010bb33:	a0 f4 1d 78 f0       	mov    0xf0781df4,%al
f010bb38:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb3b:	a2 f4 1d 78 f0       	mov    %al,0xf0781df4
f010bb40:	a0 f4 1d 78 f0       	mov    0xf0781df4,%al
f010bb45:	83 e0 1f             	and    $0x1f,%eax
f010bb48:	a2 f4 1d 78 f0       	mov    %al,0xf0781df4
f010bb4d:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb52:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb55:	83 c8 0e             	or     $0xe,%eax
f010bb58:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb5d:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb62:	83 e0 ef             	and    $0xffffffef,%eax
f010bb65:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb6a:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb6f:	83 c8 60             	or     $0x60,%eax
f010bb72:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb77:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb7c:	83 c8 80             	or     $0xffffff80,%eax
f010bb7f:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb84:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb89:	c1 e8 10             	shr    $0x10,%eax
f010bb8c:	66 a3 f6 1d 78 f0    	mov    %ax,0xf0781df6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bb92:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bb97:	66 a3 f8 1d 78 f0    	mov    %ax,0xf0781df8
f010bb9d:	66 c7 05 fa 1d 78 f0 	movw   $0x8,0xf0781dfa
f010bba4:	08 00 
f010bba6:	a0 fc 1d 78 f0       	mov    0xf0781dfc,%al
f010bbab:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbae:	a2 fc 1d 78 f0       	mov    %al,0xf0781dfc
f010bbb3:	a0 fc 1d 78 f0       	mov    0xf0781dfc,%al
f010bbb8:	83 e0 1f             	and    $0x1f,%eax
f010bbbb:	a2 fc 1d 78 f0       	mov    %al,0xf0781dfc
f010bbc0:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbc5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc8:	83 c8 0e             	or     $0xe,%eax
f010bbcb:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbd0:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbd5:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd8:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbdd:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbe2:	83 c8 60             	or     $0x60,%eax
f010bbe5:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbea:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbef:	83 c8 80             	or     $0xffffff80,%eax
f010bbf2:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbf7:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bbfc:	c1 e8 10             	shr    $0x10,%eax
f010bbff:	66 a3 fe 1d 78 f0    	mov    %ax,0xf0781dfe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bc05:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc0a:	66 a3 00 1e 78 f0    	mov    %ax,0xf0781e00
f010bc10:	66 c7 05 02 1e 78 f0 	movw   $0x8,0xf0781e02
f010bc17:	08 00 
f010bc19:	a0 04 1e 78 f0       	mov    0xf0781e04,%al
f010bc1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc21:	a2 04 1e 78 f0       	mov    %al,0xf0781e04
f010bc26:	a0 04 1e 78 f0       	mov    0xf0781e04,%al
f010bc2b:	83 e0 1f             	and    $0x1f,%eax
f010bc2e:	a2 04 1e 78 f0       	mov    %al,0xf0781e04
f010bc33:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc38:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc3b:	83 c8 0e             	or     $0xe,%eax
f010bc3e:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc43:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc48:	83 e0 ef             	and    $0xffffffef,%eax
f010bc4b:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc50:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc55:	83 c8 60             	or     $0x60,%eax
f010bc58:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc5d:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc62:	83 c8 80             	or     $0xffffff80,%eax
f010bc65:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc6a:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc6f:	c1 e8 10             	shr    $0x10,%eax
f010bc72:	66 a3 06 1e 78 f0    	mov    %ax,0xf0781e06
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bc78:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bc7d:	66 a3 08 1e 78 f0    	mov    %ax,0xf0781e08
f010bc83:	66 c7 05 0a 1e 78 f0 	movw   $0x8,0xf0781e0a
f010bc8a:	08 00 
f010bc8c:	a0 0c 1e 78 f0       	mov    0xf0781e0c,%al
f010bc91:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc94:	a2 0c 1e 78 f0       	mov    %al,0xf0781e0c
f010bc99:	a0 0c 1e 78 f0       	mov    0xf0781e0c,%al
f010bc9e:	83 e0 1f             	and    $0x1f,%eax
f010bca1:	a2 0c 1e 78 f0       	mov    %al,0xf0781e0c
f010bca6:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcab:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcae:	83 c8 0e             	or     $0xe,%eax
f010bcb1:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcb6:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcbb:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbe:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcc3:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcc8:	83 c8 60             	or     $0x60,%eax
f010bccb:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcd0:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcd5:	83 c8 80             	or     $0xffffff80,%eax
f010bcd8:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcdd:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bce2:	c1 e8 10             	shr    $0x10,%eax
f010bce5:	66 a3 0e 1e 78 f0    	mov    %ax,0xf0781e0e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bceb:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bcf0:	66 a3 10 1e 78 f0    	mov    %ax,0xf0781e10
f010bcf6:	66 c7 05 12 1e 78 f0 	movw   $0x8,0xf0781e12
f010bcfd:	08 00 
f010bcff:	a0 14 1e 78 f0       	mov    0xf0781e14,%al
f010bd04:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd07:	a2 14 1e 78 f0       	mov    %al,0xf0781e14
f010bd0c:	a0 14 1e 78 f0       	mov    0xf0781e14,%al
f010bd11:	83 e0 1f             	and    $0x1f,%eax
f010bd14:	a2 14 1e 78 f0       	mov    %al,0xf0781e14
f010bd19:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd21:	83 c8 0e             	or     $0xe,%eax
f010bd24:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd29:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd2e:	83 e0 ef             	and    $0xffffffef,%eax
f010bd31:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd36:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd3b:	83 c8 60             	or     $0x60,%eax
f010bd3e:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd43:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd48:	83 c8 80             	or     $0xffffff80,%eax
f010bd4b:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd50:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bd55:	c1 e8 10             	shr    $0x10,%eax
f010bd58:	66 a3 16 1e 78 f0    	mov    %ax,0xf0781e16
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bd5e:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bd63:	66 a3 18 1e 78 f0    	mov    %ax,0xf0781e18
f010bd69:	66 c7 05 1a 1e 78 f0 	movw   $0x8,0xf0781e1a
f010bd70:	08 00 
f010bd72:	a0 1c 1e 78 f0       	mov    0xf0781e1c,%al
f010bd77:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7a:	a2 1c 1e 78 f0       	mov    %al,0xf0781e1c
f010bd7f:	a0 1c 1e 78 f0       	mov    0xf0781e1c,%al
f010bd84:	83 e0 1f             	and    $0x1f,%eax
f010bd87:	a2 1c 1e 78 f0       	mov    %al,0xf0781e1c
f010bd8c:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bd91:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd94:	83 c8 0e             	or     $0xe,%eax
f010bd97:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bd9c:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bda1:	83 e0 ef             	and    $0xffffffef,%eax
f010bda4:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bda9:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bdae:	83 c8 60             	or     $0x60,%eax
f010bdb1:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bdb6:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bdbb:	83 c8 80             	or     $0xffffff80,%eax
f010bdbe:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bdc3:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bdc8:	c1 e8 10             	shr    $0x10,%eax
f010bdcb:	66 a3 1e 1e 78 f0    	mov    %ax,0xf0781e1e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bdd1:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010bdd6:	66 a3 20 1e 78 f0    	mov    %ax,0xf0781e20
f010bddc:	66 c7 05 22 1e 78 f0 	movw   $0x8,0xf0781e22
f010bde3:	08 00 
f010bde5:	a0 24 1e 78 f0       	mov    0xf0781e24,%al
f010bdea:	83 e0 e0             	and    $0xffffffe0,%eax
f010bded:	a2 24 1e 78 f0       	mov    %al,0xf0781e24
f010bdf2:	a0 24 1e 78 f0       	mov    0xf0781e24,%al
f010bdf7:	83 e0 1f             	and    $0x1f,%eax
f010bdfa:	a2 24 1e 78 f0       	mov    %al,0xf0781e24
f010bdff:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be04:	83 e0 f0             	and    $0xfffffff0,%eax
f010be07:	83 c8 0e             	or     $0xe,%eax
f010be0a:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be0f:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be14:	83 e0 ef             	and    $0xffffffef,%eax
f010be17:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be1c:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be21:	83 c8 60             	or     $0x60,%eax
f010be24:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be29:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be2e:	83 c8 80             	or     $0xffffff80,%eax
f010be31:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be36:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010be3b:	c1 e8 10             	shr    $0x10,%eax
f010be3e:	66 a3 26 1e 78 f0    	mov    %ax,0xf0781e26
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010be44:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010be49:	66 a3 28 1e 78 f0    	mov    %ax,0xf0781e28
f010be4f:	66 c7 05 2a 1e 78 f0 	movw   $0x8,0xf0781e2a
f010be56:	08 00 
f010be58:	a0 2c 1e 78 f0       	mov    0xf0781e2c,%al
f010be5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010be60:	a2 2c 1e 78 f0       	mov    %al,0xf0781e2c
f010be65:	a0 2c 1e 78 f0       	mov    0xf0781e2c,%al
f010be6a:	83 e0 1f             	and    $0x1f,%eax
f010be6d:	a2 2c 1e 78 f0       	mov    %al,0xf0781e2c
f010be72:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be77:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7a:	83 c8 0e             	or     $0xe,%eax
f010be7d:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be82:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be87:	83 e0 ef             	and    $0xffffffef,%eax
f010be8a:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be8f:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be94:	83 c8 60             	or     $0x60,%eax
f010be97:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be9c:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010bea1:	83 c8 80             	or     $0xffffff80,%eax
f010bea4:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010bea9:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010beae:	c1 e8 10             	shr    $0x10,%eax
f010beb1:	66 a3 2e 1e 78 f0    	mov    %ax,0xf0781e2e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010beb7:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bebc:	66 a3 30 1e 78 f0    	mov    %ax,0xf0781e30
f010bec2:	66 c7 05 32 1e 78 f0 	movw   $0x8,0xf0781e32
f010bec9:	08 00 
f010becb:	a0 34 1e 78 f0       	mov    0xf0781e34,%al
f010bed0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed3:	a2 34 1e 78 f0       	mov    %al,0xf0781e34
f010bed8:	a0 34 1e 78 f0       	mov    0xf0781e34,%al
f010bedd:	83 e0 1f             	and    $0x1f,%eax
f010bee0:	a2 34 1e 78 f0       	mov    %al,0xf0781e34
f010bee5:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010beea:	83 e0 f0             	and    $0xfffffff0,%eax
f010beed:	83 c8 0e             	or     $0xe,%eax
f010bef0:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bef5:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010befa:	83 e0 ef             	and    $0xffffffef,%eax
f010befd:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf02:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010bf07:	83 c8 60             	or     $0x60,%eax
f010bf0a:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf0f:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010bf14:	83 c8 80             	or     $0xffffff80,%eax
f010bf17:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf1c:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bf21:	c1 e8 10             	shr    $0x10,%eax
f010bf24:	66 a3 36 1e 78 f0    	mov    %ax,0xf0781e36
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bf2a:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf2f:	66 a3 38 1e 78 f0    	mov    %ax,0xf0781e38
f010bf35:	66 c7 05 3a 1e 78 f0 	movw   $0x8,0xf0781e3a
f010bf3c:	08 00 
f010bf3e:	a0 3c 1e 78 f0       	mov    0xf0781e3c,%al
f010bf43:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf46:	a2 3c 1e 78 f0       	mov    %al,0xf0781e3c
f010bf4b:	a0 3c 1e 78 f0       	mov    0xf0781e3c,%al
f010bf50:	83 e0 1f             	and    $0x1f,%eax
f010bf53:	a2 3c 1e 78 f0       	mov    %al,0xf0781e3c
f010bf58:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf60:	83 c8 0e             	or     $0xe,%eax
f010bf63:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf68:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf6d:	83 e0 ef             	and    $0xffffffef,%eax
f010bf70:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf75:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf7a:	83 c8 60             	or     $0x60,%eax
f010bf7d:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf82:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf87:	83 c8 80             	or     $0xffffff80,%eax
f010bf8a:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf8f:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf94:	c1 e8 10             	shr    $0x10,%eax
f010bf97:	66 a3 3e 1e 78 f0    	mov    %ax,0xf0781e3e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bf9d:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010bfa2:	66 a3 40 1e 78 f0    	mov    %ax,0xf0781e40
f010bfa8:	66 c7 05 42 1e 78 f0 	movw   $0x8,0xf0781e42
f010bfaf:	08 00 
f010bfb1:	a0 44 1e 78 f0       	mov    0xf0781e44,%al
f010bfb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb9:	a2 44 1e 78 f0       	mov    %al,0xf0781e44
f010bfbe:	a0 44 1e 78 f0       	mov    0xf0781e44,%al
f010bfc3:	83 e0 1f             	and    $0x1f,%eax
f010bfc6:	a2 44 1e 78 f0       	mov    %al,0xf0781e44
f010bfcb:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd3:	83 c8 0e             	or     $0xe,%eax
f010bfd6:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bfdb:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfe0:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe3:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bfe8:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfed:	83 c8 60             	or     $0x60,%eax
f010bff0:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bff5:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bffa:	83 c8 80             	or     $0xffffff80,%eax
f010bffd:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010c002:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010c007:	c1 e8 10             	shr    $0x10,%eax
f010c00a:	66 a3 46 1e 78 f0    	mov    %ax,0xf0781e46
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c010:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c015:	66 a3 48 1e 78 f0    	mov    %ax,0xf0781e48
f010c01b:	66 c7 05 4a 1e 78 f0 	movw   $0x8,0xf0781e4a
f010c022:	08 00 
f010c024:	a0 4c 1e 78 f0       	mov    0xf0781e4c,%al
f010c029:	83 e0 e0             	and    $0xffffffe0,%eax
f010c02c:	a2 4c 1e 78 f0       	mov    %al,0xf0781e4c
f010c031:	a0 4c 1e 78 f0       	mov    0xf0781e4c,%al
f010c036:	83 e0 1f             	and    $0x1f,%eax
f010c039:	a2 4c 1e 78 f0       	mov    %al,0xf0781e4c
f010c03e:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c043:	83 e0 f0             	and    $0xfffffff0,%eax
f010c046:	83 c8 0e             	or     $0xe,%eax
f010c049:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c04e:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c053:	83 e0 ef             	and    $0xffffffef,%eax
f010c056:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c05b:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c060:	83 c8 60             	or     $0x60,%eax
f010c063:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c068:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c06d:	83 c8 80             	or     $0xffffff80,%eax
f010c070:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c075:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c07a:	c1 e8 10             	shr    $0x10,%eax
f010c07d:	66 a3 4e 1e 78 f0    	mov    %ax,0xf0781e4e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c083:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c088:	66 a3 50 1e 78 f0    	mov    %ax,0xf0781e50
f010c08e:	66 c7 05 52 1e 78 f0 	movw   $0x8,0xf0781e52
f010c095:	08 00 
f010c097:	a0 54 1e 78 f0       	mov    0xf0781e54,%al
f010c09c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c09f:	a2 54 1e 78 f0       	mov    %al,0xf0781e54
f010c0a4:	a0 54 1e 78 f0       	mov    0xf0781e54,%al
f010c0a9:	83 e0 1f             	and    $0x1f,%eax
f010c0ac:	a2 54 1e 78 f0       	mov    %al,0xf0781e54
f010c0b1:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b9:	83 c8 0e             	or     $0xe,%eax
f010c0bc:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0c1:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0c6:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c9:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0ce:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0d3:	83 c8 60             	or     $0x60,%eax
f010c0d6:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0db:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0e0:	83 c8 80             	or     $0xffffff80,%eax
f010c0e3:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0e8:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c0ed:	c1 e8 10             	shr    $0x10,%eax
f010c0f0:	66 a3 56 1e 78 f0    	mov    %ax,0xf0781e56
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c0f6:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c0fb:	66 a3 58 1e 78 f0    	mov    %ax,0xf0781e58
f010c101:	66 c7 05 5a 1e 78 f0 	movw   $0x8,0xf0781e5a
f010c108:	08 00 
f010c10a:	a0 5c 1e 78 f0       	mov    0xf0781e5c,%al
f010c10f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c112:	a2 5c 1e 78 f0       	mov    %al,0xf0781e5c
f010c117:	a0 5c 1e 78 f0       	mov    0xf0781e5c,%al
f010c11c:	83 e0 1f             	and    $0x1f,%eax
f010c11f:	a2 5c 1e 78 f0       	mov    %al,0xf0781e5c
f010c124:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c129:	83 e0 f0             	and    $0xfffffff0,%eax
f010c12c:	83 c8 0e             	or     $0xe,%eax
f010c12f:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c134:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c139:	83 e0 ef             	and    $0xffffffef,%eax
f010c13c:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c141:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c146:	83 c8 60             	or     $0x60,%eax
f010c149:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c14e:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c153:	83 c8 80             	or     $0xffffff80,%eax
f010c156:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c15b:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c160:	c1 e8 10             	shr    $0x10,%eax
f010c163:	66 a3 5e 1e 78 f0    	mov    %ax,0xf0781e5e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c169:	c7 05 04 25 78 f0 00 	movl   $0xefc00000,0xf0782504
f010c170:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c173:	66 c7 05 08 25 78 f0 	movw   $0x10,0xf0782508
f010c17a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c17c:	66 c7 05 e8 28 19 f0 	movw   $0x68,0xf01928e8
f010c183:	68 00 
f010c185:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c18a:	66 a3 ea 28 19 f0    	mov    %ax,0xf01928ea
f010c190:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c195:	c1 e8 10             	shr    $0x10,%eax
f010c198:	a2 ec 28 19 f0       	mov    %al,0xf01928ec
f010c19d:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a5:	83 c8 09             	or     $0x9,%eax
f010c1a8:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ad:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1b2:	83 c8 10             	or     $0x10,%eax
f010c1b5:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ba:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1bf:	83 e0 9f             	and    $0xffffff9f,%eax
f010c1c2:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1c7:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1cc:	83 c8 80             	or     $0xffffff80,%eax
f010c1cf:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1d4:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dc:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1e1:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1e9:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1ee:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1f3:	83 e0 df             	and    $0xffffffdf,%eax
f010c1f6:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1fb:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c200:	83 c8 40             	or     $0x40,%eax
f010c203:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c208:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c20d:	83 e0 7f             	and    $0x7f,%eax
f010c210:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c215:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c21a:	c1 e8 18             	shr    $0x18,%eax
f010c21d:	a2 ef 28 19 f0       	mov    %al,0xf01928ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c222:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c227:	83 e0 ef             	and    $0xffffffef,%eax
f010c22a:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c22f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c235:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c239:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c23c:	0f 01 1d 1c 2d 19 f0 	lidtl  0xf0192d1c
}
f010c243:	90                   	nop
f010c244:	c9                   	leave  
f010c245:	c3                   	ret    

f010c246 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c246:	55                   	push   %ebp
f010c247:	89 e5                	mov    %esp,%ebp
f010c249:	53                   	push   %ebx
f010c24a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 08             	pushl  0x8(%ebp)
f010c253:	68 bb 73 13 f0       	push   $0xf01373bb
f010c258:	e8 b1 4a ff ff       	call   f0100d0e <cprintf>
f010c25d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c260:	8b 45 08             	mov    0x8(%ebp),%eax
f010c263:	83 ec 0c             	sub    $0xc,%esp
f010c266:	50                   	push   %eax
f010c267:	e8 fd 00 00 00       	call   f010c369 <print_regs>
f010c26c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c272:	8b 40 20             	mov    0x20(%eax),%eax
f010c275:	0f b7 c0             	movzwl %ax,%eax
f010c278:	83 ec 08             	sub    $0x8,%esp
f010c27b:	50                   	push   %eax
f010c27c:	68 cd 73 13 f0       	push   $0xf01373cd
f010c281:	e8 88 4a ff ff       	call   f0100d0e <cprintf>
f010c286:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c289:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28c:	8b 40 24             	mov    0x24(%eax),%eax
f010c28f:	0f b7 c0             	movzwl %ax,%eax
f010c292:	83 ec 08             	sub    $0x8,%esp
f010c295:	50                   	push   %eax
f010c296:	68 e0 73 13 f0       	push   $0xf01373e0
f010c29b:	e8 6e 4a ff ff       	call   f0100d0e <cprintf>
f010c2a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a6:	8b 58 28             	mov    0x28(%eax),%ebx
f010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ac:	8b 40 28             	mov    0x28(%eax),%eax
f010c2af:	83 ec 0c             	sub    $0xc,%esp
f010c2b2:	50                   	push   %eax
f010c2b3:	e8 d0 ee ff ff       	call   f010b188 <trapname>
f010c2b8:	83 c4 10             	add    $0x10,%esp
f010c2bb:	89 c2                	mov    %eax,%edx
f010c2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c2c3:	53                   	push   %ebx
f010c2c4:	52                   	push   %edx
f010c2c5:	50                   	push   %eax
f010c2c6:	68 f3 73 13 f0       	push   $0xf01373f3
f010c2cb:	e8 3e 4a ff ff       	call   f0100d0e <cprintf>
f010c2d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c2d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d6:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c2d9:	83 ec 08             	sub    $0x8,%esp
f010c2dc:	50                   	push   %eax
f010c2dd:	68 0a 74 13 f0       	push   $0xf013740a
f010c2e2:	e8 27 4a ff ff       	call   f0100d0e <cprintf>
f010c2e7:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ed:	8b 40 30             	mov    0x30(%eax),%eax
f010c2f0:	83 ec 08             	sub    $0x8,%esp
f010c2f3:	50                   	push   %eax
f010c2f4:	68 19 74 13 f0       	push   $0xf0137419
f010c2f9:	e8 10 4a ff ff       	call   f0100d0e <cprintf>
f010c2fe:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c301:	8b 45 08             	mov    0x8(%ebp),%eax
f010c304:	8b 40 34             	mov    0x34(%eax),%eax
f010c307:	0f b7 c0             	movzwl %ax,%eax
f010c30a:	83 ec 08             	sub    $0x8,%esp
f010c30d:	50                   	push   %eax
f010c30e:	68 28 74 13 f0       	push   $0xf0137428
f010c313:	e8 f6 49 ff ff       	call   f0100d0e <cprintf>
f010c318:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31e:	8b 40 38             	mov    0x38(%eax),%eax
f010c321:	83 ec 08             	sub    $0x8,%esp
f010c324:	50                   	push   %eax
f010c325:	68 3b 74 13 f0       	push   $0xf013743b
f010c32a:	e8 df 49 ff ff       	call   f0100d0e <cprintf>
f010c32f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c332:	8b 45 08             	mov    0x8(%ebp),%eax
f010c335:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c338:	83 ec 08             	sub    $0x8,%esp
f010c33b:	50                   	push   %eax
f010c33c:	68 4a 74 13 f0       	push   $0xf013744a
f010c341:	e8 c8 49 ff ff       	call   f0100d0e <cprintf>
f010c346:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c349:	8b 45 08             	mov    0x8(%ebp),%eax
f010c34c:	8b 40 40             	mov    0x40(%eax),%eax
f010c34f:	0f b7 c0             	movzwl %ax,%eax
f010c352:	83 ec 08             	sub    $0x8,%esp
f010c355:	50                   	push   %eax
f010c356:	68 59 74 13 f0       	push   $0xf0137459
f010c35b:	e8 ae 49 ff ff       	call   f0100d0e <cprintf>
f010c360:	83 c4 10             	add    $0x10,%esp
}
f010c363:	90                   	nop
f010c364:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c367:	c9                   	leave  
f010c368:	c3                   	ret    

f010c369 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c369:	55                   	push   %ebp
f010c36a:	89 e5                	mov    %esp,%ebp
f010c36c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c372:	8b 00                	mov    (%eax),%eax
f010c374:	83 ec 08             	sub    $0x8,%esp
f010c377:	50                   	push   %eax
f010c378:	68 6c 74 13 f0       	push   $0xf013746c
f010c37d:	e8 8c 49 ff ff       	call   f0100d0e <cprintf>
f010c382:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c385:	8b 45 08             	mov    0x8(%ebp),%eax
f010c388:	8b 40 04             	mov    0x4(%eax),%eax
f010c38b:	83 ec 08             	sub    $0x8,%esp
f010c38e:	50                   	push   %eax
f010c38f:	68 7b 74 13 f0       	push   $0xf013747b
f010c394:	e8 75 49 ff ff       	call   f0100d0e <cprintf>
f010c399:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c39f:	8b 40 08             	mov    0x8(%eax),%eax
f010c3a2:	83 ec 08             	sub    $0x8,%esp
f010c3a5:	50                   	push   %eax
f010c3a6:	68 8a 74 13 f0       	push   $0xf013748a
f010c3ab:	e8 5e 49 ff ff       	call   f0100d0e <cprintf>
f010c3b0:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b6:	8b 40 0c             	mov    0xc(%eax),%eax
f010c3b9:	83 ec 08             	sub    $0x8,%esp
f010c3bc:	50                   	push   %eax
f010c3bd:	68 99 74 13 f0       	push   $0xf0137499
f010c3c2:	e8 47 49 ff ff       	call   f0100d0e <cprintf>
f010c3c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3cd:	8b 40 10             	mov    0x10(%eax),%eax
f010c3d0:	83 ec 08             	sub    $0x8,%esp
f010c3d3:	50                   	push   %eax
f010c3d4:	68 a8 74 13 f0       	push   $0xf01374a8
f010c3d9:	e8 30 49 ff ff       	call   f0100d0e <cprintf>
f010c3de:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c3e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e4:	8b 40 14             	mov    0x14(%eax),%eax
f010c3e7:	83 ec 08             	sub    $0x8,%esp
f010c3ea:	50                   	push   %eax
f010c3eb:	68 b7 74 13 f0       	push   $0xf01374b7
f010c3f0:	e8 19 49 ff ff       	call   f0100d0e <cprintf>
f010c3f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fb:	8b 40 18             	mov    0x18(%eax),%eax
f010c3fe:	83 ec 08             	sub    $0x8,%esp
f010c401:	50                   	push   %eax
f010c402:	68 c6 74 13 f0       	push   $0xf01374c6
f010c407:	e8 02 49 ff ff       	call   f0100d0e <cprintf>
f010c40c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c40f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c412:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c415:	83 ec 08             	sub    $0x8,%esp
f010c418:	50                   	push   %eax
f010c419:	68 d5 74 13 f0       	push   $0xf01374d5
f010c41e:	e8 eb 48 ff ff       	call   f0100d0e <cprintf>
f010c423:	83 c4 10             	add    $0x10,%esp
}
f010c426:	90                   	nop
f010c427:	c9                   	leave  
f010c428:	c3                   	ret    

f010c429 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c429:	55                   	push   %ebp
f010c42a:	89 e5                	mov    %esp,%ebp
f010c42c:	57                   	push   %edi
f010c42d:	56                   	push   %esi
f010c42e:	53                   	push   %ebx
f010c42f:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c432:	8b 45 08             	mov    0x8(%ebp),%eax
f010c435:	8b 40 28             	mov    0x28(%eax),%eax
f010c438:	83 f8 0e             	cmp    $0xe,%eax
f010c43b:	75 29                	jne    f010c466 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c43d:	83 ec 0c             	sub    $0xc,%esp
f010c440:	6a 01                	push   $0x1
f010c442:	e8 fc 18 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010c447:	83 c4 10             	add    $0x10,%esp
f010c44a:	85 c0                	test   %eax,%eax
f010c44c:	74 05                	je     f010c453 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c44e:	e8 d9 95 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c453:	83 ec 0c             	sub    $0xc,%esp
f010c456:	ff 75 08             	pushl  0x8(%ebp)
f010c459:	e8 51 02 00 00       	call   f010c6af <fault_handler>
f010c45e:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c461:	e9 bb 00 00 00       	jmp    f010c521 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c466:	8b 45 08             	mov    0x8(%ebp),%eax
f010c469:	8b 40 28             	mov    0x28(%eax),%eax
f010c46c:	83 f8 30             	cmp    $0x30,%eax
f010c46f:	75 42                	jne    f010c4b3 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c471:	8b 45 08             	mov    0x8(%ebp),%eax
f010c474:	8b 78 04             	mov    0x4(%eax),%edi
f010c477:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47a:	8b 30                	mov    (%eax),%esi
f010c47c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47f:	8b 58 10             	mov    0x10(%eax),%ebx
f010c482:	8b 45 08             	mov    0x8(%ebp),%eax
f010c485:	8b 48 18             	mov    0x18(%eax),%ecx
f010c488:	8b 45 08             	mov    0x8(%ebp),%eax
f010c48b:	8b 50 14             	mov    0x14(%eax),%edx
f010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c491:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c494:	83 ec 08             	sub    $0x8,%esp
f010c497:	57                   	push   %edi
f010c498:	56                   	push   %esi
f010c499:	53                   	push   %ebx
f010c49a:	51                   	push   %ecx
f010c49b:	52                   	push   %edx
f010c49c:	50                   	push   %eax
f010c49d:	e8 ec 0f 00 00       	call   f010d48e <syscall>
f010c4a2:	83 c4 20             	add    $0x20,%esp
f010c4a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c4ae:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4b1:	eb 6e                	jmp    f010c521 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b6:	8b 40 28             	mov    0x28(%eax),%eax
f010c4b9:	83 f8 08             	cmp    $0x8,%eax
f010c4bc:	75 17                	jne    f010c4d5 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c4be:	83 ec 04             	sub    $0x4,%esp
f010c4c1:	68 e4 74 13 f0       	push   $0xf01374e4
f010c4c6:	68 e7 00 00 00       	push   $0xe7
f010c4cb:	68 f3 74 13 f0       	push   $0xf01374f3
f010c4d0:	e8 30 3d ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c4d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4d8:	8b 40 28             	mov    0x28(%eax),%eax
f010c4db:	83 f8 20             	cmp    $0x20,%eax
f010c4de:	75 07                	jne    f010c4e7 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c4e0:	e8 26 95 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4e5:	eb 3a                	jmp    f010c521 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ea:	8b 40 34             	mov    0x34(%eax),%eax
f010c4ed:	66 83 f8 08          	cmp    $0x8,%ax
f010c4f1:	75 17                	jne    f010c50a <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c4f3:	83 ec 04             	sub    $0x4,%esp
f010c4f6:	68 04 75 13 f0       	push   $0xf0137504
f010c4fb:	68 f4 00 00 00       	push   $0xf4
f010c500:	68 f3 74 13 f0       	push   $0xf01374f3
f010c505:	e8 fb 3c ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c50a:	83 ec 04             	sub    $0x4,%esp
f010c50d:	68 20 75 13 f0       	push   $0xf0137520
f010c512:	68 f8 00 00 00       	push   $0xf8
f010c517:	68 f3 74 13 f0       	push   $0xf01374f3
f010c51c:	e8 e4 3c ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c521:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c524:	5b                   	pop    %ebx
f010c525:	5e                   	pop    %esi
f010c526:	5f                   	pop    %edi
f010c527:	5d                   	pop    %ebp
f010c528:	c3                   	ret    

f010c529 <trap>:

void trap(struct Trapframe *tf)
{
f010c529:	55                   	push   %ebp
f010c52a:	89 e5                	mov    %esp,%ebp
f010c52c:	57                   	push   %edi
f010c52d:	56                   	push   %esi
f010c52e:	53                   	push   %ebx
f010c52f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c532:	e8 5d 7c ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c537:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c541:	8b 40 34             	mov    0x34(%eax),%eax
f010c544:	0f b7 c0             	movzwl %ax,%eax
f010c547:	83 e0 03             	and    $0x3,%eax
f010c54a:	83 f8 03             	cmp    $0x3,%eax
f010c54d:	75 49                	jne    f010c598 <trap+0x6f>
		assert(curenv);
f010c54f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c554:	85 c0                	test   %eax,%eax
f010c556:	75 19                	jne    f010c571 <trap+0x48>
f010c558:	68 3f 75 13 f0       	push   $0xf013753f
f010c55d:	68 46 75 13 f0       	push   $0xf0137546
f010c562:	68 06 01 00 00       	push   $0x106
f010c567:	68 f3 74 13 f0       	push   $0xf01374f3
f010c56c:	e8 94 3c ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c571:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c577:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57a:	89 c3                	mov    %eax,%ebx
f010c57c:	b8 11 00 00 00       	mov    $0x11,%eax
f010c581:	89 d7                	mov    %edx,%edi
f010c583:	89 de                	mov    %ebx,%esi
f010c585:	89 c1                	mov    %eax,%ecx
f010c587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c589:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c58e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c591:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c598:	8b 45 08             	mov    0x8(%ebp),%eax
f010c59b:	8b 40 28             	mov    0x28(%eax),%eax
f010c59e:	83 f8 20             	cmp    $0x20,%eax
f010c5a1:	75 40                	jne    f010c5e3 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c5a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5a7:	0f 84 a6 00 00 00    	je     f010c653 <trap+0x12a>
		{
			assert(curenv);
f010c5ad:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c5b2:	85 c0                	test   %eax,%eax
f010c5b4:	75 19                	jne    f010c5cf <trap+0xa6>
f010c5b6:	68 3f 75 13 f0       	push   $0xf013753f
f010c5bb:	68 46 75 13 f0       	push   $0xf0137546
f010c5c0:	68 12 01 00 00       	push   $0x112
f010c5c5:	68 f3 74 13 f0       	push   $0xf01374f3
f010c5ca:	e8 36 3c ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c5cf:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c5d4:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c5da:	42                   	inc    %edx
f010c5db:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c5e1:	eb 70                	jmp    f010c653 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c5e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e6:	8b 40 28             	mov    0x28(%eax),%eax
f010c5e9:	83 f8 0e             	cmp    $0xe,%eax
f010c5ec:	75 65                	jne    f010c653 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c5ee:	a0 68 25 78 f0       	mov    0xf0782568,%al
f010c5f3:	84 c0                	test   %al,%al
f010c5f5:	74 5c                	je     f010c653 <trap+0x12a>
			if (userTrap){
f010c5f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5fb:	74 2c                	je     f010c629 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c5fd:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c602:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c608:	8b 52 30             	mov    0x30(%edx),%edx
f010c60b:	89 d1                	mov    %edx,%ecx
f010c60d:	8a 15 68 25 78 f0    	mov    0xf0782568,%dl
f010c613:	0f b6 d2             	movzbl %dl,%edx
f010c616:	01 ca                	add    %ecx,%edx
f010c618:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c61b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c620:	83 ec 0c             	sub    $0xc,%esp
f010c623:	50                   	push   %eax
f010c624:	e8 43 d4 ff ff       	call   f0109a6c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c629:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62c:	8b 40 30             	mov    0x30(%eax),%eax
f010c62f:	89 c2                	mov    %eax,%edx
f010c631:	a0 68 25 78 f0       	mov    0xf0782568,%al
f010c636:	0f b6 c0             	movzbl %al,%eax
f010c639:	01 d0                	add    %edx,%eax
f010c63b:	89 c2                	mov    %eax,%edx
f010c63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c640:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c643:	e8 77 7b ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c648:	83 ec 0c             	sub    $0xc,%esp
f010c64b:	ff 75 08             	pushl  0x8(%ebp)
f010c64e:	e8 7c d5 ff ff       	call   f0109bcf <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c653:	83 ec 0c             	sub    $0xc,%esp
f010c656:	ff 75 08             	pushl  0x8(%ebp)
f010c659:	e8 cb fd ff ff       	call   f010c429 <trap_dispatch>
f010c65e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c661:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c665:	74 3d                	je     f010c6a4 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c667:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c66c:	85 c0                	test   %eax,%eax
f010c66e:	74 0d                	je     f010c67d <trap+0x154>
f010c670:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c675:	8b 40 54             	mov    0x54(%eax),%eax
f010c678:	83 f8 02             	cmp    $0x2,%eax
f010c67b:	74 19                	je     f010c696 <trap+0x16d>
f010c67d:	68 5c 75 13 f0       	push   $0xf013755c
f010c682:	68 46 75 13 f0       	push   $0xf0137546
f010c687:	68 27 01 00 00       	push   $0x127
f010c68c:	68 f3 74 13 f0       	push   $0xf01374f3
f010c691:	e8 6f 3b ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c696:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c69b:	83 ec 0c             	sub    $0xc,%esp
f010c69e:	50                   	push   %eax
f010c69f:	e8 c8 d3 ff ff       	call   f0109a6c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c6a4:	83 ec 0c             	sub    $0xc,%esp
f010c6a7:	ff 75 08             	pushl  0x8(%ebp)
f010c6aa:	e8 20 d5 ff ff       	call   f0109bcf <env_pop_tf>

f010c6af <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
f010c6b2:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c6b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bf:	8b 40 34             	mov    0x34(%eax),%eax
f010c6c2:	0f b7 c0             	movzwl %ax,%eax
f010c6c5:	83 e0 03             	and    $0x3,%eax
f010c6c8:	83 f8 03             	cmp    $0x3,%eax
f010c6cb:	75 07                	jne    f010c6d4 <fault_handler+0x25>
		userTrap = 1;
f010c6cd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c6d4:	0f 20 d0             	mov    %cr2,%eax
f010c6d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c6da:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c6dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c6e0:	a1 e0 24 78 f0       	mov    0xf07824e0,%eax
f010c6e5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c6e8:	75 2b                	jne    f010c715 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c6ea:	a0 e4 24 78 f0       	mov    0xf07824e4,%al
f010c6ef:	40                   	inc    %eax
f010c6f0:	a2 e4 24 78 f0       	mov    %al,0xf07824e4
		if (num_repeated_fault == 3)
f010c6f5:	a0 e4 24 78 f0       	mov    0xf07824e4,%al
f010c6fa:	3c 03                	cmp    $0x3,%al
f010c6fc:	75 1e                	jne    f010c71c <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c6fe:	ff 75 ec             	pushl  -0x14(%ebp)
f010c701:	68 8c 75 13 f0       	push   $0xf013758c
f010c706:	68 47 01 00 00       	push   $0x147
f010c70b:	68 f3 74 13 f0       	push   $0xf01374f3
f010c710:	e8 f0 3a ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c715:	c6 05 e4 24 78 f0 00 	movb   $0x0,0xf07824e4
	}
	last_fault_va = fault_va ;
f010c71c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c71f:	a3 e0 24 78 f0       	mov    %eax,0xf07824e0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c728:	75 29                	jne    f010c753 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c72a:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c731:	77 40                	ja     f010c773 <fault_handler+0xc4>
f010c733:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c73a:	76 37                	jbe    f010c773 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c73c:	83 ec 04             	sub    $0x4,%esp
f010c73f:	68 d8 75 13 f0       	push   $0xf01375d8
f010c744:	68 53 01 00 00       	push   $0x153
f010c749:	68 f3 74 13 f0       	push   $0xf01374f3
f010c74e:	e8 b2 3a ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c753:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c75a:	76 17                	jbe    f010c773 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c75c:	83 ec 04             	sub    $0x4,%esp
f010c75f:	68 fc 75 13 f0       	push   $0xf01375fc
f010c764:	68 59 01 00 00       	push   $0x159
f010c769:	68 f3 74 13 f0       	push   $0xf01374f3
f010c76e:	e8 92 3a ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c773:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c778:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c77b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c77e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c781:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c784:	c1 ea 16             	shr    $0x16,%edx
f010c787:	c1 e2 02             	shl    $0x2,%edx
f010c78a:	01 d0                	add    %edx,%eax
f010c78c:	8b 00                	mov    (%eax),%eax
f010c78e:	83 e0 01             	and    $0x1,%eax
f010c791:	85 c0                	test   %eax,%eax
f010c793:	75 28                	jne    f010c7bd <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c795:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c798:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c79e:	8d 50 01             	lea    0x1(%eax),%edx
f010c7a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7a4:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c7aa:	83 ec 08             	sub    $0x8,%esp
f010c7ad:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7b0:	ff 75 e8             	pushl  -0x18(%ebp)
f010c7b3:	e8 70 16 00 00       	call   f010de28 <table_fault_handler>
f010c7b8:	83 c4 10             	add    $0x10,%esp
f010c7bb:	eb 7b                	jmp    f010c838 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c7bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7c3:	83 ec 08             	sub    $0x8,%esp
f010c7c6:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7c9:	50                   	push   %eax
f010c7ca:	e8 92 b4 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010c7cf:	83 c4 10             	add    $0x10,%esp
f010c7d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c7d8:	83 e0 01             	and    $0x1,%eax
f010c7db:	85 c0                	test   %eax,%eax
f010c7dd:	74 17                	je     f010c7f6 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c7df:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7e2:	68 20 76 13 f0       	push   $0xf0137620
f010c7e7:	68 6e 01 00 00       	push   $0x16e
f010c7ec:	68 f3 74 13 f0       	push   $0xf01374f3
f010c7f1:	e8 0f 3a ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c7f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7f9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c7ff:	8d 50 01             	lea    0x1(%eax),%edx
f010c802:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c805:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c80b:	e8 f6 15 00 00       	call   f010de06 <isBufferingEnabled>
f010c810:	84 c0                	test   %al,%al
f010c812:	74 13                	je     f010c827 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c814:	83 ec 08             	sub    $0x8,%esp
f010c817:	ff 75 ec             	pushl  -0x14(%ebp)
f010c81a:	ff 75 e8             	pushl  -0x18(%ebp)
f010c81d:	e8 8c 18 00 00       	call   f010e0ae <__page_fault_handler_with_buffering>
f010c822:	83 c4 10             	add    $0x10,%esp
f010c825:	eb 11                	jmp    f010c838 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c827:	83 ec 08             	sub    $0x8,%esp
f010c82a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c82d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c830:	e8 14 16 00 00       	call   f010de49 <page_fault_handler>
f010c835:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c838:	0f 20 d8             	mov    %cr3,%eax
f010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c841:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c844:	90                   	nop
f010c845:	c9                   	leave  
f010c846:	c3                   	ret    
f010c847:	90                   	nop

f010c848 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c848:	6a 0e                	push   $0xe
f010c84a:	e9 ed 00 00 00       	jmp    f010c93c <_alltraps>
f010c84f:	90                   	nop

f010c850 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c850:	6a 00                	push   $0x0
f010c852:	6a 30                	push   $0x30
f010c854:	e9 e3 00 00 00       	jmp    f010c93c <_alltraps>
f010c859:	90                   	nop

f010c85a <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c85a:	6a 08                	push   $0x8
f010c85c:	e9 db 00 00 00       	jmp    f010c93c <_alltraps>
f010c861:	90                   	nop

f010c862 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c862:	6a 00                	push   $0x0
f010c864:	6a 00                	push   $0x0
f010c866:	e9 d1 00 00 00       	jmp    f010c93c <_alltraps>
f010c86b:	90                   	nop

f010c86c <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c86c:	6a 00                	push   $0x0
f010c86e:	6a 01                	push   $0x1
f010c870:	e9 c7 00 00 00       	jmp    f010c93c <_alltraps>
f010c875:	90                   	nop

f010c876 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c876:	6a 00                	push   $0x0
f010c878:	6a 02                	push   $0x2
f010c87a:	e9 bd 00 00 00       	jmp    f010c93c <_alltraps>
f010c87f:	90                   	nop

f010c880 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c880:	6a 00                	push   $0x0
f010c882:	6a 03                	push   $0x3
f010c884:	e9 b3 00 00 00       	jmp    f010c93c <_alltraps>
f010c889:	90                   	nop

f010c88a <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c88a:	6a 00                	push   $0x0
f010c88c:	6a 04                	push   $0x4
f010c88e:	e9 a9 00 00 00       	jmp    f010c93c <_alltraps>
f010c893:	90                   	nop

f010c894 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c894:	6a 00                	push   $0x0
f010c896:	6a 05                	push   $0x5
f010c898:	e9 9f 00 00 00       	jmp    f010c93c <_alltraps>
f010c89d:	90                   	nop

f010c89e <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c89e:	6a 00                	push   $0x0
f010c8a0:	6a 06                	push   $0x6
f010c8a2:	e9 95 00 00 00       	jmp    f010c93c <_alltraps>
f010c8a7:	90                   	nop

f010c8a8 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c8a8:	6a 00                	push   $0x0
f010c8aa:	6a 07                	push   $0x7
f010c8ac:	e9 8b 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b1:	90                   	nop

f010c8b2 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c8b2:	6a 0a                	push   $0xa
f010c8b4:	e9 83 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b9:	90                   	nop

f010c8ba <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c8ba:	6a 0b                	push   $0xb
f010c8bc:	eb 7e                	jmp    f010c93c <_alltraps>

f010c8be <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c8be:	6a 0c                	push   $0xc
f010c8c0:	eb 7a                	jmp    f010c93c <_alltraps>

f010c8c2 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c8c2:	6a 0d                	push   $0xd
f010c8c4:	eb 76                	jmp    f010c93c <_alltraps>

f010c8c6 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c8c6:	6a 00                	push   $0x0
f010c8c8:	6a 10                	push   $0x10
f010c8ca:	eb 70                	jmp    f010c93c <_alltraps>

f010c8cc <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c8cc:	6a 11                	push   $0x11
f010c8ce:	eb 6c                	jmp    f010c93c <_alltraps>

f010c8d0 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c8d0:	6a 00                	push   $0x0
f010c8d2:	6a 12                	push   $0x12
f010c8d4:	eb 66                	jmp    f010c93c <_alltraps>

f010c8d6 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c8d6:	6a 00                	push   $0x0
f010c8d8:	6a 13                	push   $0x13
f010c8da:	eb 60                	jmp    f010c93c <_alltraps>

f010c8dc <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c8dc:	6a 00                	push   $0x0
f010c8de:	6a 20                	push   $0x20
f010c8e0:	eb 5a                	jmp    f010c93c <_alltraps>

f010c8e2 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c8e2:	6a 00                	push   $0x0
f010c8e4:	6a 21                	push   $0x21
f010c8e6:	eb 54                	jmp    f010c93c <_alltraps>

f010c8e8 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c8e8:	6a 00                	push   $0x0
f010c8ea:	6a 22                	push   $0x22
f010c8ec:	eb 4e                	jmp    f010c93c <_alltraps>

f010c8ee <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c8ee:	6a 00                	push   $0x0
f010c8f0:	6a 23                	push   $0x23
f010c8f2:	eb 48                	jmp    f010c93c <_alltraps>

f010c8f4 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c8f4:	6a 00                	push   $0x0
f010c8f6:	6a 24                	push   $0x24
f010c8f8:	eb 42                	jmp    f010c93c <_alltraps>

f010c8fa <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c8fa:	6a 00                	push   $0x0
f010c8fc:	6a 25                	push   $0x25
f010c8fe:	eb 3c                	jmp    f010c93c <_alltraps>

f010c900 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c900:	6a 00                	push   $0x0
f010c902:	6a 26                	push   $0x26
f010c904:	eb 36                	jmp    f010c93c <_alltraps>

f010c906 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c906:	6a 00                	push   $0x0
f010c908:	6a 27                	push   $0x27
f010c90a:	eb 30                	jmp    f010c93c <_alltraps>

f010c90c <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c90c:	6a 00                	push   $0x0
f010c90e:	6a 28                	push   $0x28
f010c910:	eb 2a                	jmp    f010c93c <_alltraps>

f010c912 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c912:	6a 00                	push   $0x0
f010c914:	6a 29                	push   $0x29
f010c916:	eb 24                	jmp    f010c93c <_alltraps>

f010c918 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c918:	6a 00                	push   $0x0
f010c91a:	6a 2a                	push   $0x2a
f010c91c:	eb 1e                	jmp    f010c93c <_alltraps>

f010c91e <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c91e:	6a 00                	push   $0x0
f010c920:	6a 2b                	push   $0x2b
f010c922:	eb 18                	jmp    f010c93c <_alltraps>

f010c924 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c924:	6a 00                	push   $0x0
f010c926:	6a 2c                	push   $0x2c
f010c928:	eb 12                	jmp    f010c93c <_alltraps>

f010c92a <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c92a:	6a 00                	push   $0x0
f010c92c:	6a 2d                	push   $0x2d
f010c92e:	eb 0c                	jmp    f010c93c <_alltraps>

f010c930 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c930:	6a 00                	push   $0x0
f010c932:	6a 2e                	push   $0x2e
f010c934:	eb 06                	jmp    f010c93c <_alltraps>

f010c936 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c936:	6a 00                	push   $0x0
f010c938:	6a 2f                	push   $0x2f
f010c93a:	eb 00                	jmp    f010c93c <_alltraps>

f010c93c <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c93c:	1e                   	push   %ds
push %es
f010c93d:	06                   	push   %es
pushal
f010c93e:	60                   	pusha  

mov $(GD_KD), %ax
f010c93f:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c943:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c945:	8e c0                	mov    %eax,%es

push %esp
f010c947:	54                   	push   %esp

call trap
f010c948:	e8 dc fb ff ff       	call   f010c529 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c94d:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c94e:	61                   	popa   
pop %es
f010c94f:	07                   	pop    %es
pop %ds
f010c950:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c951:	83 c4 08             	add    $0x8,%esp

iret
f010c954:	cf                   	iret   

f010c955 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c955:	55                   	push   %ebp
f010c956:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c958:	8b 45 08             	mov    0x8(%ebp),%eax
f010c95b:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f010c961:	29 d0                	sub    %edx,%eax
f010c963:	c1 f8 03             	sar    $0x3,%eax
f010c966:	89 c2                	mov    %eax,%edx
f010c968:	89 d0                	mov    %edx,%eax
f010c96a:	c1 e0 02             	shl    $0x2,%eax
f010c96d:	01 d0                	add    %edx,%eax
f010c96f:	c1 e0 02             	shl    $0x2,%eax
f010c972:	01 d0                	add    %edx,%eax
f010c974:	c1 e0 02             	shl    $0x2,%eax
f010c977:	01 d0                	add    %edx,%eax
f010c979:	89 c1                	mov    %eax,%ecx
f010c97b:	c1 e1 08             	shl    $0x8,%ecx
f010c97e:	01 c8                	add    %ecx,%eax
f010c980:	89 c1                	mov    %eax,%ecx
f010c982:	c1 e1 10             	shl    $0x10,%ecx
f010c985:	01 c8                	add    %ecx,%eax
f010c987:	01 c0                	add    %eax,%eax
f010c989:	01 d0                	add    %edx,%eax
}
f010c98b:	5d                   	pop    %ebp
f010c98c:	c3                   	ret    

f010c98d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c98d:	55                   	push   %ebp
f010c98e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c990:	ff 75 08             	pushl  0x8(%ebp)
f010c993:	e8 bd ff ff ff       	call   f010c955 <to_frame_number>
f010c998:	83 c4 04             	add    $0x4,%esp
f010c99b:	c1 e0 0c             	shl    $0xc,%eax
}
f010c99e:	c9                   	leave  
f010c99f:	c3                   	ret    

f010c9a0 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c9a0:	55                   	push   %ebp
f010c9a1:	89 e5                	mov    %esp,%ebp
f010c9a3:	83 ec 18             	sub    $0x18,%esp
f010c9a6:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9a9:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c9ac:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c9b0:	74 26                	je     f010c9d8 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c9b2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c9c0:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c9c6:	83 ec 04             	sub    $0x4,%esp
f010c9c9:	50                   	push   %eax
f010c9ca:	52                   	push   %edx
f010c9cb:	68 10 78 13 f0       	push   $0xf0137810
f010c9d0:	e8 39 43 ff ff       	call   f0100d0e <cprintf>
f010c9d5:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c9d8:	83 ec 04             	sub    $0x4,%esp
f010c9db:	ff 75 08             	pushl  0x8(%ebp)
f010c9de:	ff 75 0c             	pushl  0xc(%ebp)
f010c9e1:	68 19 78 13 f0       	push   $0xf0137819
f010c9e6:	e8 23 43 ff ff       	call   f0100d0e <cprintf>
f010c9eb:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c9ee:	90                   	nop
f010c9ef:	c9                   	leave  
f010c9f0:	c3                   	ret    

f010c9f1 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c9f1:	55                   	push   %ebp
f010c9f2:	89 e5                	mov    %esp,%ebp
f010c9f4:	83 ec 18             	sub    $0x18,%esp
f010c9f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fa:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c9fd:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ca01:	83 ec 08             	sub    $0x8,%esp
f010ca04:	50                   	push   %eax
f010ca05:	68 1e 78 13 f0       	push   $0xf013781e
f010ca0a:	e8 ff 42 ff ff       	call   f0100d0e <cprintf>
f010ca0f:	83 c4 10             	add    $0x10,%esp
}
f010ca12:	90                   	nop
f010ca13:	c9                   	leave  
f010ca14:	c3                   	ret    

f010ca15 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ca15:	55                   	push   %ebp
f010ca16:	89 e5                	mov    %esp,%ebp
f010ca18:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ca1b:	e8 28 41 ff ff       	call   f0100b48 <cons_getc2>
f010ca20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ca23:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca26:	c9                   	leave  
f010ca27:	c3                   	ret    

f010ca28 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ca28:	55                   	push   %ebp
f010ca29:	89 e5                	mov    %esp,%ebp
f010ca2b:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ca2e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ca33:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ca36:	83 ec 0c             	sub    $0xc,%esp
f010ca39:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ca3c:	50                   	push   %eax
f010ca3d:	e8 b0 9e ff ff       	call   f01068f2 <allocate_frame>
f010ca42:	83 c4 10             	add    $0x10,%esp
f010ca45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ca48:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ca4c:	75 08                	jne    f010ca56 <__sys_allocate_page+0x2e>
		return r ;
f010ca4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca51:	e9 e9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010ca56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca59:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ca5e:	77 0c                	ja     f010ca6c <__sys_allocate_page+0x44>
f010ca60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca63:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ca68:	85 c0                	test   %eax,%eax
f010ca6a:	74 0a                	je     f010ca76 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ca6c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca71:	e9 c9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ca76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca79:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ca7e:	83 f8 04             	cmp    $0x4,%eax
f010ca81:	74 0a                	je     f010ca8d <__sys_allocate_page+0x65>
		return E_INVAL;
f010ca83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca88:	e9 b2 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010ca8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca90:	83 ec 0c             	sub    $0xc,%esp
f010ca93:	50                   	push   %eax
f010ca94:	e8 f4 fe ff ff       	call   f010c98d <to_physical_address>
f010ca99:	83 c4 10             	add    $0x10,%esp
f010ca9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010ca9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010caa5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010caa8:	6a 02                	push   $0x2
f010caaa:	68 00 00 80 ef       	push   $0xef800000
f010caaf:	52                   	push   %edx
f010cab0:	50                   	push   %eax
f010cab1:	e8 8b a2 ff ff       	call   f0106d41 <map_frame>
f010cab6:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cab9:	83 ec 04             	sub    $0x4,%esp
f010cabc:	68 00 10 00 00       	push   $0x1000
f010cac1:	6a 00                	push   $0x0
f010cac3:	68 00 00 80 ef       	push   $0xef800000
f010cac8:	e8 3b 48 02 00       	call   f0131308 <memset>
f010cacd:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cad0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cad6:	8b 40 08             	mov    0x8(%eax),%eax
f010cad9:	40                   	inc    %eax
f010cada:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cae1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cae4:	83 ec 08             	sub    $0x8,%esp
f010cae7:	68 00 00 80 ef       	push   $0xef800000
f010caec:	50                   	push   %eax
f010caed:	e8 84 a3 ff ff       	call   f0106e76 <unmap_frame>
f010caf2:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010caf5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cafb:	8b 40 08             	mov    0x8(%eax),%eax
f010cafe:	48                   	dec    %eax
f010caff:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cb03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cb06:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb0f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb12:	51                   	push   %ecx
f010cb13:	52                   	push   %edx
f010cb14:	50                   	push   %eax
f010cb15:	e8 27 a2 ff ff       	call   f0106d41 <map_frame>
f010cb1a:	83 c4 10             	add    $0x10,%esp
f010cb1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cb20:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cb24:	75 14                	jne    f010cb3a <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cb26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb29:	83 ec 0c             	sub    $0xc,%esp
f010cb2c:	50                   	push   %eax
f010cb2d:	e8 4f 9f ff ff       	call   f0106a81 <decrement_references>
f010cb32:	83 c4 10             	add    $0x10,%esp
		return r;
f010cb35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb38:	eb 05                	jmp    f010cb3f <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cb3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cb3f:	c9                   	leave  
f010cb40:	c3                   	ret    

f010cb41 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cb41:	55                   	push   %ebp
f010cb42:	89 e5                	mov    %esp,%ebp
f010cb44:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cb47:	83 ec 04             	sub    $0x4,%esp
f010cb4a:	68 21 78 13 f0       	push   $0xf0137821
f010cb4f:	68 b3 00 00 00       	push   $0xb3
f010cb54:	68 3f 78 13 f0       	push   $0xf013783f
f010cb59:	e8 a7 36 ff ff       	call   f0100205 <_panic>

f010cb5e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cb5e:	55                   	push   %ebp
f010cb5f:	89 e5                	mov    %esp,%ebp
f010cb61:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cb64:	83 ec 04             	sub    $0x4,%esp
f010cb67:	68 54 78 13 f0       	push   $0xf0137854
f010cb6c:	68 c3 00 00 00       	push   $0xc3
f010cb71:	68 3f 78 13 f0       	push   $0xf013783f
f010cb76:	e8 8a 36 ff ff       	call   f0100205 <_panic>

f010cb7b <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cb7b:	55                   	push   %ebp
f010cb7c:	89 e5                	mov    %esp,%ebp
f010cb7e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cb81:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cb86:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb89:	83 ec 04             	sub    $0x4,%esp
f010cb8c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8f:	ff 75 08             	pushl  0x8(%ebp)
f010cb92:	50                   	push   %eax
f010cb93:	e8 a8 c1 ff ff       	call   f0108d40 <calculate_required_frames>
f010cb98:	83 c4 10             	add    $0x10,%esp
}
f010cb9b:	c9                   	leave  
f010cb9c:	c3                   	ret    

f010cb9d <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cb9d:	55                   	push   %ebp
f010cb9e:	89 e5                	mov    %esp,%ebp
f010cba0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cba3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cba6:	83 ec 0c             	sub    $0xc,%esp
f010cba9:	50                   	push   %eax
f010cbaa:	e8 2c a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbaf:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cbb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbb8:	01 d0                	add    %edx,%eax
}
f010cbba:	c9                   	leave  
f010cbbb:	c3                   	ret    

f010cbbc <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cbbc:	55                   	push   %ebp
f010cbbd:	89 e5                	mov    %esp,%ebp
f010cbbf:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbc2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbc5:	83 ec 0c             	sub    $0xc,%esp
f010cbc8:	50                   	push   %eax
f010cbc9:	e8 0d a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbce:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cbd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cbd4:	c9                   	leave  
f010cbd5:	c3                   	ret    

f010cbd6 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cbd6:	55                   	push   %ebp
f010cbd7:	89 e5                	mov    %esp,%ebp
f010cbd9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbdc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbdf:	83 ec 0c             	sub    $0xc,%esp
f010cbe2:	50                   	push   %eax
f010cbe3:	e8 f3 a3 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbe8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cbeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cbee:	c9                   	leave  
f010cbef:	c3                   	ret    

f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cbf0:	55                   	push   %ebp
f010cbf1:	89 e5                	mov    %esp,%ebp
f010cbf3:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cbf6:	83 ec 0c             	sub    $0xc,%esp
f010cbf9:	ff 75 08             	pushl  0x8(%ebp)
f010cbfc:	e8 24 34 02 00       	call   f0130025 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cc01:	83 c4 10             	add    $0x10,%esp
}
f010cc04:	c9                   	leave  
f010cc05:	c3                   	ret    

f010cc06 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cc06:	55                   	push   %ebp
f010cc07:	89 e5                	mov    %esp,%ebp
f010cc09:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cc0c:	e8 6c 33 02 00       	call   f012ff7d <scarce_memory>
}
f010cc11:	90                   	nop
f010cc12:	c9                   	leave  
f010cc13:	c3                   	ret    

f010cc14 <sys_clearFFL>:

void sys_clearFFL()
{
f010cc14:	55                   	push   %ebp
f010cc15:	89 e5                	mov    %esp,%ebp
f010cc17:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cc1a:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f010cc1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cc22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc29:	eb 12                	jmp    f010cc3d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cc2b:	83 ec 0c             	sub    $0xc,%esp
f010cc2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cc31:	50                   	push   %eax
f010cc32:	e8 bb 9c ff ff       	call   f01068f2 <allocate_frame>
f010cc37:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc3a:	ff 45 f4             	incl   -0xc(%ebp)
f010cc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cc43:	7c e6                	jl     f010cc2b <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cc45:	90                   	nop
f010cc46:	c9                   	leave  
f010cc47:	c3                   	ret    

f010cc48 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cc48:	55                   	push   %ebp
f010cc49:	89 e5                	mov    %esp,%ebp
f010cc4b:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cc4e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc53:	83 ec 0c             	sub    $0xc,%esp
f010cc56:	50                   	push   %eax
f010cc57:	e8 cc 70 ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cc5c:	83 c4 10             	add    $0x10,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cc67:	e8 9a 11 00 00       	call   f010de06 <isBufferingEnabled>
f010cc6c:	84 c0                	test   %al,%al
f010cc6e:	74 19                	je     f010cc89 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cc70:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc75:	83 ec 04             	sub    $0x4,%esp
f010cc78:	ff 75 0c             	pushl  0xc(%ebp)
f010cc7b:	ff 75 08             	pushl  0x8(%ebp)
f010cc7e:	50                   	push   %eax
f010cc7f:	e8 a5 c1 ff ff       	call   f0108e29 <__free_user_mem_with_buffering>
f010cc84:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cc87:	eb 18                	jmp    f010cca1 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cc89:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc8e:	83 ec 04             	sub    $0x4,%esp
f010cc91:	ff 75 0c             	pushl  0xc(%ebp)
f010cc94:	ff 75 08             	pushl  0x8(%ebp)
f010cc97:	50                   	push   %eax
f010cc98:	e8 6f c1 ff ff       	call   f0108e0c <free_user_mem>
f010cc9d:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cca0:	90                   	nop
}
f010cca1:	c9                   	leave  
f010cca2:	c3                   	ret    

f010cca3 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cca3:	55                   	push   %ebp
f010cca4:	89 e5                	mov    %esp,%ebp
f010cca6:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cca9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccae:	83 ec 04             	sub    $0x4,%esp
f010ccb1:	ff 75 0c             	pushl  0xc(%ebp)
f010ccb4:	ff 75 08             	pushl  0x8(%ebp)
f010ccb7:	50                   	push   %eax
f010ccb8:	e8 32 c1 ff ff       	call   f0108def <allocate_user_mem>
f010ccbd:	83 c4 10             	add    $0x10,%esp
	return;
f010ccc0:	90                   	nop
}
f010ccc1:	c9                   	leave  
f010ccc2:	c3                   	ret    

f010ccc3 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010ccc9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccd1:	ff 75 10             	pushl  0x10(%ebp)
f010ccd4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccd7:	ff 75 08             	pushl  0x8(%ebp)
f010ccda:	50                   	push   %eax
f010ccdb:	e8 45 be ff ff       	call   f0108b25 <allocate_chunk>
f010cce0:	83 c4 10             	add    $0x10,%esp
	return;
f010cce3:	90                   	nop
}
f010cce4:	c9                   	leave  
f010cce5:	c3                   	ret    

f010cce6 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cce6:	55                   	push   %ebp
f010cce7:	89 e5                	mov    %esp,%ebp
f010cce9:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ccec:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccf1:	ff 75 10             	pushl  0x10(%ebp)
f010ccf4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccf7:	ff 75 08             	pushl  0x8(%ebp)
f010ccfa:	50                   	push   %eax
f010ccfb:	e8 46 c1 ff ff       	call   f0108e46 <move_user_mem>
f010cd00:	83 c4 10             	add    $0x10,%esp
	return;
f010cd03:	90                   	nop
}
f010cd04:	c9                   	leave  
f010cd05:	c3                   	ret    

f010cd06 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cd06:	55                   	push   %ebp
f010cd07:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cd09:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
}
f010cd0e:	5d                   	pop    %ebp
f010cd0f:	c3                   	ret    

f010cd10 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cd10:	55                   	push   %ebp
f010cd11:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cd13:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd16:	a3 f0 25 78 f0       	mov    %eax,0xf07825f0
}
f010cd1b:	90                   	nop
f010cd1c:	5d                   	pop    %ebp
f010cd1d:	c3                   	ret    

f010cd1e <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cd1e:	55                   	push   %ebp
f010cd1f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cd21:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd26:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010cd2c:	8b 52 38             	mov    0x38(%edx),%edx
f010cd2f:	80 e6 fd             	and    $0xfd,%dh
f010cd32:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd35:	90                   	nop
f010cd36:	5d                   	pop    %ebp
f010cd37:	c3                   	ret    

f010cd38 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cd38:	55                   	push   %ebp
f010cd39:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cd3b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd40:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010cd46:	8b 52 38             	mov    0x38(%edx),%edx
f010cd49:	80 ce 02             	or     $0x2,%dh
f010cd4c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd4f:	90                   	nop
f010cd50:	5d                   	pop    %ebp
f010cd51:	c3                   	ret    

f010cd52 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cd52:	55                   	push   %ebp
f010cd53:	89 e5                	mov    %esp,%ebp
f010cd55:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cd58:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd60:	83 ec 04             	sub    $0x4,%esp
f010cd63:	ff 75 0c             	pushl  0xc(%ebp)
f010cd66:	ff 75 08             	pushl  0x8(%ebp)
f010cd69:	50                   	push   %eax
f010cd6a:	e8 fe 16 00 00       	call   f010e46d <createSemaphore>
f010cd6f:	83 c4 10             	add    $0x10,%esp
}
f010cd72:	c9                   	leave  
f010cd73:	c3                   	ret    

f010cd74 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd74:	55                   	push   %ebp
f010cd75:	89 e5                	mov    %esp,%ebp
f010cd77:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cd7a:	83 ec 08             	sub    $0x8,%esp
f010cd7d:	ff 75 0c             	pushl  0xc(%ebp)
f010cd80:	ff 75 08             	pushl  0x8(%ebp)
f010cd83:	e8 02 17 00 00       	call   f010e48a <waitSemaphore>
f010cd88:	83 c4 10             	add    $0x10,%esp
}
f010cd8b:	90                   	nop
f010cd8c:	c9                   	leave  
f010cd8d:	c3                   	ret    

f010cd8e <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd8e:	55                   	push   %ebp
f010cd8f:	89 e5                	mov    %esp,%ebp
f010cd91:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cd94:	83 ec 08             	sub    $0x8,%esp
f010cd97:	ff 75 0c             	pushl  0xc(%ebp)
f010cd9a:	ff 75 08             	pushl  0x8(%ebp)
f010cd9d:	e8 05 17 00 00       	call   f010e4a7 <signalSemaphore>
f010cda2:	83 c4 10             	add    $0x10,%esp
}
f010cda5:	90                   	nop
f010cda6:	c9                   	leave  
f010cda7:	c3                   	ret    

f010cda8 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cda8:	55                   	push   %ebp
f010cda9:	89 e5                	mov    %esp,%ebp
f010cdab:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cdae:	83 ec 08             	sub    $0x8,%esp
f010cdb1:	ff 75 0c             	pushl  0xc(%ebp)
f010cdb4:	ff 75 08             	pushl  0x8(%ebp)
f010cdb7:	e8 29 15 00 00       	call   f010e2e5 <get_semaphore_object_ID>
f010cdbc:	83 c4 10             	add    $0x10,%esp
f010cdbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cdc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cdc6:	78 0c                	js     f010cdd4 <sys_getSemaphoreValue+0x2c>
f010cdc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdcb:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010cdd0:	39 c2                	cmp    %eax,%edx
f010cdd2:	72 19                	jb     f010cded <sys_getSemaphoreValue+0x45>
f010cdd4:	68 74 78 13 f0       	push   $0xf0137874
f010cdd9:	68 99 78 13 f0       	push   $0xf0137899
f010cdde:	68 4a 01 00 00       	push   $0x14a
f010cde3:	68 3f 78 13 f0       	push   $0xf013783f
f010cde8:	e8 18 34 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010cded:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010cdf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdf6:	89 d0                	mov    %edx,%eax
f010cdf8:	c1 e0 02             	shl    $0x2,%eax
f010cdfb:	01 d0                	add    %edx,%eax
f010cdfd:	01 c0                	add    %eax,%eax
f010cdff:	01 d0                	add    %edx,%eax
f010ce01:	01 c0                	add    %eax,%eax
f010ce03:	01 d0                	add    %edx,%eax
f010ce05:	c1 e0 02             	shl    $0x2,%eax
f010ce08:	01 c8                	add    %ecx,%eax
f010ce0a:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ce0d:	c9                   	leave  
f010ce0e:	c3                   	ret    

f010ce0f <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ce0f:	55                   	push   %ebp
f010ce10:	89 e5                	mov    %esp,%ebp
f010ce12:	83 ec 18             	sub    $0x18,%esp
f010ce15:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce18:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ce1b:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ce1f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ce24:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce27:	83 ec 0c             	sub    $0xc,%esp
f010ce2a:	ff 75 14             	pushl  0x14(%ebp)
f010ce2d:	52                   	push   %edx
f010ce2e:	ff 75 0c             	pushl  0xc(%ebp)
f010ce31:	ff 75 08             	pushl  0x8(%ebp)
f010ce34:	50                   	push   %eax
f010ce35:	e8 62 a7 ff ff       	call   f010759c <createSharedObject>
f010ce3a:	83 c4 20             	add    $0x20,%esp
}
f010ce3d:	c9                   	leave  
f010ce3e:	c3                   	ret    

f010ce3f <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ce3f:	55                   	push   %ebp
f010ce40:	89 e5                	mov    %esp,%ebp
f010ce42:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ce45:	83 ec 08             	sub    $0x8,%esp
f010ce48:	ff 75 0c             	pushl  0xc(%ebp)
f010ce4b:	ff 75 08             	pushl  0x8(%ebp)
f010ce4e:	e8 03 a7 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010ce53:	83 c4 10             	add    $0x10,%esp
}
f010ce56:	c9                   	leave  
f010ce57:	c3                   	ret    

f010ce58 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010ce58:	55                   	push   %ebp
f010ce59:	89 e5                	mov    %esp,%ebp
f010ce5b:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010ce5e:	83 ec 04             	sub    $0x4,%esp
f010ce61:	ff 75 10             	pushl  0x10(%ebp)
f010ce64:	ff 75 0c             	pushl  0xc(%ebp)
f010ce67:	ff 75 08             	pushl  0x8(%ebp)
f010ce6a:	e8 50 a7 ff ff       	call   f01075bf <getSharedObject>
f010ce6f:	83 c4 10             	add    $0x10,%esp
}
f010ce72:	c9                   	leave  
f010ce73:	c3                   	ret    

f010ce74 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ce74:	55                   	push   %ebp
f010ce75:	89 e5                	mov    %esp,%ebp
f010ce77:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ce7a:	83 ec 08             	sub    $0x8,%esp
f010ce7d:	ff 75 0c             	pushl  0xc(%ebp)
f010ce80:	ff 75 08             	pushl  0x8(%ebp)
f010ce83:	e8 54 a7 ff ff       	call   f01075dc <freeSharedObject>
f010ce88:	83 c4 10             	add    $0x10,%esp
}
f010ce8b:	c9                   	leave  
f010ce8c:	c3                   	ret    

f010ce8d <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ce8d:	55                   	push   %ebp
f010ce8e:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ce90:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
}
f010ce95:	5d                   	pop    %ebp
f010ce96:	c3                   	ret    

f010ce97 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ce97:	55                   	push   %ebp
f010ce98:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ce9a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ce9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cea2:	5d                   	pop    %ebp
f010cea3:	c3                   	ret    

f010cea4 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cea4:	55                   	push   %ebp
f010cea5:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cea7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ceac:	89 c2                	mov    %eax,%edx
f010ceae:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f010ceb3:	29 c2                	sub    %eax,%edx
f010ceb5:	89 d0                	mov    %edx,%eax
f010ceb7:	c1 f8 04             	sar    $0x4,%eax
f010ceba:	89 c2                	mov    %eax,%edx
f010cebc:	89 d0                	mov    %edx,%eax
f010cebe:	c1 e0 03             	shl    $0x3,%eax
f010cec1:	01 d0                	add    %edx,%eax
f010cec3:	01 c0                	add    %eax,%eax
f010cec5:	01 d0                	add    %edx,%eax
f010cec7:	c1 e0 03             	shl    $0x3,%eax
f010ceca:	01 d0                	add    %edx,%eax
f010cecc:	89 c1                	mov    %eax,%ecx
f010cece:	c1 e1 08             	shl    $0x8,%ecx
f010ced1:	01 c8                	add    %ecx,%eax
f010ced3:	01 c0                	add    %eax,%eax
f010ced5:	01 d0                	add    %edx,%eax
f010ced7:	01 c0                	add    %eax,%eax
f010ced9:	01 d0                	add    %edx,%eax
f010cedb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cee2:	01 d0                	add    %edx,%eax
f010cee4:	89 c2                	mov    %eax,%edx
f010cee6:	c1 e2 09             	shl    $0x9,%edx
f010cee9:	29 c2                	sub    %eax,%edx
f010ceeb:	89 d0                	mov    %edx,%eax
f010ceed:	f7 d8                	neg    %eax
}
f010ceef:	5d                   	pop    %ebp
f010cef0:	c3                   	ret    

f010cef1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cef1:	55                   	push   %ebp
f010cef2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cef4:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cef9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cefc:	5d                   	pop    %ebp
f010cefd:	c3                   	ret    

f010cefe <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cefe:	55                   	push   %ebp
f010ceff:	89 e5                	mov    %esp,%ebp
f010cf01:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cf04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cf08:	75 0a                	jne    f010cf14 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cf0a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cf12:	eb 22                	jmp    f010cf36 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cf14:	83 ec 04             	sub    $0x4,%esp
f010cf17:	6a 00                	push   $0x0
f010cf19:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cf1c:	50                   	push   %eax
f010cf1d:	ff 75 08             	pushl  0x8(%ebp)
f010cf20:	e8 e5 cb ff ff       	call   f0109b0a <envid2env>
f010cf25:	83 c4 10             	add    $0x10,%esp
f010cf28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf2f:	79 05                	jns    f010cf36 <sys_destroy_env+0x38>
	{
		return r;
f010cf31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf34:	eb 5e                	jmp    f010cf94 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cf36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf39:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf3e:	39 c2                	cmp    %eax,%edx
f010cf40:	75 1b                	jne    f010cf5d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cf42:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf47:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf4a:	83 ec 08             	sub    $0x8,%esp
f010cf4d:	50                   	push   %eax
f010cf4e:	68 ae 78 13 f0       	push   $0xf01378ae
f010cf53:	e8 b6 3d ff ff       	call   f0100d0e <cprintf>
f010cf58:	83 c4 10             	add    $0x10,%esp
f010cf5b:	eb 20                	jmp    f010cf7d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cf5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf60:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cf63:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf68:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf6b:	83 ec 04             	sub    $0x4,%esp
f010cf6e:	52                   	push   %edx
f010cf6f:	50                   	push   %eax
f010cf70:	68 c9 78 13 f0       	push   $0xf01378c9
f010cf75:	e8 94 3d ff ff       	call   f0100d0e <cprintf>
f010cf7a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cf7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf80:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf83:	83 ec 0c             	sub    $0xc,%esp
f010cf86:	50                   	push   %eax
f010cf87:	e8 b3 86 ff ff       	call   f010563f <sched_kill_env>
f010cf8c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cf8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf94:	c9                   	leave  
f010cf95:	c3                   	ret    

f010cf96 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cf96:	55                   	push   %ebp
f010cf97:	89 e5                	mov    %esp,%ebp
f010cf99:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cf9c:	e8 4a cb ff ff       	call   f0109aeb <env_exit>
	//env_run_cmd_prmpt();
}
f010cfa1:	90                   	nop
f010cfa2:	c9                   	leave  
f010cfa3:	c3                   	ret    

f010cfa4 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cfa4:	55                   	push   %ebp
f010cfa5:	89 e5                	mov    %esp,%ebp
f010cfa7:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cfaa:	ff 75 14             	pushl  0x14(%ebp)
f010cfad:	ff 75 10             	pushl  0x10(%ebp)
f010cfb0:	ff 75 0c             	pushl  0xc(%ebp)
f010cfb3:	ff 75 08             	pushl  0x8(%ebp)
f010cfb6:	e8 a8 be ff ff       	call   f0108e63 <env_create>
f010cfbb:	83 c4 10             	add    $0x10,%esp
f010cfbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cfc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfc5:	75 07                	jne    f010cfce <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cfc7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cfcc:	eb 14                	jmp    f010cfe2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cfce:	83 ec 0c             	sub    $0xc,%esp
f010cfd1:	ff 75 f4             	pushl  -0xc(%ebp)
f010cfd4:	e8 2b 82 ff ff       	call   f0105204 <sched_new_env>
f010cfd9:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cfdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfdf:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cfe2:	c9                   	leave  
f010cfe3:	c3                   	ret    

f010cfe4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cfe4:	55                   	push   %ebp
f010cfe5:	89 e5                	mov    %esp,%ebp
f010cfe7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfed:	83 ec 0c             	sub    $0xc,%esp
f010cff0:	50                   	push   %eax
f010cff1:	e8 2b 82 ff ff       	call   f0105221 <sched_run_env>
f010cff6:	83 c4 10             	add    $0x10,%esp
}
f010cff9:	90                   	nop
f010cffa:	c9                   	leave  
f010cffb:	c3                   	ret    

f010cffc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cffc:	55                   	push   %ebp
f010cffd:	89 e5                	mov    %esp,%ebp
f010cfff:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d002:	0f 31                	rdtsc  
f010d004:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d007:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d00d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d010:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d013:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d016:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d019:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d01c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d01f:	89 01                	mov    %eax,(%ecx)
f010d021:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d024:	8b 45 08             	mov    0x8(%ebp),%eax
f010d027:	c9                   	leave  
f010d028:	c2 04 00             	ret    $0x4

f010d02b <sys_rcr2>:

uint32 sys_rcr2()
{
f010d02b:	55                   	push   %ebp
f010d02c:	89 e5                	mov    %esp,%ebp
f010d02e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d031:	0f 20 d0             	mov    %cr2,%eax
f010d034:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d037:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d03a:	90                   	nop
}
f010d03b:	c9                   	leave  
f010d03c:	c3                   	ret    

f010d03d <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d03d:	55                   	push   %ebp
f010d03e:	89 e5                	mov    %esp,%ebp
f010d040:	83 ec 04             	sub    $0x4,%esp
f010d043:	8b 45 08             	mov    0x8(%ebp),%eax
f010d046:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d049:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d04c:	a2 68 25 78 f0       	mov    %al,0xf0782568
}
f010d051:	90                   	nop
f010d052:	c9                   	leave  
f010d053:	c3                   	ret    

f010d054 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d054:	55                   	push   %ebp
f010d055:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d057:	c7 05 70 27 78 f0 00 	movl   $0x0,0xf0782770
f010d05e:	00 00 00 
}
f010d061:	90                   	nop
f010d062:	5d                   	pop    %ebp
f010d063:	c3                   	ret    

f010d064 <inctst>:
void inctst()
{
f010d064:	55                   	push   %ebp
f010d065:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d067:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d06c:	40                   	inc    %eax
f010d06d:	a3 70 27 78 f0       	mov    %eax,0xf0782770
}
f010d072:	90                   	nop
f010d073:	5d                   	pop    %ebp
f010d074:	c3                   	ret    

f010d075 <gettst>:
uint32 gettst()
{
f010d075:	55                   	push   %ebp
f010d076:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d078:	a1 70 27 78 f0       	mov    0xf0782770,%eax
}
f010d07d:	5d                   	pop    %ebp
f010d07e:	c3                   	ret    

f010d07f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d07f:	55                   	push   %ebp
f010d080:	89 e5                	mov    %esp,%ebp
f010d082:	83 ec 28             	sub    $0x28,%esp
f010d085:	8b 45 14             	mov    0x14(%ebp),%eax
f010d088:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d08b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d092:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d096:	83 f8 65             	cmp    $0x65,%eax
f010d099:	74 5d                	je     f010d0f8 <tst+0x79>
f010d09b:	83 f8 65             	cmp    $0x65,%eax
f010d09e:	7f 0a                	jg     f010d0aa <tst+0x2b>
f010d0a0:	83 f8 62             	cmp    $0x62,%eax
f010d0a3:	74 73                	je     f010d118 <tst+0x99>
f010d0a5:	e9 91 00 00 00       	jmp    f010d13b <tst+0xbc>
f010d0aa:	83 f8 67             	cmp    $0x67,%eax
f010d0ad:	74 29                	je     f010d0d8 <tst+0x59>
f010d0af:	83 f8 6c             	cmp    $0x6c,%eax
f010d0b2:	0f 85 83 00 00 00    	jne    f010d13b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0bb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0be:	73 09                	jae    f010d0c9 <tst+0x4a>
			chk = 1;
f010d0c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0c7:	eb 68                	jmp    f010d131 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d0c9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0cd:	74 62                	je     f010d131 <tst+0xb2>
			chk = 1;
f010d0cf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0d6:	eb 59                	jmp    f010d131 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0db:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0de:	76 09                	jbe    f010d0e9 <tst+0x6a>
			chk = 1;
f010d0e0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0e7:	eb 4b                	jmp    f010d134 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d0e9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0ed:	74 45                	je     f010d134 <tst+0xb5>
			chk = 1;
f010d0ef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0f6:	eb 3c                	jmp    f010d134 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0fe:	75 09                	jne    f010d109 <tst+0x8a>
			chk = 1;
f010d100:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d107:	eb 2e                	jmp    f010d137 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d109:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d10d:	74 28                	je     f010d137 <tst+0xb8>
			chk = 1;
f010d10f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d116:	eb 1f                	jmp    f010d137 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d118:	8b 45 08             	mov    0x8(%ebp),%eax
f010d11b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d11e:	72 1a                	jb     f010d13a <tst+0xbb>
f010d120:	8b 45 08             	mov    0x8(%ebp),%eax
f010d123:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d126:	77 12                	ja     f010d13a <tst+0xbb>
			chk = 1;
f010d128:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d12f:	eb 09                	jmp    f010d13a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d131:	90                   	nop
f010d132:	eb 07                	jmp    f010d13b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d134:	90                   	nop
f010d135:	eb 04                	jmp    f010d13b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d137:	90                   	nop
f010d138:	eb 01                	jmp    f010d13b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d13a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d13b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d13f:	75 17                	jne    f010d158 <tst+0xd9>
f010d141:	83 ec 04             	sub    $0x4,%esp
f010d144:	68 e1 78 13 f0       	push   $0xf01378e1
f010d149:	68 00 02 00 00       	push   $0x200
f010d14e:	68 3f 78 13 f0       	push   $0xf013783f
f010d153:	e8 ad 30 ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d158:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d15d:	40                   	inc    %eax
f010d15e:	a3 70 27 78 f0       	mov    %eax,0xf0782770
	return;
f010d163:	90                   	nop
}
f010d164:	c9                   	leave  
f010d165:	c3                   	ret    

f010d166 <chktst>:

void chktst(uint32 n)
{
f010d166:	55                   	push   %ebp
f010d167:	89 e5                	mov    %esp,%ebp
f010d169:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d16c:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d171:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d174:	75 12                	jne    f010d188 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	68 f4 78 13 f0       	push   $0xf01378f4
f010d17e:	e8 8b 3b ff ff       	call   f0100d0e <cprintf>
f010d183:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d186:	eb 17                	jmp    f010d19f <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d188:	83 ec 04             	sub    $0x4,%esp
f010d18b:	68 20 79 13 f0       	push   $0xf0137920
f010d190:	68 0a 02 00 00       	push   $0x20a
f010d195:	68 3f 78 13 f0       	push   $0xf013783f
f010d19a:	e8 66 30 ff ff       	call   f0100205 <_panic>
}
f010d19f:	c9                   	leave  
f010d1a0:	c3                   	ret    

f010d1a1 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d1a1:	55                   	push   %ebp
f010d1a2:	89 e5                	mov    %esp,%ebp
f010d1a4:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d1a7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010d1ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d1af:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d1b6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d1bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d1c1:	0f 84 a5 00 00 00    	je     f010d26c <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d1c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1d1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d1d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d1da:	eb 4a                	jmp    f010d226 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d1dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1df:	8b 00                	mov    (%eax),%eax
f010d1e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d1e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1ec:	89 c2                	mov    %eax,%edx
f010d1ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1f1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	01 c8                	add    %ecx,%eax
f010d1fd:	8b 00                	mov    (%eax),%eax
f010d1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d205:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d20a:	39 c2                	cmp    %eax,%edx
f010d20c:	74 09                	je     f010d217 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d20e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d215:	eb 3e                	jmp    f010d255 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d217:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d21a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d21d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d223:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d226:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d22a:	74 08                	je     f010d234 <sys_check_LRU_lists+0x93>
f010d22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d22f:	8b 40 10             	mov    0x10(%eax),%eax
f010d232:	eb 05                	jmp    f010d239 <sys_check_LRU_lists+0x98>
f010d234:	b8 00 00 00 00       	mov    $0x0,%eax
f010d239:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d23c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d242:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d245:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d24b:	85 c0                	test   %eax,%eax
f010d24d:	75 8d                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
f010d24f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d253:	75 87                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d258:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d25e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d261:	39 c2                	cmp    %eax,%edx
f010d263:	74 07                	je     f010d26c <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d265:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d26c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d270:	0f 84 a5 00 00 00    	je     f010d31b <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d276:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d27d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d280:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d286:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d289:	eb 4a                	jmp    f010d2d5 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d28b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d28e:	8b 00                	mov    (%eax),%eax
f010d290:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d293:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d296:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d29b:	89 c2                	mov    %eax,%edx
f010d29d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2a0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2aa:	01 c8                	add    %ecx,%eax
f010d2ac:	8b 00                	mov    (%eax),%eax
f010d2ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d2b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2b9:	39 c2                	cmp    %eax,%edx
f010d2bb:	74 09                	je     f010d2c6 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d2bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d2c4:	eb 3e                	jmp    f010d304 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d2c6:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d2c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2cc:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d2d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2d9:	74 08                	je     f010d2e3 <sys_check_LRU_lists+0x142>
f010d2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2de:	8b 40 10             	mov    0x10(%eax),%eax
f010d2e1:	eb 05                	jmp    f010d2e8 <sys_check_LRU_lists+0x147>
f010d2e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d2eb:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d2f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2f4:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2fa:	85 c0                	test   %eax,%eax
f010d2fc:	75 8d                	jne    f010d28b <sys_check_LRU_lists+0xea>
f010d2fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d302:	75 87                	jne    f010d28b <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d304:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d307:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d30d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d310:	39 c2                	cmp    %eax,%edx
f010d312:	74 07                	je     f010d31b <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d31e:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d321:	c9                   	leave  
f010d322:	c3                   	ret    

f010d323 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d323:	55                   	push   %ebp
f010d324:	89 e5                	mov    %esp,%ebp
f010d326:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d329:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010d32e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d331:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d33b:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d341:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d344:	eb 65                	jmp    f010d3ab <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d34d:	eb 3a                	jmp    f010d389 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d34f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d352:	8b 00                	mov    (%eax),%eax
f010d354:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d357:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d35a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d35f:	89 c2                	mov    %eax,%edx
f010d361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d364:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d36b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36e:	01 c8                	add    %ecx,%eax
f010d370:	8b 00                	mov    (%eax),%eax
f010d372:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d375:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d37d:	39 c2                	cmp    %eax,%edx
f010d37f:	75 05                	jne    f010d386 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d381:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d384:	eb 0b                	jmp    f010d391 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d386:	ff 45 f4             	incl   -0xc(%ebp)
f010d389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d38c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d38f:	7c be                	jl     f010d34f <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d391:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d395:	7e 08                	jle    f010d39f <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d397:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d39a:	e9 ed 00 00 00       	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3a2:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3af:	74 08                	je     f010d3b9 <sys_check_LRU_lists_free+0x96>
f010d3b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3b4:	8b 40 10             	mov    0x10(%eax),%eax
f010d3b7:	eb 05                	jmp    f010d3be <sys_check_LRU_lists_free+0x9b>
f010d3b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d3c1:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d3c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3ca:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3d0:	85 c0                	test   %eax,%eax
f010d3d2:	0f 85 6e ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
f010d3d8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3dc:	0f 85 64 ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d3e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3e5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d3eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ee:	eb 62                	jmp    f010d452 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d3f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d3f7:	eb 3a                	jmp    f010d433 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d3f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3fc:	8b 00                	mov    (%eax),%eax
f010d3fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d401:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d404:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d409:	89 c2                	mov    %eax,%edx
f010d40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d40e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d415:	8b 45 08             	mov    0x8(%ebp),%eax
f010d418:	01 c8                	add    %ecx,%eax
f010d41a:	8b 00                	mov    (%eax),%eax
f010d41c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d41f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d422:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d427:	39 c2                	cmp    %eax,%edx
f010d429:	75 05                	jne    f010d430 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d42b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d42e:	eb 0b                	jmp    f010d43b <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d430:	ff 45 f0             	incl   -0x10(%ebp)
f010d433:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d436:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d439:	7c be                	jl     f010d3f9 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d43b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d43f:	7e 05                	jle    f010d446 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d441:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d444:	eb 46                	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d446:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d449:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d44f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d452:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d456:	74 08                	je     f010d460 <sys_check_LRU_lists_free+0x13d>
f010d458:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d45b:	8b 40 10             	mov    0x10(%eax),%eax
f010d45e:	eb 05                	jmp    f010d465 <sys_check_LRU_lists_free+0x142>
f010d460:	b8 00 00 00 00       	mov    $0x0,%eax
f010d465:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d468:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d46e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d471:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d477:	85 c0                	test   %eax,%eax
f010d479:	0f 85 71 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
f010d47f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d483:	0f 85 67 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d489:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d48c:	c9                   	leave  
f010d48d:	c3                   	ret    

f010d48e <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d48e:	55                   	push   %ebp
f010d48f:	89 e5                	mov    %esp,%ebp
f010d491:	56                   	push   %esi
f010d492:	53                   	push   %ebx
f010d493:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d496:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d49a:	0f 87 0e 04 00 00    	ja     f010d8ae <syscall+0x420>
f010d4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a3:	c1 e0 02             	shl    $0x2,%eax
f010d4a6:	05 3c 79 13 f0       	add    $0xf013793c,%eax
f010d4ab:	8b 00                	mov    (%eax),%eax
f010d4ad:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d4af:	8b 45 14             	mov    0x14(%ebp),%eax
f010d4b2:	0f b6 d0             	movzbl %al,%edx
f010d4b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4b8:	83 ec 04             	sub    $0x4,%esp
f010d4bb:	52                   	push   %edx
f010d4bc:	ff 75 10             	pushl  0x10(%ebp)
f010d4bf:	50                   	push   %eax
f010d4c0:	e8 db f4 ff ff       	call   f010c9a0 <sys_cputs>
f010d4c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4cd:	e9 e1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d4d2:	e8 3e f5 ff ff       	call   f010ca15 <sys_cgetc>
f010d4d7:	e9 d7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d4dc:	83 ec 08             	sub    $0x8,%esp
f010d4df:	ff 75 10             	pushl  0x10(%ebp)
f010d4e2:	ff 75 0c             	pushl  0xc(%ebp)
f010d4e5:	e8 91 f6 ff ff       	call   f010cb7b <sys_calculate_required_frames>
f010d4ea:	83 c4 10             	add    $0x10,%esp
f010d4ed:	e9 c1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d4f2:	e8 a6 f6 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f010d4f7:	e9 b7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d4fc:	e8 bb f6 ff ff       	call   f010cbbc <sys_calculate_modified_frames>
f010d501:	e9 ad 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d506:	e8 cb f6 ff ff       	call   f010cbd6 <sys_calculate_notmod_frames>
f010d50b:	e9 a3 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d510:	e8 33 f7 ff ff       	call   f010cc48 <sys_pf_calculate_allocated_pages>
f010d515:	e9 99 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d51a:	83 ec 0c             	sub    $0xc,%esp
f010d51d:	ff 75 0c             	pushl  0xc(%ebp)
f010d520:	e8 cb f6 ff ff       	call   f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>
f010d525:	83 c4 10             	add    $0x10,%esp
f010d528:	e9 86 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d52d:	e8 d4 f6 ff ff       	call   f010cc06 <sys_scarce_memory>
		return 0;
f010d532:	b8 00 00 00 00       	mov    $0x0,%eax
f010d537:	e9 77 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d53c:	83 ec 08             	sub    $0x8,%esp
f010d53f:	ff 75 10             	pushl  0x10(%ebp)
f010d542:	ff 75 0c             	pushl  0xc(%ebp)
f010d545:	e8 17 f7 ff ff       	call   f010cc61 <sys_free_user_mem>
f010d54a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d54d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d552:	e9 5c 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d557:	8b 55 10             	mov    0x10(%ebp),%edx
f010d55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55d:	83 ec 08             	sub    $0x8,%esp
f010d560:	52                   	push   %edx
f010d561:	50                   	push   %eax
f010d562:	e8 c1 f4 ff ff       	call   f010ca28 <__sys_allocate_page>
f010d567:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d56a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d56f:	e9 3f 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d574:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d577:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d57a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d57d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d580:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d583:	83 ec 0c             	sub    $0xc,%esp
f010d586:	56                   	push   %esi
f010d587:	53                   	push   %ebx
f010d588:	51                   	push   %ecx
f010d589:	52                   	push   %edx
f010d58a:	50                   	push   %eax
f010d58b:	e8 b1 f5 ff ff       	call   f010cb41 <__sys_map_frame>
f010d590:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d593:	b8 00 00 00 00       	mov    $0x0,%eax
f010d598:	e9 16 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d59d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a3:	83 ec 08             	sub    $0x8,%esp
f010d5a6:	52                   	push   %edx
f010d5a7:	50                   	push   %eax
f010d5a8:	e8 b1 f5 ff ff       	call   f010cb5e <__sys_unmap_frame>
f010d5ad:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b5:	e9 f9 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d5ba:	83 ec 04             	sub    $0x4,%esp
f010d5bd:	ff 75 14             	pushl  0x14(%ebp)
f010d5c0:	ff 75 10             	pushl  0x10(%ebp)
f010d5c3:	ff 75 0c             	pushl  0xc(%ebp)
f010d5c6:	e8 f8 f6 ff ff       	call   f010ccc3 <sys_allocate_chunk>
f010d5cb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d3:	e9 db 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d5d8:	e8 41 f7 ff ff       	call   f010cd1e <sys_disable_interrupt>
		return 0;
f010d5dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5e2:	e9 cc 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d5e7:	e8 4c f7 ff ff       	call   f010cd38 <sys_enable_interrupt>
		return 0;
f010d5ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5f1:	e9 bd 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d5f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f9:	0f be c0             	movsbl %al,%eax
f010d5fc:	83 ec 0c             	sub    $0xc,%esp
f010d5ff:	50                   	push   %eax
f010d600:	e8 ec f3 ff ff       	call   f010c9f1 <sys_cputc>
f010d605:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d608:	b8 00 00 00 00       	mov    $0x0,%eax
f010d60d:	e9 a1 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d612:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d615:	0f be c0             	movsbl %al,%eax
f010d618:	83 ec 0c             	sub    $0xc,%esp
f010d61b:	50                   	push   %eax
f010d61c:	e8 f3 f5 ff ff       	call   f010cc14 <sys_clearFFL>
f010d621:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d624:	b8 00 00 00 00       	mov    $0x0,%eax
f010d629:	e9 85 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d62e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d631:	83 ec 08             	sub    $0x8,%esp
f010d634:	ff 75 10             	pushl  0x10(%ebp)
f010d637:	50                   	push   %eax
f010d638:	e8 15 f7 ff ff       	call   f010cd52 <sys_createSemaphore>
f010d63d:	83 c4 10             	add    $0x10,%esp
f010d640:	e9 6e 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d645:	8b 55 10             	mov    0x10(%ebp),%edx
f010d648:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d64b:	83 ec 08             	sub    $0x8,%esp
f010d64e:	52                   	push   %edx
f010d64f:	50                   	push   %eax
f010d650:	e8 1f f7 ff ff       	call   f010cd74 <sys_waitSemaphore>
f010d655:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d658:	b8 00 00 00 00       	mov    $0x0,%eax
f010d65d:	e9 51 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d662:	8b 55 10             	mov    0x10(%ebp),%edx
f010d665:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d668:	83 ec 08             	sub    $0x8,%esp
f010d66b:	52                   	push   %edx
f010d66c:	50                   	push   %eax
f010d66d:	e8 1c f7 ff ff       	call   f010cd8e <sys_signalSemaphore>
f010d672:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d675:	b8 00 00 00 00       	mov    $0x0,%eax
f010d67a:	e9 34 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d67f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d682:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d685:	83 ec 08             	sub    $0x8,%esp
f010d688:	52                   	push   %edx
f010d689:	50                   	push   %eax
f010d68a:	e8 19 f7 ff ff       	call   f010cda8 <sys_getSemaphoreValue>
f010d68f:	83 c4 10             	add    $0x10,%esp
f010d692:	e9 1c 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d697:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d69a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d69d:	0f b6 d0             	movzbl %al,%edx
f010d6a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6a3:	51                   	push   %ecx
f010d6a4:	52                   	push   %edx
f010d6a5:	ff 75 10             	pushl  0x10(%ebp)
f010d6a8:	50                   	push   %eax
f010d6a9:	e8 61 f7 ff ff       	call   f010ce0f <sys_createSharedObject>
f010d6ae:	83 c4 10             	add    $0x10,%esp
f010d6b1:	e9 fd 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d6b6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d6b9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bf:	83 ec 04             	sub    $0x4,%esp
f010d6c2:	51                   	push   %ecx
f010d6c3:	52                   	push   %edx
f010d6c4:	50                   	push   %eax
f010d6c5:	e8 8e f7 ff ff       	call   f010ce58 <sys_getSharedObject>
f010d6ca:	83 c4 10             	add    $0x10,%esp
f010d6cd:	e9 e1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d6d2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6d8:	83 ec 08             	sub    $0x8,%esp
f010d6db:	52                   	push   %edx
f010d6dc:	50                   	push   %eax
f010d6dd:	e8 92 f7 ff ff       	call   f010ce74 <sys_freeSharedObject>
f010d6e2:	83 c4 10             	add    $0x10,%esp
f010d6e5:	e9 c9 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d6ea:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6f0:	83 ec 08             	sub    $0x8,%esp
f010d6f3:	52                   	push   %edx
f010d6f4:	50                   	push   %eax
f010d6f5:	e8 45 f7 ff ff       	call   f010ce3f <sys_getSizeOfSharedObject>
f010d6fa:	83 c4 10             	add    $0x10,%esp
f010d6fd:	e9 b1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d702:	e8 86 f7 ff ff       	call   f010ce8d <sys_getMaxShares>
f010d707:	e9 a7 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d70c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d70f:	ff 75 18             	pushl  0x18(%ebp)
f010d712:	ff 75 14             	pushl  0x14(%ebp)
f010d715:	ff 75 10             	pushl  0x10(%ebp)
f010d718:	50                   	push   %eax
f010d719:	e8 86 f8 ff ff       	call   f010cfa4 <sys_create_env>
f010d71e:	83 c4 10             	add    $0x10,%esp
f010d721:	e9 8d 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d726:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d729:	83 ec 0c             	sub    $0xc,%esp
f010d72c:	50                   	push   %eax
f010d72d:	e8 b2 f8 ff ff       	call   f010cfe4 <sys_run_env>
f010d732:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d735:	b8 00 00 00 00       	mov    $0x0,%eax
f010d73a:	e9 74 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d73f:	e8 60 f7 ff ff       	call   f010cea4 <sys_getenvindex>
f010d744:	e9 6a 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d749:	e8 49 f7 ff ff       	call   f010ce97 <sys_getenvid>
f010d74e:	e9 60 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d753:	e8 99 f7 ff ff       	call   f010cef1 <sys_getparentenvid>
f010d758:	e9 56 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d75d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d760:	83 ec 0c             	sub    $0xc,%esp
f010d763:	50                   	push   %eax
f010d764:	e8 95 f7 ff ff       	call   f010cefe <sys_destroy_env>
f010d769:	83 c4 10             	add    $0x10,%esp
f010d76c:	e9 42 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d771:	e8 20 f8 ff ff       	call   f010cf96 <sys_exit_env>
		return 0;
f010d776:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77b:	e9 33 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d780:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d783:	83 ec 0c             	sub    $0xc,%esp
f010d786:	50                   	push   %eax
f010d787:	e8 70 f8 ff ff       	call   f010cffc <sys_get_virtual_time>
f010d78c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d78f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d792:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d795:	8b 45 10             	mov    0x10(%ebp),%eax
f010d798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d79b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7a9:	89 10                	mov    %edx,(%eax)
		return 0;
f010d7ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b0:	e9 fe 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d7b5:	83 ec 04             	sub    $0x4,%esp
f010d7b8:	ff 75 14             	pushl  0x14(%ebp)
f010d7bb:	ff 75 10             	pushl  0x10(%ebp)
f010d7be:	ff 75 0c             	pushl  0xc(%ebp)
f010d7c1:	e8 20 f5 ff ff       	call   f010cce6 <sys_move_user_mem>
f010d7c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ce:	e9 e0 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d7d3:	e8 53 f8 ff ff       	call   f010d02b <sys_rcr2>
f010d7d8:	e9 d6 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d7dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e0:	0f b6 c0             	movzbl %al,%eax
f010d7e3:	83 ec 0c             	sub    $0xc,%esp
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 51 f8 ff ff       	call   f010d03d <sys_bypassPageFault>
f010d7ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7f4:	e9 ba 00 00 00       	jmp    f010d8b3 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d7f9:	e8 56 f8 ff ff       	call   f010d054 <rsttst>
		return 0;
f010d7fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010d803:	e9 ab 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d808:	e8 57 f8 ff ff       	call   f010d064 <inctst>
		return 0;
f010d80d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d812:	e9 9c 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d817:	83 ec 0c             	sub    $0xc,%esp
f010d81a:	ff 75 0c             	pushl  0xc(%ebp)
f010d81d:	e8 44 f9 ff ff       	call   f010d166 <chktst>
f010d822:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d825:	b8 00 00 00 00       	mov    $0x0,%eax
f010d82a:	e9 84 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d82f:	e8 41 f8 ff ff       	call   f010d075 <gettst>
f010d834:	eb 7d                	jmp    f010d8b3 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d836:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d839:	8b 45 18             	mov    0x18(%ebp),%eax
f010d83c:	0f be c0             	movsbl %al,%eax
f010d83f:	83 ec 0c             	sub    $0xc,%esp
f010d842:	52                   	push   %edx
f010d843:	50                   	push   %eax
f010d844:	ff 75 14             	pushl  0x14(%ebp)
f010d847:	ff 75 10             	pushl  0x10(%ebp)
f010d84a:	ff 75 0c             	pushl  0xc(%ebp)
f010d84d:	e8 2d f8 ff ff       	call   f010d07f <tst>
f010d852:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d855:	b8 00 00 00 00       	mov    $0x0,%eax
f010d85a:	eb 57                	jmp    f010d8b3 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d85c:	e8 a5 f4 ff ff       	call   f010cd06 <sys_get_heap_strategy>
f010d861:	eb 50                	jmp    f010d8b3 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d863:	83 ec 0c             	sub    $0xc,%esp
f010d866:	ff 75 0c             	pushl  0xc(%ebp)
f010d869:	e8 a2 f4 ff ff       	call   f010cd10 <sys_set_uheap_strategy>
f010d86e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d871:	b8 00 00 00 00       	mov    $0x0,%eax
f010d876:	eb 3b                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d878:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d87b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d87e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d881:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d884:	53                   	push   %ebx
f010d885:	51                   	push   %ecx
f010d886:	52                   	push   %edx
f010d887:	50                   	push   %eax
f010d888:	e8 14 f9 ff ff       	call   f010d1a1 <sys_check_LRU_lists>
f010d88d:	83 c4 10             	add    $0x10,%esp
f010d890:	eb 21                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d892:	8b 55 10             	mov    0x10(%ebp),%edx
f010d895:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d898:	83 ec 08             	sub    $0x8,%esp
f010d89b:	52                   	push   %edx
f010d89c:	50                   	push   %eax
f010d89d:	e8 81 fa ff ff       	call   f010d323 <sys_check_LRU_lists_free>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	eb 0c                	jmp    f010d8b3 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d8a7:	b8 03 00 00 00       	mov    $0x3,%eax
f010d8ac:	eb 05                	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d8ae:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d8b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d8b6:	5b                   	pop    %ebx
f010d8b7:	5e                   	pop    %esi
f010d8b8:	5d                   	pop    %ebp
f010d8b9:	c3                   	ret    

f010d8ba <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d8ba:	55                   	push   %ebp
f010d8bb:	89 e5                	mov    %esp,%ebp
f010d8bd:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d8c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c3:	8b 00                	mov    (%eax),%eax
f010d8c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d8c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d8cb:	8b 00                	mov    (%eax),%eax
f010d8cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d8d7:	e9 ca 00 00 00       	jmp    f010d9a6 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d8dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d8df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8e2:	01 d0                	add    %edx,%eax
f010d8e4:	89 c2                	mov    %eax,%edx
f010d8e6:	c1 ea 1f             	shr    $0x1f,%edx
f010d8e9:	01 d0                	add    %edx,%eax
f010d8eb:	d1 f8                	sar    %eax
f010d8ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d8f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8f6:	eb 03                	jmp    f010d8fb <stab_binsearch+0x41>
			m--;
f010d8f8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d901:	7c 1e                	jl     f010d921 <stab_binsearch+0x67>
f010d903:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d906:	89 d0                	mov    %edx,%eax
f010d908:	01 c0                	add    %eax,%eax
f010d90a:	01 d0                	add    %edx,%eax
f010d90c:	c1 e0 02             	shl    $0x2,%eax
f010d90f:	89 c2                	mov    %eax,%edx
f010d911:	8b 45 08             	mov    0x8(%ebp),%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	8a 40 04             	mov    0x4(%eax),%al
f010d919:	0f b6 c0             	movzbl %al,%eax
f010d91c:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d91f:	75 d7                	jne    f010d8f8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d921:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d924:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d927:	7d 09                	jge    f010d932 <stab_binsearch+0x78>
			l = true_m + 1;
f010d929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92c:	40                   	inc    %eax
f010d92d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d930:	eb 74                	jmp    f010d9a6 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d932:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d939:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d93c:	89 d0                	mov    %edx,%eax
f010d93e:	01 c0                	add    %eax,%eax
f010d940:	01 d0                	add    %edx,%eax
f010d942:	c1 e0 02             	shl    $0x2,%eax
f010d945:	89 c2                	mov    %eax,%edx
f010d947:	8b 45 08             	mov    0x8(%ebp),%eax
f010d94a:	01 d0                	add    %edx,%eax
f010d94c:	8b 40 08             	mov    0x8(%eax),%eax
f010d94f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d952:	73 11                	jae    f010d965 <stab_binsearch+0xab>
			*region_left = m;
f010d954:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d957:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d95a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d95c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d95f:	40                   	inc    %eax
f010d960:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d963:	eb 41                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d965:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d968:	89 d0                	mov    %edx,%eax
f010d96a:	01 c0                	add    %eax,%eax
f010d96c:	01 d0                	add    %edx,%eax
f010d96e:	c1 e0 02             	shl    $0x2,%eax
f010d971:	89 c2                	mov    %eax,%edx
f010d973:	8b 45 08             	mov    0x8(%ebp),%eax
f010d976:	01 d0                	add    %edx,%eax
f010d978:	8b 40 08             	mov    0x8(%eax),%eax
f010d97b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d97e:	76 14                	jbe    f010d994 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d980:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d983:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d986:	8b 45 10             	mov    0x10(%ebp),%eax
f010d989:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d98b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d98e:	48                   	dec    %eax
f010d98f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d992:	eb 12                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d994:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d997:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d99a:	89 10                	mov    %edx,(%eax)
			l = m;
f010d99c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d99f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d9a2:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d9a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d9a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d9ac:	0f 8e 2a ff ff ff    	jle    f010d8dc <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d9b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d9b6:	75 0f                	jne    f010d9c7 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d9b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9bb:	8b 00                	mov    (%eax),%eax
f010d9bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d9c0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9c3:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d9c5:	eb 3d                	jmp    f010da04 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9ca:	8b 00                	mov    (%eax),%eax
f010d9cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d9cf:	eb 03                	jmp    f010d9d4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d9d1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d9dc:	7d 1e                	jge    f010d9fc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d9de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9e1:	89 d0                	mov    %edx,%eax
f010d9e3:	01 c0                	add    %eax,%eax
f010d9e5:	01 d0                	add    %edx,%eax
f010d9e7:	c1 e0 02             	shl    $0x2,%eax
f010d9ea:	89 c2                	mov    %eax,%edx
f010d9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9ef:	01 d0                	add    %edx,%eax
f010d9f1:	8a 40 04             	mov    0x4(%eax),%al
f010d9f4:	0f b6 c0             	movzbl %al,%eax
f010d9f7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d9fa:	75 d5                	jne    f010d9d1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d9fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da02:	89 10                	mov    %edx,(%eax)
	}
}
f010da04:	90                   	nop
f010da05:	c9                   	leave  
f010da06:	c3                   	ret    

f010da07 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010da07:	55                   	push   %ebp
f010da08:	89 e5                	mov    %esp,%ebp
f010da0a:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010da0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da10:	c7 00 00 7a 13 f0    	movl   $0xf0137a00,(%eax)
	info->eip_line = 0;
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010da20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da23:	c7 40 08 00 7a 13 f0 	movl   $0xf0137a00,0x8(%eax)
	info->eip_fn_namelen = 9;
f010da2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da2d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010da34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da37:	8b 55 08             	mov    0x8(%ebp),%edx
f010da3a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010da3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da40:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010da47:	8b 45 08             	mov    0x8(%ebp),%eax
f010da4a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010da4f:	76 1e                	jbe    f010da6f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010da51:	c7 45 f4 50 d6 13 f0 	movl   $0xf013d650,-0xc(%ebp)
		stab_end = __STAB_END__;
f010da58:	c7 45 f0 c0 ce 17 f0 	movl   $0xf017cec0,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010da5f:	c7 45 ec c1 ce 17 f0 	movl   $0xf017cec1,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010da66:	c7 45 e8 92 9a 18 f0 	movl   $0xf0189a92,-0x18(%ebp)
f010da6d:	eb 2a                	jmp    f010da99 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010da6f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010da76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da79:	8b 00                	mov    (%eax),%eax
f010da7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010da7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da81:	8b 40 04             	mov    0x4(%eax),%eax
f010da84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010da87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da8a:	8b 40 08             	mov    0x8(%eax),%eax
f010da8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010da90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da93:	8b 40 0c             	mov    0xc(%eax),%eax
f010da96:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010da99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da9f:	76 0a                	jbe    f010daab <debuginfo_eip+0xa4>
f010daa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010daa4:	48                   	dec    %eax
f010daa5:	8a 00                	mov    (%eax),%al
f010daa7:	84 c0                	test   %al,%al
f010daa9:	74 0a                	je     f010dab5 <debuginfo_eip+0xae>
		return -1;
f010daab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dab0:	e9 01 02 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dab5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dabc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dac2:	29 c2                	sub    %eax,%edx
f010dac4:	89 d0                	mov    %edx,%eax
f010dac6:	c1 f8 02             	sar    $0x2,%eax
f010dac9:	89 c2                	mov    %eax,%edx
f010dacb:	89 d0                	mov    %edx,%eax
f010dacd:	c1 e0 02             	shl    $0x2,%eax
f010dad0:	01 d0                	add    %edx,%eax
f010dad2:	c1 e0 02             	shl    $0x2,%eax
f010dad5:	01 d0                	add    %edx,%eax
f010dad7:	c1 e0 02             	shl    $0x2,%eax
f010dada:	01 d0                	add    %edx,%eax
f010dadc:	89 c1                	mov    %eax,%ecx
f010dade:	c1 e1 08             	shl    $0x8,%ecx
f010dae1:	01 c8                	add    %ecx,%eax
f010dae3:	89 c1                	mov    %eax,%ecx
f010dae5:	c1 e1 10             	shl    $0x10,%ecx
f010dae8:	01 c8                	add    %ecx,%eax
f010daea:	01 c0                	add    %eax,%eax
f010daec:	01 d0                	add    %edx,%eax
f010daee:	48                   	dec    %eax
f010daef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010daf2:	ff 75 08             	pushl  0x8(%ebp)
f010daf5:	6a 64                	push   $0x64
f010daf7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dafa:	50                   	push   %eax
f010dafb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dafe:	50                   	push   %eax
f010daff:	ff 75 f4             	pushl  -0xc(%ebp)
f010db02:	e8 b3 fd ff ff       	call   f010d8ba <stab_binsearch>
f010db07:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010db0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db0d:	85 c0                	test   %eax,%eax
f010db0f:	75 0a                	jne    f010db1b <debuginfo_eip+0x114>
		return -1;
f010db11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010db16:	e9 9b 01 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010db1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010db21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010db24:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010db27:	ff 75 08             	pushl  0x8(%ebp)
f010db2a:	6a 24                	push   $0x24
f010db2c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010db2f:	50                   	push   %eax
f010db30:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010db33:	50                   	push   %eax
f010db34:	ff 75 f4             	pushl  -0xc(%ebp)
f010db37:	e8 7e fd ff ff       	call   f010d8ba <stab_binsearch>
f010db3c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010db3f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010db42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010db45:	39 c2                	cmp    %eax,%edx
f010db47:	0f 8f 86 00 00 00    	jg     f010dbd3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010db4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db50:	89 c2                	mov    %eax,%edx
f010db52:	89 d0                	mov    %edx,%eax
f010db54:	01 c0                	add    %eax,%eax
f010db56:	01 d0                	add    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	89 c2                	mov    %eax,%edx
f010db5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db60:	01 d0                	add    %edx,%eax
f010db62:	8b 00                	mov    (%eax),%eax
f010db64:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010db67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010db6a:	29 d1                	sub    %edx,%ecx
f010db6c:	89 ca                	mov    %ecx,%edx
f010db6e:	39 d0                	cmp    %edx,%eax
f010db70:	73 22                	jae    f010db94 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010db72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db75:	89 c2                	mov    %eax,%edx
f010db77:	89 d0                	mov    %edx,%eax
f010db79:	01 c0                	add    %eax,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	c1 e0 02             	shl    $0x2,%eax
f010db80:	89 c2                	mov    %eax,%edx
f010db82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db85:	01 d0                	add    %edx,%eax
f010db87:	8b 10                	mov    (%eax),%edx
f010db89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db8c:	01 c2                	add    %eax,%edx
f010db8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db91:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010db94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db97:	89 c2                	mov    %eax,%edx
f010db99:	89 d0                	mov    %edx,%eax
f010db9b:	01 c0                	add    %eax,%eax
f010db9d:	01 d0                	add    %edx,%eax
f010db9f:	c1 e0 02             	shl    $0x2,%eax
f010dba2:	89 c2                	mov    %eax,%edx
f010dba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dba7:	01 d0                	add    %edx,%eax
f010dba9:	8b 50 08             	mov    0x8(%eax),%edx
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dbb2:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb8:	8b 40 10             	mov    0x10(%eax),%eax
f010dbbb:	29 c2                	sub    %eax,%edx
f010dbbd:	89 d0                	mov    %edx,%eax
f010dbbf:	c1 f8 02             	sar    $0x2,%eax
f010dbc2:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010dbc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010dbcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dbce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dbd1:	eb 15                	jmp    f010dbe8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dbd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbd9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dbdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dbdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dbe2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dbe5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dbe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbeb:	8b 40 08             	mov    0x8(%eax),%eax
f010dbee:	83 ec 08             	sub    $0x8,%esp
f010dbf1:	6a 3a                	push   $0x3a
f010dbf3:	50                   	push   %eax
f010dbf4:	e8 e3 36 02 00       	call   f01312dc <strfind>
f010dbf9:	83 c4 10             	add    $0x10,%esp
f010dbfc:	89 c2                	mov    %eax,%edx
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	8b 40 08             	mov    0x8(%eax),%eax
f010dc04:	29 c2                	sub    %eax,%edx
f010dc06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc09:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc0c:	eb 03                	jmp    f010dc11 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010dc0e:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc14:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc17:	7c 4e                	jl     f010dc67 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010dc19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc1c:	89 d0                	mov    %edx,%eax
f010dc1e:	01 c0                	add    %eax,%eax
f010dc20:	01 d0                	add    %edx,%eax
f010dc22:	c1 e0 02             	shl    $0x2,%eax
f010dc25:	89 c2                	mov    %eax,%edx
f010dc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc2a:	01 d0                	add    %edx,%eax
f010dc2c:	8a 40 04             	mov    0x4(%eax),%al
f010dc2f:	3c 84                	cmp    $0x84,%al
f010dc31:	74 34                	je     f010dc67 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dc33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc36:	89 d0                	mov    %edx,%eax
f010dc38:	01 c0                	add    %eax,%eax
f010dc3a:	01 d0                	add    %edx,%eax
f010dc3c:	c1 e0 02             	shl    $0x2,%eax
f010dc3f:	89 c2                	mov    %eax,%edx
f010dc41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc44:	01 d0                	add    %edx,%eax
f010dc46:	8a 40 04             	mov    0x4(%eax),%al
f010dc49:	3c 64                	cmp    $0x64,%al
f010dc4b:	75 c1                	jne    f010dc0e <debuginfo_eip+0x207>
f010dc4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc50:	89 d0                	mov    %edx,%eax
f010dc52:	01 c0                	add    %eax,%eax
f010dc54:	01 d0                	add    %edx,%eax
f010dc56:	c1 e0 02             	shl    $0x2,%eax
f010dc59:	89 c2                	mov    %eax,%edx
f010dc5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5e:	01 d0                	add    %edx,%eax
f010dc60:	8b 40 08             	mov    0x8(%eax),%eax
f010dc63:	85 c0                	test   %eax,%eax
f010dc65:	74 a7                	je     f010dc0e <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dc67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc6a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc6d:	7c 42                	jl     f010dcb1 <debuginfo_eip+0x2aa>
f010dc6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc72:	89 d0                	mov    %edx,%eax
f010dc74:	01 c0                	add    %eax,%eax
f010dc76:	01 d0                	add    %edx,%eax
f010dc78:	c1 e0 02             	shl    $0x2,%eax
f010dc7b:	89 c2                	mov    %eax,%edx
f010dc7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	8b 00                	mov    (%eax),%eax
f010dc84:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dc87:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc8a:	29 d1                	sub    %edx,%ecx
f010dc8c:	89 ca                	mov    %ecx,%edx
f010dc8e:	39 d0                	cmp    %edx,%eax
f010dc90:	73 1f                	jae    f010dcb1 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010dc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc95:	89 d0                	mov    %edx,%eax
f010dc97:	01 c0                	add    %eax,%eax
f010dc99:	01 d0                	add    %edx,%eax
f010dc9b:	c1 e0 02             	shl    $0x2,%eax
f010dc9e:	89 c2                	mov    %eax,%edx
f010dca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dca3:	01 d0                	add    %edx,%eax
f010dca5:	8b 10                	mov    (%eax),%edx
f010dca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dcaa:	01 c2                	add    %eax,%edx
f010dcac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcaf:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dcb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dcb6:	c9                   	leave  
f010dcb7:	c3                   	ret    

f010dcb8 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dcb8:	55                   	push   %ebp
f010dcb9:	89 e5                	mov    %esp,%ebp
f010dcbb:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dcbe:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dcc2:	74 1c                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcc4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dcc8:	74 16                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcca:	68 0c 7a 13 f0       	push   $0xf0137a0c
f010dccf:	68 56 7a 13 f0       	push   $0xf0137a56
f010dcd4:	6a 18                	push   $0x18
f010dcd6:	68 6b 7a 13 f0       	push   $0xf0137a6b
f010dcdb:	e8 25 25 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dce0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce3:	a3 48 26 78 f0       	mov    %eax,0xf0782648
}
f010dce8:	90                   	nop
f010dce9:	c9                   	leave  
f010dcea:	c3                   	ret    

f010dceb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dceb:	55                   	push   %ebp
f010dcec:	89 e5                	mov    %esp,%ebp
f010dcee:	c7 05 48 26 78 f0 03 	movl   $0x3,0xf0782648
f010dcf5:	00 00 00 
f010dcf8:	90                   	nop
f010dcf9:	5d                   	pop    %ebp
f010dcfa:	c3                   	ret    

f010dcfb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dcfb:	55                   	push   %ebp
f010dcfc:	89 e5                	mov    %esp,%ebp
f010dcfe:	c7 05 48 26 78 f0 04 	movl   $0x4,0xf0782648
f010dd05:	00 00 00 
f010dd08:	90                   	nop
f010dd09:	5d                   	pop    %ebp
f010dd0a:	c3                   	ret    

f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dd0b:	55                   	push   %ebp
f010dd0c:	89 e5                	mov    %esp,%ebp
f010dd0e:	c7 05 48 26 78 f0 05 	movl   $0x5,0xf0782648
f010dd15:	00 00 00 
f010dd18:	90                   	nop
f010dd19:	5d                   	pop    %ebp
f010dd1a:	c3                   	ret    

f010dd1b <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dd1b:	55                   	push   %ebp
f010dd1c:	89 e5                	mov    %esp,%ebp
f010dd1e:	c7 05 48 26 78 f0 07 	movl   $0x7,0xf0782648
f010dd25:	00 00 00 
f010dd28:	90                   	nop
f010dd29:	5d                   	pop    %ebp
f010dd2a:	c3                   	ret    

f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dd2b:	55                   	push   %ebp
f010dd2c:	89 e5                	mov    %esp,%ebp
f010dd2e:	c7 05 48 26 78 f0 06 	movl   $0x6,0xf0782648
f010dd35:	00 00 00 
f010dd38:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd3b:	a3 a4 25 78 f0       	mov    %eax,0xf07825a4
f010dd40:	90                   	nop
f010dd41:	5d                   	pop    %ebp
f010dd42:	c3                   	ret    

f010dd43 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dd43:	55                   	push   %ebp
f010dd44:	89 e5                	mov    %esp,%ebp
f010dd46:	8b 15 48 26 78 f0    	mov    0xf0782648,%edx
f010dd4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd4f:	39 c2                	cmp    %eax,%edx
f010dd51:	0f 94 c0             	sete   %al
f010dd54:	0f b6 c0             	movzbl %al,%eax
f010dd57:	5d                   	pop    %ebp
f010dd58:	c3                   	ret    

f010dd59 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dd59:	55                   	push   %ebp
f010dd5a:	89 e5                	mov    %esp,%ebp
f010dd5c:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd61:	83 f8 03             	cmp    $0x3,%eax
f010dd64:	75 07                	jne    f010dd6d <isPageReplacmentAlgorithmCLOCK+0x14>
f010dd66:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd6b:	eb 05                	jmp    f010dd72 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dd6d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd72:	5d                   	pop    %ebp
f010dd73:	c3                   	ret    

f010dd74 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dd74:	55                   	push   %ebp
f010dd75:	89 e5                	mov    %esp,%ebp
f010dd77:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd7c:	83 f8 04             	cmp    $0x4,%eax
f010dd7f:	75 07                	jne    f010dd88 <isPageReplacmentAlgorithmFIFO+0x14>
f010dd81:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd86:	eb 05                	jmp    f010dd8d <isPageReplacmentAlgorithmFIFO+0x19>
f010dd88:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd8d:	5d                   	pop    %ebp
f010dd8e:	c3                   	ret    

f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dd8f:	55                   	push   %ebp
f010dd90:	89 e5                	mov    %esp,%ebp
f010dd92:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd97:	83 f8 05             	cmp    $0x5,%eax
f010dd9a:	75 07                	jne    f010dda3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dd9c:	b8 01 00 00 00       	mov    $0x1,%eax
f010dda1:	eb 05                	jmp    f010dda8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dda3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dda8:	5d                   	pop    %ebp
f010dda9:	c3                   	ret    

f010ddaa <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010ddaa:	55                   	push   %ebp
f010ddab:	89 e5                	mov    %esp,%ebp
f010ddad:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010ddb2:	83 f8 07             	cmp    $0x7,%eax
f010ddb5:	75 07                	jne    f010ddbe <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010ddb7:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddbc:	eb 05                	jmp    f010ddc3 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010ddbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc3:	5d                   	pop    %ebp
f010ddc4:	c3                   	ret    

f010ddc5 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010ddc5:	55                   	push   %ebp
f010ddc6:	89 e5                	mov    %esp,%ebp
f010ddc8:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010ddcd:	83 f8 06             	cmp    $0x6,%eax
f010ddd0:	75 07                	jne    f010ddd9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010ddd2:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddd7:	eb 05                	jmp    f010ddde <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010ddd9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddde:	5d                   	pop    %ebp
f010dddf:	c3                   	ret    

f010dde0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dde0:	55                   	push   %ebp
f010dde1:	89 e5                	mov    %esp,%ebp
f010dde3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dde6:	a3 10 26 78 f0       	mov    %eax,0xf0782610
f010ddeb:	90                   	nop
f010ddec:	5d                   	pop    %ebp
f010dded:	c3                   	ret    

f010ddee <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010ddee:	55                   	push   %ebp
f010ddef:	89 e5                	mov    %esp,%ebp
f010ddf1:	a1 10 26 78 f0       	mov    0xf0782610,%eax
f010ddf6:	5d                   	pop    %ebp
f010ddf7:	c3                   	ret    

f010ddf8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010ddf8:	55                   	push   %ebp
f010ddf9:	89 e5                	mov    %esp,%ebp
f010ddfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddfe:	a3 50 26 78 f0       	mov    %eax,0xf0782650
f010de03:	90                   	nop
f010de04:	5d                   	pop    %ebp
f010de05:	c3                   	ret    

f010de06 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010de06:	55                   	push   %ebp
f010de07:	89 e5                	mov    %esp,%ebp
f010de09:	a1 50 26 78 f0       	mov    0xf0782650,%eax
f010de0e:	5d                   	pop    %ebp
f010de0f:	c3                   	ret    

f010de10 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010de10:	55                   	push   %ebp
f010de11:	89 e5                	mov    %esp,%ebp
f010de13:	8b 45 08             	mov    0x8(%ebp),%eax
f010de16:	a3 70 26 78 f0       	mov    %eax,0xf0782670
f010de1b:	90                   	nop
f010de1c:	5d                   	pop    %ebp
f010de1d:	c3                   	ret    

f010de1e <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010de1e:	55                   	push   %ebp
f010de1f:	89 e5                	mov    %esp,%ebp
f010de21:	a1 70 26 78 f0       	mov    0xf0782670,%eax
f010de26:	5d                   	pop    %ebp
f010de27:	c3                   	ret    

f010de28 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de28:	55                   	push   %ebp
f010de29:	89 e5                	mov    %esp,%ebp
f010de2b:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010de2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010de31:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de34:	83 ec 08             	sub    $0x8,%esp
f010de37:	ff 75 0c             	pushl  0xc(%ebp)
f010de3a:	50                   	push   %eax
f010de3b:	e8 c7 8d ff ff       	call   f0106c07 <create_page_table>
f010de40:	83 c4 10             	add    $0x10,%esp
f010de43:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010de46:	90                   	nop
f010de47:	c9                   	leave  
f010de48:	c3                   	ret    

f010de49 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de49:	55                   	push   %ebp
f010de4a:	89 e5                	mov    %esp,%ebp
f010de4c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010de4f:	83 ec 0c             	sub    $0xc,%esp
f010de52:	ff 75 08             	pushl  0x8(%ebp)
f010de55:	e8 bc 9f ff ff       	call   f0107e16 <env_page_ws_get_size>
f010de5a:	83 c4 10             	add    $0x10,%esp
f010de5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010de60:	8b 45 08             	mov    0x8(%ebp),%eax
f010de63:	8b 40 74             	mov    0x74(%eax),%eax
f010de66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de69:	0f 85 56 01 00 00    	jne    f010dfc5 <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010de6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010de76:	8b 45 08             	mov    0x8(%ebp),%eax
f010de79:	8b 48 78             	mov    0x78(%eax),%ecx
f010de7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010de7f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010de85:	89 d0                	mov    %edx,%eax
f010de87:	01 c0                	add    %eax,%eax
f010de89:	01 d0                	add    %edx,%eax
f010de8b:	c1 e0 03             	shl    $0x3,%eax
f010de8e:	01 c8                	add    %ecx,%eax
f010de90:	8b 10                	mov    (%eax),%edx
f010de92:	8b 45 08             	mov    0x8(%ebp),%eax
f010de95:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de98:	83 ec 08             	sub    $0x8,%esp
f010de9b:	52                   	push   %edx
f010de9c:	50                   	push   %eax
f010de9d:	e8 bf 9d ff ff       	call   f0107c61 <pt_get_page_permissions>
f010dea2:	83 c4 10             	add    $0x10,%esp
f010dea5:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010dea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010deab:	83 e0 20             	and    $0x20,%eax
f010deae:	85 c0                	test   %eax,%eax
f010deb0:	74 46                	je     f010def8 <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010deb2:	8b 45 08             	mov    0x8(%ebp),%eax
f010deb5:	8b 48 78             	mov    0x78(%eax),%ecx
f010deb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010debb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010dec1:	89 d0                	mov    %edx,%eax
f010dec3:	01 c0                	add    %eax,%eax
f010dec5:	01 d0                	add    %edx,%eax
f010dec7:	c1 e0 03             	shl    $0x3,%eax
f010deca:	01 c8                	add    %ecx,%eax
f010decc:	8b 10                	mov    (%eax),%edx
f010dece:	8b 45 08             	mov    0x8(%ebp),%eax
f010ded1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ded4:	6a 20                	push   $0x20
f010ded6:	6a 00                	push   $0x0
f010ded8:	52                   	push   %edx
f010ded9:	50                   	push   %eax
f010deda:	e8 ce 9c ff ff       	call   f0107bad <pt_set_page_permissions>
f010dedf:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010dee2:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010deeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010deee:	8b 40 74             	mov    0x74(%eax),%eax
f010def1:	48                   	dec    %eax
f010def2:	39 c2                	cmp    %eax,%edx
f010def4:	75 7b                	jne    f010df71 <page_fault_handler+0x128>
f010def6:	eb 67                	jmp    f010df5f <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010def8:	8b 45 08             	mov    0x8(%ebp),%eax
f010defb:	8b 48 78             	mov    0x78(%eax),%ecx
f010defe:	8b 45 08             	mov    0x8(%ebp),%eax
f010df01:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010df07:	89 d0                	mov    %edx,%eax
f010df09:	01 c0                	add    %eax,%eax
f010df0b:	01 d0                	add    %edx,%eax
f010df0d:	c1 e0 03             	shl    $0x3,%eax
f010df10:	01 c8                	add    %ecx,%eax
f010df12:	8b 00                	mov    (%eax),%eax
f010df14:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010df17:	90                   	nop
			else
				curenv->page_last_WS_index++;
		}


		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010df18:	8b 45 08             	mov    0x8(%ebp),%eax
f010df1b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010df1e:	83 ec 08             	sub    $0x8,%esp
f010df21:	ff 75 f0             	pushl  -0x10(%ebp)
f010df24:	50                   	push   %eax
f010df25:	e8 37 9d ff ff       	call   f0107c61 <pt_get_page_permissions>
f010df2a:	83 c4 10             	add    $0x10,%esp
f010df2d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010df30:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010df37:	8b 45 08             	mov    0x8(%ebp),%eax
f010df3a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010df3d:	83 ec 04             	sub    $0x4,%esp
f010df40:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010df43:	52                   	push   %edx
f010df44:	ff 75 f0             	pushl  -0x10(%ebp)
f010df47:	50                   	push   %eax
f010df48:	e8 b9 8e ff ff       	call   f0106e06 <get_frame_info>
f010df4d:	83 c4 10             	add    $0x10,%esp
f010df50:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010df53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df56:	83 e0 40             	and    $0x40,%eax
f010df59:	85 c0                	test   %eax,%eax
f010df5b:	74 42                	je     f010df9f <page_fault_handler+0x156>
f010df5d:	eb 2c                	jmp    f010df8b <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010df5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010df62:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010df69:	00 00 00 
f010df6c:	e9 05 ff ff ff       	jmp    f010de76 <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010df71:	8b 45 08             	mov    0x8(%ebp),%eax
f010df74:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010df7a:	8d 50 01             	lea    0x1(%eax),%edx
f010df7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010df80:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010df86:	e9 eb fe ff ff       	jmp    f010de76 <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010df8b:	83 ec 04             	sub    $0x4,%esp
f010df8e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010df91:	ff 75 f0             	pushl  -0x10(%ebp)
f010df94:	ff 75 08             	pushl  0x8(%ebp)
f010df97:	e8 3c 58 ff ff       	call   f01037d8 <pf_update_env_page>
f010df9c:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010df9f:	83 ec 08             	sub    $0x8,%esp
f010dfa2:	ff 75 f0             	pushl  -0x10(%ebp)
f010dfa5:	ff 75 08             	pushl  0x8(%ebp)
f010dfa8:	e8 b2 9e ff ff       	call   f0107e5f <env_page_ws_invalidate>
f010dfad:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010dfb0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfb3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dfb6:	83 ec 08             	sub    $0x8,%esp
f010dfb9:	ff 75 f0             	pushl  -0x10(%ebp)
f010dfbc:	50                   	push   %eax
f010dfbd:	e8 b4 8e ff ff       	call   f0106e76 <unmap_frame>
f010dfc2:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010dfc5:	83 ec 0c             	sub    $0xc,%esp
f010dfc8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dfcb:	50                   	push   %eax
f010dfcc:	e8 21 89 ff ff       	call   f01068f2 <allocate_frame>
f010dfd1:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010dfd4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010dfd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfda:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dfdd:	6a 06                	push   $0x6
f010dfdf:	ff 75 0c             	pushl  0xc(%ebp)
f010dfe2:	52                   	push   %edx
f010dfe3:	50                   	push   %eax
f010dfe4:	e8 58 8d ff ff       	call   f0106d41 <map_frame>
f010dfe9:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010dfec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfef:	83 ec 08             	sub    $0x8,%esp
f010dff2:	50                   	push   %eax
f010dff3:	ff 75 08             	pushl  0x8(%ebp)
f010dff6:	e8 3f 5a ff ff       	call   f0103a3a <pf_read_env_page>
f010dffb:	83 c4 10             	add    $0x10,%esp
f010dffe:	89 45 e0             	mov    %eax,-0x20(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e001:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e005:	75 54                	jne    f010e05b <page_fault_handler+0x212>
		{
			if(
f010e007:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e00e:	77 27                	ja     f010e037 <page_fault_handler+0x1ee>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e010:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e017:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e01a:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e01f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e022:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e025:	ba 00 00 00 00       	mov    $0x0,%edx
f010e02a:	f7 75 dc             	divl   -0x24(%ebp)
f010e02d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e030:	29 d0                	sub    %edx,%eax
f010e032:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e035:	76 24                	jbe    f010e05b <page_fault_handler+0x212>
f010e037:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e03e:	77 07                	ja     f010e047 <page_fault_handler+0x1fe>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e040:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e043:	85 c0                	test   %eax,%eax
f010e045:	78 14                	js     f010e05b <page_fault_handler+0x212>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e047:	83 ec 04             	sub    $0x4,%esp
f010e04a:	68 85 7a 13 f0       	push   $0xf0137a85
f010e04f:	6a 7d                	push   $0x7d
f010e051:	68 6b 7a 13 f0       	push   $0xf0137a6b
f010e056:	e8 aa 21 ff ff       	call   f0100205 <_panic>
		}
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e05e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e064:	83 ec 04             	sub    $0x4,%esp
f010e067:	ff 75 0c             	pushl  0xc(%ebp)
f010e06a:	50                   	push   %eax
f010e06b:	ff 75 08             	pushl  0x8(%ebp)
f010e06e:	e8 57 9e ff ff       	call   f0107eca <env_page_ws_set_entry>
f010e073:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e076:	8b 45 08             	mov    0x8(%ebp),%eax
f010e079:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e07f:	8d 50 01             	lea    0x1(%eax),%edx
f010e082:	8b 45 08             	mov    0x8(%ebp),%eax
f010e085:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e08e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e094:	8b 45 08             	mov    0x8(%ebp),%eax
f010e097:	8b 40 74             	mov    0x74(%eax),%eax
f010e09a:	39 c2                	cmp    %eax,%edx
f010e09c:	75 0d                	jne    f010e0ab <page_fault_handler+0x262>
			curenv->page_last_WS_index = 0;
f010e09e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0a1:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e0a8:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e0ab:	90                   	nop
f010e0ac:	c9                   	leave  
f010e0ad:	c3                   	ret    

f010e0ae <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e0ae:	55                   	push   %ebp
f010e0af:	89 e5                	mov    %esp,%ebp
f010e0b1:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e0b4:	83 ec 04             	sub    $0x4,%esp
f010e0b7:	68 9c 7a 13 f0       	push   $0xf0137a9c
f010e0bc:	68 89 00 00 00       	push   $0x89
f010e0c1:	68 6b 7a 13 f0       	push   $0xf0137a6b
f010e0c6:	e8 3a 21 ff ff       	call   f0100205 <_panic>

f010e0cb <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e0cb:	55                   	push   %ebp
f010e0cc:	89 e5                	mov    %esp,%ebp
f010e0ce:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0d4:	a3 74 25 78 f0       	mov    %eax,0xf0782574
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e0d9:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0dc:	89 d0                	mov    %edx,%eax
f010e0de:	c1 e0 02             	shl    $0x2,%eax
f010e0e1:	01 d0                	add    %edx,%eax
f010e0e3:	01 c0                	add    %eax,%eax
f010e0e5:	01 d0                	add    %edx,%eax
f010e0e7:	01 c0                	add    %eax,%eax
f010e0e9:	01 d0                	add    %edx,%eax
f010e0eb:	c1 e0 02             	shl    $0x2,%eax
f010e0ee:	83 ec 0c             	sub    $0xc,%esp
f010e0f1:	50                   	push   %eax
f010e0f2:	e8 8e 97 ff ff       	call   f0107885 <kmalloc>
f010e0f7:	83 c4 10             	add    $0x10,%esp
f010e0fa:	a3 cc 25 78 f0       	mov    %eax,0xf07825cc
	if (semaphores == NULL)
f010e0ff:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e104:	85 c0                	test   %eax,%eax
f010e106:	75 14                	jne    f010e11c <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e108:	83 ec 04             	sub    $0x4,%esp
f010e10b:	68 e0 7a 13 f0       	push   $0xf0137ae0
f010e110:	6a 1e                	push   $0x1e
f010e112:	68 20 7b 13 f0       	push   $0xf0137b20
f010e117:	e8 e9 20 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e11c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e123:	e9 bd 00 00 00       	jmp    f010e1e5 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e128:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e12e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e131:	89 d0                	mov    %edx,%eax
f010e133:	c1 e0 02             	shl    $0x2,%eax
f010e136:	01 d0                	add    %edx,%eax
f010e138:	01 c0                	add    %eax,%eax
f010e13a:	01 d0                	add    %edx,%eax
f010e13c:	01 c0                	add    %eax,%eax
f010e13e:	01 d0                	add    %edx,%eax
f010e140:	c1 e0 02             	shl    $0x2,%eax
f010e143:	01 c8                	add    %ecx,%eax
f010e145:	83 ec 04             	sub    $0x4,%esp
f010e148:	6a 5c                	push   $0x5c
f010e14a:	6a 00                	push   $0x0
f010e14c:	50                   	push   %eax
f010e14d:	e8 b6 31 02 00       	call   f0131308 <memset>
f010e152:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e155:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e15b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e15e:	89 d0                	mov    %edx,%eax
f010e160:	c1 e0 02             	shl    $0x2,%eax
f010e163:	01 d0                	add    %edx,%eax
f010e165:	01 c0                	add    %eax,%eax
f010e167:	01 d0                	add    %edx,%eax
f010e169:	01 c0                	add    %eax,%eax
f010e16b:	01 d0                	add    %edx,%eax
f010e16d:	c1 e0 02             	shl    $0x2,%eax
f010e170:	01 c8                	add    %ecx,%eax
f010e172:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e176:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e17c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e17f:	89 d0                	mov    %edx,%eax
f010e181:	c1 e0 02             	shl    $0x2,%eax
f010e184:	01 d0                	add    %edx,%eax
f010e186:	01 c0                	add    %eax,%eax
f010e188:	01 d0                	add    %edx,%eax
f010e18a:	01 c0                	add    %eax,%eax
f010e18c:	01 d0                	add    %edx,%eax
f010e18e:	c1 e0 02             	shl    $0x2,%eax
f010e191:	01 c8                	add    %ecx,%eax
f010e193:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e19a:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e1a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1a3:	89 d0                	mov    %edx,%eax
f010e1a5:	c1 e0 02             	shl    $0x2,%eax
f010e1a8:	01 d0                	add    %edx,%eax
f010e1aa:	01 c0                	add    %eax,%eax
f010e1ac:	01 d0                	add    %edx,%eax
f010e1ae:	01 c0                	add    %eax,%eax
f010e1b0:	01 d0                	add    %edx,%eax
f010e1b2:	c1 e0 02             	shl    $0x2,%eax
f010e1b5:	01 c8                	add    %ecx,%eax
f010e1b7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e1be:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e1c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1c7:	89 d0                	mov    %edx,%eax
f010e1c9:	c1 e0 02             	shl    $0x2,%eax
f010e1cc:	01 d0                	add    %edx,%eax
f010e1ce:	01 c0                	add    %eax,%eax
f010e1d0:	01 d0                	add    %edx,%eax
f010e1d2:	01 c0                	add    %eax,%eax
f010e1d4:	01 d0                	add    %edx,%eax
f010e1d6:	c1 e0 02             	shl    $0x2,%eax
f010e1d9:	01 c8                	add    %ecx,%eax
f010e1db:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e1e2:	ff 45 f4             	incl   -0xc(%ebp)
f010e1e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1e8:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e1ed:	39 c2                	cmp    %eax,%edx
f010e1ef:	0f 82 33 ff ff ff    	jb     f010e128 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e1f5:	90                   	nop
f010e1f6:	c9                   	leave  
f010e1f7:	c3                   	ret    

f010e1f8 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e1f8:	55                   	push   %ebp
f010e1f9:	89 e5                	mov    %esp,%ebp
f010e1fb:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e1fe:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e205:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e20c:	eb 2f                	jmp    f010e23d <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e20e:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e214:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e217:	89 d0                	mov    %edx,%eax
f010e219:	c1 e0 02             	shl    $0x2,%eax
f010e21c:	01 d0                	add    %edx,%eax
f010e21e:	01 c0                	add    %eax,%eax
f010e220:	01 d0                	add    %edx,%eax
f010e222:	01 c0                	add    %eax,%eax
f010e224:	01 d0                	add    %edx,%eax
f010e226:	c1 e0 02             	shl    $0x2,%eax
f010e229:	01 c8                	add    %ecx,%eax
f010e22b:	8a 40 58             	mov    0x58(%eax),%al
f010e22e:	84 c0                	test   %al,%al
f010e230:	74 08                	je     f010e23a <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e232:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e235:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e238:	eb 0f                	jmp    f010e249 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e23a:	ff 45 f0             	incl   -0x10(%ebp)
f010e23d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e240:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e245:	39 c2                	cmp    %eax,%edx
f010e247:	72 c5                	jb     f010e20e <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e249:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e24d:	75 4d                	jne    f010e29c <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e24f:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e254:	01 c0                	add    %eax,%eax
f010e256:	89 c2                	mov    %eax,%edx
f010e258:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e25d:	83 ec 08             	sub    $0x8,%esp
f010e260:	52                   	push   %edx
f010e261:	50                   	push   %eax
f010e262:	e8 de 98 ff ff       	call   f0107b45 <krealloc>
f010e267:	83 c4 10             	add    $0x10,%esp
f010e26a:	a3 cc 25 78 f0       	mov    %eax,0xf07825cc
			if (semaphores == NULL)
f010e26f:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e274:	85 c0                	test   %eax,%eax
f010e276:	75 10                	jne    f010e288 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e278:	8b 45 08             	mov    0x8(%ebp),%eax
f010e27b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e281:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e286:	eb 5b                	jmp    f010e2e3 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e288:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e28d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e290:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e295:	01 c0                	add    %eax,%eax
f010e297:	a3 74 25 78 f0       	mov    %eax,0xf0782574
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e29c:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e2a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e2a5:	89 d0                	mov    %edx,%eax
f010e2a7:	c1 e0 02             	shl    $0x2,%eax
f010e2aa:	01 d0                	add    %edx,%eax
f010e2ac:	01 c0                	add    %eax,%eax
f010e2ae:	01 d0                	add    %edx,%eax
f010e2b0:	01 c0                	add    %eax,%eax
f010e2b2:	01 d0                	add    %edx,%eax
f010e2b4:	c1 e0 02             	shl    $0x2,%eax
f010e2b7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e2ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2bd:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e2bf:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e2c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e2c8:	89 d0                	mov    %edx,%eax
f010e2ca:	c1 e0 02             	shl    $0x2,%eax
f010e2cd:	01 d0                	add    %edx,%eax
f010e2cf:	01 c0                	add    %eax,%eax
f010e2d1:	01 d0                	add    %edx,%eax
f010e2d3:	01 c0                	add    %eax,%eax
f010e2d5:	01 d0                	add    %edx,%eax
f010e2d7:	c1 e0 02             	shl    $0x2,%eax
f010e2da:	01 c8                	add    %ecx,%eax
f010e2dc:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e2e3:	c9                   	leave  
f010e2e4:	c3                   	ret    

f010e2e5 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e2e5:	55                   	push   %ebp
f010e2e6:	89 e5                	mov    %esp,%ebp
f010e2e8:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e2eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e2f2:	e9 84 00 00 00       	jmp    f010e37b <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e2f7:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e2fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e300:	89 d0                	mov    %edx,%eax
f010e302:	c1 e0 02             	shl    $0x2,%eax
f010e305:	01 d0                	add    %edx,%eax
f010e307:	01 c0                	add    %eax,%eax
f010e309:	01 d0                	add    %edx,%eax
f010e30b:	01 c0                	add    %eax,%eax
f010e30d:	01 d0                	add    %edx,%eax
f010e30f:	c1 e0 02             	shl    $0x2,%eax
f010e312:	01 c8                	add    %ecx,%eax
f010e314:	8a 40 58             	mov    0x58(%eax),%al
f010e317:	84 c0                	test   %al,%al
f010e319:	75 5c                	jne    f010e377 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e31b:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e321:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e324:	89 d0                	mov    %edx,%eax
f010e326:	c1 e0 02             	shl    $0x2,%eax
f010e329:	01 d0                	add    %edx,%eax
f010e32b:	01 c0                	add    %eax,%eax
f010e32d:	01 d0                	add    %edx,%eax
f010e32f:	01 c0                	add    %eax,%eax
f010e331:	01 d0                	add    %edx,%eax
f010e333:	c1 e0 02             	shl    $0x2,%eax
f010e336:	01 c8                	add    %ecx,%eax
f010e338:	8b 00                	mov    (%eax),%eax
f010e33a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e33d:	75 39                	jne    f010e378 <get_semaphore_object_ID+0x93>
f010e33f:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e345:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e348:	89 d0                	mov    %edx,%eax
f010e34a:	c1 e0 02             	shl    $0x2,%eax
f010e34d:	01 d0                	add    %edx,%eax
f010e34f:	01 c0                	add    %eax,%eax
f010e351:	01 d0                	add    %edx,%eax
f010e353:	01 c0                	add    %eax,%eax
f010e355:	01 d0                	add    %edx,%eax
f010e357:	c1 e0 02             	shl    $0x2,%eax
f010e35a:	01 c8                	add    %ecx,%eax
f010e35c:	83 c0 04             	add    $0x4,%eax
f010e35f:	83 ec 08             	sub    $0x8,%esp
f010e362:	50                   	push   %eax
f010e363:	ff 75 0c             	pushl  0xc(%ebp)
f010e366:	e8 bb 2e 02 00       	call   f0131226 <strcmp>
f010e36b:	83 c4 10             	add    $0x10,%esp
f010e36e:	85 c0                	test   %eax,%eax
f010e370:	75 06                	jne    f010e378 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e372:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e375:	eb 19                	jmp    f010e390 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e377:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e378:	ff 45 f4             	incl   -0xc(%ebp)
f010e37b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e37e:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e383:	39 c2                	cmp    %eax,%edx
f010e385:	0f 82 6c ff ff ff    	jb     f010e2f7 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e38b:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e390:	c9                   	leave  
f010e391:	c3                   	ret    

f010e392 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e392:	55                   	push   %ebp
f010e393:	89 e5                	mov    %esp,%ebp
f010e395:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e398:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e39d:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e3a0:	72 0a                	jb     f010e3ac <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e3a2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e3a7:	e9 bf 00 00 00       	jmp    f010e46b <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e3ac:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e3b2:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3b5:	89 d0                	mov    %edx,%eax
f010e3b7:	c1 e0 02             	shl    $0x2,%eax
f010e3ba:	01 d0                	add    %edx,%eax
f010e3bc:	01 c0                	add    %eax,%eax
f010e3be:	01 d0                	add    %edx,%eax
f010e3c0:	01 c0                	add    %eax,%eax
f010e3c2:	01 d0                	add    %edx,%eax
f010e3c4:	c1 e0 02             	shl    $0x2,%eax
f010e3c7:	01 c8                	add    %ecx,%eax
f010e3c9:	83 ec 04             	sub    $0x4,%esp
f010e3cc:	6a 5c                	push   $0x5c
f010e3ce:	6a 00                	push   $0x0
f010e3d0:	50                   	push   %eax
f010e3d1:	e8 32 2f 02 00       	call   f0131308 <memset>
f010e3d6:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e3d9:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e3df:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3e2:	89 d0                	mov    %edx,%eax
f010e3e4:	c1 e0 02             	shl    $0x2,%eax
f010e3e7:	01 d0                	add    %edx,%eax
f010e3e9:	01 c0                	add    %eax,%eax
f010e3eb:	01 d0                	add    %edx,%eax
f010e3ed:	01 c0                	add    %eax,%eax
f010e3ef:	01 d0                	add    %edx,%eax
f010e3f1:	c1 e0 02             	shl    $0x2,%eax
f010e3f4:	01 c8                	add    %ecx,%eax
f010e3f6:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e3fa:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e400:	8b 55 08             	mov    0x8(%ebp),%edx
f010e403:	89 d0                	mov    %edx,%eax
f010e405:	c1 e0 02             	shl    $0x2,%eax
f010e408:	01 d0                	add    %edx,%eax
f010e40a:	01 c0                	add    %eax,%eax
f010e40c:	01 d0                	add    %edx,%eax
f010e40e:	01 c0                	add    %eax,%eax
f010e410:	01 d0                	add    %edx,%eax
f010e412:	c1 e0 02             	shl    $0x2,%eax
f010e415:	01 c8                	add    %ecx,%eax
f010e417:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e41e:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e424:	8b 55 08             	mov    0x8(%ebp),%edx
f010e427:	89 d0                	mov    %edx,%eax
f010e429:	c1 e0 02             	shl    $0x2,%eax
f010e42c:	01 d0                	add    %edx,%eax
f010e42e:	01 c0                	add    %eax,%eax
f010e430:	01 d0                	add    %edx,%eax
f010e432:	01 c0                	add    %eax,%eax
f010e434:	01 d0                	add    %edx,%eax
f010e436:	c1 e0 02             	shl    $0x2,%eax
f010e439:	01 c8                	add    %ecx,%eax
f010e43b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e442:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e448:	8b 55 08             	mov    0x8(%ebp),%edx
f010e44b:	89 d0                	mov    %edx,%eax
f010e44d:	c1 e0 02             	shl    $0x2,%eax
f010e450:	01 d0                	add    %edx,%eax
f010e452:	01 c0                	add    %eax,%eax
f010e454:	01 d0                	add    %edx,%eax
f010e456:	01 c0                	add    %eax,%eax
f010e458:	01 d0                	add    %edx,%eax
f010e45a:	c1 e0 02             	shl    $0x2,%eax
f010e45d:	01 c8                	add    %ecx,%eax
f010e45f:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e46b:	c9                   	leave  
f010e46c:	c3                   	ret    

f010e46d <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e46d:	55                   	push   %ebp
f010e46e:	89 e5                	mov    %esp,%ebp
f010e470:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010e473:	83 ec 04             	sub    $0x4,%esp
f010e476:	68 40 7b 13 f0       	push   $0xf0137b40
f010e47b:	68 95 00 00 00       	push   $0x95
f010e480:	68 20 7b 13 f0       	push   $0xf0137b20
f010e485:	e8 7b 1d ff ff       	call   f0100205 <_panic>

f010e48a <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e48a:	55                   	push   %ebp
f010e48b:	89 e5                	mov    %esp,%ebp
f010e48d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e490:	83 ec 04             	sub    $0x4,%esp
f010e493:	68 70 7b 13 f0       	push   $0xf0137b70
f010e498:	68 a8 00 00 00       	push   $0xa8
f010e49d:	68 20 7b 13 f0       	push   $0xf0137b20
f010e4a2:	e8 5e 1d ff ff       	call   f0100205 <_panic>

f010e4a7 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e4a7:	55                   	push   %ebp
f010e4a8:	89 e5                	mov    %esp,%ebp
f010e4aa:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e4ad:	83 ec 04             	sub    $0x4,%esp
f010e4b0:	68 9c 7b 13 f0       	push   $0xf0137b9c
f010e4b5:	68 bd 00 00 00       	push   $0xbd
f010e4ba:	68 20 7b 13 f0       	push   $0xf0137b20
f010e4bf:	e8 41 1d ff ff       	call   f0100205 <_panic>

f010e4c4 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e4c4:	55                   	push   %ebp
f010e4c5:	89 e5                	mov    %esp,%ebp
f010e4c7:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e4ca:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e4d1:	83 ec 0c             	sub    $0xc,%esp
f010e4d4:	ff 75 ec             	pushl  -0x14(%ebp)
f010e4d7:	e8 a8 37 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010e4dc:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e4df:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e4e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e4e7:	74 17                	je     f010e500 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e4e9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e4ee:	50                   	push   %eax
f010e4ef:	68 e0 7b 13 f0       	push   $0xf0137be0
f010e4f4:	6a 1f                	push   $0x1f
f010e4f6:	68 34 7c 13 f0       	push   $0xf0137c34
f010e4fb:	e8 05 1d ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e500:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e505:	85 c0                	test   %eax,%eax
f010e507:	74 17                	je     f010e520 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e509:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e50e:	50                   	push   %eax
f010e50f:	68 58 7c 13 f0       	push   $0xf0137c58
f010e514:	6a 26                	push   $0x26
f010e516:	68 34 7c 13 f0       	push   $0xf0137c34
f010e51b:	e8 e5 1c ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e520:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010e525:	85 c0                	test   %eax,%eax
f010e527:	74 17                	je     f010e540 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e529:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010e52e:	50                   	push   %eax
f010e52f:	68 a8 7c 13 f0       	push   $0xf0137ca8
f010e534:	6a 2c                	push   $0x2c
f010e536:	68 34 7c 13 f0       	push   $0xf0137c34
f010e53b:	e8 c5 1c ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e540:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e547:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e54e:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f010e553:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e556:	eb 29                	jmp    f010e581 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e558:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e55b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e55e:	8b 50 0c             	mov    0xc(%eax),%edx
f010e561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e564:	8b 40 08             	mov    0x8(%eax),%eax
f010e567:	83 ec 04             	sub    $0x4,%esp
f010e56a:	52                   	push   %edx
f010e56b:	50                   	push   %eax
f010e56c:	68 f8 7c 13 f0       	push   $0xf0137cf8
f010e571:	e8 98 27 ff ff       	call   f0100d0e <cprintf>
f010e576:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e579:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f010e57e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e581:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e585:	74 07                	je     f010e58e <test_initialize_MemBlocksList+0xca>
f010e587:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e58a:	8b 00                	mov    (%eax),%eax
f010e58c:	eb 05                	jmp    f010e593 <test_initialize_MemBlocksList+0xcf>
f010e58e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e593:	a3 60 26 78 f0       	mov    %eax,0xf0782660
f010e598:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f010e59d:	85 c0                	test   %eax,%eax
f010e59f:	75 b7                	jne    f010e558 <test_initialize_MemBlocksList+0x94>
f010e5a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e5a5:	75 b1                	jne    f010e558 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e5a7:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e5ac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5af:	74 14                	je     f010e5c5 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e5b1:	83 ec 04             	sub    $0x4,%esp
f010e5b4:	68 18 7d 13 f0       	push   $0xf0137d18
f010e5b9:	6a 38                	push   $0x38
f010e5bb:	68 34 7c 13 f0       	push   $0xf0137c34
f010e5c0:	e8 40 1c ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e5c5:	83 ec 0c             	sub    $0xc,%esp
f010e5c8:	68 70 7d 13 f0       	push   $0xf0137d70
f010e5cd:	e8 3c 27 ff ff       	call   f0100d0e <cprintf>
f010e5d2:	83 c4 10             	add    $0x10,%esp
}
f010e5d5:	90                   	nop
f010e5d6:	c9                   	leave  
f010e5d7:	c3                   	ret    

f010e5d8 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e5d8:	55                   	push   %ebp
f010e5d9:	89 e5                	mov    %esp,%ebp
f010e5db:	57                   	push   %edi
f010e5dc:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e5e2:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e5e9:	83 ec 0c             	sub    $0xc,%esp
f010e5ec:	ff 75 f4             	pushl  -0xc(%ebp)
f010e5ef:	e8 90 36 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010e5f4:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e5f7:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010e5fe:	00 00 00 
f010e601:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010e608:	00 00 00 
f010e60b:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010e612:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e615:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010e61c:	00 00 00 
f010e61f:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010e626:	00 00 00 
f010e629:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010e630:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e633:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e636:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e63b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e640:	89 d7                	mov    %edx,%edi
f010e642:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e644:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e647:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e64c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e651:	89 d7                	mov    %edx,%edi
f010e653:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e655:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e65c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e663:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e66a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e671:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e674:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e677:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e67a:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e67d:	83 ec 0c             	sub    $0xc,%esp
f010e680:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e683:	50                   	push   %eax
f010e684:	e8 30 37 02 00       	call   f0131db9 <insert_sorted_allocList>
f010e689:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e68c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e693:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e698:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e69b:	74 14                	je     f010e6b1 <test_insert_sorted_allocList+0xd9>
f010e69d:	83 ec 04             	sub    $0x4,%esp
f010e6a0:	68 bc 7d 13 f0       	push   $0xf0137dbc
f010e6a5:	6a 56                	push   $0x56
f010e6a7:	68 34 7c 13 f0       	push   $0xf0137c34
f010e6ac:	e8 54 1b ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e6b1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e6b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e6b9:	74 14                	je     f010e6cf <test_insert_sorted_allocList+0xf7>
f010e6bb:	83 ec 04             	sub    $0x4,%esp
f010e6be:	68 08 7e 13 f0       	push   $0xf0137e08
f010e6c3:	6a 59                	push   $0x59
f010e6c5:	68 34 7c 13 f0       	push   $0xf0137c34
f010e6ca:	e8 36 1b ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e6cf:	83 ec 0c             	sub    $0xc,%esp
f010e6d2:	ff 75 f0             	pushl  -0x10(%ebp)
f010e6d5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e6d8:	50                   	push   %eax
f010e6d9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e6dc:	50                   	push   %eax
f010e6dd:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e6e0:	50                   	push   %eax
f010e6e1:	68 88 25 78 f0       	push   $0xf0782588
f010e6e6:	e8 7d 26 00 00       	call   f0110d68 <check_list_data>
f010e6eb:	83 c4 20             	add    $0x20,%esp
f010e6ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e6f1:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e6f5:	74 14                	je     f010e70b <test_insert_sorted_allocList+0x133>
f010e6f7:	83 ec 04             	sub    $0x4,%esp
f010e6fa:	68 58 7e 13 f0       	push   $0xf0137e58
f010e6ff:	6a 5d                	push   $0x5d
f010e701:	68 34 7c 13 f0       	push   $0xf0137c34
f010e706:	e8 fa 1a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e70b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e70e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e711:	74 14                	je     f010e727 <test_insert_sorted_allocList+0x14f>
f010e713:	83 ec 04             	sub    $0x4,%esp
f010e716:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010e71b:	6a 5e                	push   $0x5e
f010e71d:	68 34 7c 13 f0       	push   $0xf0137c34
f010e722:	e8 de 1a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e727:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e72e:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e735:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e738:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e73b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e73e:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e741:	83 ec 0c             	sub    $0xc,%esp
f010e744:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e747:	50                   	push   %eax
f010e748:	e8 6c 36 02 00       	call   f0131db9 <insert_sorted_allocList>
f010e74d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e750:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e757:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e75c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e75f:	74 14                	je     f010e775 <test_insert_sorted_allocList+0x19d>
f010e761:	83 ec 04             	sub    $0x4,%esp
f010e764:	68 bc 7d 13 f0       	push   $0xf0137dbc
f010e769:	6a 6d                	push   $0x6d
f010e76b:	68 34 7c 13 f0       	push   $0xf0137c34
f010e770:	e8 90 1a ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e775:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e77a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e77d:	74 14                	je     f010e793 <test_insert_sorted_allocList+0x1bb>
f010e77f:	83 ec 04             	sub    $0x4,%esp
f010e782:	68 08 7e 13 f0       	push   $0xf0137e08
f010e787:	6a 70                	push   $0x70
f010e789:	68 34 7c 13 f0       	push   $0xf0137c34
f010e78e:	e8 72 1a ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e793:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e79a:	83 ec 0c             	sub    $0xc,%esp
f010e79d:	ff 75 f0             	pushl  -0x10(%ebp)
f010e7a0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e7a3:	50                   	push   %eax
f010e7a4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e7a7:	50                   	push   %eax
f010e7a8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e7ab:	50                   	push   %eax
f010e7ac:	68 88 25 78 f0       	push   $0xf0782588
f010e7b1:	e8 b2 25 00 00       	call   f0110d68 <check_list_data>
f010e7b6:	83 c4 20             	add    $0x20,%esp
f010e7b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e7bc:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e7c0:	74 14                	je     f010e7d6 <test_insert_sorted_allocList+0x1fe>
f010e7c2:	83 ec 04             	sub    $0x4,%esp
f010e7c5:	68 58 7e 13 f0       	push   $0xf0137e58
f010e7ca:	6a 75                	push   $0x75
f010e7cc:	68 34 7c 13 f0       	push   $0xf0137c34
f010e7d1:	e8 2f 1a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e7d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e7d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e7dc:	74 14                	je     f010e7f2 <test_insert_sorted_allocList+0x21a>
f010e7de:	83 ec 04             	sub    $0x4,%esp
f010e7e1:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010e7e6:	6a 76                	push   $0x76
f010e7e8:	68 34 7c 13 f0       	push   $0xf0137c34
f010e7ed:	e8 13 1a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e7f2:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e7f9:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e800:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e803:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e806:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e809:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e80c:	83 ec 0c             	sub    $0xc,%esp
f010e80f:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e812:	50                   	push   %eax
f010e813:	e8 a1 35 02 00       	call   f0131db9 <insert_sorted_allocList>
f010e818:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e81b:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e822:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e827:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e82a:	74 17                	je     f010e843 <test_insert_sorted_allocList+0x26b>
f010e82c:	83 ec 04             	sub    $0x4,%esp
f010e82f:	68 bc 7d 13 f0       	push   $0xf0137dbc
f010e834:	68 85 00 00 00       	push   $0x85
f010e839:	68 34 7c 13 f0       	push   $0xf0137c34
f010e83e:	e8 c2 19 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e843:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e848:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e84b:	74 17                	je     f010e864 <test_insert_sorted_allocList+0x28c>
f010e84d:	83 ec 04             	sub    $0x4,%esp
f010e850:	68 f4 7e 13 f0       	push   $0xf0137ef4
f010e855:	68 88 00 00 00       	push   $0x88
f010e85a:	68 34 7c 13 f0       	push   $0xf0137c34
f010e85f:	e8 a1 19 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e864:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e86b:	83 ec 0c             	sub    $0xc,%esp
f010e86e:	ff 75 f0             	pushl  -0x10(%ebp)
f010e871:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e874:	50                   	push   %eax
f010e875:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e878:	50                   	push   %eax
f010e879:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e87c:	50                   	push   %eax
f010e87d:	68 88 25 78 f0       	push   $0xf0782588
f010e882:	e8 e1 24 00 00       	call   f0110d68 <check_list_data>
f010e887:	83 c4 20             	add    $0x20,%esp
f010e88a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e88d:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e891:	74 17                	je     f010e8aa <test_insert_sorted_allocList+0x2d2>
f010e893:	83 ec 04             	sub    $0x4,%esp
f010e896:	68 58 7e 13 f0       	push   $0xf0137e58
f010e89b:	68 8d 00 00 00       	push   $0x8d
f010e8a0:	68 34 7c 13 f0       	push   $0xf0137c34
f010e8a5:	e8 5b 19 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e8aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e8ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e8b0:	74 17                	je     f010e8c9 <test_insert_sorted_allocList+0x2f1>
f010e8b2:	83 ec 04             	sub    $0x4,%esp
f010e8b5:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010e8ba:	68 8e 00 00 00       	push   $0x8e
f010e8bf:	68 34 7c 13 f0       	push   $0xf0137c34
f010e8c4:	e8 3c 19 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e8c9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e8d0:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e8d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e8da:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e8dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8e0:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e8e3:	83 ec 0c             	sub    $0xc,%esp
f010e8e6:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e8e9:	50                   	push   %eax
f010e8ea:	e8 ca 34 02 00       	call   f0131db9 <insert_sorted_allocList>
f010e8ef:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e8f2:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e8f9:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e8fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e901:	74 17                	je     f010e91a <test_insert_sorted_allocList+0x342>
f010e903:	83 ec 04             	sub    $0x4,%esp
f010e906:	68 bc 7d 13 f0       	push   $0xf0137dbc
f010e90b:	68 9c 00 00 00       	push   $0x9c
f010e910:	68 34 7c 13 f0       	push   $0xf0137c34
f010e915:	e8 eb 18 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e91a:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e91f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e922:	74 17                	je     f010e93b <test_insert_sorted_allocList+0x363>
f010e924:	83 ec 04             	sub    $0x4,%esp
f010e927:	68 08 7e 13 f0       	push   $0xf0137e08
f010e92c:	68 9f 00 00 00       	push   $0x9f
f010e931:	68 34 7c 13 f0       	push   $0xf0137c34
f010e936:	e8 ca 18 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e93b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e942:	83 ec 0c             	sub    $0xc,%esp
f010e945:	ff 75 f0             	pushl  -0x10(%ebp)
f010e948:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e94b:	50                   	push   %eax
f010e94c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e94f:	50                   	push   %eax
f010e950:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e953:	50                   	push   %eax
f010e954:	68 88 25 78 f0       	push   $0xf0782588
f010e959:	e8 0a 24 00 00       	call   f0110d68 <check_list_data>
f010e95e:	83 c4 20             	add    $0x20,%esp
f010e961:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e964:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e968:	74 17                	je     f010e981 <test_insert_sorted_allocList+0x3a9>
f010e96a:	83 ec 04             	sub    $0x4,%esp
f010e96d:	68 58 7e 13 f0       	push   $0xf0137e58
f010e972:	68 a4 00 00 00       	push   $0xa4
f010e977:	68 34 7c 13 f0       	push   $0xf0137c34
f010e97c:	e8 84 18 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e981:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e984:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e987:	74 17                	je     f010e9a0 <test_insert_sorted_allocList+0x3c8>
f010e989:	83 ec 04             	sub    $0x4,%esp
f010e98c:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010e991:	68 a5 00 00 00       	push   $0xa5
f010e996:	68 34 7c 13 f0       	push   $0xf0137c34
f010e99b:	e8 65 18 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e9a0:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e9a7:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e9ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9b1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e9b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e9ba:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e9c0:	83 ec 0c             	sub    $0xc,%esp
f010e9c3:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e9c9:	50                   	push   %eax
f010e9ca:	e8 ea 33 02 00       	call   f0131db9 <insert_sorted_allocList>
f010e9cf:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e9d2:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e9d9:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e9de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e9e1:	74 17                	je     f010e9fa <test_insert_sorted_allocList+0x422>
f010e9e3:	83 ec 04             	sub    $0x4,%esp
f010e9e6:	68 bc 7d 13 f0       	push   $0xf0137dbc
f010e9eb:	68 b3 00 00 00       	push   $0xb3
f010e9f0:	68 34 7c 13 f0       	push   $0xf0137c34
f010e9f5:	e8 0b 18 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e9fa:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e9ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ea02:	74 17                	je     f010ea1b <test_insert_sorted_allocList+0x443>
f010ea04:	83 ec 04             	sub    $0x4,%esp
f010ea07:	68 08 7e 13 f0       	push   $0xf0137e08
f010ea0c:	68 b6 00 00 00       	push   $0xb6
f010ea11:	68 34 7c 13 f0       	push   $0xf0137c34
f010ea16:	e8 ea 17 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ea1b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ea22:	83 ec 0c             	sub    $0xc,%esp
f010ea25:	ff 75 f0             	pushl  -0x10(%ebp)
f010ea28:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ea2b:	50                   	push   %eax
f010ea2c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ea2f:	50                   	push   %eax
f010ea30:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ea33:	50                   	push   %eax
f010ea34:	68 88 25 78 f0       	push   $0xf0782588
f010ea39:	e8 2a 23 00 00       	call   f0110d68 <check_list_data>
f010ea3e:	83 c4 20             	add    $0x20,%esp
f010ea41:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ea44:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ea48:	74 17                	je     f010ea61 <test_insert_sorted_allocList+0x489>
f010ea4a:	83 ec 04             	sub    $0x4,%esp
f010ea4d:	68 58 7e 13 f0       	push   $0xf0137e58
f010ea52:	68 bb 00 00 00       	push   $0xbb
f010ea57:	68 34 7c 13 f0       	push   $0xf0137c34
f010ea5c:	e8 a4 17 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ea61:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ea64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea67:	74 17                	je     f010ea80 <test_insert_sorted_allocList+0x4a8>
f010ea69:	83 ec 04             	sub    $0x4,%esp
f010ea6c:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010ea71:	68 bc 00 00 00       	push   $0xbc
f010ea76:	68 34 7c 13 f0       	push   $0xf0137c34
f010ea7b:	e8 85 17 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010ea80:	83 ec 0c             	sub    $0xc,%esp
f010ea83:	68 44 7f 13 f0       	push   $0xf0137f44
f010ea88:	e8 81 22 ff ff       	call   f0100d0e <cprintf>
f010ea8d:	83 c4 10             	add    $0x10,%esp
}
f010ea90:	90                   	nop
f010ea91:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ea94:	c9                   	leave  
f010ea95:	c3                   	ret    

f010ea96 <test_find_block>:

void test_find_block()
{
f010ea96:	55                   	push   %ebp
f010ea97:	89 e5                	mov    %esp,%ebp
f010ea99:	57                   	push   %edi
f010ea9a:	56                   	push   %esi
f010ea9b:	53                   	push   %ebx
f010ea9c:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010eaa2:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eaa9:	83 ec 0c             	sub    $0xc,%esp
f010eaac:	ff 75 e0             	pushl  -0x20(%ebp)
f010eaaf:	e8 d0 31 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010eab4:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010eab7:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010eabe:	00 00 00 
f010eac1:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010eac8:	00 00 00 
f010eacb:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010ead2:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ead5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ead8:	bb bc 80 13 f0       	mov    $0xf01380bc,%ebx
f010eadd:	ba 06 00 00 00       	mov    $0x6,%edx
f010eae2:	89 c7                	mov    %eax,%edi
f010eae4:	89 de                	mov    %ebx,%esi
f010eae6:	89 d1                	mov    %edx,%ecx
f010eae8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010eaea:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010eaed:	bb d4 80 13 f0       	mov    $0xf01380d4,%ebx
f010eaf2:	ba 06 00 00 00       	mov    $0x6,%edx
f010eaf7:	89 c7                	mov    %eax,%edi
f010eaf9:	89 de                	mov    %ebx,%esi
f010eafb:	89 d1                	mov    %edx,%ecx
f010eafd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010eaff:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010eb06:	00 00 00 
f010eb09:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010eb10:	00 00 00 
f010eb13:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010eb1a:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010eb1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eb24:	e9 5f 01 00 00       	jmp    f010ec88 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010eb29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb2c:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010eb30:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb33:	c1 e2 04             	shl    $0x4,%edx
f010eb36:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eb39:	01 da                	add    %ebx,%edx
f010eb3b:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010eb41:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010eb43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb46:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010eb4a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb4d:	c1 e2 04             	shl    $0x4,%edx
f010eb50:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eb53:	01 f2                	add    %esi,%edx
f010eb55:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010eb5b:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eb5d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eb61:	0f 85 92 00 00 00    	jne    f010ebf9 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010eb67:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f010eb6c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb6f:	c1 e2 04             	shl    $0x4,%edx
f010eb72:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eb75:	01 fa                	add    %edi,%edx
f010eb77:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010eb7d:	89 02                	mov    %eax,(%edx)
f010eb7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb82:	c1 e0 04             	shl    $0x4,%eax
f010eb85:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eb88:	01 d8                	add    %ebx,%eax
f010eb8a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010eb8f:	8b 00                	mov    (%eax),%eax
f010eb91:	85 c0                	test   %eax,%eax
f010eb93:	74 18                	je     f010ebad <test_find_block+0x117>
f010eb95:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f010eb9a:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010eba0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eba3:	c1 e1 04             	shl    $0x4,%ecx
f010eba6:	01 ca                	add    %ecx,%edx
f010eba8:	89 50 04             	mov    %edx,0x4(%eax)
f010ebab:	eb 13                	jmp    f010ebc0 <test_find_block+0x12a>
f010ebad:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ebb3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebb6:	c1 e2 04             	shl    $0x4,%edx
f010ebb9:	01 d0                	add    %edx,%eax
f010ebbb:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f010ebc0:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ebc6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebc9:	c1 e2 04             	shl    $0x4,%edx
f010ebcc:	01 d0                	add    %edx,%eax
f010ebce:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f010ebd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ebd6:	c1 e0 04             	shl    $0x4,%eax
f010ebd9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ebdc:	01 f0                	add    %esi,%eax
f010ebde:	2d 98 00 00 00       	sub    $0x98,%eax
f010ebe3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ebe9:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ebee:	40                   	inc    %eax
f010ebef:	a3 94 25 78 f0       	mov    %eax,0xf0782594
f010ebf4:	e9 8c 00 00 00       	jmp    f010ec85 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010ebf9:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f010ebfe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec01:	c1 e2 04             	shl    $0x4,%edx
f010ec04:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ec07:	01 fa                	add    %edi,%edx
f010ec09:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010ec0f:	89 02                	mov    %eax,(%edx)
f010ec11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec14:	c1 e0 04             	shl    $0x4,%eax
f010ec17:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec1a:	01 d8                	add    %ebx,%eax
f010ec1c:	2d 98 00 00 00       	sub    $0x98,%eax
f010ec21:	8b 00                	mov    (%eax),%eax
f010ec23:	85 c0                	test   %eax,%eax
f010ec25:	74 17                	je     f010ec3e <test_find_block+0x1a8>
f010ec27:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f010ec2c:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ec32:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ec35:	c1 e1 04             	shl    $0x4,%ecx
f010ec38:	01 ca                	add    %ecx,%edx
f010ec3a:	89 10                	mov    %edx,(%eax)
f010ec3c:	eb 13                	jmp    f010ec51 <test_find_block+0x1bb>
f010ec3e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ec44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec47:	c1 e2 04             	shl    $0x4,%edx
f010ec4a:	01 d0                	add    %edx,%eax
f010ec4c:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f010ec51:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ec57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec5a:	c1 e2 04             	shl    $0x4,%edx
f010ec5d:	01 d0                	add    %edx,%eax
f010ec5f:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f010ec64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec67:	c1 e0 04             	shl    $0x4,%eax
f010ec6a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec6d:	01 f0                	add    %esi,%eax
f010ec6f:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ec74:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ec7a:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ec7f:	40                   	inc    %eax
f010ec80:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ec85:	ff 45 e4             	incl   -0x1c(%ebp)
f010ec88:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010ec8c:	0f 8e 97 fe ff ff    	jle    f010eb29 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010ec92:	83 ec 08             	sub    $0x8,%esp
f010ec95:	68 00 10 00 00       	push   $0x1000
f010ec9a:	68 88 25 78 f0       	push   $0xf0782588
f010ec9f:	e8 bd 30 02 00       	call   f0131d61 <find_block>
f010eca4:	83 c4 10             	add    $0x10,%esp
f010eca7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010ecaa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ecae:	74 17                	je     f010ecc7 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010ecb0:	83 ec 04             	sub    $0x4,%esp
f010ecb3:	68 84 7f 13 f0       	push   $0xf0137f84
f010ecb8:	68 de 00 00 00       	push   $0xde
f010ecbd:	68 34 7c 13 f0       	push   $0xf0137c34
f010ecc2:	e8 3e 15 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010ecc7:	83 ec 08             	sub    $0x8,%esp
f010ecca:	6a 00                	push   $0x0
f010eccc:	68 88 25 78 f0       	push   $0xf0782588
f010ecd1:	e8 8b 30 02 00       	call   f0131d61 <find_block>
f010ecd6:	83 c4 10             	add    $0x10,%esp
f010ecd9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010ecdc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ece0:	74 17                	je     f010ecf9 <test_find_block+0x263>
f010ece2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ece5:	8b 40 0c             	mov    0xc(%eax),%eax
f010ece8:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010eced:	75 0a                	jne    f010ecf9 <test_find_block+0x263>
f010ecef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ecf2:	8b 40 08             	mov    0x8(%eax),%eax
f010ecf5:	85 c0                	test   %eax,%eax
f010ecf7:	74 17                	je     f010ed10 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ecf9:	83 ec 04             	sub    $0x4,%esp
f010ecfc:	68 e8 7f 13 f0       	push   $0xf0137fe8
f010ed01:	68 e3 00 00 00       	push   $0xe3
f010ed06:	68 34 7c 13 f0       	push   $0xf0137c34
f010ed0b:	e8 f5 14 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010ed10:	83 ec 08             	sub    $0x8,%esp
f010ed13:	68 00 70 00 00       	push   $0x7000
f010ed18:	68 88 25 78 f0       	push   $0xf0782588
f010ed1d:	e8 3f 30 02 00       	call   f0131d61 <find_block>
f010ed22:	83 c4 10             	add    $0x10,%esp
f010ed25:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010ed28:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed2c:	74 1a                	je     f010ed48 <test_find_block+0x2b2>
f010ed2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed31:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed34:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010ed39:	75 0d                	jne    f010ed48 <test_find_block+0x2b2>
f010ed3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed3e:	8b 40 08             	mov    0x8(%eax),%eax
f010ed41:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ed46:	74 17                	je     f010ed5f <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ed48:	83 ec 04             	sub    $0x4,%esp
f010ed4b:	68 e8 7f 13 f0       	push   $0xf0137fe8
f010ed50:	68 e8 00 00 00       	push   $0xe8
f010ed55:	68 34 7c 13 f0       	push   $0xf0137c34
f010ed5a:	e8 a6 14 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010ed5f:	83 ec 08             	sub    $0x8,%esp
f010ed62:	68 00 a4 01 00       	push   $0x1a400
f010ed67:	68 88 25 78 f0       	push   $0xf0782588
f010ed6c:	e8 f0 2f 02 00       	call   f0131d61 <find_block>
f010ed71:	83 c4 10             	add    $0x10,%esp
f010ed74:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010ed77:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed7b:	74 1a                	je     f010ed97 <test_find_block+0x301>
f010ed7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed80:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed83:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ed88:	75 0d                	jne    f010ed97 <test_find_block+0x301>
f010ed8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed8d:	8b 40 08             	mov    0x8(%eax),%eax
f010ed90:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ed95:	74 17                	je     f010edae <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ed97:	83 ec 04             	sub    $0x4,%esp
f010ed9a:	68 e8 7f 13 f0       	push   $0xf0137fe8
f010ed9f:	68 ed 00 00 00       	push   $0xed
f010eda4:	68 34 7c 13 f0       	push   $0xf0137c34
f010eda9:	e8 57 14 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010edae:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010edb3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010edb6:	75 09                	jne    f010edc1 <test_find_block+0x32b>
f010edb8:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010edbd:	85 c0                	test   %eax,%eax
f010edbf:	74 17                	je     f010edd8 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010edc1:	83 ec 04             	sub    $0x4,%esp
f010edc4:	68 1c 80 13 f0       	push   $0xf013801c
f010edc9:	68 f2 00 00 00       	push   $0xf2
f010edce:	68 34 7c 13 f0       	push   $0xf0137c34
f010edd3:	e8 2d 14 ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010edd8:	83 ec 0c             	sub    $0xc,%esp
f010eddb:	68 80 80 13 f0       	push   $0xf0138080
f010ede0:	e8 29 1f ff ff       	call   f0100d0e <cprintf>
f010ede5:	83 c4 10             	add    $0x10,%esp
}
f010ede8:	90                   	nop
f010ede9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edec:	5b                   	pop    %ebx
f010eded:	5e                   	pop    %esi
f010edee:	5f                   	pop    %edi
f010edef:	5d                   	pop    %ebp
f010edf0:	c3                   	ret    

f010edf1 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010edf1:	55                   	push   %ebp
f010edf2:	89 e5                	mov    %esp,%ebp
f010edf4:	57                   	push   %edi
f010edf5:	56                   	push   %esi
f010edf6:	53                   	push   %ebx
f010edf7:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010edfd:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ee04:	83 ec 0c             	sub    $0xc,%esp
f010ee07:	ff 75 e0             	pushl  -0x20(%ebp)
f010ee0a:	e8 75 2e 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010ee0f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ee12:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010ee19:	00 00 00 
f010ee1c:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010ee23:	00 00 00 
f010ee26:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010ee2d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ee30:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ee33:	bb 60 83 13 f0       	mov    $0xf0138360,%ebx
f010ee38:	ba 08 00 00 00       	mov    $0x8,%edx
f010ee3d:	89 c7                	mov    %eax,%edi
f010ee3f:	89 de                	mov    %ebx,%esi
f010ee41:	89 d1                	mov    %edx,%ecx
f010ee43:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010ee45:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee48:	bb 80 83 13 f0       	mov    $0xf0138380,%ebx
f010ee4d:	ba 08 00 00 00       	mov    $0x8,%edx
f010ee52:	89 c7                	mov    %eax,%edi
f010ee54:	89 de                	mov    %ebx,%esi
f010ee56:	89 d1                	mov    %edx,%ecx
f010ee58:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ee5a:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010ee61:	00 00 00 
f010ee64:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010ee6b:	00 00 00 
f010ee6e:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010ee75:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010ee78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ee7f:	e9 5f 01 00 00       	jmp    f010efe3 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ee84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee87:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010ee8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee8e:	c1 e2 04             	shl    $0x4,%edx
f010ee91:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ee94:	01 da                	add    %ebx,%edx
f010ee96:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ee9c:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ee9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eea1:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eea5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eea8:	c1 e2 04             	shl    $0x4,%edx
f010eeab:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eeae:	01 f2                	add    %esi,%edx
f010eeb0:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010eeb6:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eeb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eebc:	0f 85 92 00 00 00    	jne    f010ef54 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010eec2:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010eec7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeca:	c1 e2 04             	shl    $0x4,%edx
f010eecd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eed0:	01 fa                	add    %edi,%edx
f010eed2:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010eed8:	89 02                	mov    %eax,(%edx)
f010eeda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eedd:	c1 e0 04             	shl    $0x4,%eax
f010eee0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eee3:	01 d8                	add    %ebx,%eax
f010eee5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eeea:	8b 00                	mov    (%eax),%eax
f010eeec:	85 c0                	test   %eax,%eax
f010eeee:	74 18                	je     f010ef08 <test_alloc_block_FF+0x117>
f010eef0:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010eef5:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010eefb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eefe:	c1 e1 04             	shl    $0x4,%ecx
f010ef01:	01 ca                	add    %ecx,%edx
f010ef03:	89 50 04             	mov    %edx,0x4(%eax)
f010ef06:	eb 13                	jmp    f010ef1b <test_alloc_block_FF+0x12a>
f010ef08:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ef0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef11:	c1 e2 04             	shl    $0x4,%edx
f010ef14:	01 d0                	add    %edx,%eax
f010ef16:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010ef1b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ef21:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef24:	c1 e2 04             	shl    $0x4,%edx
f010ef27:	01 d0                	add    %edx,%eax
f010ef29:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010ef2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef31:	c1 e0 04             	shl    $0x4,%eax
f010ef34:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef37:	01 f0                	add    %esi,%eax
f010ef39:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ef3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef44:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010ef49:	40                   	inc    %eax
f010ef4a:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010ef4f:	e9 8c 00 00 00       	jmp    f010efe0 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ef54:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010ef59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef5c:	c1 e2 04             	shl    $0x4,%edx
f010ef5f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ef62:	01 fa                	add    %edi,%edx
f010ef64:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ef6a:	89 02                	mov    %eax,(%edx)
f010ef6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef6f:	c1 e0 04             	shl    $0x4,%eax
f010ef72:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef75:	01 d8                	add    %ebx,%eax
f010ef77:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ef7c:	8b 00                	mov    (%eax),%eax
f010ef7e:	85 c0                	test   %eax,%eax
f010ef80:	74 17                	je     f010ef99 <test_alloc_block_FF+0x1a8>
f010ef82:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010ef87:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ef8d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ef90:	c1 e1 04             	shl    $0x4,%ecx
f010ef93:	01 ca                	add    %ecx,%edx
f010ef95:	89 10                	mov    %edx,(%eax)
f010ef97:	eb 13                	jmp    f010efac <test_alloc_block_FF+0x1bb>
f010ef99:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ef9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efa2:	c1 e2 04             	shl    $0x4,%edx
f010efa5:	01 d0                	add    %edx,%eax
f010efa7:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010efac:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010efb2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efb5:	c1 e2 04             	shl    $0x4,%edx
f010efb8:	01 d0                	add    %edx,%eax
f010efba:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010efbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efc2:	c1 e0 04             	shl    $0x4,%eax
f010efc5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efc8:	01 f0                	add    %esi,%eax
f010efca:	2d d4 00 00 00       	sub    $0xd4,%eax
f010efcf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010efd5:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010efda:	40                   	inc    %eax
f010efdb:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010efe0:	ff 45 e4             	incl   -0x1c(%ebp)
f010efe3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010efe7:	0f 8e 97 fe ff ff    	jle    f010ee84 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010efed:	83 ec 0c             	sub    $0xc,%esp
f010eff0:	68 00 00 30 00       	push   $0x300000
f010eff5:	e8 4c 30 02 00       	call   f0132046 <alloc_block_FF>
f010effa:	83 c4 10             	add    $0x10,%esp
f010effd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f000:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f004:	74 17                	je     f010f01d <test_alloc_block_FF+0x22c>
f010f006:	83 ec 04             	sub    $0x4,%esp
f010f009:	68 ec 80 13 f0       	push   $0xf01380ec
f010f00e:	68 15 01 00 00       	push   $0x115
f010f013:	68 34 7c 13 f0       	push   $0xf0137c34
f010f018:	e8 e8 11 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f01d:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f022:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f025:	75 13                	jne    f010f03a <test_alloc_block_FF+0x249>
f010f027:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f02c:	83 f8 08             	cmp    $0x8,%eax
f010f02f:	75 09                	jne    f010f03a <test_alloc_block_FF+0x249>
f010f031:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f036:	85 c0                	test   %eax,%eax
f010f038:	74 17                	je     f010f051 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f03a:	83 ec 04             	sub    $0x4,%esp
f010f03d:	68 60 81 13 f0       	push   $0xf0138160
f010f042:	68 19 01 00 00       	push   $0x119
f010f047:	68 34 7c 13 f0       	push   $0xf0137c34
f010f04c:	e8 b4 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f051:	83 ec 0c             	sub    $0xc,%esp
f010f054:	68 00 24 00 00       	push   $0x2400
f010f059:	e8 e8 2f 02 00       	call   f0132046 <alloc_block_FF>
f010f05e:	83 c4 10             	add    $0x10,%esp
f010f061:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f064:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f068:	74 1a                	je     f010f084 <test_alloc_block_FF+0x293>
f010f06a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f06d:	8b 40 0c             	mov    0xc(%eax),%eax
f010f070:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f075:	75 0d                	jne    f010f084 <test_alloc_block_FF+0x293>
f010f077:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f07a:	8b 40 08             	mov    0x8(%eax),%eax
f010f07d:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f082:	74 17                	je     f010f09b <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f084:	83 ec 04             	sub    $0x4,%esp
f010f087:	68 d8 81 13 f0       	push   $0xf01381d8
f010f08c:	68 21 01 00 00       	push   $0x121
f010f091:	68 34 7c 13 f0       	push   $0xf0137c34
f010f096:	e8 6a 11 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f09b:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f0a0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f0a3:	75 13                	jne    f010f0b8 <test_alloc_block_FF+0x2c7>
f010f0a5:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f0aa:	83 f8 07             	cmp    $0x7,%eax
f010f0ad:	75 09                	jne    f010f0b8 <test_alloc_block_FF+0x2c7>
f010f0af:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f0b4:	85 c0                	test   %eax,%eax
f010f0b6:	74 17                	je     f010f0cf <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f0b8:	83 ec 04             	sub    $0x4,%esp
f010f0bb:	68 1c 82 13 f0       	push   $0xf013821c
f010f0c0:	68 25 01 00 00       	push   $0x125
f010f0c5:	68 34 7c 13 f0       	push   $0xf0137c34
f010f0ca:	e8 36 11 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f0cf:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f0d6:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f0d9:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f0e0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f0e7:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f0ee:	83 ec 0c             	sub    $0xc,%esp
f010f0f1:	ff 75 d8             	pushl  -0x28(%ebp)
f010f0f4:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f0fa:	50                   	push   %eax
f010f0fb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f0fe:	50                   	push   %eax
f010f0ff:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f102:	50                   	push   %eax
f010f103:	68 24 26 78 f0       	push   $0xf0782624
f010f108:	e8 5b 1c 00 00       	call   f0110d68 <check_list_data>
f010f10d:	83 c4 20             	add    $0x20,%esp
f010f110:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f113:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f117:	74 17                	je     f010f130 <test_alloc_block_FF+0x33f>
f010f119:	83 ec 04             	sub    $0x4,%esp
f010f11c:	68 80 82 13 f0       	push   $0xf0138280
f010f121:	68 2d 01 00 00       	push   $0x12d
f010f126:	68 34 7c 13 f0       	push   $0xf0137c34
f010f12b:	e8 d5 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f130:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f136:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f139:	74 17                	je     f010f152 <test_alloc_block_FF+0x361>
f010f13b:	83 ec 04             	sub    $0x4,%esp
f010f13e:	68 cc 82 13 f0       	push   $0xf01382cc
f010f143:	68 2e 01 00 00       	push   $0x12e
f010f148:	68 34 7c 13 f0       	push   $0xf0137c34
f010f14d:	e8 b3 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f152:	83 ec 0c             	sub    $0xc,%esp
f010f155:	68 00 00 10 00       	push   $0x100000
f010f15a:	e8 e7 2e 02 00       	call   f0132046 <alloc_block_FF>
f010f15f:	83 c4 10             	add    $0x10,%esp
f010f162:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f165:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f169:	74 1a                	je     f010f185 <test_alloc_block_FF+0x394>
f010f16b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f16e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f171:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f176:	75 0d                	jne    f010f185 <test_alloc_block_FF+0x394>
f010f178:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f17b:	8b 40 08             	mov    0x8(%eax),%eax
f010f17e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f183:	74 17                	je     f010f19c <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f185:	83 ec 04             	sub    $0x4,%esp
f010f188:	68 d8 81 13 f0       	push   $0xf01381d8
f010f18d:	68 36 01 00 00       	push   $0x136
f010f192:	68 34 7c 13 f0       	push   $0xf0137c34
f010f197:	e8 69 10 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f19c:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f1a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f1a4:	4a                   	dec    %edx
f010f1a5:	39 d0                	cmp    %edx,%eax
f010f1a7:	75 13                	jne    f010f1bc <test_alloc_block_FF+0x3cb>
f010f1a9:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f1ae:	83 f8 07             	cmp    $0x7,%eax
f010f1b1:	75 09                	jne    f010f1bc <test_alloc_block_FF+0x3cb>
f010f1b3:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f1b8:	85 c0                	test   %eax,%eax
f010f1ba:	74 17                	je     f010f1d3 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1bc:	83 ec 04             	sub    $0x4,%esp
f010f1bf:	68 1c 82 13 f0       	push   $0xf013821c
f010f1c4:	68 3a 01 00 00       	push   $0x13a
f010f1c9:	68 34 7c 13 f0       	push   $0xf0137c34
f010f1ce:	e8 32 10 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f1d3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f1da:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f1dd:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f1e4:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f1eb:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1f2:	83 ec 0c             	sub    $0xc,%esp
f010f1f5:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1f8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f1fe:	50                   	push   %eax
f010f1ff:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f202:	50                   	push   %eax
f010f203:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f206:	50                   	push   %eax
f010f207:	68 24 26 78 f0       	push   $0xf0782624
f010f20c:	e8 57 1b 00 00       	call   f0110d68 <check_list_data>
f010f211:	83 c4 20             	add    $0x20,%esp
f010f214:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f217:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f21b:	74 17                	je     f010f234 <test_alloc_block_FF+0x443>
f010f21d:	83 ec 04             	sub    $0x4,%esp
f010f220:	68 80 82 13 f0       	push   $0xf0138280
f010f225:	68 42 01 00 00       	push   $0x142
f010f22a:	68 34 7c 13 f0       	push   $0xf0137c34
f010f22f:	e8 d1 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f234:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f23a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f23d:	74 17                	je     f010f256 <test_alloc_block_FF+0x465>
f010f23f:	83 ec 04             	sub    $0x4,%esp
f010f242:	68 cc 82 13 f0       	push   $0xf01382cc
f010f247:	68 43 01 00 00       	push   $0x143
f010f24c:	68 34 7c 13 f0       	push   $0xf0137c34
f010f251:	e8 af 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f256:	83 ec 0c             	sub    $0xc,%esp
f010f259:	68 18 83 13 f0       	push   $0xf0138318
f010f25e:	e8 ab 1a ff ff       	call   f0100d0e <cprintf>
f010f263:	83 c4 10             	add    $0x10,%esp
}
f010f266:	90                   	nop
f010f267:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f26a:	5b                   	pop    %ebx
f010f26b:	5e                   	pop    %esi
f010f26c:	5f                   	pop    %edi
f010f26d:	5d                   	pop    %ebp
f010f26e:	c3                   	ret    

f010f26f <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f26f:	55                   	push   %ebp
f010f270:	89 e5                	mov    %esp,%ebp
f010f272:	57                   	push   %edi
f010f273:	56                   	push   %esi
f010f274:	53                   	push   %ebx
f010f275:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f27b:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f282:	83 ec 0c             	sub    $0xc,%esp
f010f285:	ff 75 e0             	pushl  -0x20(%ebp)
f010f288:	e8 f7 29 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010f28d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f290:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010f297:	00 00 00 
f010f29a:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010f2a1:	00 00 00 
f010f2a4:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010f2ab:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f2ae:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f2b1:	bb 94 85 13 f0       	mov    $0xf0138594,%ebx
f010f2b6:	ba 07 00 00 00       	mov    $0x7,%edx
f010f2bb:	89 c7                	mov    %eax,%edi
f010f2bd:	89 de                	mov    %ebx,%esi
f010f2bf:	89 d1                	mov    %edx,%ecx
f010f2c1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f2c3:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f2c6:	bb b0 85 13 f0       	mov    $0xf01385b0,%ebx
f010f2cb:	ba 07 00 00 00       	mov    $0x7,%edx
f010f2d0:	89 c7                	mov    %eax,%edi
f010f2d2:	89 de                	mov    %ebx,%esi
f010f2d4:	89 d1                	mov    %edx,%ecx
f010f2d6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f2d8:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010f2df:	00 00 00 
f010f2e2:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010f2e9:	00 00 00 
f010f2ec:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010f2f3:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f2f6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f2fd:	e9 5f 01 00 00       	jmp    f010f461 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f305:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f309:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f30c:	c1 e2 04             	shl    $0x4,%edx
f010f30f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f312:	01 da                	add    %ebx,%edx
f010f314:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f31a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f31c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f31f:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f323:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f326:	c1 e2 04             	shl    $0x4,%edx
f010f329:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f32c:	01 f2                	add    %esi,%edx
f010f32e:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f334:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f336:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f33a:	0f 85 92 00 00 00    	jne    f010f3d2 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f340:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f345:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f348:	c1 e2 04             	shl    $0x4,%edx
f010f34b:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f34e:	01 fa                	add    %edi,%edx
f010f350:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f356:	89 02                	mov    %eax,(%edx)
f010f358:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f35b:	c1 e0 04             	shl    $0x4,%eax
f010f35e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f361:	01 d8                	add    %ebx,%eax
f010f363:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f368:	8b 00                	mov    (%eax),%eax
f010f36a:	85 c0                	test   %eax,%eax
f010f36c:	74 18                	je     f010f386 <test_alloc_block_BF+0x117>
f010f36e:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f373:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f379:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f37c:	c1 e1 04             	shl    $0x4,%ecx
f010f37f:	01 ca                	add    %ecx,%edx
f010f381:	89 50 04             	mov    %edx,0x4(%eax)
f010f384:	eb 13                	jmp    f010f399 <test_alloc_block_BF+0x12a>
f010f386:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f38c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f38f:	c1 e2 04             	shl    $0x4,%edx
f010f392:	01 d0                	add    %edx,%eax
f010f394:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010f399:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f39f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3a2:	c1 e2 04             	shl    $0x4,%edx
f010f3a5:	01 d0                	add    %edx,%eax
f010f3a7:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f3ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3af:	c1 e0 04             	shl    $0x4,%eax
f010f3b2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f3b5:	01 f0                	add    %esi,%eax
f010f3b7:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f3bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f3c2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f3c7:	40                   	inc    %eax
f010f3c8:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010f3cd:	e9 8c 00 00 00       	jmp    f010f45e <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f3d2:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f3d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3da:	c1 e2 04             	shl    $0x4,%edx
f010f3dd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f3e0:	01 fa                	add    %edi,%edx
f010f3e2:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f3e8:	89 02                	mov    %eax,(%edx)
f010f3ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3ed:	c1 e0 04             	shl    $0x4,%eax
f010f3f0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3f3:	01 d8                	add    %ebx,%eax
f010f3f5:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f3fa:	8b 00                	mov    (%eax),%eax
f010f3fc:	85 c0                	test   %eax,%eax
f010f3fe:	74 17                	je     f010f417 <test_alloc_block_BF+0x1a8>
f010f400:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f405:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f40b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f40e:	c1 e1 04             	shl    $0x4,%ecx
f010f411:	01 ca                	add    %ecx,%edx
f010f413:	89 10                	mov    %edx,(%eax)
f010f415:	eb 13                	jmp    f010f42a <test_alloc_block_BF+0x1bb>
f010f417:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f41d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f420:	c1 e2 04             	shl    $0x4,%edx
f010f423:	01 d0                	add    %edx,%eax
f010f425:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f42a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f430:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f433:	c1 e2 04             	shl    $0x4,%edx
f010f436:	01 d0                	add    %edx,%eax
f010f438:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010f43d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f440:	c1 e0 04             	shl    $0x4,%eax
f010f443:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f446:	01 f0                	add    %esi,%eax
f010f448:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f44d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f453:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f458:	40                   	inc    %eax
f010f459:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f45e:	ff 45 e4             	incl   -0x1c(%ebp)
f010f461:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f465:	0f 8e 97 fe ff ff    	jle    f010f302 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f46b:	83 ec 0c             	sub    $0xc,%esp
f010f46e:	68 00 00 40 00       	push   $0x400000
f010f473:	e8 9b 2d 02 00       	call   f0132213 <alloc_block_BF>
f010f478:	83 c4 10             	add    $0x10,%esp
f010f47b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f47e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f482:	74 17                	je     f010f49b <test_alloc_block_BF+0x22c>
f010f484:	83 ec 04             	sub    $0x4,%esp
f010f487:	68 a0 83 13 f0       	push   $0xf01383a0
f010f48c:	68 66 01 00 00       	push   $0x166
f010f491:	68 34 7c 13 f0       	push   $0xf0137c34
f010f496:	e8 6a 0d ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f49b:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f4a0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f4a3:	75 13                	jne    f010f4b8 <test_alloc_block_BF+0x249>
f010f4a5:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f4aa:	83 f8 07             	cmp    $0x7,%eax
f010f4ad:	75 09                	jne    f010f4b8 <test_alloc_block_BF+0x249>
f010f4af:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f4b4:	85 c0                	test   %eax,%eax
f010f4b6:	74 17                	je     f010f4cf <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f4b8:	83 ec 04             	sub    $0x4,%esp
f010f4bb:	68 60 81 13 f0       	push   $0xf0138160
f010f4c0:	68 6a 01 00 00       	push   $0x16a
f010f4c5:	68 34 7c 13 f0       	push   $0xf0137c34
f010f4ca:	e8 36 0d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f4cf:	83 ec 0c             	sub    $0xc,%esp
f010f4d2:	68 00 00 10 00       	push   $0x100000
f010f4d7:	e8 37 2d 02 00       	call   f0132213 <alloc_block_BF>
f010f4dc:	83 c4 10             	add    $0x10,%esp
f010f4df:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f4e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4e6:	74 1a                	je     f010f502 <test_alloc_block_BF+0x293>
f010f4e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4eb:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4ee:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f4f3:	75 0d                	jne    f010f502 <test_alloc_block_BF+0x293>
f010f4f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4f8:	8b 40 08             	mov    0x8(%eax),%eax
f010f4fb:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f500:	74 17                	je     f010f519 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f502:	83 ec 04             	sub    $0x4,%esp
f010f505:	68 14 84 13 f0       	push   $0xf0138414
f010f50a:	68 72 01 00 00       	push   $0x172
f010f50f:	68 34 7c 13 f0       	push   $0xf0137c34
f010f514:	e8 ec 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f519:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f51e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f521:	75 13                	jne    f010f536 <test_alloc_block_BF+0x2c7>
f010f523:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f528:	83 f8 06             	cmp    $0x6,%eax
f010f52b:	75 09                	jne    f010f536 <test_alloc_block_BF+0x2c7>
f010f52d:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f532:	85 c0                	test   %eax,%eax
f010f534:	74 17                	je     f010f54d <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f536:	83 ec 04             	sub    $0x4,%esp
f010f539:	68 58 84 13 f0       	push   $0xf0138458
f010f53e:	68 76 01 00 00       	push   $0x176
f010f543:	68 34 7c 13 f0       	push   $0xf0137c34
f010f548:	e8 b8 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f54d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f554:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f557:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f55e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f565:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f56c:	83 ec 0c             	sub    $0xc,%esp
f010f56f:	ff 75 d8             	pushl  -0x28(%ebp)
f010f572:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f578:	50                   	push   %eax
f010f579:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f57c:	50                   	push   %eax
f010f57d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f580:	50                   	push   %eax
f010f581:	68 24 26 78 f0       	push   $0xf0782624
f010f586:	e8 dd 17 00 00       	call   f0110d68 <check_list_data>
f010f58b:	83 c4 20             	add    $0x20,%esp
f010f58e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f591:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f595:	74 17                	je     f010f5ae <test_alloc_block_BF+0x33f>
f010f597:	83 ec 04             	sub    $0x4,%esp
f010f59a:	68 bc 84 13 f0       	push   $0xf01384bc
f010f59f:	68 7e 01 00 00       	push   $0x17e
f010f5a4:	68 34 7c 13 f0       	push   $0xf0137c34
f010f5a9:	e8 57 0c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f5ae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f5b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f5b7:	74 17                	je     f010f5d0 <test_alloc_block_BF+0x361>
f010f5b9:	83 ec 04             	sub    $0x4,%esp
f010f5bc:	68 08 85 13 f0       	push   $0xf0138508
f010f5c1:	68 7f 01 00 00       	push   $0x17f
f010f5c6:	68 34 7c 13 f0       	push   $0xf0137c34
f010f5cb:	e8 35 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f5d0:	83 ec 0c             	sub    $0xc,%esp
f010f5d3:	68 00 00 10 00       	push   $0x100000
f010f5d8:	e8 36 2c 02 00       	call   f0132213 <alloc_block_BF>
f010f5dd:	83 c4 10             	add    $0x10,%esp
f010f5e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f5e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5e7:	74 1a                	je     f010f603 <test_alloc_block_BF+0x394>
f010f5e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5ec:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5ef:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f5f4:	75 0d                	jne    f010f603 <test_alloc_block_BF+0x394>
f010f5f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5f9:	8b 40 08             	mov    0x8(%eax),%eax
f010f5fc:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f601:	74 17                	je     f010f61a <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f603:	83 ec 04             	sub    $0x4,%esp
f010f606:	68 14 84 13 f0       	push   $0xf0138414
f010f60b:	68 87 01 00 00       	push   $0x187
f010f610:	68 34 7c 13 f0       	push   $0xf0137c34
f010f615:	e8 eb 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f61a:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f61f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f622:	4a                   	dec    %edx
f010f623:	39 d0                	cmp    %edx,%eax
f010f625:	75 13                	jne    f010f63a <test_alloc_block_BF+0x3cb>
f010f627:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f62c:	83 f8 06             	cmp    $0x6,%eax
f010f62f:	75 09                	jne    f010f63a <test_alloc_block_BF+0x3cb>
f010f631:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f636:	85 c0                	test   %eax,%eax
f010f638:	74 17                	je     f010f651 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f63a:	83 ec 04             	sub    $0x4,%esp
f010f63d:	68 58 84 13 f0       	push   $0xf0138458
f010f642:	68 8b 01 00 00       	push   $0x18b
f010f647:	68 34 7c 13 f0       	push   $0xf0137c34
f010f64c:	e8 b4 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f651:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f658:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f65b:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f662:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f669:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f670:	83 ec 0c             	sub    $0xc,%esp
f010f673:	ff 75 d8             	pushl  -0x28(%ebp)
f010f676:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f67c:	50                   	push   %eax
f010f67d:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f680:	50                   	push   %eax
f010f681:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f684:	50                   	push   %eax
f010f685:	68 24 26 78 f0       	push   $0xf0782624
f010f68a:	e8 d9 16 00 00       	call   f0110d68 <check_list_data>
f010f68f:	83 c4 20             	add    $0x20,%esp
f010f692:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f695:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f699:	74 17                	je     f010f6b2 <test_alloc_block_BF+0x443>
f010f69b:	83 ec 04             	sub    $0x4,%esp
f010f69e:	68 bc 84 13 f0       	push   $0xf01384bc
f010f6a3:	68 93 01 00 00       	push   $0x193
f010f6a8:	68 34 7c 13 f0       	push   $0xf0137c34
f010f6ad:	e8 53 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f6b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f6bb:	74 17                	je     f010f6d4 <test_alloc_block_BF+0x465>
f010f6bd:	83 ec 04             	sub    $0x4,%esp
f010f6c0:	68 08 85 13 f0       	push   $0xf0138508
f010f6c5:	68 94 01 00 00       	push   $0x194
f010f6ca:	68 34 7c 13 f0       	push   $0xf0137c34
f010f6cf:	e8 31 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f6d4:	83 ec 0c             	sub    $0xc,%esp
f010f6d7:	68 00 0c 00 00       	push   $0xc00
f010f6dc:	e8 32 2b 02 00       	call   f0132213 <alloc_block_BF>
f010f6e1:	83 c4 10             	add    $0x10,%esp
f010f6e4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f6e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6eb:	74 1a                	je     f010f707 <test_alloc_block_BF+0x498>
f010f6ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6f0:	8b 40 0c             	mov    0xc(%eax),%eax
f010f6f3:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f6f8:	75 0d                	jne    f010f707 <test_alloc_block_BF+0x498>
f010f6fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6fd:	8b 40 08             	mov    0x8(%eax),%eax
f010f700:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f705:	74 17                	je     f010f71e <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f707:	83 ec 04             	sub    $0x4,%esp
f010f70a:	68 14 84 13 f0       	push   $0xf0138414
f010f70f:	68 9c 01 00 00       	push   $0x19c
f010f714:	68 34 7c 13 f0       	push   $0xf0137c34
f010f719:	e8 e7 0a ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f71e:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f723:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f726:	83 ea 02             	sub    $0x2,%edx
f010f729:	39 d0                	cmp    %edx,%eax
f010f72b:	75 13                	jne    f010f740 <test_alloc_block_BF+0x4d1>
f010f72d:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f732:	83 f8 06             	cmp    $0x6,%eax
f010f735:	75 09                	jne    f010f740 <test_alloc_block_BF+0x4d1>
f010f737:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f73c:	85 c0                	test   %eax,%eax
f010f73e:	74 17                	je     f010f757 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f740:	83 ec 04             	sub    $0x4,%esp
f010f743:	68 58 84 13 f0       	push   $0xf0138458
f010f748:	68 a0 01 00 00       	push   $0x1a0
f010f74d:	68 34 7c 13 f0       	push   $0xf0137c34
f010f752:	e8 ae 0a ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f757:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f75e:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f761:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f768:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f76f:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f776:	83 ec 0c             	sub    $0xc,%esp
f010f779:	ff 75 d8             	pushl  -0x28(%ebp)
f010f77c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f782:	50                   	push   %eax
f010f783:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f786:	50                   	push   %eax
f010f787:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f78a:	50                   	push   %eax
f010f78b:	68 24 26 78 f0       	push   $0xf0782624
f010f790:	e8 d3 15 00 00       	call   f0110d68 <check_list_data>
f010f795:	83 c4 20             	add    $0x20,%esp
f010f798:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f79b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f79f:	74 17                	je     f010f7b8 <test_alloc_block_BF+0x549>
f010f7a1:	83 ec 04             	sub    $0x4,%esp
f010f7a4:	68 bc 84 13 f0       	push   $0xf01384bc
f010f7a9:	68 a8 01 00 00       	push   $0x1a8
f010f7ae:	68 34 7c 13 f0       	push   $0xf0137c34
f010f7b3:	e8 4d 0a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f7b8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f7be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f7c1:	74 17                	je     f010f7da <test_alloc_block_BF+0x56b>
f010f7c3:	83 ec 04             	sub    $0x4,%esp
f010f7c6:	68 08 85 13 f0       	push   $0xf0138508
f010f7cb:	68 a9 01 00 00       	push   $0x1a9
f010f7d0:	68 34 7c 13 f0       	push   $0xf0137c34
f010f7d5:	e8 2b 0a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f7da:	83 ec 0c             	sub    $0xc,%esp
f010f7dd:	68 00 08 00 00       	push   $0x800
f010f7e2:	e8 2c 2a 02 00       	call   f0132213 <alloc_block_BF>
f010f7e7:	83 c4 10             	add    $0x10,%esp
f010f7ea:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f7ed:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7f1:	74 17                	je     f010f80a <test_alloc_block_BF+0x59b>
f010f7f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7f6:	8b 40 0c             	mov    0xc(%eax),%eax
f010f7f9:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f7fe:	75 0a                	jne    f010f80a <test_alloc_block_BF+0x59b>
f010f800:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f803:	8b 40 08             	mov    0x8(%eax),%eax
f010f806:	85 c0                	test   %eax,%eax
f010f808:	74 17                	je     f010f821 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f80a:	83 ec 04             	sub    $0x4,%esp
f010f80d:	68 14 84 13 f0       	push   $0xf0138414
f010f812:	68 b1 01 00 00       	push   $0x1b1
f010f817:	68 34 7c 13 f0       	push   $0xf0137c34
f010f81c:	e8 e4 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f821:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f826:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f829:	83 ea 02             	sub    $0x2,%edx
f010f82c:	39 d0                	cmp    %edx,%eax
f010f82e:	75 13                	jne    f010f843 <test_alloc_block_BF+0x5d4>
f010f830:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f835:	83 f8 05             	cmp    $0x5,%eax
f010f838:	75 09                	jne    f010f843 <test_alloc_block_BF+0x5d4>
f010f83a:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f83f:	85 c0                	test   %eax,%eax
f010f841:	74 17                	je     f010f85a <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f843:	83 ec 04             	sub    $0x4,%esp
f010f846:	68 58 84 13 f0       	push   $0xf0138458
f010f84b:	68 b5 01 00 00       	push   $0x1b5
f010f850:	68 34 7c 13 f0       	push   $0xf0137c34
f010f855:	e8 ab 09 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f85a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f861:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f864:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f86b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f872:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f879:	83 ec 0c             	sub    $0xc,%esp
f010f87c:	ff 75 d8             	pushl  -0x28(%ebp)
f010f87f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f885:	50                   	push   %eax
f010f886:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f889:	50                   	push   %eax
f010f88a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f88d:	50                   	push   %eax
f010f88e:	68 24 26 78 f0       	push   $0xf0782624
f010f893:	e8 d0 14 00 00       	call   f0110d68 <check_list_data>
f010f898:	83 c4 20             	add    $0x20,%esp
f010f89b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f89e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f8a2:	74 17                	je     f010f8bb <test_alloc_block_BF+0x64c>
f010f8a4:	83 ec 04             	sub    $0x4,%esp
f010f8a7:	68 bc 84 13 f0       	push   $0xf01384bc
f010f8ac:	68 bd 01 00 00       	push   $0x1bd
f010f8b1:	68 34 7c 13 f0       	push   $0xf0137c34
f010f8b6:	e8 4a 09 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f8bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f8c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f8c4:	74 17                	je     f010f8dd <test_alloc_block_BF+0x66e>
f010f8c6:	83 ec 04             	sub    $0x4,%esp
f010f8c9:	68 08 85 13 f0       	push   $0xf0138508
f010f8ce:	68 be 01 00 00       	push   $0x1be
f010f8d3:	68 34 7c 13 f0       	push   $0xf0137c34
f010f8d8:	e8 28 09 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f8dd:	83 ec 0c             	sub    $0xc,%esp
f010f8e0:	68 54 85 13 f0       	push   $0xf0138554
f010f8e5:	e8 24 14 ff ff       	call   f0100d0e <cprintf>
f010f8ea:	83 c4 10             	add    $0x10,%esp
}
f010f8ed:	90                   	nop
f010f8ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f8f1:	5b                   	pop    %ebx
f010f8f2:	5e                   	pop    %esi
f010f8f3:	5f                   	pop    %edi
f010f8f4:	5d                   	pop    %ebp
f010f8f5:	c3                   	ret    

f010f8f6 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f8f6:	55                   	push   %ebp
f010f8f7:	89 e5                	mov    %esp,%ebp
f010f8f9:	57                   	push   %edi
f010f8fa:	56                   	push   %esi
f010f8fb:	53                   	push   %ebx
f010f8fc:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f902:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f909:	83 ec 0c             	sub    $0xc,%esp
f010f90c:	ff 75 e0             	pushl  -0x20(%ebp)
f010f90f:	e8 70 23 02 00       	call   f0131c84 <initialize_MemBlocksList>
f010f914:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f917:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010f91e:	00 00 00 
f010f921:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010f928:	00 00 00 
f010f92b:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010f932:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f935:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f938:	bb 60 83 13 f0       	mov    $0xf0138360,%ebx
f010f93d:	ba 08 00 00 00       	mov    $0x8,%edx
f010f942:	89 c7                	mov    %eax,%edi
f010f944:	89 de                	mov    %ebx,%esi
f010f946:	89 d1                	mov    %edx,%ecx
f010f948:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f94a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f94d:	bb c0 87 13 f0       	mov    $0xf01387c0,%ebx
f010f952:	ba 08 00 00 00       	mov    $0x8,%edx
f010f957:	89 c7                	mov    %eax,%edi
f010f959:	89 de                	mov    %ebx,%esi
f010f95b:	89 d1                	mov    %edx,%ecx
f010f95d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f95f:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010f966:	00 00 00 
f010f969:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010f970:	00 00 00 
f010f973:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010f97a:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f97d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f984:	e9 5f 01 00 00       	jmp    f010fae8 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f989:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f98c:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f990:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f993:	c1 e2 04             	shl    $0x4,%edx
f010f996:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f999:	01 da                	add    %ebx,%edx
f010f99b:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f9a1:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f9a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9a6:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f9aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f9ad:	c1 e2 04             	shl    $0x4,%edx
f010f9b0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f9b3:	01 f2                	add    %esi,%edx
f010f9b5:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f9bb:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f9bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f9c1:	0f 85 92 00 00 00    	jne    f010fa59 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f9c7:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f9cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f9cf:	c1 e2 04             	shl    $0x4,%edx
f010f9d2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f9d5:	01 fa                	add    %edi,%edx
f010f9d7:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f9dd:	89 02                	mov    %eax,(%edx)
f010f9df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9e2:	c1 e0 04             	shl    $0x4,%eax
f010f9e5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f9e8:	01 d8                	add    %ebx,%eax
f010f9ea:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f9ef:	8b 00                	mov    (%eax),%eax
f010f9f1:	85 c0                	test   %eax,%eax
f010f9f3:	74 18                	je     f010fa0d <test_alloc_block_NF+0x117>
f010f9f5:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f9fa:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fa00:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fa03:	c1 e1 04             	shl    $0x4,%ecx
f010fa06:	01 ca                	add    %ecx,%edx
f010fa08:	89 50 04             	mov    %edx,0x4(%eax)
f010fa0b:	eb 13                	jmp    f010fa20 <test_alloc_block_NF+0x12a>
f010fa0d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fa13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa16:	c1 e2 04             	shl    $0x4,%edx
f010fa19:	01 d0                	add    %edx,%eax
f010fa1b:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010fa20:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fa26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa29:	c1 e2 04             	shl    $0x4,%edx
f010fa2c:	01 d0                	add    %edx,%eax
f010fa2e:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010fa33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa36:	c1 e0 04             	shl    $0x4,%eax
f010fa39:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fa3c:	01 f0                	add    %esi,%eax
f010fa3e:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fa43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fa49:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fa4e:	40                   	inc    %eax
f010fa4f:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010fa54:	e9 8c 00 00 00       	jmp    f010fae5 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fa59:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010fa5e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa61:	c1 e2 04             	shl    $0x4,%edx
f010fa64:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fa67:	01 fa                	add    %edi,%edx
f010fa69:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010fa6f:	89 02                	mov    %eax,(%edx)
f010fa71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa74:	c1 e0 04             	shl    $0x4,%eax
f010fa77:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fa7a:	01 d8                	add    %ebx,%eax
f010fa7c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fa81:	8b 00                	mov    (%eax),%eax
f010fa83:	85 c0                	test   %eax,%eax
f010fa85:	74 17                	je     f010fa9e <test_alloc_block_NF+0x1a8>
f010fa87:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010fa8c:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fa92:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fa95:	c1 e1 04             	shl    $0x4,%ecx
f010fa98:	01 ca                	add    %ecx,%edx
f010fa9a:	89 10                	mov    %edx,(%eax)
f010fa9c:	eb 13                	jmp    f010fab1 <test_alloc_block_NF+0x1bb>
f010fa9e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010faa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010faa7:	c1 e2 04             	shl    $0x4,%edx
f010faaa:	01 d0                	add    %edx,%eax
f010faac:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010fab1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fab7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010faba:	c1 e2 04             	shl    $0x4,%edx
f010fabd:	01 d0                	add    %edx,%eax
f010fabf:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010fac4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fac7:	c1 e0 04             	shl    $0x4,%eax
f010faca:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010facd:	01 f0                	add    %esi,%eax
f010facf:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fad4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fada:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fadf:	40                   	inc    %eax
f010fae0:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fae5:	ff 45 e4             	incl   -0x1c(%ebp)
f010fae8:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010faec:	0f 8e 97 fe ff ff    	jle    f010f989 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010faf2:	83 ec 0c             	sub    $0xc,%esp
f010faf5:	68 00 00 a0 00       	push   $0xa00000
f010fafa:	e8 25 29 02 00       	call   f0132424 <alloc_block_NF>
f010faff:	83 c4 10             	add    $0x10,%esp
f010fb02:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010fb05:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb09:	74 17                	je     f010fb22 <test_alloc_block_NF+0x22c>
f010fb0b:	83 ec 04             	sub    $0x4,%esp
f010fb0e:	68 cc 85 13 f0       	push   $0xf01385cc
f010fb13:	68 e1 01 00 00       	push   $0x1e1
f010fb18:	68 34 7c 13 f0       	push   $0xf0137c34
f010fb1d:	e8 e3 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb22:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fb27:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fb2a:	75 13                	jne    f010fb3f <test_alloc_block_NF+0x249>
f010fb2c:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fb31:	83 f8 08             	cmp    $0x8,%eax
f010fb34:	75 09                	jne    f010fb3f <test_alloc_block_NF+0x249>
f010fb36:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fb3b:	85 c0                	test   %eax,%eax
f010fb3d:	74 17                	je     f010fb56 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fb3f:	83 ec 04             	sub    $0x4,%esp
f010fb42:	68 60 81 13 f0       	push   $0xf0138160
f010fb47:	68 e5 01 00 00       	push   $0x1e5
f010fb4c:	68 34 7c 13 f0       	push   $0xf0137c34
f010fb51:	e8 af 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010fb56:	83 ec 0c             	sub    $0xc,%esp
f010fb59:	68 00 28 00 00       	push   $0x2800
f010fb5e:	e8 c1 28 02 00       	call   f0132424 <alloc_block_NF>
f010fb63:	83 c4 10             	add    $0x10,%esp
f010fb66:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fb69:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb6d:	74 1a                	je     f010fb89 <test_alloc_block_NF+0x293>
f010fb6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb72:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb75:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010fb7a:	75 0d                	jne    f010fb89 <test_alloc_block_NF+0x293>
f010fb7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb7f:	8b 40 08             	mov    0x8(%eax),%eax
f010fb82:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010fb87:	74 17                	je     f010fba0 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fb89:	83 ec 04             	sub    $0x4,%esp
f010fb8c:	68 40 86 13 f0       	push   $0xf0138640
f010fb91:	68 ed 01 00 00       	push   $0x1ed
f010fb96:	68 34 7c 13 f0       	push   $0xf0137c34
f010fb9b:	e8 65 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fba0:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fba5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fba8:	75 13                	jne    f010fbbd <test_alloc_block_NF+0x2c7>
f010fbaa:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fbaf:	83 f8 07             	cmp    $0x7,%eax
f010fbb2:	75 09                	jne    f010fbbd <test_alloc_block_NF+0x2c7>
f010fbb4:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fbb9:	85 c0                	test   %eax,%eax
f010fbbb:	74 17                	je     f010fbd4 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbbd:	83 ec 04             	sub    $0x4,%esp
f010fbc0:	68 84 86 13 f0       	push   $0xf0138684
f010fbc5:	68 f1 01 00 00       	push   $0x1f1
f010fbca:	68 34 7c 13 f0       	push   $0xf0137c34
f010fbcf:	e8 31 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fbd4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fbdb:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010fbde:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010fbe5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010fbec:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbf3:	83 ec 0c             	sub    $0xc,%esp
f010fbf6:	ff 75 d8             	pushl  -0x28(%ebp)
f010fbf9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fbff:	50                   	push   %eax
f010fc00:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fc03:	50                   	push   %eax
f010fc04:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fc07:	50                   	push   %eax
f010fc08:	68 24 26 78 f0       	push   $0xf0782624
f010fc0d:	e8 56 11 00 00       	call   f0110d68 <check_list_data>
f010fc12:	83 c4 20             	add    $0x20,%esp
f010fc15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc18:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc1c:	74 17                	je     f010fc35 <test_alloc_block_NF+0x33f>
f010fc1e:	83 ec 04             	sub    $0x4,%esp
f010fc21:	68 e8 86 13 f0       	push   $0xf01386e8
f010fc26:	68 f9 01 00 00       	push   $0x1f9
f010fc2b:	68 34 7c 13 f0       	push   $0xf0137c34
f010fc30:	e8 d0 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc35:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fc3b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc3e:	74 17                	je     f010fc57 <test_alloc_block_NF+0x361>
f010fc40:	83 ec 04             	sub    $0x4,%esp
f010fc43:	68 34 87 13 f0       	push   $0xf0138734
f010fc48:	68 fa 01 00 00       	push   $0x1fa
f010fc4d:	68 34 7c 13 f0       	push   $0xf0137c34
f010fc52:	e8 ae 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010fc57:	83 ec 0c             	sub    $0xc,%esp
f010fc5a:	68 00 00 20 00       	push   $0x200000
f010fc5f:	e8 c0 27 02 00       	call   f0132424 <alloc_block_NF>
f010fc64:	83 c4 10             	add    $0x10,%esp
f010fc67:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010fc6a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc6e:	74 1a                	je     f010fc8a <test_alloc_block_NF+0x394>
f010fc70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc73:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc76:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010fc7b:	75 0d                	jne    f010fc8a <test_alloc_block_NF+0x394>
f010fc7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc80:	8b 40 08             	mov    0x8(%eax),%eax
f010fc83:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fc88:	74 17                	je     f010fca1 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fc8a:	83 ec 04             	sub    $0x4,%esp
f010fc8d:	68 40 86 13 f0       	push   $0xf0138640
f010fc92:	68 03 02 00 00       	push   $0x203
f010fc97:	68 34 7c 13 f0       	push   $0xf0137c34
f010fc9c:	e8 64 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fca1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fca6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fca9:	75 13                	jne    f010fcbe <test_alloc_block_NF+0x3c8>
f010fcab:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fcb0:	83 f8 06             	cmp    $0x6,%eax
f010fcb3:	75 09                	jne    f010fcbe <test_alloc_block_NF+0x3c8>
f010fcb5:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fcba:	85 c0                	test   %eax,%eax
f010fcbc:	74 17                	je     f010fcd5 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fcbe:	83 ec 04             	sub    $0x4,%esp
f010fcc1:	68 84 86 13 f0       	push   $0xf0138684
f010fcc6:	68 07 02 00 00       	push   $0x207
f010fccb:	68 34 7c 13 f0       	push   $0xf0137c34
f010fcd0:	e8 30 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fcd5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fcdc:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fcdf:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010fce6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010fced:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fcf4:	83 ec 0c             	sub    $0xc,%esp
f010fcf7:	ff 75 d8             	pushl  -0x28(%ebp)
f010fcfa:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fd00:	50                   	push   %eax
f010fd01:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd04:	50                   	push   %eax
f010fd05:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fd08:	50                   	push   %eax
f010fd09:	68 24 26 78 f0       	push   $0xf0782624
f010fd0e:	e8 55 10 00 00       	call   f0110d68 <check_list_data>
f010fd13:	83 c4 20             	add    $0x20,%esp
f010fd16:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd19:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd1d:	74 17                	je     f010fd36 <test_alloc_block_NF+0x440>
f010fd1f:	83 ec 04             	sub    $0x4,%esp
f010fd22:	68 e8 86 13 f0       	push   $0xf01386e8
f010fd27:	68 0f 02 00 00       	push   $0x20f
f010fd2c:	68 34 7c 13 f0       	push   $0xf0137c34
f010fd31:	e8 cf 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd36:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fd3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd3f:	74 17                	je     f010fd58 <test_alloc_block_NF+0x462>
f010fd41:	83 ec 04             	sub    $0x4,%esp
f010fd44:	68 34 87 13 f0       	push   $0xf0138734
f010fd49:	68 10 02 00 00       	push   $0x210
f010fd4e:	68 34 7c 13 f0       	push   $0xf0137c34
f010fd53:	e8 ad 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010fd58:	83 ec 0c             	sub    $0xc,%esp
f010fd5b:	68 00 00 08 00       	push   $0x80000
f010fd60:	e8 bf 26 02 00       	call   f0132424 <alloc_block_NF>
f010fd65:	83 c4 10             	add    $0x10,%esp
f010fd68:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010fd6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd6f:	74 1a                	je     f010fd8b <test_alloc_block_NF+0x495>
f010fd71:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd74:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd77:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010fd7c:	75 0d                	jne    f010fd8b <test_alloc_block_NF+0x495>
f010fd7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd81:	8b 40 08             	mov    0x8(%eax),%eax
f010fd84:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fd89:	74 17                	je     f010fda2 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fd8b:	83 ec 04             	sub    $0x4,%esp
f010fd8e:	68 40 86 13 f0       	push   $0xf0138640
f010fd93:	68 19 02 00 00       	push   $0x219
f010fd98:	68 34 7c 13 f0       	push   $0xf0137c34
f010fd9d:	e8 63 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fda2:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fda7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fdaa:	4a                   	dec    %edx
f010fdab:	39 d0                	cmp    %edx,%eax
f010fdad:	75 13                	jne    f010fdc2 <test_alloc_block_NF+0x4cc>
f010fdaf:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fdb4:	83 f8 06             	cmp    $0x6,%eax
f010fdb7:	75 09                	jne    f010fdc2 <test_alloc_block_NF+0x4cc>
f010fdb9:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fdbe:	85 c0                	test   %eax,%eax
f010fdc0:	74 17                	je     f010fdd9 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fdc2:	83 ec 04             	sub    $0x4,%esp
f010fdc5:	68 84 86 13 f0       	push   $0xf0138684
f010fdca:	68 1d 02 00 00       	push   $0x21d
f010fdcf:	68 34 7c 13 f0       	push   $0xf0137c34
f010fdd4:	e8 2c 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fdd9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fde0:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fde3:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010fdea:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010fdf1:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fdf8:	83 ec 0c             	sub    $0xc,%esp
f010fdfb:	ff 75 d8             	pushl  -0x28(%ebp)
f010fdfe:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fe04:	50                   	push   %eax
f010fe05:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe08:	50                   	push   %eax
f010fe09:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fe0c:	50                   	push   %eax
f010fe0d:	68 24 26 78 f0       	push   $0xf0782624
f010fe12:	e8 51 0f 00 00       	call   f0110d68 <check_list_data>
f010fe17:	83 c4 20             	add    $0x20,%esp
f010fe1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe1d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe21:	74 17                	je     f010fe3a <test_alloc_block_NF+0x544>
f010fe23:	83 ec 04             	sub    $0x4,%esp
f010fe26:	68 e8 86 13 f0       	push   $0xf01386e8
f010fe2b:	68 25 02 00 00       	push   $0x225
f010fe30:	68 34 7c 13 f0       	push   $0xf0137c34
f010fe35:	e8 cb 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe3a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fe40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe43:	74 17                	je     f010fe5c <test_alloc_block_NF+0x566>
f010fe45:	83 ec 04             	sub    $0x4,%esp
f010fe48:	68 34 87 13 f0       	push   $0xf0138734
f010fe4d:	68 26 02 00 00       	push   $0x226
f010fe52:	68 34 7c 13 f0       	push   $0xf0137c34
f010fe57:	e8 a9 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010fe5c:	83 ec 0c             	sub    $0xc,%esp
f010fe5f:	68 00 fc 07 00       	push   $0x7fc00
f010fe64:	e8 bb 25 02 00       	call   f0132424 <alloc_block_NF>
f010fe69:	83 c4 10             	add    $0x10,%esp
f010fe6c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010fe6f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fe73:	74 1a                	je     f010fe8f <test_alloc_block_NF+0x599>
f010fe75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe78:	8b 40 0c             	mov    0xc(%eax),%eax
f010fe7b:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010fe80:	75 0d                	jne    f010fe8f <test_alloc_block_NF+0x599>
f010fe82:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe85:	8b 40 08             	mov    0x8(%eax),%eax
f010fe88:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010fe8d:	74 17                	je     f010fea6 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fe8f:	83 ec 04             	sub    $0x4,%esp
f010fe92:	68 40 86 13 f0       	push   $0xf0138640
f010fe97:	68 2f 02 00 00       	push   $0x22f
f010fe9c:	68 34 7c 13 f0       	push   $0xf0137c34
f010fea1:	e8 5f 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fea6:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010feab:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010feae:	83 ea 02             	sub    $0x2,%edx
f010feb1:	39 d0                	cmp    %edx,%eax
f010feb3:	75 13                	jne    f010fec8 <test_alloc_block_NF+0x5d2>
f010feb5:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010feba:	83 f8 06             	cmp    $0x6,%eax
f010febd:	75 09                	jne    f010fec8 <test_alloc_block_NF+0x5d2>
f010febf:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fec4:	85 c0                	test   %eax,%eax
f010fec6:	74 17                	je     f010fedf <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fec8:	83 ec 04             	sub    $0x4,%esp
f010fecb:	68 84 86 13 f0       	push   $0xf0138684
f010fed0:	68 33 02 00 00       	push   $0x233
f010fed5:	68 34 7c 13 f0       	push   $0xf0137c34
f010feda:	e8 26 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fedf:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fee6:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fee9:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010fef0:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010fef7:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fefe:	83 ec 0c             	sub    $0xc,%esp
f010ff01:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff04:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ff0a:	50                   	push   %eax
f010ff0b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff0e:	50                   	push   %eax
f010ff0f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ff12:	50                   	push   %eax
f010ff13:	68 24 26 78 f0       	push   $0xf0782624
f010ff18:	e8 4b 0e 00 00       	call   f0110d68 <check_list_data>
f010ff1d:	83 c4 20             	add    $0x20,%esp
f010ff20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff23:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff27:	74 17                	je     f010ff40 <test_alloc_block_NF+0x64a>
f010ff29:	83 ec 04             	sub    $0x4,%esp
f010ff2c:	68 e8 86 13 f0       	push   $0xf01386e8
f010ff31:	68 3b 02 00 00       	push   $0x23b
f010ff36:	68 34 7c 13 f0       	push   $0xf0137c34
f010ff3b:	e8 c5 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff40:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ff46:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff49:	74 17                	je     f010ff62 <test_alloc_block_NF+0x66c>
f010ff4b:	83 ec 04             	sub    $0x4,%esp
f010ff4e:	68 34 87 13 f0       	push   $0xf0138734
f010ff53:	68 3c 02 00 00       	push   $0x23c
f010ff58:	68 34 7c 13 f0       	push   $0xf0137c34
f010ff5d:	e8 a3 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010ff62:	83 ec 0c             	sub    $0xc,%esp
f010ff65:	68 00 0c 00 00       	push   $0xc00
f010ff6a:	e8 b5 24 02 00       	call   f0132424 <alloc_block_NF>
f010ff6f:	83 c4 10             	add    $0x10,%esp
f010ff72:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010ff75:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ff79:	74 17                	je     f010ff92 <test_alloc_block_NF+0x69c>
f010ff7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff7e:	8b 40 0c             	mov    0xc(%eax),%eax
f010ff81:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ff86:	75 0a                	jne    f010ff92 <test_alloc_block_NF+0x69c>
f010ff88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff8b:	8b 40 08             	mov    0x8(%eax),%eax
f010ff8e:	85 c0                	test   %eax,%eax
f010ff90:	74 17                	je     f010ffa9 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ff92:	83 ec 04             	sub    $0x4,%esp
f010ff95:	68 40 86 13 f0       	push   $0xf0138640
f010ff9a:	68 45 02 00 00       	push   $0x245
f010ff9f:	68 34 7c 13 f0       	push   $0xf0137c34
f010ffa4:	e8 5c 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ffa9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010ffae:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ffb1:	83 ea 02             	sub    $0x2,%edx
f010ffb4:	39 d0                	cmp    %edx,%eax
f010ffb6:	75 13                	jne    f010ffcb <test_alloc_block_NF+0x6d5>
f010ffb8:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010ffbd:	83 f8 05             	cmp    $0x5,%eax
f010ffc0:	75 09                	jne    f010ffcb <test_alloc_block_NF+0x6d5>
f010ffc2:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ffc7:	85 c0                	test   %eax,%eax
f010ffc9:	74 17                	je     f010ffe2 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ffcb:	83 ec 04             	sub    $0x4,%esp
f010ffce:	68 84 86 13 f0       	push   $0xf0138684
f010ffd3:	68 49 02 00 00       	push   $0x249
f010ffd8:	68 34 7c 13 f0       	push   $0xf0137c34
f010ffdd:	e8 23 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ffe2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ffe9:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010ffec:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fff3:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010fffa:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110001:	83 ec 0c             	sub    $0xc,%esp
f0110004:	ff 75 d8             	pushl  -0x28(%ebp)
f0110007:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011000d:	50                   	push   %eax
f011000e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110011:	50                   	push   %eax
f0110012:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110015:	50                   	push   %eax
f0110016:	68 24 26 78 f0       	push   $0xf0782624
f011001b:	e8 48 0d 00 00       	call   f0110d68 <check_list_data>
f0110020:	83 c4 20             	add    $0x20,%esp
f0110023:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110026:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011002a:	74 17                	je     f0110043 <test_alloc_block_NF+0x74d>
f011002c:	83 ec 04             	sub    $0x4,%esp
f011002f:	68 e8 86 13 f0       	push   $0xf01386e8
f0110034:	68 51 02 00 00       	push   $0x251
f0110039:	68 34 7c 13 f0       	push   $0xf0137c34
f011003e:	e8 c2 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110043:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110049:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011004c:	74 17                	je     f0110065 <test_alloc_block_NF+0x76f>
f011004e:	83 ec 04             	sub    $0x4,%esp
f0110051:	68 34 87 13 f0       	push   $0xf0138734
f0110056:	68 52 02 00 00       	push   $0x252
f011005b:	68 34 7c 13 f0       	push   $0xf0137c34
f0110060:	e8 a0 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f0110065:	83 ec 0c             	sub    $0xc,%esp
f0110068:	68 00 04 00 00       	push   $0x400
f011006d:	e8 b2 23 02 00       	call   f0132424 <alloc_block_NF>
f0110072:	83 c4 10             	add    $0x10,%esp
f0110075:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110078:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011007c:	74 1a                	je     f0110098 <test_alloc_block_NF+0x7a2>
f011007e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110081:	8b 40 0c             	mov    0xc(%eax),%eax
f0110084:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110089:	75 0d                	jne    f0110098 <test_alloc_block_NF+0x7a2>
f011008b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011008e:	8b 40 08             	mov    0x8(%eax),%eax
f0110091:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110096:	74 17                	je     f01100af <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110098:	83 ec 04             	sub    $0x4,%esp
f011009b:	68 40 86 13 f0       	push   $0xf0138640
f01100a0:	68 5b 02 00 00       	push   $0x25b
f01100a5:	68 34 7c 13 f0       	push   $0xf0137c34
f01100aa:	e8 56 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01100af:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01100b4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01100b7:	83 ea 03             	sub    $0x3,%edx
f01100ba:	39 d0                	cmp    %edx,%eax
f01100bc:	75 13                	jne    f01100d1 <test_alloc_block_NF+0x7db>
f01100be:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01100c3:	83 f8 05             	cmp    $0x5,%eax
f01100c6:	75 09                	jne    f01100d1 <test_alloc_block_NF+0x7db>
f01100c8:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01100cd:	85 c0                	test   %eax,%eax
f01100cf:	74 17                	je     f01100e8 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100d1:	83 ec 04             	sub    $0x4,%esp
f01100d4:	68 84 86 13 f0       	push   $0xf0138684
f01100d9:	68 5f 02 00 00       	push   $0x25f
f01100de:	68 34 7c 13 f0       	push   $0xf0137c34
f01100e3:	e8 1d 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01100e8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01100ef:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01100f2:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01100f9:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110100:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110107:	83 ec 0c             	sub    $0xc,%esp
f011010a:	ff 75 d8             	pushl  -0x28(%ebp)
f011010d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110113:	50                   	push   %eax
f0110114:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110117:	50                   	push   %eax
f0110118:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011011b:	50                   	push   %eax
f011011c:	68 24 26 78 f0       	push   $0xf0782624
f0110121:	e8 42 0c 00 00       	call   f0110d68 <check_list_data>
f0110126:	83 c4 20             	add    $0x20,%esp
f0110129:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011012c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110130:	74 17                	je     f0110149 <test_alloc_block_NF+0x853>
f0110132:	83 ec 04             	sub    $0x4,%esp
f0110135:	68 e8 86 13 f0       	push   $0xf01386e8
f011013a:	68 67 02 00 00       	push   $0x267
f011013f:	68 34 7c 13 f0       	push   $0xf0137c34
f0110144:	e8 bc 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110149:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011014f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110152:	74 17                	je     f011016b <test_alloc_block_NF+0x875>
f0110154:	83 ec 04             	sub    $0x4,%esp
f0110157:	68 34 87 13 f0       	push   $0xf0138734
f011015c:	68 68 02 00 00       	push   $0x268
f0110161:	68 34 7c 13 f0       	push   $0xf0137c34
f0110166:	e8 9a 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f011016b:	83 ec 0c             	sub    $0xc,%esp
f011016e:	68 80 87 13 f0       	push   $0xf0138780
f0110173:	e8 96 0b ff ff       	call   f0100d0e <cprintf>
f0110178:	83 c4 10             	add    $0x10,%esp

}
f011017b:	90                   	nop
f011017c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011017f:	5b                   	pop    %ebx
f0110180:	5e                   	pop    %esi
f0110181:	5f                   	pop    %edi
f0110182:	5d                   	pop    %ebp
f0110183:	c3                   	ret    

f0110184 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110184:	55                   	push   %ebp
f0110185:	89 e5                	mov    %esp,%ebp
f0110187:	57                   	push   %edi
f0110188:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f011018e:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110195:	83 ec 0c             	sub    $0xc,%esp
f0110198:	ff 75 f4             	pushl  -0xc(%ebp)
f011019b:	e8 e4 1a 02 00       	call   f0131c84 <initialize_MemBlocksList>
f01101a0:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f01101a3:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f01101aa:	00 00 00 
f01101ad:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f01101b4:	00 00 00 
f01101b7:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f01101be:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01101c1:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f01101c8:	00 00 00 
f01101cb:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f01101d2:	00 00 00 
f01101d5:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f01101dc:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f01101df:	8d 55 c0             	lea    -0x40(%ebp),%edx
f01101e2:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01101e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01101ec:	89 d7                	mov    %edx,%edi
f01101ee:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f01101f0:	8d 55 98             	lea    -0x68(%ebp),%edx
f01101f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01101f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01101fd:	89 d7                	mov    %edx,%edi
f01101ff:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110201:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110208:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f011020f:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110216:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110219:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110220:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110221:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110224:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011022b:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011022c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011022f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110233:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110236:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110239:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011023d:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110240:	83 ec 0c             	sub    $0xc,%esp
f0110243:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110246:	50                   	push   %eax
f0110247:	e8 a5 27 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f011024c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f011024f:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110254:	85 c0                	test   %eax,%eax
f0110256:	75 14                	jne    f011026c <test_insert_sorted_with_merge_freeList+0xe8>
f0110258:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f011025d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110260:	75 0a                	jne    f011026c <test_insert_sorted_with_merge_freeList+0xe8>
f0110262:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110267:	83 f8 01             	cmp    $0x1,%eax
f011026a:	74 17                	je     f0110283 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011026c:	83 ec 04             	sub    $0x4,%esp
f011026f:	68 e0 87 13 f0       	push   $0xf01387e0
f0110274:	68 88 02 00 00       	push   $0x288
f0110279:	68 34 7c 13 f0       	push   $0xf0137c34
f011027e:	e8 82 ff fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110283:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f011028a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110291:	83 ec 0c             	sub    $0xc,%esp
f0110294:	ff 75 f0             	pushl  -0x10(%ebp)
f0110297:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011029a:	50                   	push   %eax
f011029b:	8d 45 98             	lea    -0x68(%ebp),%eax
f011029e:	50                   	push   %eax
f011029f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01102a2:	50                   	push   %eax
f01102a3:	68 24 26 78 f0       	push   $0xf0782624
f01102a8:	e8 bb 0a 00 00       	call   f0110d68 <check_list_data>
f01102ad:	83 c4 20             	add    $0x20,%esp
f01102b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01102b3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102b7:	74 17                	je     f01102d0 <test_insert_sorted_with_merge_freeList+0x14c>
f01102b9:	83 ec 04             	sub    $0x4,%esp
f01102bc:	68 4c 88 13 f0       	push   $0xf013884c
f01102c1:	68 8e 02 00 00       	push   $0x28e
f01102c6:	68 34 7c 13 f0       	push   $0xf0137c34
f01102cb:	e8 35 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01102d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01102d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01102d6:	74 17                	je     f01102ef <test_insert_sorted_with_merge_freeList+0x16b>
f01102d8:	83 ec 04             	sub    $0x4,%esp
f01102db:	68 a0 88 13 f0       	push   $0xf01388a0
f01102e0:	68 8f 02 00 00       	push   $0x28f
f01102e5:	68 34 7c 13 f0       	push   $0xf0137c34
f01102ea:	e8 16 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f01102ef:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f01102f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102f9:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110300:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110301:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110304:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f011030b:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011030c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011030f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110313:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110319:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011031c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110320:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110323:	83 ec 0c             	sub    $0xc,%esp
f0110326:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f011032c:	50                   	push   %eax
f011032d:	e8 bf 26 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0110332:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110335:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f011033a:	85 c0                	test   %eax,%eax
f011033c:	75 14                	jne    f0110352 <test_insert_sorted_with_merge_freeList+0x1ce>
f011033e:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110343:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110346:	75 0a                	jne    f0110352 <test_insert_sorted_with_merge_freeList+0x1ce>
f0110348:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011034d:	83 f8 02             	cmp    $0x2,%eax
f0110350:	74 17                	je     f0110369 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110352:	83 ec 04             	sub    $0x4,%esp
f0110355:	68 e0 87 13 f0       	push   $0xf01387e0
f011035a:	68 9e 02 00 00       	push   $0x29e
f011035f:	68 34 7c 13 f0       	push   $0xf0137c34
f0110364:	e8 9c fe fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110369:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110370:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110377:	83 ec 0c             	sub    $0xc,%esp
f011037a:	ff 75 f0             	pushl  -0x10(%ebp)
f011037d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110380:	50                   	push   %eax
f0110381:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110384:	50                   	push   %eax
f0110385:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110388:	50                   	push   %eax
f0110389:	68 24 26 78 f0       	push   $0xf0782624
f011038e:	e8 d5 09 00 00       	call   f0110d68 <check_list_data>
f0110393:	83 c4 20             	add    $0x20,%esp
f0110396:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110399:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011039d:	74 17                	je     f01103b6 <test_insert_sorted_with_merge_freeList+0x232>
f011039f:	83 ec 04             	sub    $0x4,%esp
f01103a2:	68 4c 88 13 f0       	push   $0xf013884c
f01103a7:	68 a4 02 00 00       	push   $0x2a4
f01103ac:	68 34 7c 13 f0       	push   $0xf0137c34
f01103b1:	e8 4f fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01103b6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01103b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01103bc:	74 17                	je     f01103d5 <test_insert_sorted_with_merge_freeList+0x251>
f01103be:	83 ec 04             	sub    $0x4,%esp
f01103c1:	68 a0 88 13 f0       	push   $0xf01388a0
f01103c6:	68 a5 02 00 00       	push   $0x2a5
f01103cb:	68 34 7c 13 f0       	push   $0xf0137c34
f01103d0:	e8 30 fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f01103d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f01103dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103df:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f01103e6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01103e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103ea:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01103f1:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01103f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103f5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01103f9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f01103ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110402:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110406:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f011040c:	83 ec 0c             	sub    $0xc,%esp
f011040f:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110415:	50                   	push   %eax
f0110416:	e8 d6 25 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f011041b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011041e:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110423:	85 c0                	test   %eax,%eax
f0110425:	75 14                	jne    f011043b <test_insert_sorted_with_merge_freeList+0x2b7>
f0110427:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f011042c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011042f:	75 0a                	jne    f011043b <test_insert_sorted_with_merge_freeList+0x2b7>
f0110431:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110436:	83 f8 03             	cmp    $0x3,%eax
f0110439:	74 17                	je     f0110452 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011043b:	83 ec 04             	sub    $0x4,%esp
f011043e:	68 e0 87 13 f0       	push   $0xf01387e0
f0110443:	68 b4 02 00 00       	push   $0x2b4
f0110448:	68 34 7c 13 f0       	push   $0xf0137c34
f011044d:	e8 b3 fd fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110452:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110459:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110460:	83 ec 0c             	sub    $0xc,%esp
f0110463:	ff 75 f0             	pushl  -0x10(%ebp)
f0110466:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110469:	50                   	push   %eax
f011046a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011046d:	50                   	push   %eax
f011046e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110471:	50                   	push   %eax
f0110472:	68 24 26 78 f0       	push   $0xf0782624
f0110477:	e8 ec 08 00 00       	call   f0110d68 <check_list_data>
f011047c:	83 c4 20             	add    $0x20,%esp
f011047f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110482:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110486:	74 17                	je     f011049f <test_insert_sorted_with_merge_freeList+0x31b>
f0110488:	83 ec 04             	sub    $0x4,%esp
f011048b:	68 4c 88 13 f0       	push   $0xf013884c
f0110490:	68 ba 02 00 00       	push   $0x2ba
f0110495:	68 34 7c 13 f0       	push   $0xf0137c34
f011049a:	e8 66 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011049f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01104a2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01104a5:	74 17                	je     f01104be <test_insert_sorted_with_merge_freeList+0x33a>
f01104a7:	83 ec 04             	sub    $0x4,%esp
f01104aa:	68 a0 88 13 f0       	push   $0xf01388a0
f01104af:	68 bb 02 00 00       	push   $0x2bb
f01104b4:	68 34 7c 13 f0       	push   $0xf0137c34
f01104b9:	e8 47 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f01104be:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f01104c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104c8:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f01104cf:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01104d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104d3:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01104da:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01104db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104de:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01104e2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f01104e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104eb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01104ef:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f01104f5:	83 ec 0c             	sub    $0xc,%esp
f01104f8:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01104fe:	50                   	push   %eax
f01104ff:	e8 ed 24 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0110504:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110507:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f011050c:	85 c0                	test   %eax,%eax
f011050e:	75 14                	jne    f0110524 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110510:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110515:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110518:	75 0a                	jne    f0110524 <test_insert_sorted_with_merge_freeList+0x3a0>
f011051a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011051f:	83 f8 04             	cmp    $0x4,%eax
f0110522:	74 17                	je     f011053b <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110524:	83 ec 04             	sub    $0x4,%esp
f0110527:	68 e0 87 13 f0       	push   $0xf01387e0
f011052c:	68 ca 02 00 00       	push   $0x2ca
f0110531:	68 34 7c 13 f0       	push   $0xf0137c34
f0110536:	e8 ca fc fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011053b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110542:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110549:	83 ec 0c             	sub    $0xc,%esp
f011054c:	ff 75 f0             	pushl  -0x10(%ebp)
f011054f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110552:	50                   	push   %eax
f0110553:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110556:	50                   	push   %eax
f0110557:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011055a:	50                   	push   %eax
f011055b:	68 24 26 78 f0       	push   $0xf0782624
f0110560:	e8 03 08 00 00       	call   f0110d68 <check_list_data>
f0110565:	83 c4 20             	add    $0x20,%esp
f0110568:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011056b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011056f:	74 17                	je     f0110588 <test_insert_sorted_with_merge_freeList+0x404>
f0110571:	83 ec 04             	sub    $0x4,%esp
f0110574:	68 4c 88 13 f0       	push   $0xf013884c
f0110579:	68 d0 02 00 00       	push   $0x2d0
f011057e:	68 34 7c 13 f0       	push   $0xf0137c34
f0110583:	e8 7d fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110588:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011058b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011058e:	74 17                	je     f01105a7 <test_insert_sorted_with_merge_freeList+0x423>
f0110590:	83 ec 04             	sub    $0x4,%esp
f0110593:	68 a0 88 13 f0       	push   $0xf01388a0
f0110598:	68 d1 02 00 00       	push   $0x2d1
f011059d:	68 34 7c 13 f0       	push   $0xf0137c34
f01105a2:	e8 5e fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f01105a7:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f01105ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105b1:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f01105b8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f01105b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105bc:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f01105c3:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01105c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105c7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01105cb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f01105d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105d4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105d8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f01105de:	83 ec 0c             	sub    $0xc,%esp
f01105e1:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01105e7:	50                   	push   %eax
f01105e8:	e8 04 24 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f01105ed:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01105f0:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01105f5:	85 c0                	test   %eax,%eax
f01105f7:	75 17                	jne    f0110610 <test_insert_sorted_with_merge_freeList+0x48c>
f01105f9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01105fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110601:	42                   	inc    %edx
f0110602:	39 d0                	cmp    %edx,%eax
f0110604:	75 0a                	jne    f0110610 <test_insert_sorted_with_merge_freeList+0x48c>
f0110606:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011060b:	83 f8 04             	cmp    $0x4,%eax
f011060e:	74 17                	je     f0110627 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110610:	83 ec 04             	sub    $0x4,%esp
f0110613:	68 e0 87 13 f0       	push   $0xf01387e0
f0110618:	68 e3 02 00 00       	push   $0x2e3
f011061d:	68 34 7c 13 f0       	push   $0xf0137c34
f0110622:	e8 de fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110627:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011062e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110635:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110638:	8d 50 ff             	lea    -0x1(%eax),%edx
f011063b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011063e:	48                   	dec    %eax
f011063f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110646:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011064a:	01 c8                	add    %ecx,%eax
f011064c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110650:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110653:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011065a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011065b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011065e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110665:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110666:	83 ec 0c             	sub    $0xc,%esp
f0110669:	ff 75 f0             	pushl  -0x10(%ebp)
f011066c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011066f:	50                   	push   %eax
f0110670:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110673:	50                   	push   %eax
f0110674:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110677:	50                   	push   %eax
f0110678:	68 24 26 78 f0       	push   $0xf0782624
f011067d:	e8 e6 06 00 00       	call   f0110d68 <check_list_data>
f0110682:	83 c4 20             	add    $0x20,%esp
f0110685:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110688:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011068c:	74 17                	je     f01106a5 <test_insert_sorted_with_merge_freeList+0x521>
f011068e:	83 ec 04             	sub    $0x4,%esp
f0110691:	68 4c 88 13 f0       	push   $0xf013884c
f0110696:	68 ec 02 00 00       	push   $0x2ec
f011069b:	68 34 7c 13 f0       	push   $0xf0137c34
f01106a0:	e8 60 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01106a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01106a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01106ab:	74 17                	je     f01106c4 <test_insert_sorted_with_merge_freeList+0x540>
f01106ad:	83 ec 04             	sub    $0x4,%esp
f01106b0:	68 a0 88 13 f0       	push   $0xf01388a0
f01106b5:	68 ed 02 00 00       	push   $0x2ed
f01106ba:	68 34 7c 13 f0       	push   $0xf0137c34
f01106bf:	e8 41 fb fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01106c4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01106cb:	83 ec 0c             	sub    $0xc,%esp
f01106ce:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106d1:	50                   	push   %eax
f01106d2:	e8 5d 07 00 00       	call   f0110e34 <check_avaliable_list_data>
f01106d7:	83 c4 10             	add    $0x10,%esp
f01106da:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01106dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01106e0:	8d 50 01             	lea    0x1(%eax),%edx
f01106e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01106e6:	39 c2                	cmp    %eax,%edx
f01106e8:	74 17                	je     f0110701 <test_insert_sorted_with_merge_freeList+0x57d>
f01106ea:	83 ec 04             	sub    $0x4,%esp
f01106ed:	68 f4 88 13 f0       	push   $0xf01388f4
f01106f2:	68 f2 02 00 00       	push   $0x2f2
f01106f7:	68 34 7c 13 f0       	push   $0xf0137c34
f01106fc:	e8 04 fb fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110701:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110705:	74 17                	je     f011071e <test_insert_sorted_with_merge_freeList+0x59a>
f0110707:	83 ec 04             	sub    $0x4,%esp
f011070a:	68 4c 89 13 f0       	push   $0xf013894c
f011070f:	68 f3 02 00 00       	push   $0x2f3
f0110714:	68 34 7c 13 f0       	push   $0xf0137c34
f0110719:	e8 e7 fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f011071e:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110725:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110728:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f011072f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110730:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110733:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011073a:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011073b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011073e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110742:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110748:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011074b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011074f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110755:	83 ec 0c             	sub    $0xc,%esp
f0110758:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011075e:	50                   	push   %eax
f011075f:	e8 8d 22 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0110764:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110767:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f011076c:	85 c0                	test   %eax,%eax
f011076e:	75 19                	jne    f0110789 <test_insert_sorted_with_merge_freeList+0x605>
f0110770:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110775:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110778:	83 c2 02             	add    $0x2,%edx
f011077b:	39 d0                	cmp    %edx,%eax
f011077d:	75 0a                	jne    f0110789 <test_insert_sorted_with_merge_freeList+0x605>
f011077f:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110784:	83 f8 04             	cmp    $0x4,%eax
f0110787:	74 17                	je     f01107a0 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110789:	83 ec 04             	sub    $0x4,%esp
f011078c:	68 e0 87 13 f0       	push   $0xf01387e0
f0110791:	68 05 03 00 00       	push   $0x305
f0110796:	68 34 7c 13 f0       	push   $0xf0137c34
f011079b:	e8 65 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01107a0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01107a7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01107ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01107b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b7:	48                   	dec    %eax
f01107b8:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01107bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107bf:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107c3:	01 c8                	add    %ecx,%eax
f01107c5:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01107c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107cc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01107d3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01107d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107d7:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01107de:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01107df:	83 ec 0c             	sub    $0xc,%esp
f01107e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01107e5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107e8:	50                   	push   %eax
f01107e9:	8d 45 98             	lea    -0x68(%ebp),%eax
f01107ec:	50                   	push   %eax
f01107ed:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01107f0:	50                   	push   %eax
f01107f1:	68 24 26 78 f0       	push   $0xf0782624
f01107f6:	e8 6d 05 00 00       	call   f0110d68 <check_list_data>
f01107fb:	83 c4 20             	add    $0x20,%esp
f01107fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110801:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110805:	74 17                	je     f011081e <test_insert_sorted_with_merge_freeList+0x69a>
f0110807:	83 ec 04             	sub    $0x4,%esp
f011080a:	68 4c 88 13 f0       	push   $0xf013884c
f011080f:	68 0e 03 00 00       	push   $0x30e
f0110814:	68 34 7c 13 f0       	push   $0xf0137c34
f0110819:	e8 e7 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011081e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110821:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110824:	74 17                	je     f011083d <test_insert_sorted_with_merge_freeList+0x6b9>
f0110826:	83 ec 04             	sub    $0x4,%esp
f0110829:	68 a0 88 13 f0       	push   $0xf01388a0
f011082e:	68 0f 03 00 00       	push   $0x30f
f0110833:	68 34 7c 13 f0       	push   $0xf0137c34
f0110838:	e8 c8 f9 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011083d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110844:	83 ec 0c             	sub    $0xc,%esp
f0110847:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011084a:	50                   	push   %eax
f011084b:	e8 e4 05 00 00       	call   f0110e34 <check_avaliable_list_data>
f0110850:	83 c4 10             	add    $0x10,%esp
f0110853:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110856:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110859:	8d 50 02             	lea    0x2(%eax),%edx
f011085c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011085f:	39 c2                	cmp    %eax,%edx
f0110861:	74 17                	je     f011087a <test_insert_sorted_with_merge_freeList+0x6f6>
f0110863:	83 ec 04             	sub    $0x4,%esp
f0110866:	68 f4 88 13 f0       	push   $0xf01388f4
f011086b:	68 14 03 00 00       	push   $0x314
f0110870:	68 34 7c 13 f0       	push   $0xf0137c34
f0110875:	e8 8b f9 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011087a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011087e:	74 17                	je     f0110897 <test_insert_sorted_with_merge_freeList+0x713>
f0110880:	83 ec 04             	sub    $0x4,%esp
f0110883:	68 4c 89 13 f0       	push   $0xf013894c
f0110888:	68 15 03 00 00       	push   $0x315
f011088d:	68 34 7c 13 f0       	push   $0xf0137c34
f0110892:	e8 6e f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110897:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011089e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108a1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01108a8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01108a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108ac:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01108b3:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01108b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108b7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01108bb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f01108c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108c4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108c8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01108ce:	83 ec 0c             	sub    $0xc,%esp
f01108d1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01108d7:	50                   	push   %eax
f01108d8:	e8 14 21 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f01108dd:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01108e0:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01108e5:	85 c0                	test   %eax,%eax
f01108e7:	75 19                	jne    f0110902 <test_insert_sorted_with_merge_freeList+0x77e>
f01108e9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01108ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01108f1:	83 c2 03             	add    $0x3,%edx
f01108f4:	39 d0                	cmp    %edx,%eax
f01108f6:	75 0a                	jne    f0110902 <test_insert_sorted_with_merge_freeList+0x77e>
f01108f8:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01108fd:	83 f8 04             	cmp    $0x4,%eax
f0110900:	74 17                	je     f0110919 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110902:	83 ec 04             	sub    $0x4,%esp
f0110905:	68 e0 87 13 f0       	push   $0xf01387e0
f011090a:	68 28 03 00 00       	push   $0x328
f011090f:	68 34 7c 13 f0       	push   $0xf0137c34
f0110914:	e8 ec f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110919:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110920:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110927:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011092a:	8d 50 01             	lea    0x1(%eax),%edx
f011092d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110930:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110934:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110938:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011093b:	8d 50 01             	lea    0x1(%eax),%edx
f011093e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110941:	40                   	inc    %eax
f0110942:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110946:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110949:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011094d:	01 c8                	add    %ecx,%eax
f011094f:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110953:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110956:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011095d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011095e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110961:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110968:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110969:	83 ec 0c             	sub    $0xc,%esp
f011096c:	ff 75 f0             	pushl  -0x10(%ebp)
f011096f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110972:	50                   	push   %eax
f0110973:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110976:	50                   	push   %eax
f0110977:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011097a:	50                   	push   %eax
f011097b:	68 24 26 78 f0       	push   $0xf0782624
f0110980:	e8 e3 03 00 00       	call   f0110d68 <check_list_data>
f0110985:	83 c4 20             	add    $0x20,%esp
f0110988:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011098b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011098f:	74 17                	je     f01109a8 <test_insert_sorted_with_merge_freeList+0x824>
f0110991:	83 ec 04             	sub    $0x4,%esp
f0110994:	68 4c 88 13 f0       	push   $0xf013884c
f0110999:	68 32 03 00 00       	push   $0x332
f011099e:	68 34 7c 13 f0       	push   $0xf0137c34
f01109a3:	e8 5d f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01109a8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01109ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01109ae:	74 17                	je     f01109c7 <test_insert_sorted_with_merge_freeList+0x843>
f01109b0:	83 ec 04             	sub    $0x4,%esp
f01109b3:	68 a0 88 13 f0       	push   $0xf01388a0
f01109b8:	68 33 03 00 00       	push   $0x333
f01109bd:	68 34 7c 13 f0       	push   $0xf0137c34
f01109c2:	e8 3e f8 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01109c7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01109ce:	83 ec 0c             	sub    $0xc,%esp
f01109d1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109d4:	50                   	push   %eax
f01109d5:	e8 5a 04 00 00       	call   f0110e34 <check_avaliable_list_data>
f01109da:	83 c4 10             	add    $0x10,%esp
f01109dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01109e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109e3:	8d 50 03             	lea    0x3(%eax),%edx
f01109e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01109e9:	39 c2                	cmp    %eax,%edx
f01109eb:	74 17                	je     f0110a04 <test_insert_sorted_with_merge_freeList+0x880>
f01109ed:	83 ec 04             	sub    $0x4,%esp
f01109f0:	68 f4 88 13 f0       	push   $0xf01388f4
f01109f5:	68 38 03 00 00       	push   $0x338
f01109fa:	68 34 7c 13 f0       	push   $0xf0137c34
f01109ff:	e8 01 f8 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110a04:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a08:	74 17                	je     f0110a21 <test_insert_sorted_with_merge_freeList+0x89d>
f0110a0a:	83 ec 04             	sub    $0x4,%esp
f0110a0d:	68 4c 89 13 f0       	push   $0xf013894c
f0110a12:	68 39 03 00 00       	push   $0x339
f0110a17:	68 34 7c 13 f0       	push   $0xf0137c34
f0110a1c:	e8 e4 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110a21:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a2b:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110a32:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110a33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a36:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110a3d:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110a3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a41:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a45:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110a4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a4e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a52:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110a58:	83 ec 0c             	sub    $0xc,%esp
f0110a5b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110a61:	50                   	push   %eax
f0110a62:	e8 8a 1f 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0110a67:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110a6a:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110a6f:	85 c0                	test   %eax,%eax
f0110a71:	75 19                	jne    f0110a8c <test_insert_sorted_with_merge_freeList+0x908>
f0110a73:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110a78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110a7b:	83 c2 04             	add    $0x4,%edx
f0110a7e:	39 d0                	cmp    %edx,%eax
f0110a80:	75 0a                	jne    f0110a8c <test_insert_sorted_with_merge_freeList+0x908>
f0110a82:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110a87:	83 f8 04             	cmp    $0x4,%eax
f0110a8a:	74 17                	je     f0110aa3 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a8c:	83 ec 04             	sub    $0x4,%esp
f0110a8f:	68 e0 87 13 f0       	push   $0xf01387e0
f0110a94:	68 4c 03 00 00       	push   $0x34c
f0110a99:	68 34 7c 13 f0       	push   $0xf0137c34
f0110a9e:	e8 62 f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110aa3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110aaa:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110ab1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0110ab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aba:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110abe:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110ac2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac5:	8d 50 01             	lea    0x1(%eax),%edx
f0110ac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110acb:	40                   	inc    %eax
f0110acc:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ad3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ad7:	01 c8                	add    %ecx,%eax
f0110ad9:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110add:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ae0:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110ae7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aeb:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110af2:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110af3:	83 ec 0c             	sub    $0xc,%esp
f0110af6:	ff 75 f0             	pushl  -0x10(%ebp)
f0110af9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110afc:	50                   	push   %eax
f0110afd:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b00:	50                   	push   %eax
f0110b01:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b04:	50                   	push   %eax
f0110b05:	68 24 26 78 f0       	push   $0xf0782624
f0110b0a:	e8 59 02 00 00       	call   f0110d68 <check_list_data>
f0110b0f:	83 c4 20             	add    $0x20,%esp
f0110b12:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b15:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b19:	74 17                	je     f0110b32 <test_insert_sorted_with_merge_freeList+0x9ae>
f0110b1b:	83 ec 04             	sub    $0x4,%esp
f0110b1e:	68 4c 88 13 f0       	push   $0xf013884c
f0110b23:	68 56 03 00 00       	push   $0x356
f0110b28:	68 34 7c 13 f0       	push   $0xf0137c34
f0110b2d:	e8 d3 f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b32:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b38:	74 17                	je     f0110b51 <test_insert_sorted_with_merge_freeList+0x9cd>
f0110b3a:	83 ec 04             	sub    $0x4,%esp
f0110b3d:	68 a0 88 13 f0       	push   $0xf01388a0
f0110b42:	68 57 03 00 00       	push   $0x357
f0110b47:	68 34 7c 13 f0       	push   $0xf0137c34
f0110b4c:	e8 b4 f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110b51:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110b58:	83 ec 0c             	sub    $0xc,%esp
f0110b5b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b5e:	50                   	push   %eax
f0110b5f:	e8 d0 02 00 00       	call   f0110e34 <check_avaliable_list_data>
f0110b64:	83 c4 10             	add    $0x10,%esp
f0110b67:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b6d:	8d 50 04             	lea    0x4(%eax),%edx
f0110b70:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b73:	39 c2                	cmp    %eax,%edx
f0110b75:	74 17                	je     f0110b8e <test_insert_sorted_with_merge_freeList+0xa0a>
f0110b77:	83 ec 04             	sub    $0x4,%esp
f0110b7a:	68 f4 88 13 f0       	push   $0xf01388f4
f0110b7f:	68 5c 03 00 00       	push   $0x35c
f0110b84:	68 34 7c 13 f0       	push   $0xf0137c34
f0110b89:	e8 77 f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110b8e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b92:	74 17                	je     f0110bab <test_insert_sorted_with_merge_freeList+0xa27>
f0110b94:	83 ec 04             	sub    $0x4,%esp
f0110b97:	68 4c 89 13 f0       	push   $0xf013894c
f0110b9c:	68 5d 03 00 00       	push   $0x35d
f0110ba1:	68 34 7c 13 f0       	push   $0xf0137c34
f0110ba6:	e8 5a f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110bab:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110bb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb5:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110bbc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bc0:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110bc7:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bcb:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bcf:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bdc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110be2:	83 ec 0c             	sub    $0xc,%esp
f0110be5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110beb:	50                   	push   %eax
f0110bec:	e8 00 1e 02 00       	call   f01329f1 <insert_sorted_with_merge_freeList>
f0110bf1:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110bf4:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110bf9:	85 c0                	test   %eax,%eax
f0110bfb:	75 19                	jne    f0110c16 <test_insert_sorted_with_merge_freeList+0xa92>
f0110bfd:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110c02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c05:	83 c2 06             	add    $0x6,%edx
f0110c08:	39 d0                	cmp    %edx,%eax
f0110c0a:	75 0a                	jne    f0110c16 <test_insert_sorted_with_merge_freeList+0xa92>
f0110c0c:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110c11:	83 f8 03             	cmp    $0x3,%eax
f0110c14:	74 17                	je     f0110c2d <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c16:	83 ec 04             	sub    $0x4,%esp
f0110c19:	68 e0 87 13 f0       	push   $0xf01387e0
f0110c1e:	68 70 03 00 00       	push   $0x370
f0110c23:	68 34 7c 13 f0       	push   $0xf0137c34
f0110c28:	e8 d8 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c2d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110c34:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110c3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c3e:	48                   	dec    %eax
f0110c3f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c46:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c4a:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c50:	48                   	dec    %eax
f0110c51:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110c55:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c58:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c5c:	01 c1                	add    %eax,%ecx
f0110c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c61:	40                   	inc    %eax
f0110c62:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c66:	01 c8                	add    %ecx,%eax
f0110c68:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110c6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c6f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c76:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110c77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c7a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110c81:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110c82:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c85:	40                   	inc    %eax
f0110c86:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c8d:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0110c8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c91:	40                   	inc    %eax
f0110c92:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110c99:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c9a:	83 ec 0c             	sub    $0xc,%esp
f0110c9d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ca0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ca3:	50                   	push   %eax
f0110ca4:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110ca7:	50                   	push   %eax
f0110ca8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110cab:	50                   	push   %eax
f0110cac:	68 24 26 78 f0       	push   $0xf0782624
f0110cb1:	e8 b2 00 00 00       	call   f0110d68 <check_list_data>
f0110cb6:	83 c4 20             	add    $0x20,%esp
f0110cb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110cbc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110cc0:	74 17                	je     f0110cd9 <test_insert_sorted_with_merge_freeList+0xb55>
f0110cc2:	83 ec 04             	sub    $0x4,%esp
f0110cc5:	68 4c 88 13 f0       	push   $0xf013884c
f0110cca:	68 7c 03 00 00       	push   $0x37c
f0110ccf:	68 34 7c 13 f0       	push   $0xf0137c34
f0110cd4:	e8 2c f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110cd9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110cdc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110cdf:	74 17                	je     f0110cf8 <test_insert_sorted_with_merge_freeList+0xb74>
f0110ce1:	83 ec 04             	sub    $0x4,%esp
f0110ce4:	68 a0 88 13 f0       	push   $0xf01388a0
f0110ce9:	68 7d 03 00 00       	push   $0x37d
f0110cee:	68 34 7c 13 f0       	push   $0xf0137c34
f0110cf3:	e8 0d f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110cf8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110cff:	83 ec 0c             	sub    $0xc,%esp
f0110d02:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d05:	50                   	push   %eax
f0110d06:	e8 29 01 00 00       	call   f0110e34 <check_avaliable_list_data>
f0110d0b:	83 c4 10             	add    $0x10,%esp
f0110d0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110d14:	8d 50 06             	lea    0x6(%eax),%edx
f0110d17:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d1a:	39 c2                	cmp    %eax,%edx
f0110d1c:	74 17                	je     f0110d35 <test_insert_sorted_with_merge_freeList+0xbb1>
f0110d1e:	83 ec 04             	sub    $0x4,%esp
f0110d21:	68 f4 88 13 f0       	push   $0xf01388f4
f0110d26:	68 82 03 00 00       	push   $0x382
f0110d2b:	68 34 7c 13 f0       	push   $0xf0137c34
f0110d30:	e8 d0 f4 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d35:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d39:	74 17                	je     f0110d52 <test_insert_sorted_with_merge_freeList+0xbce>
f0110d3b:	83 ec 04             	sub    $0x4,%esp
f0110d3e:	68 4c 89 13 f0       	push   $0xf013894c
f0110d43:	68 83 03 00 00       	push   $0x383
f0110d48:	68 34 7c 13 f0       	push   $0xf0137c34
f0110d4d:	e8 b3 f4 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110d52:	83 ec 0c             	sub    $0xc,%esp
f0110d55:	68 a8 89 13 f0       	push   $0xf01389a8
f0110d5a:	e8 af ff fe ff       	call   f0100d0e <cprintf>
f0110d5f:	83 c4 10             	add    $0x10,%esp

}
f0110d62:	90                   	nop
f0110d63:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110d66:	c9                   	leave  
f0110d67:	c3                   	ret    

f0110d68 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110d68:	55                   	push   %ebp
f0110d69:	89 e5                	mov    %esp,%ebp
f0110d6b:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110d6e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110d75:	8b 45 14             	mov    0x14(%ebp),%eax
f0110d78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0110d7e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110d85:	8b 45 08             	mov    0x8(%ebp),%eax
f0110d88:	8b 00                	mov    (%eax),%eax
f0110d8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110d8d:	eb 6e                	jmp    f0110dfd <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110d8f:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110d92:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110d95:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110d9c:	8b 45 10             	mov    0x10(%ebp),%eax
f0110d9f:	01 d0                	add    %edx,%eax
f0110da1:	8b 00                	mov    (%eax),%eax
f0110da3:	85 c0                	test   %eax,%eax
f0110da5:	74 e8                	je     f0110d8f <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110da7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110daa:	8b 50 08             	mov    0x8(%eax),%edx
f0110dad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110db0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110db7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110dba:	01 c8                	add    %ecx,%eax
f0110dbc:	8b 00                	mov    (%eax),%eax
f0110dbe:	39 c2                	cmp    %eax,%edx
f0110dc0:	75 1b                	jne    f0110ddd <check_list_data+0x75>
f0110dc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110dc5:	8b 50 0c             	mov    0xc(%eax),%edx
f0110dc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110dcb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110dd2:	8b 45 10             	mov    0x10(%ebp),%eax
f0110dd5:	01 c8                	add    %ecx,%eax
f0110dd7:	8b 00                	mov    (%eax),%eax
f0110dd9:	39 c2                	cmp    %eax,%edx
f0110ddb:	74 07                	je     f0110de4 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110ddd:	b8 00 00 00 00       	mov    $0x0,%eax
f0110de2:	eb 4e                	jmp    f0110e32 <check_list_data+0xca>
		}
		(*size)++;
f0110de4:	8b 45 14             	mov    0x14(%ebp),%eax
f0110de7:	8b 00                	mov    (%eax),%eax
f0110de9:	8d 50 01             	lea    0x1(%eax),%edx
f0110dec:	8b 45 14             	mov    0x14(%ebp),%eax
f0110def:	89 10                	mov    %edx,(%eax)
		i++;
f0110df1:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110df4:	8b 45 08             	mov    0x8(%ebp),%eax
f0110df7:	8b 40 08             	mov    0x8(%eax),%eax
f0110dfa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110dfd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110e01:	74 07                	je     f0110e0a <check_list_data+0xa2>
f0110e03:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e06:	8b 00                	mov    (%eax),%eax
f0110e08:	eb 05                	jmp    f0110e0f <check_list_data+0xa7>
f0110e0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0110e0f:	8b 55 08             	mov    0x8(%ebp),%edx
f0110e12:	89 42 08             	mov    %eax,0x8(%edx)
f0110e15:	8b 45 08             	mov    0x8(%ebp),%eax
f0110e18:	8b 40 08             	mov    0x8(%eax),%eax
f0110e1b:	85 c0                	test   %eax,%eax
f0110e1d:	0f 85 6f ff ff ff    	jne    f0110d92 <check_list_data+0x2a>
f0110e23:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110e27:	0f 85 65 ff ff ff    	jne    f0110d92 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110e2d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110e32:	c9                   	leave  
f0110e33:	c3                   	ret    

f0110e34 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110e34:	55                   	push   %ebp
f0110e35:	89 e5                	mov    %esp,%ebp
f0110e37:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110e3a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110e41:	8b 45 08             	mov    0x8(%ebp),%eax
f0110e44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110e4a:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0110e4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110e52:	eb 30                	jmp    f0110e84 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110e54:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e57:	8b 40 08             	mov    0x8(%eax),%eax
f0110e5a:	85 c0                	test   %eax,%eax
f0110e5c:	75 0a                	jne    f0110e68 <check_avaliable_list_data+0x34>
f0110e5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e61:	8b 40 0c             	mov    0xc(%eax),%eax
f0110e64:	85 c0                	test   %eax,%eax
f0110e66:	74 07                	je     f0110e6f <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0110e6d:	eb 40                	jmp    f0110eaf <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0110e72:	8b 00                	mov    (%eax),%eax
f0110e74:	8d 50 01             	lea    0x1(%eax),%edx
f0110e77:	8b 45 08             	mov    0x8(%ebp),%eax
f0110e7a:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110e7c:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f0110e81:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110e84:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110e88:	74 07                	je     f0110e91 <check_avaliable_list_data+0x5d>
f0110e8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e8d:	8b 00                	mov    (%eax),%eax
f0110e8f:	eb 05                	jmp    f0110e96 <check_avaliable_list_data+0x62>
f0110e91:	b8 00 00 00 00       	mov    $0x0,%eax
f0110e96:	a3 60 26 78 f0       	mov    %eax,0xf0782660
f0110e9b:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f0110ea0:	85 c0                	test   %eax,%eax
f0110ea2:	75 b0                	jne    f0110e54 <check_avaliable_list_data+0x20>
f0110ea4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110ea8:	75 aa                	jne    f0110e54 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110eaa:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110eaf:	c9                   	leave  
f0110eb0:	c3                   	ret    

f0110eb1 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110eb1:	55                   	push   %ebp
f0110eb2:	89 e5                	mov    %esp,%ebp
f0110eb4:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110eb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ec1:	8b 00                	mov    (%eax),%eax
f0110ec3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110ec6:	eb 27                	jmp    f0110eef <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0110ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ecb:	8b 50 0c             	mov    0xc(%eax),%edx
f0110ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ed1:	8b 40 08             	mov    0x8(%eax),%eax
f0110ed4:	83 ec 04             	sub    $0x4,%esp
f0110ed7:	52                   	push   %edx
f0110ed8:	50                   	push   %eax
f0110ed9:	68 f8 7c 13 f0       	push   $0xf0137cf8
f0110ede:	e8 2b fe fe ff       	call   f0100d0e <cprintf>
f0110ee3:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ee9:	8b 40 08             	mov    0x8(%eax),%eax
f0110eec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110eef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110ef3:	74 07                	je     f0110efc <show_list_content+0x4b>
f0110ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ef8:	8b 00                	mov    (%eax),%eax
f0110efa:	eb 05                	jmp    f0110f01 <show_list_content+0x50>
f0110efc:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f01:	8b 55 08             	mov    0x8(%ebp),%edx
f0110f04:	89 42 08             	mov    %eax,0x8(%edx)
f0110f07:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f0a:	8b 40 08             	mov    0x8(%eax),%eax
f0110f0d:	85 c0                	test   %eax,%eax
f0110f0f:	75 b7                	jne    f0110ec8 <show_list_content+0x17>
f0110f11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110f15:	75 b1                	jne    f0110ec8 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110f17:	90                   	nop
f0110f18:	c9                   	leave  
f0110f19:	c3                   	ret    

f0110f1a <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110f1a:	55                   	push   %ebp
f0110f1b:	89 e5                	mov    %esp,%ebp
f0110f1d:	57                   	push   %edi
f0110f1e:	56                   	push   %esi
f0110f1f:	53                   	push   %ebx
f0110f20:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110f26:	83 ec 0c             	sub    $0xc,%esp
f0110f29:	68 fc 89 13 f0       	push   $0xf01389fc
f0110f2e:	e8 db fd fe ff       	call   f0100d0e <cprintf>
f0110f33:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110f36:	83 ec 0c             	sub    $0xc,%esp
f0110f39:	68 20 8a 13 f0       	push   $0xf0138a20
f0110f3e:	e8 cb fd fe ff       	call   f0100d0e <cprintf>
f0110f43:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110f46:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110f4d:	83 ec 0c             	sub    $0xc,%esp
f0110f50:	68 3c 8a 13 f0       	push   $0xf0138a3c
f0110f55:	e8 b4 fd fe ff       	call   f0100d0e <cprintf>
f0110f5a:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110f5d:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110f60:	bb f6 8a 13 f0       	mov    $0xf0138af6,%ebx
f0110f65:	ba 03 00 00 00       	mov    $0x3,%edx
f0110f6a:	89 c7                	mov    %eax,%edi
f0110f6c:	89 de                	mov    %ebx,%esi
f0110f6e:	89 d1                	mov    %edx,%ecx
f0110f70:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110f72:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110f75:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110f7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f7f:	89 d7                	mov    %edx,%edi
f0110f81:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110f83:	83 ec 0c             	sub    $0xc,%esp
f0110f86:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110f89:	50                   	push   %eax
f0110f8a:	e8 e1 fd fe ff       	call   f0100d70 <execute_command>
f0110f8f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110f92:	83 ec 0c             	sub    $0xc,%esp
f0110f95:	68 6a 8a 13 f0       	push   $0xf0138a6a
f0110f9a:	e8 6f fd fe ff       	call   f0100d0e <cprintf>
f0110f9f:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110fa2:	83 ec 0c             	sub    $0xc,%esp
f0110fa5:	68 80 8a 13 f0       	push   $0xf0138a80
f0110faa:	e8 5f fd fe ff       	call   f0100d0e <cprintf>
f0110faf:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110fb2:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110fb9:	65 00 00 
f0110fbc:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110fc2:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110fc7:	b8 00 00 00 00       	mov    $0x0,%eax
f0110fcc:	89 d7                	mov    %edx,%edi
f0110fce:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110fd0:	83 ec 0c             	sub    $0xc,%esp
f0110fd3:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110fd9:	50                   	push   %eax
f0110fda:	e8 91 fd fe ff       	call   f0100d70 <execute_command>
f0110fdf:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110fe2:	83 ec 0c             	sub    $0xc,%esp
f0110fe5:	68 6a 8a 13 f0       	push   $0xf0138a6a
f0110fea:	e8 1f fd fe ff       	call   f0100d0e <cprintf>
f0110fef:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110ff2:	83 ec 0c             	sub    $0xc,%esp
f0110ff5:	68 a8 8a 13 f0       	push   $0xf0138aa8
f0110ffa:	e8 0f fd fe ff       	call   f0100d0e <cprintf>
f0110fff:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111002:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111009:	75 00 00 
f011100c:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111012:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111017:	b8 00 00 00 00       	mov    $0x0,%eax
f011101c:	89 d7                	mov    %edx,%edi
f011101e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111020:	83 ec 0c             	sub    $0xc,%esp
f0111023:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111029:	50                   	push   %eax
f011102a:	e8 41 fd fe ff       	call   f0100d70 <execute_command>
f011102f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111032:	83 ec 0c             	sub    $0xc,%esp
f0111035:	68 6a 8a 13 f0       	push   $0xf0138a6a
f011103a:	e8 cf fc fe ff       	call   f0100d0e <cprintf>
f011103f:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111042:	83 ec 0c             	sub    $0xc,%esp
f0111045:	68 d0 8a 13 f0       	push   $0xf0138ad0
f011104a:	e8 bf fc fe ff       	call   f0100d0e <cprintf>
f011104f:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111052:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111059:	6d 6d 00 
f011105c:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111062:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111067:	b8 00 00 00 00       	mov    $0x0,%eax
f011106c:	89 d7                	mov    %edx,%edi
f011106e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111070:	83 ec 0c             	sub    $0xc,%esp
f0111073:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111079:	50                   	push   %eax
f011107a:	e8 f1 fc fe ff       	call   f0100d70 <execute_command>
f011107f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111082:	83 ec 0c             	sub    $0xc,%esp
f0111085:	68 6a 8a 13 f0       	push   $0xf0138a6a
f011108a:	e8 7f fc fe ff       	call   f0100d0e <cprintf>
f011108f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111092:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111097:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011109a:	5b                   	pop    %ebx
f011109b:	5e                   	pop    %esi
f011109c:	5f                   	pop    %edi
f011109d:	5d                   	pop    %ebp
f011109e:	c3                   	ret    

f011109f <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011109f:	55                   	push   %ebp
f01110a0:	89 e5                	mov    %esp,%ebp
f01110a2:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01110a5:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01110ac:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01110b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01110ba:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01110bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01110c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01110c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01110c8:	50                   	push   %eax
f01110c9:	e8 df 6a ff ff       	call   f0107bad <pt_set_page_permissions>
f01110ce:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01110d1:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01110d6:	ff 75 ec             	pushl  -0x14(%ebp)
f01110d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01110dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01110df:	50                   	push   %eax
f01110e0:	e8 9e 4e 00 00       	call   f0115f83 <CP>
f01110e5:	83 c4 10             	add    $0x10,%esp
f01110e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01110eb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110ef:	74 14                	je     f0111105 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01110f1:	83 ec 04             	sub    $0x4,%esp
f01110f4:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01110f9:	6a 5a                	push   $0x5a
f01110fb:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111100:	e8 00 f1 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111105:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011110c:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111113:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011111a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011111f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111122:	ff 75 f0             	pushl  -0x10(%ebp)
f0111125:	ff 75 f4             	pushl  -0xc(%ebp)
f0111128:	50                   	push   %eax
f0111129:	e8 7f 6a ff ff       	call   f0107bad <pt_set_page_permissions>
f011112e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111131:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111136:	ff 75 ec             	pushl  -0x14(%ebp)
f0111139:	ff 75 f0             	pushl  -0x10(%ebp)
f011113c:	ff 75 f4             	pushl  -0xc(%ebp)
f011113f:	50                   	push   %eax
f0111140:	e8 3e 4e 00 00       	call   f0115f83 <CP>
f0111145:	83 c4 10             	add    $0x10,%esp
f0111148:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011114b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011114f:	74 14                	je     f0111165 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111151:	83 ec 04             	sub    $0x4,%esp
f0111154:	68 9c 8b 13 f0       	push   $0xf0138b9c
f0111159:	6a 66                	push   $0x66
f011115b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111160:	e8 a0 f0 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111165:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f011116c:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111173:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011117a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011117f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111182:	ff 75 f0             	pushl  -0x10(%ebp)
f0111185:	ff 75 f4             	pushl  -0xc(%ebp)
f0111188:	50                   	push   %eax
f0111189:	e8 1f 6a ff ff       	call   f0107bad <pt_set_page_permissions>
f011118e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111191:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111196:	ff 75 ec             	pushl  -0x14(%ebp)
f0111199:	ff 75 f0             	pushl  -0x10(%ebp)
f011119c:	ff 75 f4             	pushl  -0xc(%ebp)
f011119f:	50                   	push   %eax
f01111a0:	e8 de 4d 00 00       	call   f0115f83 <CP>
f01111a5:	83 c4 10             	add    $0x10,%esp
f01111a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01111ab:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111af:	74 14                	je     f01111c5 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01111b1:	83 ec 04             	sub    $0x4,%esp
f01111b4:	68 c0 8b 13 f0       	push   $0xf0138bc0
f01111b9:	6a 71                	push   $0x71
f01111bb:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01111c0:	e8 40 f0 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01111c5:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01111cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01111d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01111da:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01111df:	ff 75 ec             	pushl  -0x14(%ebp)
f01111e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01111e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01111e8:	50                   	push   %eax
f01111e9:	e8 bf 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f01111ee:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01111f1:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01111f6:	ff 75 ec             	pushl  -0x14(%ebp)
f01111f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01111fc:	ff 75 f4             	pushl  -0xc(%ebp)
f01111ff:	50                   	push   %eax
f0111200:	e8 7e 4d 00 00       	call   f0115f83 <CP>
f0111205:	83 c4 10             	add    $0x10,%esp
f0111208:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011120b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011120f:	74 14                	je     f0111225 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111211:	83 ec 04             	sub    $0x4,%esp
f0111214:	68 e4 8b 13 f0       	push   $0xf0138be4
f0111219:	6a 7d                	push   $0x7d
f011121b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111220:	e8 e0 ef fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111225:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f011122c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111233:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011123a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011123f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111242:	ff 75 f0             	pushl  -0x10(%ebp)
f0111245:	ff 75 f4             	pushl  -0xc(%ebp)
f0111248:	50                   	push   %eax
f0111249:	e8 5f 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f011124e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111251:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111256:	ff 75 ec             	pushl  -0x14(%ebp)
f0111259:	ff 75 f0             	pushl  -0x10(%ebp)
f011125c:	ff 75 f4             	pushl  -0xc(%ebp)
f011125f:	50                   	push   %eax
f0111260:	e8 1e 4d 00 00       	call   f0115f83 <CP>
f0111265:	83 c4 10             	add    $0x10,%esp
f0111268:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011126b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011126f:	74 17                	je     f0111288 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111271:	83 ec 04             	sub    $0x4,%esp
f0111274:	68 08 8c 13 f0       	push   $0xf0138c08
f0111279:	68 89 00 00 00       	push   $0x89
f011127e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111283:	e8 7d ef fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111288:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011128f:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111296:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011129d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01112a2:	ff 75 ec             	pushl  -0x14(%ebp)
f01112a5:	ff 75 f0             	pushl  -0x10(%ebp)
f01112a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01112ab:	50                   	push   %eax
f01112ac:	e8 fc 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f01112b1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01112b4:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01112b9:	ff 75 ec             	pushl  -0x14(%ebp)
f01112bc:	ff 75 f0             	pushl  -0x10(%ebp)
f01112bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01112c2:	50                   	push   %eax
f01112c3:	e8 bb 4c 00 00       	call   f0115f83 <CP>
f01112c8:	83 c4 10             	add    $0x10,%esp
f01112cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01112ce:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112d2:	74 17                	je     f01112eb <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01112d4:	83 ec 04             	sub    $0x4,%esp
f01112d7:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01112dc:	68 95 00 00 00       	push   $0x95
f01112e1:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01112e6:	e8 1a ef fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01112eb:	83 ec 0c             	sub    $0xc,%esp
f01112ee:	68 58 8c 13 f0       	push   $0xf0138c58
f01112f3:	e8 16 fa fe ff       	call   f0100d0e <cprintf>
f01112f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01112fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111300:	c9                   	leave  
f0111301:	c3                   	ret    

f0111302 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111302:	55                   	push   %ebp
f0111303:	89 e5                	mov    %esp,%ebp
f0111305:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111308:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011130f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111316:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011131d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111322:	ff 75 ec             	pushl  -0x14(%ebp)
f0111325:	ff 75 f0             	pushl  -0x10(%ebp)
f0111328:	ff 75 f4             	pushl  -0xc(%ebp)
f011132b:	50                   	push   %eax
f011132c:	e8 7c 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111331:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111334:	83 ec 04             	sub    $0x4,%esp
f0111337:	68 a8 8c 13 f0       	push   $0xf0138ca8
f011133c:	68 a2 00 00 00       	push   $0xa2
f0111341:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111346:	e8 ba ee fe ff       	call   f0100205 <_panic>

f011134b <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f011134b:	55                   	push   %ebp
f011134c:	89 e5                	mov    %esp,%ebp
f011134e:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111351:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111358:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011135d:	83 ec 08             	sub    $0x8,%esp
f0111360:	ff 75 f4             	pushl  -0xc(%ebp)
f0111363:	50                   	push   %eax
f0111364:	e8 f8 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111369:	83 c4 10             	add    $0x10,%esp
f011136c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f011136f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111373:	74 17                	je     f011138c <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111375:	83 ec 04             	sub    $0x4,%esp
f0111378:	68 44 8d 13 f0       	push   $0xf0138d44
f011137d:	68 b0 00 00 00       	push   $0xb0
f0111382:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111387:	e8 79 ee fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011138c:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111393:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111398:	83 ec 08             	sub    $0x8,%esp
f011139b:	ff 75 f4             	pushl  -0xc(%ebp)
f011139e:	50                   	push   %eax
f011139f:	e8 bd 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01113a4:	83 c4 10             	add    $0x10,%esp
f01113a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01113aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113ae:	74 17                	je     f01113c7 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01113b0:	83 ec 04             	sub    $0x4,%esp
f01113b3:	68 68 8d 13 f0       	push   $0xf0138d68
f01113b8:	68 b8 00 00 00       	push   $0xb8
f01113bd:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01113c2:	e8 3e ee fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01113c7:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01113ce:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01113d3:	83 ec 08             	sub    $0x8,%esp
f01113d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01113d9:	50                   	push   %eax
f01113da:	e8 82 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01113df:	83 c4 10             	add    $0x10,%esp
f01113e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01113e5:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01113e9:	74 17                	je     f0111402 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01113eb:	83 ec 04             	sub    $0x4,%esp
f01113ee:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01113f3:	68 c0 00 00 00       	push   $0xc0
f01113f8:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01113fd:	e8 03 ee fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111402:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111409:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011140e:	83 ec 08             	sub    $0x8,%esp
f0111411:	ff 75 f4             	pushl  -0xc(%ebp)
f0111414:	50                   	push   %eax
f0111415:	e8 47 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f011141a:	83 c4 10             	add    $0x10,%esp
f011141d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111420:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111424:	74 17                	je     f011143d <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111426:	83 ec 04             	sub    $0x4,%esp
f0111429:	68 b0 8d 13 f0       	push   $0xf0138db0
f011142e:	68 c7 00 00 00       	push   $0xc7
f0111433:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111438:	e8 c8 ed fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f011143d:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111444:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111449:	83 ec 08             	sub    $0x8,%esp
f011144c:	ff 75 f4             	pushl  -0xc(%ebp)
f011144f:	50                   	push   %eax
f0111450:	e8 0c 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111455:	83 c4 10             	add    $0x10,%esp
f0111458:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011145b:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f011145f:	74 17                	je     f0111478 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111461:	83 ec 04             	sub    $0x4,%esp
f0111464:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0111469:	68 ce 00 00 00       	push   $0xce
f011146e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111473:	e8 8d ed fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111478:	83 ec 0c             	sub    $0xc,%esp
f011147b:	68 f8 8d 13 f0       	push   $0xf0138df8
f0111480:	e8 89 f8 fe ff       	call   f0100d0e <cprintf>
f0111485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011148d:	c9                   	leave  
f011148e:	c3                   	ret    

f011148f <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011148f:	55                   	push   %ebp
f0111490:	89 e5                	mov    %esp,%ebp
f0111492:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111495:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011149c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01114a1:	83 ec 08             	sub    $0x8,%esp
f01114a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01114a7:	50                   	push   %eax
f01114a8:	e8 0f 68 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01114ad:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01114b0:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01114b5:	83 ec 08             	sub    $0x8,%esp
f01114b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01114bb:	50                   	push   %eax
f01114bc:	e8 1e 4a 00 00       	call   f0115edf <CE>
f01114c1:	83 c4 10             	add    $0x10,%esp
f01114c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01114c7:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01114cb:	74 17                	je     f01114e4 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01114cd:	83 ec 04             	sub    $0x4,%esp
f01114d0:	68 40 8e 13 f0       	push   $0xf0138e40
f01114d5:	68 de 00 00 00       	push   $0xde
f01114da:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01114df:	e8 21 ed fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01114e4:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01114eb:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01114f0:	83 ec 08             	sub    $0x8,%esp
f01114f3:	ff 75 f4             	pushl  -0xc(%ebp)
f01114f6:	50                   	push   %eax
f01114f7:	e8 c0 67 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01114fc:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01114ff:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111504:	83 ec 08             	sub    $0x8,%esp
f0111507:	ff 75 f4             	pushl  -0xc(%ebp)
f011150a:	50                   	push   %eax
f011150b:	e8 cf 49 00 00       	call   f0115edf <CE>
f0111510:	83 c4 10             	add    $0x10,%esp
f0111513:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111516:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011151a:	74 17                	je     f0111533 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011151c:	83 ec 04             	sub    $0x4,%esp
f011151f:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0111524:	68 e6 00 00 00       	push   $0xe6
f0111529:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011152e:	e8 d2 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111533:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011153a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011153f:	83 ec 08             	sub    $0x8,%esp
f0111542:	ff 75 f4             	pushl  -0xc(%ebp)
f0111545:	50                   	push   %eax
f0111546:	e8 71 67 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011154b:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011154e:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111553:	83 ec 08             	sub    $0x8,%esp
f0111556:	ff 75 f4             	pushl  -0xc(%ebp)
f0111559:	50                   	push   %eax
f011155a:	e8 80 49 00 00       	call   f0115edf <CE>
f011155f:	83 c4 10             	add    $0x10,%esp
f0111562:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111565:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111569:	74 17                	je     f0111582 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011156b:	83 ec 04             	sub    $0x4,%esp
f011156e:	68 98 8e 13 f0       	push   $0xf0138e98
f0111573:	68 ee 00 00 00       	push   $0xee
f0111578:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011157d:	e8 83 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111582:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111589:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011158e:	83 ec 08             	sub    $0x8,%esp
f0111591:	ff 75 f4             	pushl  -0xc(%ebp)
f0111594:	50                   	push   %eax
f0111595:	e8 22 67 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011159a:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011159d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01115a2:	83 ec 08             	sub    $0x8,%esp
f01115a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01115a8:	50                   	push   %eax
f01115a9:	e8 31 49 00 00       	call   f0115edf <CE>
f01115ae:	83 c4 10             	add    $0x10,%esp
f01115b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01115b4:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01115b8:	74 17                	je     f01115d1 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01115ba:	83 ec 04             	sub    $0x4,%esp
f01115bd:	68 c4 8e 13 f0       	push   $0xf0138ec4
f01115c2:	68 f6 00 00 00       	push   $0xf6
f01115c7:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01115cc:	e8 34 ec fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01115d1:	83 ec 0c             	sub    $0xc,%esp
f01115d4:	68 f0 8e 13 f0       	push   $0xf0138ef0
f01115d9:	e8 30 f7 fe ff       	call   f0100d0e <cprintf>
f01115de:	83 c4 10             	add    $0x10,%esp
	return 0;
f01115e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01115e6:	c9                   	leave  
f01115e7:	c3                   	ret    

f01115e8 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01115e8:	55                   	push   %ebp
f01115e9:	89 e5                	mov    %esp,%ebp
f01115eb:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01115ee:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01115f5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01115fa:	83 ec 08             	sub    $0x8,%esp
f01115fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0111600:	50                   	push   %eax
f0111601:	e8 b6 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111606:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111609:	83 ec 04             	sub    $0x4,%esp
f011160c:	68 3c 8f 13 f0       	push   $0xf0138f3c
f0111611:	68 01 01 00 00       	push   $0x101
f0111616:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011161b:	e8 e5 eb fe ff       	call   f0100205 <_panic>

f0111620 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111620:	55                   	push   %ebp
f0111621:	89 e5                	mov    %esp,%ebp
f0111623:	57                   	push   %edi
f0111624:	56                   	push   %esi
f0111625:	53                   	push   %ebx
f0111626:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011162c:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111633:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f011163a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011163f:	83 ec 0c             	sub    $0xc,%esp
f0111642:	50                   	push   %eax
f0111643:	e8 79 49 00 00       	call   f0115fc1 <ClearUserSpace>
f0111648:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f011164b:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111652:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111657:	83 ec 08             	sub    $0x8,%esp
f011165a:	ff 75 dc             	pushl  -0x24(%ebp)
f011165d:	50                   	push   %eax
f011165e:	e8 c5 66 ff ff       	call   f0107d28 <virtual_to_physical>
f0111663:	83 c4 10             	add    $0x10,%esp
f0111666:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111669:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f011166d:	74 17                	je     f0111686 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f011166f:	83 ec 04             	sub    $0x4,%esp
f0111672:	68 d4 8f 13 f0       	push   $0xf0138fd4
f0111677:	68 16 01 00 00       	push   $0x116
f011167c:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111681:	e8 7f eb fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111686:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011168d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111692:	83 ec 08             	sub    $0x8,%esp
f0111695:	ff 75 dc             	pushl  -0x24(%ebp)
f0111698:	50                   	push   %eax
f0111699:	e8 8a 66 ff ff       	call   f0107d28 <virtual_to_physical>
f011169e:	83 c4 10             	add    $0x10,%esp
f01116a1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01116a4:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01116a9:	83 ec 08             	sub    $0x8,%esp
f01116ac:	ff 75 dc             	pushl  -0x24(%ebp)
f01116af:	50                   	push   %eax
f01116b0:	e8 0b 48 00 00       	call   f0115ec0 <CA>
f01116b5:	83 c4 10             	add    $0x10,%esp
f01116b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01116bb:	74 17                	je     f01116d4 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f01116bd:	83 ec 04             	sub    $0x4,%esp
f01116c0:	68 0c 90 13 f0       	push   $0xf013900c
f01116c5:	68 1f 01 00 00       	push   $0x11f
f01116ca:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01116cf:	e8 31 eb fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01116d4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01116da:	bb d8 91 13 f0       	mov    $0xf01391d8,%ebx
f01116df:	ba 0d 00 00 00       	mov    $0xd,%edx
f01116e4:	89 c7                	mov    %eax,%edi
f01116e6:	89 de                	mov    %ebx,%esi
f01116e8:	89 d1                	mov    %edx,%ecx
f01116ea:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01116ec:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01116ef:	b9 57 00 00 00       	mov    $0x57,%ecx
f01116f4:	b0 00                	mov    $0x0,%al
f01116f6:	89 d7                	mov    %edx,%edi
f01116f8:	f3 aa                	rep stos %al,%es:(%edi)
f01116fa:	83 ec 0c             	sub    $0xc,%esp
f01116fd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111703:	50                   	push   %eax
f0111704:	e8 67 f6 fe ff       	call   f0100d70 <execute_command>
f0111709:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f011170c:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111713:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111718:	83 ec 08             	sub    $0x8,%esp
f011171b:	ff 75 dc             	pushl  -0x24(%ebp)
f011171e:	50                   	push   %eax
f011171f:	e8 04 66 ff ff       	call   f0107d28 <virtual_to_physical>
f0111724:	83 c4 10             	add    $0x10,%esp
f0111727:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011172a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011172f:	83 ec 08             	sub    $0x8,%esp
f0111732:	ff 75 dc             	pushl  -0x24(%ebp)
f0111735:	50                   	push   %eax
f0111736:	e8 85 47 00 00       	call   f0115ec0 <CA>
f011173b:	83 c4 10             	add    $0x10,%esp
f011173e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111741:	74 17                	je     f011175a <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111743:	83 ec 04             	sub    $0x4,%esp
f0111746:	68 44 90 13 f0       	push   $0xf0139044
f011174b:	68 28 01 00 00       	push   $0x128
f0111750:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111755:	e8 ab ea fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011175a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111760:	bb 3c 92 13 f0       	mov    $0xf013923c,%ebx
f0111765:	ba 0d 00 00 00       	mov    $0xd,%edx
f011176a:	89 c7                	mov    %eax,%edi
f011176c:	89 de                	mov    %ebx,%esi
f011176e:	89 d1                	mov    %edx,%ecx
f0111770:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111772:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111778:	b9 57 00 00 00       	mov    $0x57,%ecx
f011177d:	b0 00                	mov    $0x0,%al
f011177f:	89 d7                	mov    %edx,%edi
f0111781:	f3 aa                	rep stos %al,%es:(%edi)
f0111783:	83 ec 0c             	sub    $0xc,%esp
f0111786:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011178c:	50                   	push   %eax
f011178d:	e8 de f5 fe ff       	call   f0100d70 <execute_command>
f0111792:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111795:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011179c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01117a1:	83 ec 08             	sub    $0x8,%esp
f01117a4:	ff 75 dc             	pushl  -0x24(%ebp)
f01117a7:	50                   	push   %eax
f01117a8:	e8 7b 65 ff ff       	call   f0107d28 <virtual_to_physical>
f01117ad:	83 c4 10             	add    $0x10,%esp
f01117b0:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01117b3:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01117b8:	83 ec 08             	sub    $0x8,%esp
f01117bb:	ff 75 dc             	pushl  -0x24(%ebp)
f01117be:	50                   	push   %eax
f01117bf:	e8 fc 46 00 00       	call   f0115ec0 <CA>
f01117c4:	83 c4 10             	add    $0x10,%esp
f01117c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01117ca:	74 17                	je     f01117e3 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01117cc:	83 ec 04             	sub    $0x4,%esp
f01117cf:	68 7c 90 13 f0       	push   $0xf013907c
f01117d4:	68 31 01 00 00       	push   $0x131
f01117d9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01117de:	e8 22 ea fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01117e3:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01117e9:	bb a0 92 13 f0       	mov    $0xf01392a0,%ebx
f01117ee:	ba 0d 00 00 00       	mov    $0xd,%edx
f01117f3:	89 c7                	mov    %eax,%edi
f01117f5:	89 de                	mov    %ebx,%esi
f01117f7:	89 d1                	mov    %edx,%ecx
f01117f9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117fb:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111801:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111806:	b0 00                	mov    $0x0,%al
f0111808:	89 d7                	mov    %edx,%edi
f011180a:	f3 aa                	rep stos %al,%es:(%edi)
f011180c:	83 ec 0c             	sub    $0xc,%esp
f011180f:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111815:	50                   	push   %eax
f0111816:	e8 55 f5 fe ff       	call   f0100d70 <execute_command>
f011181b:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f011181e:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111825:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011182a:	83 ec 08             	sub    $0x8,%esp
f011182d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111830:	50                   	push   %eax
f0111831:	e8 f2 64 ff ff       	call   f0107d28 <virtual_to_physical>
f0111836:	83 c4 10             	add    $0x10,%esp
f0111839:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011183c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111841:	83 ec 08             	sub    $0x8,%esp
f0111844:	ff 75 dc             	pushl  -0x24(%ebp)
f0111847:	50                   	push   %eax
f0111848:	e8 73 46 00 00       	call   f0115ec0 <CA>
f011184d:	83 c4 10             	add    $0x10,%esp
f0111850:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111853:	74 17                	je     f011186c <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111855:	83 ec 04             	sub    $0x4,%esp
f0111858:	68 b4 90 13 f0       	push   $0xf01390b4
f011185d:	68 3a 01 00 00       	push   $0x13a
f0111862:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111867:	e8 99 e9 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f011186c:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111873:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111878:	83 ec 08             	sub    $0x8,%esp
f011187b:	ff 75 dc             	pushl  -0x24(%ebp)
f011187e:	50                   	push   %eax
f011187f:	e8 a4 64 ff ff       	call   f0107d28 <virtual_to_physical>
f0111884:	83 c4 10             	add    $0x10,%esp
f0111887:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011188a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011188f:	83 ec 08             	sub    $0x8,%esp
f0111892:	ff 75 dc             	pushl  -0x24(%ebp)
f0111895:	50                   	push   %eax
f0111896:	e8 25 46 00 00       	call   f0115ec0 <CA>
f011189b:	83 c4 10             	add    $0x10,%esp
f011189e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01118a1:	74 17                	je     f01118ba <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f01118a3:	83 ec 04             	sub    $0x4,%esp
f01118a6:	68 ec 90 13 f0       	push   $0xf01390ec
f01118ab:	68 42 01 00 00       	push   $0x142
f01118b0:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01118b5:	e8 4b e9 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f01118ba:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01118c1:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01118c6:	83 ec 08             	sub    $0x8,%esp
f01118c9:	ff 75 dc             	pushl  -0x24(%ebp)
f01118cc:	50                   	push   %eax
f01118cd:	e8 56 64 ff ff       	call   f0107d28 <virtual_to_physical>
f01118d2:	83 c4 10             	add    $0x10,%esp
f01118d5:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01118d8:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01118dd:	83 ec 08             	sub    $0x8,%esp
f01118e0:	ff 75 dc             	pushl  -0x24(%ebp)
f01118e3:	50                   	push   %eax
f01118e4:	e8 d7 45 00 00       	call   f0115ec0 <CA>
f01118e9:	83 c4 10             	add    $0x10,%esp
f01118ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01118ef:	74 17                	je     f0111908 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01118f1:	83 ec 04             	sub    $0x4,%esp
f01118f4:	68 24 91 13 f0       	push   $0xf0139124
f01118f9:	68 4a 01 00 00       	push   $0x14a
f01118fe:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111903:	e8 fd e8 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111908:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011190e:	bb 04 93 13 f0       	mov    $0xf0139304,%ebx
f0111913:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111918:	89 c7                	mov    %eax,%edi
f011191a:	89 de                	mov    %ebx,%esi
f011191c:	89 d1                	mov    %edx,%ecx
f011191e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111920:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111926:	b9 56 00 00 00       	mov    $0x56,%ecx
f011192b:	b0 00                	mov    $0x0,%al
f011192d:	89 d7                	mov    %edx,%edi
f011192f:	f3 aa                	rep stos %al,%es:(%edi)
f0111931:	83 ec 0c             	sub    $0xc,%esp
f0111934:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011193a:	50                   	push   %eax
f011193b:	e8 30 f4 fe ff       	call   f0100d70 <execute_command>
f0111940:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111943:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011194a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011194f:	83 ec 08             	sub    $0x8,%esp
f0111952:	ff 75 dc             	pushl  -0x24(%ebp)
f0111955:	50                   	push   %eax
f0111956:	e8 cd 63 ff ff       	call   f0107d28 <virtual_to_physical>
f011195b:	83 c4 10             	add    $0x10,%esp
f011195e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111961:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111966:	83 ec 08             	sub    $0x8,%esp
f0111969:	ff 75 dc             	pushl  -0x24(%ebp)
f011196c:	50                   	push   %eax
f011196d:	e8 4e 45 00 00       	call   f0115ec0 <CA>
f0111972:	83 c4 10             	add    $0x10,%esp
f0111975:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111978:	74 17                	je     f0111991 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f011197a:	83 ec 04             	sub    $0x4,%esp
f011197d:	68 5c 91 13 f0       	push   $0xf013915c
f0111982:	68 53 01 00 00       	push   $0x153
f0111987:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011198c:	e8 74 e8 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111991:	83 ec 0c             	sub    $0xc,%esp
f0111994:	68 94 91 13 f0       	push   $0xf0139194
f0111999:	e8 70 f3 fe ff       	call   f0100d0e <cprintf>
f011199e:	83 c4 10             	add    $0x10,%esp

	return 0;
f01119a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01119a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01119a9:	5b                   	pop    %ebx
f01119aa:	5e                   	pop    %esi
f01119ab:	5f                   	pop    %edi
f01119ac:	5d                   	pop    %ebp
f01119ad:	c3                   	ret    

f01119ae <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01119ae:	55                   	push   %ebp
f01119af:	89 e5                	mov    %esp,%ebp
f01119b1:	57                   	push   %edi
f01119b2:	56                   	push   %esi
f01119b3:	53                   	push   %ebx
f01119b4:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01119ba:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01119c0:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f01119c5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119ca:	89 c7                	mov    %eax,%edi
f01119cc:	89 de                	mov    %ebx,%esi
f01119ce:	89 d1                	mov    %edx,%ecx
f01119d0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119d2:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01119d8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01119dd:	b0 00                	mov    $0x0,%al
f01119df:	89 d7                	mov    %edx,%edi
f01119e1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01119e3:	6a 00                	push   $0x0
f01119e5:	6a 0a                	push   $0xa
f01119e7:	6a 14                	push   $0x14
f01119e9:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01119ef:	50                   	push   %eax
f01119f0:	e8 6e 74 ff ff       	call   f0108e63 <env_create>
f01119f5:	83 c4 10             	add    $0x10,%esp
f01119f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01119fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01119fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111a01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111a04:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a07:	8b 40 60             	mov    0x60(%eax),%eax
f0111a0a:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111a0d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111a10:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111a13:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111a1a:	75 70 20 
f0111a1d:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111a24:	00 00 00 
f0111a27:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111a2d:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111a32:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a37:	89 d7                	mov    %edx,%edi
f0111a39:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111a3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111a41:	83 ec 08             	sub    $0x8,%esp
f0111a44:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111a4a:	52                   	push   %edx
f0111a4b:	50                   	push   %eax
f0111a4c:	e8 6f fb 01 00       	call   f01315c0 <ltostr>
f0111a51:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111a54:	83 ec 04             	sub    $0x4,%esp
f0111a57:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a5d:	50                   	push   %eax
f0111a5e:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111a64:	50                   	push   %eax
f0111a65:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111a6b:	50                   	push   %eax
f0111a6c:	e8 47 fc 01 00       	call   f01316b8 <strcconcat>
f0111a71:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111a74:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111a7b:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111a82:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111a89:	83 ec 0c             	sub    $0xc,%esp
f0111a8c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a8f:	e8 2d 45 00 00       	call   f0115fc1 <ClearUserSpace>
f0111a94:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111a97:	83 ec 04             	sub    $0x4,%esp
f0111a9a:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111aa0:	50                   	push   %eax
f0111aa1:	68 68 93 13 f0       	push   $0xf0139368
f0111aa6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111aac:	50                   	push   %eax
f0111aad:	e8 06 fc 01 00       	call   f01316b8 <strcconcat>
f0111ab2:	83 c4 10             	add    $0x10,%esp
f0111ab5:	83 ec 0c             	sub    $0xc,%esp
f0111ab8:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111abe:	50                   	push   %eax
f0111abf:	e8 ac f2 fe ff       	call   f0100d70 <execute_command>
f0111ac4:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111ac7:	83 ec 04             	sub    $0x4,%esp
f0111aca:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111ad0:	50                   	push   %eax
f0111ad1:	68 73 93 13 f0       	push   $0xf0139373
f0111ad6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111adc:	50                   	push   %eax
f0111add:	e8 d6 fb 01 00       	call   f01316b8 <strcconcat>
f0111ae2:	83 c4 10             	add    $0x10,%esp
f0111ae5:	83 ec 0c             	sub    $0xc,%esp
f0111ae8:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111aee:	50                   	push   %eax
f0111aef:	e8 7c f2 fe ff       	call   f0100d70 <execute_command>
f0111af4:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111af7:	83 ec 04             	sub    $0x4,%esp
f0111afa:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111b00:	50                   	push   %eax
f0111b01:	68 7e 93 13 f0       	push   $0xf013937e
f0111b06:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b0c:	50                   	push   %eax
f0111b0d:	e8 a6 fb 01 00       	call   f01316b8 <strcconcat>
f0111b12:	83 c4 10             	add    $0x10,%esp
f0111b15:	83 ec 0c             	sub    $0xc,%esp
f0111b18:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111b1e:	50                   	push   %eax
f0111b1f:	e8 4c f2 fe ff       	call   f0100d70 <execute_command>
f0111b24:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111b27:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111b2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b31:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111b34:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111b3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b3e:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111b41:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111b48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b4b:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111b4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b51:	83 ec 08             	sub    $0x8,%esp
f0111b54:	50                   	push   %eax
f0111b55:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b58:	e8 45 44 00 00       	call   f0115fa2 <GP>
f0111b5d:	83 c4 10             	add    $0x10,%esp
f0111b60:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111b63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111b6a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111b71:	e8 27 b0 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111b76:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0111b79:	83 ec 0c             	sub    $0xc,%esp
f0111b7c:	68 8c 93 13 f0       	push   $0xf013938c
f0111b81:	e8 88 f1 fe ff       	call   f0100d0e <cprintf>
f0111b86:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0111b89:	6a 03                	push   $0x3
f0111b8b:	68 00 00 90 02       	push   $0x2900000
f0111b90:	68 00 00 80 02       	push   $0x2800000
f0111b95:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b98:	e8 b3 6b ff ff       	call   f0108750 <cut_paste_pages>
f0111b9d:	83 c4 10             	add    $0x10,%esp
f0111ba0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111ba3:	e8 f5 af ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111ba8:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111bab:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111bb2:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111bb6:	75 08                	jne    f0111bc0 <test_cut_paste_pages+0x212>
f0111bb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111bbb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111bbe:	74 2b                	je     f0111beb <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111bc0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111bc3:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111bc6:	83 ec 0c             	sub    $0xc,%esp
f0111bc9:	50                   	push   %eax
f0111bca:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111bcd:	68 bc 93 13 f0       	push   $0xf01393bc
f0111bd2:	68 91 01 00 00       	push   $0x191
f0111bd7:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111bdc:	e8 32 e8 fe ff       	call   f0100413 <_warn>
f0111be1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111be4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111beb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111bef:	74 04                	je     f0111bf5 <test_cut_paste_pages+0x247>
f0111bf1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111bf5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111bfc:	83 ec 08             	sub    $0x8,%esp
f0111bff:	6a 00                	push   $0x0
f0111c01:	6a 01                	push   $0x1
f0111c03:	6a 00                	push   $0x0
f0111c05:	68 ff 0f 00 00       	push   $0xfff
f0111c0a:	ff 75 bc             	pushl  -0x44(%ebp)
f0111c0d:	6a 01                	push   $0x1
f0111c0f:	68 00 30 00 00       	push   $0x3000
f0111c14:	68 00 00 90 02       	push   $0x2900000
f0111c19:	68 00 00 80 02       	push   $0x2800000
f0111c1e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c21:	e8 cf 43 00 00       	call   f0115ff5 <CCP>
f0111c26:	83 c4 30             	add    $0x30,%esp
f0111c29:	83 f8 01             	cmp    $0x1,%eax
f0111c2c:	74 21                	je     f0111c4f <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111c2e:	83 ec 04             	sub    $0x4,%esp
f0111c31:	68 10 94 13 f0       	push   $0xf0139410
f0111c36:	68 99 01 00 00       	push   $0x199
f0111c3b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111c40:	e8 ce e7 fe ff       	call   f0100413 <_warn>
f0111c45:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111c48:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111c4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c53:	74 04                	je     f0111c59 <test_cut_paste_pages+0x2ab>
f0111c55:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111c59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111c60:	83 ec 04             	sub    $0x4,%esp
f0111c63:	6a 00                	push   $0x0
f0111c65:	68 00 00 90 02       	push   $0x2900000
f0111c6a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c6d:	e8 5f 41 00 00       	call   f0115dd1 <CB>
f0111c72:	83 c4 10             	add    $0x10,%esp
f0111c75:	85 c0                	test   %eax,%eax
f0111c77:	0f 84 f6 00 00 00    	je     f0111d73 <test_cut_paste_pages+0x3c5>
f0111c7d:	83 ec 04             	sub    $0x4,%esp
f0111c80:	6a 00                	push   $0x0
f0111c82:	68 00 10 90 02       	push   $0x2901000
f0111c87:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c8a:	e8 42 41 00 00       	call   f0115dd1 <CB>
f0111c8f:	83 c4 10             	add    $0x10,%esp
f0111c92:	85 c0                	test   %eax,%eax
f0111c94:	0f 84 d9 00 00 00    	je     f0111d73 <test_cut_paste_pages+0x3c5>
f0111c9a:	83 ec 04             	sub    $0x4,%esp
f0111c9d:	6a 00                	push   $0x0
f0111c9f:	68 00 20 90 02       	push   $0x2902000
f0111ca4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ca7:	e8 25 41 00 00       	call   f0115dd1 <CB>
f0111cac:	83 c4 10             	add    $0x10,%esp
f0111caf:	85 c0                	test   %eax,%eax
f0111cb1:	0f 84 bc 00 00 00    	je     f0111d73 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111cb7:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111cbe:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111cc5:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0111ccc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ccf:	8a 00                	mov    (%eax),%al
f0111cd1:	3c 61                	cmp    $0x61,%al
f0111cd3:	75 12                	jne    f0111ce7 <test_cut_paste_pages+0x339>
f0111cd5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111cd8:	8a 00                	mov    (%eax),%al
f0111cda:	3c 62                	cmp    $0x62,%al
f0111cdc:	75 09                	jne    f0111ce7 <test_cut_paste_pages+0x339>
f0111cde:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111ce1:	8a 00                	mov    (%eax),%al
f0111ce3:	3c 63                	cmp    $0x63,%al
f0111ce5:	74 21                	je     f0111d08 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111ce7:	83 ec 04             	sub    $0x4,%esp
f0111cea:	68 5c 94 13 f0       	push   $0xf013945c
f0111cef:	68 a6 01 00 00       	push   $0x1a6
f0111cf4:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111cf9:	e8 15 e7 fe ff       	call   f0100413 <_warn>
f0111cfe:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111d01:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111d08:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d0c:	74 04                	je     f0111d12 <test_cut_paste_pages+0x364>
f0111d0e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111d12:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111d19:	83 ec 04             	sub    $0x4,%esp
f0111d1c:	6a 01                	push   $0x1
f0111d1e:	68 00 10 90 02       	push   $0x2901000
f0111d23:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d26:	e8 a6 40 00 00       	call   f0115dd1 <CB>
f0111d2b:	83 c4 10             	add    $0x10,%esp
f0111d2e:	85 c0                	test   %eax,%eax
f0111d30:	74 41                	je     f0111d73 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111d32:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d35:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111d38:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d3b:	8a 00                	mov    (%eax),%al
f0111d3d:	3c 79                	cmp    $0x79,%al
f0111d3f:	74 21                	je     f0111d62 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111d41:	83 ec 04             	sub    $0x4,%esp
f0111d44:	68 5c 94 13 f0       	push   $0xf013945c
f0111d49:	68 b1 01 00 00       	push   $0x1b1
f0111d4e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111d53:	e8 bb e6 fe ff       	call   f0100413 <_warn>
f0111d58:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111d5b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111d62:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d66:	74 04                	je     f0111d6c <test_cut_paste_pages+0x3be>
f0111d68:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111d6c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111d73:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111d76:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0111d79:	6a 02                	push   $0x2
f0111d7b:	68 00 f0 bf 02       	push   $0x2bff000
f0111d80:	68 00 10 90 02       	push   $0x2901000
f0111d85:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d88:	e8 c3 69 ff ff       	call   f0108750 <cut_paste_pages>
f0111d8d:	83 c4 10             	add    $0x10,%esp
f0111d90:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111d93:	e8 05 ae ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111d98:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111d9b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111d9f:	75 0b                	jne    f0111dac <test_cut_paste_pages+0x3fe>
f0111da1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111da4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111da7:	83 f8 01             	cmp    $0x1,%eax
f0111daa:	74 2b                	je     f0111dd7 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111dac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111daf:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111db2:	83 ec 0c             	sub    $0xc,%esp
f0111db5:	50                   	push   %eax
f0111db6:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111db9:	68 bc 93 13 f0       	push   $0xf01393bc
f0111dbe:	68 c2 01 00 00       	push   $0x1c2
f0111dc3:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111dc8:	e8 46 e6 fe ff       	call   f0100413 <_warn>
f0111dcd:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111dd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111dd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ddb:	74 04                	je     f0111de1 <test_cut_paste_pages+0x433>
f0111ddd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111de1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111de8:	83 ec 08             	sub    $0x8,%esp
f0111deb:	6a 00                	push   $0x0
f0111ded:	6a 01                	push   $0x1
f0111def:	6a 00                	push   $0x0
f0111df1:	68 ff 0f 00 00       	push   $0xfff
f0111df6:	ff 75 bc             	pushl  -0x44(%ebp)
f0111df9:	6a 01                	push   $0x1
f0111dfb:	68 00 20 00 00       	push   $0x2000
f0111e00:	68 00 f0 bf 02       	push   $0x2bff000
f0111e05:	68 00 10 90 02       	push   $0x2901000
f0111e0a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e0d:	e8 e3 41 00 00       	call   f0115ff5 <CCP>
f0111e12:	83 c4 30             	add    $0x30,%esp
f0111e15:	83 f8 01             	cmp    $0x1,%eax
f0111e18:	74 21                	je     f0111e3b <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111e1a:	83 ec 04             	sub    $0x4,%esp
f0111e1d:	68 10 94 13 f0       	push   $0xf0139410
f0111e22:	68 ca 01 00 00       	push   $0x1ca
f0111e27:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111e2c:	e8 e2 e5 fe ff       	call   f0100413 <_warn>
f0111e31:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111e34:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111e3b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e3f:	74 04                	je     f0111e45 <test_cut_paste_pages+0x497>
f0111e41:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111e45:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111e4c:	83 ec 04             	sub    $0x4,%esp
f0111e4f:	6a 00                	push   $0x0
f0111e51:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111e56:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e59:	e8 73 3f 00 00       	call   f0115dd1 <CB>
f0111e5e:	83 c4 10             	add    $0x10,%esp
f0111e61:	85 c0                	test   %eax,%eax
f0111e63:	74 6b                	je     f0111ed0 <test_cut_paste_pages+0x522>
f0111e65:	83 ec 04             	sub    $0x4,%esp
f0111e68:	6a 00                	push   $0x0
f0111e6a:	68 ff 0f c0 02       	push   $0x2c00fff
f0111e6f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e72:	e8 5a 3f 00 00       	call   f0115dd1 <CB>
f0111e77:	83 c4 10             	add    $0x10,%esp
f0111e7a:	85 c0                	test   %eax,%eax
f0111e7c:	74 52                	je     f0111ed0 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111e7e:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111e85:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111e8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e8f:	8a 00                	mov    (%eax),%al
f0111e91:	3c 79                	cmp    $0x79,%al
f0111e93:	75 09                	jne    f0111e9e <test_cut_paste_pages+0x4f0>
f0111e95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e98:	8a 00                	mov    (%eax),%al
f0111e9a:	3c 63                	cmp    $0x63,%al
f0111e9c:	74 21                	je     f0111ebf <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111e9e:	83 ec 04             	sub    $0x4,%esp
f0111ea1:	68 5c 94 13 f0       	push   $0xf013945c
f0111ea6:	68 d6 01 00 00       	push   $0x1d6
f0111eab:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0111eb0:	e8 5e e5 fe ff       	call   f0100413 <_warn>
f0111eb5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111eb8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111ebf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ec3:	74 04                	je     f0111ec9 <test_cut_paste_pages+0x51b>
f0111ec5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111ec9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0111ed0:	83 ec 0c             	sub    $0xc,%esp
f0111ed3:	68 95 94 13 f0       	push   $0xf0139495
f0111ed8:	e8 31 ee fe ff       	call   f0100d0e <cprintf>
f0111edd:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0111ee0:	83 ec 0c             	sub    $0xc,%esp
f0111ee3:	68 a4 94 13 f0       	push   $0xf01394a4
f0111ee8:	e8 21 ee fe ff       	call   f0100d0e <cprintf>
f0111eed:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111ef0:	83 ec 04             	sub    $0x4,%esp
f0111ef3:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111ef9:	50                   	push   %eax
f0111efa:	68 cd 94 13 f0       	push   $0xf01394cd
f0111eff:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f05:	50                   	push   %eax
f0111f06:	e8 ad f7 01 00       	call   f01316b8 <strcconcat>
f0111f0b:	83 c4 10             	add    $0x10,%esp
f0111f0e:	83 ec 0c             	sub    $0xc,%esp
f0111f11:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111f17:	50                   	push   %eax
f0111f18:	e8 53 ee fe ff       	call   f0100d70 <execute_command>
f0111f1d:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111f20:	83 ec 04             	sub    $0x4,%esp
f0111f23:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111f29:	50                   	push   %eax
f0111f2a:	68 d8 94 13 f0       	push   $0xf01394d8
f0111f2f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f35:	50                   	push   %eax
f0111f36:	e8 7d f7 01 00       	call   f01316b8 <strcconcat>
f0111f3b:	83 c4 10             	add    $0x10,%esp
f0111f3e:	83 ec 0c             	sub    $0xc,%esp
f0111f41:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111f47:	50                   	push   %eax
f0111f48:	e8 23 ee fe ff       	call   f0100d70 <execute_command>
f0111f4d:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111f50:	83 ec 04             	sub    $0x4,%esp
f0111f53:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111f59:	50                   	push   %eax
f0111f5a:	68 e3 94 13 f0       	push   $0xf01394e3
f0111f5f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f65:	50                   	push   %eax
f0111f66:	e8 4d f7 01 00       	call   f01316b8 <strcconcat>
f0111f6b:	83 c4 10             	add    $0x10,%esp
f0111f6e:	83 ec 0c             	sub    $0xc,%esp
f0111f71:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111f77:	50                   	push   %eax
f0111f78:	e8 f3 ed fe ff       	call   f0100d70 <execute_command>
f0111f7d:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111f80:	83 ec 04             	sub    $0x4,%esp
f0111f83:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111f89:	50                   	push   %eax
f0111f8a:	68 ee 94 13 f0       	push   $0xf01394ee
f0111f8f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f95:	50                   	push   %eax
f0111f96:	e8 1d f7 01 00       	call   f01316b8 <strcconcat>
f0111f9b:	83 c4 10             	add    $0x10,%esp
f0111f9e:	83 ec 0c             	sub    $0xc,%esp
f0111fa1:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111fa7:	50                   	push   %eax
f0111fa8:	e8 c3 ed fe ff       	call   f0100d70 <execute_command>
f0111fad:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111fb0:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111fb7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fba:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111fbd:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111fc4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fc7:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111fca:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111fd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fd4:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111fd7:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111fde:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fe1:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111fe4:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111feb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fee:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111ff1:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111ff8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ffb:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111ffe:	83 ec 08             	sub    $0x8,%esp
f0112001:	68 00 00 c0 01       	push   $0x1c00000
f0112006:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112009:	e8 94 3f 00 00       	call   f0115fa2 <GP>
f011200e:	83 c4 10             	add    $0x10,%esp
f0112011:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112014:	83 ec 08             	sub    $0x8,%esp
f0112017:	68 00 00 40 01       	push   $0x1400000
f011201c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011201f:	e8 7e 3f 00 00       	call   f0115fa2 <GP>
f0112024:	83 c4 10             	add    $0x10,%esp
f0112027:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011202a:	e8 6e ab ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011202f:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112032:	6a 01                	push   $0x1
f0112034:	68 00 00 40 01       	push   $0x1400000
f0112039:	68 00 00 c0 01       	push   $0x1c00000
f011203e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112041:	e8 0a 67 ff ff       	call   f0108750 <cut_paste_pages>
f0112046:	83 c4 10             	add    $0x10,%esp
f0112049:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011204c:	e8 4c ab ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112051:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112054:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112058:	75 08                	jne    f0112062 <test_cut_paste_pages+0x6b4>
f011205a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011205d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112060:	74 2b                	je     f011208d <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112062:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112065:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112068:	83 ec 0c             	sub    $0xc,%esp
f011206b:	50                   	push   %eax
f011206c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011206f:	68 fc 94 13 f0       	push   $0xf01394fc
f0112074:	68 f9 01 00 00       	push   $0x1f9
f0112079:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011207e:	e8 90 e3 fe ff       	call   f0100413 <_warn>
f0112083:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112086:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011208d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112091:	74 04                	je     f0112097 <test_cut_paste_pages+0x6e9>
f0112093:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112097:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011209e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01120a5:	83 ec 08             	sub    $0x8,%esp
f01120a8:	6a 00                	push   $0x0
f01120aa:	68 ff 0f 00 00       	push   $0xfff
f01120af:	ff 75 a4             	pushl  -0x5c(%ebp)
f01120b2:	68 ff 0f 00 00       	push   $0xfff
f01120b7:	ff 75 a0             	pushl  -0x60(%ebp)
f01120ba:	6a 01                	push   $0x1
f01120bc:	68 00 10 00 00       	push   $0x1000
f01120c1:	68 00 00 40 01       	push   $0x1400000
f01120c6:	68 00 00 c0 01       	push   $0x1c00000
f01120cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120ce:	e8 22 3f 00 00       	call   f0115ff5 <CCP>
f01120d3:	83 c4 30             	add    $0x30,%esp
f01120d6:	83 f8 01             	cmp    $0x1,%eax
f01120d9:	74 28                	je     f0112103 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01120db:	83 ec 04             	sub    $0x4,%esp
f01120de:	68 10 94 13 f0       	push   $0xf0139410
f01120e3:	68 02 02 00 00       	push   $0x202
f01120e8:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01120ed:	e8 21 e3 fe ff       	call   f0100413 <_warn>
f01120f2:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01120f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01120fc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112103:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112107:	74 04                	je     f011210d <test_cut_paste_pages+0x75f>
f0112109:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011210d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112114:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112118:	0f 84 92 00 00 00    	je     f01121b0 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011211e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112125:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011212c:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112133:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011213a:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112141:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112148:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011214b:	8a 00                	mov    (%eax),%al
f011214d:	3c 61                	cmp    $0x61,%al
f011214f:	75 2d                	jne    f011217e <test_cut_paste_pages+0x7d0>
f0112151:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112154:	8a 00                	mov    (%eax),%al
f0112156:	3c 78                	cmp    $0x78,%al
f0112158:	75 24                	jne    f011217e <test_cut_paste_pages+0x7d0>
f011215a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011215d:	8a 00                	mov    (%eax),%al
f011215f:	3c 62                	cmp    $0x62,%al
f0112161:	75 1b                	jne    f011217e <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112163:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112166:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112168:	3c 79                	cmp    $0x79,%al
f011216a:	75 12                	jne    f011217e <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011216c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011216f:	8a 00                	mov    (%eax),%al
f0112171:	3c 63                	cmp    $0x63,%al
f0112173:	75 09                	jne    f011217e <test_cut_paste_pages+0x7d0>
f0112175:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112178:	8a 00                	mov    (%eax),%al
f011217a:	3c 7a                	cmp    $0x7a,%al
f011217c:	74 21                	je     f011219f <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011217e:	83 ec 04             	sub    $0x4,%esp
f0112181:	68 5c 94 13 f0       	push   $0xf013945c
f0112186:	68 14 02 00 00       	push   $0x214
f011218b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112190:	e8 7e e2 fe ff       	call   f0100413 <_warn>
f0112195:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112198:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011219f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121a3:	74 04                	je     f01121a9 <test_cut_paste_pages+0x7fb>
f01121a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01121a9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01121b0:	e8 e8 a9 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01121b5:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01121b8:	6a 03                	push   $0x3
f01121ba:	68 00 f0 bf 01       	push   $0x1bff000
f01121bf:	68 00 00 40 01       	push   $0x1400000
f01121c4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121c7:	e8 84 65 ff ff       	call   f0108750 <cut_paste_pages>
f01121cc:	83 c4 10             	add    $0x10,%esp
f01121cf:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01121d2:	e8 c6 a9 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01121d7:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01121da:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01121de:	75 08                	jne    f01121e8 <test_cut_paste_pages+0x83a>
f01121e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121e3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01121e6:	74 2b                	je     f0112213 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01121e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121eb:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01121ee:	83 ec 0c             	sub    $0xc,%esp
f01121f1:	50                   	push   %eax
f01121f2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01121f5:	68 fc 94 13 f0       	push   $0xf01394fc
f01121fa:	68 23 02 00 00       	push   $0x223
f01121ff:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112204:	e8 0a e2 fe ff       	call   f0100413 <_warn>
f0112209:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011220c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112213:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112217:	74 04                	je     f011221d <test_cut_paste_pages+0x86f>
f0112219:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011221d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112224:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011222b:	83 ec 04             	sub    $0x4,%esp
f011222e:	6a 00                	push   $0x0
f0112230:	68 00 00 40 01       	push   $0x1400000
f0112235:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112238:	e8 94 3b 00 00       	call   f0115dd1 <CB>
f011223d:	83 c4 10             	add    $0x10,%esp
f0112240:	83 f8 01             	cmp    $0x1,%eax
f0112243:	0f 85 80 00 00 00    	jne    f01122c9 <test_cut_paste_pages+0x91b>
f0112249:	83 ec 04             	sub    $0x4,%esp
f011224c:	6a 00                	push   $0x0
f011224e:	68 00 10 40 01       	push   $0x1401000
f0112253:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112256:	e8 76 3b 00 00       	call   f0115dd1 <CB>
f011225b:	83 c4 10             	add    $0x10,%esp
f011225e:	83 f8 01             	cmp    $0x1,%eax
f0112261:	75 66                	jne    f01122c9 <test_cut_paste_pages+0x91b>
f0112263:	83 ec 04             	sub    $0x4,%esp
f0112266:	6a 00                	push   $0x0
f0112268:	68 00 20 40 01       	push   $0x1402000
f011226d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112270:	e8 5c 3b 00 00       	call   f0115dd1 <CB>
f0112275:	83 c4 10             	add    $0x10,%esp
f0112278:	83 f8 01             	cmp    $0x1,%eax
f011227b:	75 4c                	jne    f01122c9 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011227d:	83 ec 04             	sub    $0x4,%esp
f0112280:	6a 00                	push   $0x0
f0112282:	68 00 f0 bf 01       	push   $0x1bff000
f0112287:	ff 75 d4             	pushl  -0x2c(%ebp)
f011228a:	e8 42 3b 00 00       	call   f0115dd1 <CB>
f011228f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112292:	85 c0                	test   %eax,%eax
f0112294:	75 33                	jne    f01122c9 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112296:	83 ec 04             	sub    $0x4,%esp
f0112299:	6a 00                	push   $0x0
f011229b:	68 00 00 c0 01       	push   $0x1c00000
f01122a0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122a3:	e8 29 3b 00 00       	call   f0115dd1 <CB>
f01122a8:	83 c4 10             	add    $0x10,%esp
f01122ab:	83 f8 01             	cmp    $0x1,%eax
f01122ae:	75 19                	jne    f01122c9 <test_cut_paste_pages+0x91b>
f01122b0:	83 ec 04             	sub    $0x4,%esp
f01122b3:	6a 00                	push   $0x0
f01122b5:	68 00 10 c0 01       	push   $0x1c01000
f01122ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122bd:	e8 0f 3b 00 00       	call   f0115dd1 <CB>
f01122c2:	83 c4 10             	add    $0x10,%esp
f01122c5:	85 c0                	test   %eax,%eax
f01122c7:	74 28                	je     f01122f1 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01122c9:	83 ec 04             	sub    $0x4,%esp
f01122cc:	68 5c 95 13 f0       	push   $0xf013955c
f01122d1:	68 2c 02 00 00       	push   $0x22c
f01122d6:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01122db:	e8 33 e1 fe ff       	call   f0100413 <_warn>
f01122e0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01122e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01122ea:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01122f1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122f5:	74 04                	je     f01122fb <test_cut_paste_pages+0x94d>
f01122f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01122fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112302:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112306:	0f 84 99 00 00 00    	je     f01123a5 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011230c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112313:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011231a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112321:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112328:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011232f:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112336:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112339:	8a 00                	mov    (%eax),%al
f011233b:	3c 61                	cmp    $0x61,%al
f011233d:	75 2d                	jne    f011236c <test_cut_paste_pages+0x9be>
f011233f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112342:	8a 00                	mov    (%eax),%al
f0112344:	3c 78                	cmp    $0x78,%al
f0112346:	75 24                	jne    f011236c <test_cut_paste_pages+0x9be>
f0112348:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011234b:	8a 00                	mov    (%eax),%al
f011234d:	3c 62                	cmp    $0x62,%al
f011234f:	75 1b                	jne    f011236c <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112351:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112354:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112356:	3c 79                	cmp    $0x79,%al
f0112358:	75 12                	jne    f011236c <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011235a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011235d:	8a 00                	mov    (%eax),%al
f011235f:	3c 63                	cmp    $0x63,%al
f0112361:	75 09                	jne    f011236c <test_cut_paste_pages+0x9be>
f0112363:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112366:	8a 00                	mov    (%eax),%al
f0112368:	3c 7a                	cmp    $0x7a,%al
f011236a:	74 28                	je     f0112394 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011236c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112373:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011237a:	83 ec 04             	sub    $0x4,%esp
f011237d:	68 5c 94 13 f0       	push   $0xf013945c
f0112382:	68 40 02 00 00       	push   $0x240
f0112387:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011238c:	e8 82 e0 fe ff       	call   f0100413 <_warn>
f0112391:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112394:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112398:	74 04                	je     f011239e <test_cut_paste_pages+0x9f0>
f011239a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011239e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01123a5:	83 ec 0c             	sub    $0xc,%esp
f01123a8:	68 95 95 13 f0       	push   $0xf0139595
f01123ad:	e8 5c e9 fe ff       	call   f0100d0e <cprintf>
f01123b2:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01123b5:	83 ec 08             	sub    $0x8,%esp
f01123b8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01123bb:	68 a4 95 13 f0       	push   $0xf01395a4
f01123c0:	e8 49 e9 fe ff       	call   f0100d0e <cprintf>
f01123c5:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01123c8:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01123cc:	75 10                	jne    f01123de <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01123ce:	83 ec 0c             	sub    $0xc,%esp
f01123d1:	68 d8 95 13 f0       	push   $0xf01395d8
f01123d6:	e8 33 e9 fe ff       	call   f0100d0e <cprintf>
f01123db:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01123de:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01123e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01123e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01123e9:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01123ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01123f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01123f4:	5b                   	pop    %ebx
f01123f5:	5e                   	pop    %esi
f01123f6:	5f                   	pop    %edi
f01123f7:	5d                   	pop    %ebp
f01123f8:	c3                   	ret    

f01123f9 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01123f9:	55                   	push   %ebp
f01123fa:	89 e5                	mov    %esp,%ebp
f01123fc:	57                   	push   %edi
f01123fd:	56                   	push   %esi
f01123fe:	53                   	push   %ebx
f01123ff:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112405:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011240b:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f0112410:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112415:	89 c7                	mov    %eax,%edi
f0112417:	89 de                	mov    %ebx,%esi
f0112419:	89 d1                	mov    %edx,%ecx
f011241b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011241d:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112423:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112428:	b0 00                	mov    $0x0,%al
f011242a:	89 d7                	mov    %edx,%edi
f011242c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011242e:	6a 00                	push   $0x0
f0112430:	6a 0a                	push   $0xa
f0112432:	6a 14                	push   $0x14
f0112434:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011243a:	50                   	push   %eax
f011243b:	e8 23 6a ff ff       	call   f0108e63 <env_create>
f0112440:	83 c4 10             	add    $0x10,%esp
f0112443:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112446:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112449:	8b 40 5c             	mov    0x5c(%eax),%eax
f011244c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011244f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112452:	8b 40 60             	mov    0x60(%eax),%eax
f0112455:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011245b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112461:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112464:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011246b:	75 70 20 
f011246e:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112475:	00 00 00 
f0112478:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011247e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112483:	b8 00 00 00 00       	mov    $0x0,%eax
f0112488:	89 d7                	mov    %edx,%edi
f011248a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011248c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011248f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112492:	83 ec 08             	sub    $0x8,%esp
f0112495:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011249b:	52                   	push   %edx
f011249c:	50                   	push   %eax
f011249d:	e8 1e f1 01 00       	call   f01315c0 <ltostr>
f01124a2:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01124a5:	83 ec 04             	sub    $0x4,%esp
f01124a8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01124ae:	50                   	push   %eax
f01124af:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01124b5:	50                   	push   %eax
f01124b6:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01124bc:	50                   	push   %eax
f01124bd:	e8 f6 f1 01 00       	call   f01316b8 <strcconcat>
f01124c2:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01124c5:	83 ec 0c             	sub    $0xc,%esp
f01124c8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124cb:	e8 f1 3a 00 00       	call   f0115fc1 <ClearUserSpace>
f01124d0:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01124d3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01124da:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01124e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01124e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01124ef:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01124f6:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01124fd:	83 ec 0c             	sub    $0xc,%esp
f0112500:	68 4c 96 13 f0       	push   $0xf013964c
f0112505:	e8 04 e8 fe ff       	call   f0100d0e <cprintf>
f011250a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011250d:	83 ec 04             	sub    $0x4,%esp
f0112510:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112516:	50                   	push   %eax
f0112517:	68 82 96 13 f0       	push   $0xf0139682
f011251c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112522:	50                   	push   %eax
f0112523:	e8 90 f1 01 00       	call   f01316b8 <strcconcat>
f0112528:	83 c4 10             	add    $0x10,%esp
f011252b:	83 ec 0c             	sub    $0xc,%esp
f011252e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112534:	50                   	push   %eax
f0112535:	e8 36 e8 fe ff       	call   f0100d70 <execute_command>
f011253a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f011253d:	83 ec 04             	sub    $0x4,%esp
f0112540:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112546:	50                   	push   %eax
f0112547:	68 87 96 13 f0       	push   $0xf0139687
f011254c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112552:	50                   	push   %eax
f0112553:	e8 60 f1 01 00       	call   f01316b8 <strcconcat>
f0112558:	83 c4 10             	add    $0x10,%esp
f011255b:	83 ec 0c             	sub    $0xc,%esp
f011255e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112564:	50                   	push   %eax
f0112565:	e8 06 e8 fe ff       	call   f0100d70 <execute_command>
f011256a:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011256d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112573:	bb 8d 99 13 f0       	mov    $0xf013998d,%ebx
f0112578:	ba 0f 00 00 00       	mov    $0xf,%edx
f011257d:	89 c7                	mov    %eax,%edi
f011257f:	89 de                	mov    %ebx,%esi
f0112581:	89 d1                	mov    %edx,%ecx
f0112583:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112585:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011258b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112590:	b0 00                	mov    $0x0,%al
f0112592:	89 d7                	mov    %edx,%edi
f0112594:	f3 aa                	rep stos %al,%es:(%edi)
f0112596:	83 ec 0c             	sub    $0xc,%esp
f0112599:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011259f:	50                   	push   %eax
f01125a0:	e8 cb e7 fe ff       	call   f0100d70 <execute_command>
f01125a5:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f01125a8:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01125ae:	bb f1 99 13 f0       	mov    $0xf01399f1,%ebx
f01125b3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125b8:	89 c7                	mov    %eax,%edi
f01125ba:	89 de                	mov    %ebx,%esi
f01125bc:	89 d1                	mov    %edx,%ecx
f01125be:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125c0:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01125c6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125cb:	b0 00                	mov    $0x0,%al
f01125cd:	89 d7                	mov    %edx,%edi
f01125cf:	f3 aa                	rep stos %al,%es:(%edi)
f01125d1:	83 ec 0c             	sub    $0xc,%esp
f01125d4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01125da:	50                   	push   %eax
f01125db:	e8 90 e7 fe ff       	call   f0100d70 <execute_command>
f01125e0:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01125e3:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01125e9:	bb 55 9a 13 f0       	mov    $0xf0139a55,%ebx
f01125ee:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125f3:	89 c7                	mov    %eax,%edi
f01125f5:	89 de                	mov    %ebx,%esi
f01125f7:	89 d1                	mov    %edx,%ecx
f01125f9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125fb:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112601:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112606:	b0 00                	mov    $0x0,%al
f0112608:	89 d7                	mov    %edx,%edi
f011260a:	f3 aa                	rep stos %al,%es:(%edi)
f011260c:	83 ec 0c             	sub    $0xc,%esp
f011260f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112615:	50                   	push   %eax
f0112616:	e8 55 e7 fe ff       	call   f0100d70 <execute_command>
f011261b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011261e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112624:	bb b9 9a 13 f0       	mov    $0xf0139ab9,%ebx
f0112629:	ba 0f 00 00 00       	mov    $0xf,%edx
f011262e:	89 c7                	mov    %eax,%edi
f0112630:	89 de                	mov    %ebx,%esi
f0112632:	89 d1                	mov    %edx,%ecx
f0112634:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112636:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011263c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112641:	b0 00                	mov    $0x0,%al
f0112643:	89 d7                	mov    %edx,%edi
f0112645:	f3 aa                	rep stos %al,%es:(%edi)
f0112647:	83 ec 0c             	sub    $0xc,%esp
f011264a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112650:	50                   	push   %eax
f0112651:	e8 1a e7 fe ff       	call   f0100d70 <execute_command>
f0112656:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112659:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011265f:	bb 1d 9b 13 f0       	mov    $0xf0139b1d,%ebx
f0112664:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112669:	89 c7                	mov    %eax,%edi
f011266b:	89 de                	mov    %ebx,%esi
f011266d:	89 d1                	mov    %edx,%ecx
f011266f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112671:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112677:	b9 55 00 00 00       	mov    $0x55,%ecx
f011267c:	b0 00                	mov    $0x0,%al
f011267e:	89 d7                	mov    %edx,%edi
f0112680:	f3 aa                	rep stos %al,%es:(%edi)
f0112682:	83 ec 0c             	sub    $0xc,%esp
f0112685:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011268b:	50                   	push   %eax
f011268c:	e8 df e6 fe ff       	call   f0100d70 <execute_command>
f0112691:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112694:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011269a:	bb 81 9b 13 f0       	mov    $0xf0139b81,%ebx
f011269f:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126a4:	89 c7                	mov    %eax,%edi
f01126a6:	89 de                	mov    %ebx,%esi
f01126a8:	89 d1                	mov    %edx,%ecx
f01126aa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126ac:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01126b2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126b7:	b0 00                	mov    $0x0,%al
f01126b9:	89 d7                	mov    %edx,%edi
f01126bb:	f3 aa                	rep stos %al,%es:(%edi)
f01126bd:	83 ec 0c             	sub    $0xc,%esp
f01126c0:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01126c6:	50                   	push   %eax
f01126c7:	e8 a4 e6 fe ff       	call   f0100d70 <execute_command>
f01126cc:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01126cf:	83 ec 04             	sub    $0x4,%esp
f01126d2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126d8:	50                   	push   %eax
f01126d9:	68 8f 96 13 f0       	push   $0xf013968f
f01126de:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01126e4:	50                   	push   %eax
f01126e5:	e8 ce ef 01 00       	call   f01316b8 <strcconcat>
f01126ea:	83 c4 10             	add    $0x10,%esp
f01126ed:	83 ec 0c             	sub    $0xc,%esp
f01126f0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126f6:	50                   	push   %eax
f01126f7:	e8 74 e6 fe ff       	call   f0100d70 <execute_command>
f01126fc:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01126ff:	83 ec 04             	sub    $0x4,%esp
f0112702:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112708:	50                   	push   %eax
f0112709:	68 99 96 13 f0       	push   $0xf0139699
f011270e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112714:	50                   	push   %eax
f0112715:	e8 9e ef 01 00       	call   f01316b8 <strcconcat>
f011271a:	83 c4 10             	add    $0x10,%esp
f011271d:	83 ec 0c             	sub    $0xc,%esp
f0112720:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112726:	50                   	push   %eax
f0112727:	e8 44 e6 fe ff       	call   f0100d70 <execute_command>
f011272c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011272f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112735:	bb e5 9b 13 f0       	mov    $0xf0139be5,%ebx
f011273a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011273f:	89 c7                	mov    %eax,%edi
f0112741:	89 de                	mov    %ebx,%esi
f0112743:	89 d1                	mov    %edx,%ecx
f0112745:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112747:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011274d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112752:	b0 00                	mov    $0x0,%al
f0112754:	89 d7                	mov    %edx,%edi
f0112756:	f3 aa                	rep stos %al,%es:(%edi)
f0112758:	83 ec 0c             	sub    $0xc,%esp
f011275b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112761:	50                   	push   %eax
f0112762:	e8 09 e6 fe ff       	call   f0100d70 <execute_command>
f0112767:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011276a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112770:	bb 49 9c 13 f0       	mov    $0xf0139c49,%ebx
f0112775:	ba 0f 00 00 00       	mov    $0xf,%edx
f011277a:	89 c7                	mov    %eax,%edi
f011277c:	89 de                	mov    %ebx,%esi
f011277e:	89 d1                	mov    %edx,%ecx
f0112780:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112782:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112788:	b9 55 00 00 00       	mov    $0x55,%ecx
f011278d:	b0 00                	mov    $0x0,%al
f011278f:	89 d7                	mov    %edx,%edi
f0112791:	f3 aa                	rep stos %al,%es:(%edi)
f0112793:	83 ec 0c             	sub    $0xc,%esp
f0112796:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011279c:	50                   	push   %eax
f011279d:	e8 ce e5 fe ff       	call   f0100d70 <execute_command>
f01127a2:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01127a5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01127ab:	bb ad 9c 13 f0       	mov    $0xf0139cad,%ebx
f01127b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127b5:	89 c7                	mov    %eax,%edi
f01127b7:	89 de                	mov    %ebx,%esi
f01127b9:	89 d1                	mov    %edx,%ecx
f01127bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127bd:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01127c3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127c8:	b0 00                	mov    $0x0,%al
f01127ca:	89 d7                	mov    %edx,%edi
f01127cc:	f3 aa                	rep stos %al,%es:(%edi)
f01127ce:	83 ec 0c             	sub    $0xc,%esp
f01127d1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01127d7:	50                   	push   %eax
f01127d8:	e8 93 e5 fe ff       	call   f0100d70 <execute_command>
f01127dd:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01127e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01127e7:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01127ee:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01127f5:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01127fc:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112803:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011280a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112811:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112818:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011281f:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112826:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011282d:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112834:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112837:	8a 00                	mov    (%eax),%al
f0112839:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011283f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112842:	8a 00                	mov    (%eax),%al
f0112844:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011284a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011284d:	8a 00                	mov    (%eax),%al
f011284f:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112855:	e8 43 a3 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011285a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011285d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112860:	89 d0                	mov    %edx,%eax
f0112862:	01 c0                	add    %eax,%eax
f0112864:	01 d0                	add    %edx,%eax
f0112866:	01 c0                	add    %eax,%eax
f0112868:	50                   	push   %eax
f0112869:	68 00 00 10 00       	push   $0x100000
f011286e:	6a 00                	push   $0x0
f0112870:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112873:	e8 56 60 ff ff       	call   f01088ce <copy_paste_chunk>
f0112878:	83 c4 10             	add    $0x10,%esp
f011287b:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011287e:	e8 1a a3 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112883:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112886:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011288d:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112891:	75 08                	jne    f011289b <test_copy_paste_chunk+0x4a2>
f0112893:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112896:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112899:	74 2b                	je     f01128c6 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011289b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011289e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01128a1:	83 ec 0c             	sub    $0xc,%esp
f01128a4:	50                   	push   %eax
f01128a5:	ff 75 88             	pushl  -0x78(%ebp)
f01128a8:	68 a8 96 13 f0       	push   $0xf01396a8
f01128ad:	68 93 02 00 00       	push   $0x293
f01128b2:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01128b7:	e8 57 db fe ff       	call   f0100413 <_warn>
f01128bc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01128bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01128c6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128ca:	74 04                	je     f01128d0 <test_copy_paste_chunk+0x4d7>
f01128cc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01128d0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01128d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128da:	8a 00                	mov    (%eax),%al
f01128dc:	3c 61                	cmp    $0x61,%al
f01128de:	75 75                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f01128e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128e3:	8a 00                	mov    (%eax),%al
f01128e5:	3c 78                	cmp    $0x78,%al
f01128e7:	75 6c                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f01128e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128ec:	8a 00                	mov    (%eax),%al
f01128ee:	3c 62                	cmp    $0x62,%al
f01128f0:	75 63                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f01128f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01128f5:	8a 00                	mov    (%eax),%al
f01128f7:	3c 79                	cmp    $0x79,%al
f01128f9:	75 5a                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f01128fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128fe:	8a 00                	mov    (%eax),%al
f0112900:	3c 63                	cmp    $0x63,%al
f0112902:	75 51                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f0112904:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112907:	8a 00                	mov    (%eax),%al
f0112909:	3c 7a                	cmp    $0x7a,%al
f011290b:	75 48                	jne    f0112955 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011290d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112910:	8a 00                	mov    (%eax),%al
f0112912:	3c 64                	cmp    $0x64,%al
f0112914:	75 3f                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f0112916:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112919:	8a 10                	mov    (%eax),%dl
f011291b:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112921:	38 c2                	cmp    %al,%dl
f0112923:	75 30                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f0112925:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112928:	8a 00                	mov    (%eax),%al
f011292a:	3c 65                	cmp    $0x65,%al
f011292c:	75 27                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f011292e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112931:	8a 10                	mov    (%eax),%dl
f0112933:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112939:	38 c2                	cmp    %al,%dl
f011293b:	75 18                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f011293d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112940:	8a 00                	mov    (%eax),%al
f0112942:	3c 66                	cmp    $0x66,%al
f0112944:	75 0f                	jne    f0112955 <test_copy_paste_chunk+0x55c>
f0112946:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112949:	8a 10                	mov    (%eax),%dl
f011294b:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112951:	38 c2                	cmp    %al,%dl
f0112953:	74 21                	je     f0112976 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112955:	83 ec 04             	sub    $0x4,%esp
f0112958:	68 0c 97 13 f0       	push   $0xf013970c
f011295d:	68 9c 02 00 00       	push   $0x29c
f0112962:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112967:	e8 a7 da fe ff       	call   f0100413 <_warn>
f011296c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011296f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112976:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011297a:	74 04                	je     f0112980 <test_copy_paste_chunk+0x587>
f011297c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112980:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112987:	83 ec 0c             	sub    $0xc,%esp
f011298a:	68 46 97 13 f0       	push   $0xf0139746
f011298f:	e8 7a e3 fe ff       	call   f0100d0e <cprintf>
f0112994:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112997:	83 ec 0c             	sub    $0xc,%esp
f011299a:	68 58 97 13 f0       	push   $0xf0139758
f011299f:	e8 6a e3 fe ff       	call   f0100d0e <cprintf>
f01129a4:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01129a7:	83 ec 04             	sub    $0x4,%esp
f01129aa:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129b0:	50                   	push   %eax
f01129b1:	68 8e 97 13 f0       	push   $0xf013978e
f01129b6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129bc:	50                   	push   %eax
f01129bd:	e8 f6 ec 01 00       	call   f01316b8 <strcconcat>
f01129c2:	83 c4 10             	add    $0x10,%esp
f01129c5:	83 ec 0c             	sub    $0xc,%esp
f01129c8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129ce:	50                   	push   %eax
f01129cf:	e8 9c e3 fe ff       	call   f0100d70 <execute_command>
f01129d4:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01129d7:	83 ec 04             	sub    $0x4,%esp
f01129da:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129e0:	50                   	push   %eax
f01129e1:	68 98 97 13 f0       	push   $0xf0139798
f01129e6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129ec:	50                   	push   %eax
f01129ed:	e8 c6 ec 01 00       	call   f01316b8 <strcconcat>
f01129f2:	83 c4 10             	add    $0x10,%esp
f01129f5:	83 ec 0c             	sub    $0xc,%esp
f01129f8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129fe:	50                   	push   %eax
f01129ff:	e8 6c e3 fe ff       	call   f0100d70 <execute_command>
f0112a04:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112a07:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a0d:	bb 11 9d 13 f0       	mov    $0xf0139d11,%ebx
f0112a12:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a17:	89 c7                	mov    %eax,%edi
f0112a19:	89 de                	mov    %ebx,%esi
f0112a1b:	89 d1                	mov    %edx,%ecx
f0112a1d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a1f:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112a25:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a2a:	b0 00                	mov    $0x0,%al
f0112a2c:	89 d7                	mov    %edx,%edi
f0112a2e:	f3 aa                	rep stos %al,%es:(%edi)
f0112a30:	83 ec 0c             	sub    $0xc,%esp
f0112a33:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a39:	50                   	push   %eax
f0112a3a:	e8 31 e3 fe ff       	call   f0100d70 <execute_command>
f0112a3f:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112a42:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a48:	bb 75 9d 13 f0       	mov    $0xf0139d75,%ebx
f0112a4d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a52:	89 c7                	mov    %eax,%edi
f0112a54:	89 de                	mov    %ebx,%esi
f0112a56:	89 d1                	mov    %edx,%ecx
f0112a58:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a5a:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112a60:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a65:	b0 00                	mov    $0x0,%al
f0112a67:	89 d7                	mov    %edx,%edi
f0112a69:	f3 aa                	rep stos %al,%es:(%edi)
f0112a6b:	83 ec 0c             	sub    $0xc,%esp
f0112a6e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a74:	50                   	push   %eax
f0112a75:	e8 f6 e2 fe ff       	call   f0100d70 <execute_command>
f0112a7a:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112a7d:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112a83:	bb d9 9d 13 f0       	mov    $0xf0139dd9,%ebx
f0112a88:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a8d:	89 c7                	mov    %eax,%edi
f0112a8f:	89 de                	mov    %ebx,%esi
f0112a91:	89 d1                	mov    %edx,%ecx
f0112a93:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a95:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112a9b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112aa0:	b0 00                	mov    $0x0,%al
f0112aa2:	89 d7                	mov    %edx,%edi
f0112aa4:	f3 aa                	rep stos %al,%es:(%edi)
f0112aa6:	83 ec 0c             	sub    $0xc,%esp
f0112aa9:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112aaf:	50                   	push   %eax
f0112ab0:	e8 bb e2 fe ff       	call   f0100d70 <execute_command>
f0112ab5:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112ab8:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112abe:	bb 3d 9e 13 f0       	mov    $0xf0139e3d,%ebx
f0112ac3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ac8:	89 c7                	mov    %eax,%edi
f0112aca:	89 de                	mov    %ebx,%esi
f0112acc:	89 d1                	mov    %edx,%ecx
f0112ace:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ad0:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112ad6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112adb:	b0 00                	mov    $0x0,%al
f0112add:	89 d7                	mov    %edx,%edi
f0112adf:	f3 aa                	rep stos %al,%es:(%edi)
f0112ae1:	83 ec 0c             	sub    $0xc,%esp
f0112ae4:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112aea:	50                   	push   %eax
f0112aeb:	e8 80 e2 fe ff       	call   f0100d70 <execute_command>
f0112af0:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112af3:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112af9:	bb a1 9e 13 f0       	mov    $0xf0139ea1,%ebx
f0112afe:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b03:	89 c7                	mov    %eax,%edi
f0112b05:	89 de                	mov    %ebx,%esi
f0112b07:	89 d1                	mov    %edx,%ecx
f0112b09:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b0b:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112b11:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b16:	b0 00                	mov    $0x0,%al
f0112b18:	89 d7                	mov    %edx,%edi
f0112b1a:	f3 aa                	rep stos %al,%es:(%edi)
f0112b1c:	83 ec 0c             	sub    $0xc,%esp
f0112b1f:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112b25:	50                   	push   %eax
f0112b26:	e8 45 e2 fe ff       	call   f0100d70 <execute_command>
f0112b2b:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112b2e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b34:	bb 05 9f 13 f0       	mov    $0xf0139f05,%ebx
f0112b39:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b3e:	89 c7                	mov    %eax,%edi
f0112b40:	89 de                	mov    %ebx,%esi
f0112b42:	89 d1                	mov    %edx,%ecx
f0112b44:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b46:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112b4c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b51:	b0 00                	mov    $0x0,%al
f0112b53:	89 d7                	mov    %edx,%edi
f0112b55:	f3 aa                	rep stos %al,%es:(%edi)
f0112b57:	83 ec 0c             	sub    $0xc,%esp
f0112b5a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b60:	50                   	push   %eax
f0112b61:	e8 0a e2 fe ff       	call   f0100d70 <execute_command>
f0112b66:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112b69:	83 ec 04             	sub    $0x4,%esp
f0112b6c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b72:	50                   	push   %eax
f0112b73:	68 a2 97 13 f0       	push   $0xf01397a2
f0112b78:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b7e:	50                   	push   %eax
f0112b7f:	e8 34 eb 01 00       	call   f01316b8 <strcconcat>
f0112b84:	83 c4 10             	add    $0x10,%esp
f0112b87:	83 ec 0c             	sub    $0xc,%esp
f0112b8a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b90:	50                   	push   %eax
f0112b91:	e8 da e1 fe ff       	call   f0100d70 <execute_command>
f0112b96:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112b99:	83 ec 04             	sub    $0x4,%esp
f0112b9c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ba2:	50                   	push   %eax
f0112ba3:	68 ac 97 13 f0       	push   $0xf01397ac
f0112ba8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112bae:	50                   	push   %eax
f0112baf:	e8 04 eb 01 00       	call   f01316b8 <strcconcat>
f0112bb4:	83 c4 10             	add    $0x10,%esp
f0112bb7:	83 ec 0c             	sub    $0xc,%esp
f0112bba:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bc0:	50                   	push   %eax
f0112bc1:	e8 aa e1 fe ff       	call   f0100d70 <execute_command>
f0112bc6:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0112bc9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bcf:	bb 69 9f 13 f0       	mov    $0xf0139f69,%ebx
f0112bd4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bd9:	89 c7                	mov    %eax,%edi
f0112bdb:	89 de                	mov    %ebx,%esi
f0112bdd:	89 d1                	mov    %edx,%ecx
f0112bdf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112be1:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112be7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bec:	b0 00                	mov    $0x0,%al
f0112bee:	89 d7                	mov    %edx,%edi
f0112bf0:	f3 aa                	rep stos %al,%es:(%edi)
f0112bf2:	83 ec 0c             	sub    $0xc,%esp
f0112bf5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bfb:	50                   	push   %eax
f0112bfc:	e8 6f e1 fe ff       	call   f0100d70 <execute_command>
f0112c01:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112c04:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c0a:	bb cd 9f 13 f0       	mov    $0xf0139fcd,%ebx
f0112c0f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c14:	89 c7                	mov    %eax,%edi
f0112c16:	89 de                	mov    %ebx,%esi
f0112c18:	89 d1                	mov    %edx,%ecx
f0112c1a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c1c:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112c22:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c27:	b0 00                	mov    $0x0,%al
f0112c29:	89 d7                	mov    %edx,%edi
f0112c2b:	f3 aa                	rep stos %al,%es:(%edi)
f0112c2d:	83 ec 0c             	sub    $0xc,%esp
f0112c30:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c36:	50                   	push   %eax
f0112c37:	e8 34 e1 fe ff       	call   f0100d70 <execute_command>
f0112c3c:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112c3f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c45:	bb 31 a0 13 f0       	mov    $0xf013a031,%ebx
f0112c4a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c4f:	89 c7                	mov    %eax,%edi
f0112c51:	89 de                	mov    %ebx,%esi
f0112c53:	89 d1                	mov    %edx,%ecx
f0112c55:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c57:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112c5d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c62:	b0 00                	mov    $0x0,%al
f0112c64:	89 d7                	mov    %edx,%edi
f0112c66:	f3 aa                	rep stos %al,%es:(%edi)
f0112c68:	83 ec 0c             	sub    $0xc,%esp
f0112c6b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c71:	50                   	push   %eax
f0112c72:	e8 f9 e0 fe ff       	call   f0100d70 <execute_command>
f0112c77:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112c7a:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112c81:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112c88:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112c8f:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112c96:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112c9d:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112ca4:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112cab:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112cb2:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112cb9:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112cc0:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0112cc7:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0112cce:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112cd1:	8a 00                	mov    (%eax),%al
f0112cd3:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112cd9:	e8 bf 9e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112cde:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112ce1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ce4:	89 d0                	mov    %edx,%eax
f0112ce6:	01 c0                	add    %eax,%eax
f0112ce8:	01 d0                	add    %edx,%eax
f0112cea:	01 c0                	add    %eax,%eax
f0112cec:	50                   	push   %eax
f0112ced:	68 00 00 40 00       	push   $0x400000
f0112cf2:	68 00 00 20 00       	push   $0x200000
f0112cf7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112cfa:	e8 cf 5b ff ff       	call   f01088ce <copy_paste_chunk>
f0112cff:	83 c4 10             	add    $0x10,%esp
f0112d02:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d05:	e8 93 9e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112d0a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112d0d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112d14:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112d18:	75 08                	jne    f0112d22 <test_copy_paste_chunk+0x929>
f0112d1a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d1d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112d20:	74 2b                	je     f0112d4d <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d22:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d25:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d28:	83 ec 0c             	sub    $0xc,%esp
f0112d2b:	50                   	push   %eax
f0112d2c:	ff 75 80             	pushl  -0x80(%ebp)
f0112d2f:	68 b8 97 13 f0       	push   $0xf01397b8
f0112d34:	68 cc 02 00 00       	push   $0x2cc
f0112d39:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112d3e:	e8 d0 d6 fe ff       	call   f0100413 <_warn>
f0112d43:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112d46:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112d4d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d51:	74 04                	je     f0112d57 <test_copy_paste_chunk+0x95e>
f0112d53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d57:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112d5e:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112d65:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112d68:	83 ec 08             	sub    $0x8,%esp
f0112d6b:	6a 01                	push   $0x1
f0112d6d:	6a 07                	push   $0x7
f0112d6f:	6a 07                	push   $0x7
f0112d71:	6a 07                	push   $0x7
f0112d73:	6a 07                	push   $0x7
f0112d75:	6a 01                	push   $0x1
f0112d77:	68 00 20 00 00       	push   $0x2000
f0112d7c:	68 00 00 40 00       	push   $0x400000
f0112d81:	68 00 00 20 00       	push   $0x200000
f0112d86:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d89:	e8 67 32 00 00       	call   f0115ff5 <CCP>
f0112d8e:	83 c4 30             	add    $0x30,%esp
f0112d91:	83 f8 01             	cmp    $0x1,%eax
f0112d94:	74 2b                	je     f0112dc1 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112d96:	83 ec 04             	sub    $0x4,%esp
f0112d99:	68 0c 98 13 f0       	push   $0xf013980c
f0112d9e:	68 d5 02 00 00       	push   $0x2d5
f0112da3:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112da8:	e8 66 d6 fe ff       	call   f0100413 <_warn>
f0112dad:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112db0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112db7:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112dbe:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112dc1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dc5:	74 04                	je     f0112dcb <test_copy_paste_chunk+0x9d2>
f0112dc7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dcb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112dd2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112dd5:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112dd8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112ddb:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112dde:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112de1:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112de4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112de7:	8a 00                	mov    (%eax),%al
f0112de9:	3c 61                	cmp    $0x61,%al
f0112deb:	75 69                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112ded:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112df0:	8a 00                	mov    (%eax),%al
f0112df2:	3c 61                	cmp    $0x61,%al
f0112df4:	75 60                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112df6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112df9:	8a 00                	mov    (%eax),%al
f0112dfb:	3c 79                	cmp    $0x79,%al
f0112dfd:	75 57                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112dff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112e02:	8a 00                	mov    (%eax),%al
f0112e04:	3c 62                	cmp    $0x62,%al
f0112e06:	75 4e                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112e0b:	8a 00                	mov    (%eax),%al
f0112e0d:	3c 63                	cmp    $0x63,%al
f0112e0f:	75 45                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e11:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112e14:	8a 00                	mov    (%eax),%al
f0112e16:	3c 7a                	cmp    $0x7a,%al
f0112e18:	75 3c                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112e1a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112e1d:	8a 00                	mov    (%eax),%al
f0112e1f:	3c 77                	cmp    $0x77,%al
f0112e21:	75 33                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e23:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112e26:	8a 00                	mov    (%eax),%al
f0112e28:	3c 64                	cmp    $0x64,%al
f0112e2a:	75 2a                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e2c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112e2f:	8a 00                	mov    (%eax),%al
f0112e31:	3c 65                	cmp    $0x65,%al
f0112e33:	75 21                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e38:	8a 00                	mov    (%eax),%al
f0112e3a:	3c 65                	cmp    $0x65,%al
f0112e3c:	75 18                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e3e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112e41:	8a 00                	mov    (%eax),%al
f0112e43:	3c 66                	cmp    $0x66,%al
f0112e45:	75 0f                	jne    f0112e56 <test_copy_paste_chunk+0xa5d>
f0112e47:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e4a:	8a 10                	mov    (%eax),%dl
f0112e4c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112e52:	38 c2                	cmp    %al,%dl
f0112e54:	74 21                	je     f0112e77 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112e56:	83 ec 04             	sub    $0x4,%esp
f0112e59:	68 0c 97 13 f0       	push   $0xf013970c
f0112e5e:	68 e3 02 00 00       	push   $0x2e3
f0112e63:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112e68:	e8 a6 d5 fe ff       	call   f0100413 <_warn>
f0112e6d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e70:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112e77:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e7b:	74 04                	je     f0112e81 <test_copy_paste_chunk+0xa88>
f0112e7d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e81:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112e88:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e8b:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e8e:	e8 0a 9d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112e93:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112e96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112e99:	89 c2                	mov    %eax,%edx
f0112e9b:	01 d2                	add    %edx,%edx
f0112e9d:	01 d0                	add    %edx,%eax
f0112e9f:	50                   	push   %eax
f0112ea0:	68 00 08 20 00       	push   $0x200800
f0112ea5:	68 00 08 40 00       	push   $0x400800
f0112eaa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ead:	e8 1c 5a ff ff       	call   f01088ce <copy_paste_chunk>
f0112eb2:	83 c4 10             	add    $0x10,%esp
f0112eb5:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112eb8:	e8 e0 9c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112ebd:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112ec0:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112ec4:	75 08                	jne    f0112ece <test_copy_paste_chunk+0xad5>
f0112ec6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ec9:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112ecc:	74 2b                	je     f0112ef9 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ece:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ed1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112ed4:	83 ec 0c             	sub    $0xc,%esp
f0112ed7:	50                   	push   %eax
f0112ed8:	ff 75 80             	pushl  -0x80(%ebp)
f0112edb:	68 b8 97 13 f0       	push   $0xf01397b8
f0112ee0:	68 f3 02 00 00       	push   $0x2f3
f0112ee5:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112eea:	e8 24 d5 fe ff       	call   f0100413 <_warn>
f0112eef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ef2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112ef9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112efd:	74 04                	je     f0112f03 <test_copy_paste_chunk+0xb0a>
f0112eff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f03:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112f0a:	83 ec 08             	sub    $0x8,%esp
f0112f0d:	6a 01                	push   $0x1
f0112f0f:	6a 07                	push   $0x7
f0112f11:	6a 07                	push   $0x7
f0112f13:	6a 07                	push   $0x7
f0112f15:	6a 07                	push   $0x7
f0112f17:	6a 01                	push   $0x1
f0112f19:	68 00 20 00 00       	push   $0x2000
f0112f1e:	68 00 00 20 00       	push   $0x200000
f0112f23:	68 00 00 40 00       	push   $0x400000
f0112f28:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f2b:	e8 c5 30 00 00       	call   f0115ff5 <CCP>
f0112f30:	83 c4 30             	add    $0x30,%esp
f0112f33:	83 f8 01             	cmp    $0x1,%eax
f0112f36:	74 21                	je     f0112f59 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112f38:	83 ec 04             	sub    $0x4,%esp
f0112f3b:	68 58 98 13 f0       	push   $0xf0139858
f0112f40:	68 fb 02 00 00       	push   $0x2fb
f0112f45:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112f4a:	e8 c4 d4 fe ff       	call   f0100413 <_warn>
f0112f4f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f52:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112f59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f5d:	74 04                	je     f0112f63 <test_copy_paste_chunk+0xb6a>
f0112f5f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f63:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112f6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f6d:	8a 00                	mov    (%eax),%al
f0112f6f:	3c 61                	cmp    $0x61,%al
f0112f71:	75 69                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112f73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f76:	8a 00                	mov    (%eax),%al
f0112f78:	3c 61                	cmp    $0x61,%al
f0112f7a:	75 60                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112f7c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f7f:	8a 00                	mov    (%eax),%al
f0112f81:	3c 79                	cmp    $0x79,%al
f0112f83:	75 57                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112f85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f88:	8a 00                	mov    (%eax),%al
f0112f8a:	3c 62                	cmp    $0x62,%al
f0112f8c:	75 4e                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112f8e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112f91:	8a 00                	mov    (%eax),%al
f0112f93:	3c 7a                	cmp    $0x7a,%al
f0112f95:	75 45                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112f97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f9a:	8a 00                	mov    (%eax),%al
f0112f9c:	3c 7a                	cmp    $0x7a,%al
f0112f9e:	75 3c                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112fa0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112fa3:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112fa5:	3c 64                	cmp    $0x64,%al
f0112fa7:	75 33                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112fa9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112fac:	8a 00                	mov    (%eax),%al
f0112fae:	3c 64                	cmp    $0x64,%al
f0112fb0:	75 2a                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112fb2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112fb5:	8a 00                	mov    (%eax),%al
f0112fb7:	3c 65                	cmp    $0x65,%al
f0112fb9:	75 21                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112fbb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112fbe:	8a 00                	mov    (%eax),%al
f0112fc0:	3c 78                	cmp    $0x78,%al
f0112fc2:	75 18                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112fc4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112fc7:	8a 00                	mov    (%eax),%al
f0112fc9:	3c 66                	cmp    $0x66,%al
f0112fcb:	75 0f                	jne    f0112fdc <test_copy_paste_chunk+0xbe3>
f0112fcd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112fd0:	8a 10                	mov    (%eax),%dl
f0112fd2:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112fd8:	38 c2                	cmp    %al,%dl
f0112fda:	74 21                	je     f0112ffd <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112fdc:	83 ec 04             	sub    $0x4,%esp
f0112fdf:	68 0c 97 13 f0       	push   $0xf013970c
f0112fe4:	68 04 03 00 00       	push   $0x304
f0112fe9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0112fee:	e8 20 d4 fe ff       	call   f0100413 <_warn>
f0112ff3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ff6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ffd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113001:	74 04                	je     f0113007 <test_copy_paste_chunk+0xc0e>
f0113003:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113007:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011300e:	83 ec 0c             	sub    $0xc,%esp
f0113011:	68 a3 98 13 f0       	push   $0xf01398a3
f0113016:	e8 f3 dc fe ff       	call   f0100d0e <cprintf>
f011301b:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011301e:	83 ec 0c             	sub    $0xc,%esp
f0113021:	68 b4 98 13 f0       	push   $0xf01398b4
f0113026:	e8 e3 dc fe ff       	call   f0100d0e <cprintf>
f011302b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011302e:	83 ec 04             	sub    $0x4,%esp
f0113031:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113037:	50                   	push   %eax
f0113038:	68 e8 98 13 f0       	push   $0xf01398e8
f011303d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113043:	50                   	push   %eax
f0113044:	e8 6f e6 01 00       	call   f01316b8 <strcconcat>
f0113049:	83 c4 10             	add    $0x10,%esp
f011304c:	83 ec 0c             	sub    $0xc,%esp
f011304f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113055:	50                   	push   %eax
f0113056:	e8 15 dd fe ff       	call   f0100d70 <execute_command>
f011305b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f011305e:	83 ec 04             	sub    $0x4,%esp
f0113061:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113067:	50                   	push   %eax
f0113068:	68 f2 98 13 f0       	push   $0xf01398f2
f011306d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113073:	50                   	push   %eax
f0113074:	e8 3f e6 01 00       	call   f01316b8 <strcconcat>
f0113079:	83 c4 10             	add    $0x10,%esp
f011307c:	83 ec 0c             	sub    $0xc,%esp
f011307f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113085:	50                   	push   %eax
f0113086:	e8 e5 dc fe ff       	call   f0100d70 <execute_command>
f011308b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011308e:	83 ec 04             	sub    $0x4,%esp
f0113091:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113097:	50                   	push   %eax
f0113098:	68 fc 98 13 f0       	push   $0xf01398fc
f011309d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130a3:	50                   	push   %eax
f01130a4:	e8 0f e6 01 00       	call   f01316b8 <strcconcat>
f01130a9:	83 c4 10             	add    $0x10,%esp
f01130ac:	83 ec 0c             	sub    $0xc,%esp
f01130af:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130b5:	50                   	push   %eax
f01130b6:	e8 b5 dc fe ff       	call   f0100d70 <execute_command>
f01130bb:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01130be:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130c4:	bb 95 a0 13 f0       	mov    $0xf013a095,%ebx
f01130c9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130ce:	89 c7                	mov    %eax,%edi
f01130d0:	89 de                	mov    %ebx,%esi
f01130d2:	89 d1                	mov    %edx,%ecx
f01130d4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130d6:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01130dc:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130e1:	b0 00                	mov    $0x0,%al
f01130e3:	89 d7                	mov    %edx,%edi
f01130e5:	f3 aa                	rep stos %al,%es:(%edi)
f01130e7:	83 ec 0c             	sub    $0xc,%esp
f01130ea:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130f0:	50                   	push   %eax
f01130f1:	e8 7a dc fe ff       	call   f0100d70 <execute_command>
f01130f6:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01130f9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130ff:	bb f9 a0 13 f0       	mov    $0xf013a0f9,%ebx
f0113104:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113109:	89 c7                	mov    %eax,%edi
f011310b:	89 de                	mov    %ebx,%esi
f011310d:	89 d1                	mov    %edx,%ecx
f011310f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113111:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113117:	b9 55 00 00 00       	mov    $0x55,%ecx
f011311c:	b0 00                	mov    $0x0,%al
f011311e:	89 d7                	mov    %edx,%edi
f0113120:	f3 aa                	rep stos %al,%es:(%edi)
f0113122:	83 ec 0c             	sub    $0xc,%esp
f0113125:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011312b:	50                   	push   %eax
f011312c:	e8 3f dc fe ff       	call   f0100d70 <execute_command>
f0113131:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113134:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011313a:	bb 5d a1 13 f0       	mov    $0xf013a15d,%ebx
f011313f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113144:	89 c7                	mov    %eax,%edi
f0113146:	89 de                	mov    %ebx,%esi
f0113148:	89 d1                	mov    %edx,%ecx
f011314a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011314c:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113152:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113157:	b0 00                	mov    $0x0,%al
f0113159:	89 d7                	mov    %edx,%edi
f011315b:	f3 aa                	rep stos %al,%es:(%edi)
f011315d:	83 ec 0c             	sub    $0xc,%esp
f0113160:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113166:	50                   	push   %eax
f0113167:	e8 04 dc fe ff       	call   f0100d70 <execute_command>
f011316c:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011316f:	e8 29 9a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113174:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113177:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011317a:	89 d0                	mov    %edx,%eax
f011317c:	01 c0                	add    %eax,%eax
f011317e:	01 d0                	add    %edx,%eax
f0113180:	c1 e0 02             	shl    $0x2,%eax
f0113183:	50                   	push   %eax
f0113184:	68 00 00 90 00       	push   $0x900000
f0113189:	68 00 00 80 00       	push   $0x800000
f011318e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113191:	e8 38 57 ff ff       	call   f01088ce <copy_paste_chunk>
f0113196:	83 c4 10             	add    $0x10,%esp
f0113199:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011319f:	e8 f9 99 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01131a4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01131a7:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01131ae:	75 0b                	jne    f01131bb <test_copy_paste_chunk+0xdc2>
f01131b0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131b3:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131b6:	83 f8 03             	cmp    $0x3,%eax
f01131b9:	74 2e                	je     f01131e9 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131be:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131c1:	83 ec 0c             	sub    $0xc,%esp
f01131c4:	50                   	push   %eax
f01131c5:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01131cb:	68 b8 97 13 f0       	push   $0xf01397b8
f01131d0:	68 22 03 00 00       	push   $0x322
f01131d5:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01131da:	e8 34 d2 fe ff       	call   f0100413 <_warn>
f01131df:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131e2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01131e9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131ed:	74 04                	je     f01131f3 <test_copy_paste_chunk+0xdfa>
f01131ef:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131f3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01131fa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113201:	83 ec 08             	sub    $0x8,%esp
f0113204:	6a 01                	push   $0x1
f0113206:	6a 07                	push   $0x7
f0113208:	6a 07                	push   $0x7
f011320a:	6a 07                	push   $0x7
f011320c:	6a 07                	push   $0x7
f011320e:	6a 01                	push   $0x1
f0113210:	68 00 30 00 00       	push   $0x3000
f0113215:	68 00 00 90 00       	push   $0x900000
f011321a:	68 00 00 80 00       	push   $0x800000
f011321f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113222:	e8 ce 2d 00 00       	call   f0115ff5 <CCP>
f0113227:	83 c4 30             	add    $0x30,%esp
f011322a:	83 f8 01             	cmp    $0x1,%eax
f011322d:	74 28                	je     f0113257 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011322f:	83 ec 04             	sub    $0x4,%esp
f0113232:	68 58 98 13 f0       	push   $0xf0139858
f0113237:	68 2b 03 00 00       	push   $0x32b
f011323c:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113241:	e8 cd d1 fe ff       	call   f0100413 <_warn>
f0113246:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113249:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113250:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113257:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011325b:	74 04                	je     f0113261 <test_copy_paste_chunk+0xe68>
f011325d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113261:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113268:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011326c:	0f 84 9e 00 00 00    	je     f0113310 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113272:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113279:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113280:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113287:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011328e:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113295:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011329c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011329f:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01132a2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01132a5:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01132a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01132ab:	8a 00                	mov    (%eax),%al
f01132ad:	3c 61                	cmp    $0x61,%al
f01132af:	75 2d                	jne    f01132de <test_copy_paste_chunk+0xee5>
f01132b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01132b4:	8a 00                	mov    (%eax),%al
f01132b6:	3c 61                	cmp    $0x61,%al
f01132b8:	75 24                	jne    f01132de <test_copy_paste_chunk+0xee5>
f01132ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132bd:	8a 00                	mov    (%eax),%al
f01132bf:	3c 79                	cmp    $0x79,%al
f01132c1:	75 1b                	jne    f01132de <test_copy_paste_chunk+0xee5>
f01132c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01132c6:	8a 00                	mov    (%eax),%al
f01132c8:	3c 62                	cmp    $0x62,%al
f01132ca:	75 12                	jne    f01132de <test_copy_paste_chunk+0xee5>
f01132cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01132cf:	8a 00                	mov    (%eax),%al
f01132d1:	3c 63                	cmp    $0x63,%al
f01132d3:	75 09                	jne    f01132de <test_copy_paste_chunk+0xee5>
f01132d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01132d8:	8a 00                	mov    (%eax),%al
f01132da:	3c 7a                	cmp    $0x7a,%al
f01132dc:	74 21                	je     f01132ff <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132de:	83 ec 04             	sub    $0x4,%esp
f01132e1:	68 0c 97 13 f0       	push   $0xf013970c
f01132e6:	68 3d 03 00 00       	push   $0x33d
f01132eb:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01132f0:	e8 1e d1 fe ff       	call   f0100413 <_warn>
f01132f5:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01132f8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01132ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113303:	74 04                	je     f0113309 <test_copy_paste_chunk+0xf10>
f0113305:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113309:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113310:	e8 88 98 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113315:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113318:	6a 00                	push   $0x0
f011331a:	6a 02                	push   $0x2
f011331c:	68 00 10 90 00       	push   $0x901000
f0113321:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113324:	e8 59 2b 00 00       	call   f0115e82 <SB>
f0113329:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011332c:	6a 00                	push   $0x0
f011332e:	6a 02                	push   $0x2
f0113330:	68 00 20 90 00       	push   $0x902000
f0113335:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113338:	e8 45 2b 00 00       	call   f0115e82 <SB>
f011333d:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113340:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113343:	c1 e0 03             	shl    $0x3,%eax
f0113346:	50                   	push   %eax
f0113347:	68 00 f0 bf 00       	push   $0xbff000
f011334c:	68 00 10 90 00       	push   $0x901000
f0113351:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113354:	e8 75 55 ff ff       	call   f01088ce <copy_paste_chunk>
f0113359:	83 c4 10             	add    $0x10,%esp
f011335c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113362:	e8 36 98 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113367:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011336a:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113371:	75 0b                	jne    f011337e <test_copy_paste_chunk+0xf85>
f0113373:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113376:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113379:	83 f8 03             	cmp    $0x3,%eax
f011337c:	74 2e                	je     f01133ac <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011337e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113381:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113384:	83 ec 0c             	sub    $0xc,%esp
f0113387:	50                   	push   %eax
f0113388:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011338e:	68 b8 97 13 f0       	push   $0xf01397b8
f0113393:	68 4d 03 00 00       	push   $0x34d
f0113398:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011339d:	e8 71 d0 fe ff       	call   f0100413 <_warn>
f01133a2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133a5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01133ac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133b0:	74 04                	je     f01133b6 <test_copy_paste_chunk+0xfbd>
f01133b2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133b6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01133bd:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01133c4:	83 ec 08             	sub    $0x8,%esp
f01133c7:	6a 01                	push   $0x1
f01133c9:	6a 07                	push   $0x7
f01133cb:	6a 03                	push   $0x3
f01133cd:	6a 07                	push   $0x7
f01133cf:	6a 03                	push   $0x3
f01133d1:	6a 01                	push   $0x1
f01133d3:	68 00 20 00 00       	push   $0x2000
f01133d8:	68 00 f0 bf 00       	push   $0xbff000
f01133dd:	68 00 10 90 00       	push   $0x901000
f01133e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133e5:	e8 0b 2c 00 00       	call   f0115ff5 <CCP>
f01133ea:	83 c4 30             	add    $0x30,%esp
f01133ed:	83 f8 01             	cmp    $0x1,%eax
f01133f0:	74 28                	je     f011341a <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01133f2:	83 ec 04             	sub    $0x4,%esp
f01133f5:	68 58 98 13 f0       	push   $0xf0139858
f01133fa:	68 56 03 00 00       	push   $0x356
f01133ff:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113404:	e8 0a d0 fe ff       	call   f0100413 <_warn>
f0113409:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011340c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113413:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011341a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011341e:	74 04                	je     f0113424 <test_copy_paste_chunk+0x102b>
f0113420:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113424:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011342b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011342f:	74 72                	je     f01134a3 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113431:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113438:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011343f:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113446:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011344d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113450:	8a 00                	mov    (%eax),%al
f0113452:	3c 62                	cmp    $0x62,%al
f0113454:	75 1b                	jne    f0113471 <test_copy_paste_chunk+0x1078>
f0113456:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113459:	8a 00                	mov    (%eax),%al
f011345b:	3c 62                	cmp    $0x62,%al
f011345d:	75 12                	jne    f0113471 <test_copy_paste_chunk+0x1078>
f011345f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113462:	8a 00                	mov    (%eax),%al
f0113464:	3c 7a                	cmp    $0x7a,%al
f0113466:	75 09                	jne    f0113471 <test_copy_paste_chunk+0x1078>
f0113468:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011346b:	8a 00                	mov    (%eax),%al
f011346d:	3c 7a                	cmp    $0x7a,%al
f011346f:	74 21                	je     f0113492 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113471:	83 ec 04             	sub    $0x4,%esp
f0113474:	68 0c 97 13 f0       	push   $0xf013970c
f0113479:	68 62 03 00 00       	push   $0x362
f011347e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113483:	e8 8b cf fe ff       	call   f0100413 <_warn>
f0113488:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011348b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113492:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113496:	74 04                	je     f011349c <test_copy_paste_chunk+0x10a3>
f0113498:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011349c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01134a3:	83 ec 0c             	sub    $0xc,%esp
f01134a6:	68 06 99 13 f0       	push   $0xf0139906
f01134ab:	e8 5e d8 fe ff       	call   f0100d0e <cprintf>
f01134b0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01134b3:	83 ec 08             	sub    $0x8,%esp
f01134b6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01134b9:	68 18 99 13 f0       	push   $0xf0139918
f01134be:	e8 4b d8 fe ff       	call   f0100d0e <cprintf>
f01134c3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01134c6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01134ca:	75 10                	jne    f01134dc <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01134cc:	83 ec 0c             	sub    $0xc,%esp
f01134cf:	68 4c 99 13 f0       	push   $0xf013994c
f01134d4:	e8 35 d8 fe ff       	call   f0100d0e <cprintf>
f01134d9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01134dc:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01134e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01134e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01134e7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01134ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01134ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01134f2:	5b                   	pop    %ebx
f01134f3:	5e                   	pop    %esi
f01134f4:	5f                   	pop    %edi
f01134f5:	5d                   	pop    %ebp
f01134f6:	c3                   	ret    

f01134f7 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01134f7:	55                   	push   %ebp
f01134f8:	89 e5                	mov    %esp,%ebp
f01134fa:	57                   	push   %edi
f01134fb:	56                   	push   %esi
f01134fc:	53                   	push   %ebx
f01134fd:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113503:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113509:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f011350e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113513:	89 c7                	mov    %eax,%edi
f0113515:	89 de                	mov    %ebx,%esi
f0113517:	89 d1                	mov    %edx,%ecx
f0113519:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011351b:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113521:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113526:	b0 00                	mov    $0x0,%al
f0113528:	89 d7                	mov    %edx,%edi
f011352a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011352c:	6a 00                	push   $0x0
f011352e:	6a 0a                	push   $0xa
f0113530:	6a 14                	push   $0x14
f0113532:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113538:	50                   	push   %eax
f0113539:	e8 25 59 ff ff       	call   f0108e63 <env_create>
f011353e:	83 c4 10             	add    $0x10,%esp
f0113541:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113544:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113547:	8b 40 5c             	mov    0x5c(%eax),%eax
f011354a:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011354d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113550:	8b 40 60             	mov    0x60(%eax),%eax
f0113553:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113556:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113559:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011355c:	83 ec 0c             	sub    $0xc,%esp
f011355f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113562:	e8 5a 2a 00 00       	call   f0115fc1 <ClearUserSpace>
f0113567:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011356a:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113571:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113578:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011357f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113583:	83 ec 0c             	sub    $0xc,%esp
f0113586:	68 c4 a1 13 f0       	push   $0xf013a1c4
f011358b:	e8 7e d7 fe ff       	call   f0100d0e <cprintf>
f0113590:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113593:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011359a:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f01135a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01135a4:	8a 00                	mov    (%eax),%al
f01135a6:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01135ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01135af:	8a 00                	mov    (%eax),%al
f01135b1:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01135b7:	e8 e1 95 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01135bc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01135bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135c2:	89 d0                	mov    %edx,%eax
f01135c4:	01 c0                	add    %eax,%eax
f01135c6:	01 d0                	add    %edx,%eax
f01135c8:	01 c0                	add    %eax,%eax
f01135ca:	83 ec 0c             	sub    $0xc,%esp
f01135cd:	6a 02                	push   $0x2
f01135cf:	50                   	push   %eax
f01135d0:	68 00 40 10 f0       	push   $0xf0104000
f01135d5:	68 00 00 10 f0       	push   $0xf0100000
f01135da:	ff 75 cc             	pushl  -0x34(%ebp)
f01135dd:	e8 30 54 ff ff       	call   f0108a12 <share_chunk>
f01135e2:	83 c4 20             	add    $0x20,%esp
f01135e5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01135e8:	e8 b0 95 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01135ed:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01135f0:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01135f4:	75 08                	jne    f01135fe <test_share_chunk+0x107>
f01135f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135f9:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01135fc:	74 28                	je     f0113626 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01135fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113601:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113604:	83 ec 0c             	sub    $0xc,%esp
f0113607:	50                   	push   %eax
f0113608:	ff 75 b0             	pushl  -0x50(%ebp)
f011360b:	68 f0 a1 13 f0       	push   $0xf013a1f0
f0113610:	68 9e 03 00 00       	push   $0x39e
f0113615:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011361a:	e8 f4 cd fe ff       	call   f0100413 <_warn>
f011361f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113622:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113626:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011362a:	74 04                	je     f0113630 <test_share_chunk+0x139>
f011362c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113630:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113634:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113637:	c1 e0 03             	shl    $0x3,%eax
f011363a:	83 ec 08             	sub    $0x8,%esp
f011363d:	68 fd 00 00 00       	push   $0xfd
f0113642:	6a 07                	push   $0x7
f0113644:	6a 03                	push   $0x3
f0113646:	6a 07                	push   $0x7
f0113648:	6a 03                	push   $0x3
f011364a:	6a 01                	push   $0x1
f011364c:	50                   	push   %eax
f011364d:	68 00 40 10 f0       	push   $0xf0104000
f0113652:	68 00 00 10 f0       	push   $0xf0100000
f0113657:	ff 75 cc             	pushl  -0x34(%ebp)
f011365a:	e8 96 29 00 00       	call   f0115ff5 <CCP>
f011365f:	83 c4 30             	add    $0x30,%esp
f0113662:	85 c0                	test   %eax,%eax
f0113664:	75 1e                	jne    f0113684 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113666:	83 ec 04             	sub    $0x4,%esp
f0113669:	68 4c a2 13 f0       	push   $0xf013a24c
f011366e:	68 a6 03 00 00       	push   $0x3a6
f0113673:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113678:	e8 96 cd fe ff       	call   f0100413 <_warn>
f011367d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113680:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113684:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113688:	74 04                	je     f011368e <test_share_chunk+0x197>
f011368a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011368e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113691:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113694:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113697:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011369a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011369d:	8a 00                	mov    (%eax),%al
f011369f:	3c 41                	cmp    $0x41,%al
f01136a1:	75 09                	jne    f01136ac <test_share_chunk+0x1b5>
f01136a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136a6:	8a 00                	mov    (%eax),%al
f01136a8:	3c 42                	cmp    $0x42,%al
f01136aa:	74 1e                	je     f01136ca <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01136ac:	83 ec 04             	sub    $0x4,%esp
f01136af:	68 94 a2 13 f0       	push   $0xf013a294
f01136b4:	68 b0 03 00 00       	push   $0x3b0
f01136b9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01136be:	e8 50 cd fe ff       	call   f0100413 <_warn>
f01136c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01136ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01136ce:	74 04                	je     f01136d4 <test_share_chunk+0x1dd>
f01136d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01136d8:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01136de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136e1:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01136e3:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01136e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136ec:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01136ee:	83 ec 0c             	sub    $0xc,%esp
f01136f1:	68 c9 a2 13 f0       	push   $0xf013a2c9
f01136f6:	e8 13 d6 fe ff       	call   f0100d0e <cprintf>
f01136fb:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01136fe:	83 ec 0c             	sub    $0xc,%esp
f0113701:	68 d8 a2 13 f0       	push   $0xf013a2d8
f0113706:	e8 03 d6 fe ff       	call   f0100d0e <cprintf>
f011370b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011370e:	e8 8a 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113713:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113716:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113719:	c1 e0 05             	shl    $0x5,%eax
f011371c:	83 ec 0c             	sub    $0xc,%esp
f011371f:	68 02 0e 00 00       	push   $0xe02
f0113724:	50                   	push   %eax
f0113725:	68 00 00 00 40       	push   $0x40000000
f011372a:	68 00 00 00 f0       	push   $0xf0000000
f011372f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113732:	e8 db 52 ff ff       	call   f0108a12 <share_chunk>
f0113737:	83 c4 20             	add    $0x20,%esp
f011373a:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011373d:	e8 5b 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113742:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113745:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113749:	75 1f                	jne    f011376a <test_share_chunk+0x273>
f011374b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011374e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113751:	89 c1                	mov    %eax,%ecx
f0113753:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113756:	c1 e0 05             	shl    $0x5,%eax
f0113759:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011375c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113763:	99                   	cltd   
f0113764:	f7 fb                	idiv   %ebx
f0113766:	39 c1                	cmp    %eax,%ecx
f0113768:	74 28                	je     f0113792 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011376a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011376d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113770:	83 ec 0c             	sub    $0xc,%esp
f0113773:	50                   	push   %eax
f0113774:	ff 75 a8             	pushl  -0x58(%ebp)
f0113777:	68 14 a3 13 f0       	push   $0xf013a314
f011377c:	68 c8 03 00 00       	push   $0x3c8
f0113781:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113786:	e8 88 cc fe ff       	call   f0100413 <_warn>
f011378b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011378e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113792:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113796:	74 04                	je     f011379c <test_share_chunk+0x2a5>
f0113798:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011379c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01137a0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01137a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01137aa:	c1 e0 05             	shl    $0x5,%eax
f01137ad:	83 ec 08             	sub    $0x8,%esp
f01137b0:	6a 02                	push   $0x2
f01137b2:	6a 07                	push   $0x7
f01137b4:	6a 03                	push   $0x3
f01137b6:	68 07 0e 00 00       	push   $0xe07
f01137bb:	68 03 0e 00 00       	push   $0xe03
f01137c0:	6a ff                	push   $0xffffffff
f01137c2:	50                   	push   %eax
f01137c3:	68 00 00 00 40       	push   $0x40000000
f01137c8:	68 00 00 00 f0       	push   $0xf0000000
f01137cd:	ff 75 cc             	pushl  -0x34(%ebp)
f01137d0:	e8 20 28 00 00       	call   f0115ff5 <CCP>
f01137d5:	83 c4 30             	add    $0x30,%esp
f01137d8:	85 c0                	test   %eax,%eax
f01137da:	75 25                	jne    f0113801 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01137dc:	83 ec 04             	sub    $0x4,%esp
f01137df:	68 4c a2 13 f0       	push   $0xf013a24c
f01137e4:	68 d1 03 00 00       	push   $0x3d1
f01137e9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01137ee:	e8 20 cc fe ff       	call   f0100413 <_warn>
f01137f3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01137fa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113801:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113804:	89 d0                	mov    %edx,%eax
f0113806:	01 c0                	add    %eax,%eax
f0113808:	01 d0                	add    %edx,%eax
f011380a:	c1 e0 02             	shl    $0x2,%eax
f011380d:	83 ec 08             	sub    $0x8,%esp
f0113810:	6a 02                	push   $0x2
f0113812:	6a 07                	push   $0x7
f0113814:	6a 03                	push   $0x3
f0113816:	68 07 0e 00 00       	push   $0xe07
f011381b:	68 03 0e 00 00       	push   $0xe03
f0113820:	6a 02                	push   $0x2
f0113822:	50                   	push   %eax
f0113823:	68 00 00 00 40       	push   $0x40000000
f0113828:	68 00 00 00 f0       	push   $0xf0000000
f011382d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113830:	e8 c0 27 00 00       	call   f0115ff5 <CCP>
f0113835:	83 c4 30             	add    $0x30,%esp
f0113838:	85 c0                	test   %eax,%eax
f011383a:	75 1e                	jne    f011385a <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011383c:	83 ec 04             	sub    $0x4,%esp
f011383f:	68 4c a2 13 f0       	push   $0xf013a24c
f0113844:	68 d8 03 00 00       	push   $0x3d8
f0113849:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011384e:	e8 c0 cb fe ff       	call   f0100413 <_warn>
f0113853:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113856:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011385a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011385e:	74 04                	je     f0113864 <test_share_chunk+0x36d>
f0113860:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113864:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113868:	b8 7c 27 78 f0       	mov    $0xf078277c,%eax
f011386d:	05 00 00 00 10       	add    $0x10000000,%eax
f0113872:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113875:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113878:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011387d:	83 ec 08             	sub    $0x8,%esp
f0113880:	6a 02                	push   $0x2
f0113882:	6a 07                	push   $0x7
f0113884:	6a 03                	push   $0x3
f0113886:	68 07 0e 00 00       	push   $0xe07
f011388b:	68 03 0e 00 00       	push   $0xe03
f0113890:	6a 02                	push   $0x2
f0113892:	50                   	push   %eax
f0113893:	68 00 00 0a 40       	push   $0x400a0000
f0113898:	68 00 00 0a f0       	push   $0xf00a0000
f011389d:	ff 75 cc             	pushl  -0x34(%ebp)
f01138a0:	e8 50 27 00 00       	call   f0115ff5 <CCP>
f01138a5:	83 c4 30             	add    $0x30,%esp
f01138a8:	85 c0                	test   %eax,%eax
f01138aa:	75 1e                	jne    f01138ca <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138ac:	83 ec 04             	sub    $0x4,%esp
f01138af:	68 4c a2 13 f0       	push   $0xf013a24c
f01138b4:	68 e2 03 00 00       	push   $0x3e2
f01138b9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01138be:	e8 50 cb fe ff       	call   f0100413 <_warn>
f01138c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01138ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138ce:	74 04                	je     f01138d4 <test_share_chunk+0x3dd>
f01138d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01138d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01138dc:	0f 84 a4 00 00 00    	je     f0113986 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01138e2:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01138e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138ec:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01138ef:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01138f6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138f9:	8a 00                	mov    (%eax),%al
f01138fb:	3c 41                	cmp    $0x41,%al
f01138fd:	75 09                	jne    f0113908 <test_share_chunk+0x411>
f01138ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113902:	8a 00                	mov    (%eax),%al
f0113904:	3c 41                	cmp    $0x41,%al
f0113906:	74 1e                	je     f0113926 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113908:	83 ec 04             	sub    $0x4,%esp
f011390b:	68 94 a2 13 f0       	push   $0xf013a294
f0113910:	68 ef 03 00 00       	push   $0x3ef
f0113915:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011391a:	e8 f4 ca fe ff       	call   f0100413 <_warn>
f011391f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113922:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113926:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011392a:	74 04                	je     f0113930 <test_share_chunk+0x439>
f011392c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113930:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113934:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f011393b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011393e:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113941:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113948:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011394b:	8a 00                	mov    (%eax),%al
f011394d:	3c 43                	cmp    $0x43,%al
f011394f:	75 09                	jne    f011395a <test_share_chunk+0x463>
f0113951:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113954:	8a 00                	mov    (%eax),%al
f0113956:	3c 43                	cmp    $0x43,%al
f0113958:	74 1e                	je     f0113978 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011395a:	83 ec 04             	sub    $0x4,%esp
f011395d:	68 94 a2 13 f0       	push   $0xf013a294
f0113962:	68 fa 03 00 00       	push   $0x3fa
f0113967:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011396c:	e8 a2 ca fe ff       	call   f0100413 <_warn>
f0113971:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113974:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113978:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011397c:	74 04                	je     f0113982 <test_share_chunk+0x48b>
f011397e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113982:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113986:	83 ec 0c             	sub    $0xc,%esp
f0113989:	68 a3 98 13 f0       	push   $0xf01398a3
f011398e:	e8 7b d3 fe ff       	call   f0100d0e <cprintf>
f0113993:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113996:	83 ec 0c             	sub    $0xc,%esp
f0113999:	68 64 a3 13 f0       	push   $0xf013a364
f011399e:	e8 6b d3 fe ff       	call   f0100d0e <cprintf>
f01139a3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01139a6:	e8 f2 91 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01139ab:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01139ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01139b1:	89 d0                	mov    %edx,%eax
f01139b3:	c1 e0 03             	shl    $0x3,%eax
f01139b6:	01 d0                	add    %edx,%eax
f01139b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01139bf:	01 d0                	add    %edx,%eax
f01139c1:	c1 e0 03             	shl    $0x3,%eax
f01139c4:	83 ec 0c             	sub    $0xc,%esp
f01139c7:	6a 06                	push   $0x6
f01139c9:	50                   	push   %eax
f01139ca:	6a 00                	push   $0x0
f01139cc:	68 00 00 00 40       	push   $0x40000000
f01139d1:	ff 75 cc             	pushl  -0x34(%ebp)
f01139d4:	e8 39 50 ff ff       	call   f0108a12 <share_chunk>
f01139d9:	83 c4 20             	add    $0x20,%esp
f01139dc:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01139df:	e8 b9 91 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01139e4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01139e7:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01139eb:	75 0b                	jne    f01139f8 <test_share_chunk+0x501>
f01139ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139f0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01139f3:	83 f8 01             	cmp    $0x1,%eax
f01139f6:	74 28                	je     f0113a20 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01139f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139fb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01139fe:	83 ec 0c             	sub    $0xc,%esp
f0113a01:	50                   	push   %eax
f0113a02:	ff 75 a0             	pushl  -0x60(%ebp)
f0113a05:	68 14 a3 13 f0       	push   $0xf013a314
f0113a0a:	68 10 04 00 00       	push   $0x410
f0113a0f:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113a14:	e8 fa c9 fe ff       	call   f0100413 <_warn>
f0113a19:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a1c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a20:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a24:	74 04                	je     f0113a2a <test_share_chunk+0x533>
f0113a26:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a2a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113a2e:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113a35:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a38:	05 00 80 02 00       	add    $0x28000,%eax
f0113a3d:	c1 e0 02             	shl    $0x2,%eax
f0113a40:	83 ec 08             	sub    $0x8,%esp
f0113a43:	6a 02                	push   $0x2
f0113a45:	6a 07                	push   $0x7
f0113a47:	6a 03                	push   $0x3
f0113a49:	6a 07                	push   $0x7
f0113a4b:	6a 07                	push   $0x7
f0113a4d:	6a ff                	push   $0xffffffff
f0113a4f:	50                   	push   %eax
f0113a50:	6a 00                	push   $0x0
f0113a52:	68 00 00 00 40       	push   $0x40000000
f0113a57:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a5a:	e8 96 25 00 00       	call   f0115ff5 <CCP>
f0113a5f:	83 c4 30             	add    $0x30,%esp
f0113a62:	85 c0                	test   %eax,%eax
f0113a64:	75 25                	jne    f0113a8b <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113a66:	83 ec 04             	sub    $0x4,%esp
f0113a69:	68 4c a2 13 f0       	push   $0xf013a24c
f0113a6e:	68 19 04 00 00       	push   $0x419
f0113a73:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113a78:	e8 96 c9 fe ff       	call   f0100413 <_warn>
f0113a7d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a80:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113a84:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113a8b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a8e:	89 d0                	mov    %edx,%eax
f0113a90:	01 c0                	add    %eax,%eax
f0113a92:	01 d0                	add    %edx,%eax
f0113a94:	c1 e0 02             	shl    $0x2,%eax
f0113a97:	83 ec 08             	sub    $0x8,%esp
f0113a9a:	6a 02                	push   $0x2
f0113a9c:	6a 07                	push   $0x7
f0113a9e:	6a 03                	push   $0x3
f0113aa0:	6a 07                	push   $0x7
f0113aa2:	6a 07                	push   $0x7
f0113aa4:	6a 03                	push   $0x3
f0113aa6:	50                   	push   %eax
f0113aa7:	6a 00                	push   $0x0
f0113aa9:	68 00 00 00 40       	push   $0x40000000
f0113aae:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ab1:	e8 3f 25 00 00       	call   f0115ff5 <CCP>
f0113ab6:	83 c4 30             	add    $0x30,%esp
f0113ab9:	85 c0                	test   %eax,%eax
f0113abb:	75 1e                	jne    f0113adb <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113abd:	83 ec 04             	sub    $0x4,%esp
f0113ac0:	68 4c a2 13 f0       	push   $0xf013a24c
f0113ac5:	68 20 04 00 00       	push   $0x420
f0113aca:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113acf:	e8 3f c9 fe ff       	call   f0100413 <_warn>
f0113ad4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ad7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113adb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113adf:	74 04                	je     f0113ae5 <test_share_chunk+0x5ee>
f0113ae1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ae5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113ae9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113aec:	89 d0                	mov    %edx,%eax
f0113aee:	01 c0                	add    %eax,%eax
f0113af0:	01 d0                	add    %edx,%eax
f0113af2:	c1 e0 02             	shl    $0x2,%eax
f0113af5:	f7 d8                	neg    %eax
f0113af7:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113afc:	83 ec 08             	sub    $0x8,%esp
f0113aff:	6a 02                	push   $0x2
f0113b01:	6a 07                	push   $0x7
f0113b03:	6a 03                	push   $0x3
f0113b05:	6a 07                	push   $0x7
f0113b07:	6a 07                	push   $0x7
f0113b09:	6a 02                	push   $0x2
f0113b0b:	50                   	push   %eax
f0113b0c:	68 00 30 00 00       	push   $0x3000
f0113b11:	68 00 30 00 40       	push   $0x40003000
f0113b16:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b19:	e8 d7 24 00 00       	call   f0115ff5 <CCP>
f0113b1e:	83 c4 30             	add    $0x30,%esp
f0113b21:	85 c0                	test   %eax,%eax
f0113b23:	75 1e                	jne    f0113b43 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b25:	83 ec 04             	sub    $0x4,%esp
f0113b28:	68 4c a2 13 f0       	push   $0xf013a24c
f0113b2d:	68 28 04 00 00       	push   $0x428
f0113b32:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113b37:	e8 d7 c8 fe ff       	call   f0100413 <_warn>
f0113b3c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b3f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b43:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b47:	74 04                	je     f0113b4d <test_share_chunk+0x656>
f0113b49:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b4d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113b51:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b54:	c1 e0 02             	shl    $0x2,%eax
f0113b57:	83 ec 08             	sub    $0x8,%esp
f0113b5a:	6a 02                	push   $0x2
f0113b5c:	6a 07                	push   $0x7
f0113b5e:	6a 03                	push   $0x3
f0113b60:	6a 07                	push   $0x7
f0113b62:	6a 07                	push   $0x7
f0113b64:	6a 03                	push   $0x3
f0113b66:	50                   	push   %eax
f0113b67:	68 00 00 0a 00       	push   $0xa0000
f0113b6c:	68 00 00 0a 40       	push   $0x400a0000
f0113b71:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b74:	e8 7c 24 00 00       	call   f0115ff5 <CCP>
f0113b79:	83 c4 30             	add    $0x30,%esp
f0113b7c:	85 c0                	test   %eax,%eax
f0113b7e:	75 1e                	jne    f0113b9e <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b80:	83 ec 04             	sub    $0x4,%esp
f0113b83:	68 4c a2 13 f0       	push   $0xf013a24c
f0113b88:	68 30 04 00 00       	push   $0x430
f0113b8d:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113b92:	e8 7c c8 fe ff       	call   f0100413 <_warn>
f0113b97:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b9a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b9e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ba2:	74 04                	je     f0113ba8 <test_share_chunk+0x6b1>
f0113ba4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ba8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113bac:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113bb0:	0f 84 92 00 00 00    	je     f0113c48 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113bb6:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113bbd:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113bc4:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0113bcb:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113bd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113bd5:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113bd8:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113bdf:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113be6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113be9:	8a 00                	mov    (%eax),%al
f0113beb:	3c 41                	cmp    $0x41,%al
f0113bed:	75 2d                	jne    f0113c1c <test_share_chunk+0x725>
f0113bef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113bf2:	8a 00                	mov    (%eax),%al
f0113bf4:	3c 41                	cmp    $0x41,%al
f0113bf6:	75 24                	jne    f0113c1c <test_share_chunk+0x725>
f0113bf8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113bfb:	8a 00                	mov    (%eax),%al
f0113bfd:	3c 41                	cmp    $0x41,%al
f0113bff:	75 1b                	jne    f0113c1c <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113c01:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113c04:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113c06:	3c 44                	cmp    $0x44,%al
f0113c08:	75 12                	jne    f0113c1c <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113c0a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113c0d:	8a 00                	mov    (%eax),%al
f0113c0f:	3c 44                	cmp    $0x44,%al
f0113c11:	75 09                	jne    f0113c1c <test_share_chunk+0x725>
f0113c13:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113c16:	8a 00                	mov    (%eax),%al
f0113c18:	3c 44                	cmp    $0x44,%al
f0113c1a:	74 1e                	je     f0113c3a <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113c1c:	83 ec 04             	sub    $0x4,%esp
f0113c1f:	68 94 a2 13 f0       	push   $0xf013a294
f0113c24:	68 42 04 00 00       	push   $0x442
f0113c29:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113c2e:	e8 e0 c7 fe ff       	call   f0100413 <_warn>
f0113c33:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c36:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113c3a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c3e:	74 04                	je     f0113c44 <test_share_chunk+0x74d>
f0113c40:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113c44:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113c48:	83 ec 0c             	sub    $0xc,%esp
f0113c4b:	68 06 99 13 f0       	push   $0xf0139906
f0113c50:	e8 b9 d0 fe ff       	call   f0100d0e <cprintf>
f0113c55:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113c58:	83 ec 0c             	sub    $0xc,%esp
f0113c5b:	68 a0 a3 13 f0       	push   $0xf013a3a0
f0113c60:	e8 a9 d0 fe ff       	call   f0100d0e <cprintf>
f0113c65:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c68:	e8 30 8f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113c6d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113c70:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c73:	89 d0                	mov    %edx,%eax
f0113c75:	01 c0                	add    %eax,%eax
f0113c77:	01 d0                	add    %edx,%eax
f0113c79:	01 c0                	add    %eax,%eax
f0113c7b:	01 d0                	add    %edx,%eax
f0113c7d:	83 ec 0c             	sub    $0xc,%esp
f0113c80:	6a 04                	push   $0x4
f0113c82:	50                   	push   %eax
f0113c83:	68 00 fc 3f 00       	push   $0x3ffc00
f0113c88:	68 00 fc 09 00       	push   $0x9fc00
f0113c8d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c90:	e8 7d 4d ff ff       	call   f0108a12 <share_chunk>
f0113c95:	83 c4 20             	add    $0x20,%esp
f0113c98:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c9b:	e8 fd 8e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113ca0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113ca3:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113ca7:	75 0b                	jne    f0113cb4 <test_share_chunk+0x7bd>
f0113ca9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113caf:	83 f8 01             	cmp    $0x1,%eax
f0113cb2:	74 28                	je     f0113cdc <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113cb4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cb7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113cba:	83 ec 0c             	sub    $0xc,%esp
f0113cbd:	50                   	push   %eax
f0113cbe:	ff 75 8c             	pushl  -0x74(%ebp)
f0113cc1:	68 14 a3 13 f0       	push   $0xf013a314
f0113cc6:	68 58 04 00 00       	push   $0x458
f0113ccb:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113cd0:	e8 3e c7 fe ff       	call   f0100413 <_warn>
f0113cd5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cd8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113cdc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ce0:	74 04                	je     f0113ce6 <test_share_chunk+0x7ef>
f0113ce2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ce6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113cea:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113cf1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cf4:	89 d0                	mov    %edx,%eax
f0113cf6:	01 c0                	add    %eax,%eax
f0113cf8:	01 d0                	add    %edx,%eax
f0113cfa:	c1 e0 02             	shl    $0x2,%eax
f0113cfd:	83 ec 08             	sub    $0x8,%esp
f0113d00:	6a 02                	push   $0x2
f0113d02:	6a 07                	push   $0x7
f0113d04:	6a 07                	push   $0x7
f0113d06:	6a 07                	push   $0x7
f0113d08:	6a 05                	push   $0x5
f0113d0a:	6a ff                	push   $0xffffffff
f0113d0c:	50                   	push   %eax
f0113d0d:	68 00 f0 3f 00       	push   $0x3ff000
f0113d12:	68 00 f0 09 00       	push   $0x9f000
f0113d17:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d1a:	e8 d6 22 00 00       	call   f0115ff5 <CCP>
f0113d1f:	83 c4 30             	add    $0x30,%esp
f0113d22:	85 c0                	test   %eax,%eax
f0113d24:	75 25                	jne    f0113d4b <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d26:	83 ec 04             	sub    $0x4,%esp
f0113d29:	68 4c a2 13 f0       	push   $0xf013a24c
f0113d2e:	68 61 04 00 00       	push   $0x461
f0113d33:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113d38:	e8 d6 c6 fe ff       	call   f0100413 <_warn>
f0113d3d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d40:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113d44:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113d4b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d4f:	74 04                	je     f0113d55 <test_share_chunk+0x85e>
f0113d51:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113d59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d5c:	c1 e0 02             	shl    $0x2,%eax
f0113d5f:	83 ec 08             	sub    $0x8,%esp
f0113d62:	6a 02                	push   $0x2
f0113d64:	6a 07                	push   $0x7
f0113d66:	6a 07                	push   $0x7
f0113d68:	6a 07                	push   $0x7
f0113d6a:	6a 05                	push   $0x5
f0113d6c:	6a 03                	push   $0x3
f0113d6e:	50                   	push   %eax
f0113d6f:	68 00 f0 3f 00       	push   $0x3ff000
f0113d74:	68 00 f0 09 00       	push   $0x9f000
f0113d79:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d7c:	e8 74 22 00 00       	call   f0115ff5 <CCP>
f0113d81:	83 c4 30             	add    $0x30,%esp
f0113d84:	85 c0                	test   %eax,%eax
f0113d86:	75 1e                	jne    f0113da6 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d88:	83 ec 04             	sub    $0x4,%esp
f0113d8b:	68 4c a2 13 f0       	push   $0xf013a24c
f0113d90:	68 6a 04 00 00       	push   $0x46a
f0113d95:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113d9a:	e8 74 c6 fe ff       	call   f0100413 <_warn>
f0113d9f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113da2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113da6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113daa:	74 04                	je     f0113db0 <test_share_chunk+0x8b9>
f0113dac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113db0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113db4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113db7:	c1 e0 03             	shl    $0x3,%eax
f0113dba:	83 ec 08             	sub    $0x8,%esp
f0113dbd:	6a 02                	push   $0x2
f0113dbf:	6a 07                	push   $0x7
f0113dc1:	6a 07                	push   $0x7
f0113dc3:	6a 07                	push   $0x7
f0113dc5:	6a 05                	push   $0x5
f0113dc7:	6a 04                	push   $0x4
f0113dc9:	50                   	push   %eax
f0113dca:	68 00 00 40 00       	push   $0x400000
f0113dcf:	68 00 00 0a 00       	push   $0xa0000
f0113dd4:	ff 75 cc             	pushl  -0x34(%ebp)
f0113dd7:	e8 19 22 00 00       	call   f0115ff5 <CCP>
f0113ddc:	83 c4 30             	add    $0x30,%esp
f0113ddf:	85 c0                	test   %eax,%eax
f0113de1:	75 1e                	jne    f0113e01 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113de3:	83 ec 04             	sub    $0x4,%esp
f0113de6:	68 4c a2 13 f0       	push   $0xf013a24c
f0113deb:	68 72 04 00 00       	push   $0x472
f0113df0:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113df5:	e8 19 c6 fe ff       	call   f0100413 <_warn>
f0113dfa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113dfd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e01:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e05:	74 04                	je     f0113e0b <test_share_chunk+0x914>
f0113e07:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e0b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113e0f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113e13:	0f 84 b2 00 00 00    	je     f0113ecb <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113e19:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113e20:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113e27:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113e2e:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113e35:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113e3c:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113e43:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113e4a:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113e51:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e54:	8a 00                	mov    (%eax),%al
f0113e56:	3c 44                	cmp    $0x44,%al
f0113e58:	75 45                	jne    f0113e9f <test_share_chunk+0x9a8>
f0113e5a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e5d:	8a 00                	mov    (%eax),%al
f0113e5f:	3c 44                	cmp    $0x44,%al
f0113e61:	75 3c                	jne    f0113e9f <test_share_chunk+0x9a8>
f0113e63:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113e66:	8a 00                	mov    (%eax),%al
f0113e68:	3c 44                	cmp    $0x44,%al
f0113e6a:	75 33                	jne    f0113e9f <test_share_chunk+0x9a8>
f0113e6c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113e6f:	8a 00                	mov    (%eax),%al
f0113e71:	3c 44                	cmp    $0x44,%al
f0113e73:	75 2a                	jne    f0113e9f <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113e75:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113e78:	8a 10                	mov    (%eax),%dl
f0113e7a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113e7d:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113e7f:	38 c2                	cmp    %al,%dl
f0113e81:	75 1c                	jne    f0113e9f <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113e83:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113e86:	8a 10                	mov    (%eax),%dl
f0113e88:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113e8b:	8a 00                	mov    (%eax),%al
f0113e8d:	38 c2                	cmp    %al,%dl
f0113e8f:	75 0e                	jne    f0113e9f <test_share_chunk+0x9a8>
f0113e91:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113e94:	8a 10                	mov    (%eax),%dl
f0113e96:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113e99:	8a 00                	mov    (%eax),%al
f0113e9b:	38 c2                	cmp    %al,%dl
f0113e9d:	74 1e                	je     f0113ebd <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113e9f:	83 ec 04             	sub    $0x4,%esp
f0113ea2:	68 94 a2 13 f0       	push   $0xf013a294
f0113ea7:	68 87 04 00 00       	push   $0x487
f0113eac:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0113eb1:	e8 5d c5 fe ff       	call   f0100413 <_warn>
f0113eb6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113eb9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113ebd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ec1:	74 04                	je     f0113ec7 <test_share_chunk+0x9d0>
f0113ec3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113ec7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113ecb:	83 ec 0c             	sub    $0xc,%esp
f0113ece:	68 d8 a3 13 f0       	push   $0xf013a3d8
f0113ed3:	e8 36 ce fe ff       	call   f0100d0e <cprintf>
f0113ed8:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113edb:	83 ec 08             	sub    $0x8,%esp
f0113ede:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113ee1:	68 e8 a3 13 f0       	push   $0xf013a3e8
f0113ee6:	e8 23 ce fe ff       	call   f0100d0e <cprintf>
f0113eeb:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113eee:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113ef2:	75 10                	jne    f0113f04 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113ef4:	83 ec 0c             	sub    $0xc,%esp
f0113ef7:	68 18 a4 13 f0       	push   $0xf013a418
f0113efc:	e8 0d ce fe ff       	call   f0100d0e <cprintf>
f0113f01:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113f04:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0113f09:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113f0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f0f:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113f12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113f17:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113f1a:	5b                   	pop    %ebx
f0113f1b:	5e                   	pop    %esi
f0113f1c:	5f                   	pop    %edi
f0113f1d:	5d                   	pop    %ebp
f0113f1e:	c3                   	ret    

f0113f1f <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113f1f:	55                   	push   %ebp
f0113f20:	89 e5                	mov    %esp,%ebp
f0113f22:	57                   	push   %edi
f0113f23:	56                   	push   %esi
f0113f24:	53                   	push   %ebx
f0113f25:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113f2b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113f31:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f0113f36:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113f3b:	89 c7                	mov    %eax,%edi
f0113f3d:	89 de                	mov    %ebx,%esi
f0113f3f:	89 d1                	mov    %edx,%ecx
f0113f41:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113f43:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113f49:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113f4e:	b0 00                	mov    $0x0,%al
f0113f50:	89 d7                	mov    %edx,%edi
f0113f52:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113f54:	6a 00                	push   $0x0
f0113f56:	6a 0a                	push   $0xa
f0113f58:	6a 14                	push   $0x14
f0113f5a:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113f60:	50                   	push   %eax
f0113f61:	e8 fd 4e ff ff       	call   f0108e63 <env_create>
f0113f66:	83 c4 10             	add    $0x10,%esp
f0113f69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113f6f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113f72:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113f75:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113f78:	8b 40 60             	mov    0x60(%eax),%eax
f0113f7b:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113f7e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f81:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113f84:	83 ec 0c             	sub    $0xc,%esp
f0113f87:	ff 75 d0             	pushl  -0x30(%ebp)
f0113f8a:	e8 32 20 00 00       	call   f0115fc1 <ClearUserSpace>
f0113f8f:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113f92:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113f99:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113fa0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113fa7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113fab:	83 ec 0c             	sub    $0xc,%esp
f0113fae:	68 54 a4 13 f0       	push   $0xf013a454
f0113fb3:	e8 56 cd fe ff       	call   f0100d0e <cprintf>
f0113fb8:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113fbb:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113fc2:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113fc9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fcc:	8a 00                	mov    (%eax),%al
f0113fce:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113fd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fd7:	8a 00                	mov    (%eax),%al
f0113fd9:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113fdf:	83 ec 08             	sub    $0x8,%esp
f0113fe2:	68 00 f0 bf ef       	push   $0xefbff000
f0113fe7:	ff 75 d0             	pushl  -0x30(%ebp)
f0113fea:	e8 b3 1f 00 00       	call   f0115fa2 <GP>
f0113fef:	83 c4 10             	add    $0x10,%esp
f0113ff2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ff5:	e8 a3 8b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113ffa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113ffd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114000:	c1 e0 02             	shl    $0x2,%eax
f0114003:	6a 02                	push   $0x2
f0114005:	50                   	push   %eax
f0114006:	68 00 f0 bf ef       	push   $0xefbff000
f011400b:	ff 75 d0             	pushl  -0x30(%ebp)
f011400e:	e8 12 4b ff ff       	call   f0108b25 <allocate_chunk>
f0114013:	83 c4 10             	add    $0x10,%esp
f0114016:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114019:	e8 7f 8b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011401e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114021:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114025:	75 08                	jne    f011402f <test_allocate_chunk+0x110>
f0114027:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011402a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011402d:	74 2a                	je     f0114059 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011402f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114032:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114035:	83 ec 08             	sub    $0x8,%esp
f0114038:	6a 00                	push   $0x0
f011403a:	50                   	push   %eax
f011403b:	ff 75 b0             	pushl  -0x50(%ebp)
f011403e:	68 80 a4 13 f0       	push   $0xf013a480
f0114043:	68 c3 04 00 00       	push   $0x4c3
f0114048:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011404d:	e8 c1 c3 fe ff       	call   f0100413 <_warn>
f0114052:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114055:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114059:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011405d:	74 04                	je     f0114063 <test_allocate_chunk+0x144>
f011405f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114063:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114067:	e8 31 8b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011406c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f011406f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114072:	01 c0                	add    %eax,%eax
f0114074:	89 c1                	mov    %eax,%ecx
f0114076:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114079:	89 d0                	mov    %edx,%eax
f011407b:	c1 e0 02             	shl    $0x2,%eax
f011407e:	01 d0                	add    %edx,%eax
f0114080:	f7 d8                	neg    %eax
f0114082:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114087:	6a 02                	push   $0x2
f0114089:	51                   	push   %ecx
f011408a:	50                   	push   %eax
f011408b:	ff 75 d0             	pushl  -0x30(%ebp)
f011408e:	e8 92 4a ff ff       	call   f0108b25 <allocate_chunk>
f0114093:	83 c4 10             	add    $0x10,%esp
f0114096:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114099:	e8 ff 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011409e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01140a1:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01140a5:	75 08                	jne    f01140af <test_allocate_chunk+0x190>
f01140a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140aa:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01140ad:	74 2a                	je     f01140d9 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01140af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140b2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140b5:	83 ec 08             	sub    $0x8,%esp
f01140b8:	6a 00                	push   $0x0
f01140ba:	50                   	push   %eax
f01140bb:	ff 75 b0             	pushl  -0x50(%ebp)
f01140be:	68 80 a4 13 f0       	push   $0xf013a480
f01140c3:	68 d1 04 00 00       	push   $0x4d1
f01140c8:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01140cd:	e8 41 c3 fe ff       	call   f0100413 <_warn>
f01140d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01140d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140dd:	74 04                	je     f01140e3 <test_allocate_chunk+0x1c4>
f01140df:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01140e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01140e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01140ea:	c1 e0 02             	shl    $0x2,%eax
f01140ed:	83 ec 08             	sub    $0x8,%esp
f01140f0:	6a 03                	push   $0x3
f01140f2:	6a 00                	push   $0x0
f01140f4:	6a 00                	push   $0x0
f01140f6:	68 ff 0f 00 00       	push   $0xfff
f01140fb:	ff 75 b8             	pushl  -0x48(%ebp)
f01140fe:	6a 01                	push   $0x1
f0114100:	50                   	push   %eax
f0114101:	68 00 f0 bf ef       	push   $0xefbff000
f0114106:	6a 00                	push   $0x0
f0114108:	ff 75 d0             	pushl  -0x30(%ebp)
f011410b:	e8 e5 1e 00 00       	call   f0115ff5 <CCP>
f0114110:	83 c4 30             	add    $0x30,%esp
f0114113:	85 c0                	test   %eax,%eax
f0114115:	75 1e                	jne    f0114135 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114117:	83 ec 04             	sub    $0x4,%esp
f011411a:	68 e8 a4 13 f0       	push   $0xf013a4e8
f011411f:	68 d9 04 00 00       	push   $0x4d9
f0114124:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114129:	e8 e5 c2 fe ff       	call   f0100413 <_warn>
f011412e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114131:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114135:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114139:	74 04                	je     f011413f <test_allocate_chunk+0x220>
f011413b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011413f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114143:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114146:	8a 10                	mov    (%eax),%dl
f0114148:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f011414e:	38 c2                	cmp    %al,%dl
f0114150:	75 0f                	jne    f0114161 <test_allocate_chunk+0x242>
f0114152:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114155:	8a 10                	mov    (%eax),%dl
f0114157:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f011415d:	38 c2                	cmp    %al,%dl
f011415f:	74 1e                	je     f011417f <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114161:	83 ec 04             	sub    $0x4,%esp
f0114164:	68 34 a5 13 f0       	push   $0xf013a534
f0114169:	68 e1 04 00 00       	push   $0x4e1
f011416e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114173:	e8 9b c2 fe ff       	call   f0100413 <_warn>
f0114178:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011417b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011417f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114183:	74 04                	je     f0114189 <test_allocate_chunk+0x26a>
f0114185:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114189:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011418d:	83 ec 0c             	sub    $0xc,%esp
f0114190:	68 c9 a2 13 f0       	push   $0xf013a2c9
f0114195:	e8 74 cb fe ff       	call   f0100d0e <cprintf>
f011419a:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f011419d:	83 ec 0c             	sub    $0xc,%esp
f01141a0:	68 6c a5 13 f0       	push   $0xf013a56c
f01141a5:	e8 64 cb fe ff       	call   f0100d0e <cprintf>
f01141aa:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141ad:	e8 eb 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01141b2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01141b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141b8:	c1 e0 05             	shl    $0x5,%eax
f01141bb:	68 02 0e 00 00       	push   $0xe02
f01141c0:	50                   	push   %eax
f01141c1:	6a 00                	push   $0x0
f01141c3:	ff 75 d0             	pushl  -0x30(%ebp)
f01141c6:	e8 5a 49 ff ff       	call   f0108b25 <allocate_chunk>
f01141cb:	83 c4 10             	add    $0x10,%esp
f01141ce:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01141d1:	e8 c7 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01141d6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01141d9:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01141dd:	75 36                	jne    f0114215 <test_allocate_chunk+0x2f6>
f01141df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141e2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141e5:	89 c1                	mov    %eax,%ecx
f01141e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141ea:	c1 e0 05             	shl    $0x5,%eax
f01141ed:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01141f0:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01141f7:	99                   	cltd   
f01141f8:	f7 fe                	idiv   %esi
f01141fa:	89 c3                	mov    %eax,%ebx
f01141fc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141ff:	c1 e0 05             	shl    $0x5,%eax
f0114202:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114205:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011420c:	99                   	cltd   
f011420d:	f7 fe                	idiv   %esi
f011420f:	01 d8                	add    %ebx,%eax
f0114211:	39 c1                	cmp    %eax,%ecx
f0114213:	74 54                	je     f0114269 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114215:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114218:	c1 e0 05             	shl    $0x5,%eax
f011421b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011421e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114225:	99                   	cltd   
f0114226:	f7 ff                	idiv   %edi
f0114228:	89 c1                	mov    %eax,%ecx
f011422a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011422d:	c1 e0 05             	shl    $0x5,%eax
f0114230:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114233:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011423a:	99                   	cltd   
f011423b:	f7 fe                	idiv   %esi
f011423d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114240:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114243:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114246:	83 ec 08             	sub    $0x8,%esp
f0114249:	52                   	push   %edx
f011424a:	50                   	push   %eax
f011424b:	ff 75 a8             	pushl  -0x58(%ebp)
f011424e:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114253:	68 f6 04 00 00       	push   $0x4f6
f0114258:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011425d:	e8 b1 c1 fe ff       	call   f0100413 <_warn>
f0114262:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114265:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114269:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011426d:	74 04                	je     f0114273 <test_allocate_chunk+0x354>
f011426f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114273:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114277:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011427e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114281:	c1 e0 05             	shl    $0x5,%eax
f0114284:	83 ec 08             	sub    $0x8,%esp
f0114287:	6a 03                	push   $0x3
f0114289:	6a 00                	push   $0x0
f011428b:	6a 00                	push   $0x0
f011428d:	68 07 0e 00 00       	push   $0xe07
f0114292:	68 03 0e 00 00       	push   $0xe03
f0114297:	6a 01                	push   $0x1
f0114299:	50                   	push   %eax
f011429a:	6a 00                	push   $0x0
f011429c:	6a 00                	push   $0x0
f011429e:	ff 75 d0             	pushl  -0x30(%ebp)
f01142a1:	e8 4f 1d 00 00       	call   f0115ff5 <CCP>
f01142a6:	83 c4 30             	add    $0x30,%esp
f01142a9:	85 c0                	test   %eax,%eax
f01142ab:	75 25                	jne    f01142d2 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01142ad:	83 ec 04             	sub    $0x4,%esp
f01142b0:	68 e8 a4 13 f0       	push   $0xf013a4e8
f01142b5:	68 ff 04 00 00       	push   $0x4ff
f01142ba:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01142bf:	e8 4f c1 fe ff       	call   f0100413 <_warn>
f01142c4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01142cb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01142d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142d6:	74 04                	je     f01142dc <test_allocate_chunk+0x3bd>
f01142d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01142dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01142e0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01142e4:	74 5a                	je     f0114340 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01142e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01142e9:	01 c0                	add    %eax,%eax
f01142eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01142ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142f1:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01142f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142f7:	01 c0                	add    %eax,%eax
f01142f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01142fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142ff:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114302:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114305:	8a 00                	mov    (%eax),%al
f0114307:	3c 4b                	cmp    $0x4b,%al
f0114309:	75 09                	jne    f0114314 <test_allocate_chunk+0x3f5>
f011430b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011430e:	8a 00                	mov    (%eax),%al
f0114310:	3c 4d                	cmp    $0x4d,%al
f0114312:	74 1e                	je     f0114332 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114314:	83 ec 04             	sub    $0x4,%esp
f0114317:	68 34 a5 13 f0       	push   $0xf013a534
f011431c:	68 0d 05 00 00       	push   $0x50d
f0114321:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114326:	e8 e8 c0 fe ff       	call   f0100413 <_warn>
f011432b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011432e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114332:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114336:	74 04                	je     f011433c <test_allocate_chunk+0x41d>
f0114338:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011433c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114340:	83 ec 0c             	sub    $0xc,%esp
f0114343:	68 a3 98 13 f0       	push   $0xf01398a3
f0114348:	e8 c1 c9 fe ff       	call   f0100d0e <cprintf>
f011434d:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114350:	83 ec 0c             	sub    $0xc,%esp
f0114353:	68 0c a6 13 f0       	push   $0xf013a60c
f0114358:	e8 b1 c9 fe ff       	call   f0100d0e <cprintf>
f011435d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114360:	e8 38 88 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114365:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114368:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011436b:	c1 e0 06             	shl    $0x6,%eax
f011436e:	89 c2                	mov    %eax,%edx
f0114370:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114373:	c1 e0 05             	shl    $0x5,%eax
f0114376:	6a 00                	push   $0x0
f0114378:	52                   	push   %edx
f0114379:	50                   	push   %eax
f011437a:	ff 75 d0             	pushl  -0x30(%ebp)
f011437d:	e8 a3 47 ff ff       	call   f0108b25 <allocate_chunk>
f0114382:	83 c4 10             	add    $0x10,%esp
f0114385:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114388:	e8 10 88 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011438d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114390:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114394:	75 36                	jne    f01143cc <test_allocate_chunk+0x4ad>
f0114396:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114399:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011439c:	89 c1                	mov    %eax,%ecx
f011439e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143a1:	c1 e0 06             	shl    $0x6,%eax
f01143a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143a7:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01143ae:	99                   	cltd   
f01143af:	f7 ff                	idiv   %edi
f01143b1:	89 c3                	mov    %eax,%ebx
f01143b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143b6:	c1 e0 06             	shl    $0x6,%eax
f01143b9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01143bc:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01143c3:	99                   	cltd   
f01143c4:	f7 fe                	idiv   %esi
f01143c6:	01 d8                	add    %ebx,%eax
f01143c8:	39 c1                	cmp    %eax,%ecx
f01143ca:	74 54                	je     f0114420 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01143cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143cf:	c1 e0 06             	shl    $0x6,%eax
f01143d2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143d5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01143dc:	99                   	cltd   
f01143dd:	f7 fb                	idiv   %ebx
f01143df:	89 c1                	mov    %eax,%ecx
f01143e1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143e4:	c1 e0 06             	shl    $0x6,%eax
f01143e7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01143ea:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01143f1:	99                   	cltd   
f01143f2:	f7 ff                	idiv   %edi
f01143f4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01143f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143fa:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01143fd:	83 ec 08             	sub    $0x8,%esp
f0114400:	52                   	push   %edx
f0114401:	50                   	push   %eax
f0114402:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114405:	68 ac a5 13 f0       	push   $0xf013a5ac
f011440a:	68 23 05 00 00       	push   $0x523
f011440f:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114414:	e8 fa bf fe ff       	call   f0100413 <_warn>
f0114419:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011441c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114420:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114424:	74 04                	je     f011442a <test_allocate_chunk+0x50b>
f0114426:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011442a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011442e:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114435:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114438:	c1 e0 06             	shl    $0x6,%eax
f011443b:	89 c2                	mov    %eax,%edx
f011443d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114440:	c1 e0 05             	shl    $0x5,%eax
f0114443:	83 ec 08             	sub    $0x8,%esp
f0114446:	6a 03                	push   $0x3
f0114448:	6a 00                	push   $0x0
f011444a:	6a 00                	push   $0x0
f011444c:	68 07 0e 00 00       	push   $0xe07
f0114451:	6a 01                	push   $0x1
f0114453:	6a 01                	push   $0x1
f0114455:	52                   	push   %edx
f0114456:	50                   	push   %eax
f0114457:	6a 00                	push   $0x0
f0114459:	ff 75 d0             	pushl  -0x30(%ebp)
f011445c:	e8 94 1b 00 00       	call   f0115ff5 <CCP>
f0114461:	83 c4 30             	add    $0x30,%esp
f0114464:	85 c0                	test   %eax,%eax
f0114466:	75 25                	jne    f011448d <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114468:	83 ec 04             	sub    $0x4,%esp
f011446b:	68 e8 a4 13 f0       	push   $0xf013a4e8
f0114470:	68 2c 05 00 00       	push   $0x52c
f0114475:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011447a:	e8 94 bf fe ff       	call   f0100413 <_warn>
f011447f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114482:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114486:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011448d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114491:	74 04                	je     f0114497 <test_allocate_chunk+0x578>
f0114493:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114497:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011449b:	83 ec 0c             	sub    $0xc,%esp
f011449e:	68 06 99 13 f0       	push   $0xf0139906
f01144a3:	e8 66 c8 fe ff       	call   f0100d0e <cprintf>
f01144a8:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f01144ab:	83 ec 0c             	sub    $0xc,%esp
f01144ae:	68 4c a6 13 f0       	push   $0xf013a64c
f01144b3:	e8 56 c8 fe ff       	call   f0100d0e <cprintf>
f01144b8:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01144bb:	e8 dd 86 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01144c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01144c3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144c6:	c1 e0 06             	shl    $0x6,%eax
f01144c9:	68 06 0e 00 00       	push   $0xe06
f01144ce:	50                   	push   %eax
f01144cf:	68 00 00 00 80       	push   $0x80000000
f01144d4:	ff 75 d0             	pushl  -0x30(%ebp)
f01144d7:	e8 49 46 ff ff       	call   f0108b25 <allocate_chunk>
f01144dc:	83 c4 10             	add    $0x10,%esp
f01144df:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01144e2:	e8 b6 86 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01144e7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01144ea:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01144ee:	75 36                	jne    f0114526 <test_allocate_chunk+0x607>
f01144f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144f3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144f6:	89 c1                	mov    %eax,%ecx
f01144f8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144fb:	c1 e0 06             	shl    $0x6,%eax
f01144fe:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114501:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114508:	99                   	cltd   
f0114509:	f7 fb                	idiv   %ebx
f011450b:	89 c3                	mov    %eax,%ebx
f011450d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114510:	c1 e0 06             	shl    $0x6,%eax
f0114513:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114516:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011451d:	99                   	cltd   
f011451e:	f7 fe                	idiv   %esi
f0114520:	01 d8                	add    %ebx,%eax
f0114522:	39 c1                	cmp    %eax,%ecx
f0114524:	74 54                	je     f011457a <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114526:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114529:	c1 e0 06             	shl    $0x6,%eax
f011452c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011452f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114536:	99                   	cltd   
f0114537:	f7 ff                	idiv   %edi
f0114539:	89 c1                	mov    %eax,%ecx
f011453b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011453e:	c1 e0 06             	shl    $0x6,%eax
f0114541:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114544:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011454b:	99                   	cltd   
f011454c:	f7 fb                	idiv   %ebx
f011454e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114551:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114554:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114557:	83 ec 08             	sub    $0x8,%esp
f011455a:	52                   	push   %edx
f011455b:	50                   	push   %eax
f011455c:	ff 75 9c             	pushl  -0x64(%ebp)
f011455f:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114564:	68 42 05 00 00       	push   $0x542
f0114569:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011456e:	e8 a0 be fe ff       	call   f0100413 <_warn>
f0114573:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114576:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011457a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011457e:	74 04                	je     f0114584 <test_allocate_chunk+0x665>
f0114580:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114584:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114588:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011458f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114592:	c1 e0 06             	shl    $0x6,%eax
f0114595:	83 ec 08             	sub    $0x8,%esp
f0114598:	6a 03                	push   $0x3
f011459a:	6a 00                	push   $0x0
f011459c:	6a 00                	push   $0x0
f011459e:	68 07 0e 00 00       	push   $0xe07
f01145a3:	68 07 0e 00 00       	push   $0xe07
f01145a8:	6a 01                	push   $0x1
f01145aa:	50                   	push   %eax
f01145ab:	68 00 00 00 80       	push   $0x80000000
f01145b0:	6a 00                	push   $0x0
f01145b2:	ff 75 d0             	pushl  -0x30(%ebp)
f01145b5:	e8 3b 1a 00 00       	call   f0115ff5 <CCP>
f01145ba:	83 c4 30             	add    $0x30,%esp
f01145bd:	85 c0                	test   %eax,%eax
f01145bf:	75 25                	jne    f01145e6 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01145c1:	83 ec 04             	sub    $0x4,%esp
f01145c4:	68 e8 a4 13 f0       	push   $0xf013a4e8
f01145c9:	68 4b 05 00 00       	push   $0x54b
f01145ce:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01145d3:	e8 3b be fe ff       	call   f0100413 <_warn>
f01145d8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01145df:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01145e6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145ea:	74 04                	je     f01145f0 <test_allocate_chunk+0x6d1>
f01145ec:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145f0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01145f4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01145f8:	74 6f                	je     f0114669 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01145fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01145fd:	01 c0                	add    %eax,%eax
f01145ff:	05 00 00 00 80       	add    $0x80000000,%eax
f0114604:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114607:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011460a:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f011460d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114610:	89 d0                	mov    %edx,%eax
f0114612:	c1 e0 02             	shl    $0x2,%eax
f0114615:	01 d0                	add    %edx,%eax
f0114617:	01 c0                	add    %eax,%eax
f0114619:	01 d0                	add    %edx,%eax
f011461b:	01 c0                	add    %eax,%eax
f011461d:	05 00 00 00 80       	add    $0x80000000,%eax
f0114622:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114625:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114628:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011462b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011462e:	8a 00                	mov    (%eax),%al
f0114630:	3c 4b                	cmp    $0x4b,%al
f0114632:	75 09                	jne    f011463d <test_allocate_chunk+0x71e>
f0114634:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114637:	8a 00                	mov    (%eax),%al
f0114639:	3c 4d                	cmp    $0x4d,%al
f011463b:	74 1e                	je     f011465b <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011463d:	83 ec 04             	sub    $0x4,%esp
f0114640:	68 34 a5 13 f0       	push   $0xf013a534
f0114645:	68 59 05 00 00       	push   $0x559
f011464a:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011464f:	e8 bf bd fe ff       	call   f0100413 <_warn>
f0114654:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114657:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011465b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011465f:	74 04                	je     f0114665 <test_allocate_chunk+0x746>
f0114661:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114665:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114669:	83 ec 0c             	sub    $0xc,%esp
f011466c:	68 d8 a3 13 f0       	push   $0xf013a3d8
f0114671:	e8 98 c6 fe ff       	call   f0100d0e <cprintf>
f0114676:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114679:	83 ec 0c             	sub    $0xc,%esp
f011467c:	68 88 a6 13 f0       	push   $0xf013a688
f0114681:	e8 88 c6 fe ff       	call   f0100d0e <cprintf>
f0114686:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114689:	e8 0f 85 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011468e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114691:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114694:	89 d0                	mov    %edx,%eax
f0114696:	01 c0                	add    %eax,%eax
f0114698:	01 d0                	add    %edx,%eax
f011469a:	01 c0                	add    %eax,%eax
f011469c:	01 d0                	add    %edx,%eax
f011469e:	68 04 0e 00 00       	push   $0xe04
f01146a3:	50                   	push   %eax
f01146a4:	68 00 fc 3f 40       	push   $0x403ffc00
f01146a9:	ff 75 d0             	pushl  -0x30(%ebp)
f01146ac:	e8 74 44 ff ff       	call   f0108b25 <allocate_chunk>
f01146b1:	83 c4 10             	add    $0x10,%esp
f01146b4:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01146b7:	e8 e1 84 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01146bc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01146bf:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01146c3:	75 0b                	jne    f01146d0 <test_allocate_chunk+0x7b1>
f01146c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146c8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146cb:	83 f8 05             	cmp    $0x5,%eax
f01146ce:	74 2a                	je     f01146fa <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01146d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146d3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146d6:	83 ec 08             	sub    $0x8,%esp
f01146d9:	6a 05                	push   $0x5
f01146db:	50                   	push   %eax
f01146dc:	ff 75 98             	pushl  -0x68(%ebp)
f01146df:	68 ac a5 13 f0       	push   $0xf013a5ac
f01146e4:	68 70 05 00 00       	push   $0x570
f01146e9:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01146ee:	e8 20 bd fe ff       	call   f0100413 <_warn>
f01146f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01146fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146fe:	74 04                	je     f0114704 <test_allocate_chunk+0x7e5>
f0114700:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114704:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114708:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011470f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114712:	89 d0                	mov    %edx,%eax
f0114714:	01 c0                	add    %eax,%eax
f0114716:	01 d0                	add    %edx,%eax
f0114718:	c1 e0 02             	shl    $0x2,%eax
f011471b:	83 ec 08             	sub    $0x8,%esp
f011471e:	6a 03                	push   $0x3
f0114720:	6a 00                	push   $0x0
f0114722:	6a 00                	push   $0x0
f0114724:	68 07 0e 00 00       	push   $0xe07
f0114729:	68 05 0e 00 00       	push   $0xe05
f011472e:	6a 01                	push   $0x1
f0114730:	50                   	push   %eax
f0114731:	68 00 f0 3f 40       	push   $0x403ff000
f0114736:	6a 00                	push   $0x0
f0114738:	ff 75 d0             	pushl  -0x30(%ebp)
f011473b:	e8 b5 18 00 00       	call   f0115ff5 <CCP>
f0114740:	83 c4 30             	add    $0x30,%esp
f0114743:	85 c0                	test   %eax,%eax
f0114745:	75 25                	jne    f011476c <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114747:	83 ec 04             	sub    $0x4,%esp
f011474a:	68 e8 a4 13 f0       	push   $0xf013a4e8
f011474f:	68 79 05 00 00       	push   $0x579
f0114754:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114759:	e8 b5 bc fe ff       	call   f0100413 <_warn>
f011475e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114761:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114765:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011476c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114770:	74 04                	je     f0114776 <test_allocate_chunk+0x857>
f0114772:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114776:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011477a:	83 ec 0c             	sub    $0xc,%esp
f011477d:	68 bf a6 13 f0       	push   $0xf013a6bf
f0114782:	e8 87 c5 fe ff       	call   f0100d0e <cprintf>
f0114787:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011478a:	83 ec 08             	sub    $0x8,%esp
f011478d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114790:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0114795:	e8 74 c5 fe ff       	call   f0100d0e <cprintf>
f011479a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011479d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01147a1:	75 10                	jne    f01147b3 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01147a3:	83 ec 0c             	sub    $0xc,%esp
f01147a6:	68 04 a7 13 f0       	push   $0xf013a704
f01147ab:	e8 5e c5 fe ff       	call   f0100d0e <cprintf>
f01147b0:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01147b3:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01147b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01147bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01147be:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01147c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01147c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01147c9:	5b                   	pop    %ebx
f01147ca:	5e                   	pop    %esi
f01147cb:	5f                   	pop    %edi
f01147cc:	5d                   	pop    %ebp
f01147cd:	c3                   	ret    

f01147ce <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01147ce:	55                   	push   %ebp
f01147cf:	89 e5                	mov    %esp,%ebp
f01147d1:	57                   	push   %edi
f01147d2:	56                   	push   %esi
f01147d3:	53                   	push   %ebx
f01147d4:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01147da:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01147dd:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f01147e2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01147e7:	89 c7                	mov    %eax,%edi
f01147e9:	89 de                	mov    %ebx,%esi
f01147eb:	89 d1                	mov    %edx,%ecx
f01147ed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01147ef:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01147f2:	b9 23 00 00 00       	mov    $0x23,%ecx
f01147f7:	b0 00                	mov    $0x0,%al
f01147f9:	89 d7                	mov    %edx,%edi
f01147fb:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01147fd:	6a 00                	push   $0x0
f01147ff:	6a 0a                	push   $0xa
f0114801:	6a 14                	push   $0x14
f0114803:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114806:	50                   	push   %eax
f0114807:	e8 57 46 ff ff       	call   f0108e63 <env_create>
f011480c:	83 c4 10             	add    $0x10,%esp
f011480f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114812:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114815:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114818:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011481b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011481e:	8b 40 60             	mov    0x60(%eax),%eax
f0114821:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114824:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114827:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011482a:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114831:	75 70 20 
f0114834:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011483b:	00 00 00 
f011483e:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114841:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114846:	b8 00 00 00 00       	mov    $0x0,%eax
f011484b:	89 d7                	mov    %edx,%edi
f011484d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011484f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114852:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114855:	83 ec 08             	sub    $0x8,%esp
f0114858:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011485e:	52                   	push   %edx
f011485f:	50                   	push   %eax
f0114860:	e8 5b cd 01 00       	call   f01315c0 <ltostr>
f0114865:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114868:	83 ec 04             	sub    $0x4,%esp
f011486b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114871:	50                   	push   %eax
f0114872:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114878:	50                   	push   %eax
f0114879:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011487f:	50                   	push   %eax
f0114880:	e8 33 ce 01 00       	call   f01316b8 <strcconcat>
f0114885:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114888:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011488f:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114896:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011489d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01148a4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01148a8:	83 ec 0c             	sub    $0xc,%esp
f01148ab:	ff 75 d8             	pushl  -0x28(%ebp)
f01148ae:	e8 0e 17 00 00       	call   f0115fc1 <ClearUserSpace>
f01148b3:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01148b6:	83 ec 0c             	sub    $0xc,%esp
f01148b9:	68 44 a7 13 f0       	push   $0xf013a744
f01148be:	e8 4b c4 fe ff       	call   f0100d0e <cprintf>
f01148c3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01148c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148c9:	c1 e0 03             	shl    $0x3,%eax
f01148cc:	83 ec 04             	sub    $0x4,%esp
f01148cf:	50                   	push   %eax
f01148d0:	6a 00                	push   $0x0
f01148d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01148d5:	e8 66 44 ff ff       	call   f0108d40 <calculate_required_frames>
f01148da:	83 c4 10             	add    $0x10,%esp
f01148dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01148e0:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01148e4:	74 23                	je     f0114909 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01148e6:	83 ec 0c             	sub    $0xc,%esp
f01148e9:	6a 03                	push   $0x3
f01148eb:	ff 75 c8             	pushl  -0x38(%ebp)
f01148ee:	68 78 a7 13 f0       	push   $0xf013a778
f01148f3:	68 b2 05 00 00       	push   $0x5b2
f01148f8:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01148fd:	e8 11 bb fe ff       	call   f0100413 <_warn>
f0114902:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114905:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114909:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011490d:	74 04                	je     f0114913 <test_calculate_required_frames+0x145>
f011490f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114913:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114917:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011491a:	c1 e0 02             	shl    $0x2,%eax
f011491d:	83 ec 04             	sub    $0x4,%esp
f0114920:	50                   	push   %eax
f0114921:	6a 00                	push   $0x0
f0114923:	ff 75 d8             	pushl  -0x28(%ebp)
f0114926:	e8 15 44 ff ff       	call   f0108d40 <calculate_required_frames>
f011492b:	83 c4 10             	add    $0x10,%esp
f011492e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114931:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114938:	74 26                	je     f0114960 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f011493a:	83 ec 0c             	sub    $0xc,%esp
f011493d:	68 01 04 00 00       	push   $0x401
f0114942:	ff 75 c8             	pushl  -0x38(%ebp)
f0114945:	68 78 a7 13 f0       	push   $0xf013a778
f011494a:	68 bc 05 00 00       	push   $0x5bc
f011494f:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114954:	e8 ba ba fe ff       	call   f0100413 <_warn>
f0114959:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011495c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114960:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114964:	74 04                	je     f011496a <test_calculate_required_frames+0x19c>
f0114966:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011496a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011496e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114971:	c1 e0 0a             	shl    $0xa,%eax
f0114974:	83 ec 04             	sub    $0x4,%esp
f0114977:	50                   	push   %eax
f0114978:	6a 00                	push   $0x0
f011497a:	ff 75 d8             	pushl  -0x28(%ebp)
f011497d:	e8 be 43 ff ff       	call   f0108d40 <calculate_required_frames>
f0114982:	83 c4 10             	add    $0x10,%esp
f0114985:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114988:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011498b:	c1 e0 0a             	shl    $0xa,%eax
f011498e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114991:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114998:	99                   	cltd   
f0114999:	f7 fb                	idiv   %ebx
f011499b:	89 c1                	mov    %eax,%ecx
f011499d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149a0:	c1 e0 0a             	shl    $0xa,%eax
f01149a3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01149a6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149ad:	99                   	cltd   
f01149ae:	f7 fe                	idiv   %esi
f01149b0:	01 c8                	add    %ecx,%eax
f01149b2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01149b5:	74 4c                	je     f0114a03 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01149b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149ba:	c1 e0 0a             	shl    $0xa,%eax
f01149bd:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149c0:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01149c7:	99                   	cltd   
f01149c8:	f7 fb                	idiv   %ebx
f01149ca:	89 c1                	mov    %eax,%ecx
f01149cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149cf:	c1 e0 0a             	shl    $0xa,%eax
f01149d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01149d5:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149dc:	99                   	cltd   
f01149dd:	f7 fe                	idiv   %esi
f01149df:	01 c8                	add    %ecx,%eax
f01149e1:	83 ec 0c             	sub    $0xc,%esp
f01149e4:	50                   	push   %eax
f01149e5:	ff 75 c8             	pushl  -0x38(%ebp)
f01149e8:	68 78 a7 13 f0       	push   $0xf013a778
f01149ed:	68 c6 05 00 00       	push   $0x5c6
f01149f2:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01149f7:	e8 17 ba fe ff       	call   f0100413 <_warn>
f01149fc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a03:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a07:	74 04                	je     f0114a0d <test_calculate_required_frames+0x23f>
f0114a09:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a0d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114a11:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114a14:	89 d0                	mov    %edx,%eax
f0114a16:	01 c0                	add    %eax,%eax
f0114a18:	01 d0                	add    %edx,%eax
f0114a1a:	01 c0                	add    %eax,%eax
f0114a1c:	83 ec 04             	sub    $0x4,%esp
f0114a1f:	50                   	push   %eax
f0114a20:	68 00 10 00 00       	push   $0x1000
f0114a25:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a28:	e8 13 43 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a2d:	83 c4 10             	add    $0x10,%esp
f0114a30:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114a33:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114a37:	74 23                	je     f0114a5c <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114a39:	83 ec 0c             	sub    $0xc,%esp
f0114a3c:	6a 03                	push   $0x3
f0114a3e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a41:	68 78 a7 13 f0       	push   $0xf013a778
f0114a46:	68 d2 05 00 00       	push   $0x5d2
f0114a4b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114a50:	e8 be b9 fe ff       	call   f0100413 <_warn>
f0114a55:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a58:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a5c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a60:	74 04                	je     f0114a66 <test_calculate_required_frames+0x298>
f0114a62:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a66:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114a6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a6d:	89 c2                	mov    %eax,%edx
f0114a6f:	01 d2                	add    %edx,%edx
f0114a71:	01 d0                	add    %edx,%eax
f0114a73:	83 ec 04             	sub    $0x4,%esp
f0114a76:	50                   	push   %eax
f0114a77:	68 00 18 00 00       	push   $0x1800
f0114a7c:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a7f:	e8 bc 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a84:	83 c4 10             	add    $0x10,%esp
f0114a87:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114a8a:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114a8e:	74 23                	je     f0114ab3 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114a90:	83 ec 0c             	sub    $0xc,%esp
f0114a93:	6a 03                	push   $0x3
f0114a95:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a98:	68 78 a7 13 f0       	push   $0xf013a778
f0114a9d:	68 dc 05 00 00       	push   $0x5dc
f0114aa2:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114aa7:	e8 67 b9 fe ff       	call   f0100413 <_warn>
f0114aac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114aaf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ab3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ab7:	74 04                	je     f0114abd <test_calculate_required_frames+0x2ef>
f0114ab9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114abd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114ac1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114ac4:	89 d0                	mov    %edx,%eax
f0114ac6:	c1 e0 02             	shl    $0x2,%eax
f0114ac9:	01 d0                	add    %edx,%eax
f0114acb:	01 c0                	add    %eax,%eax
f0114acd:	83 ec 04             	sub    $0x4,%esp
f0114ad0:	50                   	push   %eax
f0114ad1:	68 00 00 40 00       	push   $0x400000
f0114ad6:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ad9:	e8 62 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114ade:	83 c4 10             	add    $0x10,%esp
f0114ae1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114ae4:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114aeb:	74 26                	je     f0114b13 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114aed:	83 ec 0c             	sub    $0xc,%esp
f0114af0:	68 03 0a 00 00       	push   $0xa03
f0114af5:	ff 75 c8             	pushl  -0x38(%ebp)
f0114af8:	68 78 a7 13 f0       	push   $0xf013a778
f0114afd:	68 e6 05 00 00       	push   $0x5e6
f0114b02:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114b07:	e8 07 b9 fe ff       	call   f0100413 <_warn>
f0114b0c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b0f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b13:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b17:	74 04                	je     f0114b1d <test_calculate_required_frames+0x34f>
f0114b19:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b1d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114b21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b24:	01 c0                	add    %eax,%eax
f0114b26:	83 ec 04             	sub    $0x4,%esp
f0114b29:	50                   	push   %eax
f0114b2a:	68 00 00 70 00       	push   $0x700000
f0114b2f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b32:	e8 09 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114b37:	83 c4 10             	add    $0x10,%esp
f0114b3a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114b3d:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114b44:	74 26                	je     f0114b6c <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114b46:	83 ec 0c             	sub    $0xc,%esp
f0114b49:	68 02 02 00 00       	push   $0x202
f0114b4e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b51:	68 78 a7 13 f0       	push   $0xf013a778
f0114b56:	68 f2 05 00 00       	push   $0x5f2
f0114b5b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114b60:	e8 ae b8 fe ff       	call   f0100413 <_warn>
f0114b65:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b68:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b6c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b70:	74 04                	je     f0114b76 <test_calculate_required_frames+0x3a8>
f0114b72:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b76:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114b7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b7d:	83 ec 04             	sub    $0x4,%esp
f0114b80:	50                   	push   %eax
f0114b81:	68 ff ff 3f 00       	push   $0x3fffff
f0114b86:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b89:	e8 b2 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114b8e:	83 c4 10             	add    $0x10,%esp
f0114b91:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114b94:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114b98:	74 23                	je     f0114bbd <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114b9a:	83 ec 0c             	sub    $0xc,%esp
f0114b9d:	6a 04                	push   $0x4
f0114b9f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ba2:	68 78 a7 13 f0       	push   $0xf013a778
f0114ba7:	68 fc 05 00 00       	push   $0x5fc
f0114bac:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114bb1:	e8 5d b8 fe ff       	call   f0100413 <_warn>
f0114bb6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bb9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114bbd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bc1:	74 04                	je     f0114bc7 <test_calculate_required_frames+0x3f9>
f0114bc3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bc7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114bcb:	83 ec 0c             	sub    $0xc,%esp
f0114bce:	68 c9 a2 13 f0       	push   $0xf013a2c9
f0114bd3:	e8 36 c1 fe ff       	call   f0100d0e <cprintf>
f0114bd8:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114bdb:	83 ec 0c             	sub    $0xc,%esp
f0114bde:	68 d0 a7 13 f0       	push   $0xf013a7d0
f0114be3:	e8 26 c1 fe ff       	call   f0100d0e <cprintf>
f0114be8:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114beb:	83 ec 04             	sub    $0x4,%esp
f0114bee:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114bf4:	50                   	push   %eax
f0114bf5:	68 82 96 13 f0       	push   $0xf0139682
f0114bfa:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114c00:	50                   	push   %eax
f0114c01:	e8 b2 ca 01 00       	call   f01316b8 <strcconcat>
f0114c06:	83 c4 10             	add    $0x10,%esp
f0114c09:	83 ec 0c             	sub    $0xc,%esp
f0114c0c:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114c12:	50                   	push   %eax
f0114c13:	e8 58 c1 fe ff       	call   f0100d70 <execute_command>
f0114c18:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c1e:	c1 e0 03             	shl    $0x3,%eax
f0114c21:	83 ec 04             	sub    $0x4,%esp
f0114c24:	50                   	push   %eax
f0114c25:	6a 00                	push   $0x0
f0114c27:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c2a:	e8 11 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c2f:	83 c4 10             	add    $0x10,%esp
f0114c32:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114c35:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114c3c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114c3f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c42:	74 24                	je     f0114c68 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114c44:	83 ec 0c             	sub    $0xc,%esp
f0114c47:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c4a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c4d:	68 78 a7 13 f0       	push   $0xf013a778
f0114c52:	68 10 06 00 00       	push   $0x610
f0114c57:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114c5c:	e8 b2 b7 fe ff       	call   f0100413 <_warn>
f0114c61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c6c:	74 04                	je     f0114c72 <test_calculate_required_frames+0x4a4>
f0114c6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114c76:	83 ec 04             	sub    $0x4,%esp
f0114c79:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114c7f:	50                   	push   %eax
f0114c80:	68 8f 96 13 f0       	push   $0xf013968f
f0114c85:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114c8b:	50                   	push   %eax
f0114c8c:	e8 27 ca 01 00       	call   f01316b8 <strcconcat>
f0114c91:	83 c4 10             	add    $0x10,%esp
f0114c94:	83 ec 0c             	sub    $0xc,%esp
f0114c97:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114c9d:	50                   	push   %eax
f0114c9e:	e8 cd c0 fe ff       	call   f0100d70 <execute_command>
f0114ca3:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114ca6:	83 ec 04             	sub    $0x4,%esp
f0114ca9:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114caf:	50                   	push   %eax
f0114cb0:	68 04 a8 13 f0       	push   $0xf013a804
f0114cb5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114cbb:	50                   	push   %eax
f0114cbc:	e8 f7 c9 01 00       	call   f01316b8 <strcconcat>
f0114cc1:	83 c4 10             	add    $0x10,%esp
f0114cc4:	83 ec 0c             	sub    $0xc,%esp
f0114cc7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114ccd:	50                   	push   %eax
f0114cce:	e8 9d c0 fe ff       	call   f0100d70 <execute_command>
f0114cd3:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114cd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114cd9:	c1 e0 03             	shl    $0x3,%eax
f0114cdc:	83 ec 04             	sub    $0x4,%esp
f0114cdf:	50                   	push   %eax
f0114ce0:	6a 00                	push   $0x0
f0114ce2:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ce5:	e8 56 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114cea:	83 c4 10             	add    $0x10,%esp
f0114ced:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114cf0:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114cf7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114cfa:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114cfd:	74 24                	je     f0114d23 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114cff:	83 ec 0c             	sub    $0xc,%esp
f0114d02:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d05:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d08:	68 78 a7 13 f0       	push   $0xf013a778
f0114d0d:	68 1e 06 00 00       	push   $0x61e
f0114d12:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114d17:	e8 f7 b6 fe ff       	call   f0100413 <_warn>
f0114d1c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d27:	74 04                	je     f0114d2d <test_calculate_required_frames+0x55f>
f0114d29:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114d31:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d34:	c1 e0 0a             	shl    $0xa,%eax
f0114d37:	83 ec 04             	sub    $0x4,%esp
f0114d3a:	50                   	push   %eax
f0114d3b:	6a 00                	push   $0x0
f0114d3d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d40:	e8 fb 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114d45:	83 c4 10             	add    $0x10,%esp
f0114d48:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114d4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d4e:	c1 e0 0a             	shl    $0xa,%eax
f0114d51:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114d54:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d5b:	99                   	cltd   
f0114d5c:	f7 fb                	idiv   %ebx
f0114d5e:	89 c1                	mov    %eax,%ecx
f0114d60:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d63:	c1 e0 0a             	shl    $0xa,%eax
f0114d66:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114d69:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d70:	99                   	cltd   
f0114d71:	f7 fe                	idiv   %esi
f0114d73:	01 c8                	add    %ecx,%eax
f0114d75:	83 e8 05             	sub    $0x5,%eax
f0114d78:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0114d7b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114d7e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d81:	74 24                	je     f0114da7 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114d83:	83 ec 0c             	sub    $0xc,%esp
f0114d86:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d89:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d8c:	68 78 a7 13 f0       	push   $0xf013a778
f0114d91:	68 29 06 00 00       	push   $0x629
f0114d96:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114d9b:	e8 73 b6 fe ff       	call   f0100413 <_warn>
f0114da0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114da3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114da7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dab:	74 04                	je     f0114db1 <test_calculate_required_frames+0x5e3>
f0114dad:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114db1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114db5:	83 ec 04             	sub    $0x4,%esp
f0114db8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114dbe:	50                   	push   %eax
f0114dbf:	68 10 a8 13 f0       	push   $0xf013a810
f0114dc4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114dca:	50                   	push   %eax
f0114dcb:	e8 e8 c8 01 00       	call   f01316b8 <strcconcat>
f0114dd0:	83 c4 10             	add    $0x10,%esp
f0114dd3:	83 ec 0c             	sub    $0xc,%esp
f0114dd6:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114ddc:	50                   	push   %eax
f0114ddd:	e8 8e bf fe ff       	call   f0100d70 <execute_command>
f0114de2:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114de5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114de8:	89 c2                	mov    %eax,%edx
f0114dea:	01 d2                	add    %edx,%edx
f0114dec:	01 d0                	add    %edx,%eax
f0114dee:	83 ec 04             	sub    $0x4,%esp
f0114df1:	50                   	push   %eax
f0114df2:	68 00 18 00 00       	push   $0x1800
f0114df7:	ff 75 d8             	pushl  -0x28(%ebp)
f0114dfa:	e8 41 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114dff:	83 c4 10             	add    $0x10,%esp
f0114e02:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114e05:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114e0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e0f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e12:	74 24                	je     f0114e38 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114e14:	83 ec 0c             	sub    $0xc,%esp
f0114e17:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114e1a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e1d:	68 78 a7 13 f0       	push   $0xf013a778
f0114e22:	68 38 06 00 00       	push   $0x638
f0114e27:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114e2c:	e8 e2 b5 fe ff       	call   f0100413 <_warn>
f0114e31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e3c:	74 04                	je     f0114e42 <test_calculate_required_frames+0x674>
f0114e3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114e46:	83 ec 04             	sub    $0x4,%esp
f0114e49:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114e4f:	50                   	push   %eax
f0114e50:	68 e8 98 13 f0       	push   $0xf01398e8
f0114e55:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e5b:	50                   	push   %eax
f0114e5c:	e8 57 c8 01 00       	call   f01316b8 <strcconcat>
f0114e61:	83 c4 10             	add    $0x10,%esp
f0114e64:	83 ec 0c             	sub    $0xc,%esp
f0114e67:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114e6d:	50                   	push   %eax
f0114e6e:	e8 fd be fe ff       	call   f0100d70 <execute_command>
f0114e73:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114e76:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e79:	89 d0                	mov    %edx,%eax
f0114e7b:	c1 e0 02             	shl    $0x2,%eax
f0114e7e:	01 d0                	add    %edx,%eax
f0114e80:	01 c0                	add    %eax,%eax
f0114e82:	83 ec 04             	sub    $0x4,%esp
f0114e85:	50                   	push   %eax
f0114e86:	68 00 00 40 00       	push   $0x400000
f0114e8b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e8e:	e8 ad 3e ff ff       	call   f0108d40 <calculate_required_frames>
f0114e93:	83 c4 10             	add    $0x10,%esp
f0114e96:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114e99:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114ea0:	74 26                	je     f0114ec8 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114ea2:	83 ec 0c             	sub    $0xc,%esp
f0114ea5:	68 03 0a 00 00       	push   $0xa03
f0114eaa:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ead:	68 78 a7 13 f0       	push   $0xf013a778
f0114eb2:	68 44 06 00 00       	push   $0x644
f0114eb7:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114ebc:	e8 52 b5 fe ff       	call   f0100413 <_warn>
f0114ec1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ec4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ec8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ecc:	74 04                	je     f0114ed2 <test_calculate_required_frames+0x704>
f0114ece:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ed2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114ed6:	83 ec 04             	sub    $0x4,%esp
f0114ed9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114edf:	50                   	push   %eax
f0114ee0:	68 f2 98 13 f0       	push   $0xf01398f2
f0114ee5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114eeb:	50                   	push   %eax
f0114eec:	e8 c7 c7 01 00       	call   f01316b8 <strcconcat>
f0114ef1:	83 c4 10             	add    $0x10,%esp
f0114ef4:	83 ec 0c             	sub    $0xc,%esp
f0114ef7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114efd:	50                   	push   %eax
f0114efe:	e8 6d be fe ff       	call   f0100d70 <execute_command>
f0114f03:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114f06:	83 ec 04             	sub    $0x4,%esp
f0114f09:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114f0f:	50                   	push   %eax
f0114f10:	68 18 a8 13 f0       	push   $0xf013a818
f0114f15:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114f1b:	50                   	push   %eax
f0114f1c:	e8 97 c7 01 00       	call   f01316b8 <strcconcat>
f0114f21:	83 c4 10             	add    $0x10,%esp
f0114f24:	83 ec 0c             	sub    $0xc,%esp
f0114f27:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114f2d:	50                   	push   %eax
f0114f2e:	e8 3d be fe ff       	call   f0100d70 <execute_command>
f0114f33:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114f36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f39:	01 c0                	add    %eax,%eax
f0114f3b:	83 ec 04             	sub    $0x4,%esp
f0114f3e:	50                   	push   %eax
f0114f3f:	68 00 00 70 00       	push   $0x700000
f0114f44:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f47:	e8 f4 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0114f4c:	83 c4 10             	add    $0x10,%esp
f0114f4f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114f52:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114f59:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114f5c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f5f:	74 24                	je     f0114f85 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114f61:	83 ec 0c             	sub    $0xc,%esp
f0114f64:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f67:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f6a:	68 78 a7 13 f0       	push   $0xf013a778
f0114f6f:	68 54 06 00 00       	push   $0x654
f0114f74:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114f79:	e8 95 b4 fe ff       	call   f0100413 <_warn>
f0114f7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114f85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f89:	74 04                	je     f0114f8f <test_calculate_required_frames+0x7c1>
f0114f8b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114f93:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f96:	83 ec 04             	sub    $0x4,%esp
f0114f99:	50                   	push   %eax
f0114f9a:	68 ff ff 3f 00       	push   $0x3fffff
f0114f9f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fa2:	e8 99 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0114fa7:	83 c4 10             	add    $0x10,%esp
f0114faa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114fad:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114fb4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114fb7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114fba:	74 24                	je     f0114fe0 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114fbc:	83 ec 0c             	sub    $0xc,%esp
f0114fbf:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114fc2:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fc5:	68 78 a7 13 f0       	push   $0xf013a778
f0114fca:	68 5f 06 00 00       	push   $0x65f
f0114fcf:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0114fd4:	e8 3a b4 fe ff       	call   f0100413 <_warn>
f0114fd9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fdc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114fe0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fe4:	74 04                	je     f0114fea <test_calculate_required_frames+0x81c>
f0114fe6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114fee:	83 ec 0c             	sub    $0xc,%esp
f0114ff1:	68 a3 98 13 f0       	push   $0xf01398a3
f0114ff6:	e8 13 bd fe ff       	call   f0100d0e <cprintf>
f0114ffb:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114ffe:	83 ec 08             	sub    $0x8,%esp
f0115001:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115004:	68 24 a8 13 f0       	push   $0xf013a824
f0115009:	e8 00 bd fe ff       	call   f0100d0e <cprintf>
f011500e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115011:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115015:	75 10                	jne    f0115027 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115017:	83 ec 0c             	sub    $0xc,%esp
f011501a:	68 64 a8 13 f0       	push   $0xf013a864
f011501f:	e8 ea bc fe ff       	call   f0100d0e <cprintf>
f0115024:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115027:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f011502c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011502f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115032:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115035:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011503a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011503d:	5b                   	pop    %ebx
f011503e:	5e                   	pop    %esi
f011503f:	5f                   	pop    %edi
f0115040:	5d                   	pop    %ebp
f0115041:	c3                   	ret    

f0115042 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115042:	55                   	push   %ebp
f0115043:	89 e5                	mov    %esp,%ebp
f0115045:	57                   	push   %edi
f0115046:	56                   	push   %esi
f0115047:	53                   	push   %ebx
f0115048:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011504e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115051:	bb 18 96 13 f0       	mov    $0xf0139618,%ebx
f0115056:	ba 0f 00 00 00       	mov    $0xf,%edx
f011505b:	89 c7                	mov    %eax,%edi
f011505d:	89 de                	mov    %ebx,%esi
f011505f:	89 d1                	mov    %edx,%ecx
f0115061:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115063:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115066:	b9 23 00 00 00       	mov    $0x23,%ecx
f011506b:	b0 00                	mov    $0x0,%al
f011506d:	89 d7                	mov    %edx,%edi
f011506f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115071:	6a 00                	push   $0x0
f0115073:	6a 0a                	push   $0xa
f0115075:	6a 14                	push   $0x14
f0115077:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011507a:	50                   	push   %eax
f011507b:	e8 e3 3d ff ff       	call   f0108e63 <env_create>
f0115080:	83 c4 10             	add    $0x10,%esp
f0115083:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115086:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115089:	8b 40 5c             	mov    0x5c(%eax),%eax
f011508c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011508f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115092:	8b 40 60             	mov    0x60(%eax),%eax
f0115095:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115098:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011509b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011509e:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01150a5:	75 70 20 
f01150a8:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01150af:	00 00 00 
f01150b2:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01150b5:	b9 03 00 00 00       	mov    $0x3,%ecx
f01150ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01150bf:	89 d7                	mov    %edx,%edi
f01150c1:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01150c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01150c9:	83 ec 08             	sub    $0x8,%esp
f01150cc:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01150d2:	52                   	push   %edx
f01150d3:	50                   	push   %eax
f01150d4:	e8 e7 c4 01 00       	call   f01315c0 <ltostr>
f01150d9:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01150dc:	83 ec 04             	sub    $0x4,%esp
f01150df:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01150e5:	50                   	push   %eax
f01150e6:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01150ec:	50                   	push   %eax
f01150ed:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01150f3:	50                   	push   %eax
f01150f4:	e8 bf c5 01 00       	call   f01316b8 <strcconcat>
f01150f9:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01150fc:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115103:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011510a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115111:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115115:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011511c:	00 00 00 
	uint32 num_tables = 0;
f011511f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115126:	00 00 00 
	ClearUserSpace(proc_directory);
f0115129:	83 ec 0c             	sub    $0xc,%esp
f011512c:	ff 75 d8             	pushl  -0x28(%ebp)
f011512f:	e8 8d 0e 00 00       	call   f0115fc1 <ClearUserSpace>
f0115134:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115137:	83 ec 0c             	sub    $0xc,%esp
f011513a:	68 44 a7 13 f0       	push   $0xf013a744
f011513f:	e8 ca bb fe ff       	call   f0100d0e <cprintf>
f0115144:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115147:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011514a:	c1 e0 03             	shl    $0x3,%eax
f011514d:	89 c2                	mov    %eax,%edx
f011514f:	83 ec 0c             	sub    $0xc,%esp
f0115152:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115158:	50                   	push   %eax
f0115159:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011515f:	50                   	push   %eax
f0115160:	52                   	push   %edx
f0115161:	6a 00                	push   $0x0
f0115163:	ff 75 d8             	pushl  -0x28(%ebp)
f0115166:	e8 e0 3a ff ff       	call   f0108c4b <calculate_allocated_space>
f011516b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011516e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115174:	85 c0                	test   %eax,%eax
f0115176:	74 27                	je     f011519f <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115178:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011517e:	83 ec 0c             	sub    $0xc,%esp
f0115181:	6a 00                	push   $0x0
f0115183:	50                   	push   %eax
f0115184:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115189:	68 94 06 00 00       	push   $0x694
f011518e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115193:	e8 7b b2 fe ff       	call   f0100413 <_warn>
f0115198:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011519b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011519f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01151a5:	85 c0                	test   %eax,%eax
f01151a7:	74 27                	je     f01151d0 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01151a9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01151af:	83 ec 0c             	sub    $0xc,%esp
f01151b2:	6a 00                	push   $0x0
f01151b4:	50                   	push   %eax
f01151b5:	68 10 a9 13 f0       	push   $0xf013a910
f01151ba:	68 99 06 00 00       	push   $0x699
f01151bf:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01151c4:	e8 4a b2 fe ff       	call   f0100413 <_warn>
f01151c9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151cc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151d0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151d4:	74 04                	je     f01151da <test_calculate_allocated_space+0x198>
f01151d6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151da:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01151de:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151e5:	00 00 00 
		num_pages = 0;
f01151e8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151ef:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01151f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151f5:	c1 e0 02             	shl    $0x2,%eax
f01151f8:	89 c2                	mov    %eax,%edx
f01151fa:	83 ec 0c             	sub    $0xc,%esp
f01151fd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115203:	50                   	push   %eax
f0115204:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011520a:	50                   	push   %eax
f011520b:	52                   	push   %edx
f011520c:	6a 00                	push   $0x0
f011520e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115211:	e8 35 3a ff ff       	call   f0108c4b <calculate_allocated_space>
f0115216:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115219:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011521f:	85 c0                	test   %eax,%eax
f0115221:	74 27                	je     f011524a <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115223:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115229:	83 ec 0c             	sub    $0xc,%esp
f011522c:	6a 00                	push   $0x0
f011522e:	50                   	push   %eax
f011522f:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115234:	68 a5 06 00 00       	push   $0x6a5
f0115239:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011523e:	e8 d0 b1 fe ff       	call   f0100413 <_warn>
f0115243:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115246:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011524a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115250:	85 c0                	test   %eax,%eax
f0115252:	74 27                	je     f011527b <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115254:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011525a:	83 ec 0c             	sub    $0xc,%esp
f011525d:	6a 00                	push   $0x0
f011525f:	50                   	push   %eax
f0115260:	68 10 a9 13 f0       	push   $0xf013a910
f0115265:	68 aa 06 00 00       	push   $0x6aa
f011526a:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011526f:	e8 9f b1 fe ff       	call   f0100413 <_warn>
f0115274:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115277:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011527b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011527f:	74 04                	je     f0115285 <test_calculate_allocated_space+0x243>
f0115281:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115285:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115289:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115290:	00 00 00 
		num_pages = 0;
f0115293:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011529a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011529d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152a0:	c1 e0 0a             	shl    $0xa,%eax
f01152a3:	89 c2                	mov    %eax,%edx
f01152a5:	83 ec 0c             	sub    $0xc,%esp
f01152a8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01152ae:	50                   	push   %eax
f01152af:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01152b5:	50                   	push   %eax
f01152b6:	52                   	push   %edx
f01152b7:	6a 00                	push   $0x0
f01152b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01152bc:	e8 8a 39 ff ff       	call   f0108c4b <calculate_allocated_space>
f01152c1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01152c4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152ca:	85 c0                	test   %eax,%eax
f01152cc:	74 27                	je     f01152f5 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01152ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152d4:	83 ec 0c             	sub    $0xc,%esp
f01152d7:	6a 00                	push   $0x0
f01152d9:	50                   	push   %eax
f01152da:	68 b0 a8 13 f0       	push   $0xf013a8b0
f01152df:	68 b6 06 00 00       	push   $0x6b6
f01152e4:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01152e9:	e8 25 b1 fe ff       	call   f0100413 <_warn>
f01152ee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01152f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152fb:	85 c0                	test   %eax,%eax
f01152fd:	74 27                	je     f0115326 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01152ff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115305:	83 ec 0c             	sub    $0xc,%esp
f0115308:	6a 00                	push   $0x0
f011530a:	50                   	push   %eax
f011530b:	68 10 a9 13 f0       	push   $0xf013a910
f0115310:	68 bb 06 00 00       	push   $0x6bb
f0115315:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011531a:	e8 f4 b0 fe ff       	call   f0100413 <_warn>
f011531f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115322:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115326:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011532a:	74 04                	je     f0115330 <test_calculate_allocated_space+0x2ee>
f011532c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115330:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115334:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011533b:	00 00 00 
		num_pages = 0;
f011533e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115345:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115348:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011534b:	89 d0                	mov    %edx,%eax
f011534d:	01 c0                	add    %eax,%eax
f011534f:	01 d0                	add    %edx,%eax
f0115351:	01 c0                	add    %eax,%eax
f0115353:	05 00 10 00 00       	add    $0x1000,%eax
f0115358:	89 c2                	mov    %eax,%edx
f011535a:	83 ec 0c             	sub    $0xc,%esp
f011535d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115363:	50                   	push   %eax
f0115364:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011536a:	50                   	push   %eax
f011536b:	52                   	push   %edx
f011536c:	68 00 10 00 00       	push   $0x1000
f0115371:	ff 75 d8             	pushl  -0x28(%ebp)
f0115374:	e8 d2 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115379:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011537c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115382:	85 c0                	test   %eax,%eax
f0115384:	74 27                	je     f01153ad <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115386:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011538c:	83 ec 0c             	sub    $0xc,%esp
f011538f:	6a 00                	push   $0x0
f0115391:	50                   	push   %eax
f0115392:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115397:	68 c8 06 00 00       	push   $0x6c8
f011539c:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01153a1:	e8 6d b0 fe ff       	call   f0100413 <_warn>
f01153a6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153a9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01153ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153b3:	85 c0                	test   %eax,%eax
f01153b5:	74 27                	je     f01153de <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01153b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153bd:	83 ec 0c             	sub    $0xc,%esp
f01153c0:	6a 00                	push   $0x0
f01153c2:	50                   	push   %eax
f01153c3:	68 10 a9 13 f0       	push   $0xf013a910
f01153c8:	68 cd 06 00 00       	push   $0x6cd
f01153cd:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01153d2:	e8 3c b0 fe ff       	call   f0100413 <_warn>
f01153d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153e2:	74 04                	je     f01153e8 <test_calculate_allocated_space+0x3a6>
f01153e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01153ec:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01153f3:	00 00 00 
		num_pages = 0;
f01153f6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01153fd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115400:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115403:	89 c2                	mov    %eax,%edx
f0115405:	01 d2                	add    %edx,%edx
f0115407:	01 d0                	add    %edx,%eax
f0115409:	05 00 18 00 00       	add    $0x1800,%eax
f011540e:	89 c2                	mov    %eax,%edx
f0115410:	83 ec 0c             	sub    $0xc,%esp
f0115413:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115419:	50                   	push   %eax
f011541a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115420:	50                   	push   %eax
f0115421:	52                   	push   %edx
f0115422:	68 00 18 00 00       	push   $0x1800
f0115427:	ff 75 d8             	pushl  -0x28(%ebp)
f011542a:	e8 1c 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f011542f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115432:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115438:	85 c0                	test   %eax,%eax
f011543a:	74 27                	je     f0115463 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011543c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115442:	83 ec 0c             	sub    $0xc,%esp
f0115445:	6a 00                	push   $0x0
f0115447:	50                   	push   %eax
f0115448:	68 b0 a8 13 f0       	push   $0xf013a8b0
f011544d:	68 d9 06 00 00       	push   $0x6d9
f0115452:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115457:	e8 b7 af fe ff       	call   f0100413 <_warn>
f011545c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011545f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115463:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115469:	85 c0                	test   %eax,%eax
f011546b:	74 27                	je     f0115494 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011546d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115473:	83 ec 0c             	sub    $0xc,%esp
f0115476:	6a 00                	push   $0x0
f0115478:	50                   	push   %eax
f0115479:	68 10 a9 13 f0       	push   $0xf013a910
f011547e:	68 de 06 00 00       	push   $0x6de
f0115483:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115488:	e8 86 af fe ff       	call   f0100413 <_warn>
f011548d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115490:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115494:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115498:	74 04                	je     f011549e <test_calculate_allocated_space+0x45c>
f011549a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011549e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f01154a2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154a9:	00 00 00 
		num_pages = 0;
f01154ac:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154b3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01154b6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154b9:	89 d0                	mov    %edx,%eax
f01154bb:	c1 e0 02             	shl    $0x2,%eax
f01154be:	01 d0                	add    %edx,%eax
f01154c0:	01 c0                	add    %eax,%eax
f01154c2:	05 00 00 40 00       	add    $0x400000,%eax
f01154c7:	89 c2                	mov    %eax,%edx
f01154c9:	83 ec 0c             	sub    $0xc,%esp
f01154cc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154d2:	50                   	push   %eax
f01154d3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154d9:	50                   	push   %eax
f01154da:	52                   	push   %edx
f01154db:	68 00 00 40 00       	push   $0x400000
f01154e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01154e3:	e8 63 37 ff ff       	call   f0108c4b <calculate_allocated_space>
f01154e8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01154eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154f1:	85 c0                	test   %eax,%eax
f01154f3:	74 27                	je     f011551c <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01154f5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154fb:	83 ec 0c             	sub    $0xc,%esp
f01154fe:	6a 00                	push   $0x0
f0115500:	50                   	push   %eax
f0115501:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115506:	68 ea 06 00 00       	push   $0x6ea
f011550b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115510:	e8 fe ae fe ff       	call   f0100413 <_warn>
f0115515:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115518:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011551c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115522:	85 c0                	test   %eax,%eax
f0115524:	74 27                	je     f011554d <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115526:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011552c:	83 ec 0c             	sub    $0xc,%esp
f011552f:	6a 00                	push   $0x0
f0115531:	50                   	push   %eax
f0115532:	68 10 a9 13 f0       	push   $0xf013a910
f0115537:	68 ef 06 00 00       	push   $0x6ef
f011553c:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115541:	e8 cd ae fe ff       	call   f0100413 <_warn>
f0115546:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115549:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011554d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115551:	74 04                	je     f0115557 <test_calculate_allocated_space+0x515>
f0115553:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115557:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011555b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115562:	00 00 00 
		num_pages = 0;
f0115565:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011556c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011556f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115572:	05 00 00 38 00       	add    $0x380000,%eax
f0115577:	01 c0                	add    %eax,%eax
f0115579:	89 c2                	mov    %eax,%edx
f011557b:	83 ec 0c             	sub    $0xc,%esp
f011557e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115584:	50                   	push   %eax
f0115585:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011558b:	50                   	push   %eax
f011558c:	52                   	push   %edx
f011558d:	68 00 00 70 00       	push   $0x700000
f0115592:	ff 75 d8             	pushl  -0x28(%ebp)
f0115595:	e8 b1 36 ff ff       	call   f0108c4b <calculate_allocated_space>
f011559a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011559d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155a3:	85 c0                	test   %eax,%eax
f01155a5:	74 27                	je     f01155ce <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01155a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155ad:	83 ec 0c             	sub    $0xc,%esp
f01155b0:	6a 00                	push   $0x0
f01155b2:	50                   	push   %eax
f01155b3:	68 b0 a8 13 f0       	push   $0xf013a8b0
f01155b8:	68 fc 06 00 00       	push   $0x6fc
f01155bd:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01155c2:	e8 4c ae fe ff       	call   f0100413 <_warn>
f01155c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01155ce:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155d4:	85 c0                	test   %eax,%eax
f01155d6:	74 27                	je     f01155ff <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01155d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155de:	83 ec 0c             	sub    $0xc,%esp
f01155e1:	6a 00                	push   $0x0
f01155e3:	50                   	push   %eax
f01155e4:	68 10 a9 13 f0       	push   $0xf013a910
f01155e9:	68 01 07 00 00       	push   $0x701
f01155ee:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01155f3:	e8 1b ae fe ff       	call   f0100413 <_warn>
f01155f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01155ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115603:	74 04                	je     f0115609 <test_calculate_allocated_space+0x5c7>
f0115605:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115609:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011560d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115614:	00 00 00 
		num_pages = 0;
f0115617:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011561e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115621:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115624:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115629:	89 c2                	mov    %eax,%edx
f011562b:	83 ec 0c             	sub    $0xc,%esp
f011562e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115634:	50                   	push   %eax
f0115635:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011563b:	50                   	push   %eax
f011563c:	52                   	push   %edx
f011563d:	68 ff ff 3f 00       	push   $0x3fffff
f0115642:	ff 75 d8             	pushl  -0x28(%ebp)
f0115645:	e8 01 36 ff ff       	call   f0108c4b <calculate_allocated_space>
f011564a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011564d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115653:	85 c0                	test   %eax,%eax
f0115655:	74 27                	je     f011567e <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115657:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011565d:	83 ec 0c             	sub    $0xc,%esp
f0115660:	6a 00                	push   $0x0
f0115662:	50                   	push   %eax
f0115663:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115668:	68 0d 07 00 00       	push   $0x70d
f011566d:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115672:	e8 9c ad fe ff       	call   f0100413 <_warn>
f0115677:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011567a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011567e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115684:	85 c0                	test   %eax,%eax
f0115686:	74 27                	je     f01156af <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115688:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011568e:	83 ec 0c             	sub    $0xc,%esp
f0115691:	6a 00                	push   $0x0
f0115693:	50                   	push   %eax
f0115694:	68 10 a9 13 f0       	push   $0xf013a910
f0115699:	68 12 07 00 00       	push   $0x712
f011569e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01156a3:	e8 6b ad fe ff       	call   f0100413 <_warn>
f01156a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01156af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156b3:	74 04                	je     f01156b9 <test_calculate_allocated_space+0x677>
f01156b5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01156b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01156bd:	83 ec 0c             	sub    $0xc,%esp
f01156c0:	68 c9 a2 13 f0       	push   $0xf013a2c9
f01156c5:	e8 44 b6 fe ff       	call   f0100d0e <cprintf>
f01156ca:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01156cd:	83 ec 0c             	sub    $0xc,%esp
f01156d0:	68 d0 a7 13 f0       	push   $0xf013a7d0
f01156d5:	e8 34 b6 fe ff       	call   f0100d0e <cprintf>
f01156da:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01156dd:	83 ec 04             	sub    $0x4,%esp
f01156e0:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01156e6:	50                   	push   %eax
f01156e7:	68 82 96 13 f0       	push   $0xf0139682
f01156ec:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156f2:	50                   	push   %eax
f01156f3:	e8 c0 bf 01 00       	call   f01316b8 <strcconcat>
f01156f8:	83 c4 10             	add    $0x10,%esp
f01156fb:	83 ec 0c             	sub    $0xc,%esp
f01156fe:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115704:	50                   	push   %eax
f0115705:	e8 66 b6 fe ff       	call   f0100d70 <execute_command>
f011570a:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011570d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115714:	00 00 00 
		num_pages = 0;
f0115717:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011571e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115721:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115724:	c1 e0 03             	shl    $0x3,%eax
f0115727:	89 c2                	mov    %eax,%edx
f0115729:	83 ec 0c             	sub    $0xc,%esp
f011572c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115732:	50                   	push   %eax
f0115733:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115739:	50                   	push   %eax
f011573a:	52                   	push   %edx
f011573b:	6a 00                	push   $0x0
f011573d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115740:	e8 06 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115745:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115748:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011574f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115756:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011575c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011575f:	74 28                	je     f0115789 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115761:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115767:	83 ec 0c             	sub    $0xc,%esp
f011576a:	ff 75 c8             	pushl  -0x38(%ebp)
f011576d:	50                   	push   %eax
f011576e:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115773:	68 29 07 00 00       	push   $0x729
f0115778:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011577d:	e8 91 ac fe ff       	call   f0100413 <_warn>
f0115782:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115785:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115789:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011578f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115792:	74 28                	je     f01157bc <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115794:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011579a:	83 ec 0c             	sub    $0xc,%esp
f011579d:	ff 75 c4             	pushl  -0x3c(%ebp)
f01157a0:	50                   	push   %eax
f01157a1:	68 10 a9 13 f0       	push   $0xf013a910
f01157a6:	68 2e 07 00 00       	push   $0x72e
f01157ab:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01157b0:	e8 5e ac fe ff       	call   f0100413 <_warn>
f01157b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157b8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157bc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157c0:	74 04                	je     f01157c6 <test_calculate_allocated_space+0x784>
f01157c2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157c6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01157ca:	83 ec 04             	sub    $0x4,%esp
f01157cd:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01157d3:	50                   	push   %eax
f01157d4:	68 8f 96 13 f0       	push   $0xf013968f
f01157d9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157df:	50                   	push   %eax
f01157e0:	e8 d3 be 01 00       	call   f01316b8 <strcconcat>
f01157e5:	83 c4 10             	add    $0x10,%esp
f01157e8:	83 ec 0c             	sub    $0xc,%esp
f01157eb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01157f1:	50                   	push   %eax
f01157f2:	e8 79 b5 fe ff       	call   f0100d70 <execute_command>
f01157f7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01157fa:	83 ec 04             	sub    $0x4,%esp
f01157fd:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115803:	50                   	push   %eax
f0115804:	68 04 a8 13 f0       	push   $0xf013a804
f0115809:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011580f:	50                   	push   %eax
f0115810:	e8 a3 be 01 00       	call   f01316b8 <strcconcat>
f0115815:	83 c4 10             	add    $0x10,%esp
f0115818:	83 ec 0c             	sub    $0xc,%esp
f011581b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115821:	50                   	push   %eax
f0115822:	e8 49 b5 fe ff       	call   f0100d70 <execute_command>
f0115827:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011582a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115831:	00 00 00 
		num_pages = 0;
f0115834:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011583b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011583e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115841:	c1 e0 03             	shl    $0x3,%eax
f0115844:	89 c2                	mov    %eax,%edx
f0115846:	83 ec 0c             	sub    $0xc,%esp
f0115849:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011584f:	50                   	push   %eax
f0115850:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115856:	50                   	push   %eax
f0115857:	52                   	push   %edx
f0115858:	6a 00                	push   $0x0
f011585a:	ff 75 d8             	pushl  -0x28(%ebp)
f011585d:	e8 e9 33 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115862:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115865:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011586c:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115873:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115879:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011587c:	74 28                	je     f01158a6 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011587e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115884:	83 ec 0c             	sub    $0xc,%esp
f0115887:	ff 75 c8             	pushl  -0x38(%ebp)
f011588a:	50                   	push   %eax
f011588b:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115890:	68 3f 07 00 00       	push   $0x73f
f0115895:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011589a:	e8 74 ab fe ff       	call   f0100413 <_warn>
f011589f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01158a6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158ac:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158af:	74 28                	je     f01158d9 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01158b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158b7:	83 ec 0c             	sub    $0xc,%esp
f01158ba:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158bd:	50                   	push   %eax
f01158be:	68 10 a9 13 f0       	push   $0xf013a910
f01158c3:	68 44 07 00 00       	push   $0x744
f01158c8:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01158cd:	e8 41 ab fe ff       	call   f0100413 <_warn>
f01158d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158dd:	74 04                	je     f01158e3 <test_calculate_allocated_space+0x8a1>
f01158df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01158e7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158ee:	00 00 00 
		num_pages = 0;
f01158f1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158f8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01158fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158fe:	c1 e0 0a             	shl    $0xa,%eax
f0115901:	89 c2                	mov    %eax,%edx
f0115903:	83 ec 0c             	sub    $0xc,%esp
f0115906:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011590c:	50                   	push   %eax
f011590d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115913:	50                   	push   %eax
f0115914:	52                   	push   %edx
f0115915:	6a 00                	push   $0x0
f0115917:	ff 75 d8             	pushl  -0x28(%ebp)
f011591a:	e8 2c 33 ff ff       	call   f0108c4b <calculate_allocated_space>
f011591f:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115922:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115929:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115930:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115936:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115939:	74 28                	je     f0115963 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011593b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115941:	83 ec 0c             	sub    $0xc,%esp
f0115944:	ff 75 c8             	pushl  -0x38(%ebp)
f0115947:	50                   	push   %eax
f0115948:	68 b0 a8 13 f0       	push   $0xf013a8b0
f011594d:	68 52 07 00 00       	push   $0x752
f0115952:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115957:	e8 b7 aa fe ff       	call   f0100413 <_warn>
f011595c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011595f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115963:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115969:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011596c:	74 28                	je     f0115996 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011596e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115974:	83 ec 0c             	sub    $0xc,%esp
f0115977:	ff 75 c4             	pushl  -0x3c(%ebp)
f011597a:	50                   	push   %eax
f011597b:	68 10 a9 13 f0       	push   $0xf013a910
f0115980:	68 57 07 00 00       	push   $0x757
f0115985:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011598a:	e8 84 aa fe ff       	call   f0100413 <_warn>
f011598f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115992:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115996:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011599a:	74 04                	je     f01159a0 <test_calculate_allocated_space+0x95e>
f011599c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01159a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01159a4:	83 ec 04             	sub    $0x4,%esp
f01159a7:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01159ad:	50                   	push   %eax
f01159ae:	68 10 a8 13 f0       	push   $0xf013a810
f01159b3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01159b9:	50                   	push   %eax
f01159ba:	e8 f9 bc 01 00       	call   f01316b8 <strcconcat>
f01159bf:	83 c4 10             	add    $0x10,%esp
f01159c2:	83 ec 0c             	sub    $0xc,%esp
f01159c5:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01159cb:	50                   	push   %eax
f01159cc:	e8 9f b3 fe ff       	call   f0100d70 <execute_command>
f01159d1:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01159d4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159db:	00 00 00 
		num_pages = 0;
f01159de:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159e5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01159e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01159eb:	89 c2                	mov    %eax,%edx
f01159ed:	01 d2                	add    %edx,%edx
f01159ef:	01 d0                	add    %edx,%eax
f01159f1:	05 00 18 00 00       	add    $0x1800,%eax
f01159f6:	89 c2                	mov    %eax,%edx
f01159f8:	83 ec 0c             	sub    $0xc,%esp
f01159fb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a01:	50                   	push   %eax
f0115a02:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a08:	50                   	push   %eax
f0115a09:	52                   	push   %edx
f0115a0a:	68 00 18 00 00       	push   $0x1800
f0115a0f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a12:	e8 34 32 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115a17:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115a1a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115a21:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115a28:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a2e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115a31:	74 28                	je     f0115a5b <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115a33:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a39:	83 ec 0c             	sub    $0xc,%esp
f0115a3c:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a3f:	50                   	push   %eax
f0115a40:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115a45:	68 68 07 00 00       	push   $0x768
f0115a4a:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115a4f:	e8 bf a9 fe ff       	call   f0100413 <_warn>
f0115a54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115a5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a61:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a64:	74 28                	je     f0115a8e <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115a66:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a6c:	83 ec 0c             	sub    $0xc,%esp
f0115a6f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a72:	50                   	push   %eax
f0115a73:	68 10 a9 13 f0       	push   $0xf013a910
f0115a78:	68 6d 07 00 00       	push   $0x76d
f0115a7d:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115a82:	e8 8c a9 fe ff       	call   f0100413 <_warn>
f0115a87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a8a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a8e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a92:	74 04                	je     f0115a98 <test_calculate_allocated_space+0xa56>
f0115a94:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a98:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115a9c:	83 ec 04             	sub    $0x4,%esp
f0115a9f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115aa5:	50                   	push   %eax
f0115aa6:	68 e8 98 13 f0       	push   $0xf01398e8
f0115aab:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ab1:	50                   	push   %eax
f0115ab2:	e8 01 bc 01 00       	call   f01316b8 <strcconcat>
f0115ab7:	83 c4 10             	add    $0x10,%esp
f0115aba:	83 ec 0c             	sub    $0xc,%esp
f0115abd:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115ac3:	50                   	push   %eax
f0115ac4:	e8 a7 b2 fe ff       	call   f0100d70 <execute_command>
f0115ac9:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115acc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ad3:	00 00 00 
		num_pages = 0;
f0115ad6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115add:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115ae0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115ae3:	89 d0                	mov    %edx,%eax
f0115ae5:	c1 e0 02             	shl    $0x2,%eax
f0115ae8:	01 d0                	add    %edx,%eax
f0115aea:	01 c0                	add    %eax,%eax
f0115aec:	05 00 00 40 00       	add    $0x400000,%eax
f0115af1:	89 c2                	mov    %eax,%edx
f0115af3:	83 ec 0c             	sub    $0xc,%esp
f0115af6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115afc:	50                   	push   %eax
f0115afd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b03:	50                   	push   %eax
f0115b04:	52                   	push   %edx
f0115b05:	68 00 00 40 00       	push   $0x400000
f0115b0a:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b0d:	e8 39 31 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115b12:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115b15:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115b1c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115b23:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b29:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115b2c:	74 28                	je     f0115b56 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115b2e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b34:	83 ec 0c             	sub    $0xc,%esp
f0115b37:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b3a:	50                   	push   %eax
f0115b3b:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115b40:	68 7d 07 00 00       	push   $0x77d
f0115b45:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115b4a:	e8 c4 a8 fe ff       	call   f0100413 <_warn>
f0115b4f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b52:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115b56:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b5c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115b5f:	74 28                	je     f0115b89 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115b61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b67:	83 ec 0c             	sub    $0xc,%esp
f0115b6a:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b6d:	50                   	push   %eax
f0115b6e:	68 10 a9 13 f0       	push   $0xf013a910
f0115b73:	68 82 07 00 00       	push   $0x782
f0115b78:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115b7d:	e8 91 a8 fe ff       	call   f0100413 <_warn>
f0115b82:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b85:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b89:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b8d:	74 04                	je     f0115b93 <test_calculate_allocated_space+0xb51>
f0115b8f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b93:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115b97:	83 ec 04             	sub    $0x4,%esp
f0115b9a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115ba0:	50                   	push   %eax
f0115ba1:	68 f2 98 13 f0       	push   $0xf01398f2
f0115ba6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115bac:	50                   	push   %eax
f0115bad:	e8 06 bb 01 00       	call   f01316b8 <strcconcat>
f0115bb2:	83 c4 10             	add    $0x10,%esp
f0115bb5:	83 ec 0c             	sub    $0xc,%esp
f0115bb8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115bbe:	50                   	push   %eax
f0115bbf:	e8 ac b1 fe ff       	call   f0100d70 <execute_command>
f0115bc4:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115bc7:	83 ec 04             	sub    $0x4,%esp
f0115bca:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115bd0:	50                   	push   %eax
f0115bd1:	68 18 a8 13 f0       	push   $0xf013a818
f0115bd6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115bdc:	50                   	push   %eax
f0115bdd:	e8 d6 ba 01 00       	call   f01316b8 <strcconcat>
f0115be2:	83 c4 10             	add    $0x10,%esp
f0115be5:	83 ec 0c             	sub    $0xc,%esp
f0115be8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115bee:	50                   	push   %eax
f0115bef:	e8 7c b1 fe ff       	call   f0100d70 <execute_command>
f0115bf4:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115bf7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bfe:	00 00 00 
		num_pages = 0;
f0115c01:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c08:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115c0b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115c0e:	05 00 00 38 00       	add    $0x380000,%eax
f0115c13:	01 c0                	add    %eax,%eax
f0115c15:	89 c2                	mov    %eax,%edx
f0115c17:	83 ec 0c             	sub    $0xc,%esp
f0115c1a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c20:	50                   	push   %eax
f0115c21:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c27:	50                   	push   %eax
f0115c28:	52                   	push   %edx
f0115c29:	68 00 00 70 00       	push   $0x700000
f0115c2e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c31:	e8 15 30 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115c36:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115c39:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115c40:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115c47:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c4d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115c50:	74 28                	je     f0115c7a <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115c52:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c58:	83 ec 0c             	sub    $0xc,%esp
f0115c5b:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c5e:	50                   	push   %eax
f0115c5f:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115c64:	68 94 07 00 00       	push   $0x794
f0115c69:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115c6e:	e8 a0 a7 fe ff       	call   f0100413 <_warn>
f0115c73:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c76:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c7a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c80:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c83:	74 28                	je     f0115cad <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c85:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c8b:	83 ec 0c             	sub    $0xc,%esp
f0115c8e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c91:	50                   	push   %eax
f0115c92:	68 10 a9 13 f0       	push   $0xf013a910
f0115c97:	68 99 07 00 00       	push   $0x799
f0115c9c:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115ca1:	e8 6d a7 fe ff       	call   f0100413 <_warn>
f0115ca6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ca9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115cad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cb1:	74 04                	je     f0115cb7 <test_calculate_allocated_space+0xc75>
f0115cb3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115cb7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115cbb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cc2:	00 00 00 
		num_pages = 0;
f0115cc5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ccc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115ccf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115cd2:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115cd7:	89 c2                	mov    %eax,%edx
f0115cd9:	83 ec 0c             	sub    $0xc,%esp
f0115cdc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ce2:	50                   	push   %eax
f0115ce3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ce9:	50                   	push   %eax
f0115cea:	52                   	push   %edx
f0115ceb:	68 ff ff 3f 00       	push   $0x3fffff
f0115cf0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cf3:	e8 53 2f ff ff       	call   f0108c4b <calculate_allocated_space>
f0115cf8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115cfb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115d02:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d0f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d12:	74 28                	je     f0115d3c <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d1a:	83 ec 0c             	sub    $0xc,%esp
f0115d1d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d20:	50                   	push   %eax
f0115d21:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0115d26:	68 a7 07 00 00       	push   $0x7a7
f0115d2b:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115d30:	e8 de a6 fe ff       	call   f0100413 <_warn>
f0115d35:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d38:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d3c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d42:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d45:	74 28                	je     f0115d6f <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d4d:	83 ec 0c             	sub    $0xc,%esp
f0115d50:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d53:	50                   	push   %eax
f0115d54:	68 10 a9 13 f0       	push   $0xf013a910
f0115d59:	68 ac 07 00 00       	push   $0x7ac
f0115d5e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115d63:	e8 ab a6 fe ff       	call   f0100413 <_warn>
f0115d68:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115d6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d73:	74 04                	je     f0115d79 <test_calculate_allocated_space+0xd37>
f0115d75:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115d79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115d7d:	83 ec 0c             	sub    $0xc,%esp
f0115d80:	68 a3 98 13 f0       	push   $0xf01398a3
f0115d85:	e8 84 af fe ff       	call   f0100d0e <cprintf>
f0115d8a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0115d8d:	83 ec 08             	sub    $0x8,%esp
f0115d90:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115d93:	68 6c a9 13 f0       	push   $0xf013a96c
f0115d98:	e8 71 af fe ff       	call   f0100d0e <cprintf>
f0115d9d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115da0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115da4:	75 10                	jne    f0115db6 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115da6:	83 ec 0c             	sub    $0xc,%esp
f0115da9:	68 ac a9 13 f0       	push   $0xf013a9ac
f0115dae:	e8 5b af fe ff       	call   f0100d0e <cprintf>
f0115db3:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115db6:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0115dbb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115dbe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115dc1:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115dc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115dc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115dcc:	5b                   	pop    %ebx
f0115dcd:	5e                   	pop    %esi
f0115dce:	5f                   	pop    %edi
f0115dcf:	5d                   	pop    %ebp
f0115dd0:	c3                   	ret    

f0115dd1 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115dd1:	55                   	push   %ebp
f0115dd2:	89 e5                	mov    %esp,%ebp
f0115dd4:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115dd7:	8b 45 10             	mov    0x10(%ebp),%eax
f0115dda:	ba 01 00 00 00       	mov    $0x1,%edx
f0115ddf:	88 c1                	mov    %al,%cl
f0115de1:	d3 e2                	shl    %cl,%edx
f0115de3:	89 d0                	mov    %edx,%eax
f0115de5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115de8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115deb:	c1 e8 16             	shr    $0x16,%eax
f0115dee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115df5:	8b 45 08             	mov    0x8(%ebp),%eax
f0115df8:	01 d0                	add    %edx,%eax
f0115dfa:	8b 00                	mov    (%eax),%eax
f0115dfc:	83 e0 01             	and    $0x1,%eax
f0115dff:	85 c0                	test   %eax,%eax
f0115e01:	75 07                	jne    f0115e0a <CB+0x39>
f0115e03:	b8 00 00 00 00       	mov    $0x0,%eax
f0115e08:	eb 76                	jmp    f0115e80 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115e0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115e0d:	c1 e8 16             	shr    $0x16,%eax
f0115e10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0115e1a:	01 d0                	add    %edx,%eax
f0115e1c:	8b 00                	mov    (%eax),%eax
f0115e1e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115e23:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115e29:	c1 e8 0c             	shr    $0xc,%eax
f0115e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115e2f:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0115e34:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115e37:	72 17                	jb     f0115e50 <CB+0x7f>
f0115e39:	ff 75 f0             	pushl  -0x10(%ebp)
f0115e3c:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0115e41:	68 c7 07 00 00       	push   $0x7c7
f0115e46:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115e4b:	e8 b5 a3 fe ff       	call   f0100205 <_panic>
f0115e50:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115e53:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115e58:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115e5e:	c1 e8 0c             	shr    $0xc,%eax
f0115e61:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115e66:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115e6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115e70:	01 d0                	add    %edx,%eax
f0115e72:	8b 00                	mov    (%eax),%eax
f0115e74:	23 45 f4             	and    -0xc(%ebp),%eax
f0115e77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115e7a:	0f 94 c0             	sete   %al
f0115e7d:	0f b6 c0             	movzbl %al,%eax
}
f0115e80:	c9                   	leave  
f0115e81:	c3                   	ret    

f0115e82 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115e82:	55                   	push   %ebp
f0115e83:	89 e5                	mov    %esp,%ebp
f0115e85:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115e88:	68 27 aa 13 f0       	push   $0xf013aa27
f0115e8d:	68 36 aa 13 f0       	push   $0xf013aa36
f0115e92:	68 cc 07 00 00       	push   $0x7cc
f0115e97:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115e9c:	e8 64 a3 fe ff       	call   f0100205 <_panic>

f0115ea1 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115ea1:	55                   	push   %ebp
f0115ea2:	89 e5                	mov    %esp,%ebp
f0115ea4:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115ea7:	68 27 aa 13 f0       	push   $0xf013aa27
f0115eac:	68 36 aa 13 f0       	push   $0xf013aa36
f0115eb1:	68 d6 07 00 00       	push   $0x7d6
f0115eb6:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115ebb:	e8 45 a3 fe ff       	call   f0100205 <_panic>

f0115ec0 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115ec0:	55                   	push   %ebp
f0115ec1:	89 e5                	mov    %esp,%ebp
f0115ec3:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115ec6:	68 27 aa 13 f0       	push   $0xf013aa27
f0115ecb:	68 36 aa 13 f0       	push   $0xf013aa36
f0115ed0:	68 e5 07 00 00       	push   $0x7e5
f0115ed5:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115eda:	e8 26 a3 fe ff       	call   f0100205 <_panic>

f0115edf <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0115edf:	55                   	push   %ebp
f0115ee0:	89 e5                	mov    %esp,%ebp
f0115ee2:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115ee5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ee8:	c1 e8 16             	shr    $0x16,%eax
f0115eeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ef2:	8b 45 08             	mov    0x8(%ebp),%eax
f0115ef5:	01 d0                	add    %edx,%eax
f0115ef7:	8b 00                	mov    (%eax),%eax
f0115ef9:	83 e0 01             	and    $0x1,%eax
f0115efc:	85 c0                	test   %eax,%eax
f0115efe:	75 07                	jne    f0115f07 <CE+0x28>
f0115f00:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f05:	eb 7a                	jmp    f0115f81 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115f07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115f0a:	c1 e8 16             	shr    $0x16,%eax
f0115f0d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115f14:	8b 45 08             	mov    0x8(%ebp),%eax
f0115f17:	01 d0                	add    %edx,%eax
f0115f19:	8b 00                	mov    (%eax),%eax
f0115f1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115f20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115f26:	c1 e8 0c             	shr    $0xc,%eax
f0115f29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115f2c:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0115f31:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115f34:	72 17                	jb     f0115f4d <CE+0x6e>
f0115f36:	ff 75 f4             	pushl  -0xc(%ebp)
f0115f39:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0115f3e:	68 ee 07 00 00       	push   $0x7ee
f0115f43:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115f48:	e8 b8 a2 fe ff       	call   f0100205 <_panic>
f0115f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115f50:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115f55:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115f5b:	c1 e8 0c             	shr    $0xc,%eax
f0115f5e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115f63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115f6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115f6d:	01 d0                	add    %edx,%eax
f0115f6f:	8b 00                	mov    (%eax),%eax
f0115f71:	85 c0                	test   %eax,%eax
f0115f73:	74 07                	je     f0115f7c <CE+0x9d>
f0115f75:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f7a:	eb 05                	jmp    f0115f81 <CE+0xa2>
	return 1;
f0115f7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115f81:	c9                   	leave  
f0115f82:	c3                   	ret    

f0115f83 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115f83:	55                   	push   %ebp
f0115f84:	89 e5                	mov    %esp,%ebp
f0115f86:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115f89:	68 27 aa 13 f0       	push   $0xf013aa27
f0115f8e:	68 36 aa 13 f0       	push   $0xf013aa36
f0115f93:	68 f5 07 00 00       	push   $0x7f5
f0115f98:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115f9d:	e8 63 a2 fe ff       	call   f0100205 <_panic>

f0115fa2 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115fa2:	55                   	push   %ebp
f0115fa3:	89 e5                	mov    %esp,%ebp
f0115fa5:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115fa8:	68 27 aa 13 f0       	push   $0xf013aa27
f0115fad:	68 36 aa 13 f0       	push   $0xf013aa36
f0115fb2:	68 05 08 00 00       	push   $0x805
f0115fb7:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0115fbc:	e8 44 a2 fe ff       	call   f0100205 <_panic>

f0115fc1 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115fc1:	55                   	push   %ebp
f0115fc2:	89 e5                	mov    %esp,%ebp
f0115fc4:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115fc7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115fce:	eb 18                	jmp    f0115fe8 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115fd3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115fda:	8b 45 08             	mov    0x8(%ebp),%eax
f0115fdd:	01 d0                	add    %edx,%eax
f0115fdf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115fe5:	ff 45 fc             	incl   -0x4(%ebp)
f0115fe8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115feb:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115ff0:	76 de                	jbe    f0115fd0 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115ff2:	90                   	nop
f0115ff3:	c9                   	leave  
f0115ff4:	c3                   	ret    

f0115ff5 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115ff5:	55                   	push   %ebp
f0115ff6:	89 e5                	mov    %esp,%ebp
f0115ff8:	83 ec 38             	sub    $0x38,%esp
f0115ffb:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115ffe:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116001:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116004:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116009:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011600c:	8b 45 10             	mov    0x10(%ebp),%eax
f011600f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116014:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116017:	e9 ea 01 00 00       	jmp    f0116206 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011601c:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116020:	74 44                	je     f0116066 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116025:	83 ec 04             	sub    $0x4,%esp
f0116028:	8d 55 dc             	lea    -0x24(%ebp),%edx
f011602b:	52                   	push   %edx
f011602c:	50                   	push   %eax
f011602d:	ff 75 08             	pushl  0x8(%ebp)
f0116030:	e8 d1 0d ff ff       	call   f0106e06 <get_frame_info>
f0116035:	83 c4 10             	add    $0x10,%esp
f0116038:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f011603b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011603e:	85 c0                	test   %eax,%eax
f0116040:	75 24                	jne    f0116066 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116042:	83 ec 04             	sub    $0x4,%esp
f0116045:	68 4c aa 13 f0       	push   $0xf013aa4c
f011604a:	68 22 08 00 00       	push   $0x822
f011604f:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0116054:	e8 ba a3 fe ff       	call   f0100413 <_warn>
f0116059:	83 c4 10             	add    $0x10,%esp
				return 0;
f011605c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116061:	e9 b6 01 00 00       	jmp    f011621c <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116066:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116069:	83 ec 04             	sub    $0x4,%esp
f011606c:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011606f:	52                   	push   %edx
f0116070:	50                   	push   %eax
f0116071:	ff 75 08             	pushl  0x8(%ebp)
f0116074:	e8 8d 0d ff ff       	call   f0106e06 <get_frame_info>
f0116079:	83 c4 10             	add    $0x10,%esp
f011607c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011607f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116082:	85 c0                	test   %eax,%eax
f0116084:	75 24                	jne    f01160aa <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116086:	83 ec 04             	sub    $0x4,%esp
f0116089:	68 78 aa 13 f0       	push   $0xf013aa78
f011608e:	68 29 08 00 00       	push   $0x829
f0116093:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0116098:	e8 76 a3 fe ff       	call   f0100413 <_warn>
f011609d:	83 c4 10             	add    $0x10,%esp
			return 0;
f01160a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01160a5:	e9 72 01 00 00       	jmp    f011621c <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f01160aa:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f01160ae:	75 70                	jne    f0116120 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f01160b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01160b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01160b6:	c1 ea 0c             	shr    $0xc,%edx
f01160b9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01160bf:	c1 e2 02             	shl    $0x2,%edx
f01160c2:	01 d0                	add    %edx,%eax
f01160c4:	8b 00                	mov    (%eax),%eax
f01160c6:	c1 e8 0c             	shr    $0xc,%eax
f01160c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01160cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01160cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01160d2:	c1 ea 0c             	shr    $0xc,%edx
f01160d5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01160db:	c1 e2 02             	shl    $0x2,%edx
f01160de:	01 d0                	add    %edx,%eax
f01160e0:	8b 00                	mov    (%eax),%eax
f01160e2:	c1 e8 0c             	shr    $0xc,%eax
f01160e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01160e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01160eb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01160ee:	74 30                	je     f0116120 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01160f0:	83 ec 04             	sub    $0x4,%esp
f01160f3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01160f6:	ff 75 e8             	pushl  -0x18(%ebp)
f01160f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01160fc:	ff 75 f4             	pushl  -0xc(%ebp)
f01160ff:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0116104:	68 33 08 00 00       	push   $0x833
f0116109:	68 7e 8b 13 f0       	push   $0xf0138b7e
f011610e:	e8 00 a3 fe ff       	call   f0100413 <_warn>
f0116113:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116116:	b8 00 00 00 00       	mov    $0x0,%eax
f011611b:	e9 fc 00 00 00       	jmp    f011621c <CCP+0x227>
			}
		}
		if (ref != -1)
f0116120:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116124:	74 52                	je     f0116178 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116126:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011612a:	74 0e                	je     f011613a <CCP+0x145>
f011612c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011612f:	8b 40 08             	mov    0x8(%eax),%eax
f0116132:	0f b7 c0             	movzwl %ax,%eax
f0116135:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116138:	74 3e                	je     f0116178 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f011613a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011613e:	74 0b                	je     f011614b <CCP+0x156>
f0116140:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116143:	8b 40 08             	mov    0x8(%eax),%eax
f0116146:	0f b7 c0             	movzwl %ax,%eax
f0116149:	eb 05                	jmp    f0116150 <CCP+0x15b>
f011614b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116150:	83 ec 0c             	sub    $0xc,%esp
f0116153:	50                   	push   %eax
f0116154:	ff 75 f0             	pushl  -0x10(%ebp)
f0116157:	68 00 ab 13 f0       	push   $0xf013ab00
f011615c:	68 3b 08 00 00       	push   $0x83b
f0116161:	68 7e 8b 13 f0       	push   $0xf0138b7e
f0116166:	e8 a8 a2 fe ff       	call   f0100413 <_warn>
f011616b:	83 c4 20             	add    $0x20,%esp
				return 0;
f011616e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116173:	e9 a4 00 00 00       	jmp    f011621c <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116178:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011617b:	ff 75 20             	pushl  0x20(%ebp)
f011617e:	ff 75 1c             	pushl  0x1c(%ebp)
f0116181:	50                   	push   %eax
f0116182:	ff 75 08             	pushl  0x8(%ebp)
f0116185:	e8 17 fd ff ff       	call   f0115ea1 <CPs>
f011618a:	83 c4 10             	add    $0x10,%esp
f011618d:	85 c0                	test   %eax,%eax
f011618f:	7f 21                	jg     f01161b2 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116191:	83 ec 04             	sub    $0x4,%esp
f0116194:	68 70 ab 13 f0       	push   $0xf013ab70
f0116199:	68 41 08 00 00       	push   $0x841
f011619e:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01161a3:	e8 6b a2 fe ff       	call   f0100413 <_warn>
f01161a8:	83 c4 10             	add    $0x10,%esp
			return 0;
f01161ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01161b0:	eb 6a                	jmp    f011621c <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f01161b2:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01161b6:	74 3a                	je     f01161f2 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f01161b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01161bb:	ff 75 28             	pushl  0x28(%ebp)
f01161be:	ff 75 24             	pushl  0x24(%ebp)
f01161c1:	50                   	push   %eax
f01161c2:	ff 75 08             	pushl  0x8(%ebp)
f01161c5:	e8 d7 fc ff ff       	call   f0115ea1 <CPs>
f01161ca:	83 c4 10             	add    $0x10,%esp
f01161cd:	85 c0                	test   %eax,%eax
f01161cf:	7f 21                	jg     f01161f2 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f01161d1:	83 ec 04             	sub    $0x4,%esp
f01161d4:	68 b8 ab 13 f0       	push   $0xf013abb8
f01161d9:	68 48 08 00 00       	push   $0x848
f01161de:	68 7e 8b 13 f0       	push   $0xf0138b7e
f01161e3:	e8 2b a2 fe ff       	call   f0100413 <_warn>
f01161e8:	83 c4 10             	add    $0x10,%esp
				return 0;
f01161eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01161f0:	eb 2a                	jmp    f011621c <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01161f2:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01161f6:	74 07                	je     f01161ff <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01161f8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01161ff:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116206:	8b 55 10             	mov    0x10(%ebp),%edx
f0116209:	8b 45 14             	mov    0x14(%ebp),%eax
f011620c:	01 d0                	add    %edx,%eax
f011620e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116211:	0f 87 05 fe ff ff    	ja     f011601c <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116217:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011621c:	c9                   	leave  
f011621d:	c3                   	ret    

f011621e <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011621e:	55                   	push   %ebp
f011621f:	89 e5                	mov    %esp,%ebp
f0116221:	57                   	push   %edi
f0116222:	56                   	push   %esi
f0116223:	53                   	push   %ebx
f0116224:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f011622a:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f011622f:	84 c0                	test   %al,%al
f0116231:	0f 84 b4 09 00 00    	je     f0116beb <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116237:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f011623e:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116244:	bb 58 ae 13 f0       	mov    $0xf013ae58,%ebx
f0116249:	ba 04 00 00 00       	mov    $0x4,%edx
f011624e:	89 c7                	mov    %eax,%edi
f0116250:	89 de                	mov    %ebx,%esi
f0116252:	89 d1                	mov    %edx,%ecx
f0116254:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116256:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011625c:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116261:	b8 00 00 00 00       	mov    $0x0,%eax
f0116266:	89 d7                	mov    %edx,%edi
f0116268:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011626a:	83 ec 0c             	sub    $0xc,%esp
f011626d:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116273:	50                   	push   %eax
f0116274:	e8 f7 aa fe ff       	call   f0100d70 <execute_command>
f0116279:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011627c:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116282:	bb bc ae 13 f0       	mov    $0xf013aebc,%ebx
f0116287:	ba 0d 00 00 00       	mov    $0xd,%edx
f011628c:	89 c7                	mov    %eax,%edi
f011628e:	89 de                	mov    %ebx,%esi
f0116290:	89 d1                	mov    %edx,%ecx
f0116292:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116294:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011629a:	b9 57 00 00 00       	mov    $0x57,%ecx
f011629f:	b0 00                	mov    $0x0,%al
f01162a1:	89 d7                	mov    %edx,%edi
f01162a3:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01162a5:	83 ec 0c             	sub    $0xc,%esp
f01162a8:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01162ae:	50                   	push   %eax
f01162af:	e8 bc aa fe ff       	call   f0100d70 <execute_command>
f01162b4:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f01162b7:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01162bd:	bb 20 af 13 f0       	mov    $0xf013af20,%ebx
f01162c2:	ba 17 00 00 00       	mov    $0x17,%edx
f01162c7:	89 c7                	mov    %eax,%edi
f01162c9:	89 de                	mov    %ebx,%esi
f01162cb:	89 d1                	mov    %edx,%ecx
f01162cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01162cf:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f01162d5:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01162da:	b0 00                	mov    $0x0,%al
f01162dc:	89 d7                	mov    %edx,%edi
f01162de:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01162e0:	83 ec 0c             	sub    $0xc,%esp
f01162e3:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01162e9:	50                   	push   %eax
f01162ea:	e8 81 aa fe ff       	call   f0100d70 <execute_command>
f01162ef:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01162f2:	83 ec 04             	sub    $0x4,%esp
f01162f5:	6a 00                	push   $0x0
f01162f7:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01162fa:	50                   	push   %eax
f01162fb:	68 00 10 00 00       	push   $0x1000
f0116300:	e8 05 38 ff ff       	call   f0109b0a <envid2env>
f0116305:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116308:	83 ec 04             	sub    $0x4,%esp
f011630b:	6a 00                	push   $0x0
f011630d:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116310:	50                   	push   %eax
f0116311:	68 01 10 00 00       	push   $0x1001
f0116316:	e8 ef 37 ff ff       	call   f0109b0a <envid2env>
f011631b:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011631e:	83 ec 04             	sub    $0x4,%esp
f0116321:	6a 00                	push   $0x0
f0116323:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116326:	50                   	push   %eax
f0116327:	68 02 10 00 00       	push   $0x1002
f011632c:	e8 d9 37 ff ff       	call   f0109b0a <envid2env>
f0116331:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116334:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116337:	85 c0                	test   %eax,%eax
f0116339:	74 0e                	je     f0116349 <test_priority_normal_and_higher+0x12b>
f011633b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011633e:	85 c0                	test   %eax,%eax
f0116340:	74 07                	je     f0116349 <test_priority_normal_and_higher+0x12b>
f0116342:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116345:	85 c0                	test   %eax,%eax
f0116347:	75 14                	jne    f011635d <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116349:	83 ec 04             	sub    $0x4,%esp
f011634c:	68 f8 ab 13 f0       	push   $0xf013abf8
f0116351:	6a 26                	push   $0x26
f0116353:	68 11 ac 13 f0       	push   $0xf013ac11
f0116358:	e8 a8 9e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011635d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116360:	8b 40 74             	mov    0x74(%eax),%eax
f0116363:	83 f8 14             	cmp    $0x14,%eax
f0116366:	75 16                	jne    f011637e <test_priority_normal_and_higher+0x160>
f0116368:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011636b:	8b 40 74             	mov    0x74(%eax),%eax
f011636e:	83 f8 0f             	cmp    $0xf,%eax
f0116371:	75 0b                	jne    f011637e <test_priority_normal_and_higher+0x160>
f0116373:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116376:	8b 40 74             	mov    0x74(%eax),%eax
f0116379:	83 f8 0a             	cmp    $0xa,%eax
f011637c:	74 14                	je     f0116392 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f011637e:	83 ec 04             	sub    $0x4,%esp
f0116381:	68 2c ac 13 f0       	push   $0xf013ac2c
f0116386:	6a 29                	push   $0x29
f0116388:	68 11 ac 13 f0       	push   $0xf013ac11
f011638d:	e8 73 9e fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116392:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116399:	eb 44                	jmp    f01163df <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011639b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011639e:	8b 48 78             	mov    0x78(%eax),%ecx
f01163a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01163a4:	89 d0                	mov    %edx,%eax
f01163a6:	01 c0                	add    %eax,%eax
f01163a8:	01 d0                	add    %edx,%eax
f01163aa:	c1 e0 03             	shl    $0x3,%eax
f01163ad:	01 c8                	add    %ecx,%eax
f01163af:	8b 10                	mov    (%eax),%edx
f01163b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01163b4:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01163bb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01163be:	8b 48 78             	mov    0x78(%eax),%ecx
f01163c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01163c4:	89 d0                	mov    %edx,%eax
f01163c6:	01 c0                	add    %eax,%eax
f01163c8:	01 d0                	add    %edx,%eax
f01163ca:	c1 e0 03             	shl    $0x3,%eax
f01163cd:	01 c8                	add    %ecx,%eax
f01163cf:	8b 50 08             	mov    0x8(%eax),%edx
f01163d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01163d5:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01163dc:	ff 45 e4             	incl   -0x1c(%ebp)
f01163df:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01163e3:	7e b6                	jle    f011639b <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01163e5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01163ec:	eb 44                	jmp    f0116432 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01163ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01163f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01163f7:	89 d0                	mov    %edx,%eax
f01163f9:	01 c0                	add    %eax,%eax
f01163fb:	01 d0                	add    %edx,%eax
f01163fd:	c1 e0 03             	shl    $0x3,%eax
f0116400:	01 c8                	add    %ecx,%eax
f0116402:	8b 10                	mov    (%eax),%edx
f0116404:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116407:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011640e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116411:	8b 48 78             	mov    0x78(%eax),%ecx
f0116414:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116417:	89 d0                	mov    %edx,%eax
f0116419:	01 c0                	add    %eax,%eax
f011641b:	01 d0                	add    %edx,%eax
f011641d:	c1 e0 03             	shl    $0x3,%eax
f0116420:	01 c8                	add    %ecx,%eax
f0116422:	8b 50 08             	mov    0x8(%eax),%edx
f0116425:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116428:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011642f:	ff 45 e0             	incl   -0x20(%ebp)
f0116432:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116436:	7e b6                	jle    f01163ee <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116438:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011643f:	eb 44                	jmp    f0116485 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116441:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116444:	8b 48 78             	mov    0x78(%eax),%ecx
f0116447:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011644a:	89 d0                	mov    %edx,%eax
f011644c:	01 c0                	add    %eax,%eax
f011644e:	01 d0                	add    %edx,%eax
f0116450:	c1 e0 03             	shl    $0x3,%eax
f0116453:	01 c8                	add    %ecx,%eax
f0116455:	8b 10                	mov    (%eax),%edx
f0116457:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011645a:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116461:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116464:	8b 48 78             	mov    0x78(%eax),%ecx
f0116467:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011646a:	89 d0                	mov    %edx,%eax
f011646c:	01 c0                	add    %eax,%eax
f011646e:	01 d0                	add    %edx,%eax
f0116470:	c1 e0 03             	shl    $0x3,%eax
f0116473:	01 c8                	add    %ecx,%eax
f0116475:	8b 50 08             	mov    0x8(%eax),%edx
f0116478:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011647b:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116482:	ff 45 dc             	incl   -0x24(%ebp)
f0116485:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116489:	7e b6                	jle    f0116441 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011648b:	e8 0d 67 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116490:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116493:	e8 30 d9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116498:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011649b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011649e:	83 ec 08             	sub    $0x8,%esp
f01164a1:	6a 03                	push   $0x3
f01164a3:	50                   	push   %eax
f01164a4:	e8 3f 4b ff ff       	call   f010afe8 <set_program_priority>
f01164a9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01164ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164af:	83 ec 08             	sub    $0x8,%esp
f01164b2:	6a 03                	push   $0x3
f01164b4:	50                   	push   %eax
f01164b5:	e8 2e 4b ff ff       	call   f010afe8 <set_program_priority>
f01164ba:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01164bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164c0:	83 ec 08             	sub    $0x8,%esp
f01164c3:	6a 03                	push   $0x3
f01164c5:	50                   	push   %eax
f01164c6:	e8 1d 4b ff ff       	call   f010afe8 <set_program_priority>
f01164cb:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164ce:	e8 f5 d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01164d3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01164d6:	74 14                	je     f01164ec <test_priority_normal_and_higher+0x2ce>
f01164d8:	83 ec 04             	sub    $0x4,%esp
f01164db:	68 78 ac 13 f0       	push   $0xf013ac78
f01164e0:	6a 45                	push   $0x45
f01164e2:	68 11 ac 13 f0       	push   $0xf013ac11
f01164e7:	e8 19 9d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01164ec:	e8 ac 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01164f1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01164f4:	74 14                	je     f011650a <test_priority_normal_and_higher+0x2ec>
f01164f6:	83 ec 04             	sub    $0x4,%esp
f01164f9:	68 78 ac 13 f0       	push   $0xf013ac78
f01164fe:	6a 46                	push   $0x46
f0116500:	68 11 ac 13 f0       	push   $0xf013ac11
f0116505:	e8 fb 9c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011650a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011650d:	8b 40 74             	mov    0x74(%eax),%eax
f0116510:	83 f8 14             	cmp    $0x14,%eax
f0116513:	75 16                	jne    f011652b <test_priority_normal_and_higher+0x30d>
f0116515:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116518:	8b 40 74             	mov    0x74(%eax),%eax
f011651b:	83 f8 0f             	cmp    $0xf,%eax
f011651e:	75 0b                	jne    f011652b <test_priority_normal_and_higher+0x30d>
f0116520:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116523:	8b 40 74             	mov    0x74(%eax),%eax
f0116526:	83 f8 0a             	cmp    $0xa,%eax
f0116529:	74 14                	je     f011653f <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011652b:	83 ec 04             	sub    $0x4,%esp
f011652e:	68 a4 ac 13 f0       	push   $0xf013aca4
f0116533:	6a 49                	push   $0x49
f0116535:	68 11 ac 13 f0       	push   $0xf013ac11
f011653a:	e8 c6 9c fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011653f:	e8 59 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116544:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116547:	e8 7c d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011654c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011654f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116552:	83 ec 08             	sub    $0x8,%esp
f0116555:	6a 04                	push   $0x4
f0116557:	50                   	push   %eax
f0116558:	e8 8b 4a ff ff       	call   f010afe8 <set_program_priority>
f011655d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116560:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116563:	83 ec 08             	sub    $0x8,%esp
f0116566:	6a 04                	push   $0x4
f0116568:	50                   	push   %eax
f0116569:	e8 7a 4a ff ff       	call   f010afe8 <set_program_priority>
f011656e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116571:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116574:	83 ec 08             	sub    $0x8,%esp
f0116577:	6a 04                	push   $0x4
f0116579:	50                   	push   %eax
f011657a:	e8 69 4a ff ff       	call   f010afe8 <set_program_priority>
f011657f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116582:	e8 41 d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116587:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011658a:	74 14                	je     f01165a0 <test_priority_normal_and_higher+0x382>
f011658c:	83 ec 04             	sub    $0x4,%esp
f011658f:	68 78 ac 13 f0       	push   $0xf013ac78
f0116594:	6a 53                	push   $0x53
f0116596:	68 11 ac 13 f0       	push   $0xf013ac11
f011659b:	e8 65 9c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f01165a0:	e8 f8 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01165a5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01165a8:	74 14                	je     f01165be <test_priority_normal_and_higher+0x3a0>
f01165aa:	83 ec 04             	sub    $0x4,%esp
f01165ad:	68 f8 ac 13 f0       	push   $0xf013acf8
f01165b2:	6a 54                	push   $0x54
f01165b4:	68 11 ac 13 f0       	push   $0xf013ac11
f01165b9:	e8 47 9c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01165be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01165c1:	8b 40 74             	mov    0x74(%eax),%eax
f01165c4:	83 f8 14             	cmp    $0x14,%eax
f01165c7:	75 16                	jne    f01165df <test_priority_normal_and_higher+0x3c1>
f01165c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01165cc:	8b 40 74             	mov    0x74(%eax),%eax
f01165cf:	83 f8 0f             	cmp    $0xf,%eax
f01165d2:	75 0b                	jne    f01165df <test_priority_normal_and_higher+0x3c1>
f01165d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165d7:	8b 40 74             	mov    0x74(%eax),%eax
f01165da:	83 f8 14             	cmp    $0x14,%eax
f01165dd:	74 14                	je     f01165f3 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f01165df:	83 ec 04             	sub    $0x4,%esp
f01165e2:	68 28 ad 13 f0       	push   $0xf013ad28
f01165e7:	6a 57                	push   $0x57
f01165e9:	68 11 ac 13 f0       	push   $0xf013ac11
f01165ee:	e8 12 9c fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01165f3:	e8 a5 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01165f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01165fb:	e8 c8 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116600:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116603:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116606:	83 ec 08             	sub    $0x8,%esp
f0116609:	6a 04                	push   $0x4
f011660b:	50                   	push   %eax
f011660c:	e8 d7 49 ff ff       	call   f010afe8 <set_program_priority>
f0116611:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116614:	e8 af d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116619:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011661c:	74 14                	je     f0116632 <test_priority_normal_and_higher+0x414>
f011661e:	83 ec 04             	sub    $0x4,%esp
f0116621:	68 78 ac 13 f0       	push   $0xf013ac78
f0116626:	6a 5f                	push   $0x5f
f0116628:	68 11 ac 13 f0       	push   $0xf013ac11
f011662d:	e8 d3 9b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116632:	e8 66 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116637:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011663a:	74 14                	je     f0116650 <test_priority_normal_and_higher+0x432>
f011663c:	83 ec 04             	sub    $0x4,%esp
f011663f:	68 78 ac 13 f0       	push   $0xf013ac78
f0116644:	6a 60                	push   $0x60
f0116646:	68 11 ac 13 f0       	push   $0xf013ac11
f011664b:	e8 b5 9b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116650:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116653:	8b 40 74             	mov    0x74(%eax),%eax
f0116656:	83 f8 14             	cmp    $0x14,%eax
f0116659:	75 16                	jne    f0116671 <test_priority_normal_and_higher+0x453>
f011665b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011665e:	8b 40 74             	mov    0x74(%eax),%eax
f0116661:	83 f8 0f             	cmp    $0xf,%eax
f0116664:	75 0b                	jne    f0116671 <test_priority_normal_and_higher+0x453>
f0116666:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116669:	8b 40 74             	mov    0x74(%eax),%eax
f011666c:	83 f8 14             	cmp    $0x14,%eax
f011666f:	74 14                	je     f0116685 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116671:	83 ec 04             	sub    $0x4,%esp
f0116674:	68 70 ad 13 f0       	push   $0xf013ad70
f0116679:	6a 63                	push   $0x63
f011667b:	68 11 ac 13 f0       	push   $0xf013ac11
f0116680:	e8 80 9b fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116685:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011668c:	eb 1b                	jmp    f01166a9 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011668e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116691:	8b 48 78             	mov    0x78(%eax),%ecx
f0116694:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116697:	89 d0                	mov    %edx,%eax
f0116699:	01 c0                	add    %eax,%eax
f011669b:	01 d0                	add    %edx,%eax
f011669d:	c1 e0 03             	shl    $0x3,%eax
f01166a0:	01 c8                	add    %ecx,%eax
f01166a2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01166a6:	ff 45 d8             	incl   -0x28(%ebp)
f01166a9:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f01166ad:	7e df                	jle    f011668e <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01166af:	e8 e9 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01166b4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01166b7:	e8 0c d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166bc:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f01166bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166c2:	83 ec 08             	sub    $0x8,%esp
f01166c5:	6a 04                	push   $0x4
f01166c7:	50                   	push   %eax
f01166c8:	e8 1b 49 ff ff       	call   f010afe8 <set_program_priority>
f01166cd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01166d0:	e8 f3 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166d5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01166d8:	74 14                	je     f01166ee <test_priority_normal_and_higher+0x4d0>
f01166da:	83 ec 04             	sub    $0x4,%esp
f01166dd:	68 78 ac 13 f0       	push   $0xf013ac78
f01166e2:	6a 70                	push   $0x70
f01166e4:	68 11 ac 13 f0       	push   $0xf013ac11
f01166e9:	e8 17 9b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01166ee:	e8 aa 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01166f3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01166f6:	74 14                	je     f011670c <test_priority_normal_and_higher+0x4ee>
f01166f8:	83 ec 04             	sub    $0x4,%esp
f01166fb:	68 78 ac 13 f0       	push   $0xf013ac78
f0116700:	6a 71                	push   $0x71
f0116702:	68 11 ac 13 f0       	push   $0xf013ac11
f0116707:	e8 f9 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011670c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011670f:	8b 40 74             	mov    0x74(%eax),%eax
f0116712:	83 f8 14             	cmp    $0x14,%eax
f0116715:	75 16                	jne    f011672d <test_priority_normal_and_higher+0x50f>
f0116717:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011671a:	8b 40 74             	mov    0x74(%eax),%eax
f011671d:	83 f8 0f             	cmp    $0xf,%eax
f0116720:	75 0b                	jne    f011672d <test_priority_normal_and_higher+0x50f>
f0116722:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116725:	8b 40 74             	mov    0x74(%eax),%eax
f0116728:	83 f8 14             	cmp    $0x14,%eax
f011672b:	74 14                	je     f0116741 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f011672d:	83 ec 04             	sub    $0x4,%esp
f0116730:	68 70 ad 13 f0       	push   $0xf013ad70
f0116735:	6a 74                	push   $0x74
f0116737:	68 11 ac 13 f0       	push   $0xf013ac11
f011673c:	e8 c4 9a fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116741:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116748:	eb 1b                	jmp    f0116765 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011674a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011674d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116750:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116753:	89 d0                	mov    %edx,%eax
f0116755:	01 c0                	add    %eax,%eax
f0116757:	01 d0                	add    %edx,%eax
f0116759:	c1 e0 03             	shl    $0x3,%eax
f011675c:	01 c8                	add    %ecx,%eax
f011675e:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116762:	ff 45 d4             	incl   -0x2c(%ebp)
f0116765:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116769:	7e df                	jle    f011674a <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011676b:	e8 2d 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116770:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116773:	e8 50 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116778:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011677b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011677e:	83 ec 08             	sub    $0x8,%esp
f0116781:	6a 05                	push   $0x5
f0116783:	50                   	push   %eax
f0116784:	e8 5f 48 ff ff       	call   f010afe8 <set_program_priority>
f0116789:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011678c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011678f:	83 ec 08             	sub    $0x8,%esp
f0116792:	6a 05                	push   $0x5
f0116794:	50                   	push   %eax
f0116795:	e8 4e 48 ff ff       	call   f010afe8 <set_program_priority>
f011679a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011679d:	e8 26 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01167a2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01167a5:	74 14                	je     f01167bb <test_priority_normal_and_higher+0x59d>
f01167a7:	83 ec 04             	sub    $0x4,%esp
f01167aa:	68 78 ac 13 f0       	push   $0xf013ac78
f01167af:	6a 7f                	push   $0x7f
f01167b1:	68 11 ac 13 f0       	push   $0xf013ac11
f01167b6:	e8 4a 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01167bb:	e8 dd 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01167c0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01167c3:	74 17                	je     f01167dc <test_priority_normal_and_higher+0x5be>
f01167c5:	83 ec 04             	sub    $0x4,%esp
f01167c8:	68 78 ac 13 f0       	push   $0xf013ac78
f01167cd:	68 80 00 00 00       	push   $0x80
f01167d2:	68 11 ac 13 f0       	push   $0xf013ac11
f01167d7:	e8 29 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01167dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167df:	8b 40 74             	mov    0x74(%eax),%eax
f01167e2:	83 f8 14             	cmp    $0x14,%eax
f01167e5:	75 16                	jne    f01167fd <test_priority_normal_and_higher+0x5df>
f01167e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167ea:	8b 40 74             	mov    0x74(%eax),%eax
f01167ed:	83 f8 1e             	cmp    $0x1e,%eax
f01167f0:	75 0b                	jne    f01167fd <test_priority_normal_and_higher+0x5df>
f01167f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167f5:	8b 40 74             	mov    0x74(%eax),%eax
f01167f8:	83 f8 28             	cmp    $0x28,%eax
f01167fb:	74 17                	je     f0116814 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01167fd:	83 ec 04             	sub    $0x4,%esp
f0116800:	68 ac ad 13 f0       	push   $0xf013adac
f0116805:	68 83 00 00 00       	push   $0x83
f011680a:	68 11 ac 13 f0       	push   $0xf013ac11
f011680f:	e8 f1 99 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116814:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011681b:	eb 1b                	jmp    f0116838 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011681d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116820:	8b 48 78             	mov    0x78(%eax),%ecx
f0116823:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116826:	89 d0                	mov    %edx,%eax
f0116828:	01 c0                	add    %eax,%eax
f011682a:	01 d0                	add    %edx,%eax
f011682c:	c1 e0 03             	shl    $0x3,%eax
f011682f:	01 c8                	add    %ecx,%eax
f0116831:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116835:	ff 45 d0             	incl   -0x30(%ebp)
f0116838:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f011683c:	7e df                	jle    f011681d <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011683e:	e8 5a 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116843:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116846:	e8 7d d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011684b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011684e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116851:	83 ec 08             	sub    $0x8,%esp
f0116854:	6a 05                	push   $0x5
f0116856:	50                   	push   %eax
f0116857:	e8 8c 47 ff ff       	call   f010afe8 <set_program_priority>
f011685c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011685f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116862:	83 ec 08             	sub    $0x8,%esp
f0116865:	6a 04                	push   $0x4
f0116867:	50                   	push   %eax
f0116868:	e8 7b 47 ff ff       	call   f010afe8 <set_program_priority>
f011686d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116870:	e8 53 d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116875:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116878:	74 17                	je     f0116891 <test_priority_normal_and_higher+0x673>
f011687a:	83 ec 04             	sub    $0x4,%esp
f011687d:	68 78 ac 13 f0       	push   $0xf013ac78
f0116882:	68 8e 00 00 00       	push   $0x8e
f0116887:	68 11 ac 13 f0       	push   $0xf013ac11
f011688c:	e8 74 99 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116891:	e8 07 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116896:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116899:	74 17                	je     f01168b2 <test_priority_normal_and_higher+0x694>
f011689b:	83 ec 04             	sub    $0x4,%esp
f011689e:	68 78 ac 13 f0       	push   $0xf013ac78
f01168a3:	68 8f 00 00 00       	push   $0x8f
f01168a8:	68 11 ac 13 f0       	push   $0xf013ac11
f01168ad:	e8 53 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01168b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168b5:	8b 40 74             	mov    0x74(%eax),%eax
f01168b8:	83 f8 14             	cmp    $0x14,%eax
f01168bb:	75 16                	jne    f01168d3 <test_priority_normal_and_higher+0x6b5>
f01168bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168c0:	8b 40 74             	mov    0x74(%eax),%eax
f01168c3:	83 f8 1e             	cmp    $0x1e,%eax
f01168c6:	75 0b                	jne    f01168d3 <test_priority_normal_and_higher+0x6b5>
f01168c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168cb:	8b 40 74             	mov    0x74(%eax),%eax
f01168ce:	83 f8 28             	cmp    $0x28,%eax
f01168d1:	74 17                	je     f01168ea <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01168d3:	83 ec 04             	sub    $0x4,%esp
f01168d6:	68 ac ad 13 f0       	push   $0xf013adac
f01168db:	68 92 00 00 00       	push   $0x92
f01168e0:	68 11 ac 13 f0       	push   $0xf013ac11
f01168e5:	e8 1b 99 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01168ea:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01168f1:	eb 1b                	jmp    f011690e <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01168f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168f6:	8b 48 78             	mov    0x78(%eax),%ecx
f01168f9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01168fc:	89 d0                	mov    %edx,%eax
f01168fe:	01 c0                	add    %eax,%eax
f0116900:	01 d0                	add    %edx,%eax
f0116902:	c1 e0 03             	shl    $0x3,%eax
f0116905:	01 c8                	add    %ecx,%eax
f0116907:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011690b:	ff 45 cc             	incl   -0x34(%ebp)
f011690e:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116912:	7e df                	jle    f01168f3 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116914:	e8 84 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116919:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011691c:	e8 a7 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116921:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116924:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116927:	83 ec 08             	sub    $0x8,%esp
f011692a:	6a 05                	push   $0x5
f011692c:	50                   	push   %eax
f011692d:	e8 b6 46 ff ff       	call   f010afe8 <set_program_priority>
f0116932:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116935:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116938:	83 ec 08             	sub    $0x8,%esp
f011693b:	6a 04                	push   $0x4
f011693d:	50                   	push   %eax
f011693e:	e8 a5 46 ff ff       	call   f010afe8 <set_program_priority>
f0116943:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116946:	e8 7d d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011694b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011694e:	74 17                	je     f0116967 <test_priority_normal_and_higher+0x749>
f0116950:	83 ec 04             	sub    $0x4,%esp
f0116953:	68 78 ac 13 f0       	push   $0xf013ac78
f0116958:	68 9d 00 00 00       	push   $0x9d
f011695d:	68 11 ac 13 f0       	push   $0xf013ac11
f0116962:	e8 9e 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116967:	e8 31 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011696c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011696f:	74 17                	je     f0116988 <test_priority_normal_and_higher+0x76a>
f0116971:	83 ec 04             	sub    $0x4,%esp
f0116974:	68 78 ac 13 f0       	push   $0xf013ac78
f0116979:	68 9e 00 00 00       	push   $0x9e
f011697e:	68 11 ac 13 f0       	push   $0xf013ac11
f0116983:	e8 7d 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116988:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011698b:	8b 40 74             	mov    0x74(%eax),%eax
f011698e:	83 f8 14             	cmp    $0x14,%eax
f0116991:	75 16                	jne    f01169a9 <test_priority_normal_and_higher+0x78b>
f0116993:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116996:	8b 40 74             	mov    0x74(%eax),%eax
f0116999:	83 f8 3c             	cmp    $0x3c,%eax
f011699c:	75 0b                	jne    f01169a9 <test_priority_normal_and_higher+0x78b>
f011699e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169a1:	8b 40 74             	mov    0x74(%eax),%eax
f01169a4:	83 f8 28             	cmp    $0x28,%eax
f01169a7:	74 17                	je     f01169c0 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f01169a9:	83 ec 04             	sub    $0x4,%esp
f01169ac:	68 ac ad 13 f0       	push   $0xf013adac
f01169b1:	68 a1 00 00 00       	push   $0xa1
f01169b6:	68 11 ac 13 f0       	push   $0xf013ac11
f01169bb:	e8 45 98 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f01169c0:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01169c7:	eb 1b                	jmp    f01169e4 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01169c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169cc:	8b 48 78             	mov    0x78(%eax),%ecx
f01169cf:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01169d2:	89 d0                	mov    %edx,%eax
f01169d4:	01 c0                	add    %eax,%eax
f01169d6:	01 d0                	add    %edx,%eax
f01169d8:	c1 e0 03             	shl    $0x3,%eax
f01169db:	01 c8                	add    %ecx,%eax
f01169dd:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01169e1:	ff 45 c8             	incl   -0x38(%ebp)
f01169e4:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01169e8:	7e df                	jle    f01169c9 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01169ea:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01169f1:	eb 1b                	jmp    f0116a0e <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01169f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169f6:	8b 48 78             	mov    0x78(%eax),%ecx
f01169f9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01169fc:	89 d0                	mov    %edx,%eax
f01169fe:	01 c0                	add    %eax,%eax
f0116a00:	01 d0                	add    %edx,%eax
f0116a02:	c1 e0 03             	shl    $0x3,%eax
f0116a05:	01 c8                	add    %ecx,%eax
f0116a07:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116a0b:	ff 45 c4             	incl   -0x3c(%ebp)
f0116a0e:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116a12:	7e df                	jle    f01169f3 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116a14:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116a1b:	eb 7a                	jmp    f0116a97 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a20:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116a27:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a2a:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a2d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a30:	89 d0                	mov    %edx,%eax
f0116a32:	01 c0                	add    %eax,%eax
f0116a34:	01 d0                	add    %edx,%eax
f0116a36:	c1 e0 03             	shl    $0x3,%eax
f0116a39:	01 d8                	add    %ebx,%eax
f0116a3b:	8b 00                	mov    (%eax),%eax
f0116a3d:	39 c1                	cmp    %eax,%ecx
f0116a3f:	74 17                	je     f0116a58 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116a41:	83 ec 04             	sub    $0x4,%esp
f0116a44:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116a49:	68 af 00 00 00       	push   $0xaf
f0116a4e:	68 11 ac 13 f0       	push   $0xf013ac11
f0116a53:	e8 ad 97 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a58:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a5b:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116a62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a65:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a68:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a6b:	89 d0                	mov    %edx,%eax
f0116a6d:	01 c0                	add    %eax,%eax
f0116a6f:	01 d0                	add    %edx,%eax
f0116a71:	c1 e0 03             	shl    $0x3,%eax
f0116a74:	01 d8                	add    %ebx,%eax
f0116a76:	8b 40 08             	mov    0x8(%eax),%eax
f0116a79:	39 c1                	cmp    %eax,%ecx
f0116a7b:	74 17                	je     f0116a94 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116a7d:	83 ec 04             	sub    $0x4,%esp
f0116a80:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116a85:	68 b2 00 00 00       	push   $0xb2
f0116a8a:	68 11 ac 13 f0       	push   $0xf013ac11
f0116a8f:	e8 71 97 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116a94:	ff 45 c0             	incl   -0x40(%ebp)
f0116a97:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116a9b:	7e 80                	jle    f0116a1d <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116a9d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116aa4:	eb 7a                	jmp    f0116b20 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116aa6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116aa9:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116ab0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ab3:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ab6:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116ab9:	89 d0                	mov    %edx,%eax
f0116abb:	01 c0                	add    %eax,%eax
f0116abd:	01 d0                	add    %edx,%eax
f0116abf:	c1 e0 03             	shl    $0x3,%eax
f0116ac2:	01 d8                	add    %ebx,%eax
f0116ac4:	8b 00                	mov    (%eax),%eax
f0116ac6:	39 c1                	cmp    %eax,%ecx
f0116ac8:	74 17                	je     f0116ae1 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116aca:	83 ec 04             	sub    $0x4,%esp
f0116acd:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116ad2:	68 b8 00 00 00       	push   $0xb8
f0116ad7:	68 11 ac 13 f0       	push   $0xf013ac11
f0116adc:	e8 24 97 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ae1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116ae4:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116aeb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116aee:	8b 58 78             	mov    0x78(%eax),%ebx
f0116af1:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116af4:	89 d0                	mov    %edx,%eax
f0116af6:	01 c0                	add    %eax,%eax
f0116af8:	01 d0                	add    %edx,%eax
f0116afa:	c1 e0 03             	shl    $0x3,%eax
f0116afd:	01 d8                	add    %ebx,%eax
f0116aff:	8b 40 08             	mov    0x8(%eax),%eax
f0116b02:	39 c1                	cmp    %eax,%ecx
f0116b04:	74 17                	je     f0116b1d <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116b06:	83 ec 04             	sub    $0x4,%esp
f0116b09:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116b0e:	68 bb 00 00 00       	push   $0xbb
f0116b13:	68 11 ac 13 f0       	push   $0xf013ac11
f0116b18:	e8 e8 96 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116b1d:	ff 45 bc             	incl   -0x44(%ebp)
f0116b20:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116b24:	7e 80                	jle    f0116aa6 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116b26:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116b2d:	eb 7a                	jmp    f0116ba9 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b2f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b32:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116b39:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b3c:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b3f:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116b42:	89 d0                	mov    %edx,%eax
f0116b44:	01 c0                	add    %eax,%eax
f0116b46:	01 d0                	add    %edx,%eax
f0116b48:	c1 e0 03             	shl    $0x3,%eax
f0116b4b:	01 d8                	add    %ebx,%eax
f0116b4d:	8b 00                	mov    (%eax),%eax
f0116b4f:	39 c1                	cmp    %eax,%ecx
f0116b51:	74 17                	je     f0116b6a <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116b53:	83 ec 04             	sub    $0x4,%esp
f0116b56:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116b5b:	68 c1 00 00 00       	push   $0xc1
f0116b60:	68 11 ac 13 f0       	push   $0xf013ac11
f0116b65:	e8 9b 96 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116b6a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b6d:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116b74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b77:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b7a:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116b7d:	89 d0                	mov    %edx,%eax
f0116b7f:	01 c0                	add    %eax,%eax
f0116b81:	01 d0                	add    %edx,%eax
f0116b83:	c1 e0 03             	shl    $0x3,%eax
f0116b86:	01 d8                	add    %ebx,%eax
f0116b88:	8b 40 08             	mov    0x8(%eax),%eax
f0116b8b:	39 c1                	cmp    %eax,%ecx
f0116b8d:	74 17                	je     f0116ba6 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116b8f:	83 ec 04             	sub    $0x4,%esp
f0116b92:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116b97:	68 c4 00 00 00       	push   $0xc4
f0116b9c:	68 11 ac 13 f0       	push   $0xf013ac11
f0116ba1:	e8 5f 96 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116ba6:	ff 45 b8             	incl   -0x48(%ebp)
f0116ba9:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116bad:	7e 80                	jle    f0116b2f <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116baf:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116bb6:	75 6e 61 
f0116bb9:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116bc0:	6c 00 00 
f0116bc3:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116bc9:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116bce:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bd3:	89 d7                	mov    %edx,%edi
f0116bd5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116bd7:	83 ec 0c             	sub    $0xc,%esp
f0116bda:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116be0:	50                   	push   %eax
f0116be1:	e8 8a a1 fe ff       	call   f0100d70 <execute_command>
f0116be6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116be9:	eb 10                	jmp    f0116bfb <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116beb:	83 ec 0c             	sub    $0xc,%esp
f0116bee:	68 1c ae 13 f0       	push   $0xf013ae1c
f0116bf3:	e8 16 a1 fe ff       	call   f0100d0e <cprintf>
f0116bf8:	83 c4 10             	add    $0x10,%esp
	}
}
f0116bfb:	90                   	nop
f0116bfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116bff:	5b                   	pop    %ebx
f0116c00:	5e                   	pop    %esi
f0116c01:	5f                   	pop    %edi
f0116c02:	5d                   	pop    %ebp
f0116c03:	c3                   	ret    

f0116c04 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116c04:	55                   	push   %ebp
f0116c05:	89 e5                	mov    %esp,%ebp
f0116c07:	57                   	push   %edi
f0116c08:	56                   	push   %esi
f0116c09:	53                   	push   %ebx
f0116c0a:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116c10:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0116c15:	84 c0                	test   %al,%al
f0116c17:	0f 84 be 09 00 00    	je     f01175db <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116c1d:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0116c24:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116c2a:	bb 58 ae 13 f0       	mov    $0xf013ae58,%ebx
f0116c2f:	ba 04 00 00 00       	mov    $0x4,%edx
f0116c34:	89 c7                	mov    %eax,%edi
f0116c36:	89 de                	mov    %ebx,%esi
f0116c38:	89 d1                	mov    %edx,%ecx
f0116c3a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116c3c:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116c42:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116c47:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c4c:	89 d7                	mov    %edx,%edi
f0116c4e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116c50:	83 ec 0c             	sub    $0xc,%esp
f0116c53:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116c59:	50                   	push   %eax
f0116c5a:	e8 11 a1 fe ff       	call   f0100d70 <execute_command>
f0116c5f:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116c62:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116c68:	bb 14 b1 13 f0       	mov    $0xf013b114,%ebx
f0116c6d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116c72:	89 c7                	mov    %eax,%edi
f0116c74:	89 de                	mov    %ebx,%esi
f0116c76:	89 d1                	mov    %edx,%ecx
f0116c78:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c7a:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116c80:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116c85:	b0 00                	mov    $0x0,%al
f0116c87:	89 d7                	mov    %edx,%edi
f0116c89:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116c8b:	83 ec 0c             	sub    $0xc,%esp
f0116c8e:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116c94:	50                   	push   %eax
f0116c95:	e8 d6 a0 fe ff       	call   f0100d70 <execute_command>
f0116c9a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116c9d:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116ca3:	bb 78 b1 13 f0       	mov    $0xf013b178,%ebx
f0116ca8:	ba 17 00 00 00       	mov    $0x17,%edx
f0116cad:	89 c7                	mov    %eax,%edi
f0116caf:	89 de                	mov    %ebx,%esi
f0116cb1:	89 d1                	mov    %edx,%ecx
f0116cb3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116cb5:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116cbb:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116cc0:	b0 00                	mov    $0x0,%al
f0116cc2:	89 d7                	mov    %edx,%edi
f0116cc4:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116cc6:	83 ec 0c             	sub    $0xc,%esp
f0116cc9:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116ccf:	50                   	push   %eax
f0116cd0:	e8 9b a0 fe ff       	call   f0100d70 <execute_command>
f0116cd5:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116cd8:	83 ec 04             	sub    $0x4,%esp
f0116cdb:	6a 00                	push   $0x0
f0116cdd:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116ce0:	50                   	push   %eax
f0116ce1:	68 00 10 00 00       	push   $0x1000
f0116ce6:	e8 1f 2e ff ff       	call   f0109b0a <envid2env>
f0116ceb:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116cee:	83 ec 04             	sub    $0x4,%esp
f0116cf1:	6a 00                	push   $0x0
f0116cf3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116cf6:	50                   	push   %eax
f0116cf7:	68 01 10 00 00       	push   $0x1001
f0116cfc:	e8 09 2e ff ff       	call   f0109b0a <envid2env>
f0116d01:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116d04:	83 ec 04             	sub    $0x4,%esp
f0116d07:	6a 00                	push   $0x0
f0116d09:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116d0c:	50                   	push   %eax
f0116d0d:	68 02 10 00 00       	push   $0x1002
f0116d12:	e8 f3 2d ff ff       	call   f0109b0a <envid2env>
f0116d17:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116d1a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d1d:	85 c0                	test   %eax,%eax
f0116d1f:	74 0e                	je     f0116d2f <test_priority_normal_and_lower+0x12b>
f0116d21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d24:	85 c0                	test   %eax,%eax
f0116d26:	74 07                	je     f0116d2f <test_priority_normal_and_lower+0x12b>
f0116d28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d2b:	85 c0                	test   %eax,%eax
f0116d2d:	75 17                	jne    f0116d46 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116d2f:	83 ec 04             	sub    $0x4,%esp
f0116d32:	68 f8 ab 13 f0       	push   $0xf013abf8
f0116d37:	68 eb 00 00 00       	push   $0xeb
f0116d3c:	68 11 ac 13 f0       	push   $0xf013ac11
f0116d41:	e8 bf 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116d46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d49:	8b 40 74             	mov    0x74(%eax),%eax
f0116d4c:	83 f8 14             	cmp    $0x14,%eax
f0116d4f:	75 16                	jne    f0116d67 <test_priority_normal_and_lower+0x163>
f0116d51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d54:	8b 40 74             	mov    0x74(%eax),%eax
f0116d57:	83 f8 1e             	cmp    $0x1e,%eax
f0116d5a:	75 0b                	jne    f0116d67 <test_priority_normal_and_lower+0x163>
f0116d5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d5f:	8b 40 74             	mov    0x74(%eax),%eax
f0116d62:	83 f8 28             	cmp    $0x28,%eax
f0116d65:	74 17                	je     f0116d7e <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116d67:	83 ec 04             	sub    $0x4,%esp
f0116d6a:	68 2c ac 13 f0       	push   $0xf013ac2c
f0116d6f:	68 ee 00 00 00       	push   $0xee
f0116d74:	68 11 ac 13 f0       	push   $0xf013ac11
f0116d79:	e8 87 94 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116d7e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116d85:	eb 44                	jmp    f0116dcb <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d8a:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116d90:	89 d0                	mov    %edx,%eax
f0116d92:	01 c0                	add    %eax,%eax
f0116d94:	01 d0                	add    %edx,%eax
f0116d96:	c1 e0 03             	shl    $0x3,%eax
f0116d99:	01 c8                	add    %ecx,%eax
f0116d9b:	8b 10                	mov    (%eax),%edx
f0116d9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116da0:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116da7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116daa:	8b 48 78             	mov    0x78(%eax),%ecx
f0116dad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116db0:	89 d0                	mov    %edx,%eax
f0116db2:	01 c0                	add    %eax,%eax
f0116db4:	01 d0                	add    %edx,%eax
f0116db6:	c1 e0 03             	shl    $0x3,%eax
f0116db9:	01 c8                	add    %ecx,%eax
f0116dbb:	8b 50 08             	mov    0x8(%eax),%edx
f0116dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116dc1:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116dc8:	ff 45 e4             	incl   -0x1c(%ebp)
f0116dcb:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116dcf:	7e b6                	jle    f0116d87 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116dd1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116dd8:	eb 44                	jmp    f0116e1e <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116dda:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ddd:	8b 48 78             	mov    0x78(%eax),%ecx
f0116de0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116de3:	89 d0                	mov    %edx,%eax
f0116de5:	01 c0                	add    %eax,%eax
f0116de7:	01 d0                	add    %edx,%eax
f0116de9:	c1 e0 03             	shl    $0x3,%eax
f0116dec:	01 c8                	add    %ecx,%eax
f0116dee:	8b 10                	mov    (%eax),%edx
f0116df0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116df3:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116dfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dfd:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e00:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116e03:	89 d0                	mov    %edx,%eax
f0116e05:	01 c0                	add    %eax,%eax
f0116e07:	01 d0                	add    %edx,%eax
f0116e09:	c1 e0 03             	shl    $0x3,%eax
f0116e0c:	01 c8                	add    %ecx,%eax
f0116e0e:	8b 50 08             	mov    0x8(%eax),%edx
f0116e11:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116e14:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116e1b:	ff 45 e0             	incl   -0x20(%ebp)
f0116e1e:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116e22:	7e b6                	jle    f0116dda <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116e24:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116e2b:	eb 44                	jmp    f0116e71 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116e2d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e30:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e33:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e36:	89 d0                	mov    %edx,%eax
f0116e38:	01 c0                	add    %eax,%eax
f0116e3a:	01 d0                	add    %edx,%eax
f0116e3c:	c1 e0 03             	shl    $0x3,%eax
f0116e3f:	01 c8                	add    %ecx,%eax
f0116e41:	8b 10                	mov    (%eax),%edx
f0116e43:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e46:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116e4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e50:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e53:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e56:	89 d0                	mov    %edx,%eax
f0116e58:	01 c0                	add    %eax,%eax
f0116e5a:	01 d0                	add    %edx,%eax
f0116e5c:	c1 e0 03             	shl    $0x3,%eax
f0116e5f:	01 c8                	add    %ecx,%eax
f0116e61:	8b 50 08             	mov    0x8(%eax),%edx
f0116e64:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e67:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116e6e:	ff 45 dc             	incl   -0x24(%ebp)
f0116e71:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116e75:	7e b6                	jle    f0116e2d <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116e77:	e8 21 5d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116e7c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116e7f:	e8 44 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116e84:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116e87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e8a:	83 ec 08             	sub    $0x8,%esp
f0116e8d:	6a 03                	push   $0x3
f0116e8f:	50                   	push   %eax
f0116e90:	e8 53 41 ff ff       	call   f010afe8 <set_program_priority>
f0116e95:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116e98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e9b:	83 ec 08             	sub    $0x8,%esp
f0116e9e:	6a 03                	push   $0x3
f0116ea0:	50                   	push   %eax
f0116ea1:	e8 42 41 ff ff       	call   f010afe8 <set_program_priority>
f0116ea6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116ea9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116eac:	83 ec 08             	sub    $0x8,%esp
f0116eaf:	6a 03                	push   $0x3
f0116eb1:	50                   	push   %eax
f0116eb2:	e8 31 41 ff ff       	call   f010afe8 <set_program_priority>
f0116eb7:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116eba:	e8 09 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116ebf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116ec2:	74 17                	je     f0116edb <test_priority_normal_and_lower+0x2d7>
f0116ec4:	83 ec 04             	sub    $0x4,%esp
f0116ec7:	68 78 ac 13 f0       	push   $0xf013ac78
f0116ecc:	68 0a 01 00 00       	push   $0x10a
f0116ed1:	68 11 ac 13 f0       	push   $0xf013ac11
f0116ed6:	e8 2a 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116edb:	e8 bd 5c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116ee0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116ee3:	74 17                	je     f0116efc <test_priority_normal_and_lower+0x2f8>
f0116ee5:	83 ec 04             	sub    $0x4,%esp
f0116ee8:	68 78 ac 13 f0       	push   $0xf013ac78
f0116eed:	68 0b 01 00 00       	push   $0x10b
f0116ef2:	68 11 ac 13 f0       	push   $0xf013ac11
f0116ef7:	e8 09 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116efc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116eff:	8b 40 74             	mov    0x74(%eax),%eax
f0116f02:	83 f8 14             	cmp    $0x14,%eax
f0116f05:	75 16                	jne    f0116f1d <test_priority_normal_and_lower+0x319>
f0116f07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f0a:	8b 40 74             	mov    0x74(%eax),%eax
f0116f0d:	83 f8 1e             	cmp    $0x1e,%eax
f0116f10:	75 0b                	jne    f0116f1d <test_priority_normal_and_lower+0x319>
f0116f12:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f15:	8b 40 74             	mov    0x74(%eax),%eax
f0116f18:	83 f8 28             	cmp    $0x28,%eax
f0116f1b:	74 17                	je     f0116f34 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116f1d:	83 ec 04             	sub    $0x4,%esp
f0116f20:	68 a4 ac 13 f0       	push   $0xf013aca4
f0116f25:	68 0e 01 00 00       	push   $0x10e
f0116f2a:	68 11 ac 13 f0       	push   $0xf013ac11
f0116f2f:	e8 d1 92 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116f34:	e8 64 5c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116f39:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f3c:	e8 87 ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f41:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116f44:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f47:	83 ec 08             	sub    $0x8,%esp
f0116f4a:	6a 02                	push   $0x2
f0116f4c:	50                   	push   %eax
f0116f4d:	e8 96 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f52:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116f55:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f58:	83 ec 08             	sub    $0x8,%esp
f0116f5b:	6a 02                	push   $0x2
f0116f5d:	50                   	push   %eax
f0116f5e:	e8 85 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f63:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116f66:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f69:	83 ec 08             	sub    $0x8,%esp
f0116f6c:	6a 02                	push   $0x2
f0116f6e:	50                   	push   %eax
f0116f6f:	e8 74 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f74:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f77:	e8 4c ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f7c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116f7f:	74 17                	je     f0116f98 <test_priority_normal_and_lower+0x394>
f0116f81:	83 ec 04             	sub    $0x4,%esp
f0116f84:	68 78 ac 13 f0       	push   $0xf013ac78
f0116f89:	68 18 01 00 00       	push   $0x118
f0116f8e:	68 11 ac 13 f0       	push   $0xf013ac11
f0116f93:	e8 6d 92 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116f98:	e8 00 5c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116f9d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116fa0:	74 21                	je     f0116fc3 <test_priority_normal_and_lower+0x3bf>
f0116fa2:	e8 f6 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116fa7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116faa:	29 c2                	sub    %eax,%edx
f0116fac:	89 d0                	mov    %edx,%eax
f0116fae:	50                   	push   %eax
f0116faf:	68 f8 ac 13 f0       	push   $0xf013acf8
f0116fb4:	68 19 01 00 00       	push   $0x119
f0116fb9:	68 11 ac 13 f0       	push   $0xf013ac11
f0116fbe:	e8 42 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116fc3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116fc6:	8b 40 74             	mov    0x74(%eax),%eax
f0116fc9:	83 f8 0a             	cmp    $0xa,%eax
f0116fcc:	75 16                	jne    f0116fe4 <test_priority_normal_and_lower+0x3e0>
f0116fce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116fd1:	8b 40 74             	mov    0x74(%eax),%eax
f0116fd4:	83 f8 0f             	cmp    $0xf,%eax
f0116fd7:	75 0b                	jne    f0116fe4 <test_priority_normal_and_lower+0x3e0>
f0116fd9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fdc:	8b 40 74             	mov    0x74(%eax),%eax
f0116fdf:	83 f8 14             	cmp    $0x14,%eax
f0116fe2:	74 17                	je     f0116ffb <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116fe4:	83 ec 04             	sub    $0x4,%esp
f0116fe7:	68 28 ad 13 f0       	push   $0xf013ad28
f0116fec:	68 1c 01 00 00       	push   $0x11c
f0116ff1:	68 11 ac 13 f0       	push   $0xf013ac11
f0116ff6:	e8 0a 92 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ffb:	e8 9d 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117000:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117003:	e8 c0 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117008:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011700b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011700e:	83 ec 08             	sub    $0x8,%esp
f0117011:	6a 02                	push   $0x2
f0117013:	50                   	push   %eax
f0117014:	e8 cf 3f ff ff       	call   f010afe8 <set_program_priority>
f0117019:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011701c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011701f:	83 ec 08             	sub    $0x8,%esp
f0117022:	6a 02                	push   $0x2
f0117024:	50                   	push   %eax
f0117025:	e8 be 3f ff ff       	call   f010afe8 <set_program_priority>
f011702a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011702d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117030:	83 ec 08             	sub    $0x8,%esp
f0117033:	6a 02                	push   $0x2
f0117035:	50                   	push   %eax
f0117036:	e8 ad 3f ff ff       	call   f010afe8 <set_program_priority>
f011703b:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011703e:	e8 85 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117043:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117046:	74 17                	je     f011705f <test_priority_normal_and_lower+0x45b>
f0117048:	83 ec 04             	sub    $0x4,%esp
f011704b:	68 78 ac 13 f0       	push   $0xf013ac78
f0117050:	68 26 01 00 00       	push   $0x126
f0117055:	68 11 ac 13 f0       	push   $0xf013ac11
f011705a:	e8 a6 91 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011705f:	e8 39 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117064:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117067:	74 21                	je     f011708a <test_priority_normal_and_lower+0x486>
f0117069:	e8 2f 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011706e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117071:	29 c2                	sub    %eax,%edx
f0117073:	89 d0                	mov    %edx,%eax
f0117075:	50                   	push   %eax
f0117076:	68 f8 ac 13 f0       	push   $0xf013acf8
f011707b:	68 27 01 00 00       	push   $0x127
f0117080:	68 11 ac 13 f0       	push   $0xf013ac11
f0117085:	e8 7b 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011708a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011708d:	8b 40 74             	mov    0x74(%eax),%eax
f0117090:	83 f8 0a             	cmp    $0xa,%eax
f0117093:	75 16                	jne    f01170ab <test_priority_normal_and_lower+0x4a7>
f0117095:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117098:	8b 40 74             	mov    0x74(%eax),%eax
f011709b:	83 f8 0f             	cmp    $0xf,%eax
f011709e:	75 0b                	jne    f01170ab <test_priority_normal_and_lower+0x4a7>
f01170a0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170a3:	8b 40 74             	mov    0x74(%eax),%eax
f01170a6:	83 f8 0a             	cmp    $0xa,%eax
f01170a9:	74 17                	je     f01170c2 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f01170ab:	83 ec 04             	sub    $0x4,%esp
f01170ae:	68 28 ad 13 f0       	push   $0xf013ad28
f01170b3:	68 2a 01 00 00       	push   $0x12a
f01170b8:	68 11 ac 13 f0       	push   $0xf013ac11
f01170bd:	e8 43 91 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f01170c2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01170c9:	eb 7a                	jmp    f0117145 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01170cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01170ce:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01170d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170d8:	8b 58 78             	mov    0x78(%eax),%ebx
f01170db:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01170de:	89 d0                	mov    %edx,%eax
f01170e0:	01 c0                	add    %eax,%eax
f01170e2:	01 d0                	add    %edx,%eax
f01170e4:	c1 e0 03             	shl    $0x3,%eax
f01170e7:	01 d8                	add    %ebx,%eax
f01170e9:	8b 00                	mov    (%eax),%eax
f01170eb:	39 c1                	cmp    %eax,%ecx
f01170ed:	74 17                	je     f0117106 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01170ef:	83 ec 04             	sub    $0x4,%esp
f01170f2:	68 e8 ad 13 f0       	push   $0xf013ade8
f01170f7:	68 2f 01 00 00       	push   $0x12f
f01170fc:	68 11 ac 13 f0       	push   $0xf013ac11
f0117101:	e8 ff 90 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117106:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117109:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117110:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117113:	8b 58 78             	mov    0x78(%eax),%ebx
f0117116:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117119:	89 d0                	mov    %edx,%eax
f011711b:	01 c0                	add    %eax,%eax
f011711d:	01 d0                	add    %edx,%eax
f011711f:	c1 e0 03             	shl    $0x3,%eax
f0117122:	01 d8                	add    %ebx,%eax
f0117124:	8b 40 08             	mov    0x8(%eax),%eax
f0117127:	39 c1                	cmp    %eax,%ecx
f0117129:	74 17                	je     f0117142 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f011712b:	83 ec 04             	sub    $0x4,%esp
f011712e:	68 e8 ad 13 f0       	push   $0xf013ade8
f0117133:	68 32 01 00 00       	push   $0x132
f0117138:	68 11 ac 13 f0       	push   $0xf013ac11
f011713d:	e8 c3 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117142:	ff 45 d8             	incl   -0x28(%ebp)
f0117145:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117149:	7e 80                	jle    f01170cb <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011714b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117152:	eb 7a                	jmp    f01171ce <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117154:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117157:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011715e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117161:	8b 58 78             	mov    0x78(%eax),%ebx
f0117164:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117167:	89 d0                	mov    %edx,%eax
f0117169:	01 c0                	add    %eax,%eax
f011716b:	01 d0                	add    %edx,%eax
f011716d:	c1 e0 03             	shl    $0x3,%eax
f0117170:	01 d8                	add    %ebx,%eax
f0117172:	8b 00                	mov    (%eax),%eax
f0117174:	39 c1                	cmp    %eax,%ecx
f0117176:	74 17                	je     f011718f <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117178:	83 ec 04             	sub    $0x4,%esp
f011717b:	68 e8 ad 13 f0       	push   $0xf013ade8
f0117180:	68 38 01 00 00       	push   $0x138
f0117185:	68 11 ac 13 f0       	push   $0xf013ac11
f011718a:	e8 76 90 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011718f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117192:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117199:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011719c:	8b 58 78             	mov    0x78(%eax),%ebx
f011719f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01171a2:	89 d0                	mov    %edx,%eax
f01171a4:	01 c0                	add    %eax,%eax
f01171a6:	01 d0                	add    %edx,%eax
f01171a8:	c1 e0 03             	shl    $0x3,%eax
f01171ab:	01 d8                	add    %ebx,%eax
f01171ad:	8b 40 08             	mov    0x8(%eax),%eax
f01171b0:	39 c1                	cmp    %eax,%ecx
f01171b2:	74 17                	je     f01171cb <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f01171b4:	83 ec 04             	sub    $0x4,%esp
f01171b7:	68 e8 ad 13 f0       	push   $0xf013ade8
f01171bc:	68 3b 01 00 00       	push   $0x13b
f01171c1:	68 11 ac 13 f0       	push   $0xf013ac11
f01171c6:	e8 3a 90 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01171cb:	ff 45 d4             	incl   -0x2c(%ebp)
f01171ce:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01171d2:	7e 80                	jle    f0117154 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01171d4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01171db:	eb 7a                	jmp    f0117257 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01171dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01171e0:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01171e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171ea:	8b 58 78             	mov    0x78(%eax),%ebx
f01171ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01171f0:	89 d0                	mov    %edx,%eax
f01171f2:	01 c0                	add    %eax,%eax
f01171f4:	01 d0                	add    %edx,%eax
f01171f6:	c1 e0 03             	shl    $0x3,%eax
f01171f9:	01 d8                	add    %ebx,%eax
f01171fb:	8b 00                	mov    (%eax),%eax
f01171fd:	39 c1                	cmp    %eax,%ecx
f01171ff:	74 17                	je     f0117218 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117201:	83 ec 04             	sub    $0x4,%esp
f0117204:	68 e8 ad 13 f0       	push   $0xf013ade8
f0117209:	68 41 01 00 00       	push   $0x141
f011720e:	68 11 ac 13 f0       	push   $0xf013ac11
f0117213:	e8 ed 8f fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117218:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011721b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117222:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117225:	8b 58 78             	mov    0x78(%eax),%ebx
f0117228:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011722b:	89 d0                	mov    %edx,%eax
f011722d:	01 c0                	add    %eax,%eax
f011722f:	01 d0                	add    %edx,%eax
f0117231:	c1 e0 03             	shl    $0x3,%eax
f0117234:	01 d8                	add    %ebx,%eax
f0117236:	8b 40 08             	mov    0x8(%eax),%eax
f0117239:	39 c1                	cmp    %eax,%ecx
f011723b:	74 17                	je     f0117254 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f011723d:	83 ec 04             	sub    $0x4,%esp
f0117240:	68 e8 ad 13 f0       	push   $0xf013ade8
f0117245:	68 44 01 00 00       	push   $0x144
f011724a:	68 11 ac 13 f0       	push   $0xf013ac11
f011724f:	e8 b1 8f fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117254:	ff 45 d0             	incl   -0x30(%ebp)
f0117257:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011725b:	7e 80                	jle    f01171dd <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011725d:	e8 3b 59 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117262:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117265:	e8 5e cb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011726a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011726d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117270:	83 ec 08             	sub    $0x8,%esp
f0117273:	6a 01                	push   $0x1
f0117275:	50                   	push   %eax
f0117276:	e8 6d 3d ff ff       	call   f010afe8 <set_program_priority>
f011727b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f011727e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117281:	83 ec 08             	sub    $0x8,%esp
f0117284:	6a 01                	push   $0x1
f0117286:	50                   	push   %eax
f0117287:	e8 5c 3d ff ff       	call   f010afe8 <set_program_priority>
f011728c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011728f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117292:	83 ec 08             	sub    $0x8,%esp
f0117295:	6a 01                	push   $0x1
f0117297:	50                   	push   %eax
f0117298:	e8 4b 3d ff ff       	call   f010afe8 <set_program_priority>
f011729d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01172a0:	e8 23 cb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01172a5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01172a8:	74 17                	je     f01172c1 <test_priority_normal_and_lower+0x6bd>
f01172aa:	83 ec 04             	sub    $0x4,%esp
f01172ad:	68 78 ac 13 f0       	push   $0xf013ac78
f01172b2:	68 4d 01 00 00       	push   $0x14d
f01172b7:	68 11 ac 13 f0       	push   $0xf013ac11
f01172bc:	e8 44 8f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01172c1:	e8 d7 58 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01172c6:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01172c9:	83 f8 0d             	cmp    $0xd,%eax
f01172cc:	74 17                	je     f01172e5 <test_priority_normal_and_lower+0x6e1>
f01172ce:	83 ec 04             	sub    $0x4,%esp
f01172d1:	68 84 af 13 f0       	push   $0xf013af84
f01172d6:	68 4e 01 00 00       	push   $0x14e
f01172db:	68 11 ac 13 f0       	push   $0xf013ac11
f01172e0:	e8 20 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01172e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172e8:	8b 40 74             	mov    0x74(%eax),%eax
f01172eb:	83 f8 05             	cmp    $0x5,%eax
f01172ee:	75 16                	jne    f0117306 <test_priority_normal_and_lower+0x702>
f01172f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172f3:	8b 40 74             	mov    0x74(%eax),%eax
f01172f6:	83 f8 07             	cmp    $0x7,%eax
f01172f9:	75 0b                	jne    f0117306 <test_priority_normal_and_lower+0x702>
f01172fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172fe:	8b 40 74             	mov    0x74(%eax),%eax
f0117301:	83 f8 05             	cmp    $0x5,%eax
f0117304:	74 17                	je     f011731d <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117306:	83 ec 04             	sub    $0x4,%esp
f0117309:	68 cc af 13 f0       	push   $0xf013afcc
f011730e:	68 51 01 00 00       	push   $0x151
f0117313:	68 11 ac 13 f0       	push   $0xf013ac11
f0117318:	e8 e8 8e fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f011731d:	e8 7b 58 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117322:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117325:	e8 9e ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011732a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011732d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117330:	83 ec 08             	sub    $0x8,%esp
f0117333:	6a 01                	push   $0x1
f0117335:	50                   	push   %eax
f0117336:	e8 ad 3c ff ff       	call   f010afe8 <set_program_priority>
f011733b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011733e:	e8 85 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117343:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117346:	74 17                	je     f011735f <test_priority_normal_and_lower+0x75b>
f0117348:	83 ec 04             	sub    $0x4,%esp
f011734b:	68 78 ac 13 f0       	push   $0xf013ac78
f0117350:	68 57 01 00 00       	push   $0x157
f0117355:	68 11 ac 13 f0       	push   $0xf013ac11
f011735a:	e8 a6 8e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011735f:	e8 39 58 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117364:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117367:	83 f8 03             	cmp    $0x3,%eax
f011736a:	74 17                	je     f0117383 <test_priority_normal_and_lower+0x77f>
f011736c:	83 ec 04             	sub    $0x4,%esp
f011736f:	68 78 ac 13 f0       	push   $0xf013ac78
f0117374:	68 58 01 00 00       	push   $0x158
f0117379:	68 11 ac 13 f0       	push   $0xf013ac11
f011737e:	e8 82 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117383:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117386:	8b 40 74             	mov    0x74(%eax),%eax
f0117389:	83 f8 02             	cmp    $0x2,%eax
f011738c:	75 16                	jne    f01173a4 <test_priority_normal_and_lower+0x7a0>
f011738e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117391:	8b 40 74             	mov    0x74(%eax),%eax
f0117394:	83 f8 07             	cmp    $0x7,%eax
f0117397:	75 0b                	jne    f01173a4 <test_priority_normal_and_lower+0x7a0>
f0117399:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011739c:	8b 40 74             	mov    0x74(%eax),%eax
f011739f:	83 f8 05             	cmp    $0x5,%eax
f01173a2:	74 17                	je     f01173bb <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f01173a4:	83 ec 04             	sub    $0x4,%esp
f01173a7:	68 ac ad 13 f0       	push   $0xf013adac
f01173ac:	68 5b 01 00 00       	push   $0x15b
f01173b1:	68 11 ac 13 f0       	push   $0xf013ac11
f01173b6:	e8 4a 8e fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f01173bb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01173c2:	e9 80 00 00 00       	jmp    f0117447 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01173c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01173ca:	83 c0 08             	add    $0x8,%eax
f01173cd:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01173d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173d7:	8b 58 78             	mov    0x78(%eax),%ebx
f01173da:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01173dd:	89 d0                	mov    %edx,%eax
f01173df:	01 c0                	add    %eax,%eax
f01173e1:	01 d0                	add    %edx,%eax
f01173e3:	c1 e0 03             	shl    $0x3,%eax
f01173e6:	01 d8                	add    %ebx,%eax
f01173e8:	8b 00                	mov    (%eax),%eax
f01173ea:	39 c1                	cmp    %eax,%ecx
f01173ec:	74 17                	je     f0117405 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01173ee:	83 ec 04             	sub    $0x4,%esp
f01173f1:	68 fc af 13 f0       	push   $0xf013affc
f01173f6:	68 60 01 00 00       	push   $0x160
f01173fb:	68 11 ac 13 f0       	push   $0xf013ac11
f0117400:	e8 00 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117405:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117408:	83 c0 08             	add    $0x8,%eax
f011740b:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117412:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117415:	8b 58 78             	mov    0x78(%eax),%ebx
f0117418:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011741b:	89 d0                	mov    %edx,%eax
f011741d:	01 c0                	add    %eax,%eax
f011741f:	01 d0                	add    %edx,%eax
f0117421:	c1 e0 03             	shl    $0x3,%eax
f0117424:	01 d8                	add    %ebx,%eax
f0117426:	8b 40 08             	mov    0x8(%eax),%eax
f0117429:	39 c1                	cmp    %eax,%ecx
f011742b:	74 17                	je     f0117444 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011742d:	83 ec 04             	sub    $0x4,%esp
f0117430:	68 fc af 13 f0       	push   $0xf013affc
f0117435:	68 63 01 00 00       	push   $0x163
f011743a:	68 11 ac 13 f0       	push   $0xf013ac11
f011743f:	e8 c1 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117444:	ff 45 cc             	incl   -0x34(%ebp)
f0117447:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f011744b:	0f 8e 76 ff ff ff    	jle    f01173c7 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117451:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117458:	e9 80 00 00 00       	jmp    f01174dd <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011745d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117460:	83 c0 03             	add    $0x3,%eax
f0117463:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011746a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011746d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117470:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117473:	89 d0                	mov    %edx,%eax
f0117475:	01 c0                	add    %eax,%eax
f0117477:	01 d0                	add    %edx,%eax
f0117479:	c1 e0 03             	shl    $0x3,%eax
f011747c:	01 d8                	add    %ebx,%eax
f011747e:	8b 00                	mov    (%eax),%eax
f0117480:	39 c1                	cmp    %eax,%ecx
f0117482:	74 17                	je     f011749b <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117484:	ff 75 c8             	pushl  -0x38(%ebp)
f0117487:	68 68 b0 13 f0       	push   $0xf013b068
f011748c:	68 69 01 00 00       	push   $0x169
f0117491:	68 11 ac 13 f0       	push   $0xf013ac11
f0117496:	e8 6a 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011749b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011749e:	83 c0 03             	add    $0x3,%eax
f01174a1:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01174a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174ab:	8b 58 78             	mov    0x78(%eax),%ebx
f01174ae:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01174b1:	89 d0                	mov    %edx,%eax
f01174b3:	01 c0                	add    %eax,%eax
f01174b5:	01 d0                	add    %edx,%eax
f01174b7:	c1 e0 03             	shl    $0x3,%eax
f01174ba:	01 d8                	add    %ebx,%eax
f01174bc:	8b 40 08             	mov    0x8(%eax),%eax
f01174bf:	39 c1                	cmp    %eax,%ecx
f01174c1:	74 17                	je     f01174da <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01174c3:	83 ec 04             	sub    $0x4,%esp
f01174c6:	68 fc af 13 f0       	push   $0xf013affc
f01174cb:	68 6c 01 00 00       	push   $0x16c
f01174d0:	68 11 ac 13 f0       	push   $0xf013ac11
f01174d5:	e8 2b 8d fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01174da:	ff 45 c8             	incl   -0x38(%ebp)
f01174dd:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01174e1:	0f 8e 76 ff ff ff    	jle    f011745d <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01174e7:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01174ee:	e9 80 00 00 00       	jmp    f0117573 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01174f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01174f6:	83 c0 05             	add    $0x5,%eax
f01174f9:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117500:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117503:	8b 58 78             	mov    0x78(%eax),%ebx
f0117506:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117509:	89 d0                	mov    %edx,%eax
f011750b:	01 c0                	add    %eax,%eax
f011750d:	01 d0                	add    %edx,%eax
f011750f:	c1 e0 03             	shl    $0x3,%eax
f0117512:	01 d8                	add    %ebx,%eax
f0117514:	8b 00                	mov    (%eax),%eax
f0117516:	39 c1                	cmp    %eax,%ecx
f0117518:	74 17                	je     f0117531 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011751a:	83 ec 04             	sub    $0x4,%esp
f011751d:	68 fc af 13 f0       	push   $0xf013affc
f0117522:	68 72 01 00 00       	push   $0x172
f0117527:	68 11 ac 13 f0       	push   $0xf013ac11
f011752c:	e8 d4 8c fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117531:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117534:	83 c0 05             	add    $0x5,%eax
f0117537:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011753e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117541:	8b 58 78             	mov    0x78(%eax),%ebx
f0117544:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117547:	89 d0                	mov    %edx,%eax
f0117549:	01 c0                	add    %eax,%eax
f011754b:	01 d0                	add    %edx,%eax
f011754d:	c1 e0 03             	shl    $0x3,%eax
f0117550:	01 d8                	add    %ebx,%eax
f0117552:	8b 40 08             	mov    0x8(%eax),%eax
f0117555:	39 c1                	cmp    %eax,%ecx
f0117557:	74 17                	je     f0117570 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117559:	83 ec 04             	sub    $0x4,%esp
f011755c:	68 fc af 13 f0       	push   $0xf013affc
f0117561:	68 75 01 00 00       	push   $0x175
f0117566:	68 11 ac 13 f0       	push   $0xf013ac11
f011756b:	e8 95 8c fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117570:	ff 45 c4             	incl   -0x3c(%ebp)
f0117573:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117577:	0f 8e 76 ff ff ff    	jle    f01174f3 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011757d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117580:	83 ec 08             	sub    $0x8,%esp
f0117583:	6a 05                	push   $0x5
f0117585:	50                   	push   %eax
f0117586:	e8 5d 3a ff ff       	call   f010afe8 <set_program_priority>
f011758b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011758e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117591:	83 ec 08             	sub    $0x8,%esp
f0117594:	6a 05                	push   $0x5
f0117596:	50                   	push   %eax
f0117597:	e8 4c 3a ff ff       	call   f010afe8 <set_program_priority>
f011759c:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011759f:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f01175a6:	75 6e 61 
f01175a9:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f01175b0:	6c 00 00 
f01175b3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01175b9:	b9 17 00 00 00       	mov    $0x17,%ecx
f01175be:	b8 00 00 00 00       	mov    $0x0,%eax
f01175c3:	89 d7                	mov    %edx,%edi
f01175c5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01175c7:	83 ec 0c             	sub    $0xc,%esp
f01175ca:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01175d0:	50                   	push   %eax
f01175d1:	e8 9a 97 fe ff       	call   f0100d70 <execute_command>
f01175d6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f01175d9:	eb 10                	jmp    f01175eb <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01175db:	83 ec 0c             	sub    $0xc,%esp
f01175de:	68 d8 b0 13 f0       	push   $0xf013b0d8
f01175e3:	e8 26 97 fe ff       	call   f0100d0e <cprintf>
f01175e8:	83 c4 10             	add    $0x10,%esp
	}
}
f01175eb:	90                   	nop
f01175ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01175ef:	5b                   	pop    %ebx
f01175f0:	5e                   	pop    %esi
f01175f1:	5f                   	pop    %edi
f01175f2:	5d                   	pop    %ebp
f01175f3:	c3                   	ret    

f01175f4 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01175f4:	55                   	push   %ebp
f01175f5:	89 e5                	mov    %esp,%ebp
f01175f7:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f01175fc:	83 f8 03             	cmp    $0x3,%eax
f01175ff:	75 04                	jne    f0117605 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117601:	b0 01                	mov    $0x1,%al
f0117603:	eb 02                	jmp    f0117607 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117605:	b0 00                	mov    $0x0,%al
f0117607:	5d                   	pop    %ebp
f0117608:	c3                   	ret    

f0117609 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117609:	55                   	push   %ebp
f011760a:	89 e5                	mov    %esp,%ebp
f011760c:	57                   	push   %edi
f011760d:	53                   	push   %ebx
f011760e:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117614:	83 ec 0c             	sub    $0xc,%esp
f0117617:	68 dc b1 13 f0       	push   $0xf013b1dc
f011761c:	e8 ed 96 fe ff       	call   f0100d0e <cprintf>
f0117621:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117624:	83 ec 0c             	sub    $0xc,%esp
f0117627:	68 0c b2 13 f0       	push   $0xf013b20c
f011762c:	e8 dd 96 fe ff       	call   f0100d0e <cprintf>
f0117631:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117634:	83 ec 0c             	sub    $0xc,%esp
f0117637:	68 dc b1 13 f0       	push   $0xf013b1dc
f011763c:	e8 cd 96 fe ff       	call   f0100d0e <cprintf>
f0117641:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117644:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117648:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011764c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117652:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117658:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011765f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117666:	e8 32 55 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011766b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011766e:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117674:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117679:	b8 00 00 00 00       	mov    $0x0,%eax
f011767e:	89 d7                	mov    %edx,%edi
f0117680:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117682:	e8 16 55 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117687:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011768a:	e8 39 c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011768f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117692:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117699:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011769c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01176a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01176a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01176ac:	f7 75 d4             	divl   -0x2c(%ebp)
f01176af:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176b2:	29 d0                	sub    %edx,%eax
f01176b4:	89 c1                	mov    %eax,%ecx
f01176b6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01176bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01176c2:	0f b6 d0             	movzbl %al,%edx
f01176c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01176c8:	01 d0                	add    %edx,%eax
f01176ca:	48                   	dec    %eax
f01176cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01176ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01176d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01176d6:	f7 75 cc             	divl   -0x34(%ebp)
f01176d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01176dc:	29 d0                	sub    %edx,%eax
f01176de:	01 c1                	add    %eax,%ecx
f01176e0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01176e7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01176ec:	0f b6 c0             	movzbl %al,%eax
f01176ef:	c1 e0 04             	shl    $0x4,%eax
f01176f2:	89 c2                	mov    %eax,%edx
f01176f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01176f7:	01 d0                	add    %edx,%eax
f01176f9:	48                   	dec    %eax
f01176fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01176fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117700:	ba 00 00 00 00       	mov    $0x0,%edx
f0117705:	f7 75 c4             	divl   -0x3c(%ebp)
f0117708:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011770b:	29 d0                	sub    %edx,%eax
f011770d:	01 c8                	add    %ecx,%eax
f011770f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117714:	29 c2                	sub    %eax,%edx
f0117716:	89 d0                	mov    %edx,%eax
f0117718:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011771b:	83 ec 0c             	sub    $0xc,%esp
f011771e:	ff 75 bc             	pushl  -0x44(%ebp)
f0117721:	e8 5f 01 ff ff       	call   f0107885 <kmalloc>
f0117726:	83 c4 10             	add    $0x10,%esp
f0117729:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011772f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117735:	85 c0                	test   %eax,%eax
f0117737:	74 14                	je     f011774d <test_kmalloc+0x144>
f0117739:	83 ec 04             	sub    $0x4,%esp
f011773c:	68 68 b2 13 f0       	push   $0xf013b268
f0117741:	6a 40                	push   $0x40
f0117743:	68 9a b2 13 f0       	push   $0xf013b29a
f0117748:	e8 b8 8a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011774d:	e8 76 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117752:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117755:	74 14                	je     f011776b <test_kmalloc+0x162>
f0117757:	83 ec 04             	sub    $0x4,%esp
f011775a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011775f:	6a 41                	push   $0x41
f0117761:	68 9a b2 13 f0       	push   $0xf013b29a
f0117766:	e8 9a 8a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011776b:	e8 2d 54 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117770:	89 c2                	mov    %eax,%edx
f0117772:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117775:	39 c2                	cmp    %eax,%edx
f0117777:	74 14                	je     f011778d <test_kmalloc+0x184>
f0117779:	83 ec 04             	sub    $0x4,%esp
f011777c:	68 1c b3 13 f0       	push   $0xf013b31c
f0117781:	6a 42                	push   $0x42
f0117783:	68 9a b2 13 f0       	push   $0xf013b29a
f0117788:	e8 78 8a fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f011778d:	83 ec 0c             	sub    $0xc,%esp
f0117790:	68 5c b3 13 f0       	push   $0xf013b35c
f0117795:	e8 74 95 fe ff       	call   f0100d0e <cprintf>
f011779a:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011779d:	e8 fb 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01177a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177a5:	e8 1e c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01177ad:	83 ec 0c             	sub    $0xc,%esp
f01177b0:	68 00 fc 1f 00       	push   $0x1ffc00
f01177b5:	e8 cb 00 ff ff       	call   f0107885 <kmalloc>
f01177ba:	83 c4 10             	add    $0x10,%esp
f01177bd:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01177c3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01177c9:	89 c1                	mov    %eax,%ecx
f01177cb:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01177d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01177da:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01177dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01177e5:	f7 75 b8             	divl   -0x48(%ebp)
f01177e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177eb:	29 d0                	sub    %edx,%eax
f01177ed:	89 c3                	mov    %eax,%ebx
f01177ef:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01177f6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01177fb:	0f b6 d0             	movzbl %al,%edx
f01177fe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117801:	01 d0                	add    %edx,%eax
f0117803:	48                   	dec    %eax
f0117804:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117807:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011780a:	ba 00 00 00 00       	mov    $0x0,%edx
f011780f:	f7 75 b0             	divl   -0x50(%ebp)
f0117812:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117815:	29 d0                	sub    %edx,%eax
f0117817:	01 c3                	add    %eax,%ebx
f0117819:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117820:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117825:	0f b6 c0             	movzbl %al,%eax
f0117828:	c1 e0 04             	shl    $0x4,%eax
f011782b:	89 c2                	mov    %eax,%edx
f011782d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117830:	01 d0                	add    %edx,%eax
f0117832:	48                   	dec    %eax
f0117833:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117836:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117839:	ba 00 00 00 00       	mov    $0x0,%edx
f011783e:	f7 75 a8             	divl   -0x58(%ebp)
f0117841:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117844:	29 d0                	sub    %edx,%eax
f0117846:	01 d8                	add    %ebx,%eax
f0117848:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011784d:	39 c1                	cmp    %eax,%ecx
f011784f:	74 14                	je     f0117865 <test_kmalloc+0x25c>
f0117851:	83 ec 04             	sub    $0x4,%esp
f0117854:	68 80 b3 13 f0       	push   $0xf013b380
f0117859:	6a 49                	push   $0x49
f011785b:	68 9a b2 13 f0       	push   $0xf013b29a
f0117860:	e8 a0 89 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117865:	e8 5e c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011786a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011786d:	74 14                	je     f0117883 <test_kmalloc+0x27a>
f011786f:	83 ec 04             	sub    $0x4,%esp
f0117872:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117877:	6a 4a                	push   $0x4a
f0117879:	68 9a b2 13 f0       	push   $0xf013b29a
f011787e:	e8 82 89 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117883:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117886:	e8 12 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011788b:	29 c3                	sub    %eax,%ebx
f011788d:	89 d8                	mov    %ebx,%eax
f011788f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117894:	74 14                	je     f01178aa <test_kmalloc+0x2a1>
f0117896:	83 ec 04             	sub    $0x4,%esp
f0117899:	68 1c b3 13 f0       	push   $0xf013b31c
f011789e:	6a 4b                	push   $0x4b
f01178a0:	68 9a b2 13 f0       	push   $0xf013b29a
f01178a5:	e8 5b 89 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01178aa:	e8 ee 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01178af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178b2:	e8 11 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01178b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01178ba:	83 ec 0c             	sub    $0xc,%esp
f01178bd:	68 00 fc 1f 00       	push   $0x1ffc00
f01178c2:	e8 be ff fe ff       	call   f0107885 <kmalloc>
f01178c7:	83 c4 10             	add    $0x10,%esp
f01178ca:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01178d0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01178d6:	89 c1                	mov    %eax,%ecx
f01178d8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01178df:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01178e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01178e7:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01178ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01178ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01178f2:	f7 75 a0             	divl   -0x60(%ebp)
f01178f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01178f8:	29 d0                	sub    %edx,%eax
f01178fa:	89 c3                	mov    %eax,%ebx
f01178fc:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117903:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117908:	0f b6 d0             	movzbl %al,%edx
f011790b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011790e:	01 d0                	add    %edx,%eax
f0117910:	48                   	dec    %eax
f0117911:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117914:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117917:	ba 00 00 00 00       	mov    $0x0,%edx
f011791c:	f7 75 98             	divl   -0x68(%ebp)
f011791f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117922:	29 d0                	sub    %edx,%eax
f0117924:	01 c3                	add    %eax,%ebx
f0117926:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011792d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117932:	0f b6 c0             	movzbl %al,%eax
f0117935:	c1 e0 04             	shl    $0x4,%eax
f0117938:	89 c2                	mov    %eax,%edx
f011793a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011793d:	01 d0                	add    %edx,%eax
f011793f:	48                   	dec    %eax
f0117940:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117943:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117946:	ba 00 00 00 00       	mov    $0x0,%edx
f011794b:	f7 75 90             	divl   -0x70(%ebp)
f011794e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117951:	29 d0                	sub    %edx,%eax
f0117953:	01 d8                	add    %ebx,%eax
f0117955:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011795a:	39 c1                	cmp    %eax,%ecx
f011795c:	74 14                	je     f0117972 <test_kmalloc+0x369>
f011795e:	83 ec 04             	sub    $0x4,%esp
f0117961:	68 80 b3 13 f0       	push   $0xf013b380
f0117966:	6a 51                	push   $0x51
f0117968:	68 9a b2 13 f0       	push   $0xf013b29a
f011796d:	e8 93 88 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117972:	e8 51 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117977:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011797a:	74 14                	je     f0117990 <test_kmalloc+0x387>
f011797c:	83 ec 04             	sub    $0x4,%esp
f011797f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117984:	6a 52                	push   $0x52
f0117986:	68 9a b2 13 f0       	push   $0xf013b29a
f011798b:	e8 75 88 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117990:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117993:	e8 05 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117998:	29 c3                	sub    %eax,%ebx
f011799a:	89 d8                	mov    %ebx,%eax
f011799c:	3d 00 02 00 00       	cmp    $0x200,%eax
f01179a1:	74 14                	je     f01179b7 <test_kmalloc+0x3ae>
f01179a3:	83 ec 04             	sub    $0x4,%esp
f01179a6:	68 1c b3 13 f0       	push   $0xf013b31c
f01179ab:	6a 53                	push   $0x53
f01179ad:	68 9a b2 13 f0       	push   $0xf013b29a
f01179b2:	e8 4e 88 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01179b7:	e8 e1 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01179bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179bf:	e8 04 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01179c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01179c7:	83 ec 0c             	sub    $0xc,%esp
f01179ca:	68 00 08 00 00       	push   $0x800
f01179cf:	e8 b1 fe fe ff       	call   f0107885 <kmalloc>
f01179d4:	83 c4 10             	add    $0x10,%esp
f01179d7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01179dd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01179e3:	89 c1                	mov    %eax,%ecx
f01179e5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01179ec:	8b 45 88             	mov    -0x78(%ebp),%eax
f01179ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01179f4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01179f7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01179fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01179ff:	f7 75 88             	divl   -0x78(%ebp)
f0117a02:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117a05:	29 d0                	sub    %edx,%eax
f0117a07:	89 c3                	mov    %eax,%ebx
f0117a09:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117a10:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117a15:	0f b6 d0             	movzbl %al,%edx
f0117a18:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117a1b:	01 d0                	add    %edx,%eax
f0117a1d:	48                   	dec    %eax
f0117a1e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117a24:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117a2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a2f:	f7 75 80             	divl   -0x80(%ebp)
f0117a32:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117a38:	29 d0                	sub    %edx,%eax
f0117a3a:	01 c3                	add    %eax,%ebx
f0117a3c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117a43:	10 00 00 
f0117a46:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117a4b:	0f b6 c0             	movzbl %al,%eax
f0117a4e:	c1 e0 04             	shl    $0x4,%eax
f0117a51:	89 c2                	mov    %eax,%edx
f0117a53:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117a59:	01 d0                	add    %edx,%eax
f0117a5b:	48                   	dec    %eax
f0117a5c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117a62:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117a68:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a6d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117a73:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117a79:	29 d0                	sub    %edx,%eax
f0117a7b:	01 d8                	add    %ebx,%eax
f0117a7d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117a82:	39 c1                	cmp    %eax,%ecx
f0117a84:	74 14                	je     f0117a9a <test_kmalloc+0x491>
f0117a86:	83 ec 04             	sub    $0x4,%esp
f0117a89:	68 80 b3 13 f0       	push   $0xf013b380
f0117a8e:	6a 59                	push   $0x59
f0117a90:	68 9a b2 13 f0       	push   $0xf013b29a
f0117a95:	e8 6b 87 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a9a:	e8 29 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117aa2:	74 14                	je     f0117ab8 <test_kmalloc+0x4af>
f0117aa4:	83 ec 04             	sub    $0x4,%esp
f0117aa7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117aac:	6a 5a                	push   $0x5a
f0117aae:	68 9a b2 13 f0       	push   $0xf013b29a
f0117ab3:	e8 4d 87 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ab8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117abb:	e8 dd 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ac0:	29 c3                	sub    %eax,%ebx
f0117ac2:	89 d8                	mov    %ebx,%eax
f0117ac4:	83 f8 01             	cmp    $0x1,%eax
f0117ac7:	74 14                	je     f0117add <test_kmalloc+0x4d4>
f0117ac9:	83 ec 04             	sub    $0x4,%esp
f0117acc:	68 1c b3 13 f0       	push   $0xf013b31c
f0117ad1:	6a 5b                	push   $0x5b
f0117ad3:	68 9a b2 13 f0       	push   $0xf013b29a
f0117ad8:	e8 28 87 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117add:	e8 bb 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ae2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ae5:	e8 de c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117aed:	83 ec 0c             	sub    $0xc,%esp
f0117af0:	68 00 08 00 00       	push   $0x800
f0117af5:	e8 8b fd fe ff       	call   f0107885 <kmalloc>
f0117afa:	83 c4 10             	add    $0x10,%esp
f0117afd:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b03:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117b09:	89 c1                	mov    %eax,%ecx
f0117b0b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117b12:	10 00 00 
f0117b15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117b1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b20:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117b26:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117b2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b31:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117b37:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117b3d:	29 d0                	sub    %edx,%eax
f0117b3f:	89 c3                	mov    %eax,%ebx
f0117b41:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117b48:	10 00 00 
f0117b4b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117b50:	0f b6 d0             	movzbl %al,%edx
f0117b53:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117b59:	01 d0                	add    %edx,%eax
f0117b5b:	48                   	dec    %eax
f0117b5c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117b62:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117b68:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b6d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117b73:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117b79:	29 d0                	sub    %edx,%eax
f0117b7b:	01 c3                	add    %eax,%ebx
f0117b7d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117b84:	10 00 00 
f0117b87:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117b8c:	0f b6 c0             	movzbl %al,%eax
f0117b8f:	c1 e0 04             	shl    $0x4,%eax
f0117b92:	89 c2                	mov    %eax,%edx
f0117b94:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117b9a:	01 d0                	add    %edx,%eax
f0117b9c:	48                   	dec    %eax
f0117b9d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117ba3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117ba9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bae:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117bb4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117bba:	29 d0                	sub    %edx,%eax
f0117bbc:	01 d8                	add    %ebx,%eax
f0117bbe:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117bc3:	39 c1                	cmp    %eax,%ecx
f0117bc5:	74 14                	je     f0117bdb <test_kmalloc+0x5d2>
f0117bc7:	83 ec 04             	sub    $0x4,%esp
f0117bca:	68 80 b3 13 f0       	push   $0xf013b380
f0117bcf:	6a 61                	push   $0x61
f0117bd1:	68 9a b2 13 f0       	push   $0xf013b29a
f0117bd6:	e8 2a 86 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bdb:	e8 e8 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117be0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117be3:	74 14                	je     f0117bf9 <test_kmalloc+0x5f0>
f0117be5:	83 ec 04             	sub    $0x4,%esp
f0117be8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117bed:	6a 62                	push   $0x62
f0117bef:	68 9a b2 13 f0       	push   $0xf013b29a
f0117bf4:	e8 0c 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117bf9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117bfc:	e8 9c 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c01:	29 c3                	sub    %eax,%ebx
f0117c03:	89 d8                	mov    %ebx,%eax
f0117c05:	83 f8 01             	cmp    $0x1,%eax
f0117c08:	74 14                	je     f0117c1e <test_kmalloc+0x615>
f0117c0a:	83 ec 04             	sub    $0x4,%esp
f0117c0d:	68 1c b3 13 f0       	push   $0xf013b31c
f0117c12:	6a 63                	push   $0x63
f0117c14:	68 9a b2 13 f0       	push   $0xf013b29a
f0117c19:	e8 e7 85 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117c1e:	e8 7a 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c23:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c26:	e8 9d c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117c2e:	83 ec 0c             	sub    $0xc,%esp
f0117c31:	68 00 1c 00 00       	push   $0x1c00
f0117c36:	e8 4a fc fe ff       	call   f0107885 <kmalloc>
f0117c3b:	83 c4 10             	add    $0x10,%esp
f0117c3e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c44:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117c4a:	89 c1                	mov    %eax,%ecx
f0117c4c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117c53:	10 00 00 
f0117c56:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117c5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c61:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117c67:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c72:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117c78:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117c7e:	29 d0                	sub    %edx,%eax
f0117c80:	89 c3                	mov    %eax,%ebx
f0117c82:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117c89:	10 00 00 
f0117c8c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117c91:	0f b6 d0             	movzbl %al,%edx
f0117c94:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117c9a:	01 d0                	add    %edx,%eax
f0117c9c:	48                   	dec    %eax
f0117c9d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117ca3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cae:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117cb4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117cba:	29 d0                	sub    %edx,%eax
f0117cbc:	01 c3                	add    %eax,%ebx
f0117cbe:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117cc5:	10 00 00 
f0117cc8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117ccd:	0f b6 c0             	movzbl %al,%eax
f0117cd0:	c1 e0 04             	shl    $0x4,%eax
f0117cd3:	89 c2                	mov    %eax,%edx
f0117cd5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117cdb:	01 d0                	add    %edx,%eax
f0117cdd:	48                   	dec    %eax
f0117cde:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117ce4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cef:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117cf5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117cfb:	29 d0                	sub    %edx,%eax
f0117cfd:	01 d8                	add    %ebx,%eax
f0117cff:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117d04:	39 c1                	cmp    %eax,%ecx
f0117d06:	74 14                	je     f0117d1c <test_kmalloc+0x713>
f0117d08:	83 ec 04             	sub    $0x4,%esp
f0117d0b:	68 80 b3 13 f0       	push   $0xf013b380
f0117d10:	6a 69                	push   $0x69
f0117d12:	68 9a b2 13 f0       	push   $0xf013b29a
f0117d17:	e8 e9 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d1c:	e8 a7 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d24:	74 14                	je     f0117d3a <test_kmalloc+0x731>
f0117d26:	83 ec 04             	sub    $0x4,%esp
f0117d29:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117d2e:	6a 6a                	push   $0x6a
f0117d30:	68 9a b2 13 f0       	push   $0xf013b29a
f0117d35:	e8 cb 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d3a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d3d:	e8 5b 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117d42:	29 c3                	sub    %eax,%ebx
f0117d44:	89 d8                	mov    %ebx,%eax
f0117d46:	83 f8 02             	cmp    $0x2,%eax
f0117d49:	74 14                	je     f0117d5f <test_kmalloc+0x756>
f0117d4b:	83 ec 04             	sub    $0x4,%esp
f0117d4e:	68 1c b3 13 f0       	push   $0xf013b31c
f0117d53:	6a 6b                	push   $0x6b
f0117d55:	68 9a b2 13 f0       	push   $0xf013b29a
f0117d5a:	e8 a6 84 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d5f:	e8 39 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117d64:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d67:	e8 5c c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117d6f:	83 ec 0c             	sub    $0xc,%esp
f0117d72:	68 00 fc 2f 00       	push   $0x2ffc00
f0117d77:	e8 09 fb fe ff       	call   f0107885 <kmalloc>
f0117d7c:	83 c4 10             	add    $0x10,%esp
f0117d7f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d85:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117d8b:	89 c1                	mov    %eax,%ecx
f0117d8d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117d94:	10 00 00 
f0117d97:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117d9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117da2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117da8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0117db3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117db9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117dbf:	29 d0                	sub    %edx,%eax
f0117dc1:	89 c3                	mov    %eax,%ebx
f0117dc3:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117dca:	10 00 00 
f0117dcd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117dd2:	0f b6 d0             	movzbl %al,%edx
f0117dd5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117ddb:	01 d0                	add    %edx,%eax
f0117ddd:	48                   	dec    %eax
f0117dde:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117de4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117dea:	ba 00 00 00 00       	mov    $0x0,%edx
f0117def:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117df5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117dfb:	29 d0                	sub    %edx,%eax
f0117dfd:	01 c3                	add    %eax,%ebx
f0117dff:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117e06:	10 00 00 
f0117e09:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117e0e:	0f b6 c0             	movzbl %al,%eax
f0117e11:	c1 e0 04             	shl    $0x4,%eax
f0117e14:	89 c2                	mov    %eax,%edx
f0117e16:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117e1c:	01 d0                	add    %edx,%eax
f0117e1e:	48                   	dec    %eax
f0117e1f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117e25:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e30:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117e36:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117e3c:	29 d0                	sub    %edx,%eax
f0117e3e:	01 d8                	add    %ebx,%eax
f0117e40:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117e45:	39 c1                	cmp    %eax,%ecx
f0117e47:	74 14                	je     f0117e5d <test_kmalloc+0x854>
f0117e49:	83 ec 04             	sub    $0x4,%esp
f0117e4c:	68 80 b3 13 f0       	push   $0xf013b380
f0117e51:	6a 71                	push   $0x71
f0117e53:	68 9a b2 13 f0       	push   $0xf013b29a
f0117e58:	e8 a8 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e5d:	e8 66 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e65:	74 14                	je     f0117e7b <test_kmalloc+0x872>
f0117e67:	83 ec 04             	sub    $0x4,%esp
f0117e6a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117e6f:	6a 72                	push   $0x72
f0117e71:	68 9a b2 13 f0       	push   $0xf013b29a
f0117e76:	e8 8a 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e7b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e7e:	e8 1a 4d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117e83:	29 c3                	sub    %eax,%ebx
f0117e85:	89 d8                	mov    %ebx,%eax
f0117e87:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117e8c:	74 14                	je     f0117ea2 <test_kmalloc+0x899>
f0117e8e:	83 ec 04             	sub    $0x4,%esp
f0117e91:	68 1c b3 13 f0       	push   $0xf013b31c
f0117e96:	6a 73                	push   $0x73
f0117e98:	68 9a b2 13 f0       	push   $0xf013b29a
f0117e9d:	e8 63 83 fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117ea2:	e8 f6 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ea7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117eaa:	e8 19 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117eaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117eb2:	83 ec 0c             	sub    $0xc,%esp
f0117eb5:	68 00 fc 5f 00       	push   $0x5ffc00
f0117eba:	e8 c6 f9 fe ff       	call   f0107885 <kmalloc>
f0117ebf:	83 c4 10             	add    $0x10,%esp
f0117ec2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117ec8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117ece:	89 c1                	mov    %eax,%ecx
f0117ed0:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117ed7:	10 00 00 
f0117eda:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117ee0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ee5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117eeb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117ef1:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ef6:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117efc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f02:	29 d0                	sub    %edx,%eax
f0117f04:	89 c3                	mov    %eax,%ebx
f0117f06:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117f0d:	10 00 00 
f0117f10:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117f15:	0f b6 d0             	movzbl %al,%edx
f0117f18:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117f1e:	01 d0                	add    %edx,%eax
f0117f20:	48                   	dec    %eax
f0117f21:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117f27:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f32:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117f38:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117f3e:	29 d0                	sub    %edx,%eax
f0117f40:	01 c3                	add    %eax,%ebx
f0117f42:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117f49:	10 00 00 
f0117f4c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117f51:	0f b6 c0             	movzbl %al,%eax
f0117f54:	c1 e0 04             	shl    $0x4,%eax
f0117f57:	89 c2                	mov    %eax,%edx
f0117f59:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117f5f:	01 d0                	add    %edx,%eax
f0117f61:	48                   	dec    %eax
f0117f62:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117f68:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117f6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f73:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117f79:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117f7f:	29 d0                	sub    %edx,%eax
f0117f81:	01 d8                	add    %ebx,%eax
f0117f83:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117f88:	39 c1                	cmp    %eax,%ecx
f0117f8a:	74 14                	je     f0117fa0 <test_kmalloc+0x997>
f0117f8c:	83 ec 04             	sub    $0x4,%esp
f0117f8f:	68 80 b3 13 f0       	push   $0xf013b380
f0117f94:	6a 79                	push   $0x79
f0117f96:	68 9a b2 13 f0       	push   $0xf013b29a
f0117f9b:	e8 65 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117fa0:	e8 23 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117fa5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117fa8:	74 14                	je     f0117fbe <test_kmalloc+0x9b5>
f0117faa:	83 ec 04             	sub    $0x4,%esp
f0117fad:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0117fb2:	6a 7a                	push   $0x7a
f0117fb4:	68 9a b2 13 f0       	push   $0xf013b29a
f0117fb9:	e8 47 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117fbe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117fc1:	e8 d7 4b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117fc6:	29 c3                	sub    %eax,%ebx
f0117fc8:	89 d8                	mov    %ebx,%eax
f0117fca:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117fcf:	74 14                	je     f0117fe5 <test_kmalloc+0x9dc>
f0117fd1:	83 ec 04             	sub    $0x4,%esp
f0117fd4:	68 1c b3 13 f0       	push   $0xf013b31c
f0117fd9:	6a 7b                	push   $0x7b
f0117fdb:	68 9a b2 13 f0       	push   $0xf013b29a
f0117fe0:	e8 20 82 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117fe5:	e8 b3 4b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117fea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117fed:	e8 d6 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117ff2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117ff5:	83 ec 0c             	sub    $0xc,%esp
f0117ff8:	68 00 38 00 00       	push   $0x3800
f0117ffd:	e8 83 f8 fe ff       	call   f0107885 <kmalloc>
f0118002:	83 c4 10             	add    $0x10,%esp
f0118005:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011800b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118011:	89 c1                	mov    %eax,%ecx
f0118013:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011801a:	10 00 00 
f011801d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118023:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118028:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011802e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118034:	ba 00 00 00 00       	mov    $0x0,%edx
f0118039:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011803f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118045:	29 d0                	sub    %edx,%eax
f0118047:	89 c3                	mov    %eax,%ebx
f0118049:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118050:	10 00 00 
f0118053:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118058:	0f b6 d0             	movzbl %al,%edx
f011805b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118061:	01 d0                	add    %edx,%eax
f0118063:	48                   	dec    %eax
f0118064:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011806a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118070:	ba 00 00 00 00       	mov    $0x0,%edx
f0118075:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011807b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118081:	29 d0                	sub    %edx,%eax
f0118083:	01 c3                	add    %eax,%ebx
f0118085:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011808c:	10 00 00 
f011808f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118094:	0f b6 c0             	movzbl %al,%eax
f0118097:	c1 e0 04             	shl    $0x4,%eax
f011809a:	89 c2                	mov    %eax,%edx
f011809c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01180a2:	01 d0                	add    %edx,%eax
f01180a4:	48                   	dec    %eax
f01180a5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01180ab:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01180b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01180b6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01180bc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01180c2:	29 d0                	sub    %edx,%eax
f01180c4:	01 d8                	add    %ebx,%eax
f01180c6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01180cb:	39 c1                	cmp    %eax,%ecx
f01180cd:	74 17                	je     f01180e6 <test_kmalloc+0xadd>
f01180cf:	83 ec 04             	sub    $0x4,%esp
f01180d2:	68 80 b3 13 f0       	push   $0xf013b380
f01180d7:	68 81 00 00 00       	push   $0x81
f01180dc:	68 9a b2 13 f0       	push   $0xf013b29a
f01180e1:	e8 1f 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180e6:	e8 dd bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01180eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01180ee:	74 17                	je     f0118107 <test_kmalloc+0xafe>
f01180f0:	83 ec 04             	sub    $0x4,%esp
f01180f3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01180f8:	68 82 00 00 00       	push   $0x82
f01180fd:	68 9a b2 13 f0       	push   $0xf013b29a
f0118102:	e8 fe 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118107:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011810a:	e8 8e 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011810f:	29 c3                	sub    %eax,%ebx
f0118111:	89 d8                	mov    %ebx,%eax
f0118113:	83 f8 04             	cmp    $0x4,%eax
f0118116:	74 17                	je     f011812f <test_kmalloc+0xb26>
f0118118:	83 ec 04             	sub    $0x4,%esp
f011811b:	68 1c b3 13 f0       	push   $0xf013b31c
f0118120:	68 83 00 00 00       	push   $0x83
f0118125:	68 9a b2 13 f0       	push   $0xf013b29a
f011812a:	e8 d6 80 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f011812f:	83 ec 0c             	sub    $0xc,%esp
f0118132:	68 e6 b3 13 f0       	push   $0xf013b3e6
f0118137:	e8 d2 8b fe ff       	call   f0100d0e <cprintf>
f011813c:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f011813f:	e8 59 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118144:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118147:	e8 7c bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011814c:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011814f:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118156:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118159:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011815f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118165:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011816b:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011816e:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118170:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118176:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011817c:	01 c2                	add    %eax,%edx
f011817e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118181:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118183:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118189:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011818f:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118196:	fd 0f 00 
			shortArr[0] = minShort;
f0118199:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f011819f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01181a2:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f01181a5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01181ab:	01 c0                	add    %eax,%eax
f01181ad:	89 c2                	mov    %eax,%edx
f01181af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01181b5:	01 c2                	add    %eax,%edx
f01181b7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01181bb:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f01181be:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01181c4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01181ca:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f01181d1:	01 00 00 
			intArr[0] = minInt;
f01181d4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01181da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01181dd:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f01181df:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01181e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01181ec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01181f2:	01 c2                	add    %eax,%edx
f01181f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01181f7:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01181f9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01181ff:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118205:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011820c:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011820f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118215:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118218:	88 10                	mov    %dl,(%eax)
f011821a:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118220:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118223:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118227:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011822d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118230:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118233:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118239:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118240:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118246:	01 c2                	add    %eax,%edx
f0118248:	8a 45 f2             	mov    -0xe(%ebp),%al
f011824b:	88 02                	mov    %al,(%edx)
f011824d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118253:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011825a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118260:	01 c2                	add    %eax,%edx
f0118262:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118266:	66 89 42 02          	mov    %ax,0x2(%edx)
f011826a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118270:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118277:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011827d:	01 c2                	add    %eax,%edx
f011827f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118282:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118285:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f011828c:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f011828f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118295:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f011829b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01182a1:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01182a4:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f01182a6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01182ac:	89 c2                	mov    %eax,%edx
f01182ae:	c1 ea 1f             	shr    $0x1f,%edx
f01182b1:	01 d0                	add    %edx,%eax
f01182b3:	d1 f8                	sar    %eax
f01182b5:	89 c2                	mov    %eax,%edx
f01182b7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01182bd:	01 c2                	add    %eax,%edx
f01182bf:	8a 45 f2             	mov    -0xe(%ebp),%al
f01182c2:	88 c1                	mov    %al,%cl
f01182c4:	c0 e9 07             	shr    $0x7,%cl
f01182c7:	01 c8                	add    %ecx,%eax
f01182c9:	d0 f8                	sar    %al
f01182cb:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f01182cd:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01182d3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01182d9:	01 c2                	add    %eax,%edx
f01182db:	8a 45 f2             	mov    -0xe(%ebp),%al
f01182de:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f01182e0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01182e6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f01182ec:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01182f3:	1b 00 00 
			shortArr2[0] = minShort;
f01182f6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01182fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01182ff:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118302:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118308:	01 c0                	add    %eax,%eax
f011830a:	89 c2                	mov    %eax,%edx
f011830c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118312:	01 c2                	add    %eax,%edx
f0118314:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118318:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011831b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118321:	8a 00                	mov    (%eax),%al
f0118323:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118326:	75 15                	jne    f011833d <test_kmalloc+0xd34>
f0118328:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011832e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118334:	01 d0                	add    %edx,%eax
f0118336:	8a 00                	mov    (%eax),%al
f0118338:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011833b:	74 17                	je     f0118354 <test_kmalloc+0xd4b>
f011833d:	83 ec 04             	sub    $0x4,%esp
f0118340:	68 f0 b3 13 f0       	push   $0xf013b3f0
f0118345:	68 b2 00 00 00       	push   $0xb2
f011834a:	68 9a b2 13 f0       	push   $0xf013b29a
f011834f:	e8 b1 7e fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118354:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011835a:	66 8b 00             	mov    (%eax),%ax
f011835d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118361:	75 1b                	jne    f011837e <test_kmalloc+0xd75>
f0118363:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118369:	01 c0                	add    %eax,%eax
f011836b:	89 c2                	mov    %eax,%edx
f011836d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118373:	01 d0                	add    %edx,%eax
f0118375:	66 8b 00             	mov    (%eax),%ax
f0118378:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011837c:	74 17                	je     f0118395 <test_kmalloc+0xd8c>
f011837e:	83 ec 04             	sub    $0x4,%esp
f0118381:	68 f0 b3 13 f0       	push   $0xf013b3f0
f0118386:	68 b3 00 00 00       	push   $0xb3
f011838b:	68 9a b2 13 f0       	push   $0xf013b29a
f0118390:	e8 70 7e fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118395:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011839b:	8b 00                	mov    (%eax),%eax
f011839d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01183a0:	75 1c                	jne    f01183be <test_kmalloc+0xdb5>
f01183a2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01183a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01183af:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01183b5:	01 d0                	add    %edx,%eax
f01183b7:	8b 00                	mov    (%eax),%eax
f01183b9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01183bc:	74 17                	je     f01183d5 <test_kmalloc+0xdcc>
f01183be:	83 ec 04             	sub    $0x4,%esp
f01183c1:	68 f0 b3 13 f0       	push   $0xf013b3f0
f01183c6:	68 b4 00 00 00       	push   $0xb4
f01183cb:	68 9a b2 13 f0       	push   $0xf013b29a
f01183d0:	e8 30 7e fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f01183d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183db:	8a 00                	mov    (%eax),%al
f01183dd:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01183e0:	75 1c                	jne    f01183fe <test_kmalloc+0xdf5>
f01183e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01183ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183f5:	01 d0                	add    %edx,%eax
f01183f7:	8a 00                	mov    (%eax),%al
f01183f9:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01183fc:	74 17                	je     f0118415 <test_kmalloc+0xe0c>
f01183fe:	83 ec 04             	sub    $0x4,%esp
f0118401:	68 f0 b3 13 f0       	push   $0xf013b3f0
f0118406:	68 b6 00 00 00       	push   $0xb6
f011840b:	68 9a b2 13 f0       	push   $0xf013b29a
f0118410:	e8 f0 7d fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118415:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011841b:	66 8b 40 02          	mov    0x2(%eax),%ax
f011841f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118423:	75 1f                	jne    f0118444 <test_kmalloc+0xe3b>
f0118425:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011842b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118432:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118438:	01 d0                	add    %edx,%eax
f011843a:	66 8b 40 02          	mov    0x2(%eax),%ax
f011843e:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118442:	74 17                	je     f011845b <test_kmalloc+0xe52>
f0118444:	83 ec 04             	sub    $0x4,%esp
f0118447:	68 f0 b3 13 f0       	push   $0xf013b3f0
f011844c:	68 b7 00 00 00       	push   $0xb7
f0118451:	68 9a b2 13 f0       	push   $0xf013b29a
f0118456:	e8 aa 7d fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f011845b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118461:	8b 40 04             	mov    0x4(%eax),%eax
f0118464:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118467:	75 1d                	jne    f0118486 <test_kmalloc+0xe7d>
f0118469:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011846f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118476:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011847c:	01 d0                	add    %edx,%eax
f011847e:	8b 40 04             	mov    0x4(%eax),%eax
f0118481:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118484:	74 17                	je     f011849d <test_kmalloc+0xe94>
f0118486:	83 ec 04             	sub    $0x4,%esp
f0118489:	68 f0 b3 13 f0       	push   $0xf013b3f0
f011848e:	68 b8 00 00 00       	push   $0xb8
f0118493:	68 9a b2 13 f0       	push   $0xf013b29a
f0118498:	e8 68 7d fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011849d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01184a3:	8a 00                	mov    (%eax),%al
f01184a5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01184a8:	75 40                	jne    f01184ea <test_kmalloc+0xee1>
f01184aa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01184b0:	89 c2                	mov    %eax,%edx
f01184b2:	c1 ea 1f             	shr    $0x1f,%edx
f01184b5:	01 d0                	add    %edx,%eax
f01184b7:	d1 f8                	sar    %eax
f01184b9:	89 c2                	mov    %eax,%edx
f01184bb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01184c1:	01 d0                	add    %edx,%eax
f01184c3:	8a 10                	mov    (%eax),%dl
f01184c5:	8a 45 f2             	mov    -0xe(%ebp),%al
f01184c8:	88 c1                	mov    %al,%cl
f01184ca:	c0 e9 07             	shr    $0x7,%cl
f01184cd:	01 c8                	add    %ecx,%eax
f01184cf:	d0 f8                	sar    %al
f01184d1:	38 c2                	cmp    %al,%dl
f01184d3:	75 15                	jne    f01184ea <test_kmalloc+0xee1>
f01184d5:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01184db:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01184e1:	01 d0                	add    %edx,%eax
f01184e3:	8a 00                	mov    (%eax),%al
f01184e5:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01184e8:	74 17                	je     f0118501 <test_kmalloc+0xef8>
f01184ea:	83 ec 04             	sub    $0x4,%esp
f01184ed:	68 f0 b3 13 f0       	push   $0xf013b3f0
f01184f2:	68 ba 00 00 00       	push   $0xba
f01184f7:	68 9a b2 13 f0       	push   $0xf013b29a
f01184fc:	e8 04 7d fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118501:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118507:	66 8b 00             	mov    (%eax),%ax
f011850a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011850e:	75 1b                	jne    f011852b <test_kmalloc+0xf22>
f0118510:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118516:	01 c0                	add    %eax,%eax
f0118518:	89 c2                	mov    %eax,%edx
f011851a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118520:	01 d0                	add    %edx,%eax
f0118522:	66 8b 00             	mov    (%eax),%ax
f0118525:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118529:	74 17                	je     f0118542 <test_kmalloc+0xf39>
f011852b:	83 ec 04             	sub    $0x4,%esp
f011852e:	68 f0 b3 13 f0       	push   $0xf013b3f0
f0118533:	68 bb 00 00 00       	push   $0xbb
f0118538:	68 9a b2 13 f0       	push   $0xf013b29a
f011853d:	e8 c3 7c fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118542:	e8 56 46 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118547:	89 c2                	mov    %eax,%edx
f0118549:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011854c:	39 c2                	cmp    %eax,%edx
f011854e:	74 17                	je     f0118567 <test_kmalloc+0xf5e>
f0118550:	83 ec 04             	sub    $0x4,%esp
f0118553:	68 1c b3 13 f0       	push   $0xf013b31c
f0118558:	68 bd 00 00 00       	push   $0xbd
f011855d:	68 9a b2 13 f0       	push   $0xf013b29a
f0118562:	e8 9e 7c fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118567:	e8 5c b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011856c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011856f:	74 17                	je     f0118588 <test_kmalloc+0xf7f>
f0118571:	83 ec 04             	sub    $0x4,%esp
f0118574:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0118579:	68 be 00 00 00       	push   $0xbe
f011857e:	68 9a b2 13 f0       	push   $0xf013b29a
f0118583:	e8 7d 7c fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118588:	83 ec 0c             	sub    $0xc,%esp
f011858b:	68 25 b4 13 f0       	push   $0xf013b425
f0118590:	e8 79 87 fe ff       	call   f0100d0e <cprintf>
f0118595:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118598:	e8 00 46 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011859d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01185a0:	e8 23 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01185a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f01185a8:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f01185af:	10 00 00 
f01185b2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01185b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185bd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f01185c3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01185c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01185ce:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01185d4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01185da:	29 d0                	sub    %edx,%eax
f01185dc:	89 c1                	mov    %eax,%ecx
f01185de:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01185e5:	10 00 00 
f01185e8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01185ed:	0f b6 d0             	movzbl %al,%edx
f01185f0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01185f6:	01 d0                	add    %edx,%eax
f01185f8:	48                   	dec    %eax
f01185f9:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01185ff:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118605:	ba 00 00 00 00       	mov    $0x0,%edx
f011860a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118610:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118616:	29 d0                	sub    %edx,%eax
f0118618:	01 c1                	add    %eax,%ecx
f011861a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118621:	10 00 00 
f0118624:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118629:	0f b6 c0             	movzbl %al,%eax
f011862c:	c1 e0 04             	shl    $0x4,%eax
f011862f:	89 c2                	mov    %eax,%edx
f0118631:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118637:	01 d0                	add    %edx,%eax
f0118639:	48                   	dec    %eax
f011863a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118640:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118646:	ba 00 00 00 00       	mov    $0x0,%edx
f011864b:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118651:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118657:	29 d0                	sub    %edx,%eax
f0118659:	01 c8                	add    %ecx,%eax
f011865b:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118660:	29 c2                	sub    %eax,%edx
f0118662:	89 d0                	mov    %edx,%eax
f0118664:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011866a:	83 ec 0c             	sub    $0xc,%esp
f011866d:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118673:	e8 0d f2 fe ff       	call   f0107885 <kmalloc>
f0118678:	83 c4 10             	add    $0x10,%esp
f011867b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118681:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118687:	85 c0                	test   %eax,%eax
f0118689:	74 17                	je     f01186a2 <test_kmalloc+0x1099>
f011868b:	83 ec 04             	sub    $0x4,%esp
f011868e:	68 68 b2 13 f0       	push   $0xf013b268
f0118693:	68 c8 00 00 00       	push   $0xc8
f0118698:	68 9a b2 13 f0       	push   $0xf013b29a
f011869d:	e8 63 7b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01186a2:	e8 21 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01186a7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01186aa:	74 17                	je     f01186c3 <test_kmalloc+0x10ba>
f01186ac:	83 ec 04             	sub    $0x4,%esp
f01186af:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01186b4:	68 c9 00 00 00       	push   $0xc9
f01186b9:	68 9a b2 13 f0       	push   $0xf013b29a
f01186be:	e8 42 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01186c3:	e8 d5 44 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01186c8:	89 c2                	mov    %eax,%edx
f01186ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01186cd:	39 c2                	cmp    %eax,%edx
f01186cf:	74 17                	je     f01186e8 <test_kmalloc+0x10df>
f01186d1:	83 ec 04             	sub    $0x4,%esp
f01186d4:	68 1c b3 13 f0       	push   $0xf013b31c
f01186d9:	68 ca 00 00 00       	push   $0xca
f01186de:	68 9a b2 13 f0       	push   $0xf013b29a
f01186e3:	e8 1d 7b fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f01186e8:	83 ec 0c             	sub    $0xc,%esp
f01186eb:	68 2c b4 13 f0       	push   $0xf013b42c
f01186f0:	e8 19 86 fe ff       	call   f0100d0e <cprintf>
f01186f5:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01186f8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01186fe:	05 00 40 00 00       	add    $0x4000,%eax
f0118703:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118709:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118710:	10 00 00 
f0118713:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118719:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011871e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118724:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011872a:	ba 00 00 00 00       	mov    $0x0,%edx
f011872f:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118735:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011873b:	29 d0                	sub    %edx,%eax
f011873d:	89 c1                	mov    %eax,%ecx
f011873f:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118746:	10 00 00 
f0118749:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011874e:	0f b6 d0             	movzbl %al,%edx
f0118751:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118757:	01 d0                	add    %edx,%eax
f0118759:	48                   	dec    %eax
f011875a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118760:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118766:	ba 00 00 00 00       	mov    $0x0,%edx
f011876b:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118771:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118777:	29 d0                	sub    %edx,%eax
f0118779:	01 c1                	add    %eax,%ecx
f011877b:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118782:	10 00 00 
f0118785:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011878a:	0f b6 c0             	movzbl %al,%eax
f011878d:	c1 e0 04             	shl    $0x4,%eax
f0118790:	89 c2                	mov    %eax,%edx
f0118792:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118798:	01 d0                	add    %edx,%eax
f011879a:	48                   	dec    %eax
f011879b:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01187a1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01187a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01187ac:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01187b2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01187b8:	29 d0                	sub    %edx,%eax
f01187ba:	01 c8                	add    %ecx,%eax
f01187bc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01187c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01187c4:	eb 6a                	jmp    f0118830 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f01187c6:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01187cb:	83 ec 04             	sub    $0x4,%esp
f01187ce:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01187d4:	52                   	push   %edx
f01187d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01187d8:	50                   	push   %eax
f01187d9:	e8 d3 e2 fe ff       	call   f0106ab1 <get_page_table>
f01187de:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01187e1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01187e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01187ea:	c1 ea 0c             	shr    $0xc,%edx
f01187ed:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01187f3:	c1 e2 02             	shl    $0x2,%edx
f01187f6:	01 d0                	add    %edx,%eax
f01187f8:	8b 00                	mov    (%eax),%eax
f01187fa:	25 ff 0f 00 00       	and    $0xfff,%eax
f01187ff:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118805:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011880b:	83 e0 04             	and    $0x4,%eax
f011880e:	85 c0                	test   %eax,%eax
f0118810:	74 17                	je     f0118829 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118812:	83 ec 04             	sub    $0x4,%esp
f0118815:	68 34 b4 13 f0       	push   $0xf013b434
f011881a:	68 d7 00 00 00       	push   $0xd7
f011881f:	68 9a b2 13 f0       	push   $0xf013b29a
f0118824:	e8 dc 79 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118829:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118830:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118833:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118839:	72 8b                	jb     f01187c6 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f011883b:	83 ec 0c             	sub    $0xc,%esp
f011883e:	68 7e b4 13 f0       	push   $0xf013b47e
f0118843:	e8 c6 84 fe ff       	call   f0100d0e <cprintf>
f0118848:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f011884b:	83 ec 0c             	sub    $0xc,%esp
f011884e:	68 88 b4 13 f0       	push   $0xf013b488
f0118853:	e8 b6 84 fe ff       	call   f0100d0e <cprintf>
f0118858:	83 c4 10             	add    $0x10,%esp

	return 1;
f011885b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118860:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118863:	5b                   	pop    %ebx
f0118864:	5f                   	pop    %edi
f0118865:	5d                   	pop    %ebp
f0118866:	c3                   	ret    

f0118867 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118867:	55                   	push   %ebp
f0118868:	89 e5                	mov    %esp,%ebp
f011886a:	57                   	push   %edi
f011886b:	53                   	push   %ebx
f011886c:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118872:	83 ec 0c             	sub    $0xc,%esp
f0118875:	68 dc b1 13 f0       	push   $0xf013b1dc
f011887a:	e8 8f 84 fe ff       	call   f0100d0e <cprintf>
f011887f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118882:	83 ec 0c             	sub    $0xc,%esp
f0118885:	68 0c b2 13 f0       	push   $0xf013b20c
f011888a:	e8 7f 84 fe ff       	call   f0100d0e <cprintf>
f011888f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118892:	83 ec 0c             	sub    $0xc,%esp
f0118895:	68 dc b1 13 f0       	push   $0xf013b1dc
f011889a:	e8 6f 84 fe ff       	call   f0100d0e <cprintf>
f011889f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01188a2:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f01188a8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f01188ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01188b2:	89 d7                	mov    %edx,%edi
f01188b4:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f01188b6:	83 ec 0c             	sub    $0xc,%esp
f01188b9:	68 c4 b4 13 f0       	push   $0xf013b4c4
f01188be:	e8 4b 84 fe ff       	call   f0100d0e <cprintf>
f01188c3:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01188c6:	e8 d2 42 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01188cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01188ce:	e8 f5 b4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01188d3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01188d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01188dd:	eb 1f                	jmp    f01188fe <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01188df:	83 ec 0c             	sub    $0xc,%esp
f01188e2:	68 00 00 20 00       	push   $0x200000
f01188e7:	e8 99 ef fe ff       	call   f0107885 <kmalloc>
f01188ec:	83 c4 10             	add    $0x10,%esp
f01188ef:	89 c2                	mov    %eax,%edx
f01188f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01188f4:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01188fb:	ff 45 f4             	incl   -0xc(%ebp)
f01188fe:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118902:	7e db                	jle    f01188df <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118904:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f011890b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011890e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118913:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118919:	ba 00 00 00 00       	mov    $0x0,%edx
f011891e:	f7 75 e8             	divl   -0x18(%ebp)
f0118921:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118924:	29 d0                	sub    %edx,%eax
f0118926:	89 c1                	mov    %eax,%ecx
f0118928:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011892f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118934:	0f b6 d0             	movzbl %al,%edx
f0118937:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011893a:	01 d0                	add    %edx,%eax
f011893c:	48                   	dec    %eax
f011893d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118940:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118943:	ba 00 00 00 00       	mov    $0x0,%edx
f0118948:	f7 75 e0             	divl   -0x20(%ebp)
f011894b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011894e:	29 d0                	sub    %edx,%eax
f0118950:	01 c1                	add    %eax,%ecx
f0118952:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118959:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011895e:	0f b6 c0             	movzbl %al,%eax
f0118961:	c1 e0 04             	shl    $0x4,%eax
f0118964:	89 c2                	mov    %eax,%edx
f0118966:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118969:	01 d0                	add    %edx,%eax
f011896b:	48                   	dec    %eax
f011896c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011896f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118972:	ba 00 00 00 00       	mov    $0x0,%edx
f0118977:	f7 75 d8             	divl   -0x28(%ebp)
f011897a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011897d:	29 d0                	sub    %edx,%eax
f011897f:	01 c8                	add    %ecx,%eax
f0118981:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118986:	29 c2                	sub    %eax,%edx
f0118988:	89 d0                	mov    %edx,%eax
f011898a:	83 ec 0c             	sub    $0xc,%esp
f011898d:	50                   	push   %eax
f011898e:	e8 f2 ee fe ff       	call   f0107885 <kmalloc>
f0118993:	83 c4 10             	add    $0x10,%esp
f0118996:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011899c:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01189a2:	89 c1                	mov    %eax,%ecx
f01189a4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01189ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01189ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01189b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01189b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01189b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01189be:	f7 75 d0             	divl   -0x30(%ebp)
f01189c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01189c4:	29 d0                	sub    %edx,%eax
f01189c6:	89 c3                	mov    %eax,%ebx
f01189c8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01189cf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01189d4:	0f b6 d0             	movzbl %al,%edx
f01189d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01189da:	01 d0                	add    %edx,%eax
f01189dc:	48                   	dec    %eax
f01189dd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01189e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01189e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01189e8:	f7 75 c8             	divl   -0x38(%ebp)
f01189eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01189ee:	29 d0                	sub    %edx,%eax
f01189f0:	01 c3                	add    %eax,%ebx
f01189f2:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01189f9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01189fe:	0f b6 c0             	movzbl %al,%eax
f0118a01:	c1 e0 04             	shl    $0x4,%eax
f0118a04:	89 c2                	mov    %eax,%edx
f0118a06:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118a09:	01 d0                	add    %edx,%eax
f0118a0b:	48                   	dec    %eax
f0118a0c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118a0f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118a12:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a17:	f7 75 c0             	divl   -0x40(%ebp)
f0118a1a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118a1d:	29 d0                	sub    %edx,%eax
f0118a1f:	01 d8                	add    %ebx,%eax
f0118a21:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118a26:	39 c1                	cmp    %eax,%ecx
f0118a28:	0f 85 ed 04 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118a2e:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118a34:	89 c1                	mov    %eax,%ecx
f0118a36:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118a3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118a40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a45:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118a48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a50:	f7 75 b8             	divl   -0x48(%ebp)
f0118a53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118a56:	29 d0                	sub    %edx,%eax
f0118a58:	89 c3                	mov    %eax,%ebx
f0118a5a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118a61:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118a66:	0f b6 d0             	movzbl %al,%edx
f0118a69:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118a6c:	01 d0                	add    %edx,%eax
f0118a6e:	48                   	dec    %eax
f0118a6f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118a72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118a75:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a7a:	f7 75 b0             	divl   -0x50(%ebp)
f0118a7d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118a80:	29 d0                	sub    %edx,%eax
f0118a82:	01 c3                	add    %eax,%ebx
f0118a84:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118a8b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118a90:	0f b6 c0             	movzbl %al,%eax
f0118a93:	c1 e0 04             	shl    $0x4,%eax
f0118a96:	89 c2                	mov    %eax,%edx
f0118a98:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118a9b:	01 d0                	add    %edx,%eax
f0118a9d:	48                   	dec    %eax
f0118a9e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118aa1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118aa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa9:	f7 75 a8             	divl   -0x58(%ebp)
f0118aac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118aaf:	29 d0                	sub    %edx,%eax
f0118ab1:	01 d8                	add    %ebx,%eax
f0118ab3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118ab8:	39 c1                	cmp    %eax,%ecx
f0118aba:	0f 85 5b 04 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118ac0:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118ac6:	89 c1                	mov    %eax,%ecx
f0118ac8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118acf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118ad2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ad7:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118ada:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118add:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae2:	f7 75 a0             	divl   -0x60(%ebp)
f0118ae5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118ae8:	29 d0                	sub    %edx,%eax
f0118aea:	89 c3                	mov    %eax,%ebx
f0118aec:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118af3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118af8:	0f b6 d0             	movzbl %al,%edx
f0118afb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118afe:	01 d0                	add    %edx,%eax
f0118b00:	48                   	dec    %eax
f0118b01:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118b04:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118b07:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b0c:	f7 75 98             	divl   -0x68(%ebp)
f0118b0f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118b12:	29 d0                	sub    %edx,%eax
f0118b14:	01 c3                	add    %eax,%ebx
f0118b16:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118b1d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118b22:	0f b6 c0             	movzbl %al,%eax
f0118b25:	c1 e0 04             	shl    $0x4,%eax
f0118b28:	89 c2                	mov    %eax,%edx
f0118b2a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118b2d:	01 d0                	add    %edx,%eax
f0118b2f:	48                   	dec    %eax
f0118b30:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118b33:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b3b:	f7 75 90             	divl   -0x70(%ebp)
f0118b3e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118b41:	29 d0                	sub    %edx,%eax
f0118b43:	01 d8                	add    %ebx,%eax
f0118b45:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118b4a:	39 c1                	cmp    %eax,%ecx
f0118b4c:	0f 85 c9 03 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118b52:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118b58:	89 c1                	mov    %eax,%ecx
f0118b5a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118b61:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118b64:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b69:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118b6c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118b6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b74:	f7 75 88             	divl   -0x78(%ebp)
f0118b77:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118b7a:	29 d0                	sub    %edx,%eax
f0118b7c:	89 c3                	mov    %eax,%ebx
f0118b7e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118b85:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118b8a:	0f b6 d0             	movzbl %al,%edx
f0118b8d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118b90:	01 d0                	add    %edx,%eax
f0118b92:	48                   	dec    %eax
f0118b93:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118b99:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ba4:	f7 75 80             	divl   -0x80(%ebp)
f0118ba7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118bad:	29 d0                	sub    %edx,%eax
f0118baf:	01 c3                	add    %eax,%ebx
f0118bb1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118bb8:	10 00 00 
f0118bbb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118bc0:	0f b6 c0             	movzbl %al,%eax
f0118bc3:	c1 e0 04             	shl    $0x4,%eax
f0118bc6:	89 c2                	mov    %eax,%edx
f0118bc8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118bce:	01 d0                	add    %edx,%eax
f0118bd0:	48                   	dec    %eax
f0118bd1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118bd7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118be2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118be8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bee:	29 d0                	sub    %edx,%eax
f0118bf0:	01 d8                	add    %ebx,%eax
f0118bf2:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118bf7:	39 c1                	cmp    %eax,%ecx
f0118bf9:	0f 85 1c 03 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118bff:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118c05:	89 c1                	mov    %eax,%ecx
f0118c07:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118c0e:	10 00 00 
f0118c11:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118c17:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c1c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118c22:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c2d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118c33:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118c39:	29 d0                	sub    %edx,%eax
f0118c3b:	89 c3                	mov    %eax,%ebx
f0118c3d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118c44:	10 00 00 
f0118c47:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118c4c:	0f b6 d0             	movzbl %al,%edx
f0118c4f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118c55:	01 d0                	add    %edx,%eax
f0118c57:	48                   	dec    %eax
f0118c58:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118c5e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c69:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118c6f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118c75:	29 d0                	sub    %edx,%eax
f0118c77:	01 c3                	add    %eax,%ebx
f0118c79:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118c80:	10 00 00 
f0118c83:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118c88:	0f b6 c0             	movzbl %al,%eax
f0118c8b:	c1 e0 04             	shl    $0x4,%eax
f0118c8e:	89 c2                	mov    %eax,%edx
f0118c90:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118c96:	01 d0                	add    %edx,%eax
f0118c98:	48                   	dec    %eax
f0118c99:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118c9f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118ca5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118caa:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118cb0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118cb6:	29 d0                	sub    %edx,%eax
f0118cb8:	01 d8                	add    %ebx,%eax
f0118cba:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118cbf:	39 c1                	cmp    %eax,%ecx
f0118cc1:	0f 85 54 02 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118cc7:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118ccd:	89 c1                	mov    %eax,%ecx
f0118ccf:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118cd6:	10 00 00 
f0118cd9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118cdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ce4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118cea:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118cf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cf5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118cfb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118d01:	29 d0                	sub    %edx,%eax
f0118d03:	89 c3                	mov    %eax,%ebx
f0118d05:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118d0c:	10 00 00 
f0118d0f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118d14:	0f b6 d0             	movzbl %al,%edx
f0118d17:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118d1d:	01 d0                	add    %edx,%eax
f0118d1f:	48                   	dec    %eax
f0118d20:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118d26:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d31:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118d37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118d3d:	29 d0                	sub    %edx,%eax
f0118d3f:	01 c3                	add    %eax,%ebx
f0118d41:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118d48:	10 00 00 
f0118d4b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118d50:	0f b6 c0             	movzbl %al,%eax
f0118d53:	c1 e0 04             	shl    $0x4,%eax
f0118d56:	89 c2                	mov    %eax,%edx
f0118d58:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118d5e:	01 d0                	add    %edx,%eax
f0118d60:	48                   	dec    %eax
f0118d61:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118d67:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d72:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118d78:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d7e:	29 d0                	sub    %edx,%eax
f0118d80:	01 d8                	add    %ebx,%eax
f0118d82:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118d87:	39 c1                	cmp    %eax,%ecx
f0118d89:	0f 85 8c 01 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118d8f:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118d95:	89 c1                	mov    %eax,%ecx
f0118d97:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118d9e:	10 00 00 
f0118da1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118da7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118dac:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118db2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dbd:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118dc3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118dc9:	29 d0                	sub    %edx,%eax
f0118dcb:	89 c3                	mov    %eax,%ebx
f0118dcd:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118dd4:	10 00 00 
f0118dd7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118ddc:	0f b6 d0             	movzbl %al,%edx
f0118ddf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118de5:	01 d0                	add    %edx,%eax
f0118de7:	48                   	dec    %eax
f0118de8:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118dee:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118df9:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118dff:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118e05:	29 d0                	sub    %edx,%eax
f0118e07:	01 c3                	add    %eax,%ebx
f0118e09:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118e10:	10 00 00 
f0118e13:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118e18:	0f b6 c0             	movzbl %al,%eax
f0118e1b:	c1 e0 04             	shl    $0x4,%eax
f0118e1e:	89 c2                	mov    %eax,%edx
f0118e20:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e26:	01 d0                	add    %edx,%eax
f0118e28:	48                   	dec    %eax
f0118e29:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118e2f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e3a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118e40:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118e46:	29 d0                	sub    %edx,%eax
f0118e48:	01 d8                	add    %ebx,%eax
f0118e4a:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118e4f:	39 c1                	cmp    %eax,%ecx
f0118e51:	0f 85 c4 00 00 00    	jne    f0118f1b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118e57:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118e5d:	89 c1                	mov    %eax,%ecx
f0118e5f:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118e66:	10 00 00 
f0118e69:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e74:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118e7a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e85:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118e8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e91:	29 d0                	sub    %edx,%eax
f0118e93:	89 c3                	mov    %eax,%ebx
f0118e95:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118e9c:	10 00 00 
f0118e9f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118ea4:	0f b6 d0             	movzbl %al,%edx
f0118ea7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118ead:	01 d0                	add    %edx,%eax
f0118eaf:	48                   	dec    %eax
f0118eb0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118eb6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ec1:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118ec7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ecd:	29 d0                	sub    %edx,%eax
f0118ecf:	01 c3                	add    %eax,%ebx
f0118ed1:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118ed8:	10 00 00 
f0118edb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118ee0:	0f b6 c0             	movzbl %al,%eax
f0118ee3:	c1 e0 04             	shl    $0x4,%eax
f0118ee6:	89 c2                	mov    %eax,%edx
f0118ee8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118eee:	01 d0                	add    %edx,%eax
f0118ef0:	48                   	dec    %eax
f0118ef1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118ef7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118efd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f02:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118f08:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118f0e:	29 d0                	sub    %edx,%eax
f0118f10:	01 d8                	add    %ebx,%eax
f0118f12:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118f17:	39 c1                	cmp    %eax,%ecx
f0118f19:	74 17                	je     f0118f32 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118f1b:	83 ec 04             	sub    $0x4,%esp
f0118f1e:	68 14 b5 13 f0       	push   $0xf013b514
f0118f23:	68 03 01 00 00       	push   $0x103
f0118f28:	68 9a b2 13 f0       	push   $0xf013b29a
f0118f2d:	e8 d3 72 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f32:	e8 91 ae fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118f37:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f3a:	74 17                	je     f0118f53 <test_kmalloc_nextfit+0x6ec>
f0118f3c:	83 ec 04             	sub    $0x4,%esp
f0118f3f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0118f44:	68 05 01 00 00       	push   $0x105
f0118f49:	68 9a b2 13 f0       	push   $0xf013b29a
f0118f4e:	e8 b2 72 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118f53:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f56:	e8 42 3c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118f5b:	29 c3                	sub    %eax,%ebx
f0118f5d:	89 d9                	mov    %ebx,%ecx
f0118f5f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118f66:	10 00 00 
f0118f69:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118f6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f74:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118f7a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f85:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118f8b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118f91:	29 d0                	sub    %edx,%eax
f0118f93:	89 c3                	mov    %eax,%ebx
f0118f95:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118f9c:	10 00 00 
f0118f9f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118fa4:	0f b6 d0             	movzbl %al,%edx
f0118fa7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118fad:	01 d0                	add    %edx,%eax
f0118faf:	48                   	dec    %eax
f0118fb0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118fb6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118fbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fc1:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118fc7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118fcd:	29 d0                	sub    %edx,%eax
f0118fcf:	01 c3                	add    %eax,%ebx
f0118fd1:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118fd8:	10 00 00 
f0118fdb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118fe0:	0f b6 c0             	movzbl %al,%eax
f0118fe3:	c1 e0 04             	shl    $0x4,%eax
f0118fe6:	89 c2                	mov    %eax,%edx
f0118fe8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118fee:	01 d0                	add    %edx,%eax
f0118ff0:	48                   	dec    %eax
f0118ff1:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118ff7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118ffd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119002:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0119008:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011900e:	29 d0                	sub    %edx,%eax
f0119010:	01 d8                	add    %ebx,%eax
f0119012:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119017:	29 c2                	sub    %eax,%edx
f0119019:	89 d0                	mov    %edx,%eax
f011901b:	c1 e8 0c             	shr    $0xc,%eax
f011901e:	39 c1                	cmp    %eax,%ecx
f0119020:	74 17                	je     f0119039 <test_kmalloc_nextfit+0x7d2>
f0119022:	83 ec 04             	sub    $0x4,%esp
f0119025:	68 57 b5 13 f0       	push   $0xf013b557
f011902a:	68 06 01 00 00       	push   $0x106
f011902f:	68 9a b2 13 f0       	push   $0xf013b29a
f0119034:	e8 cc 71 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119039:	e8 8a ad fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011903e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119041:	e8 57 3b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119046:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119049:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011904f:	83 ec 0c             	sub    $0xc,%esp
f0119052:	50                   	push   %eax
f0119053:	e8 f8 e8 fe ff       	call   f0107950 <kfree>
f0119058:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011905b:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0119061:	83 ec 0c             	sub    $0xc,%esp
f0119064:	50                   	push   %eax
f0119065:	e8 e6 e8 fe ff       	call   f0107950 <kfree>
f011906a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011906d:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0119073:	83 ec 0c             	sub    $0xc,%esp
f0119076:	50                   	push   %eax
f0119077:	e8 d4 e8 fe ff       	call   f0107950 <kfree>
f011907c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011907f:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119085:	83 ec 0c             	sub    $0xc,%esp
f0119088:	50                   	push   %eax
f0119089:	e8 c2 e8 fe ff       	call   f0107950 <kfree>
f011908e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119091:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119097:	83 ec 0c             	sub    $0xc,%esp
f011909a:	50                   	push   %eax
f011909b:	e8 b0 e8 fe ff       	call   f0107950 <kfree>
f01190a0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01190a3:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f01190a9:	83 ec 0c             	sub    $0xc,%esp
f01190ac:	50                   	push   %eax
f01190ad:	e8 9e e8 fe ff       	call   f0107950 <kfree>
f01190b2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01190b5:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01190bb:	83 ec 0c             	sub    $0xc,%esp
f01190be:	50                   	push   %eax
f01190bf:	e8 8c e8 fe ff       	call   f0107950 <kfree>
f01190c4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01190c7:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01190cd:	83 ec 0c             	sub    $0xc,%esp
f01190d0:	50                   	push   %eax
f01190d1:	e8 7a e8 fe ff       	call   f0107950 <kfree>
f01190d6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01190d9:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01190df:	83 ec 0c             	sub    $0xc,%esp
f01190e2:	50                   	push   %eax
f01190e3:	e8 68 e8 fe ff       	call   f0107950 <kfree>
f01190e8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01190eb:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01190f1:	83 ec 0c             	sub    $0xc,%esp
f01190f4:	50                   	push   %eax
f01190f5:	e8 56 e8 fe ff       	call   f0107950 <kfree>
f01190fa:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190fd:	e8 c6 ac fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119102:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119105:	74 17                	je     f011911e <test_kmalloc_nextfit+0x8b7>
f0119107:	83 ec 04             	sub    $0x4,%esp
f011910a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011910f:	68 17 01 00 00       	push   $0x117
f0119114:	68 9a b2 13 f0       	push   $0xf013b29a
f0119119:	e8 e7 70 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011911e:	e8 7a 3a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119123:	89 c2                	mov    %eax,%edx
f0119125:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119128:	89 d1                	mov    %edx,%ecx
f011912a:	29 c1                	sub    %eax,%ecx
f011912c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119133:	10 00 00 
f0119136:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011913c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119141:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119147:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011914d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119152:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119158:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011915e:	29 d0                	sub    %edx,%eax
f0119160:	89 c3                	mov    %eax,%ebx
f0119162:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119169:	10 00 00 
f011916c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119171:	0f b6 d0             	movzbl %al,%edx
f0119174:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011917a:	01 d0                	add    %edx,%eax
f011917c:	48                   	dec    %eax
f011917d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119183:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119189:	ba 00 00 00 00       	mov    $0x0,%edx
f011918e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119194:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011919a:	29 d0                	sub    %edx,%eax
f011919c:	01 c3                	add    %eax,%ebx
f011919e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01191a5:	10 00 00 
f01191a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01191ad:	0f b6 c0             	movzbl %al,%eax
f01191b0:	c1 e0 04             	shl    $0x4,%eax
f01191b3:	89 c2                	mov    %eax,%edx
f01191b5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01191bb:	01 d0                	add    %edx,%eax
f01191bd:	48                   	dec    %eax
f01191be:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01191c4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01191ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01191cf:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01191d5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01191db:	29 d0                	sub    %edx,%eax
f01191dd:	01 d8                	add    %ebx,%eax
f01191df:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01191e4:	29 c2                	sub    %eax,%edx
f01191e6:	89 d0                	mov    %edx,%eax
f01191e8:	c1 e8 0c             	shr    $0xc,%eax
f01191eb:	39 c1                	cmp    %eax,%ecx
f01191ed:	74 17                	je     f0119206 <test_kmalloc_nextfit+0x99f>
f01191ef:	83 ec 04             	sub    $0x4,%esp
f01191f2:	68 68 b5 13 f0       	push   $0xf013b568
f01191f7:	68 18 01 00 00       	push   $0x118
f01191fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0119201:	e8 ff 6f fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119206:	e8 bd ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011920b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011920e:	e8 8a 39 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119213:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119216:	83 ec 0c             	sub    $0xc,%esp
f0119219:	68 00 fc 0f 00       	push   $0xffc00
f011921e:	e8 62 e6 fe ff       	call   f0107885 <kmalloc>
f0119223:	83 c4 10             	add    $0x10,%esp
f0119226:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011922c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119233:	10 00 00 
f0119236:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011923c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119241:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119247:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011924d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119252:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119258:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011925e:	29 d0                	sub    %edx,%eax
f0119260:	89 c1                	mov    %eax,%ecx
f0119262:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119269:	10 00 00 
f011926c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119271:	0f b6 d0             	movzbl %al,%edx
f0119274:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011927a:	01 d0                	add    %edx,%eax
f011927c:	48                   	dec    %eax
f011927d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119283:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119289:	ba 00 00 00 00       	mov    $0x0,%edx
f011928e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119294:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011929a:	29 d0                	sub    %edx,%eax
f011929c:	01 c1                	add    %eax,%ecx
f011929e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01192a5:	10 00 00 
f01192a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01192ad:	0f b6 c0             	movzbl %al,%eax
f01192b0:	c1 e0 04             	shl    $0x4,%eax
f01192b3:	89 c2                	mov    %eax,%edx
f01192b5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01192bb:	01 d0                	add    %edx,%eax
f01192bd:	48                   	dec    %eax
f01192be:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01192c4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01192ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01192cf:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01192d5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01192db:	29 d0                	sub    %edx,%eax
f01192dd:	01 c8                	add    %ecx,%eax
f01192df:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f01192e5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01192eb:	39 c2                	cmp    %eax,%edx
f01192ed:	74 17                	je     f0119306 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f01192ef:	83 ec 04             	sub    $0x4,%esp
f01192f2:	68 a8 b5 13 f0       	push   $0xf013b5a8
f01192f7:	68 1f 01 00 00       	push   $0x11f
f01192fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0119301:	e8 ff 6e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119306:	e8 bd aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011930b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011930e:	74 17                	je     f0119327 <test_kmalloc_nextfit+0xac0>
f0119310:	83 ec 04             	sub    $0x4,%esp
f0119313:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119318:	68 20 01 00 00       	push   $0x120
f011931d:	68 9a b2 13 f0       	push   $0xf013b29a
f0119322:	e8 de 6e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119327:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011932a:	e8 6e 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011932f:	29 c3                	sub    %eax,%ebx
f0119331:	89 d8                	mov    %ebx,%eax
f0119333:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119338:	74 17                	je     f0119351 <test_kmalloc_nextfit+0xaea>
f011933a:	83 ec 04             	sub    $0x4,%esp
f011933d:	68 57 b5 13 f0       	push   $0xf013b557
f0119342:	68 21 01 00 00       	push   $0x121
f0119347:	68 9a b2 13 f0       	push   $0xf013b29a
f011934c:	e8 b4 6e fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119351:	e8 72 aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119356:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119359:	e8 3f 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011935e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119361:	83 ec 0c             	sub    $0xc,%esp
f0119364:	68 00 04 00 00       	push   $0x400
f0119369:	e8 17 e5 fe ff       	call   f0107885 <kmalloc>
f011936e:	83 c4 10             	add    $0x10,%esp
f0119371:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119377:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011937e:	10 00 00 
f0119381:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119387:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011938c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119392:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119398:	ba 00 00 00 00       	mov    $0x0,%edx
f011939d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01193a3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01193a9:	29 d0                	sub    %edx,%eax
f01193ab:	89 c1                	mov    %eax,%ecx
f01193ad:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01193b4:	10 00 00 
f01193b7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01193bc:	0f b6 d0             	movzbl %al,%edx
f01193bf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01193c5:	01 d0                	add    %edx,%eax
f01193c7:	48                   	dec    %eax
f01193c8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01193ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01193d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01193df:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01193e5:	29 d0                	sub    %edx,%eax
f01193e7:	01 c1                	add    %eax,%ecx
f01193e9:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01193f0:	10 00 00 
f01193f3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01193f8:	0f b6 c0             	movzbl %al,%eax
f01193fb:	c1 e0 04             	shl    $0x4,%eax
f01193fe:	89 c2                	mov    %eax,%edx
f0119400:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119406:	01 d0                	add    %edx,%eax
f0119408:	48                   	dec    %eax
f0119409:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011940f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119415:	ba 00 00 00 00       	mov    $0x0,%edx
f011941a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119420:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119426:	29 d0                	sub    %edx,%eax
f0119428:	01 c8                	add    %ecx,%eax
f011942a:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119430:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119436:	39 c2                	cmp    %eax,%edx
f0119438:	74 17                	je     f0119451 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f011943a:	83 ec 04             	sub    $0x4,%esp
f011943d:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119442:	68 27 01 00 00       	push   $0x127
f0119447:	68 9a b2 13 f0       	push   $0xf013b29a
f011944c:	e8 b4 6d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119451:	e8 72 a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119456:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119459:	74 17                	je     f0119472 <test_kmalloc_nextfit+0xc0b>
f011945b:	83 ec 04             	sub    $0x4,%esp
f011945e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119463:	68 28 01 00 00       	push   $0x128
f0119468:	68 9a b2 13 f0       	push   $0xf013b29a
f011946d:	e8 93 6d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119472:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119475:	e8 23 37 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011947a:	29 c3                	sub    %eax,%ebx
f011947c:	89 d8                	mov    %ebx,%eax
f011947e:	83 f8 01             	cmp    $0x1,%eax
f0119481:	74 17                	je     f011949a <test_kmalloc_nextfit+0xc33>
f0119483:	83 ec 04             	sub    $0x4,%esp
f0119486:	68 57 b5 13 f0       	push   $0xf013b557
f011948b:	68 29 01 00 00       	push   $0x129
f0119490:	68 9a b2 13 f0       	push   $0xf013b29a
f0119495:	e8 6b 6d fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011949a:	e8 29 a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011949f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194a2:	e8 f6 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01194a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f01194aa:	83 ec 0c             	sub    $0xc,%esp
f01194ad:	68 00 00 50 00       	push   $0x500000
f01194b2:	e8 ce e3 fe ff       	call   f0107885 <kmalloc>
f01194b7:	83 c4 10             	add    $0x10,%esp
f01194ba:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f01194c0:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f01194c7:	10 00 00 
f01194ca:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01194d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194d5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f01194db:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01194e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01194e6:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f01194ec:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01194f2:	29 d0                	sub    %edx,%eax
f01194f4:	89 c1                	mov    %eax,%ecx
f01194f6:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01194fd:	10 00 00 
f0119500:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119505:	0f b6 d0             	movzbl %al,%edx
f0119508:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011950e:	01 d0                	add    %edx,%eax
f0119510:	48                   	dec    %eax
f0119511:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119517:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011951d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119522:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119528:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011952e:	29 d0                	sub    %edx,%eax
f0119530:	01 c1                	add    %eax,%ecx
f0119532:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119539:	10 00 00 
f011953c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119541:	0f b6 c0             	movzbl %al,%eax
f0119544:	c1 e0 04             	shl    $0x4,%eax
f0119547:	89 c2                	mov    %eax,%edx
f0119549:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011954f:	01 d0                	add    %edx,%eax
f0119551:	48                   	dec    %eax
f0119552:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119558:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011955e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119563:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119569:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011956f:	29 d0                	sub    %edx,%eax
f0119571:	01 c8                	add    %ecx,%eax
f0119573:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119579:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011957f:	39 c2                	cmp    %eax,%edx
f0119581:	74 17                	je     f011959a <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119583:	83 ec 04             	sub    $0x4,%esp
f0119586:	68 a8 b5 13 f0       	push   $0xf013b5a8
f011958b:	68 2f 01 00 00       	push   $0x12f
f0119590:	68 9a b2 13 f0       	push   $0xf013b29a
f0119595:	e8 6b 6c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011959a:	e8 29 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011959f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01195a2:	74 17                	je     f01195bb <test_kmalloc_nextfit+0xd54>
f01195a4:	83 ec 04             	sub    $0x4,%esp
f01195a7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01195ac:	68 30 01 00 00       	push   $0x130
f01195b1:	68 9a b2 13 f0       	push   $0xf013b29a
f01195b6:	e8 4a 6c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01195bb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01195be:	e8 da 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01195c3:	29 c3                	sub    %eax,%ebx
f01195c5:	89 d8                	mov    %ebx,%eax
f01195c7:	3d 00 05 00 00       	cmp    $0x500,%eax
f01195cc:	74 17                	je     f01195e5 <test_kmalloc_nextfit+0xd7e>
f01195ce:	83 ec 04             	sub    $0x4,%esp
f01195d1:	68 57 b5 13 f0       	push   $0xf013b557
f01195d6:	68 31 01 00 00       	push   $0x131
f01195db:	68 9a b2 13 f0       	push   $0xf013b29a
f01195e0:	e8 20 6c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01195e5:	e8 de a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01195ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01195ed:	e8 ab 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01195f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f01195f5:	83 ec 0c             	sub    $0xc,%esp
f01195f8:	68 00 00 10 00       	push   $0x100000
f01195fd:	e8 83 e2 fe ff       	call   f0107885 <kmalloc>
f0119602:	83 c4 10             	add    $0x10,%esp
f0119605:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011960b:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119612:	10 00 00 
f0119615:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011961b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119620:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119626:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011962c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119631:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119637:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011963d:	29 d0                	sub    %edx,%eax
f011963f:	89 c1                	mov    %eax,%ecx
f0119641:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119648:	10 00 00 
f011964b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119650:	0f b6 d0             	movzbl %al,%edx
f0119653:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119659:	01 d0                	add    %edx,%eax
f011965b:	48                   	dec    %eax
f011965c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119662:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119668:	ba 00 00 00 00       	mov    $0x0,%edx
f011966d:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119673:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119679:	29 d0                	sub    %edx,%eax
f011967b:	01 c1                	add    %eax,%ecx
f011967d:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119684:	10 00 00 
f0119687:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011968c:	0f b6 c0             	movzbl %al,%eax
f011968f:	c1 e0 04             	shl    $0x4,%eax
f0119692:	89 c2                	mov    %eax,%edx
f0119694:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011969a:	01 d0                	add    %edx,%eax
f011969c:	48                   	dec    %eax
f011969d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f01196a3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01196a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01196ae:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f01196b4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01196ba:	29 d0                	sub    %edx,%eax
f01196bc:	01 c8                	add    %ecx,%eax
f01196be:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f01196c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01196ca:	39 c2                	cmp    %eax,%edx
f01196cc:	74 17                	je     f01196e5 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f01196ce:	83 ec 04             	sub    $0x4,%esp
f01196d1:	68 a8 b5 13 f0       	push   $0xf013b5a8
f01196d6:	68 37 01 00 00       	push   $0x137
f01196db:	68 9a b2 13 f0       	push   $0xf013b29a
f01196e0:	e8 20 6b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196e5:	e8 de a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01196ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01196ed:	74 17                	je     f0119706 <test_kmalloc_nextfit+0xe9f>
f01196ef:	83 ec 04             	sub    $0x4,%esp
f01196f2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01196f7:	68 38 01 00 00       	push   $0x138
f01196fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0119701:	e8 ff 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119706:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119709:	e8 8f 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011970e:	29 c3                	sub    %eax,%ebx
f0119710:	89 d8                	mov    %ebx,%eax
f0119712:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119717:	74 17                	je     f0119730 <test_kmalloc_nextfit+0xec9>
f0119719:	83 ec 04             	sub    $0x4,%esp
f011971c:	68 57 b5 13 f0       	push   $0xf013b557
f0119721:	68 39 01 00 00       	push   $0x139
f0119726:	68 9a b2 13 f0       	push   $0xf013b29a
f011972b:	e8 d5 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119730:	e8 93 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119735:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119738:	e8 60 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011973d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119740:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119746:	83 ec 0c             	sub    $0xc,%esp
f0119749:	50                   	push   %eax
f011974a:	e8 01 e2 fe ff       	call   f0107950 <kfree>
f011974f:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119752:	e8 71 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119757:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011975a:	74 17                	je     f0119773 <test_kmalloc_nextfit+0xf0c>
f011975c:	83 ec 04             	sub    $0x4,%esp
f011975f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119764:	68 3e 01 00 00       	push   $0x13e
f0119769:	68 9a b2 13 f0       	push   $0xf013b29a
f011976e:	e8 92 6a fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119773:	e8 25 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119778:	89 c2                	mov    %eax,%edx
f011977a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011977d:	29 c2                	sub    %eax,%edx
f011977f:	89 d0                	mov    %edx,%eax
f0119781:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119786:	74 17                	je     f011979f <test_kmalloc_nextfit+0xf38>
f0119788:	83 ec 04             	sub    $0x4,%esp
f011978b:	68 68 b5 13 f0       	push   $0xf013b568
f0119790:	68 3f 01 00 00       	push   $0x13f
f0119795:	68 9a b2 13 f0       	push   $0xf013b29a
f011979a:	e8 66 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011979f:	e8 24 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197a7:	e8 f1 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01197ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f01197af:	83 ec 0c             	sub    $0xc,%esp
f01197b2:	68 00 04 00 00       	push   $0x400
f01197b7:	e8 c9 e0 fe ff       	call   f0107885 <kmalloc>
f01197bc:	83 c4 10             	add    $0x10,%esp
f01197bf:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f01197c5:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f01197cc:	10 00 00 
f01197cf:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01197d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01197da:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f01197e0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01197e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01197eb:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f01197f1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01197f7:	29 d0                	sub    %edx,%eax
f01197f9:	89 c1                	mov    %eax,%ecx
f01197fb:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119802:	10 00 00 
f0119805:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011980a:	0f b6 d0             	movzbl %al,%edx
f011980d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119813:	01 d0                	add    %edx,%eax
f0119815:	48                   	dec    %eax
f0119816:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011981c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119822:	ba 00 00 00 00       	mov    $0x0,%edx
f0119827:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011982d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119833:	29 d0                	sub    %edx,%eax
f0119835:	01 c1                	add    %eax,%ecx
f0119837:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011983e:	10 00 00 
f0119841:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119846:	0f b6 c0             	movzbl %al,%eax
f0119849:	c1 e0 04             	shl    $0x4,%eax
f011984c:	89 c2                	mov    %eax,%edx
f011984e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119854:	01 d0                	add    %edx,%eax
f0119856:	48                   	dec    %eax
f0119857:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011985d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119863:	ba 00 00 00 00       	mov    $0x0,%edx
f0119868:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011986e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119874:	29 d0                	sub    %edx,%eax
f0119876:	01 c8                	add    %ecx,%eax
f0119878:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011987e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119884:	39 c2                	cmp    %eax,%edx
f0119886:	74 17                	je     f011989f <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119888:	83 ec 04             	sub    $0x4,%esp
f011988b:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119890:	68 45 01 00 00       	push   $0x145
f0119895:	68 9a b2 13 f0       	push   $0xf013b29a
f011989a:	e8 66 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011989f:	e8 24 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198a7:	74 17                	je     f01198c0 <test_kmalloc_nextfit+0x1059>
f01198a9:	83 ec 04             	sub    $0x4,%esp
f01198ac:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01198b1:	68 46 01 00 00       	push   $0x146
f01198b6:	68 9a b2 13 f0       	push   $0xf013b29a
f01198bb:	e8 45 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01198c0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198c3:	e8 d5 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01198c8:	29 c3                	sub    %eax,%ebx
f01198ca:	89 d8                	mov    %ebx,%eax
f01198cc:	83 f8 01             	cmp    $0x1,%eax
f01198cf:	74 17                	je     f01198e8 <test_kmalloc_nextfit+0x1081>
f01198d1:	83 ec 04             	sub    $0x4,%esp
f01198d4:	68 57 b5 13 f0       	push   $0xf013b557
f01198d9:	68 47 01 00 00       	push   $0x147
f01198de:	68 9a b2 13 f0       	push   $0xf013b29a
f01198e3:	e8 1d 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01198e8:	e8 db a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198f0:	e8 a8 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01198f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01198f8:	83 ec 0c             	sub    $0xc,%esp
f01198fb:	68 00 e0 1f 00       	push   $0x1fe000
f0119900:	e8 80 df fe ff       	call   f0107885 <kmalloc>
f0119905:	83 c4 10             	add    $0x10,%esp
f0119908:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011990e:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119915:	10 00 00 
f0119918:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011991e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119923:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119929:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011992f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119934:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011993a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119940:	29 d0                	sub    %edx,%eax
f0119942:	89 c1                	mov    %eax,%ecx
f0119944:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011994b:	10 00 00 
f011994e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119953:	0f b6 d0             	movzbl %al,%edx
f0119956:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011995c:	01 d0                	add    %edx,%eax
f011995e:	48                   	dec    %eax
f011995f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119965:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011996b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119970:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119976:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011997c:	29 d0                	sub    %edx,%eax
f011997e:	01 c1                	add    %eax,%ecx
f0119980:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119987:	10 00 00 
f011998a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011998f:	0f b6 c0             	movzbl %al,%eax
f0119992:	c1 e0 04             	shl    $0x4,%eax
f0119995:	89 c2                	mov    %eax,%edx
f0119997:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011999d:	01 d0                	add    %edx,%eax
f011999f:	48                   	dec    %eax
f01199a0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01199a6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01199ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b1:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01199b7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01199bd:	29 d0                	sub    %edx,%eax
f01199bf:	01 c8                	add    %ecx,%eax
f01199c1:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f01199c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01199cd:	39 c2                	cmp    %eax,%edx
f01199cf:	74 17                	je     f01199e8 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f01199d1:	83 ec 04             	sub    $0x4,%esp
f01199d4:	68 a8 b5 13 f0       	push   $0xf013b5a8
f01199d9:	68 4d 01 00 00       	push   $0x14d
f01199de:	68 9a b2 13 f0       	push   $0xf013b29a
f01199e3:	e8 1d 68 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199e8:	e8 db a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01199ed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199f0:	74 17                	je     f0119a09 <test_kmalloc_nextfit+0x11a2>
f01199f2:	83 ec 04             	sub    $0x4,%esp
f01199f5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01199fa:	68 4e 01 00 00       	push   $0x14e
f01199ff:	68 9a b2 13 f0       	push   $0xf013b29a
f0119a04:	e8 fc 67 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119a09:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a0c:	e8 8c 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a11:	29 c3                	sub    %eax,%ebx
f0119a13:	89 d8                	mov    %ebx,%eax
f0119a15:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119a1a:	74 17                	je     f0119a33 <test_kmalloc_nextfit+0x11cc>
f0119a1c:	83 ec 04             	sub    $0x4,%esp
f0119a1f:	68 57 b5 13 f0       	push   $0xf013b557
f0119a24:	68 50 01 00 00       	push   $0x150
f0119a29:	68 9a b2 13 f0       	push   $0xf013b29a
f0119a2e:	e8 d2 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a33:	e8 90 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a38:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a3b:	e8 5d 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a40:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119a43:	83 ec 0c             	sub    $0xc,%esp
f0119a46:	68 00 00 08 00       	push   $0x80000
f0119a4b:	e8 35 de fe ff       	call   f0107885 <kmalloc>
f0119a50:	83 c4 10             	add    $0x10,%esp
f0119a53:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119a59:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119a60:	10 00 00 
f0119a63:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119a69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a6e:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119a74:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a7f:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119a85:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119a8b:	29 d0                	sub    %edx,%eax
f0119a8d:	89 c1                	mov    %eax,%ecx
f0119a8f:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119a96:	10 00 00 
f0119a99:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119a9e:	0f b6 d0             	movzbl %al,%edx
f0119aa1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119aa7:	01 d0                	add    %edx,%eax
f0119aa9:	48                   	dec    %eax
f0119aaa:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119ab0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119ab6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119abb:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119ac1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119ac7:	29 d0                	sub    %edx,%eax
f0119ac9:	01 c1                	add    %eax,%ecx
f0119acb:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119ad2:	10 00 00 
f0119ad5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119ada:	0f b6 c0             	movzbl %al,%eax
f0119add:	c1 e0 04             	shl    $0x4,%eax
f0119ae0:	89 c2                	mov    %eax,%edx
f0119ae2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119ae8:	01 d0                	add    %edx,%eax
f0119aea:	48                   	dec    %eax
f0119aeb:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119af1:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119af7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119afc:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119b02:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119b08:	29 d0                	sub    %edx,%eax
f0119b0a:	01 c8                	add    %ecx,%eax
f0119b0c:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119b12:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b18:	39 c2                	cmp    %eax,%edx
f0119b1a:	74 17                	je     f0119b33 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119b1c:	83 ec 04             	sub    $0x4,%esp
f0119b1f:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119b24:	68 56 01 00 00       	push   $0x156
f0119b29:	68 9a b2 13 f0       	push   $0xf013b29a
f0119b2e:	e8 d2 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b33:	e8 90 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b38:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b3b:	74 17                	je     f0119b54 <test_kmalloc_nextfit+0x12ed>
f0119b3d:	83 ec 04             	sub    $0x4,%esp
f0119b40:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119b45:	68 57 01 00 00       	push   $0x157
f0119b4a:	68 9a b2 13 f0       	push   $0xf013b29a
f0119b4f:	e8 b1 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119b54:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b57:	e8 41 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119b5c:	29 c3                	sub    %eax,%ebx
f0119b5e:	89 d8                	mov    %ebx,%eax
f0119b60:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119b65:	74 17                	je     f0119b7e <test_kmalloc_nextfit+0x1317>
f0119b67:	83 ec 04             	sub    $0x4,%esp
f0119b6a:	68 57 b5 13 f0       	push   $0xf013b557
f0119b6f:	68 58 01 00 00       	push   $0x158
f0119b74:	68 9a b2 13 f0       	push   $0xf013b29a
f0119b79:	e8 87 66 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119b7e:	83 ec 0c             	sub    $0xc,%esp
f0119b81:	68 c8 b5 13 f0       	push   $0xf013b5c8
f0119b86:	e8 83 71 fe ff       	call   f0100d0e <cprintf>
f0119b8b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b8e:	e8 35 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b93:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b96:	e8 02 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119b9e:	83 ec 0c             	sub    $0xc,%esp
f0119ba1:	68 00 00 38 00       	push   $0x380000
f0119ba6:	e8 da dc fe ff       	call   f0107885 <kmalloc>
f0119bab:	83 c4 10             	add    $0x10,%esp
f0119bae:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119bb4:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119bbb:	10 00 00 
f0119bbe:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119bc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bc9:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119bcf:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119bd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bda:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119be0:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119be6:	29 d0                	sub    %edx,%eax
f0119be8:	89 c1                	mov    %eax,%ecx
f0119bea:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119bf1:	10 00 00 
f0119bf4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119bf9:	0f b6 d0             	movzbl %al,%edx
f0119bfc:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119c02:	01 d0                	add    %edx,%eax
f0119c04:	48                   	dec    %eax
f0119c05:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119c0b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119c11:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c16:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119c1c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119c22:	29 d0                	sub    %edx,%eax
f0119c24:	01 c1                	add    %eax,%ecx
f0119c26:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119c2d:	10 00 00 
f0119c30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119c35:	0f b6 c0             	movzbl %al,%eax
f0119c38:	c1 e0 04             	shl    $0x4,%eax
f0119c3b:	89 c2                	mov    %eax,%edx
f0119c3d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119c43:	01 d0                	add    %edx,%eax
f0119c45:	48                   	dec    %eax
f0119c46:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0119c4c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119c52:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c57:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119c5d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119c63:	29 d0                	sub    %edx,%eax
f0119c65:	01 c8                	add    %ecx,%eax
f0119c67:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119c6d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119c73:	39 c2                	cmp    %eax,%edx
f0119c75:	74 17                	je     f0119c8e <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119c77:	83 ec 04             	sub    $0x4,%esp
f0119c7a:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119c7f:	68 62 01 00 00       	push   $0x162
f0119c84:	68 9a b2 13 f0       	push   $0xf013b29a
f0119c89:	e8 77 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c8e:	e8 35 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c93:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c96:	74 17                	je     f0119caf <test_kmalloc_nextfit+0x1448>
f0119c98:	83 ec 04             	sub    $0x4,%esp
f0119c9b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119ca0:	68 63 01 00 00       	push   $0x163
f0119ca5:	68 9a b2 13 f0       	push   $0xf013b29a
f0119caa:	e8 56 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119caf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119cb2:	e8 e6 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119cb7:	29 c3                	sub    %eax,%ebx
f0119cb9:	89 d8                	mov    %ebx,%eax
f0119cbb:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119cc0:	74 17                	je     f0119cd9 <test_kmalloc_nextfit+0x1472>
f0119cc2:	83 ec 04             	sub    $0x4,%esp
f0119cc5:	68 57 b5 13 f0       	push   $0xf013b557
f0119cca:	68 64 01 00 00       	push   $0x164
f0119ccf:	68 9a b2 13 f0       	push   $0xf013b29a
f0119cd4:	e8 2c 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119cd9:	e8 ea a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119cde:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ce1:	e8 b7 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ce6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119ce9:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119cef:	83 ec 0c             	sub    $0xc,%esp
f0119cf2:	50                   	push   %eax
f0119cf3:	e8 58 dc fe ff       	call   f0107950 <kfree>
f0119cf8:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cfb:	e8 c8 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d03:	74 17                	je     f0119d1c <test_kmalloc_nextfit+0x14b5>
f0119d05:	83 ec 04             	sub    $0x4,%esp
f0119d08:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119d0d:	68 69 01 00 00       	push   $0x169
f0119d12:	68 9a b2 13 f0       	push   $0xf013b29a
f0119d17:	e8 e9 64 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119d1c:	e8 7c 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119d21:	89 c2                	mov    %eax,%edx
f0119d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119d26:	29 c2                	sub    %eax,%edx
f0119d28:	89 d0                	mov    %edx,%eax
f0119d2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119d2f:	74 17                	je     f0119d48 <test_kmalloc_nextfit+0x14e1>
f0119d31:	83 ec 04             	sub    $0x4,%esp
f0119d34:	68 68 b5 13 f0       	push   $0xf013b568
f0119d39:	68 6a 01 00 00       	push   $0x16a
f0119d3e:	68 9a b2 13 f0       	push   $0xf013b29a
f0119d43:	e8 bd 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d48:	e8 7b a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d50:	e8 48 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119d55:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119d58:	83 ec 0c             	sub    $0xc,%esp
f0119d5b:	68 00 fc 3f 00       	push   $0x3ffc00
f0119d60:	e8 20 db fe ff       	call   f0107885 <kmalloc>
f0119d65:	83 c4 10             	add    $0x10,%esp
f0119d68:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119d6e:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119d75:	10 00 00 
f0119d78:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0119d7e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d83:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0119d89:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119d8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d94:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119d9a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119da0:	29 d0                	sub    %edx,%eax
f0119da2:	89 c1                	mov    %eax,%ecx
f0119da4:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119dab:	10 00 00 
f0119dae:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119db3:	0f b6 d0             	movzbl %al,%edx
f0119db6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119dbc:	01 d0                	add    %edx,%eax
f0119dbe:	48                   	dec    %eax
f0119dbf:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119dc5:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119dcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd0:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119dd6:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119ddc:	29 d0                	sub    %edx,%eax
f0119dde:	01 c1                	add    %eax,%ecx
f0119de0:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119de7:	10 00 00 
f0119dea:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119def:	0f b6 c0             	movzbl %al,%eax
f0119df2:	c1 e0 04             	shl    $0x4,%eax
f0119df5:	89 c2                	mov    %eax,%edx
f0119df7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119dfd:	01 d0                	add    %edx,%eax
f0119dff:	48                   	dec    %eax
f0119e00:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119e06:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119e0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e11:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119e17:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119e1d:	29 d0                	sub    %edx,%eax
f0119e1f:	01 c8                	add    %ecx,%eax
f0119e21:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119e27:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e2d:	39 c2                	cmp    %eax,%edx
f0119e2f:	74 17                	je     f0119e48 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119e31:	83 ec 04             	sub    $0x4,%esp
f0119e34:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119e39:	68 70 01 00 00       	push   $0x170
f0119e3e:	68 9a b2 13 f0       	push   $0xf013b29a
f0119e43:	e8 bd 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e48:	e8 7b 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e4d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e50:	74 17                	je     f0119e69 <test_kmalloc_nextfit+0x1602>
f0119e52:	83 ec 04             	sub    $0x4,%esp
f0119e55:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119e5a:	68 71 01 00 00       	push   $0x171
f0119e5f:	68 9a b2 13 f0       	push   $0xf013b29a
f0119e64:	e8 9c 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e69:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e6c:	e8 2c 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e71:	29 c3                	sub    %eax,%ebx
f0119e73:	89 d8                	mov    %ebx,%eax
f0119e75:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119e7a:	74 17                	je     f0119e93 <test_kmalloc_nextfit+0x162c>
f0119e7c:	83 ec 04             	sub    $0x4,%esp
f0119e7f:	68 57 b5 13 f0       	push   $0xf013b557
f0119e84:	68 72 01 00 00       	push   $0x172
f0119e89:	68 9a b2 13 f0       	push   $0xf013b29a
f0119e8e:	e8 72 63 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119e93:	83 ec 0c             	sub    $0xc,%esp
f0119e96:	68 04 b6 13 f0       	push   $0xf013b604
f0119e9b:	e8 6e 6e fe ff       	call   f0100d0e <cprintf>
f0119ea0:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119ea3:	e8 20 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119eab:	e8 ed 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119eb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119eb3:	83 ec 0c             	sub    $0xc,%esp
f0119eb6:	68 00 00 60 00       	push   $0x600000
f0119ebb:	e8 c5 d9 fe ff       	call   f0107885 <kmalloc>
f0119ec0:	83 c4 10             	add    $0x10,%esp
f0119ec3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119ec9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ecf:	85 c0                	test   %eax,%eax
f0119ed1:	74 17                	je     f0119eea <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119ed3:	83 ec 04             	sub    $0x4,%esp
f0119ed6:	68 a8 b5 13 f0       	push   $0xf013b5a8
f0119edb:	68 7c 01 00 00       	push   $0x17c
f0119ee0:	68 9a b2 13 f0       	push   $0xf013b29a
f0119ee5:	e8 1b 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119eea:	e8 d9 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119eef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ef2:	74 17                	je     f0119f0b <test_kmalloc_nextfit+0x16a4>
f0119ef4:	83 ec 04             	sub    $0x4,%esp
f0119ef7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0119efc:	68 7d 01 00 00       	push   $0x17d
f0119f01:	68 9a b2 13 f0       	push   $0xf013b29a
f0119f06:	e8 fa 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119f0b:	e8 8d 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119f10:	89 c2                	mov    %eax,%edx
f0119f12:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119f15:	39 c2                	cmp    %eax,%edx
f0119f17:	74 17                	je     f0119f30 <test_kmalloc_nextfit+0x16c9>
f0119f19:	83 ec 04             	sub    $0x4,%esp
f0119f1c:	68 57 b5 13 f0       	push   $0xf013b557
f0119f21:	68 7e 01 00 00       	push   $0x17e
f0119f26:	68 9a b2 13 f0       	push   $0xf013b29a
f0119f2b:	e8 d5 62 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119f30:	83 ec 0c             	sub    $0xc,%esp
f0119f33:	68 3c b6 13 f0       	push   $0xf013b63c
f0119f38:	e8 d1 6d fe ff       	call   f0100d0e <cprintf>
f0119f3d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119f40:	83 ec 0c             	sub    $0xc,%esp
f0119f43:	68 78 b6 13 f0       	push   $0xf013b678
f0119f48:	e8 c1 6d fe ff       	call   f0100d0e <cprintf>
f0119f4d:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119f50:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119f55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119f58:	5b                   	pop    %ebx
f0119f59:	5f                   	pop    %edi
f0119f5a:	5d                   	pop    %ebp
f0119f5b:	c3                   	ret    

f0119f5c <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119f5c:	55                   	push   %ebp
f0119f5d:	89 e5                	mov    %esp,%ebp
f0119f5f:	57                   	push   %edi
f0119f60:	53                   	push   %ebx
f0119f61:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119f67:	83 ec 0c             	sub    $0xc,%esp
f0119f6a:	68 dc b1 13 f0       	push   $0xf013b1dc
f0119f6f:	e8 9a 6d fe ff       	call   f0100d0e <cprintf>
f0119f74:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119f77:	83 ec 0c             	sub    $0xc,%esp
f0119f7a:	68 0c b2 13 f0       	push   $0xf013b20c
f0119f7f:	e8 8a 6d fe ff       	call   f0100d0e <cprintf>
f0119f84:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119f87:	83 ec 0c             	sub    $0xc,%esp
f0119f8a:	68 dc b1 13 f0       	push   $0xf013b1dc
f0119f8f:	e8 7a 6d fe ff       	call   f0100d0e <cprintf>
f0119f94:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119f97:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119f9d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119fa2:	b8 00 00 00 00       	mov    $0x0,%eax
f0119fa7:	89 d7                	mov    %edx,%edi
f0119fa9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119fab:	e8 ed 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119fb3:	e8 10 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119fbb:	83 ec 0c             	sub    $0xc,%esp
f0119fbe:	68 00 fc 2f 00       	push   $0x2ffc00
f0119fc3:	e8 bd d8 fe ff       	call   f0107885 <kmalloc>
f0119fc8:	83 c4 10             	add    $0x10,%esp
f0119fcb:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119fd1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119fd7:	89 c1                	mov    %eax,%ecx
f0119fd9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119fe0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119fe3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fe8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119feb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119fee:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ff3:	f7 75 ec             	divl   -0x14(%ebp)
f0119ff6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119ff9:	29 d0                	sub    %edx,%eax
f0119ffb:	89 c3                	mov    %eax,%ebx
f0119ffd:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a004:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a009:	0f b6 d0             	movzbl %al,%edx
f011a00c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a00f:	01 d0                	add    %edx,%eax
f011a011:	48                   	dec    %eax
f011a012:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a015:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a018:	ba 00 00 00 00       	mov    $0x0,%edx
f011a01d:	f7 75 e4             	divl   -0x1c(%ebp)
f011a020:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a023:	29 d0                	sub    %edx,%eax
f011a025:	01 c3                	add    %eax,%ebx
f011a027:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a02e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a033:	0f b6 c0             	movzbl %al,%eax
f011a036:	c1 e0 04             	shl    $0x4,%eax
f011a039:	89 c2                	mov    %eax,%edx
f011a03b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a03e:	01 d0                	add    %edx,%eax
f011a040:	48                   	dec    %eax
f011a041:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a044:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a047:	ba 00 00 00 00       	mov    $0x0,%edx
f011a04c:	f7 75 dc             	divl   -0x24(%ebp)
f011a04f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a052:	29 d0                	sub    %edx,%eax
f011a054:	01 d8                	add    %ebx,%eax
f011a056:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a05b:	39 c1                	cmp    %eax,%ecx
f011a05d:	74 17                	je     f011a076 <test_kmalloc_bestfit1+0x11a>
f011a05f:	83 ec 04             	sub    $0x4,%esp
f011a062:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a067:	68 98 01 00 00       	push   $0x198
f011a06c:	68 9a b2 13 f0       	push   $0xf013b29a
f011a071:	e8 8f 61 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a076:	e8 4d 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a07b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a07e:	74 17                	je     f011a097 <test_kmalloc_bestfit1+0x13b>
f011a080:	83 ec 04             	sub    $0x4,%esp
f011a083:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a088:	68 99 01 00 00       	push   $0x199
f011a08d:	68 9a b2 13 f0       	push   $0xf013b29a
f011a092:	e8 6e 61 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a097:	e8 01 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a09c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a09f:	29 c2                	sub    %eax,%edx
f011a0a1:	89 d0                	mov    %edx,%eax
f011a0a3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a0a8:	74 17                	je     f011a0c1 <test_kmalloc_bestfit1+0x165>
f011a0aa:	83 ec 04             	sub    $0x4,%esp
f011a0ad:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a0b2:	68 9a 01 00 00       	push   $0x19a
f011a0b7:	68 9a b2 13 f0       	push   $0xf013b29a
f011a0bc:	e8 44 61 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a0c1:	e8 d7 2a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a0c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0c9:	e8 fa 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a0ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a0d1:	83 ec 0c             	sub    $0xc,%esp
f011a0d4:	68 00 fc 2f 00       	push   $0x2ffc00
f011a0d9:	e8 a7 d7 fe ff       	call   f0107885 <kmalloc>
f011a0de:	83 c4 10             	add    $0x10,%esp
f011a0e1:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a0e7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a0ed:	89 c1                	mov    %eax,%ecx
f011a0ef:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a0f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a0f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a101:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a104:	ba 00 00 00 00       	mov    $0x0,%edx
f011a109:	f7 75 d4             	divl   -0x2c(%ebp)
f011a10c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a10f:	29 d0                	sub    %edx,%eax
f011a111:	89 c3                	mov    %eax,%ebx
f011a113:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a11a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a11f:	0f b6 d0             	movzbl %al,%edx
f011a122:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a125:	01 d0                	add    %edx,%eax
f011a127:	48                   	dec    %eax
f011a128:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a12b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a12e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a133:	f7 75 cc             	divl   -0x34(%ebp)
f011a136:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a139:	29 d0                	sub    %edx,%eax
f011a13b:	01 c3                	add    %eax,%ebx
f011a13d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a144:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a149:	0f b6 c0             	movzbl %al,%eax
f011a14c:	c1 e0 04             	shl    $0x4,%eax
f011a14f:	89 c2                	mov    %eax,%edx
f011a151:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a154:	01 d0                	add    %edx,%eax
f011a156:	48                   	dec    %eax
f011a157:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a15a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a15d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a162:	f7 75 c4             	divl   -0x3c(%ebp)
f011a165:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a168:	29 d0                	sub    %edx,%eax
f011a16a:	01 d8                	add    %ebx,%eax
f011a16c:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a171:	39 c1                	cmp    %eax,%ecx
f011a173:	74 17                	je     f011a18c <test_kmalloc_bestfit1+0x230>
f011a175:	83 ec 04             	sub    $0x4,%esp
f011a178:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a17d:	68 a0 01 00 00       	push   $0x1a0
f011a182:	68 9a b2 13 f0       	push   $0xf013b29a
f011a187:	e8 79 60 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a18c:	e8 37 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a191:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a194:	74 17                	je     f011a1ad <test_kmalloc_bestfit1+0x251>
f011a196:	83 ec 04             	sub    $0x4,%esp
f011a199:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a19e:	68 a1 01 00 00       	push   $0x1a1
f011a1a3:	68 9a b2 13 f0       	push   $0xf013b29a
f011a1a8:	e8 58 60 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a1ad:	e8 eb 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a1b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a1b5:	29 c2                	sub    %eax,%edx
f011a1b7:	89 d0                	mov    %edx,%eax
f011a1b9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a1be:	74 17                	je     f011a1d7 <test_kmalloc_bestfit1+0x27b>
f011a1c0:	83 ec 04             	sub    $0x4,%esp
f011a1c3:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a1c8:	68 a2 01 00 00       	push   $0x1a2
f011a1cd:	68 9a b2 13 f0       	push   $0xf013b29a
f011a1d2:	e8 2e 60 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a1d7:	e8 c1 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a1dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1df:	e8 e4 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a1e7:	83 ec 0c             	sub    $0xc,%esp
f011a1ea:	68 00 fc 1f 00       	push   $0x1ffc00
f011a1ef:	e8 91 d6 fe ff       	call   f0107885 <kmalloc>
f011a1f4:	83 c4 10             	add    $0x10,%esp
f011a1f7:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a1fd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a203:	89 c1                	mov    %eax,%ecx
f011a205:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a20c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a20f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a214:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a217:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a21a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a21f:	f7 75 bc             	divl   -0x44(%ebp)
f011a222:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a225:	29 d0                	sub    %edx,%eax
f011a227:	89 c3                	mov    %eax,%ebx
f011a229:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a230:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a235:	0f b6 d0             	movzbl %al,%edx
f011a238:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a23b:	01 d0                	add    %edx,%eax
f011a23d:	48                   	dec    %eax
f011a23e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a241:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a244:	ba 00 00 00 00       	mov    $0x0,%edx
f011a249:	f7 75 b4             	divl   -0x4c(%ebp)
f011a24c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a24f:	29 d0                	sub    %edx,%eax
f011a251:	01 c3                	add    %eax,%ebx
f011a253:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a25a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a25f:	0f b6 c0             	movzbl %al,%eax
f011a262:	c1 e0 04             	shl    $0x4,%eax
f011a265:	89 c2                	mov    %eax,%edx
f011a267:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a26a:	01 d0                	add    %edx,%eax
f011a26c:	48                   	dec    %eax
f011a26d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a270:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a273:	ba 00 00 00 00       	mov    $0x0,%edx
f011a278:	f7 75 ac             	divl   -0x54(%ebp)
f011a27b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a27e:	29 d0                	sub    %edx,%eax
f011a280:	01 d8                	add    %ebx,%eax
f011a282:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a287:	39 c1                	cmp    %eax,%ecx
f011a289:	74 17                	je     f011a2a2 <test_kmalloc_bestfit1+0x346>
f011a28b:	83 ec 04             	sub    $0x4,%esp
f011a28e:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a293:	68 a8 01 00 00       	push   $0x1a8
f011a298:	68 9a b2 13 f0       	push   $0xf013b29a
f011a29d:	e8 63 5f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2a2:	e8 21 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a2aa:	74 17                	je     f011a2c3 <test_kmalloc_bestfit1+0x367>
f011a2ac:	83 ec 04             	sub    $0x4,%esp
f011a2af:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a2b4:	68 a9 01 00 00       	push   $0x1a9
f011a2b9:	68 9a b2 13 f0       	push   $0xf013b29a
f011a2be:	e8 42 5f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a2c3:	e8 d5 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a2c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a2cb:	29 c2                	sub    %eax,%edx
f011a2cd:	89 d0                	mov    %edx,%eax
f011a2cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a2d4:	74 17                	je     f011a2ed <test_kmalloc_bestfit1+0x391>
f011a2d6:	83 ec 04             	sub    $0x4,%esp
f011a2d9:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a2de:	68 aa 01 00 00       	push   $0x1aa
f011a2e3:	68 9a b2 13 f0       	push   $0xf013b29a
f011a2e8:	e8 18 5f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a2ed:	e8 ab 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a2f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2f5:	e8 ce 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a2fd:	83 ec 0c             	sub    $0xc,%esp
f011a300:	68 00 fc 1f 00       	push   $0x1ffc00
f011a305:	e8 7b d5 fe ff       	call   f0107885 <kmalloc>
f011a30a:	83 c4 10             	add    $0x10,%esp
f011a30d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a313:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a319:	89 c1                	mov    %eax,%ecx
f011a31b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a322:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a325:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a32a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a32d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a330:	ba 00 00 00 00       	mov    $0x0,%edx
f011a335:	f7 75 a4             	divl   -0x5c(%ebp)
f011a338:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a33b:	29 d0                	sub    %edx,%eax
f011a33d:	89 c3                	mov    %eax,%ebx
f011a33f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a346:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a34b:	0f b6 d0             	movzbl %al,%edx
f011a34e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a351:	01 d0                	add    %edx,%eax
f011a353:	48                   	dec    %eax
f011a354:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a357:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a35a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a35f:	f7 75 9c             	divl   -0x64(%ebp)
f011a362:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a365:	29 d0                	sub    %edx,%eax
f011a367:	01 c3                	add    %eax,%ebx
f011a369:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a370:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a375:	0f b6 c0             	movzbl %al,%eax
f011a378:	c1 e0 04             	shl    $0x4,%eax
f011a37b:	89 c2                	mov    %eax,%edx
f011a37d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a380:	01 d0                	add    %edx,%eax
f011a382:	48                   	dec    %eax
f011a383:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a386:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a389:	ba 00 00 00 00       	mov    $0x0,%edx
f011a38e:	f7 75 94             	divl   -0x6c(%ebp)
f011a391:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a394:	29 d0                	sub    %edx,%eax
f011a396:	01 d8                	add    %ebx,%eax
f011a398:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a39d:	39 c1                	cmp    %eax,%ecx
f011a39f:	74 17                	je     f011a3b8 <test_kmalloc_bestfit1+0x45c>
f011a3a1:	83 ec 04             	sub    $0x4,%esp
f011a3a4:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a3a9:	68 b0 01 00 00       	push   $0x1b0
f011a3ae:	68 9a b2 13 f0       	push   $0xf013b29a
f011a3b3:	e8 4d 5e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3b8:	e8 0b 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a3bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3c0:	74 17                	je     f011a3d9 <test_kmalloc_bestfit1+0x47d>
f011a3c2:	83 ec 04             	sub    $0x4,%esp
f011a3c5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a3ca:	68 b1 01 00 00       	push   $0x1b1
f011a3cf:	68 9a b2 13 f0       	push   $0xf013b29a
f011a3d4:	e8 2c 5e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a3d9:	e8 bf 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a3de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a3e1:	29 c2                	sub    %eax,%edx
f011a3e3:	89 d0                	mov    %edx,%eax
f011a3e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a3ea:	74 17                	je     f011a403 <test_kmalloc_bestfit1+0x4a7>
f011a3ec:	83 ec 04             	sub    $0x4,%esp
f011a3ef:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a3f4:	68 b2 01 00 00       	push   $0x1b2
f011a3f9:	68 9a b2 13 f0       	push   $0xf013b29a
f011a3fe:	e8 02 5e fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a403:	e8 95 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a408:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a40b:	e8 b8 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a410:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a413:	83 ec 0c             	sub    $0xc,%esp
f011a416:	68 00 fc 0f 00       	push   $0xffc00
f011a41b:	e8 65 d4 fe ff       	call   f0107885 <kmalloc>
f011a420:	83 c4 10             	add    $0x10,%esp
f011a423:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a429:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a42f:	89 c1                	mov    %eax,%ecx
f011a431:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a438:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a43b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a440:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a443:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a446:	ba 00 00 00 00       	mov    $0x0,%edx
f011a44b:	f7 75 8c             	divl   -0x74(%ebp)
f011a44e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a451:	29 d0                	sub    %edx,%eax
f011a453:	89 c3                	mov    %eax,%ebx
f011a455:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a45c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a461:	0f b6 d0             	movzbl %al,%edx
f011a464:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a467:	01 d0                	add    %edx,%eax
f011a469:	48                   	dec    %eax
f011a46a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a46d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a470:	ba 00 00 00 00       	mov    $0x0,%edx
f011a475:	f7 75 84             	divl   -0x7c(%ebp)
f011a478:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a47b:	29 d0                	sub    %edx,%eax
f011a47d:	01 c3                	add    %eax,%ebx
f011a47f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a486:	10 00 00 
f011a489:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a48e:	0f b6 c0             	movzbl %al,%eax
f011a491:	c1 e0 04             	shl    $0x4,%eax
f011a494:	89 c2                	mov    %eax,%edx
f011a496:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a49c:	01 d0                	add    %edx,%eax
f011a49e:	48                   	dec    %eax
f011a49f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a4a5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a4ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b0:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a4b6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a4bc:	29 d0                	sub    %edx,%eax
f011a4be:	01 d8                	add    %ebx,%eax
f011a4c0:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a4c5:	39 c1                	cmp    %eax,%ecx
f011a4c7:	74 17                	je     f011a4e0 <test_kmalloc_bestfit1+0x584>
f011a4c9:	83 ec 04             	sub    $0x4,%esp
f011a4cc:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a4d1:	68 b8 01 00 00       	push   $0x1b8
f011a4d6:	68 9a b2 13 f0       	push   $0xf013b29a
f011a4db:	e8 25 5d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4e0:	e8 e3 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a4e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4e8:	74 17                	je     f011a501 <test_kmalloc_bestfit1+0x5a5>
f011a4ea:	83 ec 04             	sub    $0x4,%esp
f011a4ed:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a4f2:	68 b9 01 00 00       	push   $0x1b9
f011a4f7:	68 9a b2 13 f0       	push   $0xf013b29a
f011a4fc:	e8 04 5d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a501:	e8 97 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a506:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a509:	29 c2                	sub    %eax,%edx
f011a50b:	89 d0                	mov    %edx,%eax
f011a50d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a512:	74 17                	je     f011a52b <test_kmalloc_bestfit1+0x5cf>
f011a514:	83 ec 04             	sub    $0x4,%esp
f011a517:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a51c:	68 ba 01 00 00       	push   $0x1ba
f011a521:	68 9a b2 13 f0       	push   $0xf013b29a
f011a526:	e8 da 5c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a52b:	e8 6d 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a530:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a533:	e8 90 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a538:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a53b:	83 ec 0c             	sub    $0xc,%esp
f011a53e:	68 00 fc 0f 00       	push   $0xffc00
f011a543:	e8 3d d3 fe ff       	call   f0107885 <kmalloc>
f011a548:	83 c4 10             	add    $0x10,%esp
f011a54b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a551:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a557:	89 c1                	mov    %eax,%ecx
f011a559:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a560:	10 00 00 
f011a563:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a569:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a56e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a574:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a57a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a57f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a585:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a58b:	29 d0                	sub    %edx,%eax
f011a58d:	89 c3                	mov    %eax,%ebx
f011a58f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a596:	10 00 00 
f011a599:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a59e:	0f b6 d0             	movzbl %al,%edx
f011a5a1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a5a7:	01 d0                	add    %edx,%eax
f011a5a9:	48                   	dec    %eax
f011a5aa:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a5b0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a5b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5bb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a5c1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a5c7:	29 d0                	sub    %edx,%eax
f011a5c9:	01 c3                	add    %eax,%ebx
f011a5cb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a5d2:	10 00 00 
f011a5d5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a5da:	0f b6 c0             	movzbl %al,%eax
f011a5dd:	c1 e0 04             	shl    $0x4,%eax
f011a5e0:	89 c2                	mov    %eax,%edx
f011a5e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a5e8:	01 d0                	add    %edx,%eax
f011a5ea:	48                   	dec    %eax
f011a5eb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a5f1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a5f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5fc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a602:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a608:	29 d0                	sub    %edx,%eax
f011a60a:	01 d8                	add    %ebx,%eax
f011a60c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a611:	39 c1                	cmp    %eax,%ecx
f011a613:	74 17                	je     f011a62c <test_kmalloc_bestfit1+0x6d0>
f011a615:	83 ec 04             	sub    $0x4,%esp
f011a618:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a61d:	68 c0 01 00 00       	push   $0x1c0
f011a622:	68 9a b2 13 f0       	push   $0xf013b29a
f011a627:	e8 d9 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a62c:	e8 97 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a631:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a634:	74 17                	je     f011a64d <test_kmalloc_bestfit1+0x6f1>
f011a636:	83 ec 04             	sub    $0x4,%esp
f011a639:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a63e:	68 c1 01 00 00       	push   $0x1c1
f011a643:	68 9a b2 13 f0       	push   $0xf013b29a
f011a648:	e8 b8 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a64d:	e8 4b 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a655:	29 c2                	sub    %eax,%edx
f011a657:	89 d0                	mov    %edx,%eax
f011a659:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a65e:	74 17                	je     f011a677 <test_kmalloc_bestfit1+0x71b>
f011a660:	83 ec 04             	sub    $0x4,%esp
f011a663:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a668:	68 c2 01 00 00       	push   $0x1c2
f011a66d:	68 9a b2 13 f0       	push   $0xf013b29a
f011a672:	e8 8e 5b fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a677:	e8 21 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a67c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a67f:	e8 44 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a684:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a687:	83 ec 0c             	sub    $0xc,%esp
f011a68a:	68 00 fc 0f 00       	push   $0xffc00
f011a68f:	e8 f1 d1 fe ff       	call   f0107885 <kmalloc>
f011a694:	83 c4 10             	add    $0x10,%esp
f011a697:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a69d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a6a3:	89 c1                	mov    %eax,%ecx
f011a6a5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a6ac:	10 00 00 
f011a6af:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a6b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6ba:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a6c0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a6c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6cb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a6d1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a6d7:	29 d0                	sub    %edx,%eax
f011a6d9:	89 c3                	mov    %eax,%ebx
f011a6db:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a6e2:	10 00 00 
f011a6e5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a6ea:	0f b6 d0             	movzbl %al,%edx
f011a6ed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a6f3:	01 d0                	add    %edx,%eax
f011a6f5:	48                   	dec    %eax
f011a6f6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a6fc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a702:	ba 00 00 00 00       	mov    $0x0,%edx
f011a707:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a70d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a713:	29 d0                	sub    %edx,%eax
f011a715:	01 c3                	add    %eax,%ebx
f011a717:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a71e:	10 00 00 
f011a721:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a726:	0f b6 c0             	movzbl %al,%eax
f011a729:	c1 e0 04             	shl    $0x4,%eax
f011a72c:	89 c2                	mov    %eax,%edx
f011a72e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a734:	01 d0                	add    %edx,%eax
f011a736:	48                   	dec    %eax
f011a737:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a73d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a743:	ba 00 00 00 00       	mov    $0x0,%edx
f011a748:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a74e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a754:	29 d0                	sub    %edx,%eax
f011a756:	01 d8                	add    %ebx,%eax
f011a758:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a75d:	39 c1                	cmp    %eax,%ecx
f011a75f:	74 17                	je     f011a778 <test_kmalloc_bestfit1+0x81c>
f011a761:	83 ec 04             	sub    $0x4,%esp
f011a764:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a769:	68 c8 01 00 00       	push   $0x1c8
f011a76e:	68 9a b2 13 f0       	push   $0xf013b29a
f011a773:	e8 8d 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a778:	e8 4b 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a77d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a780:	74 17                	je     f011a799 <test_kmalloc_bestfit1+0x83d>
f011a782:	83 ec 04             	sub    $0x4,%esp
f011a785:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a78a:	68 c9 01 00 00       	push   $0x1c9
f011a78f:	68 9a b2 13 f0       	push   $0xf013b29a
f011a794:	e8 6c 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a799:	e8 ff 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a79e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7a1:	29 c2                	sub    %eax,%edx
f011a7a3:	89 d0                	mov    %edx,%eax
f011a7a5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a7aa:	74 17                	je     f011a7c3 <test_kmalloc_bestfit1+0x867>
f011a7ac:	83 ec 04             	sub    $0x4,%esp
f011a7af:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a7b4:	68 ca 01 00 00       	push   $0x1ca
f011a7b9:	68 9a b2 13 f0       	push   $0xf013b29a
f011a7be:	e8 42 5a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7c3:	e8 d5 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a7c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7cb:	e8 f8 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a7d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a7d3:	83 ec 0c             	sub    $0xc,%esp
f011a7d6:	68 00 fc 0f 00       	push   $0xffc00
f011a7db:	e8 a5 d0 fe ff       	call   f0107885 <kmalloc>
f011a7e0:	83 c4 10             	add    $0x10,%esp
f011a7e3:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a7e9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a7ef:	89 c1                	mov    %eax,%ecx
f011a7f1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a7f8:	10 00 00 
f011a7fb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a801:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a806:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a80c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a812:	ba 00 00 00 00       	mov    $0x0,%edx
f011a817:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a81d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a823:	29 d0                	sub    %edx,%eax
f011a825:	89 c3                	mov    %eax,%ebx
f011a827:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a82e:	10 00 00 
f011a831:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a836:	0f b6 d0             	movzbl %al,%edx
f011a839:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a83f:	01 d0                	add    %edx,%eax
f011a841:	48                   	dec    %eax
f011a842:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a848:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a84e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a853:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a859:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a85f:	29 d0                	sub    %edx,%eax
f011a861:	01 c3                	add    %eax,%ebx
f011a863:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a86a:	10 00 00 
f011a86d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a872:	0f b6 c0             	movzbl %al,%eax
f011a875:	c1 e0 04             	shl    $0x4,%eax
f011a878:	89 c2                	mov    %eax,%edx
f011a87a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a880:	01 d0                	add    %edx,%eax
f011a882:	48                   	dec    %eax
f011a883:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a889:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a88f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a894:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a89a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a8a0:	29 d0                	sub    %edx,%eax
f011a8a2:	01 d8                	add    %ebx,%eax
f011a8a4:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a8a9:	39 c1                	cmp    %eax,%ecx
f011a8ab:	74 17                	je     f011a8c4 <test_kmalloc_bestfit1+0x968>
f011a8ad:	83 ec 04             	sub    $0x4,%esp
f011a8b0:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011a8b5:	68 d0 01 00 00       	push   $0x1d0
f011a8ba:	68 9a b2 13 f0       	push   $0xf013b29a
f011a8bf:	e8 41 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8c4:	e8 ff 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a8c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8cc:	74 17                	je     f011a8e5 <test_kmalloc_bestfit1+0x989>
f011a8ce:	83 ec 04             	sub    $0x4,%esp
f011a8d1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a8d6:	68 d1 01 00 00       	push   $0x1d1
f011a8db:	68 9a b2 13 f0       	push   $0xf013b29a
f011a8e0:	e8 20 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a8e5:	e8 b3 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a8ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8ed:	29 c2                	sub    %eax,%edx
f011a8ef:	89 d0                	mov    %edx,%eax
f011a8f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a8f6:	74 17                	je     f011a90f <test_kmalloc_bestfit1+0x9b3>
f011a8f8:	83 ec 04             	sub    $0x4,%esp
f011a8fb:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011a900:	68 d2 01 00 00       	push   $0x1d2
f011a905:	68 9a b2 13 f0       	push   $0xf013b29a
f011a90a:	e8 f6 58 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a90f:	e8 89 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a914:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a917:	e8 ac 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a91c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a91f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a925:	83 ec 0c             	sub    $0xc,%esp
f011a928:	50                   	push   %eax
f011a929:	e8 22 d0 fe ff       	call   f0107950 <kfree>
f011a92e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a931:	e8 92 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a936:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a939:	74 17                	je     f011a952 <test_kmalloc_bestfit1+0x9f6>
f011a93b:	83 ec 04             	sub    $0x4,%esp
f011a93e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a943:	68 db 01 00 00       	push   $0x1db
f011a948:	68 9a b2 13 f0       	push   $0xf013b29a
f011a94d:	e8 b3 58 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a952:	e8 46 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a957:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a95a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a95f:	74 17                	je     f011a978 <test_kmalloc_bestfit1+0xa1c>
f011a961:	83 ec 04             	sub    $0x4,%esp
f011a964:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011a969:	68 dc 01 00 00       	push   $0x1dc
f011a96e:	68 9a b2 13 f0       	push   $0xf013b29a
f011a973:	e8 8d 58 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a978:	e8 20 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a97d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a980:	e8 43 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a985:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a988:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a98e:	83 ec 0c             	sub    $0xc,%esp
f011a991:	50                   	push   %eax
f011a992:	e8 b9 cf fe ff       	call   f0107950 <kfree>
f011a997:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a99a:	e8 29 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a99f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9a2:	74 17                	je     f011a9bb <test_kmalloc_bestfit1+0xa5f>
f011a9a4:	83 ec 04             	sub    $0x4,%esp
f011a9a7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011a9ac:	68 e2 01 00 00       	push   $0x1e2
f011a9b1:	68 9a b2 13 f0       	push   $0xf013b29a
f011a9b6:	e8 4a 58 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a9bb:	e8 dd 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a9c0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a9c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a9c8:	74 17                	je     f011a9e1 <test_kmalloc_bestfit1+0xa85>
f011a9ca:	83 ec 04             	sub    $0x4,%esp
f011a9cd:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011a9d2:	68 e3 01 00 00       	push   $0x1e3
f011a9d7:	68 9a b2 13 f0       	push   $0xf013b29a
f011a9dc:	e8 24 58 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a9e1:	e8 b7 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a9e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9e9:	e8 da 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a9f1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a9f7:	83 ec 0c             	sub    $0xc,%esp
f011a9fa:	50                   	push   %eax
f011a9fb:	e8 50 cf fe ff       	call   f0107950 <kfree>
f011aa00:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa03:	e8 c0 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa08:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa0b:	74 17                	je     f011aa24 <test_kmalloc_bestfit1+0xac8>
f011aa0d:	83 ec 04             	sub    $0x4,%esp
f011aa10:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011aa15:	68 e9 01 00 00       	push   $0x1e9
f011aa1a:	68 9a b2 13 f0       	push   $0xf013b29a
f011aa1f:	e8 e1 57 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aa24:	e8 74 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa29:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aa2c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa31:	74 17                	je     f011aa4a <test_kmalloc_bestfit1+0xaee>
f011aa33:	83 ec 04             	sub    $0x4,%esp
f011aa36:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011aa3b:	68 ea 01 00 00       	push   $0x1ea
f011aa40:	68 9a b2 13 f0       	push   $0xf013b29a
f011aa45:	e8 bb 57 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011aa4a:	e8 4e 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa52:	e8 71 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa57:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011aa5a:	83 ec 0c             	sub    $0xc,%esp
f011aa5d:	68 00 00 08 00       	push   $0x80000
f011aa62:	e8 1e ce fe ff       	call   f0107885 <kmalloc>
f011aa67:	83 c4 10             	add    $0x10,%esp
f011aa6a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011aa70:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011aa76:	89 c1                	mov    %eax,%ecx
f011aa78:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011aa7f:	10 00 00 
f011aa82:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011aa88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa8d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011aa93:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011aa99:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa9e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011aaa4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011aaaa:	29 d0                	sub    %edx,%eax
f011aaac:	89 c3                	mov    %eax,%ebx
f011aaae:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011aab5:	10 00 00 
f011aab8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011aabd:	0f b6 d0             	movzbl %al,%edx
f011aac0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011aac6:	01 d0                	add    %edx,%eax
f011aac8:	48                   	dec    %eax
f011aac9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011aacf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011aad5:	ba 00 00 00 00       	mov    $0x0,%edx
f011aada:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011aae0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011aae6:	29 d0                	sub    %edx,%eax
f011aae8:	01 c3                	add    %eax,%ebx
f011aaea:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011aaf1:	10 00 00 
f011aaf4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011aaf9:	0f b6 c0             	movzbl %al,%eax
f011aafc:	c1 e0 04             	shl    $0x4,%eax
f011aaff:	89 c2                	mov    %eax,%edx
f011ab01:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ab07:	01 d0                	add    %edx,%eax
f011ab09:	48                   	dec    %eax
f011ab0a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ab10:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ab16:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab1b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ab21:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ab27:	29 d0                	sub    %edx,%eax
f011ab29:	01 d8                	add    %ebx,%eax
f011ab2b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ab30:	39 c1                	cmp    %eax,%ecx
f011ab32:	74 17                	je     f011ab4b <test_kmalloc_bestfit1+0xbef>
f011ab34:	83 ec 04             	sub    $0x4,%esp
f011ab37:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011ab3c:	68 f3 01 00 00       	push   $0x1f3
f011ab41:	68 9a b2 13 f0       	push   $0xf013b29a
f011ab46:	e8 ba 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab4b:	e8 78 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab53:	74 17                	je     f011ab6c <test_kmalloc_bestfit1+0xc10>
f011ab55:	83 ec 04             	sub    $0x4,%esp
f011ab58:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ab5d:	68 f4 01 00 00       	push   $0x1f4
f011ab62:	68 9a b2 13 f0       	push   $0xf013b29a
f011ab67:	e8 99 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011ab6c:	e8 2c 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab74:	29 c2                	sub    %eax,%edx
f011ab76:	89 d0                	mov    %edx,%eax
f011ab78:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ab7d:	74 17                	je     f011ab96 <test_kmalloc_bestfit1+0xc3a>
f011ab7f:	83 ec 04             	sub    $0x4,%esp
f011ab82:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ab87:	68 f5 01 00 00       	push   $0x1f5
f011ab8c:	68 9a b2 13 f0       	push   $0xf013b29a
f011ab91:	e8 6f 56 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ab96:	e8 02 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab9e:	e8 25 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aba3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011aba6:	83 ec 0c             	sub    $0xc,%esp
f011aba9:	68 00 fc 0f 00       	push   $0xffc00
f011abae:	e8 d2 cc fe ff       	call   f0107885 <kmalloc>
f011abb3:	83 c4 10             	add    $0x10,%esp
f011abb6:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011abbc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011abc2:	89 c1                	mov    %eax,%ecx
f011abc4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011abcb:	10 00 00 
f011abce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011abd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011abd9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011abdf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011abe5:	ba 00 00 00 00       	mov    $0x0,%edx
f011abea:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011abf0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011abf6:	29 d0                	sub    %edx,%eax
f011abf8:	89 c3                	mov    %eax,%ebx
f011abfa:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ac01:	10 00 00 
f011ac04:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ac09:	0f b6 d0             	movzbl %al,%edx
f011ac0c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ac12:	01 d0                	add    %edx,%eax
f011ac14:	48                   	dec    %eax
f011ac15:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ac1b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ac21:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac26:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ac2c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ac32:	29 d0                	sub    %edx,%eax
f011ac34:	01 c3                	add    %eax,%ebx
f011ac36:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ac3d:	10 00 00 
f011ac40:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ac45:	0f b6 c0             	movzbl %al,%eax
f011ac48:	c1 e0 04             	shl    $0x4,%eax
f011ac4b:	89 c2                	mov    %eax,%edx
f011ac4d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ac53:	01 d0                	add    %edx,%eax
f011ac55:	48                   	dec    %eax
f011ac56:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ac5c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ac62:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac67:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ac6d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ac73:	29 d0                	sub    %edx,%eax
f011ac75:	01 d8                	add    %ebx,%eax
f011ac77:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ac7c:	39 c1                	cmp    %eax,%ecx
f011ac7e:	74 17                	je     f011ac97 <test_kmalloc_bestfit1+0xd3b>
f011ac80:	83 ec 04             	sub    $0x4,%esp
f011ac83:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011ac88:	68 fb 01 00 00       	push   $0x1fb
f011ac8d:	68 9a b2 13 f0       	push   $0xf013b29a
f011ac92:	e8 6e 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac97:	e8 2c 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac9c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac9f:	74 17                	je     f011acb8 <test_kmalloc_bestfit1+0xd5c>
f011aca1:	83 ec 04             	sub    $0x4,%esp
f011aca4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011aca9:	68 fc 01 00 00       	push   $0x1fc
f011acae:	68 9a b2 13 f0       	push   $0xf013b29a
f011acb3:	e8 4d 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011acb8:	e8 e0 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011acbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acc0:	29 c2                	sub    %eax,%edx
f011acc2:	89 d0                	mov    %edx,%eax
f011acc4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011acc9:	74 17                	je     f011ace2 <test_kmalloc_bestfit1+0xd86>
f011accb:	83 ec 04             	sub    $0x4,%esp
f011acce:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011acd3:	68 fd 01 00 00       	push   $0x1fd
f011acd8:	68 9a b2 13 f0       	push   $0xf013b29a
f011acdd:	e8 23 55 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ace2:	e8 b6 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ace7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acea:	e8 d9 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011acef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011acf2:	83 ec 0c             	sub    $0xc,%esp
f011acf5:	68 00 fc 03 00       	push   $0x3fc00
f011acfa:	e8 86 cb fe ff       	call   f0107885 <kmalloc>
f011acff:	83 c4 10             	add    $0x10,%esp
f011ad02:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ad08:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ad0e:	89 c1                	mov    %eax,%ecx
f011ad10:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ad17:	10 00 00 
f011ad1a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ad20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad25:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ad2b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ad31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad36:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ad3c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ad42:	29 d0                	sub    %edx,%eax
f011ad44:	89 c3                	mov    %eax,%ebx
f011ad46:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ad4d:	10 00 00 
f011ad50:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ad55:	0f b6 d0             	movzbl %al,%edx
f011ad58:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ad5e:	01 d0                	add    %edx,%eax
f011ad60:	48                   	dec    %eax
f011ad61:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ad67:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ad6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad72:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ad78:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ad7e:	29 d0                	sub    %edx,%eax
f011ad80:	01 c3                	add    %eax,%ebx
f011ad82:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ad89:	10 00 00 
f011ad8c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ad91:	0f b6 c0             	movzbl %al,%eax
f011ad94:	c1 e0 04             	shl    $0x4,%eax
f011ad97:	89 c2                	mov    %eax,%edx
f011ad99:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ad9f:	01 d0                	add    %edx,%eax
f011ada1:	48                   	dec    %eax
f011ada2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ada8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011adae:	ba 00 00 00 00       	mov    $0x0,%edx
f011adb3:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011adb9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011adbf:	29 d0                	sub    %edx,%eax
f011adc1:	01 d8                	add    %ebx,%eax
f011adc3:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011adc8:	39 c1                	cmp    %eax,%ecx
f011adca:	74 17                	je     f011ade3 <test_kmalloc_bestfit1+0xe87>
f011adcc:	83 ec 04             	sub    $0x4,%esp
f011adcf:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011add4:	68 03 02 00 00       	push   $0x203
f011add9:	68 9a b2 13 f0       	push   $0xf013b29a
f011adde:	e8 22 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ade3:	e8 e0 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ade8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adeb:	74 17                	je     f011ae04 <test_kmalloc_bestfit1+0xea8>
f011aded:	83 ec 04             	sub    $0x4,%esp
f011adf0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011adf5:	68 04 02 00 00       	push   $0x204
f011adfa:	68 9a b2 13 f0       	push   $0xf013b29a
f011adff:	e8 01 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011ae04:	e8 94 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ae09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae0c:	29 c2                	sub    %eax,%edx
f011ae0e:	89 d0                	mov    %edx,%eax
f011ae10:	83 f8 40             	cmp    $0x40,%eax
f011ae13:	74 17                	je     f011ae2c <test_kmalloc_bestfit1+0xed0>
f011ae15:	83 ec 04             	sub    $0x4,%esp
f011ae18:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ae1d:	68 05 02 00 00       	push   $0x205
f011ae22:	68 9a b2 13 f0       	push   $0xf013b29a
f011ae27:	e8 d9 53 fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011ae2c:	e8 6c 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ae31:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae34:	e8 8f 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae39:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011ae3c:	83 ec 0c             	sub    $0xc,%esp
f011ae3f:	68 00 fc 3f 00       	push   $0x3ffc00
f011ae44:	e8 3c ca fe ff       	call   f0107885 <kmalloc>
f011ae49:	83 c4 10             	add    $0x10,%esp
f011ae4c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ae52:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ae58:	89 c1                	mov    %eax,%ecx
f011ae5a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ae61:	10 00 00 
f011ae64:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ae6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae6f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ae75:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ae7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae80:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ae86:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ae8c:	29 d0                	sub    %edx,%eax
f011ae8e:	89 c3                	mov    %eax,%ebx
f011ae90:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ae97:	10 00 00 
f011ae9a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ae9f:	0f b6 d0             	movzbl %al,%edx
f011aea2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aea8:	01 d0                	add    %edx,%eax
f011aeaa:	48                   	dec    %eax
f011aeab:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011aeb1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011aeb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aebc:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011aec2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011aec8:	29 d0                	sub    %edx,%eax
f011aeca:	01 c3                	add    %eax,%ebx
f011aecc:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011aed3:	10 00 00 
f011aed6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011aedb:	0f b6 c0             	movzbl %al,%eax
f011aede:	c1 e0 04             	shl    $0x4,%eax
f011aee1:	89 c2                	mov    %eax,%edx
f011aee3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aee9:	01 d0                	add    %edx,%eax
f011aeeb:	48                   	dec    %eax
f011aeec:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011aef2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011aef8:	ba 00 00 00 00       	mov    $0x0,%edx
f011aefd:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011af03:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011af09:	29 d0                	sub    %edx,%eax
f011af0b:	01 d8                	add    %ebx,%eax
f011af0d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011af12:	39 c1                	cmp    %eax,%ecx
f011af14:	74 17                	je     f011af2d <test_kmalloc_bestfit1+0xfd1>
f011af16:	83 ec 04             	sub    $0x4,%esp
f011af19:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011af1e:	68 0b 02 00 00       	push   $0x20b
f011af23:	68 9a b2 13 f0       	push   $0xf013b29a
f011af28:	e8 d8 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af2d:	e8 96 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af35:	74 17                	je     f011af4e <test_kmalloc_bestfit1+0xff2>
f011af37:	83 ec 04             	sub    $0x4,%esp
f011af3a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011af3f:	68 0c 02 00 00       	push   $0x20c
f011af44:	68 9a b2 13 f0       	push   $0xf013b29a
f011af49:	e8 b7 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011af4e:	e8 4a 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011af53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af56:	29 c2                	sub    %eax,%edx
f011af58:	89 d0                	mov    %edx,%eax
f011af5a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011af5f:	74 17                	je     f011af78 <test_kmalloc_bestfit1+0x101c>
f011af61:	83 ec 04             	sub    $0x4,%esp
f011af64:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011af69:	68 0d 02 00 00       	push   $0x20d
f011af6e:	68 9a b2 13 f0       	push   $0xf013b29a
f011af73:	e8 8d 52 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011af78:	e8 20 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011af7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af80:	e8 43 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af85:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011af88:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011af8e:	83 ec 0c             	sub    $0xc,%esp
f011af91:	50                   	push   %eax
f011af92:	e8 b9 c9 fe ff       	call   f0107950 <kfree>
f011af97:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af9a:	e8 29 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afa2:	74 17                	je     f011afbb <test_kmalloc_bestfit1+0x105f>
f011afa4:	83 ec 04             	sub    $0x4,%esp
f011afa7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011afac:	68 16 02 00 00       	push   $0x216
f011afb1:	68 9a b2 13 f0       	push   $0xf013b29a
f011afb6:	e8 4a 52 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011afbb:	e8 dd 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011afc0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011afc3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011afc8:	74 17                	je     f011afe1 <test_kmalloc_bestfit1+0x1085>
f011afca:	83 ec 04             	sub    $0x4,%esp
f011afcd:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011afd2:	68 17 02 00 00       	push   $0x217
f011afd7:	68 9a b2 13 f0       	push   $0xf013b29a
f011afdc:	e8 24 52 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011afe1:	e8 b7 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011afe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afe9:	e8 da 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011afee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011aff1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011aff7:	83 ec 0c             	sub    $0xc,%esp
f011affa:	50                   	push   %eax
f011affb:	e8 50 c9 fe ff       	call   f0107950 <kfree>
f011b000:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b003:	e8 c0 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b008:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b00b:	74 17                	je     f011b024 <test_kmalloc_bestfit1+0x10c8>
f011b00d:	83 ec 04             	sub    $0x4,%esp
f011b010:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b015:	68 1d 02 00 00       	push   $0x21d
f011b01a:	68 9a b2 13 f0       	push   $0xf013b29a
f011b01f:	e8 e1 51 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b024:	e8 74 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b029:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b02c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b031:	74 17                	je     f011b04a <test_kmalloc_bestfit1+0x10ee>
f011b033:	83 ec 04             	sub    $0x4,%esp
f011b036:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011b03b:	68 1e 02 00 00       	push   $0x21e
f011b040:	68 9a b2 13 f0       	push   $0xf013b29a
f011b045:	e8 bb 51 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b04a:	e8 4e 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b04f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b052:	e8 71 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b057:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b05a:	83 ec 0c             	sub    $0xc,%esp
f011b05d:	68 00 fc 1f 00       	push   $0x1ffc00
f011b062:	e8 1e c8 fe ff       	call   f0107885 <kmalloc>
f011b067:	83 c4 10             	add    $0x10,%esp
f011b06a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b070:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b076:	89 c1                	mov    %eax,%ecx
f011b078:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b07f:	10 00 00 
f011b082:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b088:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b08d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b093:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b099:	ba 00 00 00 00       	mov    $0x0,%edx
f011b09e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b0a4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b0aa:	29 d0                	sub    %edx,%eax
f011b0ac:	89 c3                	mov    %eax,%ebx
f011b0ae:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b0b5:	10 00 00 
f011b0b8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b0bd:	0f b6 d0             	movzbl %al,%edx
f011b0c0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b0c6:	01 d0                	add    %edx,%eax
f011b0c8:	48                   	dec    %eax
f011b0c9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b0cf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b0d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0da:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b0e0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b0e6:	29 d0                	sub    %edx,%eax
f011b0e8:	01 c3                	add    %eax,%ebx
f011b0ea:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b0f1:	10 00 00 
f011b0f4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b0f9:	0f b6 c0             	movzbl %al,%eax
f011b0fc:	c1 e0 04             	shl    $0x4,%eax
f011b0ff:	89 c2                	mov    %eax,%edx
f011b101:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b107:	01 d0                	add    %edx,%eax
f011b109:	48                   	dec    %eax
f011b10a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b110:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b116:	ba 00 00 00 00       	mov    $0x0,%edx
f011b11b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b121:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b127:	29 d0                	sub    %edx,%eax
f011b129:	01 d8                	add    %ebx,%eax
f011b12b:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b130:	39 c1                	cmp    %eax,%ecx
f011b132:	74 17                	je     f011b14b <test_kmalloc_bestfit1+0x11ef>
f011b134:	83 ec 04             	sub    $0x4,%esp
f011b137:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b13c:	68 27 02 00 00       	push   $0x227
f011b141:	68 9a b2 13 f0       	push   $0xf013b29a
f011b146:	e8 ba 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b14b:	e8 78 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b150:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b153:	74 17                	je     f011b16c <test_kmalloc_bestfit1+0x1210>
f011b155:	83 ec 04             	sub    $0x4,%esp
f011b158:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b15d:	68 28 02 00 00       	push   $0x228
f011b162:	68 9a b2 13 f0       	push   $0xf013b29a
f011b167:	e8 99 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b16c:	e8 2c 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b171:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b174:	29 c2                	sub    %eax,%edx
f011b176:	89 d0                	mov    %edx,%eax
f011b178:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b17d:	74 17                	je     f011b196 <test_kmalloc_bestfit1+0x123a>
f011b17f:	83 ec 04             	sub    $0x4,%esp
f011b182:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b187:	68 29 02 00 00       	push   $0x229
f011b18c:	68 9a b2 13 f0       	push   $0xf013b29a
f011b191:	e8 6f 50 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b196:	83 ec 0c             	sub    $0xc,%esp
f011b199:	68 04 b7 13 f0       	push   $0xf013b704
f011b19e:	e8 6b 5b fe ff       	call   f0100d0e <cprintf>
f011b1a3:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b1a6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b1ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b1ae:	5b                   	pop    %ebx
f011b1af:	5f                   	pop    %edi
f011b1b0:	5d                   	pop    %ebp
f011b1b1:	c3                   	ret    

f011b1b2 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b1b2:	55                   	push   %ebp
f011b1b3:	89 e5                	mov    %esp,%ebp
f011b1b5:	57                   	push   %edi
f011b1b6:	53                   	push   %ebx
f011b1b7:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b1bd:	83 ec 0c             	sub    $0xc,%esp
f011b1c0:	68 dc b1 13 f0       	push   $0xf013b1dc
f011b1c5:	e8 44 5b fe ff       	call   f0100d0e <cprintf>
f011b1ca:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b1cd:	83 ec 0c             	sub    $0xc,%esp
f011b1d0:	68 0c b2 13 f0       	push   $0xf013b20c
f011b1d5:	e8 34 5b fe ff       	call   f0100d0e <cprintf>
f011b1da:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b1dd:	83 ec 0c             	sub    $0xc,%esp
f011b1e0:	68 dc b1 13 f0       	push   $0xf013b1dc
f011b1e5:	e8 24 5b fe ff       	call   f0100d0e <cprintf>
f011b1ea:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b1ed:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b1f3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b1f8:	b8 00 00 00 00       	mov    $0x0,%eax
f011b1fd:	89 d7                	mov    %edx,%edi
f011b1ff:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b201:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b208:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b20b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b210:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b213:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b216:	ba 00 00 00 00       	mov    $0x0,%edx
f011b21b:	f7 75 f4             	divl   -0xc(%ebp)
f011b21e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b221:	29 d0                	sub    %edx,%eax
f011b223:	89 c1                	mov    %eax,%ecx
f011b225:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b22c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b231:	0f b6 d0             	movzbl %al,%edx
f011b234:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b237:	01 d0                	add    %edx,%eax
f011b239:	48                   	dec    %eax
f011b23a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b23d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b240:	ba 00 00 00 00       	mov    $0x0,%edx
f011b245:	f7 75 ec             	divl   -0x14(%ebp)
f011b248:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b24b:	29 d0                	sub    %edx,%eax
f011b24d:	01 c1                	add    %eax,%ecx
f011b24f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b256:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b25b:	0f b6 c0             	movzbl %al,%eax
f011b25e:	c1 e0 04             	shl    $0x4,%eax
f011b261:	89 c2                	mov    %eax,%edx
f011b263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b266:	01 d0                	add    %edx,%eax
f011b268:	48                   	dec    %eax
f011b269:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b26c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b26f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b274:	f7 75 e4             	divl   -0x1c(%ebp)
f011b277:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b27a:	29 d0                	sub    %edx,%eax
f011b27c:	01 c8                	add    %ecx,%eax
f011b27e:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b283:	29 c2                	sub    %eax,%edx
f011b285:	89 d0                	mov    %edx,%eax
f011b287:	83 ec 0c             	sub    $0xc,%esp
f011b28a:	50                   	push   %eax
f011b28b:	e8 f5 c5 fe ff       	call   f0107885 <kmalloc>
f011b290:	83 c4 10             	add    $0x10,%esp
f011b293:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b299:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b29f:	85 c0                	test   %eax,%eax
f011b2a1:	74 17                	je     f011b2ba <test_kmalloc_bestfit2+0x108>
f011b2a3:	83 ec 04             	sub    $0x4,%esp
f011b2a6:	68 4c b7 13 f0       	push   $0xf013b74c
f011b2ab:	68 3f 02 00 00       	push   $0x23f
f011b2b0:	68 9a b2 13 f0       	push   $0xf013b29a
f011b2b5:	e8 4b 4f fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b2ba:	e8 de 18 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b2bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2c2:	e8 01 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b2ca:	83 ec 0c             	sub    $0xc,%esp
f011b2cd:	68 00 fc 1f 00       	push   $0x1ffc00
f011b2d2:	e8 ae c5 fe ff       	call   f0107885 <kmalloc>
f011b2d7:	83 c4 10             	add    $0x10,%esp
f011b2da:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b2e0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b2e6:	89 c1                	mov    %eax,%ecx
f011b2e8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b2ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b2f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b2fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b302:	f7 75 d4             	divl   -0x2c(%ebp)
f011b305:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b308:	29 d0                	sub    %edx,%eax
f011b30a:	89 c3                	mov    %eax,%ebx
f011b30c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b313:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b318:	0f b6 d0             	movzbl %al,%edx
f011b31b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b31e:	01 d0                	add    %edx,%eax
f011b320:	48                   	dec    %eax
f011b321:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b324:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b327:	ba 00 00 00 00       	mov    $0x0,%edx
f011b32c:	f7 75 cc             	divl   -0x34(%ebp)
f011b32f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b332:	29 d0                	sub    %edx,%eax
f011b334:	01 c3                	add    %eax,%ebx
f011b336:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b33d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b342:	0f b6 c0             	movzbl %al,%eax
f011b345:	c1 e0 04             	shl    $0x4,%eax
f011b348:	89 c2                	mov    %eax,%edx
f011b34a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b34d:	01 d0                	add    %edx,%eax
f011b34f:	48                   	dec    %eax
f011b350:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b353:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b356:	ba 00 00 00 00       	mov    $0x0,%edx
f011b35b:	f7 75 c4             	divl   -0x3c(%ebp)
f011b35e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b361:	29 d0                	sub    %edx,%eax
f011b363:	01 d8                	add    %ebx,%eax
f011b365:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b36a:	39 c1                	cmp    %eax,%ecx
f011b36c:	74 17                	je     f011b385 <test_kmalloc_bestfit2+0x1d3>
f011b36e:	83 ec 04             	sub    $0x4,%esp
f011b371:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b376:	68 49 02 00 00       	push   $0x249
f011b37b:	68 9a b2 13 f0       	push   $0xf013b29a
f011b380:	e8 80 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b385:	e8 3e 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b38a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b38d:	74 17                	je     f011b3a6 <test_kmalloc_bestfit2+0x1f4>
f011b38f:	83 ec 04             	sub    $0x4,%esp
f011b392:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b397:	68 4a 02 00 00       	push   $0x24a
f011b39c:	68 9a b2 13 f0       	push   $0xf013b29a
f011b3a1:	e8 5f 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b3a6:	e8 f2 17 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b3ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3ae:	29 c2                	sub    %eax,%edx
f011b3b0:	89 d0                	mov    %edx,%eax
f011b3b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b3b7:	74 17                	je     f011b3d0 <test_kmalloc_bestfit2+0x21e>
f011b3b9:	83 ec 04             	sub    $0x4,%esp
f011b3bc:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b3c1:	68 4b 02 00 00       	push   $0x24b
f011b3c6:	68 9a b2 13 f0       	push   $0xf013b29a
f011b3cb:	e8 35 4e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b3d0:	e8 c8 17 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b3d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3d8:	e8 eb 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b3e0:	83 ec 0c             	sub    $0xc,%esp
f011b3e3:	68 00 fc 1f 00       	push   $0x1ffc00
f011b3e8:	e8 98 c4 fe ff       	call   f0107885 <kmalloc>
f011b3ed:	83 c4 10             	add    $0x10,%esp
f011b3f0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b3f6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b3fc:	89 c1                	mov    %eax,%ecx
f011b3fe:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b405:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b408:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b40d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b410:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b413:	ba 00 00 00 00       	mov    $0x0,%edx
f011b418:	f7 75 bc             	divl   -0x44(%ebp)
f011b41b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b41e:	29 d0                	sub    %edx,%eax
f011b420:	89 c3                	mov    %eax,%ebx
f011b422:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b429:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b42e:	0f b6 d0             	movzbl %al,%edx
f011b431:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b434:	01 d0                	add    %edx,%eax
f011b436:	48                   	dec    %eax
f011b437:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b43a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b43d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b442:	f7 75 b4             	divl   -0x4c(%ebp)
f011b445:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b448:	29 d0                	sub    %edx,%eax
f011b44a:	01 c3                	add    %eax,%ebx
f011b44c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b453:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b458:	0f b6 c0             	movzbl %al,%eax
f011b45b:	c1 e0 04             	shl    $0x4,%eax
f011b45e:	89 c2                	mov    %eax,%edx
f011b460:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b463:	01 d0                	add    %edx,%eax
f011b465:	48                   	dec    %eax
f011b466:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b469:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b46c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b471:	f7 75 ac             	divl   -0x54(%ebp)
f011b474:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b477:	29 d0                	sub    %edx,%eax
f011b479:	01 d8                	add    %ebx,%eax
f011b47b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b480:	39 c1                	cmp    %eax,%ecx
f011b482:	74 17                	je     f011b49b <test_kmalloc_bestfit2+0x2e9>
f011b484:	83 ec 04             	sub    $0x4,%esp
f011b487:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b48c:	68 51 02 00 00       	push   $0x251
f011b491:	68 9a b2 13 f0       	push   $0xf013b29a
f011b496:	e8 6a 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b49b:	e8 28 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4a0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4a3:	74 17                	je     f011b4bc <test_kmalloc_bestfit2+0x30a>
f011b4a5:	83 ec 04             	sub    $0x4,%esp
f011b4a8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b4ad:	68 52 02 00 00       	push   $0x252
f011b4b2:	68 9a b2 13 f0       	push   $0xf013b29a
f011b4b7:	e8 49 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b4bc:	e8 dc 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b4c1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b4c4:	29 c2                	sub    %eax,%edx
f011b4c6:	89 d0                	mov    %edx,%eax
f011b4c8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b4cd:	74 17                	je     f011b4e6 <test_kmalloc_bestfit2+0x334>
f011b4cf:	83 ec 04             	sub    $0x4,%esp
f011b4d2:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b4d7:	68 53 02 00 00       	push   $0x253
f011b4dc:	68 9a b2 13 f0       	push   $0xf013b29a
f011b4e1:	e8 1f 4d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b4e6:	e8 b2 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b4eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4ee:	e8 d5 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b4f6:	83 ec 0c             	sub    $0xc,%esp
f011b4f9:	68 00 08 00 00       	push   $0x800
f011b4fe:	e8 82 c3 fe ff       	call   f0107885 <kmalloc>
f011b503:	83 c4 10             	add    $0x10,%esp
f011b506:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b50c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b512:	89 c1                	mov    %eax,%ecx
f011b514:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b51b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b51e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b523:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b526:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b529:	ba 00 00 00 00       	mov    $0x0,%edx
f011b52e:	f7 75 a4             	divl   -0x5c(%ebp)
f011b531:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b534:	29 d0                	sub    %edx,%eax
f011b536:	89 c3                	mov    %eax,%ebx
f011b538:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b53f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b544:	0f b6 d0             	movzbl %al,%edx
f011b547:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b54a:	01 d0                	add    %edx,%eax
f011b54c:	48                   	dec    %eax
f011b54d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b550:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b553:	ba 00 00 00 00       	mov    $0x0,%edx
f011b558:	f7 75 9c             	divl   -0x64(%ebp)
f011b55b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b55e:	29 d0                	sub    %edx,%eax
f011b560:	01 c3                	add    %eax,%ebx
f011b562:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b569:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b56e:	0f b6 c0             	movzbl %al,%eax
f011b571:	c1 e0 04             	shl    $0x4,%eax
f011b574:	89 c2                	mov    %eax,%edx
f011b576:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b579:	01 d0                	add    %edx,%eax
f011b57b:	48                   	dec    %eax
f011b57c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b57f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b582:	ba 00 00 00 00       	mov    $0x0,%edx
f011b587:	f7 75 94             	divl   -0x6c(%ebp)
f011b58a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b58d:	29 d0                	sub    %edx,%eax
f011b58f:	01 d8                	add    %ebx,%eax
f011b591:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b596:	39 c1                	cmp    %eax,%ecx
f011b598:	74 17                	je     f011b5b1 <test_kmalloc_bestfit2+0x3ff>
f011b59a:	83 ec 04             	sub    $0x4,%esp
f011b59d:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b5a2:	68 59 02 00 00       	push   $0x259
f011b5a7:	68 9a b2 13 f0       	push   $0xf013b29a
f011b5ac:	e8 54 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5b1:	e8 12 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b5b9:	74 17                	je     f011b5d2 <test_kmalloc_bestfit2+0x420>
f011b5bb:	83 ec 04             	sub    $0x4,%esp
f011b5be:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b5c3:	68 5a 02 00 00       	push   $0x25a
f011b5c8:	68 9a b2 13 f0       	push   $0xf013b29a
f011b5cd:	e8 33 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b5d2:	e8 c6 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b5d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b5da:	29 c2                	sub    %eax,%edx
f011b5dc:	89 d0                	mov    %edx,%eax
f011b5de:	83 f8 01             	cmp    $0x1,%eax
f011b5e1:	74 17                	je     f011b5fa <test_kmalloc_bestfit2+0x448>
f011b5e3:	83 ec 04             	sub    $0x4,%esp
f011b5e6:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b5eb:	68 5b 02 00 00       	push   $0x25b
f011b5f0:	68 9a b2 13 f0       	push   $0xf013b29a
f011b5f5:	e8 0b 4c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b5fa:	e8 9e 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b5ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b602:	e8 c1 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b607:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b60a:	83 ec 0c             	sub    $0xc,%esp
f011b60d:	68 00 08 00 00       	push   $0x800
f011b612:	e8 6e c2 fe ff       	call   f0107885 <kmalloc>
f011b617:	83 c4 10             	add    $0x10,%esp
f011b61a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b620:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b626:	89 c1                	mov    %eax,%ecx
f011b628:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b62f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b632:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b637:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b63a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b63d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b642:	f7 75 8c             	divl   -0x74(%ebp)
f011b645:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b648:	29 d0                	sub    %edx,%eax
f011b64a:	89 c3                	mov    %eax,%ebx
f011b64c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b653:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b658:	0f b6 d0             	movzbl %al,%edx
f011b65b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b65e:	01 d0                	add    %edx,%eax
f011b660:	48                   	dec    %eax
f011b661:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b664:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b667:	ba 00 00 00 00       	mov    $0x0,%edx
f011b66c:	f7 75 84             	divl   -0x7c(%ebp)
f011b66f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b672:	29 d0                	sub    %edx,%eax
f011b674:	01 c3                	add    %eax,%ebx
f011b676:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b67d:	10 00 00 
f011b680:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b685:	0f b6 c0             	movzbl %al,%eax
f011b688:	c1 e0 04             	shl    $0x4,%eax
f011b68b:	89 c2                	mov    %eax,%edx
f011b68d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b693:	01 d0                	add    %edx,%eax
f011b695:	48                   	dec    %eax
f011b696:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b69c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b6a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6a7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b6ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b6b3:	29 d0                	sub    %edx,%eax
f011b6b5:	01 d8                	add    %ebx,%eax
f011b6b7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b6bc:	39 c1                	cmp    %eax,%ecx
f011b6be:	74 17                	je     f011b6d7 <test_kmalloc_bestfit2+0x525>
f011b6c0:	83 ec 04             	sub    $0x4,%esp
f011b6c3:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b6c8:	68 61 02 00 00       	push   $0x261
f011b6cd:	68 9a b2 13 f0       	push   $0xf013b29a
f011b6d2:	e8 2e 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6d7:	e8 ec 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6df:	74 17                	je     f011b6f8 <test_kmalloc_bestfit2+0x546>
f011b6e1:	83 ec 04             	sub    $0x4,%esp
f011b6e4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b6e9:	68 62 02 00 00       	push   $0x262
f011b6ee:	68 9a b2 13 f0       	push   $0xf013b29a
f011b6f3:	e8 0d 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b6f8:	e8 a0 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b6fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b700:	29 c2                	sub    %eax,%edx
f011b702:	89 d0                	mov    %edx,%eax
f011b704:	83 f8 01             	cmp    $0x1,%eax
f011b707:	74 17                	je     f011b720 <test_kmalloc_bestfit2+0x56e>
f011b709:	83 ec 04             	sub    $0x4,%esp
f011b70c:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b711:	68 63 02 00 00       	push   $0x263
f011b716:	68 9a b2 13 f0       	push   $0xf013b29a
f011b71b:	e8 e5 4a fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b720:	e8 78 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b725:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b728:	e8 9b 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b72d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b730:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b736:	83 ec 0c             	sub    $0xc,%esp
f011b739:	50                   	push   %eax
f011b73a:	e8 11 c2 fe ff       	call   f0107950 <kfree>
f011b73f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b742:	e8 81 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b747:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b74a:	74 17                	je     f011b763 <test_kmalloc_bestfit2+0x5b1>
f011b74c:	83 ec 04             	sub    $0x4,%esp
f011b74f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b754:	68 69 02 00 00       	push   $0x269
f011b759:	68 9a b2 13 f0       	push   $0xf013b29a
f011b75e:	e8 a2 4a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b763:	e8 35 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b768:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b76b:	83 f8 01             	cmp    $0x1,%eax
f011b76e:	74 17                	je     f011b787 <test_kmalloc_bestfit2+0x5d5>
f011b770:	83 ec 04             	sub    $0x4,%esp
f011b773:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b778:	68 6a 02 00 00       	push   $0x26a
f011b77d:	68 9a b2 13 f0       	push   $0xf013b29a
f011b782:	e8 7e 4a fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b787:	e8 11 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b78c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b78f:	e8 34 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b794:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b797:	83 ec 0c             	sub    $0xc,%esp
f011b79a:	68 00 1c 00 00       	push   $0x1c00
f011b79f:	e8 e1 c0 fe ff       	call   f0107885 <kmalloc>
f011b7a4:	83 c4 10             	add    $0x10,%esp
f011b7a7:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b7ad:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b7b3:	89 c1                	mov    %eax,%ecx
f011b7b5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b7bc:	10 00 00 
f011b7bf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b7c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7ca:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b7d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b7d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7db:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b7e1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b7e7:	29 d0                	sub    %edx,%eax
f011b7e9:	89 c3                	mov    %eax,%ebx
f011b7eb:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b7f2:	10 00 00 
f011b7f5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b7fa:	0f b6 d0             	movzbl %al,%edx
f011b7fd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b803:	01 d0                	add    %edx,%eax
f011b805:	48                   	dec    %eax
f011b806:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b80c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b812:	ba 00 00 00 00       	mov    $0x0,%edx
f011b817:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b81d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b823:	29 d0                	sub    %edx,%eax
f011b825:	01 c3                	add    %eax,%ebx
f011b827:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b82e:	10 00 00 
f011b831:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b836:	0f b6 c0             	movzbl %al,%eax
f011b839:	c1 e0 04             	shl    $0x4,%eax
f011b83c:	89 c2                	mov    %eax,%edx
f011b83e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b844:	01 d0                	add    %edx,%eax
f011b846:	48                   	dec    %eax
f011b847:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b84d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b853:	ba 00 00 00 00       	mov    $0x0,%edx
f011b858:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b85e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b864:	29 d0                	sub    %edx,%eax
f011b866:	01 d8                	add    %ebx,%eax
f011b868:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b86d:	39 c1                	cmp    %eax,%ecx
f011b86f:	74 17                	je     f011b888 <test_kmalloc_bestfit2+0x6d6>
f011b871:	83 ec 04             	sub    $0x4,%esp
f011b874:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011b879:	68 70 02 00 00       	push   $0x270
f011b87e:	68 9a b2 13 f0       	push   $0xf013b29a
f011b883:	e8 7d 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b888:	e8 3b 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b88d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b890:	74 17                	je     f011b8a9 <test_kmalloc_bestfit2+0x6f7>
f011b892:	83 ec 04             	sub    $0x4,%esp
f011b895:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b89a:	68 71 02 00 00       	push   $0x271
f011b89f:	68 9a b2 13 f0       	push   $0xf013b29a
f011b8a4:	e8 5c 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b8a9:	e8 ef 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b8ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b8b1:	29 c2                	sub    %eax,%edx
f011b8b3:	89 d0                	mov    %edx,%eax
f011b8b5:	83 f8 02             	cmp    $0x2,%eax
f011b8b8:	74 17                	je     f011b8d1 <test_kmalloc_bestfit2+0x71f>
f011b8ba:	83 ec 04             	sub    $0x4,%esp
f011b8bd:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011b8c2:	68 72 02 00 00       	push   $0x272
f011b8c7:	68 9a b2 13 f0       	push   $0xf013b29a
f011b8cc:	e8 34 49 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b8d1:	e8 c7 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b8d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8d9:	e8 ea 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b8de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b8e1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b8e7:	83 ec 0c             	sub    $0xc,%esp
f011b8ea:	50                   	push   %eax
f011b8eb:	e8 60 c0 fe ff       	call   f0107950 <kfree>
f011b8f0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8f3:	e8 d0 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b8f8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b8fb:	74 17                	je     f011b914 <test_kmalloc_bestfit2+0x762>
f011b8fd:	83 ec 04             	sub    $0x4,%esp
f011b900:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011b905:	68 78 02 00 00       	push   $0x278
f011b90a:	68 9a b2 13 f0       	push   $0xf013b29a
f011b90f:	e8 f1 48 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b914:	e8 84 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b919:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b91c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b921:	74 17                	je     f011b93a <test_kmalloc_bestfit2+0x788>
f011b923:	83 ec 04             	sub    $0x4,%esp
f011b926:	68 68 b5 13 f0       	push   $0xf013b568
f011b92b:	68 79 02 00 00       	push   $0x279
f011b930:	68 9a b2 13 f0       	push   $0xf013b29a
f011b935:	e8 cb 48 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b93a:	e8 5e 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b93f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b942:	e8 81 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b947:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b94a:	83 ec 0c             	sub    $0xc,%esp
f011b94d:	68 00 fc 2f 00       	push   $0x2ffc00
f011b952:	e8 2e bf fe ff       	call   f0107885 <kmalloc>
f011b957:	83 c4 10             	add    $0x10,%esp
f011b95a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b960:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b966:	89 c1                	mov    %eax,%ecx
f011b968:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b96f:	10 00 00 
f011b972:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b978:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b97d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b983:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b989:	ba 00 00 00 00       	mov    $0x0,%edx
f011b98e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b994:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b99a:	29 d0                	sub    %edx,%eax
f011b99c:	89 c3                	mov    %eax,%ebx
f011b99e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b9a5:	10 00 00 
f011b9a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b9ad:	0f b6 d0             	movzbl %al,%edx
f011b9b0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b9b6:	01 d0                	add    %edx,%eax
f011b9b8:	48                   	dec    %eax
f011b9b9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b9bf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b9c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ca:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b9d0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b9d6:	29 d0                	sub    %edx,%eax
f011b9d8:	01 c3                	add    %eax,%ebx
f011b9da:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b9e1:	10 00 00 
f011b9e4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b9e9:	0f b6 c0             	movzbl %al,%eax
f011b9ec:	c1 e0 04             	shl    $0x4,%eax
f011b9ef:	89 c2                	mov    %eax,%edx
f011b9f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b9f7:	01 d0                	add    %edx,%eax
f011b9f9:	48                   	dec    %eax
f011b9fa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ba00:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ba06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba0b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ba11:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ba17:	29 d0                	sub    %edx,%eax
f011ba19:	01 d8                	add    %ebx,%eax
f011ba1b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ba20:	39 c1                	cmp    %eax,%ecx
f011ba22:	74 17                	je     f011ba3b <test_kmalloc_bestfit2+0x889>
f011ba24:	83 ec 04             	sub    $0x4,%esp
f011ba27:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011ba2c:	68 7f 02 00 00       	push   $0x27f
f011ba31:	68 9a b2 13 f0       	push   $0xf013b29a
f011ba36:	e8 ca 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba3b:	e8 88 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba43:	74 17                	je     f011ba5c <test_kmalloc_bestfit2+0x8aa>
f011ba45:	83 ec 04             	sub    $0x4,%esp
f011ba48:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ba4d:	68 80 02 00 00       	push   $0x280
f011ba52:	68 9a b2 13 f0       	push   $0xf013b29a
f011ba57:	e8 a9 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011ba5c:	e8 3c 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba61:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba64:	29 c2                	sub    %eax,%edx
f011ba66:	89 d0                	mov    %edx,%eax
f011ba68:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ba6d:	74 17                	je     f011ba86 <test_kmalloc_bestfit2+0x8d4>
f011ba6f:	83 ec 04             	sub    $0x4,%esp
f011ba72:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ba77:	68 81 02 00 00       	push   $0x281
f011ba7c:	68 9a b2 13 f0       	push   $0xf013b29a
f011ba81:	e8 7f 47 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba86:	e8 12 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba8e:	e8 35 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ba96:	83 ec 0c             	sub    $0xc,%esp
f011ba99:	68 00 18 20 00       	push   $0x201800
f011ba9e:	e8 e2 bd fe ff       	call   f0107885 <kmalloc>
f011baa3:	83 c4 10             	add    $0x10,%esp
f011baa6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011baac:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bab2:	89 c1                	mov    %eax,%ecx
f011bab4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011babb:	10 00 00 
f011babe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bac4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bac9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bacf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bad5:	ba 00 00 00 00       	mov    $0x0,%edx
f011bada:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bae0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bae6:	29 d0                	sub    %edx,%eax
f011bae8:	89 c3                	mov    %eax,%ebx
f011baea:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011baf1:	10 00 00 
f011baf4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011baf9:	0f b6 d0             	movzbl %al,%edx
f011bafc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bb02:	01 d0                	add    %edx,%eax
f011bb04:	48                   	dec    %eax
f011bb05:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bb0b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bb11:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb16:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bb1c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bb22:	29 d0                	sub    %edx,%eax
f011bb24:	01 c3                	add    %eax,%ebx
f011bb26:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bb2d:	10 00 00 
f011bb30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bb35:	0f b6 c0             	movzbl %al,%eax
f011bb38:	c1 e0 04             	shl    $0x4,%eax
f011bb3b:	89 c2                	mov    %eax,%edx
f011bb3d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bb43:	01 d0                	add    %edx,%eax
f011bb45:	48                   	dec    %eax
f011bb46:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bb4c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bb52:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb57:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bb5d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bb63:	29 d0                	sub    %edx,%eax
f011bb65:	01 d8                	add    %ebx,%eax
f011bb67:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bb6c:	39 c1                	cmp    %eax,%ecx
f011bb6e:	74 17                	je     f011bb87 <test_kmalloc_bestfit2+0x9d5>
f011bb70:	83 ec 04             	sub    $0x4,%esp
f011bb73:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011bb78:	68 87 02 00 00       	push   $0x287
f011bb7d:	68 9a b2 13 f0       	push   $0xf013b29a
f011bb82:	e8 7e 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb87:	e8 3c 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb8f:	74 17                	je     f011bba8 <test_kmalloc_bestfit2+0x9f6>
f011bb91:	83 ec 04             	sub    $0x4,%esp
f011bb94:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011bb99:	68 88 02 00 00       	push   $0x288
f011bb9e:	68 9a b2 13 f0       	push   $0xf013b29a
f011bba3:	e8 5d 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bba8:	e8 f0 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bbad:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bbb0:	29 c2                	sub    %eax,%edx
f011bbb2:	89 d0                	mov    %edx,%eax
f011bbb4:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bbb9:	74 17                	je     f011bbd2 <test_kmalloc_bestfit2+0xa20>
f011bbbb:	83 ec 04             	sub    $0x4,%esp
f011bbbe:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011bbc3:	68 89 02 00 00       	push   $0x289
f011bbc8:	68 9a b2 13 f0       	push   $0xf013b29a
f011bbcd:	e8 33 46 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbd2:	e8 c6 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bbd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbda:	e8 e9 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bbe2:	83 ec 0c             	sub    $0xc,%esp
f011bbe5:	68 00 fc 4f 00       	push   $0x4ffc00
f011bbea:	e8 96 bc fe ff       	call   f0107885 <kmalloc>
f011bbef:	83 c4 10             	add    $0x10,%esp
f011bbf2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bbf8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011bbfe:	89 c1                	mov    %eax,%ecx
f011bc00:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011bc07:	10 00 00 
f011bc0a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011bc10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc15:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011bc1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bc21:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc26:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011bc2c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bc32:	29 d0                	sub    %edx,%eax
f011bc34:	89 c3                	mov    %eax,%ebx
f011bc36:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011bc3d:	10 00 00 
f011bc40:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bc45:	0f b6 d0             	movzbl %al,%edx
f011bc48:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011bc4e:	01 d0                	add    %edx,%eax
f011bc50:	48                   	dec    %eax
f011bc51:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011bc57:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bc5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc62:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011bc68:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bc6e:	29 d0                	sub    %edx,%eax
f011bc70:	01 c3                	add    %eax,%ebx
f011bc72:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011bc79:	10 00 00 
f011bc7c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bc81:	0f b6 c0             	movzbl %al,%eax
f011bc84:	c1 e0 04             	shl    $0x4,%eax
f011bc87:	89 c2                	mov    %eax,%edx
f011bc89:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011bc8f:	01 d0                	add    %edx,%eax
f011bc91:	48                   	dec    %eax
f011bc92:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011bc98:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011bc9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bca3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011bca9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011bcaf:	29 d0                	sub    %edx,%eax
f011bcb1:	01 d8                	add    %ebx,%eax
f011bcb3:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bcb8:	39 c1                	cmp    %eax,%ecx
f011bcba:	74 17                	je     f011bcd3 <test_kmalloc_bestfit2+0xb21>
f011bcbc:	83 ec 04             	sub    $0x4,%esp
f011bcbf:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011bcc4:	68 8f 02 00 00       	push   $0x28f
f011bcc9:	68 9a b2 13 f0       	push   $0xf013b29a
f011bcce:	e8 32 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcd3:	e8 f0 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcd8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcdb:	74 17                	je     f011bcf4 <test_kmalloc_bestfit2+0xb42>
f011bcdd:	83 ec 04             	sub    $0x4,%esp
f011bce0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011bce5:	68 90 02 00 00       	push   $0x290
f011bcea:	68 9a b2 13 f0       	push   $0xf013b29a
f011bcef:	e8 11 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bcf4:	e8 a4 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bcf9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bcfc:	29 c2                	sub    %eax,%edx
f011bcfe:	89 d0                	mov    %edx,%eax
f011bd00:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bd05:	74 17                	je     f011bd1e <test_kmalloc_bestfit2+0xb6c>
f011bd07:	83 ec 04             	sub    $0x4,%esp
f011bd0a:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011bd0f:	68 91 02 00 00       	push   $0x291
f011bd14:	68 9a b2 13 f0       	push   $0xf013b29a
f011bd19:	e8 e7 44 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd1e:	e8 7a 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bd23:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd26:	e8 9d 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011bd2e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bd34:	83 ec 0c             	sub    $0xc,%esp
f011bd37:	50                   	push   %eax
f011bd38:	e8 13 bc fe ff       	call   f0107950 <kfree>
f011bd3d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd40:	e8 83 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd48:	74 17                	je     f011bd61 <test_kmalloc_bestfit2+0xbaf>
f011bd4a:	83 ec 04             	sub    $0x4,%esp
f011bd4d:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011bd52:	68 97 02 00 00       	push   $0x297
f011bd57:	68 9a b2 13 f0       	push   $0xf013b29a
f011bd5c:	e8 a4 44 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011bd61:	e8 37 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bd66:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bd69:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bd6e:	74 17                	je     f011bd87 <test_kmalloc_bestfit2+0xbd5>
f011bd70:	83 ec 04             	sub    $0x4,%esp
f011bd73:	68 68 b5 13 f0       	push   $0xf013b568
f011bd78:	68 98 02 00 00       	push   $0x298
f011bd7d:	68 9a b2 13 f0       	push   $0xf013b29a
f011bd82:	e8 7e 44 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd87:	e8 11 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bd8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd8f:	e8 34 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd94:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011bd97:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bd9d:	83 ec 0c             	sub    $0xc,%esp
f011bda0:	50                   	push   %eax
f011bda1:	e8 aa bb fe ff       	call   f0107950 <kfree>
f011bda6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bda9:	e8 1a 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bdb1:	74 17                	je     f011bdca <test_kmalloc_bestfit2+0xc18>
f011bdb3:	83 ec 04             	sub    $0x4,%esp
f011bdb6:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011bdbb:	68 9e 02 00 00       	push   $0x29e
f011bdc0:	68 9a b2 13 f0       	push   $0xf013b29a
f011bdc5:	e8 3b 44 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bdca:	e8 ce 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bdcf:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bdd2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bdd7:	74 17                	je     f011bdf0 <test_kmalloc_bestfit2+0xc3e>
f011bdd9:	83 ec 04             	sub    $0x4,%esp
f011bddc:	68 94 b7 13 f0       	push   $0xf013b794
f011bde1:	68 9f 02 00 00       	push   $0x29f
f011bde6:	68 9a b2 13 f0       	push   $0xf013b29a
f011bdeb:	e8 15 44 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bdf0:	e8 a8 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bdf5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdf8:	e8 cb 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdfd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011be00:	83 ec 0c             	sub    $0xc,%esp
f011be03:	68 00 fc 1f 00       	push   $0x1ffc00
f011be08:	e8 78 ba fe ff       	call   f0107885 <kmalloc>
f011be0d:	83 c4 10             	add    $0x10,%esp
f011be10:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be16:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011be1c:	89 c1                	mov    %eax,%ecx
f011be1e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011be25:	10 00 00 
f011be28:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011be2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be33:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011be39:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011be3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011be44:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011be4a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011be50:	29 d0                	sub    %edx,%eax
f011be52:	89 c3                	mov    %eax,%ebx
f011be54:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011be5b:	10 00 00 
f011be5e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011be63:	0f b6 d0             	movzbl %al,%edx
f011be66:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011be6c:	01 d0                	add    %edx,%eax
f011be6e:	48                   	dec    %eax
f011be6f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011be75:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011be7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011be80:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011be86:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011be8c:	29 d0                	sub    %edx,%eax
f011be8e:	01 c3                	add    %eax,%ebx
f011be90:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011be97:	10 00 00 
f011be9a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011be9f:	0f b6 c0             	movzbl %al,%eax
f011bea2:	c1 e0 04             	shl    $0x4,%eax
f011bea5:	89 c2                	mov    %eax,%edx
f011bea7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011bead:	01 d0                	add    %edx,%eax
f011beaf:	48                   	dec    %eax
f011beb0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011beb6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bebc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bec1:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011bec7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011becd:	29 d0                	sub    %edx,%eax
f011becf:	01 d8                	add    %ebx,%eax
f011bed1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bed6:	39 c1                	cmp    %eax,%ecx
f011bed8:	74 17                	je     f011bef1 <test_kmalloc_bestfit2+0xd3f>
f011beda:	83 ec 04             	sub    $0x4,%esp
f011bedd:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011bee2:	68 a5 02 00 00       	push   $0x2a5
f011bee7:	68 9a b2 13 f0       	push   $0xf013b29a
f011beec:	e8 14 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bef1:	e8 d2 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bef6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bef9:	74 17                	je     f011bf12 <test_kmalloc_bestfit2+0xd60>
f011befb:	83 ec 04             	sub    $0x4,%esp
f011befe:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011bf03:	68 a6 02 00 00       	push   $0x2a6
f011bf08:	68 9a b2 13 f0       	push   $0xf013b29a
f011bf0d:	e8 f3 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011bf12:	e8 86 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bf17:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bf1a:	29 c2                	sub    %eax,%edx
f011bf1c:	89 d0                	mov    %edx,%eax
f011bf1e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bf23:	74 17                	je     f011bf3c <test_kmalloc_bestfit2+0xd8a>
f011bf25:	83 ec 04             	sub    $0x4,%esp
f011bf28:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011bf2d:	68 a7 02 00 00       	push   $0x2a7
f011bf32:	68 9a b2 13 f0       	push   $0xf013b29a
f011bf37:	e8 c9 42 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf3c:	e8 5c 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bf41:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf44:	e8 7f 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf49:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011bf4c:	83 ec 0c             	sub    $0xc,%esp
f011bf4f:	68 00 18 00 00       	push   $0x1800
f011bf54:	e8 2c b9 fe ff       	call   f0107885 <kmalloc>
f011bf59:	83 c4 10             	add    $0x10,%esp
f011bf5c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf62:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011bf68:	89 c1                	mov    %eax,%ecx
f011bf6a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011bf71:	10 00 00 
f011bf74:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011bf7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf7f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011bf85:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bf8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf90:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011bf96:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bf9c:	29 d0                	sub    %edx,%eax
f011bf9e:	89 c3                	mov    %eax,%ebx
f011bfa0:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011bfa7:	10 00 00 
f011bfaa:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bfaf:	0f b6 d0             	movzbl %al,%edx
f011bfb2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011bfb8:	01 d0                	add    %edx,%eax
f011bfba:	48                   	dec    %eax
f011bfbb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011bfc1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bfc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfcc:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011bfd2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bfd8:	29 d0                	sub    %edx,%eax
f011bfda:	01 c3                	add    %eax,%ebx
f011bfdc:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bfe3:	10 00 00 
f011bfe6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bfeb:	0f b6 c0             	movzbl %al,%eax
f011bfee:	c1 e0 04             	shl    $0x4,%eax
f011bff1:	89 c2                	mov    %eax,%edx
f011bff3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bff9:	01 d0                	add    %edx,%eax
f011bffb:	48                   	dec    %eax
f011bffc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c002:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c008:	ba 00 00 00 00       	mov    $0x0,%edx
f011c00d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c013:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c019:	29 d0                	sub    %edx,%eax
f011c01b:	01 d8                	add    %ebx,%eax
f011c01d:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c022:	39 c1                	cmp    %eax,%ecx
f011c024:	74 17                	je     f011c03d <test_kmalloc_bestfit2+0xe8b>
f011c026:	83 ec 04             	sub    $0x4,%esp
f011c029:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c02e:	68 ad 02 00 00       	push   $0x2ad
f011c033:	68 9a b2 13 f0       	push   $0xf013b29a
f011c038:	e8 c8 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c03d:	e8 86 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c042:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c045:	74 17                	je     f011c05e <test_kmalloc_bestfit2+0xeac>
f011c047:	83 ec 04             	sub    $0x4,%esp
f011c04a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c04f:	68 ae 02 00 00       	push   $0x2ae
f011c054:	68 9a b2 13 f0       	push   $0xf013b29a
f011c059:	e8 a7 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c05e:	e8 3a 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c063:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c066:	29 c2                	sub    %eax,%edx
f011c068:	89 d0                	mov    %edx,%eax
f011c06a:	83 f8 02             	cmp    $0x2,%eax
f011c06d:	74 17                	je     f011c086 <test_kmalloc_bestfit2+0xed4>
f011c06f:	83 ec 04             	sub    $0x4,%esp
f011c072:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011c077:	68 af 02 00 00       	push   $0x2af
f011c07c:	68 9a b2 13 f0       	push   $0xf013b29a
f011c081:	e8 7f 41 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c086:	e8 12 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c08b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c08e:	e8 35 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c093:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c096:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c09c:	83 ec 0c             	sub    $0xc,%esp
f011c09f:	50                   	push   %eax
f011c0a0:	e8 ab b8 fe ff       	call   f0107950 <kfree>
f011c0a5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0a8:	e8 1b 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c0b0:	74 17                	je     f011c0c9 <test_kmalloc_bestfit2+0xf17>
f011c0b2:	83 ec 04             	sub    $0x4,%esp
f011c0b5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c0ba:	68 b5 02 00 00       	push   $0x2b5
f011c0bf:	68 9a b2 13 f0       	push   $0xf013b29a
f011c0c4:	e8 3c 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0c9:	e8 cf 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c0ce:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c0d1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c0d6:	74 17                	je     f011c0ef <test_kmalloc_bestfit2+0xf3d>
f011c0d8:	83 ec 04             	sub    $0x4,%esp
f011c0db:	68 94 b7 13 f0       	push   $0xf013b794
f011c0e0:	68 b6 02 00 00       	push   $0x2b6
f011c0e5:	68 9a b2 13 f0       	push   $0xf013b29a
f011c0ea:	e8 16 41 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0ef:	e8 a9 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c0f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0f7:	e8 cc 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c0ff:	83 ec 0c             	sub    $0xc,%esp
f011c102:	68 00 fc 2f 00       	push   $0x2ffc00
f011c107:	e8 79 b7 fe ff       	call   f0107885 <kmalloc>
f011c10c:	83 c4 10             	add    $0x10,%esp
f011c10f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c115:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c11b:	89 c1                	mov    %eax,%ecx
f011c11d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c124:	10 00 00 
f011c127:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c12d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c132:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c138:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c13e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c143:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c149:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c14f:	29 d0                	sub    %edx,%eax
f011c151:	89 c3                	mov    %eax,%ebx
f011c153:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c15a:	10 00 00 
f011c15d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c162:	0f b6 d0             	movzbl %al,%edx
f011c165:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c16b:	01 d0                	add    %edx,%eax
f011c16d:	48                   	dec    %eax
f011c16e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c174:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c17a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c17f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c185:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c18b:	29 d0                	sub    %edx,%eax
f011c18d:	01 c3                	add    %eax,%ebx
f011c18f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c196:	10 00 00 
f011c199:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c19e:	0f b6 c0             	movzbl %al,%eax
f011c1a1:	c1 e0 04             	shl    $0x4,%eax
f011c1a4:	89 c2                	mov    %eax,%edx
f011c1a6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c1ac:	01 d0                	add    %edx,%eax
f011c1ae:	48                   	dec    %eax
f011c1af:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c1b5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c1bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1c0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c1c6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c1cc:	29 d0                	sub    %edx,%eax
f011c1ce:	01 d8                	add    %ebx,%eax
f011c1d0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c1d5:	39 c1                	cmp    %eax,%ecx
f011c1d7:	74 17                	je     f011c1f0 <test_kmalloc_bestfit2+0x103e>
f011c1d9:	83 ec 04             	sub    $0x4,%esp
f011c1dc:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c1e1:	68 bc 02 00 00       	push   $0x2bc
f011c1e6:	68 9a b2 13 f0       	push   $0xf013b29a
f011c1eb:	e8 15 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1f0:	e8 d3 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1f8:	74 17                	je     f011c211 <test_kmalloc_bestfit2+0x105f>
f011c1fa:	83 ec 04             	sub    $0x4,%esp
f011c1fd:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c202:	68 bd 02 00 00       	push   $0x2bd
f011c207:	68 9a b2 13 f0       	push   $0xf013b29a
f011c20c:	e8 f4 3f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c211:	e8 87 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c216:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c219:	29 c2                	sub    %eax,%edx
f011c21b:	89 d0                	mov    %edx,%eax
f011c21d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c222:	74 17                	je     f011c23b <test_kmalloc_bestfit2+0x1089>
f011c224:	83 ec 04             	sub    $0x4,%esp
f011c227:	68 94 b7 13 f0       	push   $0xf013b794
f011c22c:	68 be 02 00 00       	push   $0x2be
f011c231:	68 9a b2 13 f0       	push   $0xf013b29a
f011c236:	e8 ca 3f fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c23b:	e8 5d 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c240:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c243:	e8 80 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c248:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c24b:	83 ec 0c             	sub    $0xc,%esp
f011c24e:	68 00 fc 3f 00       	push   $0x3ffc00
f011c253:	e8 2d b6 fe ff       	call   f0107885 <kmalloc>
f011c258:	83 c4 10             	add    $0x10,%esp
f011c25b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c261:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c267:	89 c1                	mov    %eax,%ecx
f011c269:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c270:	10 00 00 
f011c273:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c279:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c27e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c284:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c28a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c28f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c295:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c29b:	29 d0                	sub    %edx,%eax
f011c29d:	89 c3                	mov    %eax,%ebx
f011c29f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c2a6:	10 00 00 
f011c2a9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c2ae:	0f b6 d0             	movzbl %al,%edx
f011c2b1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c2b7:	01 d0                	add    %edx,%eax
f011c2b9:	48                   	dec    %eax
f011c2ba:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c2c0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c2c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2cb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c2d1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c2d7:	29 d0                	sub    %edx,%eax
f011c2d9:	01 c3                	add    %eax,%ebx
f011c2db:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c2e2:	10 00 00 
f011c2e5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c2ea:	0f b6 c0             	movzbl %al,%eax
f011c2ed:	c1 e0 04             	shl    $0x4,%eax
f011c2f0:	89 c2                	mov    %eax,%edx
f011c2f2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c2f8:	01 d0                	add    %edx,%eax
f011c2fa:	48                   	dec    %eax
f011c2fb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c301:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c307:	ba 00 00 00 00       	mov    $0x0,%edx
f011c30c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c312:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c318:	29 d0                	sub    %edx,%eax
f011c31a:	01 d8                	add    %ebx,%eax
f011c31c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c321:	39 c1                	cmp    %eax,%ecx
f011c323:	74 17                	je     f011c33c <test_kmalloc_bestfit2+0x118a>
f011c325:	83 ec 04             	sub    $0x4,%esp
f011c328:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c32d:	68 c4 02 00 00       	push   $0x2c4
f011c332:	68 9a b2 13 f0       	push   $0xf013b29a
f011c337:	e8 c9 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c33c:	e8 87 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c341:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c344:	74 17                	je     f011c35d <test_kmalloc_bestfit2+0x11ab>
f011c346:	83 ec 04             	sub    $0x4,%esp
f011c349:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c34e:	68 c5 02 00 00       	push   $0x2c5
f011c353:	68 9a b2 13 f0       	push   $0xf013b29a
f011c358:	e8 a8 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c35d:	e8 3b 08 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c362:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c365:	29 c2                	sub    %eax,%edx
f011c367:	89 d0                	mov    %edx,%eax
f011c369:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c36e:	74 17                	je     f011c387 <test_kmalloc_bestfit2+0x11d5>
f011c370:	83 ec 04             	sub    $0x4,%esp
f011c373:	68 94 b7 13 f0       	push   $0xf013b794
f011c378:	68 c6 02 00 00       	push   $0x2c6
f011c37d:	68 9a b2 13 f0       	push   $0xf013b29a
f011c382:	e8 7e 3e fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c387:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c38e:	10 00 00 
f011c391:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c397:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c39c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c3a2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c3a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3ad:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c3b3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c3b9:	29 d0                	sub    %edx,%eax
f011c3bb:	89 c1                	mov    %eax,%ecx
f011c3bd:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c3c4:	10 00 00 
f011c3c7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c3cc:	0f b6 d0             	movzbl %al,%edx
f011c3cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c3d5:	01 d0                	add    %edx,%eax
f011c3d7:	48                   	dec    %eax
f011c3d8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c3de:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c3e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3e9:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c3ef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c3f5:	29 d0                	sub    %edx,%eax
f011c3f7:	01 c1                	add    %eax,%ecx
f011c3f9:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c400:	10 00 00 
f011c403:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c408:	0f b6 c0             	movzbl %al,%eax
f011c40b:	c1 e0 04             	shl    $0x4,%eax
f011c40e:	89 c2                	mov    %eax,%edx
f011c410:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c416:	01 d0                	add    %edx,%eax
f011c418:	48                   	dec    %eax
f011c419:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c41f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c425:	ba 00 00 00 00       	mov    $0x0,%edx
f011c42a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c430:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c436:	29 d0                	sub    %edx,%eax
f011c438:	01 c8                	add    %ecx,%eax
f011c43a:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c43f:	29 c2                	sub    %eax,%edx
f011c441:	89 d0                	mov    %edx,%eax
f011c443:	83 ec 0c             	sub    $0xc,%esp
f011c446:	50                   	push   %eax
f011c447:	e8 39 b4 fe ff       	call   f0107885 <kmalloc>
f011c44c:	83 c4 10             	add    $0x10,%esp
f011c44f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c455:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c45b:	85 c0                	test   %eax,%eax
f011c45d:	74 17                	je     f011c476 <test_kmalloc_bestfit2+0x12c4>
f011c45f:	83 ec 04             	sub    $0x4,%esp
f011c462:	68 e4 b7 13 f0       	push   $0xf013b7e4
f011c467:	68 ce 02 00 00       	push   $0x2ce
f011c46c:	68 9a b2 13 f0       	push   $0xf013b29a
f011c471:	e8 8f 3d fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c476:	83 ec 0c             	sub    $0xc,%esp
f011c479:	68 48 b8 13 f0       	push   $0xf013b848
f011c47e:	e8 8b 48 fe ff       	call   f0100d0e <cprintf>
f011c483:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c486:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c48b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c48e:	5b                   	pop    %ebx
f011c48f:	5f                   	pop    %edi
f011c490:	5d                   	pop    %ebp
f011c491:	c3                   	ret    

f011c492 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c492:	55                   	push   %ebp
f011c493:	89 e5                	mov    %esp,%ebp
f011c495:	57                   	push   %edi
f011c496:	53                   	push   %ebx
f011c497:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c49d:	83 ec 0c             	sub    $0xc,%esp
f011c4a0:	68 dc b1 13 f0       	push   $0xf013b1dc
f011c4a5:	e8 64 48 fe ff       	call   f0100d0e <cprintf>
f011c4aa:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c4ad:	83 ec 0c             	sub    $0xc,%esp
f011c4b0:	68 0c b2 13 f0       	push   $0xf013b20c
f011c4b5:	e8 54 48 fe ff       	call   f0100d0e <cprintf>
f011c4ba:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c4bd:	83 ec 0c             	sub    $0xc,%esp
f011c4c0:	68 dc b1 13 f0       	push   $0xf013b1dc
f011c4c5:	e8 44 48 fe ff       	call   f0100d0e <cprintf>
f011c4ca:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c4cd:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c4d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c4d8:	b8 00 00 00 00       	mov    $0x0,%eax
f011c4dd:	89 d7                	mov    %edx,%edi
f011c4df:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4e1:	e8 b7 06 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c4e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4e9:	e8 da 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c4f1:	83 ec 0c             	sub    $0xc,%esp
f011c4f4:	68 00 fc 0f 00       	push   $0xffc00
f011c4f9:	e8 87 b3 fe ff       	call   f0107885 <kmalloc>
f011c4fe:	83 c4 10             	add    $0x10,%esp
f011c501:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c507:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c50d:	89 c1                	mov    %eax,%ecx
f011c50f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c516:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c519:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c51e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c521:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c524:	ba 00 00 00 00       	mov    $0x0,%edx
f011c529:	f7 75 ec             	divl   -0x14(%ebp)
f011c52c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c52f:	29 d0                	sub    %edx,%eax
f011c531:	89 c3                	mov    %eax,%ebx
f011c533:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c53a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c53f:	0f b6 d0             	movzbl %al,%edx
f011c542:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c545:	01 d0                	add    %edx,%eax
f011c547:	48                   	dec    %eax
f011c548:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c54b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c54e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c553:	f7 75 e4             	divl   -0x1c(%ebp)
f011c556:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c559:	29 d0                	sub    %edx,%eax
f011c55b:	01 c3                	add    %eax,%ebx
f011c55d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c564:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c569:	0f b6 c0             	movzbl %al,%eax
f011c56c:	c1 e0 04             	shl    $0x4,%eax
f011c56f:	89 c2                	mov    %eax,%edx
f011c571:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c574:	01 d0                	add    %edx,%eax
f011c576:	48                   	dec    %eax
f011c577:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c57a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c57d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c582:	f7 75 dc             	divl   -0x24(%ebp)
f011c585:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c588:	29 d0                	sub    %edx,%eax
f011c58a:	01 d8                	add    %ebx,%eax
f011c58c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c591:	39 c1                	cmp    %eax,%ecx
f011c593:	74 17                	je     f011c5ac <test_kmalloc_firstfit1+0x11a>
f011c595:	83 ec 04             	sub    $0x4,%esp
f011c598:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c59d:	68 e6 02 00 00       	push   $0x2e6
f011c5a2:	68 9a b2 13 f0       	push   $0xf013b29a
f011c5a7:	e8 59 3c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5ac:	e8 17 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c5b4:	74 17                	je     f011c5cd <test_kmalloc_firstfit1+0x13b>
f011c5b6:	83 ec 04             	sub    $0x4,%esp
f011c5b9:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c5be:	68 e7 02 00 00       	push   $0x2e7
f011c5c3:	68 9a b2 13 f0       	push   $0xf013b29a
f011c5c8:	e8 38 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c5cd:	e8 cb 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c5d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5d5:	29 c2                	sub    %eax,%edx
f011c5d7:	89 d0                	mov    %edx,%eax
f011c5d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c5de:	74 17                	je     f011c5f7 <test_kmalloc_firstfit1+0x165>
f011c5e0:	83 ec 04             	sub    $0x4,%esp
f011c5e3:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011c5e8:	68 e8 02 00 00       	push   $0x2e8
f011c5ed:	68 9a b2 13 f0       	push   $0xf013b29a
f011c5f2:	e8 0e 3c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5f7:	e8 a1 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c5fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5ff:	e8 c4 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c604:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c607:	83 ec 0c             	sub    $0xc,%esp
f011c60a:	68 00 fc 0f 00       	push   $0xffc00
f011c60f:	e8 71 b2 fe ff       	call   f0107885 <kmalloc>
f011c614:	83 c4 10             	add    $0x10,%esp
f011c617:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c61d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c623:	89 c1                	mov    %eax,%ecx
f011c625:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c62c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c62f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c634:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c637:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c63a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c63f:	f7 75 d4             	divl   -0x2c(%ebp)
f011c642:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c645:	29 d0                	sub    %edx,%eax
f011c647:	89 c3                	mov    %eax,%ebx
f011c649:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c650:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c655:	0f b6 d0             	movzbl %al,%edx
f011c658:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c65b:	01 d0                	add    %edx,%eax
f011c65d:	48                   	dec    %eax
f011c65e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c661:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c664:	ba 00 00 00 00       	mov    $0x0,%edx
f011c669:	f7 75 cc             	divl   -0x34(%ebp)
f011c66c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c66f:	29 d0                	sub    %edx,%eax
f011c671:	01 c3                	add    %eax,%ebx
f011c673:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c67a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c67f:	0f b6 c0             	movzbl %al,%eax
f011c682:	c1 e0 04             	shl    $0x4,%eax
f011c685:	89 c2                	mov    %eax,%edx
f011c687:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c68a:	01 d0                	add    %edx,%eax
f011c68c:	48                   	dec    %eax
f011c68d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c690:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c693:	ba 00 00 00 00       	mov    $0x0,%edx
f011c698:	f7 75 c4             	divl   -0x3c(%ebp)
f011c69b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c69e:	29 d0                	sub    %edx,%eax
f011c6a0:	01 d8                	add    %ebx,%eax
f011c6a2:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c6a7:	39 c1                	cmp    %eax,%ecx
f011c6a9:	74 17                	je     f011c6c2 <test_kmalloc_firstfit1+0x230>
f011c6ab:	83 ec 04             	sub    $0x4,%esp
f011c6ae:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c6b3:	68 ee 02 00 00       	push   $0x2ee
f011c6b8:	68 9a b2 13 f0       	push   $0xf013b29a
f011c6bd:	e8 43 3b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6c2:	e8 01 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c6ca:	74 17                	je     f011c6e3 <test_kmalloc_firstfit1+0x251>
f011c6cc:	83 ec 04             	sub    $0x4,%esp
f011c6cf:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c6d4:	68 ef 02 00 00       	push   $0x2ef
f011c6d9:	68 9a b2 13 f0       	push   $0xf013b29a
f011c6de:	e8 22 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c6e3:	e8 b5 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c6e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6eb:	29 c2                	sub    %eax,%edx
f011c6ed:	89 d0                	mov    %edx,%eax
f011c6ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c6f4:	74 17                	je     f011c70d <test_kmalloc_firstfit1+0x27b>
f011c6f6:	83 ec 04             	sub    $0x4,%esp
f011c6f9:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011c6fe:	68 f0 02 00 00       	push   $0x2f0
f011c703:	68 9a b2 13 f0       	push   $0xf013b29a
f011c708:	e8 f8 3a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c70d:	e8 8b 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c712:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c715:	e8 ae 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c71a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c71d:	83 ec 0c             	sub    $0xc,%esp
f011c720:	68 00 fc 0f 00       	push   $0xffc00
f011c725:	e8 5b b1 fe ff       	call   f0107885 <kmalloc>
f011c72a:	83 c4 10             	add    $0x10,%esp
f011c72d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c733:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c739:	89 c1                	mov    %eax,%ecx
f011c73b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c742:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c745:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c74a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c74d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c750:	ba 00 00 00 00       	mov    $0x0,%edx
f011c755:	f7 75 bc             	divl   -0x44(%ebp)
f011c758:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c75b:	29 d0                	sub    %edx,%eax
f011c75d:	89 c3                	mov    %eax,%ebx
f011c75f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c766:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c76b:	0f b6 d0             	movzbl %al,%edx
f011c76e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c771:	01 d0                	add    %edx,%eax
f011c773:	48                   	dec    %eax
f011c774:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c777:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c77a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c77f:	f7 75 b4             	divl   -0x4c(%ebp)
f011c782:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c785:	29 d0                	sub    %edx,%eax
f011c787:	01 c3                	add    %eax,%ebx
f011c789:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c790:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c795:	0f b6 c0             	movzbl %al,%eax
f011c798:	c1 e0 04             	shl    $0x4,%eax
f011c79b:	89 c2                	mov    %eax,%edx
f011c79d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c7a0:	01 d0                	add    %edx,%eax
f011c7a2:	48                   	dec    %eax
f011c7a3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c7a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c7a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ae:	f7 75 ac             	divl   -0x54(%ebp)
f011c7b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c7b4:	29 d0                	sub    %edx,%eax
f011c7b6:	01 d8                	add    %ebx,%eax
f011c7b8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c7bd:	39 c1                	cmp    %eax,%ecx
f011c7bf:	74 17                	je     f011c7d8 <test_kmalloc_firstfit1+0x346>
f011c7c1:	83 ec 04             	sub    $0x4,%esp
f011c7c4:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c7c9:	68 f6 02 00 00       	push   $0x2f6
f011c7ce:	68 9a b2 13 f0       	push   $0xf013b29a
f011c7d3:	e8 2d 3a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7d8:	e8 eb 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7e0:	74 17                	je     f011c7f9 <test_kmalloc_firstfit1+0x367>
f011c7e2:	83 ec 04             	sub    $0x4,%esp
f011c7e5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c7ea:	68 f7 02 00 00       	push   $0x2f7
f011c7ef:	68 9a b2 13 f0       	push   $0xf013b29a
f011c7f4:	e8 0c 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c7f9:	e8 9f 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c7fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c801:	29 c2                	sub    %eax,%edx
f011c803:	89 d0                	mov    %edx,%eax
f011c805:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c80a:	74 17                	je     f011c823 <test_kmalloc_firstfit1+0x391>
f011c80c:	83 ec 04             	sub    $0x4,%esp
f011c80f:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011c814:	68 f8 02 00 00       	push   $0x2f8
f011c819:	68 9a b2 13 f0       	push   $0xf013b29a
f011c81e:	e8 e2 39 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c823:	e8 75 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c828:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c82b:	e8 98 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c830:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c833:	83 ec 0c             	sub    $0xc,%esp
f011c836:	68 00 fc 0f 00       	push   $0xffc00
f011c83b:	e8 45 b0 fe ff       	call   f0107885 <kmalloc>
f011c840:	83 c4 10             	add    $0x10,%esp
f011c843:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c849:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c84f:	89 c1                	mov    %eax,%ecx
f011c851:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c858:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c85b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c860:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c863:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c866:	ba 00 00 00 00       	mov    $0x0,%edx
f011c86b:	f7 75 a4             	divl   -0x5c(%ebp)
f011c86e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c871:	29 d0                	sub    %edx,%eax
f011c873:	89 c3                	mov    %eax,%ebx
f011c875:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c87c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c881:	0f b6 d0             	movzbl %al,%edx
f011c884:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c887:	01 d0                	add    %edx,%eax
f011c889:	48                   	dec    %eax
f011c88a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c88d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c890:	ba 00 00 00 00       	mov    $0x0,%edx
f011c895:	f7 75 9c             	divl   -0x64(%ebp)
f011c898:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c89b:	29 d0                	sub    %edx,%eax
f011c89d:	01 c3                	add    %eax,%ebx
f011c89f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c8a6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c8ab:	0f b6 c0             	movzbl %al,%eax
f011c8ae:	c1 e0 04             	shl    $0x4,%eax
f011c8b1:	89 c2                	mov    %eax,%edx
f011c8b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c8b6:	01 d0                	add    %edx,%eax
f011c8b8:	48                   	dec    %eax
f011c8b9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c8bc:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c8bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8c4:	f7 75 94             	divl   -0x6c(%ebp)
f011c8c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c8ca:	29 d0                	sub    %edx,%eax
f011c8cc:	01 d8                	add    %ebx,%eax
f011c8ce:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c8d3:	39 c1                	cmp    %eax,%ecx
f011c8d5:	74 17                	je     f011c8ee <test_kmalloc_firstfit1+0x45c>
f011c8d7:	83 ec 04             	sub    $0x4,%esp
f011c8da:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011c8df:	68 fe 02 00 00       	push   $0x2fe
f011c8e4:	68 9a b2 13 f0       	push   $0xf013b29a
f011c8e9:	e8 17 39 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8ee:	e8 d5 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c8f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8f6:	74 17                	je     f011c90f <test_kmalloc_firstfit1+0x47d>
f011c8f8:	83 ec 04             	sub    $0x4,%esp
f011c8fb:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011c900:	68 ff 02 00 00       	push   $0x2ff
f011c905:	68 9a b2 13 f0       	push   $0xf013b29a
f011c90a:	e8 f6 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c90f:	e8 89 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c914:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c917:	29 c2                	sub    %eax,%edx
f011c919:	89 d0                	mov    %edx,%eax
f011c91b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c920:	74 17                	je     f011c939 <test_kmalloc_firstfit1+0x4a7>
f011c922:	83 ec 04             	sub    $0x4,%esp
f011c925:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011c92a:	68 00 03 00 00       	push   $0x300
f011c92f:	68 9a b2 13 f0       	push   $0xf013b29a
f011c934:	e8 cc 38 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c939:	e8 5f 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c93e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c941:	e8 82 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c946:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c949:	83 ec 0c             	sub    $0xc,%esp
f011c94c:	68 00 fc 1f 00       	push   $0x1ffc00
f011c951:	e8 2f af fe ff       	call   f0107885 <kmalloc>
f011c956:	83 c4 10             	add    $0x10,%esp
f011c959:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c95f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c965:	89 c1                	mov    %eax,%ecx
f011c967:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c96e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c971:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c976:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c979:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c97c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c981:	f7 75 8c             	divl   -0x74(%ebp)
f011c984:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c987:	29 d0                	sub    %edx,%eax
f011c989:	89 c3                	mov    %eax,%ebx
f011c98b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c992:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c997:	0f b6 d0             	movzbl %al,%edx
f011c99a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c99d:	01 d0                	add    %edx,%eax
f011c99f:	48                   	dec    %eax
f011c9a0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c9a3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c9a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9ab:	f7 75 84             	divl   -0x7c(%ebp)
f011c9ae:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c9b1:	29 d0                	sub    %edx,%eax
f011c9b3:	01 c3                	add    %eax,%ebx
f011c9b5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c9bc:	10 00 00 
f011c9bf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c9c4:	0f b6 c0             	movzbl %al,%eax
f011c9c7:	c1 e0 04             	shl    $0x4,%eax
f011c9ca:	89 c2                	mov    %eax,%edx
f011c9cc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c9d2:	01 d0                	add    %edx,%eax
f011c9d4:	48                   	dec    %eax
f011c9d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c9db:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c9e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9e6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c9ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c9f2:	29 d0                	sub    %edx,%eax
f011c9f4:	01 d8                	add    %ebx,%eax
f011c9f6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c9fb:	39 c1                	cmp    %eax,%ecx
f011c9fd:	74 17                	je     f011ca16 <test_kmalloc_firstfit1+0x584>
f011c9ff:	83 ec 04             	sub    $0x4,%esp
f011ca02:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011ca07:	68 06 03 00 00       	push   $0x306
f011ca0c:	68 9a b2 13 f0       	push   $0xf013b29a
f011ca11:	e8 ef 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca16:	e8 ad 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca1e:	74 17                	je     f011ca37 <test_kmalloc_firstfit1+0x5a5>
f011ca20:	83 ec 04             	sub    $0x4,%esp
f011ca23:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ca28:	68 07 03 00 00       	push   $0x307
f011ca2d:	68 9a b2 13 f0       	push   $0xf013b29a
f011ca32:	e8 ce 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ca37:	e8 61 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ca3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca3f:	29 c2                	sub    %eax,%edx
f011ca41:	89 d0                	mov    %edx,%eax
f011ca43:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ca48:	74 17                	je     f011ca61 <test_kmalloc_firstfit1+0x5cf>
f011ca4a:	83 ec 04             	sub    $0x4,%esp
f011ca4d:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ca52:	68 08 03 00 00       	push   $0x308
f011ca57:	68 9a b2 13 f0       	push   $0xf013b29a
f011ca5c:	e8 a4 37 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca61:	e8 37 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ca66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca69:	e8 5a 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011ca71:	83 ec 0c             	sub    $0xc,%esp
f011ca74:	68 00 fc 1f 00       	push   $0x1ffc00
f011ca79:	e8 07 ae fe ff       	call   f0107885 <kmalloc>
f011ca7e:	83 c4 10             	add    $0x10,%esp
f011ca81:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011ca87:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ca8d:	89 c1                	mov    %eax,%ecx
f011ca8f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ca96:	10 00 00 
f011ca99:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ca9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011caa4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011caaa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cab0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cab5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cabb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cac1:	29 d0                	sub    %edx,%eax
f011cac3:	89 c3                	mov    %eax,%ebx
f011cac5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cacc:	10 00 00 
f011cacf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cad4:	0f b6 d0             	movzbl %al,%edx
f011cad7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cadd:	01 d0                	add    %edx,%eax
f011cadf:	48                   	dec    %eax
f011cae0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cae6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011caec:	ba 00 00 00 00       	mov    $0x0,%edx
f011caf1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011caf7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cafd:	29 d0                	sub    %edx,%eax
f011caff:	01 c3                	add    %eax,%ebx
f011cb01:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cb08:	10 00 00 
f011cb0b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cb10:	0f b6 c0             	movzbl %al,%eax
f011cb13:	c1 e0 04             	shl    $0x4,%eax
f011cb16:	89 c2                	mov    %eax,%edx
f011cb18:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cb1e:	01 d0                	add    %edx,%eax
f011cb20:	48                   	dec    %eax
f011cb21:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cb27:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cb2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb32:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cb38:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cb3e:	29 d0                	sub    %edx,%eax
f011cb40:	01 d8                	add    %ebx,%eax
f011cb42:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cb47:	39 c1                	cmp    %eax,%ecx
f011cb49:	74 17                	je     f011cb62 <test_kmalloc_firstfit1+0x6d0>
f011cb4b:	83 ec 04             	sub    $0x4,%esp
f011cb4e:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011cb53:	68 0e 03 00 00       	push   $0x30e
f011cb58:	68 9a b2 13 f0       	push   $0xf013b29a
f011cb5d:	e8 a3 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb62:	e8 61 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb6a:	74 17                	je     f011cb83 <test_kmalloc_firstfit1+0x6f1>
f011cb6c:	83 ec 04             	sub    $0x4,%esp
f011cb6f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011cb74:	68 0f 03 00 00       	push   $0x30f
f011cb79:	68 9a b2 13 f0       	push   $0xf013b29a
f011cb7e:	e8 82 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb83:	e8 15 00 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011cb88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb8b:	29 c2                	sub    %eax,%edx
f011cb8d:	89 d0                	mov    %edx,%eax
f011cb8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb94:	74 17                	je     f011cbad <test_kmalloc_firstfit1+0x71b>
f011cb96:	83 ec 04             	sub    $0x4,%esp
f011cb99:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011cb9e:	68 10 03 00 00       	push   $0x310
f011cba3:	68 9a b2 13 f0       	push   $0xf013b29a
f011cba8:	e8 58 36 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbad:	e8 eb ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cbb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbb5:	e8 0e 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cbba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cbbd:	83 ec 0c             	sub    $0xc,%esp
f011cbc0:	68 00 fc 2f 00       	push   $0x2ffc00
f011cbc5:	e8 bb ac fe ff       	call   f0107885 <kmalloc>
f011cbca:	83 c4 10             	add    $0x10,%esp
f011cbcd:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cbd3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cbd9:	89 c1                	mov    %eax,%ecx
f011cbdb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011cbe2:	10 00 00 
f011cbe5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011cbeb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbf0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011cbf6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cbfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc01:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011cc07:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cc0d:	29 d0                	sub    %edx,%eax
f011cc0f:	89 c3                	mov    %eax,%ebx
f011cc11:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011cc18:	10 00 00 
f011cc1b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cc20:	0f b6 d0             	movzbl %al,%edx
f011cc23:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cc29:	01 d0                	add    %edx,%eax
f011cc2b:	48                   	dec    %eax
f011cc2c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cc32:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cc38:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc3d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cc43:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cc49:	29 d0                	sub    %edx,%eax
f011cc4b:	01 c3                	add    %eax,%ebx
f011cc4d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011cc54:	10 00 00 
f011cc57:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cc5c:	0f b6 c0             	movzbl %al,%eax
f011cc5f:	c1 e0 04             	shl    $0x4,%eax
f011cc62:	89 c2                	mov    %eax,%edx
f011cc64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011cc6a:	01 d0                	add    %edx,%eax
f011cc6c:	48                   	dec    %eax
f011cc6d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011cc73:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cc79:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc7e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011cc84:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cc8a:	29 d0                	sub    %edx,%eax
f011cc8c:	01 d8                	add    %ebx,%eax
f011cc8e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cc93:	39 c1                	cmp    %eax,%ecx
f011cc95:	74 17                	je     f011ccae <test_kmalloc_firstfit1+0x81c>
f011cc97:	83 ec 04             	sub    $0x4,%esp
f011cc9a:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011cc9f:	68 16 03 00 00       	push   $0x316
f011cca4:	68 9a b2 13 f0       	push   $0xf013b29a
f011cca9:	e8 57 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccae:	e8 15 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccb3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccb6:	74 17                	je     f011cccf <test_kmalloc_firstfit1+0x83d>
f011ccb8:	83 ec 04             	sub    $0x4,%esp
f011ccbb:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ccc0:	68 17 03 00 00       	push   $0x317
f011ccc5:	68 9a b2 13 f0       	push   $0xf013b29a
f011ccca:	e8 36 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cccf:	e8 c9 fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ccd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccd7:	29 c2                	sub    %eax,%edx
f011ccd9:	89 d0                	mov    %edx,%eax
f011ccdb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cce0:	74 17                	je     f011ccf9 <test_kmalloc_firstfit1+0x867>
f011cce2:	83 ec 04             	sub    $0x4,%esp
f011cce5:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ccea:	68 18 03 00 00       	push   $0x318
f011ccef:	68 9a b2 13 f0       	push   $0xf013b29a
f011ccf4:	e8 0c 35 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccf9:	e8 9f fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ccfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd01:	e8 c2 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd06:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cd09:	83 ec 0c             	sub    $0xc,%esp
f011cd0c:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd11:	e8 6f ab fe ff       	call   f0107885 <kmalloc>
f011cd16:	83 c4 10             	add    $0x10,%esp
f011cd19:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cd1f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011cd25:	89 c1                	mov    %eax,%ecx
f011cd27:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011cd2e:	10 00 00 
f011cd31:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011cd37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd3c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011cd42:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cd48:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011cd53:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cd59:	29 d0                	sub    %edx,%eax
f011cd5b:	89 c3                	mov    %eax,%ebx
f011cd5d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011cd64:	10 00 00 
f011cd67:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cd6c:	0f b6 d0             	movzbl %al,%edx
f011cd6f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011cd75:	01 d0                	add    %edx,%eax
f011cd77:	48                   	dec    %eax
f011cd78:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011cd7e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cd84:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd89:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011cd8f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cd95:	29 d0                	sub    %edx,%eax
f011cd97:	01 c3                	add    %eax,%ebx
f011cd99:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011cda0:	10 00 00 
f011cda3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cda8:	0f b6 c0             	movzbl %al,%eax
f011cdab:	c1 e0 04             	shl    $0x4,%eax
f011cdae:	89 c2                	mov    %eax,%edx
f011cdb0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011cdb6:	01 d0                	add    %edx,%eax
f011cdb8:	48                   	dec    %eax
f011cdb9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011cdbf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cdc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdca:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011cdd0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cdd6:	29 d0                	sub    %edx,%eax
f011cdd8:	01 d8                	add    %ebx,%eax
f011cdda:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011cddf:	39 c1                	cmp    %eax,%ecx
f011cde1:	74 17                	je     f011cdfa <test_kmalloc_firstfit1+0x968>
f011cde3:	83 ec 04             	sub    $0x4,%esp
f011cde6:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011cdeb:	68 1e 03 00 00       	push   $0x31e
f011cdf0:	68 9a b2 13 f0       	push   $0xf013b29a
f011cdf5:	e8 0b 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdfa:	e8 c9 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cdff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce02:	74 17                	je     f011ce1b <test_kmalloc_firstfit1+0x989>
f011ce04:	83 ec 04             	sub    $0x4,%esp
f011ce07:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ce0c:	68 1f 03 00 00       	push   $0x31f
f011ce11:	68 9a b2 13 f0       	push   $0xf013b29a
f011ce16:	e8 ea 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ce1b:	e8 7d fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce23:	29 c2                	sub    %eax,%edx
f011ce25:	89 d0                	mov    %edx,%eax
f011ce27:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce2c:	74 17                	je     f011ce45 <test_kmalloc_firstfit1+0x9b3>
f011ce2e:	83 ec 04             	sub    $0x4,%esp
f011ce31:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011ce36:	68 20 03 00 00       	push   $0x320
f011ce3b:	68 9a b2 13 f0       	push   $0xf013b29a
f011ce40:	e8 c0 33 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ce45:	e8 53 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce4d:	e8 76 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ce55:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ce5b:	83 ec 0c             	sub    $0xc,%esp
f011ce5e:	50                   	push   %eax
f011ce5f:	e8 ec aa fe ff       	call   f0107950 <kfree>
f011ce64:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce67:	e8 5c 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce6c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce6f:	74 17                	je     f011ce88 <test_kmalloc_firstfit1+0x9f6>
f011ce71:	83 ec 04             	sub    $0x4,%esp
f011ce74:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ce79:	68 29 03 00 00       	push   $0x329
f011ce7e:	68 9a b2 13 f0       	push   $0xf013b29a
f011ce83:	e8 7d 33 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ce88:	e8 10 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce8d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ce90:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce95:	74 17                	je     f011ceae <test_kmalloc_firstfit1+0xa1c>
f011ce97:	83 ec 04             	sub    $0x4,%esp
f011ce9a:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011ce9f:	68 2a 03 00 00       	push   $0x32a
f011cea4:	68 9a b2 13 f0       	push   $0xf013b29a
f011cea9:	e8 57 33 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ceae:	e8 ea fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ceb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceb6:	e8 0d 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cebb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cebe:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cec4:	83 ec 0c             	sub    $0xc,%esp
f011cec7:	50                   	push   %eax
f011cec8:	e8 83 aa fe ff       	call   f0107950 <kfree>
f011cecd:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ced0:	e8 f3 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ced5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ced8:	74 17                	je     f011cef1 <test_kmalloc_firstfit1+0xa5f>
f011ceda:	83 ec 04             	sub    $0x4,%esp
f011cedd:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011cee2:	68 30 03 00 00       	push   $0x330
f011cee7:	68 9a b2 13 f0       	push   $0xf013b29a
f011ceec:	e8 14 33 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cef1:	e8 a7 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cef6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cef9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cefe:	74 17                	je     f011cf17 <test_kmalloc_firstfit1+0xa85>
f011cf00:	83 ec 04             	sub    $0x4,%esp
f011cf03:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011cf08:	68 31 03 00 00       	push   $0x331
f011cf0d:	68 9a b2 13 f0       	push   $0xf013b29a
f011cf12:	e8 ee 32 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf17:	e8 81 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf1f:	e8 a4 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cf27:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cf2d:	83 ec 0c             	sub    $0xc,%esp
f011cf30:	50                   	push   %eax
f011cf31:	e8 1a aa fe ff       	call   f0107950 <kfree>
f011cf36:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf39:	e8 8a 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf3e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf41:	74 17                	je     f011cf5a <test_kmalloc_firstfit1+0xac8>
f011cf43:	83 ec 04             	sub    $0x4,%esp
f011cf46:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011cf4b:	68 37 03 00 00       	push   $0x337
f011cf50:	68 9a b2 13 f0       	push   $0xf013b29a
f011cf55:	e8 ab 32 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cf5a:	e8 3e fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf5f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf62:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cf67:	74 17                	je     f011cf80 <test_kmalloc_firstfit1+0xaee>
f011cf69:	83 ec 04             	sub    $0x4,%esp
f011cf6c:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011cf71:	68 38 03 00 00       	push   $0x338
f011cf76:	68 9a b2 13 f0       	push   $0xf013b29a
f011cf7b:	e8 85 32 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cf80:	e8 18 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf88:	e8 3b 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cf90:	83 ec 0c             	sub    $0xc,%esp
f011cf93:	68 00 fc 07 00       	push   $0x7fc00
f011cf98:	e8 e8 a8 fe ff       	call   f0107885 <kmalloc>
f011cf9d:	83 c4 10             	add    $0x10,%esp
f011cfa0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cfa6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011cfac:	89 c1                	mov    %eax,%ecx
f011cfae:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011cfb5:	10 00 00 
f011cfb8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011cfbe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfc3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011cfc9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cfcf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfd4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cfda:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cfe0:	29 d0                	sub    %edx,%eax
f011cfe2:	89 c3                	mov    %eax,%ebx
f011cfe4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cfeb:	10 00 00 
f011cfee:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cff3:	0f b6 d0             	movzbl %al,%edx
f011cff6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cffc:	01 d0                	add    %edx,%eax
f011cffe:	48                   	dec    %eax
f011cfff:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d005:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d00b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d010:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d016:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d01c:	29 d0                	sub    %edx,%eax
f011d01e:	01 c3                	add    %eax,%ebx
f011d020:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d027:	10 00 00 
f011d02a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d02f:	0f b6 c0             	movzbl %al,%eax
f011d032:	c1 e0 04             	shl    $0x4,%eax
f011d035:	89 c2                	mov    %eax,%edx
f011d037:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d03d:	01 d0                	add    %edx,%eax
f011d03f:	48                   	dec    %eax
f011d040:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d046:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d04c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d051:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d057:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d05d:	29 d0                	sub    %edx,%eax
f011d05f:	01 d8                	add    %ebx,%eax
f011d061:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d066:	39 c1                	cmp    %eax,%ecx
f011d068:	74 17                	je     f011d081 <test_kmalloc_firstfit1+0xbef>
f011d06a:	83 ec 04             	sub    $0x4,%esp
f011d06d:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d072:	68 41 03 00 00       	push   $0x341
f011d077:	68 9a b2 13 f0       	push   $0xf013b29a
f011d07c:	e8 84 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d081:	e8 42 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d086:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d089:	74 17                	je     f011d0a2 <test_kmalloc_firstfit1+0xc10>
f011d08b:	83 ec 04             	sub    $0x4,%esp
f011d08e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d093:	68 42 03 00 00       	push   $0x342
f011d098:	68 9a b2 13 f0       	push   $0xf013b29a
f011d09d:	e8 63 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d0a2:	e8 f6 fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d0a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0aa:	29 c2                	sub    %eax,%edx
f011d0ac:	89 d0                	mov    %edx,%eax
f011d0ae:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d0b3:	74 17                	je     f011d0cc <test_kmalloc_firstfit1+0xc3a>
f011d0b5:	83 ec 04             	sub    $0x4,%esp
f011d0b8:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d0bd:	68 43 03 00 00       	push   $0x343
f011d0c2:	68 9a b2 13 f0       	push   $0xf013b29a
f011d0c7:	e8 39 31 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d0cc:	e8 cc fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d0d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0d4:	e8 ef 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d0dc:	83 ec 0c             	sub    $0xc,%esp
f011d0df:	68 00 fc 0f 00       	push   $0xffc00
f011d0e4:	e8 9c a7 fe ff       	call   f0107885 <kmalloc>
f011d0e9:	83 c4 10             	add    $0x10,%esp
f011d0ec:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0f2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d0f8:	89 c1                	mov    %eax,%ecx
f011d0fa:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d101:	10 00 00 
f011d104:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d10a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d10f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d115:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d11b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d120:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d126:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d12c:	29 d0                	sub    %edx,%eax
f011d12e:	89 c3                	mov    %eax,%ebx
f011d130:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d137:	10 00 00 
f011d13a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d13f:	0f b6 d0             	movzbl %al,%edx
f011d142:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d148:	01 d0                	add    %edx,%eax
f011d14a:	48                   	dec    %eax
f011d14b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d151:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d157:	ba 00 00 00 00       	mov    $0x0,%edx
f011d15c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d162:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d168:	29 d0                	sub    %edx,%eax
f011d16a:	01 c3                	add    %eax,%ebx
f011d16c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d173:	10 00 00 
f011d176:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d17b:	0f b6 c0             	movzbl %al,%eax
f011d17e:	c1 e0 04             	shl    $0x4,%eax
f011d181:	89 c2                	mov    %eax,%edx
f011d183:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d189:	01 d0                	add    %edx,%eax
f011d18b:	48                   	dec    %eax
f011d18c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d192:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d198:	ba 00 00 00 00       	mov    $0x0,%edx
f011d19d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d1a3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d1a9:	29 d0                	sub    %edx,%eax
f011d1ab:	01 d8                	add    %ebx,%eax
f011d1ad:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d1b2:	39 c1                	cmp    %eax,%ecx
f011d1b4:	74 17                	je     f011d1cd <test_kmalloc_firstfit1+0xd3b>
f011d1b6:	83 ec 04             	sub    $0x4,%esp
f011d1b9:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d1be:	68 49 03 00 00       	push   $0x349
f011d1c3:	68 9a b2 13 f0       	push   $0xf013b29a
f011d1c8:	e8 38 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1cd:	e8 f6 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d1d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1d5:	74 17                	je     f011d1ee <test_kmalloc_firstfit1+0xd5c>
f011d1d7:	83 ec 04             	sub    $0x4,%esp
f011d1da:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d1df:	68 4a 03 00 00       	push   $0x34a
f011d1e4:	68 9a b2 13 f0       	push   $0xf013b29a
f011d1e9:	e8 17 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1ee:	e8 aa f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d1f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1f6:	29 c2                	sub    %eax,%edx
f011d1f8:	89 d0                	mov    %edx,%eax
f011d1fa:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1ff:	74 17                	je     f011d218 <test_kmalloc_firstfit1+0xd86>
f011d201:	83 ec 04             	sub    $0x4,%esp
f011d204:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d209:	68 4b 03 00 00       	push   $0x34b
f011d20e:	68 9a b2 13 f0       	push   $0xf013b29a
f011d213:	e8 ed 2f fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d218:	e8 80 f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d21d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d220:	e8 a3 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d225:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d228:	83 ec 0c             	sub    $0xc,%esp
f011d22b:	68 00 fc 03 00       	push   $0x3fc00
f011d230:	e8 50 a6 fe ff       	call   f0107885 <kmalloc>
f011d235:	83 c4 10             	add    $0x10,%esp
f011d238:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d23e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d244:	89 c1                	mov    %eax,%ecx
f011d246:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d24d:	10 00 00 
f011d250:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d256:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d25b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d261:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d267:	ba 00 00 00 00       	mov    $0x0,%edx
f011d26c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d272:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d278:	29 d0                	sub    %edx,%eax
f011d27a:	89 c3                	mov    %eax,%ebx
f011d27c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d283:	10 00 00 
f011d286:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d28b:	0f b6 d0             	movzbl %al,%edx
f011d28e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d294:	01 d0                	add    %edx,%eax
f011d296:	48                   	dec    %eax
f011d297:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d29d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d2a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2a8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d2ae:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d2b4:	29 d0                	sub    %edx,%eax
f011d2b6:	01 c3                	add    %eax,%ebx
f011d2b8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d2bf:	10 00 00 
f011d2c2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d2c7:	0f b6 c0             	movzbl %al,%eax
f011d2ca:	c1 e0 04             	shl    $0x4,%eax
f011d2cd:	89 c2                	mov    %eax,%edx
f011d2cf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d2d5:	01 d0                	add    %edx,%eax
f011d2d7:	48                   	dec    %eax
f011d2d8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d2de:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d2e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2e9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d2ef:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d2f5:	29 d0                	sub    %edx,%eax
f011d2f7:	01 d8                	add    %ebx,%eax
f011d2f9:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d2fe:	39 c1                	cmp    %eax,%ecx
f011d300:	74 17                	je     f011d319 <test_kmalloc_firstfit1+0xe87>
f011d302:	83 ec 04             	sub    $0x4,%esp
f011d305:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d30a:	68 52 03 00 00       	push   $0x352
f011d30f:	68 9a b2 13 f0       	push   $0xf013b29a
f011d314:	e8 ec 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d319:	e8 aa 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d31e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d321:	74 17                	je     f011d33a <test_kmalloc_firstfit1+0xea8>
f011d323:	83 ec 04             	sub    $0x4,%esp
f011d326:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d32b:	68 53 03 00 00       	push   $0x353
f011d330:	68 9a b2 13 f0       	push   $0xf013b29a
f011d335:	e8 cb 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d33a:	e8 5e f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d33f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d342:	29 c2                	sub    %eax,%edx
f011d344:	89 d0                	mov    %edx,%eax
f011d346:	83 f8 40             	cmp    $0x40,%eax
f011d349:	74 17                	je     f011d362 <test_kmalloc_firstfit1+0xed0>
f011d34b:	83 ec 04             	sub    $0x4,%esp
f011d34e:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d353:	68 54 03 00 00       	push   $0x354
f011d358:	68 9a b2 13 f0       	push   $0xf013b29a
f011d35d:	e8 a3 2e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d362:	e8 36 f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d367:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d36a:	e8 59 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d36f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d372:	83 ec 0c             	sub    $0xc,%esp
f011d375:	68 00 00 20 00       	push   $0x200000
f011d37a:	e8 06 a5 fe ff       	call   f0107885 <kmalloc>
f011d37f:	83 c4 10             	add    $0x10,%esp
f011d382:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d388:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d38e:	89 c1                	mov    %eax,%ecx
f011d390:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d397:	10 00 00 
f011d39a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d3a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3a5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d3ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d3b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3b6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d3bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d3c2:	29 d0                	sub    %edx,%eax
f011d3c4:	89 c3                	mov    %eax,%ebx
f011d3c6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d3cd:	10 00 00 
f011d3d0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d3d5:	0f b6 d0             	movzbl %al,%edx
f011d3d8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d3de:	01 d0                	add    %edx,%eax
f011d3e0:	48                   	dec    %eax
f011d3e1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d3e7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3f2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d3f8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d3fe:	29 d0                	sub    %edx,%eax
f011d400:	01 c3                	add    %eax,%ebx
f011d402:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d409:	10 00 00 
f011d40c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d411:	0f b6 c0             	movzbl %al,%eax
f011d414:	c1 e0 04             	shl    $0x4,%eax
f011d417:	89 c2                	mov    %eax,%edx
f011d419:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d41f:	01 d0                	add    %edx,%eax
f011d421:	48                   	dec    %eax
f011d422:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d428:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d42e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d433:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d439:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d43f:	29 d0                	sub    %edx,%eax
f011d441:	01 d8                	add    %ebx,%eax
f011d443:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d448:	39 c1                	cmp    %eax,%ecx
f011d44a:	74 17                	je     f011d463 <test_kmalloc_firstfit1+0xfd1>
f011d44c:	83 ec 04             	sub    $0x4,%esp
f011d44f:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d454:	68 5a 03 00 00       	push   $0x35a
f011d459:	68 9a b2 13 f0       	push   $0xf013b29a
f011d45e:	e8 a2 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d463:	e8 35 f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d468:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d46b:	29 c2                	sub    %eax,%edx
f011d46d:	89 d0                	mov    %edx,%eax
f011d46f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d474:	74 17                	je     f011d48d <test_kmalloc_firstfit1+0xffb>
f011d476:	83 ec 04             	sub    $0x4,%esp
f011d479:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d47e:	68 5b 03 00 00       	push   $0x35b
f011d483:	68 9a b2 13 f0       	push   $0xf013b29a
f011d488:	e8 78 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d48d:	e8 36 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d492:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d495:	74 17                	je     f011d4ae <test_kmalloc_firstfit1+0x101c>
f011d497:	83 ec 04             	sub    $0x4,%esp
f011d49a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d49f:	68 5c 03 00 00       	push   $0x35c
f011d4a4:	68 9a b2 13 f0       	push   $0xf013b29a
f011d4a9:	e8 57 2d fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d4ae:	e8 ea f6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d4b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4b6:	e8 0d 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d4bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d4be:	83 ec 0c             	sub    $0xc,%esp
f011d4c1:	68 00 fc 3f 00       	push   $0x3ffc00
f011d4c6:	e8 ba a3 fe ff       	call   f0107885 <kmalloc>
f011d4cb:	83 c4 10             	add    $0x10,%esp
f011d4ce:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d4d4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d4da:	89 c1                	mov    %eax,%ecx
f011d4dc:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d4e3:	10 00 00 
f011d4e6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d4ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4f1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d4f7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d4fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d502:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d508:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d50e:	29 d0                	sub    %edx,%eax
f011d510:	89 c3                	mov    %eax,%ebx
f011d512:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d519:	10 00 00 
f011d51c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d521:	0f b6 d0             	movzbl %al,%edx
f011d524:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d52a:	01 d0                	add    %edx,%eax
f011d52c:	48                   	dec    %eax
f011d52d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d533:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d539:	ba 00 00 00 00       	mov    $0x0,%edx
f011d53e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d544:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d54a:	29 d0                	sub    %edx,%eax
f011d54c:	01 c3                	add    %eax,%ebx
f011d54e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d555:	10 00 00 
f011d558:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d55d:	0f b6 c0             	movzbl %al,%eax
f011d560:	c1 e0 04             	shl    $0x4,%eax
f011d563:	89 c2                	mov    %eax,%edx
f011d565:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d56b:	01 d0                	add    %edx,%eax
f011d56d:	48                   	dec    %eax
f011d56e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d574:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d57a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d57f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d585:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d58b:	29 d0                	sub    %edx,%eax
f011d58d:	01 d8                	add    %ebx,%eax
f011d58f:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d594:	39 c1                	cmp    %eax,%ecx
f011d596:	74 17                	je     f011d5af <test_kmalloc_firstfit1+0x111d>
f011d598:	83 ec 04             	sub    $0x4,%esp
f011d59b:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d5a0:	68 63 03 00 00       	push   $0x363
f011d5a5:	68 9a b2 13 f0       	push   $0xf013b29a
f011d5aa:	e8 56 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5af:	e8 14 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d5b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5b7:	74 17                	je     f011d5d0 <test_kmalloc_firstfit1+0x113e>
f011d5b9:	83 ec 04             	sub    $0x4,%esp
f011d5bc:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d5c1:	68 64 03 00 00       	push   $0x364
f011d5c6:	68 9a b2 13 f0       	push   $0xf013b29a
f011d5cb:	e8 35 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d5d0:	e8 c8 f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d5d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5d8:	29 c2                	sub    %eax,%edx
f011d5da:	89 d0                	mov    %edx,%eax
f011d5dc:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d5e1:	74 17                	je     f011d5fa <test_kmalloc_firstfit1+0x1168>
f011d5e3:	83 ec 04             	sub    $0x4,%esp
f011d5e6:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d5eb:	68 65 03 00 00       	push   $0x365
f011d5f0:	68 9a b2 13 f0       	push   $0xf013b29a
f011d5f5:	e8 0b 2c fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d5fa:	e8 9e f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d5ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d602:	e8 c1 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d607:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d60a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d610:	83 ec 0c             	sub    $0xc,%esp
f011d613:	50                   	push   %eax
f011d614:	e8 37 a3 fe ff       	call   f0107950 <kfree>
f011d619:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d61c:	e8 a7 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d621:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d624:	74 17                	je     f011d63d <test_kmalloc_firstfit1+0x11ab>
f011d626:	83 ec 04             	sub    $0x4,%esp
f011d629:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d62e:	68 6e 03 00 00       	push   $0x36e
f011d633:	68 9a b2 13 f0       	push   $0xf013b29a
f011d638:	e8 c8 2b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d63d:	e8 5b f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d642:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d645:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d64a:	74 17                	je     f011d663 <test_kmalloc_firstfit1+0x11d1>
f011d64c:	83 ec 04             	sub    $0x4,%esp
f011d64f:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011d654:	68 6f 03 00 00       	push   $0x36f
f011d659:	68 9a b2 13 f0       	push   $0xf013b29a
f011d65e:	e8 a2 2b fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d663:	e8 35 f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d668:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d66b:	e8 58 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d670:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d673:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d679:	83 ec 0c             	sub    $0xc,%esp
f011d67c:	50                   	push   %eax
f011d67d:	e8 ce a2 fe ff       	call   f0107950 <kfree>
f011d682:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d685:	e8 3e 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d68a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d68d:	74 17                	je     f011d6a6 <test_kmalloc_firstfit1+0x1214>
f011d68f:	83 ec 04             	sub    $0x4,%esp
f011d692:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d697:	68 75 03 00 00       	push   $0x375
f011d69c:	68 9a b2 13 f0       	push   $0xf013b29a
f011d6a1:	e8 5f 2b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d6a6:	e8 f2 f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d6ab:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d6ae:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d6b3:	74 17                	je     f011d6cc <test_kmalloc_firstfit1+0x123a>
f011d6b5:	83 ec 04             	sub    $0x4,%esp
f011d6b8:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011d6bd:	68 76 03 00 00       	push   $0x376
f011d6c2:	68 9a b2 13 f0       	push   $0xf013b29a
f011d6c7:	e8 39 2b fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d6cc:	e8 cc f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d6d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6d4:	e8 ef 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d6dc:	83 ec 0c             	sub    $0xc,%esp
f011d6df:	68 00 00 10 00       	push   $0x100000
f011d6e4:	e8 9c a1 fe ff       	call   f0107885 <kmalloc>
f011d6e9:	83 c4 10             	add    $0x10,%esp
f011d6ec:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d6f2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d6f8:	89 c1                	mov    %eax,%ecx
f011d6fa:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d701:	10 00 00 
f011d704:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d70a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d70f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d715:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d71b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d720:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d726:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d72c:	29 d0                	sub    %edx,%eax
f011d72e:	89 c3                	mov    %eax,%ebx
f011d730:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d737:	10 00 00 
f011d73a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d73f:	0f b6 d0             	movzbl %al,%edx
f011d742:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d748:	01 d0                	add    %edx,%eax
f011d74a:	48                   	dec    %eax
f011d74b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d751:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d757:	ba 00 00 00 00       	mov    $0x0,%edx
f011d75c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d762:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d768:	29 d0                	sub    %edx,%eax
f011d76a:	01 c3                	add    %eax,%ebx
f011d76c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d773:	10 00 00 
f011d776:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d77b:	0f b6 c0             	movzbl %al,%eax
f011d77e:	c1 e0 04             	shl    $0x4,%eax
f011d781:	89 c2                	mov    %eax,%edx
f011d783:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d789:	01 d0                	add    %edx,%eax
f011d78b:	48                   	dec    %eax
f011d78c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d792:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d798:	ba 00 00 00 00       	mov    $0x0,%edx
f011d79d:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d7a3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d7a9:	29 d0                	sub    %edx,%eax
f011d7ab:	01 d8                	add    %ebx,%eax
f011d7ad:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d7b2:	39 c1                	cmp    %eax,%ecx
f011d7b4:	74 17                	je     f011d7cd <test_kmalloc_firstfit1+0x133b>
f011d7b6:	83 ec 04             	sub    $0x4,%esp
f011d7b9:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d7be:	68 80 03 00 00       	push   $0x380
f011d7c3:	68 9a b2 13 f0       	push   $0xf013b29a
f011d7c8:	e8 38 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7cd:	e8 f6 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7d5:	74 17                	je     f011d7ee <test_kmalloc_firstfit1+0x135c>
f011d7d7:	83 ec 04             	sub    $0x4,%esp
f011d7da:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011d7df:	68 81 03 00 00       	push   $0x381
f011d7e4:	68 9a b2 13 f0       	push   $0xf013b29a
f011d7e9:	e8 17 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d7ee:	e8 aa f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d7f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d7f6:	29 c2                	sub    %eax,%edx
f011d7f8:	89 d0                	mov    %edx,%eax
f011d7fa:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d7ff:	74 17                	je     f011d818 <test_kmalloc_firstfit1+0x1386>
f011d801:	83 ec 04             	sub    $0x4,%esp
f011d804:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011d809:	68 82 03 00 00       	push   $0x382
f011d80e:	68 9a b2 13 f0       	push   $0xf013b29a
f011d813:	e8 ed 29 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d818:	83 ec 0c             	sub    $0xc,%esp
f011d81b:	68 90 b8 13 f0       	push   $0xf013b890
f011d820:	e8 e9 34 fe ff       	call   f0100d0e <cprintf>
f011d825:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d828:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d82d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d830:	5b                   	pop    %ebx
f011d831:	5f                   	pop    %edi
f011d832:	5d                   	pop    %ebp
f011d833:	c3                   	ret    

f011d834 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d834:	55                   	push   %ebp
f011d835:	89 e5                	mov    %esp,%ebp
f011d837:	57                   	push   %edi
f011d838:	53                   	push   %ebx
f011d839:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d83f:	83 ec 0c             	sub    $0xc,%esp
f011d842:	68 dc b1 13 f0       	push   $0xf013b1dc
f011d847:	e8 c2 34 fe ff       	call   f0100d0e <cprintf>
f011d84c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d84f:	83 ec 0c             	sub    $0xc,%esp
f011d852:	68 0c b2 13 f0       	push   $0xf013b20c
f011d857:	e8 b2 34 fe ff       	call   f0100d0e <cprintf>
f011d85c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d85f:	83 ec 0c             	sub    $0xc,%esp
f011d862:	68 dc b1 13 f0       	push   $0xf013b1dc
f011d867:	e8 a2 34 fe ff       	call   f0100d0e <cprintf>
f011d86c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d86f:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d875:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d87a:	b8 00 00 00 00       	mov    $0x0,%eax
f011d87f:	89 d7                	mov    %edx,%edi
f011d881:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d883:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d88a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d88d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d892:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d898:	ba 00 00 00 00       	mov    $0x0,%edx
f011d89d:	f7 75 f4             	divl   -0xc(%ebp)
f011d8a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d8a3:	29 d0                	sub    %edx,%eax
f011d8a5:	89 c1                	mov    %eax,%ecx
f011d8a7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d8ae:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d8b3:	0f b6 d0             	movzbl %al,%edx
f011d8b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d8b9:	01 d0                	add    %edx,%eax
f011d8bb:	48                   	dec    %eax
f011d8bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d8bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d8c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8c7:	f7 75 ec             	divl   -0x14(%ebp)
f011d8ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d8cd:	29 d0                	sub    %edx,%eax
f011d8cf:	01 c1                	add    %eax,%ecx
f011d8d1:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d8d8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d8dd:	0f b6 c0             	movzbl %al,%eax
f011d8e0:	c1 e0 04             	shl    $0x4,%eax
f011d8e3:	89 c2                	mov    %eax,%edx
f011d8e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d8e8:	01 d0                	add    %edx,%eax
f011d8ea:	48                   	dec    %eax
f011d8eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d8ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d8f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f6:	f7 75 e4             	divl   -0x1c(%ebp)
f011d8f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d8fc:	29 d0                	sub    %edx,%eax
f011d8fe:	01 c8                	add    %ecx,%eax
f011d900:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d905:	29 c2                	sub    %eax,%edx
f011d907:	89 d0                	mov    %edx,%eax
f011d909:	83 ec 0c             	sub    $0xc,%esp
f011d90c:	50                   	push   %eax
f011d90d:	e8 73 9f fe ff       	call   f0107885 <kmalloc>
f011d912:	83 c4 10             	add    $0x10,%esp
f011d915:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d91b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d921:	85 c0                	test   %eax,%eax
f011d923:	74 17                	je     f011d93c <test_kmalloc_firstfit2+0x108>
f011d925:	83 ec 04             	sub    $0x4,%esp
f011d928:	68 dc b8 13 f0       	push   $0xf013b8dc
f011d92d:	68 97 03 00 00       	push   $0x397
f011d932:	68 9a b2 13 f0       	push   $0xf013b29a
f011d937:	e8 c9 28 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d93c:	e8 5c f2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d941:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d944:	e8 7f 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d949:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d94c:	83 ec 0c             	sub    $0xc,%esp
f011d94f:	68 00 fc 1f 00       	push   $0x1ffc00
f011d954:	e8 2c 9f fe ff       	call   f0107885 <kmalloc>
f011d959:	83 c4 10             	add    $0x10,%esp
f011d95c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d962:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d968:	89 c1                	mov    %eax,%ecx
f011d96a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d971:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d974:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d979:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d97c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d97f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d984:	f7 75 d4             	divl   -0x2c(%ebp)
f011d987:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d98a:	29 d0                	sub    %edx,%eax
f011d98c:	89 c3                	mov    %eax,%ebx
f011d98e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d995:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d99a:	0f b6 d0             	movzbl %al,%edx
f011d99d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d9a0:	01 d0                	add    %edx,%eax
f011d9a2:	48                   	dec    %eax
f011d9a3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d9a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d9a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9ae:	f7 75 cc             	divl   -0x34(%ebp)
f011d9b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d9b4:	29 d0                	sub    %edx,%eax
f011d9b6:	01 c3                	add    %eax,%ebx
f011d9b8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d9bf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d9c4:	0f b6 c0             	movzbl %al,%eax
f011d9c7:	c1 e0 04             	shl    $0x4,%eax
f011d9ca:	89 c2                	mov    %eax,%edx
f011d9cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d9cf:	01 d0                	add    %edx,%eax
f011d9d1:	48                   	dec    %eax
f011d9d2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d9d5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9dd:	f7 75 c4             	divl   -0x3c(%ebp)
f011d9e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9e3:	29 d0                	sub    %edx,%eax
f011d9e5:	01 d8                	add    %ebx,%eax
f011d9e7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d9ec:	39 c1                	cmp    %eax,%ecx
f011d9ee:	74 17                	je     f011da07 <test_kmalloc_firstfit2+0x1d3>
f011d9f0:	83 ec 04             	sub    $0x4,%esp
f011d9f3:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011d9f8:	68 a1 03 00 00       	push   $0x3a1
f011d9fd:	68 9a b2 13 f0       	push   $0xf013b29a
f011da02:	e8 fe 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da07:	e8 bc 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da0f:	74 17                	je     f011da28 <test_kmalloc_firstfit2+0x1f4>
f011da11:	83 ec 04             	sub    $0x4,%esp
f011da14:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011da19:	68 a2 03 00 00       	push   $0x3a2
f011da1e:	68 9a b2 13 f0       	push   $0xf013b29a
f011da23:	e8 dd 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011da28:	e8 70 f1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011da2d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da30:	29 c2                	sub    %eax,%edx
f011da32:	89 d0                	mov    %edx,%eax
f011da34:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da39:	74 17                	je     f011da52 <test_kmalloc_firstfit2+0x21e>
f011da3b:	83 ec 04             	sub    $0x4,%esp
f011da3e:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011da43:	68 a3 03 00 00       	push   $0x3a3
f011da48:	68 9a b2 13 f0       	push   $0xf013b29a
f011da4d:	e8 b3 27 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011da52:	e8 46 f1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011da57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da5a:	e8 69 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011da62:	83 ec 0c             	sub    $0xc,%esp
f011da65:	68 00 fc 1f 00       	push   $0x1ffc00
f011da6a:	e8 16 9e fe ff       	call   f0107885 <kmalloc>
f011da6f:	83 c4 10             	add    $0x10,%esp
f011da72:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011da78:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011da7e:	89 c1                	mov    %eax,%ecx
f011da80:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011da87:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011da8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011da92:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da95:	ba 00 00 00 00       	mov    $0x0,%edx
f011da9a:	f7 75 bc             	divl   -0x44(%ebp)
f011da9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011daa0:	29 d0                	sub    %edx,%eax
f011daa2:	89 c3                	mov    %eax,%ebx
f011daa4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011daab:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dab0:	0f b6 d0             	movzbl %al,%edx
f011dab3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dab6:	01 d0                	add    %edx,%eax
f011dab8:	48                   	dec    %eax
f011dab9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011dabc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dabf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dac4:	f7 75 b4             	divl   -0x4c(%ebp)
f011dac7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011daca:	29 d0                	sub    %edx,%eax
f011dacc:	01 c3                	add    %eax,%ebx
f011dace:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dad5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dada:	0f b6 c0             	movzbl %al,%eax
f011dadd:	c1 e0 04             	shl    $0x4,%eax
f011dae0:	89 c2                	mov    %eax,%edx
f011dae2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dae5:	01 d0                	add    %edx,%eax
f011dae7:	48                   	dec    %eax
f011dae8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011daeb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011daee:	ba 00 00 00 00       	mov    $0x0,%edx
f011daf3:	f7 75 ac             	divl   -0x54(%ebp)
f011daf6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011daf9:	29 d0                	sub    %edx,%eax
f011dafb:	01 d8                	add    %ebx,%eax
f011dafd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011db02:	39 c1                	cmp    %eax,%ecx
f011db04:	74 17                	je     f011db1d <test_kmalloc_firstfit2+0x2e9>
f011db06:	83 ec 04             	sub    $0x4,%esp
f011db09:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011db0e:	68 a9 03 00 00       	push   $0x3a9
f011db13:	68 9a b2 13 f0       	push   $0xf013b29a
f011db18:	e8 e8 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db1d:	e8 a6 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db22:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db25:	74 17                	je     f011db3e <test_kmalloc_firstfit2+0x30a>
f011db27:	83 ec 04             	sub    $0x4,%esp
f011db2a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011db2f:	68 aa 03 00 00       	push   $0x3aa
f011db34:	68 9a b2 13 f0       	push   $0xf013b29a
f011db39:	e8 c7 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011db3e:	e8 5a f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db43:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011db46:	29 c2                	sub    %eax,%edx
f011db48:	89 d0                	mov    %edx,%eax
f011db4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db4f:	74 17                	je     f011db68 <test_kmalloc_firstfit2+0x334>
f011db51:	83 ec 04             	sub    $0x4,%esp
f011db54:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011db59:	68 ab 03 00 00       	push   $0x3ab
f011db5e:	68 9a b2 13 f0       	push   $0xf013b29a
f011db63:	e8 9d 26 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011db68:	e8 30 f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db70:	e8 53 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db75:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011db78:	83 ec 0c             	sub    $0xc,%esp
f011db7b:	68 00 08 00 00       	push   $0x800
f011db80:	e8 00 9d fe ff       	call   f0107885 <kmalloc>
f011db85:	83 c4 10             	add    $0x10,%esp
f011db88:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011db8e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011db94:	89 c1                	mov    %eax,%ecx
f011db96:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011db9d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dba0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dba5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011dba8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dbab:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbb0:	f7 75 a4             	divl   -0x5c(%ebp)
f011dbb3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dbb6:	29 d0                	sub    %edx,%eax
f011dbb8:	89 c3                	mov    %eax,%ebx
f011dbba:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dbc1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dbc6:	0f b6 d0             	movzbl %al,%edx
f011dbc9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dbcc:	01 d0                	add    %edx,%eax
f011dbce:	48                   	dec    %eax
f011dbcf:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dbd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dbd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbda:	f7 75 9c             	divl   -0x64(%ebp)
f011dbdd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dbe0:	29 d0                	sub    %edx,%eax
f011dbe2:	01 c3                	add    %eax,%ebx
f011dbe4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dbeb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dbf0:	0f b6 c0             	movzbl %al,%eax
f011dbf3:	c1 e0 04             	shl    $0x4,%eax
f011dbf6:	89 c2                	mov    %eax,%edx
f011dbf8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dbfb:	01 d0                	add    %edx,%eax
f011dbfd:	48                   	dec    %eax
f011dbfe:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dc01:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dc04:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc09:	f7 75 94             	divl   -0x6c(%ebp)
f011dc0c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dc0f:	29 d0                	sub    %edx,%eax
f011dc11:	01 d8                	add    %ebx,%eax
f011dc13:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dc18:	39 c1                	cmp    %eax,%ecx
f011dc1a:	73 17                	jae    f011dc33 <test_kmalloc_firstfit2+0x3ff>
f011dc1c:	83 ec 04             	sub    $0x4,%esp
f011dc1f:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011dc24:	68 b1 03 00 00       	push   $0x3b1
f011dc29:	68 9a b2 13 f0       	push   $0xf013b29a
f011dc2e:	e8 d2 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc33:	e8 90 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc38:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dc3b:	74 17                	je     f011dc54 <test_kmalloc_firstfit2+0x420>
f011dc3d:	83 ec 04             	sub    $0x4,%esp
f011dc40:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011dc45:	68 b2 03 00 00       	push   $0x3b2
f011dc4a:	68 9a b2 13 f0       	push   $0xf013b29a
f011dc4f:	e8 b1 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dc54:	e8 44 ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dc59:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dc5c:	29 c2                	sub    %eax,%edx
f011dc5e:	89 d0                	mov    %edx,%eax
f011dc60:	83 f8 01             	cmp    $0x1,%eax
f011dc63:	74 17                	je     f011dc7c <test_kmalloc_firstfit2+0x448>
f011dc65:	83 ec 04             	sub    $0x4,%esp
f011dc68:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011dc6d:	68 b3 03 00 00       	push   $0x3b3
f011dc72:	68 9a b2 13 f0       	push   $0xf013b29a
f011dc77:	e8 89 25 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc7c:	e8 1c ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dc81:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc84:	e8 3f 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc89:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dc8c:	83 ec 0c             	sub    $0xc,%esp
f011dc8f:	68 00 08 00 00       	push   $0x800
f011dc94:	e8 ec 9b fe ff       	call   f0107885 <kmalloc>
f011dc99:	83 c4 10             	add    $0x10,%esp
f011dc9c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011dca2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dca8:	89 c1                	mov    %eax,%ecx
f011dcaa:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dcb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011dcb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcb9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dcbc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dcbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcc4:	f7 75 8c             	divl   -0x74(%ebp)
f011dcc7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dcca:	29 d0                	sub    %edx,%eax
f011dccc:	89 c3                	mov    %eax,%ebx
f011dcce:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011dcd5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dcda:	0f b6 d0             	movzbl %al,%edx
f011dcdd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011dce0:	01 d0                	add    %edx,%eax
f011dce2:	48                   	dec    %eax
f011dce3:	89 45 80             	mov    %eax,-0x80(%ebp)
f011dce6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011dce9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcee:	f7 75 84             	divl   -0x7c(%ebp)
f011dcf1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011dcf4:	29 d0                	sub    %edx,%eax
f011dcf6:	01 c3                	add    %eax,%ebx
f011dcf8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011dcff:	10 00 00 
f011dd02:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dd07:	0f b6 c0             	movzbl %al,%eax
f011dd0a:	c1 e0 04             	shl    $0x4,%eax
f011dd0d:	89 c2                	mov    %eax,%edx
f011dd0f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011dd15:	01 d0                	add    %edx,%eax
f011dd17:	48                   	dec    %eax
f011dd18:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011dd1e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dd24:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd29:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011dd2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dd35:	29 d0                	sub    %edx,%eax
f011dd37:	01 d8                	add    %ebx,%eax
f011dd39:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011dd3e:	39 c1                	cmp    %eax,%ecx
f011dd40:	74 17                	je     f011dd59 <test_kmalloc_firstfit2+0x525>
f011dd42:	83 ec 04             	sub    $0x4,%esp
f011dd45:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011dd4a:	68 b9 03 00 00       	push   $0x3b9
f011dd4f:	68 9a b2 13 f0       	push   $0xf013b29a
f011dd54:	e8 ac 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd59:	e8 6a 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd61:	74 17                	je     f011dd7a <test_kmalloc_firstfit2+0x546>
f011dd63:	83 ec 04             	sub    $0x4,%esp
f011dd66:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011dd6b:	68 ba 03 00 00       	push   $0x3ba
f011dd70:	68 9a b2 13 f0       	push   $0xf013b29a
f011dd75:	e8 8b 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dd7a:	e8 1e ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dd82:	29 c2                	sub    %eax,%edx
f011dd84:	89 d0                	mov    %edx,%eax
f011dd86:	83 f8 01             	cmp    $0x1,%eax
f011dd89:	74 17                	je     f011dda2 <test_kmalloc_firstfit2+0x56e>
f011dd8b:	83 ec 04             	sub    $0x4,%esp
f011dd8e:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011dd93:	68 bb 03 00 00       	push   $0x3bb
f011dd98:	68 9a b2 13 f0       	push   $0xf013b29a
f011dd9d:	e8 63 24 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dda2:	e8 f6 ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dda7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddaa:	e8 19 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011ddb2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ddb8:	83 ec 0c             	sub    $0xc,%esp
f011ddbb:	50                   	push   %eax
f011ddbc:	e8 8f 9b fe ff       	call   f0107950 <kfree>
f011ddc1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddc4:	e8 ff 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddc9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ddcc:	74 17                	je     f011dde5 <test_kmalloc_firstfit2+0x5b1>
f011ddce:	83 ec 04             	sub    $0x4,%esp
f011ddd1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ddd6:	68 c1 03 00 00       	push   $0x3c1
f011dddb:	68 9a b2 13 f0       	push   $0xf013b29a
f011dde0:	e8 20 24 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011dde5:	e8 b3 ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ddea:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dded:	83 f8 01             	cmp    $0x1,%eax
f011ddf0:	74 17                	je     f011de09 <test_kmalloc_firstfit2+0x5d5>
f011ddf2:	83 ec 04             	sub    $0x4,%esp
f011ddf5:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011ddfa:	68 c2 03 00 00       	push   $0x3c2
f011ddff:	68 9a b2 13 f0       	push   $0xf013b29a
f011de04:	e8 fc 23 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011de09:	e8 8f ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011de0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de11:	e8 b2 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de16:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011de19:	83 ec 0c             	sub    $0xc,%esp
f011de1c:	68 00 1c 00 00       	push   $0x1c00
f011de21:	e8 5f 9a fe ff       	call   f0107885 <kmalloc>
f011de26:	83 c4 10             	add    $0x10,%esp
f011de29:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011de2f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011de35:	89 c1                	mov    %eax,%ecx
f011de37:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011de3e:	10 00 00 
f011de41:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011de47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de4c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011de52:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011de58:	ba 00 00 00 00       	mov    $0x0,%edx
f011de5d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011de63:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011de69:	29 d0                	sub    %edx,%eax
f011de6b:	89 c3                	mov    %eax,%ebx
f011de6d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011de74:	10 00 00 
f011de77:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011de7c:	0f b6 d0             	movzbl %al,%edx
f011de7f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011de85:	01 d0                	add    %edx,%eax
f011de87:	48                   	dec    %eax
f011de88:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011de8e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011de94:	ba 00 00 00 00       	mov    $0x0,%edx
f011de99:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011de9f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dea5:	29 d0                	sub    %edx,%eax
f011dea7:	01 c3                	add    %eax,%ebx
f011dea9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011deb0:	10 00 00 
f011deb3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011deb8:	0f b6 c0             	movzbl %al,%eax
f011debb:	c1 e0 04             	shl    $0x4,%eax
f011debe:	89 c2                	mov    %eax,%edx
f011dec0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dec6:	01 d0                	add    %edx,%eax
f011dec8:	48                   	dec    %eax
f011dec9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011decf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ded5:	ba 00 00 00 00       	mov    $0x0,%edx
f011deda:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dee0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dee6:	29 d0                	sub    %edx,%eax
f011dee8:	01 d8                	add    %ebx,%eax
f011deea:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011deef:	39 c1                	cmp    %eax,%ecx
f011def1:	74 17                	je     f011df0a <test_kmalloc_firstfit2+0x6d6>
f011def3:	83 ec 04             	sub    $0x4,%esp
f011def6:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011defb:	68 c8 03 00 00       	push   $0x3c8
f011df00:	68 9a b2 13 f0       	push   $0xf013b29a
f011df05:	e8 fb 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df0a:	e8 b9 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df0f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df12:	74 17                	je     f011df2b <test_kmalloc_firstfit2+0x6f7>
f011df14:	83 ec 04             	sub    $0x4,%esp
f011df17:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011df1c:	68 c9 03 00 00       	push   $0x3c9
f011df21:	68 9a b2 13 f0       	push   $0xf013b29a
f011df26:	e8 da 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011df2b:	e8 6d ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df30:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011df33:	29 c2                	sub    %eax,%edx
f011df35:	89 d0                	mov    %edx,%eax
f011df37:	83 f8 02             	cmp    $0x2,%eax
f011df3a:	74 17                	je     f011df53 <test_kmalloc_firstfit2+0x71f>
f011df3c:	83 ec 04             	sub    $0x4,%esp
f011df3f:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011df44:	68 ca 03 00 00       	push   $0x3ca
f011df49:	68 9a b2 13 f0       	push   $0xf013b29a
f011df4e:	e8 b2 22 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011df53:	e8 45 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df58:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df5b:	e8 68 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df60:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011df63:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011df69:	83 ec 0c             	sub    $0xc,%esp
f011df6c:	50                   	push   %eax
f011df6d:	e8 de 99 fe ff       	call   f0107950 <kfree>
f011df72:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df75:	e8 4e 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df7d:	74 17                	je     f011df96 <test_kmalloc_firstfit2+0x762>
f011df7f:	83 ec 04             	sub    $0x4,%esp
f011df82:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011df87:	68 d0 03 00 00       	push   $0x3d0
f011df8c:	68 9a b2 13 f0       	push   $0xf013b29a
f011df91:	e8 6f 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011df96:	e8 02 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df9b:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011df9e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dfa3:	74 17                	je     f011dfbc <test_kmalloc_firstfit2+0x788>
f011dfa5:	83 ec 04             	sub    $0x4,%esp
f011dfa8:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011dfad:	68 d1 03 00 00       	push   $0x3d1
f011dfb2:	68 9a b2 13 f0       	push   $0xf013b29a
f011dfb7:	e8 49 22 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dfbc:	e8 dc eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dfc1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfc4:	e8 ff 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfc9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dfcc:	83 ec 0c             	sub    $0xc,%esp
f011dfcf:	68 00 fc 2f 00       	push   $0x2ffc00
f011dfd4:	e8 ac 98 fe ff       	call   f0107885 <kmalloc>
f011dfd9:	83 c4 10             	add    $0x10,%esp
f011dfdc:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dfe2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dfe8:	89 c1                	mov    %eax,%ecx
f011dfea:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dff1:	10 00 00 
f011dff4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dffa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfff:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e005:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e00b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e010:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e016:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e01c:	29 d0                	sub    %edx,%eax
f011e01e:	89 c3                	mov    %eax,%ebx
f011e020:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e027:	10 00 00 
f011e02a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e02f:	0f b6 d0             	movzbl %al,%edx
f011e032:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e038:	01 d0                	add    %edx,%eax
f011e03a:	48                   	dec    %eax
f011e03b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e041:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e047:	ba 00 00 00 00       	mov    $0x0,%edx
f011e04c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e052:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e058:	29 d0                	sub    %edx,%eax
f011e05a:	01 c3                	add    %eax,%ebx
f011e05c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e063:	10 00 00 
f011e066:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e06b:	0f b6 c0             	movzbl %al,%eax
f011e06e:	c1 e0 04             	shl    $0x4,%eax
f011e071:	89 c2                	mov    %eax,%edx
f011e073:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e079:	01 d0                	add    %edx,%eax
f011e07b:	48                   	dec    %eax
f011e07c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e082:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e088:	ba 00 00 00 00       	mov    $0x0,%edx
f011e08d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e093:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e099:	29 d0                	sub    %edx,%eax
f011e09b:	01 d8                	add    %ebx,%eax
f011e09d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e0a2:	39 c1                	cmp    %eax,%ecx
f011e0a4:	74 17                	je     f011e0bd <test_kmalloc_firstfit2+0x889>
f011e0a6:	83 ec 04             	sub    $0x4,%esp
f011e0a9:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011e0ae:	68 d7 03 00 00       	push   $0x3d7
f011e0b3:	68 9a b2 13 f0       	push   $0xf013b29a
f011e0b8:	e8 48 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0bd:	e8 06 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0c5:	74 17                	je     f011e0de <test_kmalloc_firstfit2+0x8aa>
f011e0c7:	83 ec 04             	sub    $0x4,%esp
f011e0ca:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e0cf:	68 d8 03 00 00       	push   $0x3d8
f011e0d4:	68 9a b2 13 f0       	push   $0xf013b29a
f011e0d9:	e8 27 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e0de:	e8 ba ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e0e3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0e6:	29 c2                	sub    %eax,%edx
f011e0e8:	89 d0                	mov    %edx,%eax
f011e0ea:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e0ef:	74 17                	je     f011e108 <test_kmalloc_firstfit2+0x8d4>
f011e0f1:	83 ec 04             	sub    $0x4,%esp
f011e0f4:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011e0f9:	68 d9 03 00 00       	push   $0x3d9
f011e0fe:	68 9a b2 13 f0       	push   $0xf013b29a
f011e103:	e8 fd 20 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e108:	e8 90 ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e10d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e110:	e8 b3 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e115:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e118:	83 ec 0c             	sub    $0xc,%esp
f011e11b:	68 00 18 20 00       	push   $0x201800
f011e120:	e8 60 97 fe ff       	call   f0107885 <kmalloc>
f011e125:	83 c4 10             	add    $0x10,%esp
f011e128:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e12e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e134:	89 c1                	mov    %eax,%ecx
f011e136:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e13d:	10 00 00 
f011e140:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e146:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e14b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e151:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e157:	ba 00 00 00 00       	mov    $0x0,%edx
f011e15c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e162:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e168:	29 d0                	sub    %edx,%eax
f011e16a:	89 c3                	mov    %eax,%ebx
f011e16c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e173:	10 00 00 
f011e176:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e17b:	0f b6 d0             	movzbl %al,%edx
f011e17e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e184:	01 d0                	add    %edx,%eax
f011e186:	48                   	dec    %eax
f011e187:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e18d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e193:	ba 00 00 00 00       	mov    $0x0,%edx
f011e198:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e19e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e1a4:	29 d0                	sub    %edx,%eax
f011e1a6:	01 c3                	add    %eax,%ebx
f011e1a8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e1af:	10 00 00 
f011e1b2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e1b7:	0f b6 c0             	movzbl %al,%eax
f011e1ba:	c1 e0 04             	shl    $0x4,%eax
f011e1bd:	89 c2                	mov    %eax,%edx
f011e1bf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e1c5:	01 d0                	add    %edx,%eax
f011e1c7:	48                   	dec    %eax
f011e1c8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e1ce:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e1d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d9:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e1df:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e1e5:	29 d0                	sub    %edx,%eax
f011e1e7:	01 d8                	add    %ebx,%eax
f011e1e9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e1ee:	39 c1                	cmp    %eax,%ecx
f011e1f0:	74 17                	je     f011e209 <test_kmalloc_firstfit2+0x9d5>
f011e1f2:	83 ec 04             	sub    $0x4,%esp
f011e1f5:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011e1fa:	68 df 03 00 00       	push   $0x3df
f011e1ff:	68 9a b2 13 f0       	push   $0xf013b29a
f011e204:	e8 fc 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e209:	e8 ba 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e20e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e211:	74 17                	je     f011e22a <test_kmalloc_firstfit2+0x9f6>
f011e213:	83 ec 04             	sub    $0x4,%esp
f011e216:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e21b:	68 e0 03 00 00       	push   $0x3e0
f011e220:	68 9a b2 13 f0       	push   $0xf013b29a
f011e225:	e8 db 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e22a:	e8 6e e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e22f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e232:	29 c2                	sub    %eax,%edx
f011e234:	89 d0                	mov    %edx,%eax
f011e236:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e23b:	74 17                	je     f011e254 <test_kmalloc_firstfit2+0xa20>
f011e23d:	83 ec 04             	sub    $0x4,%esp
f011e240:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011e245:	68 e1 03 00 00       	push   $0x3e1
f011e24a:	68 9a b2 13 f0       	push   $0xf013b29a
f011e24f:	e8 b1 1f fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e254:	e8 44 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e259:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e25c:	e8 67 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e261:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e264:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e26a:	83 ec 0c             	sub    $0xc,%esp
f011e26d:	50                   	push   %eax
f011e26e:	e8 dd 96 fe ff       	call   f0107950 <kfree>
f011e273:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e276:	e8 4d 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e27b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e27e:	74 17                	je     f011e297 <test_kmalloc_firstfit2+0xa63>
f011e280:	83 ec 04             	sub    $0x4,%esp
f011e283:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e288:	68 e7 03 00 00       	push   $0x3e7
f011e28d:	68 9a b2 13 f0       	push   $0xf013b29a
f011e292:	e8 6e 1f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e297:	e8 01 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e29c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e29f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e2a4:	74 17                	je     f011e2bd <test_kmalloc_firstfit2+0xa89>
f011e2a6:	83 ec 04             	sub    $0x4,%esp
f011e2a9:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011e2ae:	68 e8 03 00 00       	push   $0x3e8
f011e2b3:	68 9a b2 13 f0       	push   $0xf013b29a
f011e2b8:	e8 48 1f fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e2bd:	e8 db e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e2c2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2c5:	e8 fe 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e2cd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e2d3:	83 ec 0c             	sub    $0xc,%esp
f011e2d6:	50                   	push   %eax
f011e2d7:	e8 74 96 fe ff       	call   f0107950 <kfree>
f011e2dc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e2df:	e8 b9 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e2e4:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e2e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e2ec:	74 17                	je     f011e305 <test_kmalloc_firstfit2+0xad1>
f011e2ee:	83 ec 04             	sub    $0x4,%esp
f011e2f1:	68 f7 b6 13 f0       	push   $0xf013b6f7
f011e2f6:	68 ee 03 00 00       	push   $0x3ee
f011e2fb:	68 9a b2 13 f0       	push   $0xf013b29a
f011e300:	e8 00 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e305:	e8 be 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e30a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e30d:	74 17                	je     f011e326 <test_kmalloc_firstfit2+0xaf2>
f011e30f:	83 ec 04             	sub    $0x4,%esp
f011e312:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e317:	68 ef 03 00 00       	push   $0x3ef
f011e31c:	68 9a b2 13 f0       	push   $0xf013b29a
f011e321:	e8 df 1e fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e326:	e8 72 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e32b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e32e:	e8 95 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e333:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e336:	83 ec 0c             	sub    $0xc,%esp
f011e339:	68 00 fc 4f 00       	push   $0x4ffc00
f011e33e:	e8 42 95 fe ff       	call   f0107885 <kmalloc>
f011e343:	83 c4 10             	add    $0x10,%esp
f011e346:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e34c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e352:	89 c1                	mov    %eax,%ecx
f011e354:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e35b:	10 00 00 
f011e35e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e364:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e369:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e36f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e375:	ba 00 00 00 00       	mov    $0x0,%edx
f011e37a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e380:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e386:	29 d0                	sub    %edx,%eax
f011e388:	89 c3                	mov    %eax,%ebx
f011e38a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e391:	10 00 00 
f011e394:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e399:	0f b6 d0             	movzbl %al,%edx
f011e39c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e3a2:	01 d0                	add    %edx,%eax
f011e3a4:	48                   	dec    %eax
f011e3a5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e3ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e3b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3b6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e3bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e3c2:	29 d0                	sub    %edx,%eax
f011e3c4:	01 c3                	add    %eax,%ebx
f011e3c6:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e3cd:	10 00 00 
f011e3d0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e3d5:	0f b6 c0             	movzbl %al,%eax
f011e3d8:	c1 e0 04             	shl    $0x4,%eax
f011e3db:	89 c2                	mov    %eax,%edx
f011e3dd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e3e3:	01 d0                	add    %edx,%eax
f011e3e5:	48                   	dec    %eax
f011e3e6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e3ec:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e3f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3f7:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e3fd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e403:	29 d0                	sub    %edx,%eax
f011e405:	01 d8                	add    %ebx,%eax
f011e407:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e40c:	39 c1                	cmp    %eax,%ecx
f011e40e:	74 17                	je     f011e427 <test_kmalloc_firstfit2+0xbf3>
f011e410:	83 ec 04             	sub    $0x4,%esp
f011e413:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011e418:	68 f5 03 00 00       	push   $0x3f5
f011e41d:	68 9a b2 13 f0       	push   $0xf013b29a
f011e422:	e8 de 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e427:	e8 9c 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e42c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e42f:	74 17                	je     f011e448 <test_kmalloc_firstfit2+0xc14>
f011e431:	83 ec 04             	sub    $0x4,%esp
f011e434:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e439:	68 f6 03 00 00       	push   $0x3f6
f011e43e:	68 9a b2 13 f0       	push   $0xf013b29a
f011e443:	e8 bd 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e448:	e8 50 e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e44d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e450:	29 c2                	sub    %eax,%edx
f011e452:	89 d0                	mov    %edx,%eax
f011e454:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e459:	74 17                	je     f011e472 <test_kmalloc_firstfit2+0xc3e>
f011e45b:	83 ec 04             	sub    $0x4,%esp
f011e45e:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011e463:	68 f7 03 00 00       	push   $0x3f7
f011e468:	68 9a b2 13 f0       	push   $0xf013b29a
f011e46d:	e8 93 1d fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e472:	e8 26 e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e477:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e47a:	e8 49 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e47f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e482:	83 ec 0c             	sub    $0xc,%esp
f011e485:	68 00 fc 2f 00       	push   $0x2ffc00
f011e48a:	e8 f6 93 fe ff       	call   f0107885 <kmalloc>
f011e48f:	83 c4 10             	add    $0x10,%esp
f011e492:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e498:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e49e:	89 c1                	mov    %eax,%ecx
f011e4a0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e4a7:	10 00 00 
f011e4aa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e4b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4b5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e4bb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e4c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4c6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e4cc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e4d2:	29 d0                	sub    %edx,%eax
f011e4d4:	89 c3                	mov    %eax,%ebx
f011e4d6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e4dd:	10 00 00 
f011e4e0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e4e5:	0f b6 d0             	movzbl %al,%edx
f011e4e8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e4ee:	01 d0                	add    %edx,%eax
f011e4f0:	48                   	dec    %eax
f011e4f1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e4f7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e4fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e502:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e508:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e50e:	29 d0                	sub    %edx,%eax
f011e510:	01 c3                	add    %eax,%ebx
f011e512:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e519:	10 00 00 
f011e51c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e521:	0f b6 c0             	movzbl %al,%eax
f011e524:	c1 e0 04             	shl    $0x4,%eax
f011e527:	89 c2                	mov    %eax,%edx
f011e529:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e52f:	01 d0                	add    %edx,%eax
f011e531:	48                   	dec    %eax
f011e532:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e538:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e53e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e543:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e549:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e54f:	29 d0                	sub    %edx,%eax
f011e551:	01 d8                	add    %ebx,%eax
f011e553:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e558:	39 c1                	cmp    %eax,%ecx
f011e55a:	74 17                	je     f011e573 <test_kmalloc_firstfit2+0xd3f>
f011e55c:	83 ec 04             	sub    $0x4,%esp
f011e55f:	68 b4 b6 13 f0       	push   $0xf013b6b4
f011e564:	68 05 04 00 00       	push   $0x405
f011e569:	68 9a b2 13 f0       	push   $0xf013b29a
f011e56e:	e8 92 1c fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e573:	e8 50 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e578:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e57b:	74 17                	je     f011e594 <test_kmalloc_firstfit2+0xd60>
f011e57d:	83 ec 04             	sub    $0x4,%esp
f011e580:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011e585:	68 06 04 00 00       	push   $0x406
f011e58a:	68 9a b2 13 f0       	push   $0xf013b29a
f011e58f:	e8 71 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e594:	e8 04 e6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e599:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e59c:	29 c2                	sub    %eax,%edx
f011e59e:	89 d0                	mov    %edx,%eax
f011e5a0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e5a5:	74 17                	je     f011e5be <test_kmalloc_firstfit2+0xd8a>
f011e5a7:	83 ec 04             	sub    $0x4,%esp
f011e5aa:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011e5af:	68 07 04 00 00       	push   $0x407
f011e5b4:	68 9a b2 13 f0       	push   $0xf013b29a
f011e5b9:	e8 47 1c fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e5be:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e5c5:	10 00 00 
f011e5c8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e5ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5d3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e5d9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e5df:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5e4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e5ea:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e5f0:	29 d0                	sub    %edx,%eax
f011e5f2:	89 c1                	mov    %eax,%ecx
f011e5f4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e5fb:	10 00 00 
f011e5fe:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e603:	0f b6 d0             	movzbl %al,%edx
f011e606:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e60c:	01 d0                	add    %edx,%eax
f011e60e:	48                   	dec    %eax
f011e60f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e615:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e61b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e620:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e626:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e62c:	29 d0                	sub    %edx,%eax
f011e62e:	01 c1                	add    %eax,%ecx
f011e630:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e637:	10 00 00 
f011e63a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e63f:	0f b6 c0             	movzbl %al,%eax
f011e642:	c1 e0 04             	shl    $0x4,%eax
f011e645:	89 c2                	mov    %eax,%edx
f011e647:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e64d:	01 d0                	add    %edx,%eax
f011e64f:	48                   	dec    %eax
f011e650:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e656:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e65c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e661:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e667:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e66d:	29 d0                	sub    %edx,%eax
f011e66f:	01 c8                	add    %ecx,%eax
f011e671:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e676:	29 c2                	sub    %eax,%edx
f011e678:	89 d0                	mov    %edx,%eax
f011e67a:	83 ec 0c             	sub    $0xc,%esp
f011e67d:	50                   	push   %eax
f011e67e:	e8 02 92 fe ff       	call   f0107885 <kmalloc>
f011e683:	83 c4 10             	add    $0x10,%esp
f011e686:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e68c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e692:	85 c0                	test   %eax,%eax
f011e694:	74 17                	je     f011e6ad <test_kmalloc_firstfit2+0xe79>
f011e696:	83 ec 04             	sub    $0x4,%esp
f011e699:	68 e4 b7 13 f0       	push   $0xf013b7e4
f011e69e:	68 0d 04 00 00       	push   $0x40d
f011e6a3:	68 9a b2 13 f0       	push   $0xf013b29a
f011e6a8:	e8 58 1b fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e6ad:	83 ec 0c             	sub    $0xc,%esp
f011e6b0:	68 24 b9 13 f0       	push   $0xf013b924
f011e6b5:	e8 54 26 fe ff       	call   f0100d0e <cprintf>
f011e6ba:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e6bd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e6c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e6c5:	5b                   	pop    %ebx
f011e6c6:	5f                   	pop    %edi
f011e6c7:	5d                   	pop    %ebp
f011e6c8:	c3                   	ret    

f011e6c9 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e6c9:	55                   	push   %ebp
f011e6ca:	89 e5                	mov    %esp,%ebp
f011e6cc:	57                   	push   %edi
f011e6cd:	53                   	push   %ebx
f011e6ce:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e6d4:	83 ec 0c             	sub    $0xc,%esp
f011e6d7:	68 dc b1 13 f0       	push   $0xf013b1dc
f011e6dc:	e8 2d 26 fe ff       	call   f0100d0e <cprintf>
f011e6e1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e6e4:	83 ec 0c             	sub    $0xc,%esp
f011e6e7:	68 0c b2 13 f0       	push   $0xf013b20c
f011e6ec:	e8 1d 26 fe ff       	call   f0100d0e <cprintf>
f011e6f1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e6f4:	83 ec 0c             	sub    $0xc,%esp
f011e6f7:	68 dc b1 13 f0       	push   $0xf013b1dc
f011e6fc:	e8 0d 26 fe ff       	call   f0100d0e <cprintf>
f011e701:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e704:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e70a:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e70f:	b8 00 00 00 00       	mov    $0x0,%eax
f011e714:	89 d7                	mov    %edx,%edi
f011e716:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e718:	e8 80 e4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e71d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e720:	e8 a3 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e725:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e728:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e72f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e736:	eb 1f                	jmp    f011e757 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e738:	83 ec 0c             	sub    $0xc,%esp
f011e73b:	68 00 00 20 00       	push   $0x200000
f011e740:	e8 40 91 fe ff       	call   f0107885 <kmalloc>
f011e745:	83 c4 10             	add    $0x10,%esp
f011e748:	89 c2                	mov    %eax,%edx
f011e74a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e74d:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e754:	ff 45 f4             	incl   -0xc(%ebp)
f011e757:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e75b:	7e db                	jle    f011e738 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e75d:	83 ec 0c             	sub    $0xc,%esp
f011e760:	68 00 b0 1f 00       	push   $0x1fb000
f011e765:	e8 1b 91 fe ff       	call   f0107885 <kmalloc>
f011e76a:	83 c4 10             	add    $0x10,%esp
f011e76d:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e773:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e779:	89 c1                	mov    %eax,%ecx
f011e77b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e785:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e78a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e78d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e790:	ba 00 00 00 00       	mov    $0x0,%edx
f011e795:	f7 75 e4             	divl   -0x1c(%ebp)
f011e798:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e79b:	29 d0                	sub    %edx,%eax
f011e79d:	89 c3                	mov    %eax,%ebx
f011e79f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e7a6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e7ab:	0f b6 d0             	movzbl %al,%edx
f011e7ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e7b1:	01 d0                	add    %edx,%eax
f011e7b3:	48                   	dec    %eax
f011e7b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e7b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e7ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7bf:	f7 75 dc             	divl   -0x24(%ebp)
f011e7c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e7c5:	29 d0                	sub    %edx,%eax
f011e7c7:	01 c3                	add    %eax,%ebx
f011e7c9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e7d0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e7d5:	0f b6 c0             	movzbl %al,%eax
f011e7d8:	c1 e0 04             	shl    $0x4,%eax
f011e7db:	89 c2                	mov    %eax,%edx
f011e7dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e7e0:	01 d0                	add    %edx,%eax
f011e7e2:	48                   	dec    %eax
f011e7e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e7e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e7e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7ee:	f7 75 d4             	divl   -0x2c(%ebp)
f011e7f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e7f4:	29 d0                	sub    %edx,%eax
f011e7f6:	01 d8                	add    %ebx,%eax
f011e7f8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e7fd:	39 c1                	cmp    %eax,%ecx
f011e7ff:	0f 85 c0 04 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e805:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e80b:	89 c1                	mov    %eax,%ecx
f011e80d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e814:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e817:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e81c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e81f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e822:	ba 00 00 00 00       	mov    $0x0,%edx
f011e827:	f7 75 cc             	divl   -0x34(%ebp)
f011e82a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e82d:	29 d0                	sub    %edx,%eax
f011e82f:	89 c3                	mov    %eax,%ebx
f011e831:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e838:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e83d:	0f b6 d0             	movzbl %al,%edx
f011e840:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e843:	01 d0                	add    %edx,%eax
f011e845:	48                   	dec    %eax
f011e846:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e849:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e84c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e851:	f7 75 c4             	divl   -0x3c(%ebp)
f011e854:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e857:	29 d0                	sub    %edx,%eax
f011e859:	01 c3                	add    %eax,%ebx
f011e85b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e862:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e867:	0f b6 c0             	movzbl %al,%eax
f011e86a:	c1 e0 04             	shl    $0x4,%eax
f011e86d:	89 c2                	mov    %eax,%edx
f011e86f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e872:	01 d0                	add    %edx,%eax
f011e874:	48                   	dec    %eax
f011e875:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e878:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e87b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e880:	f7 75 bc             	divl   -0x44(%ebp)
f011e883:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e886:	29 d0                	sub    %edx,%eax
f011e888:	01 d8                	add    %ebx,%eax
f011e88a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e88f:	39 c1                	cmp    %eax,%ecx
f011e891:	0f 85 2e 04 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e897:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e89d:	89 c1                	mov    %eax,%ecx
f011e89f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e8a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e8a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8ae:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e8b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e8b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8b9:	f7 75 b4             	divl   -0x4c(%ebp)
f011e8bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e8bf:	29 d0                	sub    %edx,%eax
f011e8c1:	89 c3                	mov    %eax,%ebx
f011e8c3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e8ca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e8cf:	0f b6 d0             	movzbl %al,%edx
f011e8d2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e8d5:	01 d0                	add    %edx,%eax
f011e8d7:	48                   	dec    %eax
f011e8d8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e8db:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e8de:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8e3:	f7 75 ac             	divl   -0x54(%ebp)
f011e8e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e8e9:	29 d0                	sub    %edx,%eax
f011e8eb:	01 c3                	add    %eax,%ebx
f011e8ed:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e8f4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e8f9:	0f b6 c0             	movzbl %al,%eax
f011e8fc:	c1 e0 04             	shl    $0x4,%eax
f011e8ff:	89 c2                	mov    %eax,%edx
f011e901:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e904:	01 d0                	add    %edx,%eax
f011e906:	48                   	dec    %eax
f011e907:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e90a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e90d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e912:	f7 75 a4             	divl   -0x5c(%ebp)
f011e915:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e918:	29 d0                	sub    %edx,%eax
f011e91a:	01 d8                	add    %ebx,%eax
f011e91c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e921:	39 c1                	cmp    %eax,%ecx
f011e923:	0f 85 9c 03 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e929:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e92f:	89 c1                	mov    %eax,%ecx
f011e931:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e938:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e93b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e940:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e943:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e946:	ba 00 00 00 00       	mov    $0x0,%edx
f011e94b:	f7 75 9c             	divl   -0x64(%ebp)
f011e94e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e951:	29 d0                	sub    %edx,%eax
f011e953:	89 c3                	mov    %eax,%ebx
f011e955:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e95c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e961:	0f b6 d0             	movzbl %al,%edx
f011e964:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e967:	01 d0                	add    %edx,%eax
f011e969:	48                   	dec    %eax
f011e96a:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e96d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e970:	ba 00 00 00 00       	mov    $0x0,%edx
f011e975:	f7 75 94             	divl   -0x6c(%ebp)
f011e978:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e97b:	29 d0                	sub    %edx,%eax
f011e97d:	01 c3                	add    %eax,%ebx
f011e97f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e986:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e98b:	0f b6 c0             	movzbl %al,%eax
f011e98e:	c1 e0 04             	shl    $0x4,%eax
f011e991:	89 c2                	mov    %eax,%edx
f011e993:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e996:	01 d0                	add    %edx,%eax
f011e998:	48                   	dec    %eax
f011e999:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e99c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e99f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9a4:	f7 75 8c             	divl   -0x74(%ebp)
f011e9a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e9aa:	29 d0                	sub    %edx,%eax
f011e9ac:	01 d8                	add    %ebx,%eax
f011e9ae:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e9b3:	39 c1                	cmp    %eax,%ecx
f011e9b5:	0f 85 0a 03 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e9bb:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e9c1:	89 c1                	mov    %eax,%ecx
f011e9c3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e9ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e9cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9d2:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e9d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e9d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9dd:	f7 75 84             	divl   -0x7c(%ebp)
f011e9e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e9e3:	29 d0                	sub    %edx,%eax
f011e9e5:	89 c3                	mov    %eax,%ebx
f011e9e7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e9ee:	10 00 00 
f011e9f1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e9f6:	0f b6 d0             	movzbl %al,%edx
f011e9f9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e9ff:	01 d0                	add    %edx,%eax
f011ea01:	48                   	dec    %eax
f011ea02:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ea08:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ea0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea13:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ea19:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ea1f:	29 d0                	sub    %edx,%eax
f011ea21:	01 c3                	add    %eax,%ebx
f011ea23:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ea2a:	10 00 00 
f011ea2d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ea32:	0f b6 c0             	movzbl %al,%eax
f011ea35:	c1 e0 04             	shl    $0x4,%eax
f011ea38:	89 c2                	mov    %eax,%edx
f011ea3a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ea40:	01 d0                	add    %edx,%eax
f011ea42:	48                   	dec    %eax
f011ea43:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ea49:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ea4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea54:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ea5a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ea60:	29 d0                	sub    %edx,%eax
f011ea62:	01 d8                	add    %ebx,%eax
f011ea64:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ea69:	39 c1                	cmp    %eax,%ecx
f011ea6b:	0f 85 54 02 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ea71:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011ea77:	89 c1                	mov    %eax,%ecx
f011ea79:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ea80:	10 00 00 
f011ea83:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ea89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea8e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ea94:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ea9a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea9f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011eaa5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011eaab:	29 d0                	sub    %edx,%eax
f011eaad:	89 c3                	mov    %eax,%ebx
f011eaaf:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011eab6:	10 00 00 
f011eab9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eabe:	0f b6 d0             	movzbl %al,%edx
f011eac1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eac7:	01 d0                	add    %edx,%eax
f011eac9:	48                   	dec    %eax
f011eaca:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ead0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ead6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eadb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011eae1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011eae7:	29 d0                	sub    %edx,%eax
f011eae9:	01 c3                	add    %eax,%ebx
f011eaeb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011eaf2:	10 00 00 
f011eaf5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eafa:	0f b6 c0             	movzbl %al,%eax
f011eafd:	c1 e0 04             	shl    $0x4,%eax
f011eb00:	89 c2                	mov    %eax,%edx
f011eb02:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011eb08:	01 d0                	add    %edx,%eax
f011eb0a:	48                   	dec    %eax
f011eb0b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011eb11:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011eb17:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb1c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011eb22:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011eb28:	29 d0                	sub    %edx,%eax
f011eb2a:	01 d8                	add    %ebx,%eax
f011eb2c:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011eb31:	39 c1                	cmp    %eax,%ecx
f011eb33:	0f 85 8c 01 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011eb39:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011eb3f:	89 c1                	mov    %eax,%ecx
f011eb41:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011eb48:	10 00 00 
f011eb4b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011eb51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb56:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011eb5c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eb62:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb67:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011eb6d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eb73:	29 d0                	sub    %edx,%eax
f011eb75:	89 c3                	mov    %eax,%ebx
f011eb77:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011eb7e:	10 00 00 
f011eb81:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eb86:	0f b6 d0             	movzbl %al,%edx
f011eb89:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eb8f:	01 d0                	add    %edx,%eax
f011eb91:	48                   	dec    %eax
f011eb92:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011eb98:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011eb9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011eba3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011eba9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ebaf:	29 d0                	sub    %edx,%eax
f011ebb1:	01 c3                	add    %eax,%ebx
f011ebb3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ebba:	10 00 00 
f011ebbd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ebc2:	0f b6 c0             	movzbl %al,%eax
f011ebc5:	c1 e0 04             	shl    $0x4,%eax
f011ebc8:	89 c2                	mov    %eax,%edx
f011ebca:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ebd0:	01 d0                	add    %edx,%eax
f011ebd2:	48                   	dec    %eax
f011ebd3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ebd9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ebdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebe4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ebea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ebf0:	29 d0                	sub    %edx,%eax
f011ebf2:	01 d8                	add    %ebx,%eax
f011ebf4:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ebf9:	39 c1                	cmp    %eax,%ecx
f011ebfb:	0f 85 c4 00 00 00    	jne    f011ecc5 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011ec01:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011ec07:	89 c1                	mov    %eax,%ecx
f011ec09:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ec10:	10 00 00 
f011ec13:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec1e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ec24:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ec35:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec3b:	29 d0                	sub    %edx,%eax
f011ec3d:	89 c3                	mov    %eax,%ebx
f011ec3f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ec46:	10 00 00 
f011ec49:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ec4e:	0f b6 d0             	movzbl %al,%edx
f011ec51:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec57:	01 d0                	add    %edx,%eax
f011ec59:	48                   	dec    %eax
f011ec5a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ec60:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ec66:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec6b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ec71:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ec77:	29 d0                	sub    %edx,%eax
f011ec79:	01 c3                	add    %eax,%ebx
f011ec7b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ec82:	10 00 00 
f011ec85:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ec8a:	0f b6 c0             	movzbl %al,%eax
f011ec8d:	c1 e0 04             	shl    $0x4,%eax
f011ec90:	89 c2                	mov    %eax,%edx
f011ec92:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ec98:	01 d0                	add    %edx,%eax
f011ec9a:	48                   	dec    %eax
f011ec9b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011eca1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011eca7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecac:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ecb2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ecb8:	29 d0                	sub    %edx,%eax
f011ecba:	01 d8                	add    %ebx,%eax
f011ecbc:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ecc1:	39 c1                	cmp    %eax,%ecx
f011ecc3:	74 17                	je     f011ecdc <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ecc5:	83 ec 04             	sub    $0x4,%esp
f011ecc8:	68 70 b9 13 f0       	push   $0xf013b970
f011eccd:	68 31 04 00 00       	push   $0x431
f011ecd2:	68 9a b2 13 f0       	push   $0xf013b29a
f011ecd7:	e8 29 15 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecdc:	e8 e7 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ece1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ece4:	74 17                	je     f011ecfd <test_kmalloc_worstfit+0x634>
f011ece6:	83 ec 04             	sub    $0x4,%esp
f011ece9:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ecee:	68 33 04 00 00       	push   $0x433
f011ecf3:	68 9a b2 13 f0       	push   $0xf013b29a
f011ecf8:	e8 08 15 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011ecfd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed00:	e8 98 de fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ed05:	29 c3                	sub    %eax,%ebx
f011ed07:	89 d8                	mov    %ebx,%eax
f011ed09:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011ed0e:	74 17                	je     f011ed27 <test_kmalloc_worstfit+0x65e>
f011ed10:	83 ec 04             	sub    $0x4,%esp
f011ed13:	68 57 b5 13 f0       	push   $0xf013b557
f011ed18:	68 34 04 00 00       	push   $0x434
f011ed1d:	68 9a b2 13 f0       	push   $0xf013b29a
f011ed22:	e8 de 14 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011ed27:	e8 71 de fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ed2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011ed2f:	e8 94 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ed34:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011ed37:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ed3d:	83 ec 0c             	sub    $0xc,%esp
f011ed40:	50                   	push   %eax
f011ed41:	e8 0a 8c fe ff       	call   f0107950 <kfree>
f011ed46:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011ed49:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011ed4f:	83 ec 0c             	sub    $0xc,%esp
f011ed52:	50                   	push   %eax
f011ed53:	e8 f8 8b fe ff       	call   f0107950 <kfree>
f011ed58:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011ed5b:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011ed61:	83 ec 0c             	sub    $0xc,%esp
f011ed64:	50                   	push   %eax
f011ed65:	e8 e6 8b fe ff       	call   f0107950 <kfree>
f011ed6a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011ed6d:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011ed73:	83 ec 0c             	sub    $0xc,%esp
f011ed76:	50                   	push   %eax
f011ed77:	e8 d4 8b fe ff       	call   f0107950 <kfree>
f011ed7c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011ed7f:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011ed85:	83 ec 0c             	sub    $0xc,%esp
f011ed88:	50                   	push   %eax
f011ed89:	e8 c2 8b fe ff       	call   f0107950 <kfree>
f011ed8e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011ed91:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011ed97:	83 ec 0c             	sub    $0xc,%esp
f011ed9a:	50                   	push   %eax
f011ed9b:	e8 b0 8b fe ff       	call   f0107950 <kfree>
f011eda0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011eda3:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011eda9:	83 ec 0c             	sub    $0xc,%esp
f011edac:	50                   	push   %eax
f011edad:	e8 9e 8b fe ff       	call   f0107950 <kfree>
f011edb2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011edb5:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011edbb:	83 ec 0c             	sub    $0xc,%esp
f011edbe:	50                   	push   %eax
f011edbf:	e8 8c 8b fe ff       	call   f0107950 <kfree>
f011edc4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011edc7:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011edcd:	83 ec 0c             	sub    $0xc,%esp
f011edd0:	50                   	push   %eax
f011edd1:	e8 7a 8b fe ff       	call   f0107950 <kfree>
f011edd6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011edd9:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011eddf:	83 ec 0c             	sub    $0xc,%esp
f011ede2:	50                   	push   %eax
f011ede3:	e8 68 8b fe ff       	call   f0107950 <kfree>
f011ede8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011edeb:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011edf1:	83 ec 0c             	sub    $0xc,%esp
f011edf4:	50                   	push   %eax
f011edf5:	e8 56 8b fe ff       	call   f0107950 <kfree>
f011edfa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011edfd:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011ee03:	83 ec 0c             	sub    $0xc,%esp
f011ee06:	50                   	push   %eax
f011ee07:	e8 44 8b fe ff       	call   f0107950 <kfree>
f011ee0c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011ee0f:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011ee15:	83 ec 0c             	sub    $0xc,%esp
f011ee18:	50                   	push   %eax
f011ee19:	e8 32 8b fe ff       	call   f0107950 <kfree>
f011ee1e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011ee21:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011ee27:	83 ec 0c             	sub    $0xc,%esp
f011ee2a:	50                   	push   %eax
f011ee2b:	e8 20 8b fe ff       	call   f0107950 <kfree>
f011ee30:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ee33:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011ee39:	83 ec 0c             	sub    $0xc,%esp
f011ee3c:	50                   	push   %eax
f011ee3d:	e8 0e 8b fe ff       	call   f0107950 <kfree>
f011ee42:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee45:	e8 7e 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ee4a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee4d:	74 17                	je     f011ee66 <test_kmalloc_worstfit+0x79d>
f011ee4f:	83 ec 04             	sub    $0x4,%esp
f011ee52:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ee57:	68 4a 04 00 00       	push   $0x44a
f011ee5c:	68 9a b2 13 f0       	push   $0xf013b29a
f011ee61:	e8 9f 13 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011ee66:	e8 32 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ee6b:	89 c2                	mov    %eax,%edx
f011ee6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ee70:	29 c2                	sub    %eax,%edx
f011ee72:	89 d0                	mov    %edx,%eax
f011ee74:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011ee79:	74 17                	je     f011ee92 <test_kmalloc_worstfit+0x7c9>
f011ee7b:	83 ec 04             	sub    $0x4,%esp
f011ee7e:	68 68 b5 13 f0       	push   $0xf013b568
f011ee83:	68 4b 04 00 00       	push   $0x44b
f011ee88:	68 9a b2 13 f0       	push   $0xf013b29a
f011ee8d:	e8 73 13 fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011ee92:	e8 06 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ee97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee9a:	e8 29 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ee9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011eea2:	83 ec 0c             	sub    $0xc,%esp
f011eea5:	68 00 00 10 00       	push   $0x100000
f011eeaa:	e8 d6 89 fe ff       	call   f0107885 <kmalloc>
f011eeaf:	83 c4 10             	add    $0x10,%esp
f011eeb2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011eeb8:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011eebf:	10 00 00 
f011eec2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eec8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eecd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011eed3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eed9:	ba 00 00 00 00       	mov    $0x0,%edx
f011eede:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011eee4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eeea:	29 d0                	sub    %edx,%eax
f011eeec:	89 c1                	mov    %eax,%ecx
f011eeee:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eef5:	10 00 00 
f011eef8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eefd:	0f b6 d0             	movzbl %al,%edx
f011ef00:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ef06:	01 d0                	add    %edx,%eax
f011ef08:	48                   	dec    %eax
f011ef09:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011ef0f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ef15:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef1a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011ef20:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ef26:	29 d0                	sub    %edx,%eax
f011ef28:	01 c1                	add    %eax,%ecx
f011ef2a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ef31:	10 00 00 
f011ef34:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ef39:	0f b6 c0             	movzbl %al,%eax
f011ef3c:	c1 e0 04             	shl    $0x4,%eax
f011ef3f:	89 c2                	mov    %eax,%edx
f011ef41:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ef47:	01 d0                	add    %edx,%eax
f011ef49:	48                   	dec    %eax
f011ef4a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ef50:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ef56:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef5b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ef61:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ef67:	29 d0                	sub    %edx,%eax
f011ef69:	01 c8                	add    %ecx,%eax
f011ef6b:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ef71:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ef77:	39 c2                	cmp    %eax,%edx
f011ef79:	74 17                	je     f011ef92 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011ef7b:	83 ec 04             	sub    $0x4,%esp
f011ef7e:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011ef83:	68 52 04 00 00       	push   $0x452
f011ef88:	68 9a b2 13 f0       	push   $0xf013b29a
f011ef8d:	e8 73 12 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef92:	e8 31 4e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ef97:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef9a:	74 17                	je     f011efb3 <test_kmalloc_worstfit+0x8ea>
f011ef9c:	83 ec 04             	sub    $0x4,%esp
f011ef9f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011efa4:	68 53 04 00 00       	push   $0x453
f011efa9:	68 9a b2 13 f0       	push   $0xf013b29a
f011efae:	e8 52 12 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011efb3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011efb6:	e8 e2 db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011efbb:	29 c3                	sub    %eax,%ebx
f011efbd:	89 d8                	mov    %ebx,%eax
f011efbf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011efc4:	74 17                	je     f011efdd <test_kmalloc_worstfit+0x914>
f011efc6:	83 ec 04             	sub    $0x4,%esp
f011efc9:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011efce:	68 54 04 00 00       	push   $0x454
f011efd3:	68 9a b2 13 f0       	push   $0xf013b29a
f011efd8:	e8 28 12 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011efdd:	ff 45 e8             	incl   -0x18(%ebp)
f011efe0:	83 ec 08             	sub    $0x8,%esp
f011efe3:	ff 75 e8             	pushl  -0x18(%ebp)
f011efe6:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011efeb:	e8 1e 1d fe ff       	call   f0100d0e <cprintf>
f011eff0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eff3:	e8 a5 db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011effb:	e8 c8 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f000:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f003:	83 ec 0c             	sub    $0xc,%esp
f011f006:	68 00 00 40 00       	push   $0x400000
f011f00b:	e8 75 88 fe ff       	call   f0107885 <kmalloc>
f011f010:	83 c4 10             	add    $0x10,%esp
f011f013:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f019:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f020:	10 00 00 
f011f023:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f029:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f02e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f034:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f03a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f03f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f045:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f04b:	29 d0                	sub    %edx,%eax
f011f04d:	89 c1                	mov    %eax,%ecx
f011f04f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f056:	10 00 00 
f011f059:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f05e:	0f b6 d0             	movzbl %al,%edx
f011f061:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f067:	01 d0                	add    %edx,%eax
f011f069:	48                   	dec    %eax
f011f06a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f070:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f076:	ba 00 00 00 00       	mov    $0x0,%edx
f011f07b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f081:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f087:	29 d0                	sub    %edx,%eax
f011f089:	01 c1                	add    %eax,%ecx
f011f08b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f092:	10 00 00 
f011f095:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f09a:	0f b6 c0             	movzbl %al,%eax
f011f09d:	c1 e0 04             	shl    $0x4,%eax
f011f0a0:	89 c2                	mov    %eax,%edx
f011f0a2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f0a8:	01 d0                	add    %edx,%eax
f011f0aa:	48                   	dec    %eax
f011f0ab:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f0b1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f0b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0bc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f0c2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f0c8:	29 d0                	sub    %edx,%eax
f011f0ca:	01 c8                	add    %ecx,%eax
f011f0cc:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f0d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f0d8:	39 c2                	cmp    %eax,%edx
f011f0da:	74 17                	je     f011f0f3 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f0dc:	83 ec 04             	sub    $0x4,%esp
f011f0df:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f0e4:	68 5b 04 00 00       	push   $0x45b
f011f0e9:	68 9a b2 13 f0       	push   $0xf013b29a
f011f0ee:	e8 12 11 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f0f3:	e8 d0 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f0f8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f0fb:	74 17                	je     f011f114 <test_kmalloc_worstfit+0xa4b>
f011f0fd:	83 ec 04             	sub    $0x4,%esp
f011f100:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f105:	68 5c 04 00 00       	push   $0x45c
f011f10a:	68 9a b2 13 f0       	push   $0xf013b29a
f011f10f:	e8 f1 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f114:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f117:	e8 81 da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f11c:	29 c3                	sub    %eax,%ebx
f011f11e:	89 d8                	mov    %ebx,%eax
f011f120:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f125:	74 17                	je     f011f13e <test_kmalloc_worstfit+0xa75>
f011f127:	83 ec 04             	sub    $0x4,%esp
f011f12a:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f12f:	68 5d 04 00 00       	push   $0x45d
f011f134:	68 9a b2 13 f0       	push   $0xf013b29a
f011f139:	e8 c7 10 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f13e:	ff 45 e8             	incl   -0x18(%ebp)
f011f141:	83 ec 08             	sub    $0x8,%esp
f011f144:	ff 75 e8             	pushl  -0x18(%ebp)
f011f147:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f14c:	e8 bd 1b fe ff       	call   f0100d0e <cprintf>
f011f151:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f154:	e8 44 da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f159:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f15c:	e8 67 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f161:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f164:	83 ec 0c             	sub    $0xc,%esp
f011f167:	68 00 00 60 00       	push   $0x600000
f011f16c:	e8 14 87 fe ff       	call   f0107885 <kmalloc>
f011f171:	83 c4 10             	add    $0x10,%esp
f011f174:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f17a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f181:	10 00 00 
f011f184:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f18a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f18f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f195:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f19b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1a0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f1a6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f1ac:	29 d0                	sub    %edx,%eax
f011f1ae:	89 c1                	mov    %eax,%ecx
f011f1b0:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f1b7:	10 00 00 
f011f1ba:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f1bf:	0f b6 d0             	movzbl %al,%edx
f011f1c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f1c8:	01 d0                	add    %edx,%eax
f011f1ca:	48                   	dec    %eax
f011f1cb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f1d1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1dc:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f1e2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f1e8:	29 d0                	sub    %edx,%eax
f011f1ea:	01 c1                	add    %eax,%ecx
f011f1ec:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f1f3:	10 00 00 
f011f1f6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f1fb:	0f b6 c0             	movzbl %al,%eax
f011f1fe:	c1 e0 04             	shl    $0x4,%eax
f011f201:	89 c2                	mov    %eax,%edx
f011f203:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f209:	01 d0                	add    %edx,%eax
f011f20b:	48                   	dec    %eax
f011f20c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f212:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f218:	ba 00 00 00 00       	mov    $0x0,%edx
f011f21d:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f223:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f229:	29 d0                	sub    %edx,%eax
f011f22b:	01 c8                	add    %ecx,%eax
f011f22d:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f233:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f239:	39 c2                	cmp    %eax,%edx
f011f23b:	74 17                	je     f011f254 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f23d:	83 ec 04             	sub    $0x4,%esp
f011f240:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f245:	68 64 04 00 00       	push   $0x464
f011f24a:	68 9a b2 13 f0       	push   $0xf013b29a
f011f24f:	e8 b1 0f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f254:	e8 6f 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f259:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f25c:	74 17                	je     f011f275 <test_kmalloc_worstfit+0xbac>
f011f25e:	83 ec 04             	sub    $0x4,%esp
f011f261:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f266:	68 65 04 00 00       	push   $0x465
f011f26b:	68 9a b2 13 f0       	push   $0xf013b29a
f011f270:	e8 90 0f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f275:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f278:	e8 20 d9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f27d:	29 c3                	sub    %eax,%ebx
f011f27f:	89 d8                	mov    %ebx,%eax
f011f281:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f286:	74 17                	je     f011f29f <test_kmalloc_worstfit+0xbd6>
f011f288:	83 ec 04             	sub    $0x4,%esp
f011f28b:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f290:	68 66 04 00 00       	push   $0x466
f011f295:	68 9a b2 13 f0       	push   $0xf013b29a
f011f29a:	e8 66 0f fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f29f:	ff 45 e8             	incl   -0x18(%ebp)
f011f2a2:	83 ec 08             	sub    $0x8,%esp
f011f2a5:	ff 75 e8             	pushl  -0x18(%ebp)
f011f2a8:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f2ad:	e8 5c 1a fe ff       	call   f0100d0e <cprintf>
f011f2b2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f2b5:	e8 e3 d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f2ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f2bd:	e8 06 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f2c5:	83 ec 0c             	sub    $0xc,%esp
f011f2c8:	68 00 00 50 00       	push   $0x500000
f011f2cd:	e8 b3 85 fe ff       	call   f0107885 <kmalloc>
f011f2d2:	83 c4 10             	add    $0x10,%esp
f011f2d5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f2db:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f2e2:	10 00 00 
f011f2e5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f2eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f2f0:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f2f6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f2fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f301:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f307:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f30d:	29 d0                	sub    %edx,%eax
f011f30f:	89 c1                	mov    %eax,%ecx
f011f311:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f318:	10 00 00 
f011f31b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f320:	0f b6 d0             	movzbl %al,%edx
f011f323:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f329:	01 d0                	add    %edx,%eax
f011f32b:	48                   	dec    %eax
f011f32c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f332:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f338:	ba 00 00 00 00       	mov    $0x0,%edx
f011f33d:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f343:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f349:	29 d0                	sub    %edx,%eax
f011f34b:	01 c1                	add    %eax,%ecx
f011f34d:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f354:	10 00 00 
f011f357:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f35c:	0f b6 c0             	movzbl %al,%eax
f011f35f:	c1 e0 04             	shl    $0x4,%eax
f011f362:	89 c2                	mov    %eax,%edx
f011f364:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f36a:	01 d0                	add    %edx,%eax
f011f36c:	48                   	dec    %eax
f011f36d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f373:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f379:	ba 00 00 00 00       	mov    $0x0,%edx
f011f37e:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f384:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f38a:	29 d0                	sub    %edx,%eax
f011f38c:	01 c8                	add    %ecx,%eax
f011f38e:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f394:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f39a:	39 c2                	cmp    %eax,%edx
f011f39c:	74 17                	je     f011f3b5 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f39e:	83 ec 04             	sub    $0x4,%esp
f011f3a1:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f3a6:	68 6d 04 00 00       	push   $0x46d
f011f3ab:	68 9a b2 13 f0       	push   $0xf013b29a
f011f3b0:	e8 50 0e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3b5:	e8 0e 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f3ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3bd:	74 17                	je     f011f3d6 <test_kmalloc_worstfit+0xd0d>
f011f3bf:	83 ec 04             	sub    $0x4,%esp
f011f3c2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f3c7:	68 6e 04 00 00       	push   $0x46e
f011f3cc:	68 9a b2 13 f0       	push   $0xf013b29a
f011f3d1:	e8 2f 0e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f3d6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f3d9:	e8 bf d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f3de:	29 c3                	sub    %eax,%ebx
f011f3e0:	89 d8                	mov    %ebx,%eax
f011f3e2:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f3e7:	74 17                	je     f011f400 <test_kmalloc_worstfit+0xd37>
f011f3e9:	83 ec 04             	sub    $0x4,%esp
f011f3ec:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f3f1:	68 6f 04 00 00       	push   $0x46f
f011f3f6:	68 9a b2 13 f0       	push   $0xf013b29a
f011f3fb:	e8 05 0e fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f400:	ff 45 e8             	incl   -0x18(%ebp)
f011f403:	83 ec 08             	sub    $0x8,%esp
f011f406:	ff 75 e8             	pushl  -0x18(%ebp)
f011f409:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f40e:	e8 fb 18 fe ff       	call   f0100d0e <cprintf>
f011f413:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f416:	e8 82 d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f41b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f41e:	e8 a5 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f423:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f426:	83 ec 0c             	sub    $0xc,%esp
f011f429:	68 00 00 40 00       	push   $0x400000
f011f42e:	e8 52 84 fe ff       	call   f0107885 <kmalloc>
f011f433:	83 c4 10             	add    $0x10,%esp
f011f436:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f43c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f443:	10 00 00 
f011f446:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f44c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f451:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f457:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f45d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f462:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f468:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f46e:	29 d0                	sub    %edx,%eax
f011f470:	89 c1                	mov    %eax,%ecx
f011f472:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f479:	10 00 00 
f011f47c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f481:	0f b6 d0             	movzbl %al,%edx
f011f484:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f48a:	01 d0                	add    %edx,%eax
f011f48c:	48                   	dec    %eax
f011f48d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f493:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f499:	ba 00 00 00 00       	mov    $0x0,%edx
f011f49e:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f4a4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f4aa:	29 d0                	sub    %edx,%eax
f011f4ac:	01 c1                	add    %eax,%ecx
f011f4ae:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f4b5:	10 00 00 
f011f4b8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f4bd:	0f b6 c0             	movzbl %al,%eax
f011f4c0:	c1 e0 04             	shl    $0x4,%eax
f011f4c3:	89 c2                	mov    %eax,%edx
f011f4c5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f4cb:	01 d0                	add    %edx,%eax
f011f4cd:	48                   	dec    %eax
f011f4ce:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f4d4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f4da:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4df:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f4e5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f4eb:	29 d0                	sub    %edx,%eax
f011f4ed:	01 c8                	add    %ecx,%eax
f011f4ef:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f4f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f4fb:	39 c2                	cmp    %eax,%edx
f011f4fd:	74 17                	je     f011f516 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f4ff:	83 ec 04             	sub    $0x4,%esp
f011f502:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f507:	68 76 04 00 00       	push   $0x476
f011f50c:	68 9a b2 13 f0       	push   $0xf013b29a
f011f511:	e8 ef 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f516:	e8 ad 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f51b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f51e:	74 17                	je     f011f537 <test_kmalloc_worstfit+0xe6e>
f011f520:	83 ec 04             	sub    $0x4,%esp
f011f523:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f528:	68 77 04 00 00       	push   $0x477
f011f52d:	68 9a b2 13 f0       	push   $0xf013b29a
f011f532:	e8 ce 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f537:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f53a:	e8 5e d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f53f:	29 c3                	sub    %eax,%ebx
f011f541:	89 d8                	mov    %ebx,%eax
f011f543:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f548:	74 17                	je     f011f561 <test_kmalloc_worstfit+0xe98>
f011f54a:	83 ec 04             	sub    $0x4,%esp
f011f54d:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f552:	68 78 04 00 00       	push   $0x478
f011f557:	68 9a b2 13 f0       	push   $0xf013b29a
f011f55c:	e8 a4 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f561:	ff 45 e8             	incl   -0x18(%ebp)
f011f564:	83 ec 08             	sub    $0x8,%esp
f011f567:	ff 75 e8             	pushl  -0x18(%ebp)
f011f56a:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f56f:	e8 9a 17 fe ff       	call   f0100d0e <cprintf>
f011f574:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f577:	e8 21 d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f57c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f57f:	e8 44 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f584:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f587:	83 ec 0c             	sub    $0xc,%esp
f011f58a:	68 00 00 20 00       	push   $0x200000
f011f58f:	e8 f1 82 fe ff       	call   f0107885 <kmalloc>
f011f594:	83 c4 10             	add    $0x10,%esp
f011f597:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f59d:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f5a4:	10 00 00 
f011f5a7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f5ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f5b2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f5b8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f5be:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5c3:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f5c9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f5cf:	29 d0                	sub    %edx,%eax
f011f5d1:	89 c1                	mov    %eax,%ecx
f011f5d3:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f5da:	10 00 00 
f011f5dd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f5e2:	0f b6 d0             	movzbl %al,%edx
f011f5e5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f5eb:	01 d0                	add    %edx,%eax
f011f5ed:	48                   	dec    %eax
f011f5ee:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f5f4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f5fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5ff:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f605:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f60b:	29 d0                	sub    %edx,%eax
f011f60d:	01 c1                	add    %eax,%ecx
f011f60f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f616:	10 00 00 
f011f619:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f61e:	0f b6 c0             	movzbl %al,%eax
f011f621:	c1 e0 04             	shl    $0x4,%eax
f011f624:	89 c2                	mov    %eax,%edx
f011f626:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f62c:	01 d0                	add    %edx,%eax
f011f62e:	48                   	dec    %eax
f011f62f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f635:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f63b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f640:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f646:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f64c:	29 d0                	sub    %edx,%eax
f011f64e:	01 c8                	add    %ecx,%eax
f011f650:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f656:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f65c:	39 c2                	cmp    %eax,%edx
f011f65e:	74 17                	je     f011f677 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f660:	83 ec 04             	sub    $0x4,%esp
f011f663:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f668:	68 7f 04 00 00       	push   $0x47f
f011f66d:	68 9a b2 13 f0       	push   $0xf013b29a
f011f672:	e8 8e 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f677:	e8 4c 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f67c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f67f:	74 17                	je     f011f698 <test_kmalloc_worstfit+0xfcf>
f011f681:	83 ec 04             	sub    $0x4,%esp
f011f684:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f689:	68 80 04 00 00       	push   $0x480
f011f68e:	68 9a b2 13 f0       	push   $0xf013b29a
f011f693:	e8 6d 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f698:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f69b:	e8 fd d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f6a0:	29 c3                	sub    %eax,%ebx
f011f6a2:	89 d8                	mov    %ebx,%eax
f011f6a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f6a9:	74 17                	je     f011f6c2 <test_kmalloc_worstfit+0xff9>
f011f6ab:	83 ec 04             	sub    $0x4,%esp
f011f6ae:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f6b3:	68 81 04 00 00       	push   $0x481
f011f6b8:	68 9a b2 13 f0       	push   $0xf013b29a
f011f6bd:	e8 43 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f6c2:	ff 45 e8             	incl   -0x18(%ebp)
f011f6c5:	83 ec 08             	sub    $0x8,%esp
f011f6c8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f6cb:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f6d0:	e8 39 16 fe ff       	call   f0100d0e <cprintf>
f011f6d5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f6d8:	e8 c0 d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f6dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f6e0:	e8 e3 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f6e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f6e8:	83 ec 0c             	sub    $0xc,%esp
f011f6eb:	68 00 00 18 00       	push   $0x180000
f011f6f0:	e8 90 81 fe ff       	call   f0107885 <kmalloc>
f011f6f5:	83 c4 10             	add    $0x10,%esp
f011f6f8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f6fe:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f705:	10 00 00 
f011f708:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f70e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f713:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f719:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f71f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f724:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f72a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f730:	29 d0                	sub    %edx,%eax
f011f732:	89 c1                	mov    %eax,%ecx
f011f734:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f73b:	10 00 00 
f011f73e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f743:	0f b6 d0             	movzbl %al,%edx
f011f746:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f74c:	01 d0                	add    %edx,%eax
f011f74e:	48                   	dec    %eax
f011f74f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f755:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f75b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f760:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f766:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f76c:	29 d0                	sub    %edx,%eax
f011f76e:	01 c1                	add    %eax,%ecx
f011f770:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f777:	10 00 00 
f011f77a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f77f:	0f b6 c0             	movzbl %al,%eax
f011f782:	c1 e0 04             	shl    $0x4,%eax
f011f785:	89 c2                	mov    %eax,%edx
f011f787:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f78d:	01 d0                	add    %edx,%eax
f011f78f:	48                   	dec    %eax
f011f790:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f796:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f79c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7a1:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f7a7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f7ad:	29 d0                	sub    %edx,%eax
f011f7af:	01 c8                	add    %ecx,%eax
f011f7b1:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f7b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f7bd:	39 c2                	cmp    %eax,%edx
f011f7bf:	74 17                	je     f011f7d8 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f7c1:	83 ec 04             	sub    $0x4,%esp
f011f7c4:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f7c9:	68 88 04 00 00       	push   $0x488
f011f7ce:	68 9a b2 13 f0       	push   $0xf013b29a
f011f7d3:	e8 2d 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7d8:	e8 eb 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f7dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f7e0:	74 17                	je     f011f7f9 <test_kmalloc_worstfit+0x1130>
f011f7e2:	83 ec 04             	sub    $0x4,%esp
f011f7e5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f7ea:	68 89 04 00 00       	push   $0x489
f011f7ef:	68 9a b2 13 f0       	push   $0xf013b29a
f011f7f4:	e8 0c 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f7f9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f7fc:	e8 9c d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f801:	29 c3                	sub    %eax,%ebx
f011f803:	89 d8                	mov    %ebx,%eax
f011f805:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f80a:	74 17                	je     f011f823 <test_kmalloc_worstfit+0x115a>
f011f80c:	83 ec 04             	sub    $0x4,%esp
f011f80f:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f814:	68 8a 04 00 00       	push   $0x48a
f011f819:	68 9a b2 13 f0       	push   $0xf013b29a
f011f81e:	e8 e2 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f823:	ff 45 e8             	incl   -0x18(%ebp)
f011f826:	83 ec 08             	sub    $0x8,%esp
f011f829:	ff 75 e8             	pushl  -0x18(%ebp)
f011f82c:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f831:	e8 d8 14 fe ff       	call   f0100d0e <cprintf>
f011f836:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f839:	e8 5f d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f83e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f841:	e8 82 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f846:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f849:	83 ec 0c             	sub    $0xc,%esp
f011f84c:	68 00 00 08 00       	push   $0x80000
f011f851:	e8 2f 80 fe ff       	call   f0107885 <kmalloc>
f011f856:	83 c4 10             	add    $0x10,%esp
f011f859:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f85f:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f866:	10 00 00 
f011f869:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f86f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f874:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f87a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f880:	ba 00 00 00 00       	mov    $0x0,%edx
f011f885:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f88b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f891:	29 d0                	sub    %edx,%eax
f011f893:	89 c1                	mov    %eax,%ecx
f011f895:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f89c:	10 00 00 
f011f89f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f8a4:	0f b6 d0             	movzbl %al,%edx
f011f8a7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f8ad:	01 d0                	add    %edx,%eax
f011f8af:	48                   	dec    %eax
f011f8b0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f8b6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f8bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8c1:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f8c7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f8cd:	29 d0                	sub    %edx,%eax
f011f8cf:	01 c1                	add    %eax,%ecx
f011f8d1:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f8d8:	10 00 00 
f011f8db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f8e0:	0f b6 c0             	movzbl %al,%eax
f011f8e3:	c1 e0 04             	shl    $0x4,%eax
f011f8e6:	89 c2                	mov    %eax,%edx
f011f8e8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f8ee:	01 d0                	add    %edx,%eax
f011f8f0:	48                   	dec    %eax
f011f8f1:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f8f7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f8fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f902:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f908:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f90e:	29 d0                	sub    %edx,%eax
f011f910:	01 c8                	add    %ecx,%eax
f011f912:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f918:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f91e:	39 c2                	cmp    %eax,%edx
f011f920:	74 17                	je     f011f939 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f922:	83 ec 04             	sub    $0x4,%esp
f011f925:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011f92a:	68 91 04 00 00       	push   $0x491
f011f92f:	68 9a b2 13 f0       	push   $0xf013b29a
f011f934:	e8 cc 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f939:	e8 8a 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f93e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f941:	74 17                	je     f011f95a <test_kmalloc_worstfit+0x1291>
f011f943:	83 ec 04             	sub    $0x4,%esp
f011f946:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011f94b:	68 92 04 00 00       	push   $0x492
f011f950:	68 9a b2 13 f0       	push   $0xf013b29a
f011f955:	e8 ab 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f95a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f95d:	e8 3b d2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f962:	29 c3                	sub    %eax,%ebx
f011f964:	89 d8                	mov    %ebx,%eax
f011f966:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f96b:	74 17                	je     f011f984 <test_kmalloc_worstfit+0x12bb>
f011f96d:	83 ec 04             	sub    $0x4,%esp
f011f970:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011f975:	68 93 04 00 00       	push   $0x493
f011f97a:	68 9a b2 13 f0       	push   $0xf013b29a
f011f97f:	e8 81 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f984:	ff 45 e8             	incl   -0x18(%ebp)
f011f987:	83 ec 08             	sub    $0x8,%esp
f011f98a:	ff 75 e8             	pushl  -0x18(%ebp)
f011f98d:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011f992:	e8 77 13 fe ff       	call   f0100d0e <cprintf>
f011f997:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f99a:	e8 fe d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f99f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f9a2:	e8 21 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f9aa:	83 ec 0c             	sub    $0xc,%esp
f011f9ad:	68 00 04 00 00       	push   $0x400
f011f9b2:	e8 ce 7e fe ff       	call   f0107885 <kmalloc>
f011f9b7:	83 c4 10             	add    $0x10,%esp
f011f9ba:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f9c0:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f9c7:	10 00 00 
f011f9ca:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f9d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9d5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f9db:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f9e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9e6:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f9ec:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f9f2:	29 d0                	sub    %edx,%eax
f011f9f4:	89 c1                	mov    %eax,%ecx
f011f9f6:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f9fd:	10 00 00 
f011fa00:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fa05:	0f b6 d0             	movzbl %al,%edx
f011fa08:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fa0e:	01 d0                	add    %edx,%eax
f011fa10:	48                   	dec    %eax
f011fa11:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011fa17:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fa1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa22:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011fa28:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fa2e:	29 d0                	sub    %edx,%eax
f011fa30:	01 c1                	add    %eax,%ecx
f011fa32:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fa39:	10 00 00 
f011fa3c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fa41:	0f b6 c0             	movzbl %al,%eax
f011fa44:	c1 e0 04             	shl    $0x4,%eax
f011fa47:	89 c2                	mov    %eax,%edx
f011fa49:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fa4f:	01 d0                	add    %edx,%eax
f011fa51:	48                   	dec    %eax
f011fa52:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011fa58:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fa5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa63:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fa69:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fa6f:	29 d0                	sub    %edx,%eax
f011fa71:	01 c8                	add    %ecx,%eax
f011fa73:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011fa79:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa7f:	39 c2                	cmp    %eax,%edx
f011fa81:	74 17                	je     f011fa9a <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011fa83:	83 ec 04             	sub    $0x4,%esp
f011fa86:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011fa8b:	68 9a 04 00 00       	push   $0x49a
f011fa90:	68 9a b2 13 f0       	push   $0xf013b29a
f011fa95:	e8 6b 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa9a:	e8 29 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa9f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011faa2:	74 17                	je     f011fabb <test_kmalloc_worstfit+0x13f2>
f011faa4:	83 ec 04             	sub    $0x4,%esp
f011faa7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011faac:	68 9b 04 00 00       	push   $0x49b
f011fab1:	68 9a b2 13 f0       	push   $0xf013b29a
f011fab6:	e8 4a 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fabb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fabe:	e8 da d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fac3:	29 c3                	sub    %eax,%ebx
f011fac5:	89 d8                	mov    %ebx,%eax
f011fac7:	83 f8 01             	cmp    $0x1,%eax
f011faca:	74 17                	je     f011fae3 <test_kmalloc_worstfit+0x141a>
f011facc:	83 ec 04             	sub    $0x4,%esp
f011facf:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011fad4:	68 9c 04 00 00       	push   $0x49c
f011fad9:	68 9a b2 13 f0       	push   $0xf013b29a
f011fade:	e8 22 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fae3:	ff 45 e8             	incl   -0x18(%ebp)
f011fae6:	83 ec 08             	sub    $0x8,%esp
f011fae9:	ff 75 e8             	pushl  -0x18(%ebp)
f011faec:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011faf1:	e8 18 12 fe ff       	call   f0100d0e <cprintf>
f011faf6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011faf9:	e8 9f d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fafe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb01:	e8 c2 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb06:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fb09:	83 ec 0c             	sub    $0xc,%esp
f011fb0c:	68 00 f0 1f 00       	push   $0x1ff000
f011fb11:	e8 6f 7d fe ff       	call   f0107885 <kmalloc>
f011fb16:	83 c4 10             	add    $0x10,%esp
f011fb19:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011fb1f:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011fb26:	10 00 00 
f011fb29:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011fb2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb34:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011fb3a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fb40:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb45:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011fb4b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fb51:	29 d0                	sub    %edx,%eax
f011fb53:	89 c1                	mov    %eax,%ecx
f011fb55:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011fb5c:	10 00 00 
f011fb5f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fb64:	0f b6 d0             	movzbl %al,%edx
f011fb67:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011fb6d:	01 d0                	add    %edx,%eax
f011fb6f:	48                   	dec    %eax
f011fb70:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011fb76:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fb7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb81:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011fb87:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fb8d:	29 d0                	sub    %edx,%eax
f011fb8f:	01 c1                	add    %eax,%ecx
f011fb91:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011fb98:	10 00 00 
f011fb9b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fba0:	0f b6 c0             	movzbl %al,%eax
f011fba3:	c1 e0 04             	shl    $0x4,%eax
f011fba6:	89 c2                	mov    %eax,%edx
f011fba8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011fbae:	01 d0                	add    %edx,%eax
f011fbb0:	48                   	dec    %eax
f011fbb1:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011fbb7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fbbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbc2:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011fbc8:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fbce:	29 d0                	sub    %edx,%eax
f011fbd0:	01 c8                	add    %ecx,%eax
f011fbd2:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011fbd8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fbde:	39 c2                	cmp    %eax,%edx
f011fbe0:	74 17                	je     f011fbf9 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011fbe2:	83 ec 04             	sub    $0x4,%esp
f011fbe5:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011fbea:	68 a3 04 00 00       	push   $0x4a3
f011fbef:	68 9a b2 13 f0       	push   $0xf013b29a
f011fbf4:	e8 0c 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbf9:	e8 ca 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fbfe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc01:	74 17                	je     f011fc1a <test_kmalloc_worstfit+0x1551>
f011fc03:	83 ec 04             	sub    $0x4,%esp
f011fc06:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011fc0b:	68 a4 04 00 00       	push   $0x4a4
f011fc10:	68 9a b2 13 f0       	push   $0xf013b29a
f011fc15:	e8 eb 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fc1a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc1d:	e8 7b cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc22:	29 c3                	sub    %eax,%ebx
f011fc24:	89 d8                	mov    %ebx,%eax
f011fc26:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011fc2b:	74 17                	je     f011fc44 <test_kmalloc_worstfit+0x157b>
f011fc2d:	83 ec 04             	sub    $0x4,%esp
f011fc30:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011fc35:	68 a5 04 00 00       	push   $0x4a5
f011fc3a:	68 9a b2 13 f0       	push   $0xf013b29a
f011fc3f:	e8 c1 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fc44:	ff 45 e8             	incl   -0x18(%ebp)
f011fc47:	83 ec 08             	sub    $0x8,%esp
f011fc4a:	ff 75 e8             	pushl  -0x18(%ebp)
f011fc4d:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011fc52:	e8 b7 10 fe ff       	call   f0100d0e <cprintf>
f011fc57:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011fc5a:	e8 3e cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fc62:	e8 61 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011fc6a:	83 ec 0c             	sub    $0xc,%esp
f011fc6d:	68 00 00 40 00       	push   $0x400000
f011fc72:	e8 0e 7c fe ff       	call   f0107885 <kmalloc>
f011fc77:	83 c4 10             	add    $0x10,%esp
f011fc7a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011fc80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc86:	85 c0                	test   %eax,%eax
f011fc88:	74 17                	je     f011fca1 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011fc8a:	83 ec 04             	sub    $0x4,%esp
f011fc8d:	68 b4 b9 13 f0       	push   $0xf013b9b4
f011fc92:	68 ad 04 00 00       	push   $0x4ad
f011fc97:	68 9a b2 13 f0       	push   $0xf013b29a
f011fc9c:	e8 64 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fca1:	e8 22 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fca6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fca9:	74 17                	je     f011fcc2 <test_kmalloc_worstfit+0x15f9>
f011fcab:	83 ec 04             	sub    $0x4,%esp
f011fcae:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011fcb3:	68 ae 04 00 00       	push   $0x4ae
f011fcb8:	68 9a b2 13 f0       	push   $0xf013b29a
f011fcbd:	e8 43 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011fcc2:	e8 d6 ce fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fcc7:	89 c2                	mov    %eax,%edx
f011fcc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fccc:	39 c2                	cmp    %eax,%edx
f011fcce:	74 17                	je     f011fce7 <test_kmalloc_worstfit+0x161e>
f011fcd0:	83 ec 04             	sub    $0x4,%esp
f011fcd3:	68 d2 b7 13 f0       	push   $0xf013b7d2
f011fcd8:	68 af 04 00 00       	push   $0x4af
f011fcdd:	68 9a b2 13 f0       	push   $0xf013b29a
f011fce2:	e8 1e 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fce7:	ff 45 e8             	incl   -0x18(%ebp)
f011fcea:	83 ec 08             	sub    $0x8,%esp
f011fced:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcf0:	68 d4 b9 13 f0       	push   $0xf013b9d4
f011fcf5:	e8 14 10 fe ff       	call   f0100d0e <cprintf>
f011fcfa:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011fcfd:	83 ec 0c             	sub    $0xc,%esp
f011fd00:	68 e8 b9 13 f0       	push   $0xf013b9e8
f011fd05:	e8 04 10 fe ff       	call   f0100d0e <cprintf>
f011fd0a:	83 c4 10             	add    $0x10,%esp


	return 1;
f011fd0d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fd12:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011fd15:	5b                   	pop    %ebx
f011fd16:	5f                   	pop    %edi
f011fd17:	5d                   	pop    %ebp
f011fd18:	c3                   	ret    

f011fd19 <test_kfree>:

int test_kfree()
{
f011fd19:	55                   	push   %ebp
f011fd1a:	89 e5                	mov    %esp,%ebp
f011fd1c:	57                   	push   %edi
f011fd1d:	53                   	push   %ebx
f011fd1e:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011fd24:	83 ec 0c             	sub    $0xc,%esp
f011fd27:	68 dc b1 13 f0       	push   $0xf013b1dc
f011fd2c:	e8 dd 0f fe ff       	call   f0100d0e <cprintf>
f011fd31:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011fd34:	83 ec 0c             	sub    $0xc,%esp
f011fd37:	68 0c b2 13 f0       	push   $0xf013b20c
f011fd3c:	e8 cd 0f fe ff       	call   f0100d0e <cprintf>
f011fd41:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011fd44:	83 ec 0c             	sub    $0xc,%esp
f011fd47:	68 dc b1 13 f0       	push   $0xf013b1dc
f011fd4c:	e8 bd 0f fe ff       	call   f0100d0e <cprintf>
f011fd51:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011fd54:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011fd58:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011fd5c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011fd62:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011fd68:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011fd6f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011fd76:	e8 22 ce fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fd7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011fd7e:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011fd84:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fd89:	b8 00 00 00 00       	mov    $0x0,%eax
f011fd8e:	89 d7                	mov    %edx,%edi
f011fd90:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011fd92:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011fd98:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fd9d:	b8 00 00 00 00       	mov    $0x0,%eax
f011fda2:	89 d7                	mov    %edx,%edi
f011fda4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011fda6:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011fdac:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fdb1:	b8 00 00 00 00       	mov    $0x0,%eax
f011fdb6:	89 d7                	mov    %edx,%edi
f011fdb8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fdba:	e8 de cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fdbf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdc2:	e8 01 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fdc7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011fdca:	83 ec 0c             	sub    $0xc,%esp
f011fdcd:	68 00 fc 1f 00       	push   $0x1ffc00
f011fdd2:	e8 ae 7a fe ff       	call   f0107885 <kmalloc>
f011fdd7:	83 c4 10             	add    $0x10,%esp
f011fdda:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fde0:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fde6:	89 c1                	mov    %eax,%ecx
f011fde8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011fdef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011fdf2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fdf7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011fdfa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fdfd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe02:	f7 75 c8             	divl   -0x38(%ebp)
f011fe05:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fe08:	29 d0                	sub    %edx,%eax
f011fe0a:	89 c3                	mov    %eax,%ebx
f011fe0c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011fe13:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fe18:	0f b6 d0             	movzbl %al,%edx
f011fe1b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011fe1e:	01 d0                	add    %edx,%eax
f011fe20:	48                   	dec    %eax
f011fe21:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011fe24:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fe27:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe2c:	f7 75 c0             	divl   -0x40(%ebp)
f011fe2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fe32:	29 d0                	sub    %edx,%eax
f011fe34:	01 c3                	add    %eax,%ebx
f011fe36:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011fe3d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fe42:	0f b6 c0             	movzbl %al,%eax
f011fe45:	c1 e0 04             	shl    $0x4,%eax
f011fe48:	89 c2                	mov    %eax,%edx
f011fe4a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fe4d:	01 d0                	add    %edx,%eax
f011fe4f:	48                   	dec    %eax
f011fe50:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011fe53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fe56:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe5b:	f7 75 b8             	divl   -0x48(%ebp)
f011fe5e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fe61:	29 d0                	sub    %edx,%eax
f011fe63:	01 d8                	add    %ebx,%eax
f011fe65:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011fe6a:	39 c1                	cmp    %eax,%ecx
f011fe6c:	74 17                	je     f011fe85 <test_kfree+0x16c>
f011fe6e:	83 ec 04             	sub    $0x4,%esp
f011fe71:	68 80 b3 13 f0       	push   $0xf013b380
f011fe76:	68 d7 04 00 00       	push   $0x4d7
f011fe7b:	68 9a b2 13 f0       	push   $0xf013b29a
f011fe80:	e8 80 03 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe85:	e8 3e 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe8a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe8d:	74 17                	je     f011fea6 <test_kfree+0x18d>
f011fe8f:	83 ec 04             	sub    $0x4,%esp
f011fe92:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011fe97:	68 d8 04 00 00       	push   $0x4d8
f011fe9c:	68 9a b2 13 f0       	push   $0xf013b29a
f011fea1:	e8 5f 03 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fea6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fea9:	e8 ef cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011feae:	29 c3                	sub    %eax,%ebx
f011feb0:	89 d8                	mov    %ebx,%eax
f011feb2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011feb7:	74 17                	je     f011fed0 <test_kfree+0x1b7>
f011feb9:	83 ec 04             	sub    $0x4,%esp
f011febc:	68 1c b3 13 f0       	push   $0xf013b31c
f011fec1:	68 d9 04 00 00       	push   $0x4d9
f011fec6:	68 9a b2 13 f0       	push   $0xf013b29a
f011fecb:	e8 35 03 fe ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fed0:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011fed7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011feda:	e8 be cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fedf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fee2:	e8 e1 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fee7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011feea:	83 ec 0c             	sub    $0xc,%esp
f011feed:	68 00 fc 1f 00       	push   $0x1ffc00
f011fef2:	e8 8e 79 fe ff       	call   f0107885 <kmalloc>
f011fef7:	83 c4 10             	add    $0x10,%esp
f011fefa:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff00:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011ff06:	89 c1                	mov    %eax,%ecx
f011ff08:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011ff0f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ff12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff17:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011ff1a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ff1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff22:	f7 75 b0             	divl   -0x50(%ebp)
f011ff25:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ff28:	29 d0                	sub    %edx,%eax
f011ff2a:	89 c3                	mov    %eax,%ebx
f011ff2c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011ff33:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ff38:	0f b6 d0             	movzbl %al,%edx
f011ff3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ff3e:	01 d0                	add    %edx,%eax
f011ff40:	48                   	dec    %eax
f011ff41:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011ff44:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ff47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff4c:	f7 75 a8             	divl   -0x58(%ebp)
f011ff4f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ff52:	29 d0                	sub    %edx,%eax
f011ff54:	01 c3                	add    %eax,%ebx
f011ff56:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011ff5d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ff62:	0f b6 c0             	movzbl %al,%eax
f011ff65:	c1 e0 04             	shl    $0x4,%eax
f011ff68:	89 c2                	mov    %eax,%edx
f011ff6a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ff6d:	01 d0                	add    %edx,%eax
f011ff6f:	48                   	dec    %eax
f011ff70:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011ff73:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ff76:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff7b:	f7 75 a0             	divl   -0x60(%ebp)
f011ff7e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ff81:	29 d0                	sub    %edx,%eax
f011ff83:	01 d8                	add    %ebx,%eax
f011ff85:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011ff8a:	39 c1                	cmp    %eax,%ecx
f011ff8c:	74 17                	je     f011ffa5 <test_kfree+0x28c>
f011ff8e:	83 ec 04             	sub    $0x4,%esp
f011ff91:	68 80 b3 13 f0       	push   $0xf013b380
f011ff96:	68 e0 04 00 00       	push   $0x4e0
f011ff9b:	68 9a b2 13 f0       	push   $0xf013b29a
f011ffa0:	e8 60 02 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffa5:	e8 1e 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ffaa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ffad:	74 17                	je     f011ffc6 <test_kfree+0x2ad>
f011ffaf:	83 ec 04             	sub    $0x4,%esp
f011ffb2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f011ffb7:	68 e1 04 00 00       	push   $0x4e1
f011ffbc:	68 9a b2 13 f0       	push   $0xf013b29a
f011ffc1:	e8 3f 02 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ffc6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ffc9:	e8 cf cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ffce:	29 c3                	sub    %eax,%ebx
f011ffd0:	89 d8                	mov    %ebx,%eax
f011ffd2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ffd7:	74 17                	je     f011fff0 <test_kfree+0x2d7>
f011ffd9:	83 ec 04             	sub    $0x4,%esp
f011ffdc:	68 1c b3 13 f0       	push   $0xf013b31c
f011ffe1:	68 e2 04 00 00       	push   $0x4e2
f011ffe6:	68 9a b2 13 f0       	push   $0xf013b29a
f011ffeb:	e8 15 02 fe ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fff0:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011fff7:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fffa:	e8 9e cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ffff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120002:	e8 c1 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120007:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012000a:	83 ec 0c             	sub    $0xc,%esp
f012000d:	68 00 08 00 00       	push   $0x800
f0120012:	e8 6e 78 fe ff       	call   f0107885 <kmalloc>
f0120017:	83 c4 10             	add    $0x10,%esp
f012001a:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120020:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120026:	89 c1                	mov    %eax,%ecx
f0120028:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012002f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120032:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120037:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012003a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012003d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120042:	f7 75 98             	divl   -0x68(%ebp)
f0120045:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120048:	29 d0                	sub    %edx,%eax
f012004a:	89 c3                	mov    %eax,%ebx
f012004c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0120053:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120058:	0f b6 d0             	movzbl %al,%edx
f012005b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012005e:	01 d0                	add    %edx,%eax
f0120060:	48                   	dec    %eax
f0120061:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0120064:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120067:	ba 00 00 00 00       	mov    $0x0,%edx
f012006c:	f7 75 90             	divl   -0x70(%ebp)
f012006f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120072:	29 d0                	sub    %edx,%eax
f0120074:	01 c3                	add    %eax,%ebx
f0120076:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012007d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120082:	0f b6 c0             	movzbl %al,%eax
f0120085:	c1 e0 04             	shl    $0x4,%eax
f0120088:	89 c2                	mov    %eax,%edx
f012008a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012008d:	01 d0                	add    %edx,%eax
f012008f:	48                   	dec    %eax
f0120090:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120093:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120096:	ba 00 00 00 00       	mov    $0x0,%edx
f012009b:	f7 75 88             	divl   -0x78(%ebp)
f012009e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01200a1:	29 d0                	sub    %edx,%eax
f01200a3:	01 d8                	add    %ebx,%eax
f01200a5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01200aa:	39 c1                	cmp    %eax,%ecx
f01200ac:	74 17                	je     f01200c5 <test_kfree+0x3ac>
f01200ae:	83 ec 04             	sub    $0x4,%esp
f01200b1:	68 80 b3 13 f0       	push   $0xf013b380
f01200b6:	68 e9 04 00 00       	push   $0x4e9
f01200bb:	68 9a b2 13 f0       	push   $0xf013b29a
f01200c0:	e8 40 01 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200c5:	e8 fe 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01200ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200cd:	74 17                	je     f01200e6 <test_kfree+0x3cd>
f01200cf:	83 ec 04             	sub    $0x4,%esp
f01200d2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01200d7:	68 ea 04 00 00       	push   $0x4ea
f01200dc:	68 9a b2 13 f0       	push   $0xf013b29a
f01200e1:	e8 1f 01 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01200e6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200e9:	e8 af ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01200ee:	29 c3                	sub    %eax,%ebx
f01200f0:	89 d8                	mov    %ebx,%eax
f01200f2:	83 f8 01             	cmp    $0x1,%eax
f01200f5:	74 17                	je     f012010e <test_kfree+0x3f5>
f01200f7:	83 ec 04             	sub    $0x4,%esp
f01200fa:	68 1c b3 13 f0       	push   $0xf013b31c
f01200ff:	68 eb 04 00 00       	push   $0x4eb
f0120104:	68 9a b2 13 f0       	push   $0xf013b29a
f0120109:	e8 f7 00 fe ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012010e:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120115:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120118:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012011e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0120121:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120128:	eb 0e                	jmp    f0120138 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f012012a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012012d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120130:	01 d0                	add    %edx,%eax
f0120132:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120135:	ff 45 f4             	incl   -0xc(%ebp)
f0120138:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012013e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120141:	7f e7                	jg     f012012a <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120143:	e8 55 ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120148:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012014b:	e8 78 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120150:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120153:	83 ec 0c             	sub    $0xc,%esp
f0120156:	68 00 08 00 00       	push   $0x800
f012015b:	e8 25 77 fe ff       	call   f0107885 <kmalloc>
f0120160:	83 c4 10             	add    $0x10,%esp
f0120163:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120169:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012016f:	89 c1                	mov    %eax,%ecx
f0120171:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120178:	10 00 00 
f012017b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120181:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120186:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012018c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120192:	ba 00 00 00 00       	mov    $0x0,%edx
f0120197:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012019d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01201a3:	29 d0                	sub    %edx,%eax
f01201a5:	89 c3                	mov    %eax,%ebx
f01201a7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01201ae:	10 00 00 
f01201b1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01201b6:	0f b6 d0             	movzbl %al,%edx
f01201b9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01201bf:	01 d0                	add    %edx,%eax
f01201c1:	48                   	dec    %eax
f01201c2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01201c8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01201ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01201d3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01201d9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01201df:	29 d0                	sub    %edx,%eax
f01201e1:	01 c3                	add    %eax,%ebx
f01201e3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01201ea:	10 00 00 
f01201ed:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01201f2:	0f b6 c0             	movzbl %al,%eax
f01201f5:	c1 e0 04             	shl    $0x4,%eax
f01201f8:	89 c2                	mov    %eax,%edx
f01201fa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120200:	01 d0                	add    %edx,%eax
f0120202:	48                   	dec    %eax
f0120203:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120209:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012020f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120214:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012021a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120220:	29 d0                	sub    %edx,%eax
f0120222:	01 d8                	add    %ebx,%eax
f0120224:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120229:	39 c1                	cmp    %eax,%ecx
f012022b:	74 17                	je     f0120244 <test_kfree+0x52b>
f012022d:	83 ec 04             	sub    $0x4,%esp
f0120230:	68 80 b3 13 f0       	push   $0xf013b380
f0120235:	68 f7 04 00 00       	push   $0x4f7
f012023a:	68 9a b2 13 f0       	push   $0xf013b29a
f012023f:	e8 c1 ff fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120244:	e8 7f 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120249:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012024c:	74 17                	je     f0120265 <test_kfree+0x54c>
f012024e:	83 ec 04             	sub    $0x4,%esp
f0120251:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0120256:	68 f8 04 00 00       	push   $0x4f8
f012025b:	68 9a b2 13 f0       	push   $0xf013b29a
f0120260:	e8 a0 ff fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120265:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120268:	e8 30 c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012026d:	29 c3                	sub    %eax,%ebx
f012026f:	89 d8                	mov    %ebx,%eax
f0120271:	83 f8 01             	cmp    $0x1,%eax
f0120274:	74 17                	je     f012028d <test_kfree+0x574>
f0120276:	83 ec 04             	sub    $0x4,%esp
f0120279:	68 1c b3 13 f0       	push   $0xf013b31c
f012027e:	68 f9 04 00 00       	push   $0x4f9
f0120283:	68 9a b2 13 f0       	push   $0xf013b29a
f0120288:	e8 78 ff fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012028d:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120294:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120297:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012029d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01202a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202a7:	eb 0e                	jmp    f01202b7 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f01202a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01202ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01202af:	01 d0                	add    %edx,%eax
f01202b1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01202b4:	ff 45 f4             	incl   -0xc(%ebp)
f01202b7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01202bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202c0:	7f e7                	jg     f01202a9 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01202c2:	e8 d6 c8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01202c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202ca:	e8 f9 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01202cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01202d2:	83 ec 0c             	sub    $0xc,%esp
f01202d5:	68 00 1c 00 00       	push   $0x1c00
f01202da:	e8 a6 75 fe ff       	call   f0107885 <kmalloc>
f01202df:	83 c4 10             	add    $0x10,%esp
f01202e2:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202e8:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01202ee:	89 c1                	mov    %eax,%ecx
f01202f0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01202f7:	10 00 00 
f01202fa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120300:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120305:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012030b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120311:	ba 00 00 00 00       	mov    $0x0,%edx
f0120316:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012031c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120322:	29 d0                	sub    %edx,%eax
f0120324:	89 c3                	mov    %eax,%ebx
f0120326:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012032d:	10 00 00 
f0120330:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120335:	0f b6 d0             	movzbl %al,%edx
f0120338:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012033e:	01 d0                	add    %edx,%eax
f0120340:	48                   	dec    %eax
f0120341:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120347:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012034d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120352:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120358:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012035e:	29 d0                	sub    %edx,%eax
f0120360:	01 c3                	add    %eax,%ebx
f0120362:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120369:	10 00 00 
f012036c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120371:	0f b6 c0             	movzbl %al,%eax
f0120374:	c1 e0 04             	shl    $0x4,%eax
f0120377:	89 c2                	mov    %eax,%edx
f0120379:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012037f:	01 d0                	add    %edx,%eax
f0120381:	48                   	dec    %eax
f0120382:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120388:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012038e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120393:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120399:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012039f:	29 d0                	sub    %edx,%eax
f01203a1:	01 d8                	add    %ebx,%eax
f01203a3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01203a8:	39 c1                	cmp    %eax,%ecx
f01203aa:	74 17                	je     f01203c3 <test_kfree+0x6aa>
f01203ac:	83 ec 04             	sub    $0x4,%esp
f01203af:	68 80 b3 13 f0       	push   $0xf013b380
f01203b4:	68 05 05 00 00       	push   $0x505
f01203b9:	68 9a b2 13 f0       	push   $0xf013b29a
f01203be:	e8 42 fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203c3:	e8 00 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01203c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203cb:	74 17                	je     f01203e4 <test_kfree+0x6cb>
f01203cd:	83 ec 04             	sub    $0x4,%esp
f01203d0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01203d5:	68 06 05 00 00       	push   $0x506
f01203da:	68 9a b2 13 f0       	push   $0xf013b29a
f01203df:	e8 21 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01203e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01203e7:	e8 b1 c7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01203ec:	29 c3                	sub    %eax,%ebx
f01203ee:	89 d8                	mov    %ebx,%eax
f01203f0:	83 f8 02             	cmp    $0x2,%eax
f01203f3:	74 17                	je     f012040c <test_kfree+0x6f3>
f01203f5:	83 ec 04             	sub    $0x4,%esp
f01203f8:	68 1c b3 13 f0       	push   $0xf013b31c
f01203fd:	68 07 05 00 00       	push   $0x507
f0120402:	68 9a b2 13 f0       	push   $0xf013b29a
f0120407:	e8 f9 fd fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012040c:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120413:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120416:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012041c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012041f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120426:	eb 0e                	jmp    f0120436 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120428:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012042b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012042e:	01 d0                	add    %edx,%eax
f0120430:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120433:	ff 45 f4             	incl   -0xc(%ebp)
f0120436:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012043c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012043f:	7f e7                	jg     f0120428 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120441:	e8 57 c7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120446:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120449:	e8 7a 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012044e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120451:	83 ec 0c             	sub    $0xc,%esp
f0120454:	68 00 fc 2f 00       	push   $0x2ffc00
f0120459:	e8 27 74 fe ff       	call   f0107885 <kmalloc>
f012045e:	83 c4 10             	add    $0x10,%esp
f0120461:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120467:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012046d:	89 c1                	mov    %eax,%ecx
f012046f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120476:	10 00 00 
f0120479:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012047f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120484:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012048a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120490:	ba 00 00 00 00       	mov    $0x0,%edx
f0120495:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012049b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01204a1:	29 d0                	sub    %edx,%eax
f01204a3:	89 c3                	mov    %eax,%ebx
f01204a5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01204ac:	10 00 00 
f01204af:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01204b4:	0f b6 d0             	movzbl %al,%edx
f01204b7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01204bd:	01 d0                	add    %edx,%eax
f01204bf:	48                   	dec    %eax
f01204c0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01204c6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01204cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01204d1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01204d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01204dd:	29 d0                	sub    %edx,%eax
f01204df:	01 c3                	add    %eax,%ebx
f01204e1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01204e8:	10 00 00 
f01204eb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01204f0:	0f b6 c0             	movzbl %al,%eax
f01204f3:	c1 e0 04             	shl    $0x4,%eax
f01204f6:	89 c2                	mov    %eax,%edx
f01204f8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01204fe:	01 d0                	add    %edx,%eax
f0120500:	48                   	dec    %eax
f0120501:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120507:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012050d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120512:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120518:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012051e:	29 d0                	sub    %edx,%eax
f0120520:	01 d8                	add    %ebx,%eax
f0120522:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120527:	39 c1                	cmp    %eax,%ecx
f0120529:	74 17                	je     f0120542 <test_kfree+0x829>
f012052b:	83 ec 04             	sub    $0x4,%esp
f012052e:	68 80 b3 13 f0       	push   $0xf013b380
f0120533:	68 13 05 00 00       	push   $0x513
f0120538:	68 9a b2 13 f0       	push   $0xf013b29a
f012053d:	e8 c3 fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120542:	e8 81 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120547:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012054a:	74 17                	je     f0120563 <test_kfree+0x84a>
f012054c:	83 ec 04             	sub    $0x4,%esp
f012054f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0120554:	68 14 05 00 00       	push   $0x514
f0120559:	68 9a b2 13 f0       	push   $0xf013b29a
f012055e:	e8 a2 fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120563:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120566:	e8 32 c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012056b:	29 c3                	sub    %eax,%ebx
f012056d:	89 d8                	mov    %ebx,%eax
f012056f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120574:	74 17                	je     f012058d <test_kfree+0x874>
f0120576:	83 ec 04             	sub    $0x4,%esp
f0120579:	68 1c b3 13 f0       	push   $0xf013b31c
f012057e:	68 15 05 00 00       	push   $0x515
f0120583:	68 9a b2 13 f0       	push   $0xf013b29a
f0120588:	e8 78 fc fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012058d:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120594:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120597:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012059d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01205a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205a7:	eb 0e                	jmp    f01205b7 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f01205a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205af:	01 d0                	add    %edx,%eax
f01205b1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01205b4:	ff 45 f4             	incl   -0xc(%ebp)
f01205b7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01205bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205c0:	7f e7                	jg     f01205a9 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01205c2:	e8 d6 c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01205c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205ca:	e8 f9 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01205d2:	83 ec 0c             	sub    $0xc,%esp
f01205d5:	68 00 fc 5f 00       	push   $0x5ffc00
f01205da:	e8 a6 72 fe ff       	call   f0107885 <kmalloc>
f01205df:	83 c4 10             	add    $0x10,%esp
f01205e2:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205e8:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01205ee:	89 c1                	mov    %eax,%ecx
f01205f0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01205f7:	10 00 00 
f01205fa:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120600:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120605:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012060b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120611:	ba 00 00 00 00       	mov    $0x0,%edx
f0120616:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012061c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120622:	29 d0                	sub    %edx,%eax
f0120624:	89 c3                	mov    %eax,%ebx
f0120626:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012062d:	10 00 00 
f0120630:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120635:	0f b6 d0             	movzbl %al,%edx
f0120638:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012063e:	01 d0                	add    %edx,%eax
f0120640:	48                   	dec    %eax
f0120641:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120647:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012064d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120652:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120658:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012065e:	29 d0                	sub    %edx,%eax
f0120660:	01 c3                	add    %eax,%ebx
f0120662:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120669:	10 00 00 
f012066c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120671:	0f b6 c0             	movzbl %al,%eax
f0120674:	c1 e0 04             	shl    $0x4,%eax
f0120677:	89 c2                	mov    %eax,%edx
f0120679:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012067f:	01 d0                	add    %edx,%eax
f0120681:	48                   	dec    %eax
f0120682:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120688:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012068e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120693:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120699:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012069f:	29 d0                	sub    %edx,%eax
f01206a1:	01 d8                	add    %ebx,%eax
f01206a3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01206a8:	39 c1                	cmp    %eax,%ecx
f01206aa:	74 17                	je     f01206c3 <test_kfree+0x9aa>
f01206ac:	83 ec 04             	sub    $0x4,%esp
f01206af:	68 80 b3 13 f0       	push   $0xf013b380
f01206b4:	68 21 05 00 00       	push   $0x521
f01206b9:	68 9a b2 13 f0       	push   $0xf013b29a
f01206be:	e8 42 fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206c3:	e8 00 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206cb:	74 17                	je     f01206e4 <test_kfree+0x9cb>
f01206cd:	83 ec 04             	sub    $0x4,%esp
f01206d0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01206d5:	68 22 05 00 00       	push   $0x522
f01206da:	68 9a b2 13 f0       	push   $0xf013b29a
f01206df:	e8 21 fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206e7:	e8 b1 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01206ec:	29 c3                	sub    %eax,%ebx
f01206ee:	89 d8                	mov    %ebx,%eax
f01206f0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01206f5:	74 17                	je     f012070e <test_kfree+0x9f5>
f01206f7:	83 ec 04             	sub    $0x4,%esp
f01206fa:	68 1c b3 13 f0       	push   $0xf013b31c
f01206ff:	68 23 05 00 00       	push   $0x523
f0120704:	68 9a b2 13 f0       	push   $0xf013b29a
f0120709:	e8 f7 fa fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012070e:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120715:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120718:	e8 80 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012071d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120720:	e8 a3 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120725:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120728:	83 ec 0c             	sub    $0xc,%esp
f012072b:	68 00 38 00 00       	push   $0x3800
f0120730:	e8 50 71 fe ff       	call   f0107885 <kmalloc>
f0120735:	83 c4 10             	add    $0x10,%esp
f0120738:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012073e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120744:	89 c1                	mov    %eax,%ecx
f0120746:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012074d:	10 00 00 
f0120750:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120756:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012075b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120761:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120767:	ba 00 00 00 00       	mov    $0x0,%edx
f012076c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120772:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120778:	29 d0                	sub    %edx,%eax
f012077a:	89 c3                	mov    %eax,%ebx
f012077c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120783:	10 00 00 
f0120786:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012078b:	0f b6 d0             	movzbl %al,%edx
f012078e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120794:	01 d0                	add    %edx,%eax
f0120796:	48                   	dec    %eax
f0120797:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012079d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01207a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01207a8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01207ae:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01207b4:	29 d0                	sub    %edx,%eax
f01207b6:	01 c3                	add    %eax,%ebx
f01207b8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01207bf:	10 00 00 
f01207c2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01207c7:	0f b6 c0             	movzbl %al,%eax
f01207ca:	c1 e0 04             	shl    $0x4,%eax
f01207cd:	89 c2                	mov    %eax,%edx
f01207cf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01207d5:	01 d0                	add    %edx,%eax
f01207d7:	48                   	dec    %eax
f01207d8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01207de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01207e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01207e9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01207ef:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01207f5:	29 d0                	sub    %edx,%eax
f01207f7:	01 d8                	add    %ebx,%eax
f01207f9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01207fe:	39 c1                	cmp    %eax,%ecx
f0120800:	74 17                	je     f0120819 <test_kfree+0xb00>
f0120802:	83 ec 04             	sub    $0x4,%esp
f0120805:	68 80 b3 13 f0       	push   $0xf013b380
f012080a:	68 2a 05 00 00       	push   $0x52a
f012080f:	68 9a b2 13 f0       	push   $0xf013b29a
f0120814:	e8 ec f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120819:	e8 aa 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012081e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120821:	74 17                	je     f012083a <test_kfree+0xb21>
f0120823:	83 ec 04             	sub    $0x4,%esp
f0120826:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012082b:	68 2b 05 00 00       	push   $0x52b
f0120830:	68 9a b2 13 f0       	push   $0xf013b29a
f0120835:	e8 cb f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012083a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012083d:	e8 5b c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120842:	29 c3                	sub    %eax,%ebx
f0120844:	89 d8                	mov    %ebx,%eax
f0120846:	83 f8 04             	cmp    $0x4,%eax
f0120849:	74 17                	je     f0120862 <test_kfree+0xb49>
f012084b:	83 ec 04             	sub    $0x4,%esp
f012084e:	68 1c b3 13 f0       	push   $0xf013b31c
f0120853:	68 2c 05 00 00       	push   $0x52c
f0120858:	68 9a b2 13 f0       	push   $0xf013b29a
f012085d:	e8 a3 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120862:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120869:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012086c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120872:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120875:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012087c:	eb 0e                	jmp    f012088c <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f012087e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120881:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120884:	01 d0                	add    %edx,%eax
f0120886:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120889:	ff 45 f4             	incl   -0xc(%ebp)
f012088c:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120892:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120895:	7f e7                	jg     f012087e <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120897:	e8 01 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012089c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01208a2:	e8 21 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208a7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01208ad:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01208b3:	83 ec 0c             	sub    $0xc,%esp
f01208b6:	50                   	push   %eax
f01208b7:	e8 94 70 fe ff       	call   f0107950 <kfree>
f01208bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208bf:	e8 04 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208c4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01208ca:	74 17                	je     f01208e3 <test_kfree+0xbca>
f01208cc:	83 ec 04             	sub    $0x4,%esp
f01208cf:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01208d4:	68 3b 05 00 00       	push   $0x53b
f01208d9:	68 9a b2 13 f0       	push   $0xf013b29a
f01208de:	e8 22 f9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01208e3:	e8 b5 c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01208e8:	89 c2                	mov    %eax,%edx
f01208ea:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01208f0:	29 c2                	sub    %eax,%edx
f01208f2:	89 d0                	mov    %edx,%eax
f01208f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01208f9:	74 17                	je     f0120912 <test_kfree+0xbf9>
f01208fb:	83 ec 04             	sub    $0x4,%esp
f01208fe:	68 24 ba 13 f0       	push   $0xf013ba24
f0120903:	68 3c 05 00 00       	push   $0x53c
f0120908:	68 9a b2 13 f0       	push   $0xf013b29a
f012090d:	e8 f3 f8 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120912:	e8 86 c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120917:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012091d:	e8 a6 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120922:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120928:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012092e:	83 ec 0c             	sub    $0xc,%esp
f0120931:	50                   	push   %eax
f0120932:	e8 19 70 fe ff       	call   f0107950 <kfree>
f0120937:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012093a:	e8 89 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012093f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120945:	74 17                	je     f012095e <test_kfree+0xc45>
f0120947:	83 ec 04             	sub    $0x4,%esp
f012094a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012094f:	68 42 05 00 00       	push   $0x542
f0120954:	68 9a b2 13 f0       	push   $0xf013b29a
f0120959:	e8 a7 f8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012095e:	e8 3a c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120963:	89 c2                	mov    %eax,%edx
f0120965:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012096b:	29 c2                	sub    %eax,%edx
f012096d:	89 d0                	mov    %edx,%eax
f012096f:	83 f8 01             	cmp    $0x1,%eax
f0120972:	74 17                	je     f012098b <test_kfree+0xc72>
f0120974:	83 ec 04             	sub    $0x4,%esp
f0120977:	68 24 ba 13 f0       	push   $0xf013ba24
f012097c:	68 43 05 00 00       	push   $0x543
f0120981:	68 9a b2 13 f0       	push   $0xf013b29a
f0120986:	e8 7a f8 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012098b:	e8 0d c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120990:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120996:	e8 2d 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012099b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01209a1:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01209a7:	83 ec 0c             	sub    $0xc,%esp
f01209aa:	50                   	push   %eax
f01209ab:	e8 a0 6f fe ff       	call   f0107950 <kfree>
f01209b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209b3:	e8 10 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01209b8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01209be:	74 17                	je     f01209d7 <test_kfree+0xcbe>
f01209c0:	83 ec 04             	sub    $0x4,%esp
f01209c3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01209c8:	68 49 05 00 00       	push   $0x549
f01209cd:	68 9a b2 13 f0       	push   $0xf013b29a
f01209d2:	e8 2e f8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01209d7:	e8 c1 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01209dc:	89 c2                	mov    %eax,%edx
f01209de:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01209e4:	29 c2                	sub    %eax,%edx
f01209e6:	89 d0                	mov    %edx,%eax
f01209e8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01209ed:	74 17                	je     f0120a06 <test_kfree+0xced>
f01209ef:	83 ec 04             	sub    $0x4,%esp
f01209f2:	68 24 ba 13 f0       	push   $0xf013ba24
f01209f7:	68 4a 05 00 00       	push   $0x54a
f01209fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0120a01:	e8 ff f7 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a06:	e8 92 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a0b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a11:	e8 b2 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a16:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120a1c:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120a22:	83 ec 0c             	sub    $0xc,%esp
f0120a25:	50                   	push   %eax
f0120a26:	e8 25 6f fe ff       	call   f0107950 <kfree>
f0120a2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a2e:	e8 95 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a33:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120a39:	74 17                	je     f0120a52 <test_kfree+0xd39>
f0120a3b:	83 ec 04             	sub    $0x4,%esp
f0120a3e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0120a43:	68 50 05 00 00       	push   $0x550
f0120a48:	68 9a b2 13 f0       	push   $0xf013b29a
f0120a4d:	e8 b3 f7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a52:	e8 46 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a57:	89 c2                	mov    %eax,%edx
f0120a59:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120a5f:	29 c2                	sub    %eax,%edx
f0120a61:	89 d0                	mov    %edx,%eax
f0120a63:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120a68:	74 17                	je     f0120a81 <test_kfree+0xd68>
f0120a6a:	83 ec 04             	sub    $0x4,%esp
f0120a6d:	68 24 ba 13 f0       	push   $0xf013ba24
f0120a72:	68 51 05 00 00       	push   $0x551
f0120a77:	68 9a b2 13 f0       	push   $0xf013b29a
f0120a7c:	e8 84 f7 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120a81:	83 ec 0c             	sub    $0xc,%esp
f0120a84:	68 5c ba 13 f0       	push   $0xf013ba5c
f0120a89:	e8 80 02 fe ff       	call   f0100d0e <cprintf>
f0120a8e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120a91:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120a97:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120a9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120aa1:	eb 1e                	jmp    f0120ac1 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120aa3:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120aa9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120aac:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120aaf:	01 c8                	add    %ecx,%eax
f0120ab1:	8a 00                	mov    (%eax),%al
f0120ab3:	0f be c0             	movsbl %al,%eax
f0120ab6:	01 d0                	add    %edx,%eax
f0120ab8:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120abe:	ff 45 f4             	incl   -0xc(%ebp)
f0120ac1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120ac7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120aca:	7f d7                	jg     f0120aa3 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120acc:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120ad2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120ad8:	89 c1                	mov    %eax,%ecx
f0120ada:	01 c9                	add    %ecx,%ecx
f0120adc:	01 c8                	add    %ecx,%eax
f0120ade:	39 c2                	cmp    %eax,%edx
f0120ae0:	74 17                	je     f0120af9 <test_kfree+0xde0>
f0120ae2:	83 ec 04             	sub    $0x4,%esp
f0120ae5:	68 80 ba 13 f0       	push   $0xf013ba80
f0120aea:	68 5e 05 00 00       	push   $0x55e
f0120aef:	68 9a b2 13 f0       	push   $0xf013b29a
f0120af4:	e8 0c f7 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120af9:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120aff:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b09:	eb 1e                	jmp    f0120b29 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120b0b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120b11:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120b14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b17:	01 c8                	add    %ecx,%eax
f0120b19:	8a 00                	mov    (%eax),%al
f0120b1b:	0f be c0             	movsbl %al,%eax
f0120b1e:	01 d0                	add    %edx,%eax
f0120b20:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120b26:	ff 45 f4             	incl   -0xc(%ebp)
f0120b29:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120b2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b32:	7f d7                	jg     f0120b0b <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120b34:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120b3a:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120b40:	c1 e2 02             	shl    $0x2,%edx
f0120b43:	39 d0                	cmp    %edx,%eax
f0120b45:	74 17                	je     f0120b5e <test_kfree+0xe45>
f0120b47:	83 ec 04             	sub    $0x4,%esp
f0120b4a:	68 80 ba 13 f0       	push   $0xf013ba80
f0120b4f:	68 66 05 00 00       	push   $0x566
f0120b54:	68 9a b2 13 f0       	push   $0xf013b29a
f0120b59:	e8 a7 f6 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120b5e:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120b64:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120b67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b6e:	eb 1e                	jmp    f0120b8e <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120b70:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120b76:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120b79:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b7c:	01 c8                	add    %ecx,%eax
f0120b7e:	8a 00                	mov    (%eax),%al
f0120b80:	0f be c0             	movsbl %al,%eax
f0120b83:	01 d0                	add    %edx,%eax
f0120b85:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120b8b:	ff 45 f4             	incl   -0xc(%ebp)
f0120b8e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120b94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b97:	7f d7                	jg     f0120b70 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120b99:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120b9f:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120ba5:	89 d0                	mov    %edx,%eax
f0120ba7:	c1 e0 02             	shl    $0x2,%eax
f0120baa:	01 d0                	add    %edx,%eax
f0120bac:	39 c1                	cmp    %eax,%ecx
f0120bae:	74 17                	je     f0120bc7 <test_kfree+0xeae>
f0120bb0:	83 ec 04             	sub    $0x4,%esp
f0120bb3:	68 80 ba 13 f0       	push   $0xf013ba80
f0120bb8:	68 6e 05 00 00       	push   $0x56e
f0120bbd:	68 9a b2 13 f0       	push   $0xf013b29a
f0120bc2:	e8 3e f6 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120bc7:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120bcd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120bd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120bd7:	eb 1e                	jmp    f0120bf7 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120bd9:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120bdf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120be2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120be5:	01 c8                	add    %ecx,%eax
f0120be7:	8a 00                	mov    (%eax),%al
f0120be9:	0f be c0             	movsbl %al,%eax
f0120bec:	01 d0                	add    %edx,%eax
f0120bee:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120bf4:	ff 45 f4             	incl   -0xc(%ebp)
f0120bf7:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120bfd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c00:	7f d7                	jg     f0120bd9 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120c02:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120c08:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120c0e:	89 d0                	mov    %edx,%eax
f0120c10:	01 c0                	add    %eax,%eax
f0120c12:	01 d0                	add    %edx,%eax
f0120c14:	01 c0                	add    %eax,%eax
f0120c16:	01 d0                	add    %edx,%eax
f0120c18:	39 c1                	cmp    %eax,%ecx
f0120c1a:	74 17                	je     f0120c33 <test_kfree+0xf1a>
f0120c1c:	83 ec 04             	sub    $0x4,%esp
f0120c1f:	68 80 ba 13 f0       	push   $0xf013ba80
f0120c24:	68 76 05 00 00       	push   $0x576
f0120c29:	68 9a b2 13 f0       	push   $0xf013b29a
f0120c2e:	e8 d2 f5 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0120c33:	83 ec 0c             	sub    $0xc,%esp
f0120c36:	68 b3 ba 13 f0       	push   $0xf013bab3
f0120c3b:	e8 ce 00 fe ff       	call   f0100d0e <cprintf>
f0120c40:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c43:	e8 55 bf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c4b:	e8 78 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c50:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120c53:	83 ec 0c             	sub    $0xc,%esp
f0120c56:	68 00 50 00 00       	push   $0x5000
f0120c5b:	e8 25 6c fe ff       	call   f0107885 <kmalloc>
f0120c60:	83 c4 10             	add    $0x10,%esp
f0120c63:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c69:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120c6f:	89 c1                	mov    %eax,%ecx
f0120c71:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120c78:	10 00 00 
f0120c7b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120c81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c86:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120c8c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120c92:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c97:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120c9d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120ca3:	29 d0                	sub    %edx,%eax
f0120ca5:	89 c3                	mov    %eax,%ebx
f0120ca7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120cae:	10 00 00 
f0120cb1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120cb6:	0f b6 d0             	movzbl %al,%edx
f0120cb9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120cbf:	01 d0                	add    %edx,%eax
f0120cc1:	48                   	dec    %eax
f0120cc2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120cc8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cd3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120cd9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120cdf:	29 d0                	sub    %edx,%eax
f0120ce1:	01 c3                	add    %eax,%ebx
f0120ce3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120cea:	10 00 00 
f0120ced:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120cf2:	0f b6 c0             	movzbl %al,%eax
f0120cf5:	c1 e0 04             	shl    $0x4,%eax
f0120cf8:	89 c2                	mov    %eax,%edx
f0120cfa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120d00:	01 d0                	add    %edx,%eax
f0120d02:	48                   	dec    %eax
f0120d03:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120d09:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d14:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120d1a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120d20:	29 d0                	sub    %edx,%eax
f0120d22:	01 d8                	add    %ebx,%eax
f0120d24:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120d29:	39 c1                	cmp    %eax,%ecx
f0120d2b:	74 17                	je     f0120d44 <test_kfree+0x102b>
f0120d2d:	83 ec 04             	sub    $0x4,%esp
f0120d30:	68 80 b3 13 f0       	push   $0xf013b380
f0120d35:	68 80 05 00 00       	push   $0x580
f0120d3a:	68 9a b2 13 f0       	push   $0xf013b29a
f0120d3f:	e8 c1 f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d44:	e8 7f 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d49:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d4c:	74 17                	je     f0120d65 <test_kfree+0x104c>
f0120d4e:	83 ec 04             	sub    $0x4,%esp
f0120d51:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0120d56:	68 81 05 00 00       	push   $0x581
f0120d5b:	68 9a b2 13 f0       	push   $0xf013b29a
f0120d60:	e8 a0 f4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d65:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d68:	e8 30 be fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120d6d:	29 c3                	sub    %eax,%ebx
f0120d6f:	89 d8                	mov    %ebx,%eax
f0120d71:	83 f8 05             	cmp    $0x5,%eax
f0120d74:	74 17                	je     f0120d8d <test_kfree+0x1074>
f0120d76:	83 ec 04             	sub    $0x4,%esp
f0120d79:	68 1c b3 13 f0       	push   $0xf013b31c
f0120d7e:	68 82 05 00 00       	push   $0x582
f0120d83:	68 9a b2 13 f0       	push   $0xf013b29a
f0120d88:	e8 78 f4 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120d8d:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120d94:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120d97:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120d9d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120da0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120da7:	eb 0e                	jmp    f0120db7 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dac:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120daf:	01 d0                	add    %edx,%eax
f0120db1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120db4:	ff 45 f4             	incl   -0xc(%ebp)
f0120db7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120dbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120dc0:	7f e7                	jg     f0120da9 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120dc2:	e8 d6 bd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120dc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dca:	e8 f9 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120dcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120dd2:	83 ec 0c             	sub    $0xc,%esp
f0120dd5:	68 00 00 10 00       	push   $0x100000
f0120dda:	e8 a6 6a fe ff       	call   f0107885 <kmalloc>
f0120ddf:	83 c4 10             	add    $0x10,%esp
f0120de2:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120de8:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120dee:	89 c1                	mov    %eax,%ecx
f0120df0:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120df7:	10 00 00 
f0120dfa:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120e00:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e05:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120e0b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120e11:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e16:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120e1c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120e22:	29 d0                	sub    %edx,%eax
f0120e24:	89 c3                	mov    %eax,%ebx
f0120e26:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120e2d:	10 00 00 
f0120e30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120e35:	0f b6 d0             	movzbl %al,%edx
f0120e38:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120e3e:	01 d0                	add    %edx,%eax
f0120e40:	48                   	dec    %eax
f0120e41:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120e47:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120e4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e52:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120e58:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120e5e:	29 d0                	sub    %edx,%eax
f0120e60:	01 c3                	add    %eax,%ebx
f0120e62:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120e69:	10 00 00 
f0120e6c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120e71:	0f b6 c0             	movzbl %al,%eax
f0120e74:	c1 e0 04             	shl    $0x4,%eax
f0120e77:	89 c2                	mov    %eax,%edx
f0120e79:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120e7f:	01 d0                	add    %edx,%eax
f0120e81:	48                   	dec    %eax
f0120e82:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120e88:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120e8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e93:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120e99:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120e9f:	29 d0                	sub    %edx,%eax
f0120ea1:	01 d8                	add    %ebx,%eax
f0120ea3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120ea8:	39 c1                	cmp    %eax,%ecx
f0120eaa:	74 17                	je     f0120ec3 <test_kfree+0x11aa>
f0120eac:	83 ec 04             	sub    $0x4,%esp
f0120eaf:	68 80 b3 13 f0       	push   $0xf013b380
f0120eb4:	68 8e 05 00 00       	push   $0x58e
f0120eb9:	68 9a b2 13 f0       	push   $0xf013b29a
f0120ebe:	e8 42 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec3:	e8 00 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ec8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ecb:	74 17                	je     f0120ee4 <test_kfree+0x11cb>
f0120ecd:	83 ec 04             	sub    $0x4,%esp
f0120ed0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0120ed5:	68 8f 05 00 00       	push   $0x58f
f0120eda:	68 9a b2 13 f0       	push   $0xf013b29a
f0120edf:	e8 21 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ee4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ee7:	e8 b1 bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120eec:	29 c3                	sub    %eax,%ebx
f0120eee:	89 d8                	mov    %ebx,%eax
f0120ef0:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120ef5:	74 17                	je     f0120f0e <test_kfree+0x11f5>
f0120ef7:	83 ec 04             	sub    $0x4,%esp
f0120efa:	68 1c b3 13 f0       	push   $0xf013b31c
f0120eff:	68 90 05 00 00       	push   $0x590
f0120f04:	68 9a b2 13 f0       	push   $0xf013b29a
f0120f09:	e8 f7 f2 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120f0e:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120f15:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120f18:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120f1e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120f21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f28:	eb 0e                	jmp    f0120f38 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120f2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f30:	01 d0                	add    %edx,%eax
f0120f32:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120f35:	ff 45 f4             	incl   -0xc(%ebp)
f0120f38:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120f3e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f41:	7f e7                	jg     f0120f2a <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120f43:	e8 ac 66 ff ff       	call   f01175f4 <isKHeapPlacementStrategyNEXTFIT>
f0120f48:	84 c0                	test   %al,%al
f0120f4a:	0f 84 ac 06 00 00    	je     f01215fc <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120f50:	e8 48 bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120f55:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f58:	e8 6b 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120f5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120f60:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120f67:	10 00 00 
f0120f6a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120f70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f75:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120f7b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120f81:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f86:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120f8c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120f92:	29 d0                	sub    %edx,%eax
f0120f94:	89 c1                	mov    %eax,%ecx
f0120f96:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120f9d:	10 00 00 
f0120fa0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120fa5:	0f b6 d0             	movzbl %al,%edx
f0120fa8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120fae:	01 d0                	add    %edx,%eax
f0120fb0:	48                   	dec    %eax
f0120fb1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120fb7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120fbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fc2:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120fc8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120fce:	29 d0                	sub    %edx,%eax
f0120fd0:	01 c1                	add    %eax,%ecx
f0120fd2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120fd9:	10 00 00 
f0120fdc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120fe1:	0f b6 c0             	movzbl %al,%eax
f0120fe4:	c1 e0 04             	shl    $0x4,%eax
f0120fe7:	89 c2                	mov    %eax,%edx
f0120fe9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120fef:	01 d0                	add    %edx,%eax
f0120ff1:	48                   	dec    %eax
f0120ff2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120ff8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f0121003:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0121009:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012100f:	29 d0                	sub    %edx,%eax
f0121011:	01 c8                	add    %ecx,%eax
f0121013:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121018:	29 c2                	sub    %eax,%edx
f012101a:	89 d0                	mov    %edx,%eax
f012101c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0121022:	83 ec 0c             	sub    $0xc,%esp
f0121025:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f012102b:	e8 55 68 fe ff       	call   f0107885 <kmalloc>
f0121030:	83 c4 10             	add    $0x10,%esp
f0121033:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121039:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012103f:	89 c1                	mov    %eax,%ecx
f0121041:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121048:	10 00 00 
f012104b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0121051:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121056:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012105c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121062:	ba 00 00 00 00       	mov    $0x0,%edx
f0121067:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012106d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121073:	29 d0                	sub    %edx,%eax
f0121075:	89 c3                	mov    %eax,%ebx
f0121077:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012107e:	10 00 00 
f0121081:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121086:	0f b6 d0             	movzbl %al,%edx
f0121089:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012108f:	01 d0                	add    %edx,%eax
f0121091:	48                   	dec    %eax
f0121092:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121098:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012109e:	ba 00 00 00 00       	mov    $0x0,%edx
f01210a3:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01210a9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01210af:	29 d0                	sub    %edx,%eax
f01210b1:	01 c3                	add    %eax,%ebx
f01210b3:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01210ba:	10 00 00 
f01210bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01210c2:	0f b6 c0             	movzbl %al,%eax
f01210c5:	c1 e0 04             	shl    $0x4,%eax
f01210c8:	89 c2                	mov    %eax,%edx
f01210ca:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01210d0:	01 d0                	add    %edx,%eax
f01210d2:	48                   	dec    %eax
f01210d3:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01210d9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01210df:	ba 00 00 00 00       	mov    $0x0,%edx
f01210e4:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01210ea:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01210f0:	29 d0                	sub    %edx,%eax
f01210f2:	01 d8                	add    %ebx,%eax
f01210f4:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01210f9:	39 c1                	cmp    %eax,%ecx
f01210fb:	74 17                	je     f0121114 <test_kfree+0x13fb>
f01210fd:	83 ec 04             	sub    $0x4,%esp
f0121100:	68 80 b3 13 f0       	push   $0xf013b380
f0121105:	68 9f 05 00 00       	push   $0x59f
f012110a:	68 9a b2 13 f0       	push   $0xf013b29a
f012110f:	e8 f1 f0 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121114:	e8 af 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121119:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012111c:	74 17                	je     f0121135 <test_kfree+0x141c>
f012111e:	83 ec 04             	sub    $0x4,%esp
f0121121:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121126:	68 a0 05 00 00       	push   $0x5a0
f012112b:	68 9a b2 13 f0       	push   $0xf013b29a
f0121130:	e8 d0 f0 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121135:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121138:	e8 60 ba fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012113d:	29 c3                	sub    %eax,%ebx
f012113f:	89 da                	mov    %ebx,%edx
f0121141:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121147:	c1 e8 0c             	shr    $0xc,%eax
f012114a:	39 c2                	cmp    %eax,%edx
f012114c:	74 17                	je     f0121165 <test_kfree+0x144c>
f012114e:	83 ec 04             	sub    $0x4,%esp
f0121151:	68 1c b3 13 f0       	push   $0xf013b31c
f0121156:	68 a1 05 00 00       	push   $0x5a1
f012115b:	68 9a b2 13 f0       	push   $0xf013b29a
f0121160:	e8 a0 f0 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121165:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012116b:	48                   	dec    %eax
f012116c:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121172:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121178:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f012117b:	e8 1d ba fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121180:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121183:	e8 40 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121188:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f012118b:	83 ec 0c             	sub    $0xc,%esp
f012118e:	68 00 00 30 00       	push   $0x300000
f0121193:	e8 ed 66 fe ff       	call   f0107885 <kmalloc>
f0121198:	83 c4 10             	add    $0x10,%esp
f012119b:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211a1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01211a7:	89 c1                	mov    %eax,%ecx
f01211a9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01211b0:	10 00 00 
f01211b3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01211b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01211be:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01211c4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01211ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01211cf:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01211d5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01211db:	29 d0                	sub    %edx,%eax
f01211dd:	89 c3                	mov    %eax,%ebx
f01211df:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f01211e6:	10 00 00 
f01211e9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01211ee:	0f b6 d0             	movzbl %al,%edx
f01211f1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01211f7:	01 d0                	add    %edx,%eax
f01211f9:	48                   	dec    %eax
f01211fa:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121200:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121206:	ba 00 00 00 00       	mov    $0x0,%edx
f012120b:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121211:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121217:	29 d0                	sub    %edx,%eax
f0121219:	01 c3                	add    %eax,%ebx
f012121b:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121222:	10 00 00 
f0121225:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012122a:	0f b6 c0             	movzbl %al,%eax
f012122d:	c1 e0 04             	shl    $0x4,%eax
f0121230:	89 c2                	mov    %eax,%edx
f0121232:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121238:	01 d0                	add    %edx,%eax
f012123a:	48                   	dec    %eax
f012123b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121241:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121247:	ba 00 00 00 00       	mov    $0x0,%edx
f012124c:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121252:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121258:	29 d0                	sub    %edx,%eax
f012125a:	01 d8                	add    %ebx,%eax
f012125c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121261:	39 c1                	cmp    %eax,%ecx
f0121263:	74 17                	je     f012127c <test_kfree+0x1563>
f0121265:	83 ec 04             	sub    $0x4,%esp
f0121268:	68 80 b3 13 f0       	push   $0xf013b380
f012126d:	68 ae 05 00 00       	push   $0x5ae
f0121272:	68 9a b2 13 f0       	push   $0xf013b29a
f0121277:	e8 89 ef fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012127c:	e8 47 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121281:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121284:	74 17                	je     f012129d <test_kfree+0x1584>
f0121286:	83 ec 04             	sub    $0x4,%esp
f0121289:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012128e:	68 af 05 00 00       	push   $0x5af
f0121293:	68 9a b2 13 f0       	push   $0xf013b29a
f0121298:	e8 68 ef fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012129d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01212a0:	e8 f8 b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01212a5:	29 c3                	sub    %eax,%ebx
f01212a7:	89 d8                	mov    %ebx,%eax
f01212a9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01212ae:	74 17                	je     f01212c7 <test_kfree+0x15ae>
f01212b0:	83 ec 04             	sub    $0x4,%esp
f01212b3:	68 1c b3 13 f0       	push   $0xf013b31c
f01212b8:	68 b0 05 00 00       	push   $0x5b0
f01212bd:	68 9a b2 13 f0       	push   $0xf013b29a
f01212c2:	e8 3e ef fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f01212c7:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f01212ce:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01212d1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01212d7:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01212da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01212e1:	eb 0e                	jmp    f01212f1 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f01212e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01212e6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01212e9:	01 d0                	add    %edx,%eax
f01212eb:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01212ee:	ff 45 f4             	incl   -0xc(%ebp)
f01212f1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01212f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01212fa:	7f e7                	jg     f01212e3 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01212fc:	e8 9c b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121301:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121304:	e8 bf 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121309:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012130c:	83 ec 0c             	sub    $0xc,%esp
f012130f:	68 00 08 00 00       	push   $0x800
f0121314:	e8 6c 65 fe ff       	call   f0107885 <kmalloc>
f0121319:	83 c4 10             	add    $0x10,%esp
f012131c:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121322:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121328:	89 c1                	mov    %eax,%ecx
f012132a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121331:	10 00 00 
f0121334:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012133a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012133f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121345:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012134b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121350:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121356:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012135c:	29 d0                	sub    %edx,%eax
f012135e:	89 c3                	mov    %eax,%ebx
f0121360:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121367:	10 00 00 
f012136a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012136f:	0f b6 d0             	movzbl %al,%edx
f0121372:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121378:	01 d0                	add    %edx,%eax
f012137a:	48                   	dec    %eax
f012137b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121381:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121387:	ba 00 00 00 00       	mov    $0x0,%edx
f012138c:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121392:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121398:	29 d0                	sub    %edx,%eax
f012139a:	01 c3                	add    %eax,%ebx
f012139c:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01213a3:	10 00 00 
f01213a6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01213ab:	0f b6 c0             	movzbl %al,%eax
f01213ae:	c1 e0 04             	shl    $0x4,%eax
f01213b1:	89 c2                	mov    %eax,%edx
f01213b3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01213b9:	01 d0                	add    %edx,%eax
f01213bb:	48                   	dec    %eax
f01213bc:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01213c2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01213c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01213cd:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01213d3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01213d9:	29 d0                	sub    %edx,%eax
f01213db:	01 d8                	add    %ebx,%eax
f01213dd:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01213e2:	39 c1                	cmp    %eax,%ecx
f01213e4:	74 17                	je     f01213fd <test_kfree+0x16e4>
f01213e6:	83 ec 04             	sub    $0x4,%esp
f01213e9:	68 80 b3 13 f0       	push   $0xf013b380
f01213ee:	68 bc 05 00 00       	push   $0x5bc
f01213f3:	68 9a b2 13 f0       	push   $0xf013b29a
f01213f8:	e8 08 ee fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213fd:	e8 c6 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121402:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121405:	74 17                	je     f012141e <test_kfree+0x1705>
f0121407:	83 ec 04             	sub    $0x4,%esp
f012140a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012140f:	68 bd 05 00 00       	push   $0x5bd
f0121414:	68 9a b2 13 f0       	push   $0xf013b29a
f0121419:	e8 e7 ed fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012141e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121421:	e8 77 b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121426:	29 c3                	sub    %eax,%ebx
f0121428:	89 d8                	mov    %ebx,%eax
f012142a:	83 f8 01             	cmp    $0x1,%eax
f012142d:	74 17                	je     f0121446 <test_kfree+0x172d>
f012142f:	83 ec 04             	sub    $0x4,%esp
f0121432:	68 1c b3 13 f0       	push   $0xf013b31c
f0121437:	68 be 05 00 00       	push   $0x5be
f012143c:	68 9a b2 13 f0       	push   $0xf013b29a
f0121441:	e8 bf ed fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121446:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012144d:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121450:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121456:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121460:	eb 0e                	jmp    f0121470 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121462:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121465:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121468:	01 d0                	add    %edx,%eax
f012146a:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f012146d:	ff 45 f4             	incl   -0xc(%ebp)
f0121470:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121476:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121479:	7f e7                	jg     f0121462 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f012147b:	e8 1d b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121480:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121483:	e8 40 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121488:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f012148b:	83 ec 0c             	sub    $0xc,%esp
f012148e:	68 00 00 10 00       	push   $0x100000
f0121493:	e8 ed 63 fe ff       	call   f0107885 <kmalloc>
f0121498:	83 c4 10             	add    $0x10,%esp
f012149b:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214a1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01214a7:	89 c1                	mov    %eax,%ecx
f01214a9:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01214b0:	10 00 00 
f01214b3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01214b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01214be:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01214c4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01214ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01214cf:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01214d5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01214db:	29 d0                	sub    %edx,%eax
f01214dd:	89 c3                	mov    %eax,%ebx
f01214df:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f01214e6:	10 00 00 
f01214e9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01214ee:	0f b6 d0             	movzbl %al,%edx
f01214f1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01214f7:	01 d0                	add    %edx,%eax
f01214f9:	48                   	dec    %eax
f01214fa:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121500:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121506:	ba 00 00 00 00       	mov    $0x0,%edx
f012150b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121511:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121517:	29 d0                	sub    %edx,%eax
f0121519:	01 c3                	add    %eax,%ebx
f012151b:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121522:	10 00 00 
f0121525:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012152a:	0f b6 c0             	movzbl %al,%eax
f012152d:	c1 e0 04             	shl    $0x4,%eax
f0121530:	89 c2                	mov    %eax,%edx
f0121532:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121538:	01 d0                	add    %edx,%eax
f012153a:	48                   	dec    %eax
f012153b:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121541:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121547:	ba 00 00 00 00       	mov    $0x0,%edx
f012154c:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121552:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121558:	29 d0                	sub    %edx,%eax
f012155a:	01 d8                	add    %ebx,%eax
f012155c:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121561:	39 c1                	cmp    %eax,%ecx
f0121563:	74 17                	je     f012157c <test_kfree+0x1863>
f0121565:	83 ec 04             	sub    $0x4,%esp
f0121568:	68 80 b3 13 f0       	push   $0xf013b380
f012156d:	68 ca 05 00 00       	push   $0x5ca
f0121572:	68 9a b2 13 f0       	push   $0xf013b29a
f0121577:	e8 89 ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012157c:	e8 47 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121581:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121584:	74 17                	je     f012159d <test_kfree+0x1884>
f0121586:	83 ec 04             	sub    $0x4,%esp
f0121589:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012158e:	68 cb 05 00 00       	push   $0x5cb
f0121593:	68 9a b2 13 f0       	push   $0xf013b29a
f0121598:	e8 68 ec fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012159d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215a0:	e8 f8 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01215a5:	29 c3                	sub    %eax,%ebx
f01215a7:	89 d8                	mov    %ebx,%eax
f01215a9:	3d 00 01 00 00       	cmp    $0x100,%eax
f01215ae:	74 17                	je     f01215c7 <test_kfree+0x18ae>
f01215b0:	83 ec 04             	sub    $0x4,%esp
f01215b3:	68 1c b3 13 f0       	push   $0xf013b31c
f01215b8:	68 cc 05 00 00       	push   $0x5cc
f01215bd:	68 9a b2 13 f0       	push   $0xf013b29a
f01215c2:	e8 3e ec fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f01215c7:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f01215ce:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01215d1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01215d7:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01215da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01215e1:	eb 0e                	jmp    f01215f1 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f01215e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01215e6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01215e9:	01 d0                	add    %edx,%eax
f01215eb:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01215ee:	ff 45 f4             	incl   -0xc(%ebp)
f01215f1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01215f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01215fa:	7f e7                	jg     f01215e3 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01215fc:	83 ec 0c             	sub    $0xc,%esp
f01215ff:	68 ba ba 13 f0       	push   $0xf013baba
f0121604:	e8 05 f7 fd ff       	call   f0100d0e <cprintf>
f0121609:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012160c:	e8 8c b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121611:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121614:	e8 af 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121619:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012161c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121622:	83 ec 0c             	sub    $0xc,%esp
f0121625:	50                   	push   %eax
f0121626:	e8 25 63 fe ff       	call   f0107950 <kfree>
f012162b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012162e:	e8 95 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121633:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121636:	74 17                	je     f012164f <test_kfree+0x1936>
f0121638:	83 ec 04             	sub    $0x4,%esp
f012163b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121640:	68 dd 05 00 00       	push   $0x5dd
f0121645:	68 9a b2 13 f0       	push   $0xf013b29a
f012164a:	e8 b6 eb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f012164f:	e8 49 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121654:	89 c2                	mov    %eax,%edx
f0121656:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121659:	29 c2                	sub    %eax,%edx
f012165b:	89 d0                	mov    %edx,%eax
f012165d:	83 f8 02             	cmp    $0x2,%eax
f0121660:	74 17                	je     f0121679 <test_kfree+0x1960>
f0121662:	83 ec 04             	sub    $0x4,%esp
f0121665:	68 24 ba 13 f0       	push   $0xf013ba24
f012166a:	68 de 05 00 00       	push   $0x5de
f012166f:	68 9a b2 13 f0       	push   $0xf013b29a
f0121674:	e8 8c eb fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121679:	e8 1f b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012167e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121681:	e8 42 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121686:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121689:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012168f:	83 ec 0c             	sub    $0xc,%esp
f0121692:	50                   	push   %eax
f0121693:	e8 b8 62 fe ff       	call   f0107950 <kfree>
f0121698:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012169b:	e8 28 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01216a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216a3:	74 17                	je     f01216bc <test_kfree+0x19a3>
f01216a5:	83 ec 04             	sub    $0x4,%esp
f01216a8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01216ad:	68 e4 05 00 00       	push   $0x5e4
f01216b2:	68 9a b2 13 f0       	push   $0xf013b29a
f01216b7:	e8 49 eb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01216bc:	e8 dc b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01216c1:	89 c2                	mov    %eax,%edx
f01216c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01216c6:	29 c2                	sub    %eax,%edx
f01216c8:	89 d0                	mov    %edx,%eax
f01216ca:	3d 00 03 00 00       	cmp    $0x300,%eax
f01216cf:	74 17                	je     f01216e8 <test_kfree+0x19cf>
f01216d1:	83 ec 04             	sub    $0x4,%esp
f01216d4:	68 24 ba 13 f0       	push   $0xf013ba24
f01216d9:	68 e5 05 00 00       	push   $0x5e5
f01216de:	68 9a b2 13 f0       	push   $0xf013b29a
f01216e3:	e8 1d eb fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01216e8:	e8 b0 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01216ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216f0:	e8 d3 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01216f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01216f8:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01216fe:	83 ec 0c             	sub    $0xc,%esp
f0121701:	50                   	push   %eax
f0121702:	e8 49 62 fe ff       	call   f0107950 <kfree>
f0121707:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012170a:	e8 b9 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012170f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121712:	74 17                	je     f012172b <test_kfree+0x1a12>
f0121714:	83 ec 04             	sub    $0x4,%esp
f0121717:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012171c:	68 eb 05 00 00       	push   $0x5eb
f0121721:	68 9a b2 13 f0       	push   $0xf013b29a
f0121726:	e8 da ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012172b:	e8 6d b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121730:	89 c2                	mov    %eax,%edx
f0121732:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121735:	29 c2                	sub    %eax,%edx
f0121737:	89 d0                	mov    %edx,%eax
f0121739:	83 f8 01             	cmp    $0x1,%eax
f012173c:	74 17                	je     f0121755 <test_kfree+0x1a3c>
f012173e:	83 ec 04             	sub    $0x4,%esp
f0121741:	68 24 ba 13 f0       	push   $0xf013ba24
f0121746:	68 ec 05 00 00       	push   $0x5ec
f012174b:	68 9a b2 13 f0       	push   $0xf013b29a
f0121750:	e8 b0 ea fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121755:	e8 43 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012175a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012175d:	e8 66 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121762:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121765:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012176b:	83 ec 0c             	sub    $0xc,%esp
f012176e:	50                   	push   %eax
f012176f:	e8 dc 61 fe ff       	call   f0107950 <kfree>
f0121774:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121777:	e8 4c 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012177c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012177f:	74 17                	je     f0121798 <test_kfree+0x1a7f>
f0121781:	83 ec 04             	sub    $0x4,%esp
f0121784:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121789:	68 f2 05 00 00       	push   $0x5f2
f012178e:	68 9a b2 13 f0       	push   $0xf013b29a
f0121793:	e8 6d ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121798:	e8 00 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012179d:	89 c2                	mov    %eax,%edx
f012179f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217a2:	29 c2                	sub    %eax,%edx
f01217a4:	89 d0                	mov    %edx,%eax
f01217a6:	83 f8 04             	cmp    $0x4,%eax
f01217a9:	74 17                	je     f01217c2 <test_kfree+0x1aa9>
f01217ab:	83 ec 04             	sub    $0x4,%esp
f01217ae:	68 24 ba 13 f0       	push   $0xf013ba24
f01217b3:	68 f3 05 00 00       	push   $0x5f3
f01217b8:	68 9a b2 13 f0       	push   $0xf013b29a
f01217bd:	e8 43 ea fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01217c2:	e8 d6 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01217c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217ca:	e8 f9 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01217d2:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01217d8:	83 ec 0c             	sub    $0xc,%esp
f01217db:	50                   	push   %eax
f01217dc:	e8 6f 61 fe ff       	call   f0107950 <kfree>
f01217e1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217e4:	e8 df 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217ec:	74 17                	je     f0121805 <test_kfree+0x1aec>
f01217ee:	83 ec 04             	sub    $0x4,%esp
f01217f1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01217f6:	68 f9 05 00 00       	push   $0x5f9
f01217fb:	68 9a b2 13 f0       	push   $0xf013b29a
f0121800:	e8 00 ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121805:	e8 93 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012180a:	89 c2                	mov    %eax,%edx
f012180c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012180f:	29 c2                	sub    %eax,%edx
f0121811:	89 d0                	mov    %edx,%eax
f0121813:	83 f8 05             	cmp    $0x5,%eax
f0121816:	74 17                	je     f012182f <test_kfree+0x1b16>
f0121818:	83 ec 04             	sub    $0x4,%esp
f012181b:	68 24 ba 13 f0       	push   $0xf013ba24
f0121820:	68 fa 05 00 00       	push   $0x5fa
f0121825:	68 9a b2 13 f0       	push   $0xf013b29a
f012182a:	e8 d6 e9 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012182f:	e8 69 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121834:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121837:	e8 8c 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012183c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012183f:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121845:	83 ec 0c             	sub    $0xc,%esp
f0121848:	50                   	push   %eax
f0121849:	e8 02 61 fe ff       	call   f0107950 <kfree>
f012184e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121851:	e8 72 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121856:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121859:	74 17                	je     f0121872 <test_kfree+0x1b59>
f012185b:	83 ec 04             	sub    $0x4,%esp
f012185e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121863:	68 00 06 00 00       	push   $0x600
f0121868:	68 9a b2 13 f0       	push   $0xf013b29a
f012186d:	e8 93 e9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121872:	e8 26 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121877:	89 c2                	mov    %eax,%edx
f0121879:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012187c:	29 c2                	sub    %eax,%edx
f012187e:	89 d0                	mov    %edx,%eax
f0121880:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121885:	74 17                	je     f012189e <test_kfree+0x1b85>
f0121887:	83 ec 04             	sub    $0x4,%esp
f012188a:	68 24 ba 13 f0       	push   $0xf013ba24
f012188f:	68 01 06 00 00       	push   $0x601
f0121894:	68 9a b2 13 f0       	push   $0xf013b29a
f0121899:	e8 67 e9 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f012189e:	e8 51 5d ff ff       	call   f01175f4 <isKHeapPlacementStrategyNEXTFIT>
f01218a3:	84 c0                	test   %al,%al
f01218a5:	0f 84 80 02 00 00    	je     f0121b2b <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01218ab:	e8 ed b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01218b3:	e8 10 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f01218bb:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01218c1:	83 ec 0c             	sub    $0xc,%esp
f01218c4:	50                   	push   %eax
f01218c5:	e8 86 60 fe ff       	call   f0107950 <kfree>
f01218ca:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01218cd:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01218d4:	10 00 00 
f01218d7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01218dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218e2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01218e8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01218ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01218f3:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01218f9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01218ff:	29 d0                	sub    %edx,%eax
f0121901:	89 c1                	mov    %eax,%ecx
f0121903:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f012190a:	10 00 00 
f012190d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121912:	0f b6 d0             	movzbl %al,%edx
f0121915:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012191b:	01 d0                	add    %edx,%eax
f012191d:	48                   	dec    %eax
f012191e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121924:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012192a:	ba 00 00 00 00       	mov    $0x0,%edx
f012192f:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121935:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012193b:	29 d0                	sub    %edx,%eax
f012193d:	01 c1                	add    %eax,%ecx
f012193f:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121946:	10 00 00 
f0121949:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012194e:	0f b6 c0             	movzbl %al,%eax
f0121951:	c1 e0 04             	shl    $0x4,%eax
f0121954:	89 c2                	mov    %eax,%edx
f0121956:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012195c:	01 d0                	add    %edx,%eax
f012195e:	48                   	dec    %eax
f012195f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121965:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012196b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121970:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121976:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012197c:	29 d0                	sub    %edx,%eax
f012197e:	01 c8                	add    %ecx,%eax
f0121980:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121985:	29 c2                	sub    %eax,%edx
f0121987:	89 d0                	mov    %edx,%eax
f0121989:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012198f:	e8 34 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121994:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121997:	74 17                	je     f01219b0 <test_kfree+0x1c97>
f0121999:	83 ec 04             	sub    $0x4,%esp
f012199c:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01219a1:	68 0b 06 00 00       	push   $0x60b
f01219a6:	68 9a b2 13 f0       	push   $0xf013b29a
f01219ab:	e8 55 e8 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f01219b0:	e8 e8 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01219b5:	89 c2                	mov    %eax,%edx
f01219b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01219ba:	29 c2                	sub    %eax,%edx
f01219bc:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01219c2:	c1 e8 0c             	shr    $0xc,%eax
f01219c5:	39 c2                	cmp    %eax,%edx
f01219c7:	74 17                	je     f01219e0 <test_kfree+0x1cc7>
f01219c9:	83 ec 04             	sub    $0x4,%esp
f01219cc:	68 24 ba 13 f0       	push   $0xf013ba24
f01219d1:	68 0c 06 00 00       	push   $0x60c
f01219d6:	68 9a b2 13 f0       	push   $0xf013b29a
f01219db:	e8 25 e8 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01219e0:	e8 b8 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01219e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01219e8:	e8 db 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01219f0:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01219f6:	83 ec 0c             	sub    $0xc,%esp
f01219f9:	50                   	push   %eax
f01219fa:	e8 51 5f fe ff       	call   f0107950 <kfree>
f01219ff:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a02:	e8 c1 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a0a:	74 17                	je     f0121a23 <test_kfree+0x1d0a>
f0121a0c:	83 ec 04             	sub    $0x4,%esp
f0121a0f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121a14:	68 12 06 00 00       	push   $0x612
f0121a19:	68 9a b2 13 f0       	push   $0xf013b29a
f0121a1e:	e8 e2 e7 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a23:	e8 75 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a28:	89 c2                	mov    %eax,%edx
f0121a2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a2d:	29 c2                	sub    %eax,%edx
f0121a2f:	89 d0                	mov    %edx,%eax
f0121a31:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121a36:	74 17                	je     f0121a4f <test_kfree+0x1d36>
f0121a38:	83 ec 04             	sub    $0x4,%esp
f0121a3b:	68 24 ba 13 f0       	push   $0xf013ba24
f0121a40:	68 13 06 00 00       	push   $0x613
f0121a45:	68 9a b2 13 f0       	push   $0xf013b29a
f0121a4a:	e8 b6 e7 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121a4f:	e8 49 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a54:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a57:	e8 6c 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121a5f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121a65:	83 ec 0c             	sub    $0xc,%esp
f0121a68:	50                   	push   %eax
f0121a69:	e8 e2 5e fe ff       	call   f0107950 <kfree>
f0121a6e:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a71:	e8 52 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a79:	74 17                	je     f0121a92 <test_kfree+0x1d79>
f0121a7b:	83 ec 04             	sub    $0x4,%esp
f0121a7e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121a83:	68 19 06 00 00       	push   $0x619
f0121a88:	68 9a b2 13 f0       	push   $0xf013b29a
f0121a8d:	e8 73 e7 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a92:	e8 06 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a97:	89 c2                	mov    %eax,%edx
f0121a99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a9c:	29 c2                	sub    %eax,%edx
f0121a9e:	89 d0                	mov    %edx,%eax
f0121aa0:	83 f8 01             	cmp    $0x1,%eax
f0121aa3:	74 17                	je     f0121abc <test_kfree+0x1da3>
f0121aa5:	83 ec 04             	sub    $0x4,%esp
f0121aa8:	68 24 ba 13 f0       	push   $0xf013ba24
f0121aad:	68 1a 06 00 00       	push   $0x61a
f0121ab2:	68 9a b2 13 f0       	push   $0xf013b29a
f0121ab7:	e8 49 e7 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121abc:	e8 dc b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ac1:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121ac4:	e8 ff 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ac9:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121acc:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121ad2:	83 ec 0c             	sub    $0xc,%esp
f0121ad5:	50                   	push   %eax
f0121ad6:	e8 75 5e fe ff       	call   f0107950 <kfree>
f0121adb:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ade:	e8 e5 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ae3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ae6:	74 17                	je     f0121aff <test_kfree+0x1de6>
f0121ae8:	83 ec 04             	sub    $0x4,%esp
f0121aeb:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121af0:	68 20 06 00 00       	push   $0x620
f0121af5:	68 9a b2 13 f0       	push   $0xf013b29a
f0121afa:	e8 06 e7 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121aff:	e8 99 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b04:	89 c2                	mov    %eax,%edx
f0121b06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b09:	29 c2                	sub    %eax,%edx
f0121b0b:	89 d0                	mov    %edx,%eax
f0121b0d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121b12:	74 17                	je     f0121b2b <test_kfree+0x1e12>
f0121b14:	83 ec 04             	sub    $0x4,%esp
f0121b17:	68 24 ba 13 f0       	push   $0xf013ba24
f0121b1c:	68 21 06 00 00       	push   $0x621
f0121b21:	68 9a b2 13 f0       	push   $0xf013b29a
f0121b26:	e8 da e6 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121b2b:	e8 6d b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b30:	89 c2                	mov    %eax,%edx
f0121b32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121b35:	39 c2                	cmp    %eax,%edx
f0121b37:	74 17                	je     f0121b50 <test_kfree+0x1e37>
f0121b39:	83 ec 04             	sub    $0x4,%esp
f0121b3c:	68 c4 ba 13 f0       	push   $0xf013bac4
f0121b41:	68 24 06 00 00       	push   $0x624
f0121b46:	68 9a b2 13 f0       	push   $0xf013b29a
f0121b4b:	e8 b5 e6 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121b50:	83 ec 0c             	sub    $0xc,%esp
f0121b53:	68 f8 ba 13 f0       	push   $0xf013baf8
f0121b58:	e8 b1 f1 fd ff       	call   f0100d0e <cprintf>
f0121b5d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121b60:	83 ec 0c             	sub    $0xc,%esp
f0121b63:	6a 03                	push   $0x3
f0121b65:	e8 d3 b4 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121b6a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121b6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b74:	e9 82 00 00 00       	jmp    f0121bfb <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0121b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121b7c:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121b83:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121b86:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b89:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121b8c:	e8 9a b4 fe ff       	call   f010d02b <sys_rcr2>
f0121b91:	89 c2                	mov    %eax,%edx
f0121b93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b96:	39 c2                	cmp    %eax,%edx
f0121b98:	74 17                	je     f0121bb1 <test_kfree+0x1e98>
f0121b9a:	83 ec 04             	sub    $0x4,%esp
f0121b9d:	68 00 bb 13 f0       	push   $0xf013bb00
f0121ba2:	68 33 06 00 00       	push   $0x633
f0121ba7:	68 9a b2 13 f0       	push   $0xf013b29a
f0121bac:	e8 54 e6 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0121bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121bb4:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121bbb:	89 c2                	mov    %eax,%edx
f0121bbd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bc0:	01 d0                	add    %edx,%eax
f0121bc2:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121bc5:	e8 61 b4 fe ff       	call   f010d02b <sys_rcr2>
f0121bca:	89 c2                	mov    %eax,%edx
f0121bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121bcf:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121bd6:	89 c1                	mov    %eax,%ecx
f0121bd8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bdb:	01 c8                	add    %ecx,%eax
f0121bdd:	39 c2                	cmp    %eax,%edx
f0121bdf:	74 17                	je     f0121bf8 <test_kfree+0x1edf>
f0121be1:	83 ec 04             	sub    $0x4,%esp
f0121be4:	68 00 bb 13 f0       	push   $0xf013bb00
f0121be9:	68 35 06 00 00       	push   $0x635
f0121bee:	68 9a b2 13 f0       	push   $0xf013b29a
f0121bf3:	e8 0d e6 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121bf8:	ff 45 f4             	incl   -0xc(%ebp)
f0121bfb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121bff:	0f 8e 74 ff ff ff    	jle    f0121b79 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121c05:	83 ec 0c             	sub    $0xc,%esp
f0121c08:	6a 00                	push   $0x0
f0121c0a:	e8 2e b4 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121c0f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121c12:	83 ec 0c             	sub    $0xc,%esp
f0121c15:	68 45 bb 13 f0       	push   $0xf013bb45
f0121c1a:	e8 ef f0 fd ff       	call   f0100d0e <cprintf>
f0121c1f:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c22:	e8 76 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c2a:	e8 99 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121c32:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121c38:	83 ec 0c             	sub    $0xc,%esp
f0121c3b:	50                   	push   %eax
f0121c3c:	e8 0f 5d fe ff       	call   f0107950 <kfree>
f0121c41:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c44:	e8 7f 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c49:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c4c:	74 17                	je     f0121c65 <test_kfree+0x1f4c>
f0121c4e:	83 ec 04             	sub    $0x4,%esp
f0121c51:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121c56:	68 43 06 00 00       	push   $0x643
f0121c5b:	68 9a b2 13 f0       	push   $0xf013b29a
f0121c60:	e8 a0 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121c65:	e8 33 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c6a:	89 c2                	mov    %eax,%edx
f0121c6c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c6f:	39 c2                	cmp    %eax,%edx
f0121c71:	74 17                	je     f0121c8a <test_kfree+0x1f71>
f0121c73:	83 ec 04             	sub    $0x4,%esp
f0121c76:	68 4c bb 13 f0       	push   $0xf013bb4c
f0121c7b:	68 44 06 00 00       	push   $0x644
f0121c80:	68 9a b2 13 f0       	push   $0xf013b29a
f0121c85:	e8 7b e5 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c8a:	e8 0e af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c92:	e8 31 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c97:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121c9a:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121ca0:	83 ec 0c             	sub    $0xc,%esp
f0121ca3:	50                   	push   %eax
f0121ca4:	e8 a7 5c fe ff       	call   f0107950 <kfree>
f0121ca9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cac:	e8 17 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cb4:	74 17                	je     f0121ccd <test_kfree+0x1fb4>
f0121cb6:	83 ec 04             	sub    $0x4,%esp
f0121cb9:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121cbe:	68 4a 06 00 00       	push   $0x64a
f0121cc3:	68 9a b2 13 f0       	push   $0xf013b29a
f0121cc8:	e8 38 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121ccd:	e8 cb ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121cd2:	89 c2                	mov    %eax,%edx
f0121cd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121cd7:	39 c2                	cmp    %eax,%edx
f0121cd9:	74 17                	je     f0121cf2 <test_kfree+0x1fd9>
f0121cdb:	83 ec 04             	sub    $0x4,%esp
f0121cde:	68 4c bb 13 f0       	push   $0xf013bb4c
f0121ce3:	68 4b 06 00 00       	push   $0x64b
f0121ce8:	68 9a b2 13 f0       	push   $0xf013b29a
f0121ced:	e8 13 e5 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121cf2:	e8 a6 ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121cf7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cfa:	e8 c9 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121d02:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121d08:	83 ec 0c             	sub    $0xc,%esp
f0121d0b:	50                   	push   %eax
f0121d0c:	e8 3f 5c fe ff       	call   f0107950 <kfree>
f0121d11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d14:	e8 af 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d19:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d1c:	74 17                	je     f0121d35 <test_kfree+0x201c>
f0121d1e:	83 ec 04             	sub    $0x4,%esp
f0121d21:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121d26:	68 51 06 00 00       	push   $0x651
f0121d2b:	68 9a b2 13 f0       	push   $0xf013b29a
f0121d30:	e8 d0 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121d35:	e8 63 ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121d3a:	89 c2                	mov    %eax,%edx
f0121d3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d3f:	39 c2                	cmp    %eax,%edx
f0121d41:	74 17                	je     f0121d5a <test_kfree+0x2041>
f0121d43:	83 ec 04             	sub    $0x4,%esp
f0121d46:	68 4c bb 13 f0       	push   $0xf013bb4c
f0121d4b:	68 52 06 00 00       	push   $0x652
f0121d50:	68 9a b2 13 f0       	push   $0xf013b29a
f0121d55:	e8 ab e4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121d5a:	e8 3e ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121d5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d62:	e8 61 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121d6a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121d70:	83 ec 0c             	sub    $0xc,%esp
f0121d73:	50                   	push   %eax
f0121d74:	e8 d7 5b fe ff       	call   f0107950 <kfree>
f0121d79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d7c:	e8 47 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d84:	74 17                	je     f0121d9d <test_kfree+0x2084>
f0121d86:	83 ec 04             	sub    $0x4,%esp
f0121d89:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121d8e:	68 58 06 00 00       	push   $0x658
f0121d93:	68 9a b2 13 f0       	push   $0xf013b29a
f0121d98:	e8 68 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121d9d:	e8 fb ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121da2:	89 c2                	mov    %eax,%edx
f0121da4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121da7:	39 c2                	cmp    %eax,%edx
f0121da9:	74 17                	je     f0121dc2 <test_kfree+0x20a9>
f0121dab:	83 ec 04             	sub    $0x4,%esp
f0121dae:	68 4c bb 13 f0       	push   $0xf013bb4c
f0121db3:	68 59 06 00 00       	push   $0x659
f0121db8:	68 9a b2 13 f0       	push   $0xf013b29a
f0121dbd:	e8 43 e4 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0121dc2:	83 ec 0c             	sub    $0xc,%esp
f0121dc5:	68 93 bb 13 f0       	push   $0xf013bb93
f0121dca:	e8 3f ef fd ff       	call   f0100d0e <cprintf>
f0121dcf:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121dd2:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121dd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121de0:	eb 48                	jmp    f0121e2a <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121de2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121de5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0121dea:	83 ec 04             	sub    $0x4,%esp
f0121ded:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121df3:	51                   	push   %ecx
f0121df4:	52                   	push   %edx
f0121df5:	50                   	push   %eax
f0121df6:	e8 b6 4c fe ff       	call   f0106ab1 <get_page_table>
f0121dfb:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121dfe:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121e04:	85 c0                	test   %eax,%eax
f0121e06:	75 17                	jne    f0121e1f <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121e08:	83 ec 04             	sub    $0x4,%esp
f0121e0b:	68 9c bb 13 f0       	push   $0xf013bb9c
f0121e10:	68 67 06 00 00       	push   $0x667
f0121e15:	68 9a b2 13 f0       	push   $0xf013b29a
f0121e1a:	e8 e6 e3 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121e1f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121e26:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121e2a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121e2e:	78 b2                	js     f0121de2 <test_kfree+0x20c9>
f0121e30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121e34:	7f 09                	jg     f0121e3f <test_kfree+0x2126>
f0121e36:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121e3d:	76 a3                	jbe    f0121de2 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121e3f:	83 ec 0c             	sub    $0xc,%esp
f0121e42:	68 7e b4 13 f0       	push   $0xf013b47e
f0121e47:	e8 c2 ee fd ff       	call   f0100d0e <cprintf>
f0121e4c:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121e4f:	83 ec 0c             	sub    $0xc,%esp
f0121e52:	68 04 bc 13 f0       	push   $0xf013bc04
f0121e57:	e8 b2 ee fd ff       	call   f0100d0e <cprintf>
f0121e5c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121e5f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121e64:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121e67:	5b                   	pop    %ebx
f0121e68:	5f                   	pop    %edi
f0121e69:	5d                   	pop    %ebp
f0121e6a:	c3                   	ret    

f0121e6b <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121e6b:	55                   	push   %ebp
f0121e6c:	89 e5                	mov    %esp,%ebp
f0121e6e:	57                   	push   %edi
f0121e6f:	53                   	push   %ebx
f0121e70:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121e76:	83 ec 0c             	sub    $0xc,%esp
f0121e79:	68 dc b1 13 f0       	push   $0xf013b1dc
f0121e7e:	e8 8b ee fd ff       	call   f0100d0e <cprintf>
f0121e83:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121e86:	83 ec 0c             	sub    $0xc,%esp
f0121e89:	68 0c b2 13 f0       	push   $0xf013b20c
f0121e8e:	e8 7b ee fd ff       	call   f0100d0e <cprintf>
f0121e93:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121e96:	83 ec 0c             	sub    $0xc,%esp
f0121e99:	68 dc b1 13 f0       	push   $0xf013b1dc
f0121e9e:	e8 6b ee fd ff       	call   f0100d0e <cprintf>
f0121ea3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121ea6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121eaa:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121eae:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121eb4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121eba:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121ec1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121ec8:	e8 d0 ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ecd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121ed0:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121ed6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121edb:	b8 00 00 00 00       	mov    $0x0,%eax
f0121ee0:	89 d7                	mov    %edx,%edi
f0121ee2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121ee4:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121eea:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121eef:	b8 00 00 00 00       	mov    $0x0,%eax
f0121ef4:	89 d7                	mov    %edx,%edi
f0121ef6:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121ef8:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121efe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121f03:	b8 00 00 00 00       	mov    $0x0,%eax
f0121f08:	89 d7                	mov    %edx,%edi
f0121f0a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f0c:	e8 8c ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121f11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f14:	e8 af 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121f1c:	83 ec 0c             	sub    $0xc,%esp
f0121f1f:	68 00 fc 1f 00       	push   $0x1ffc00
f0121f24:	e8 5c 59 fe ff       	call   f0107885 <kmalloc>
f0121f29:	83 c4 10             	add    $0x10,%esp
f0121f2c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f32:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121f38:	89 c1                	mov    %eax,%ecx
f0121f3a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121f41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121f44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f49:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121f4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f54:	f7 75 c8             	divl   -0x38(%ebp)
f0121f57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121f5a:	29 d0                	sub    %edx,%eax
f0121f5c:	89 c3                	mov    %eax,%ebx
f0121f5e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121f65:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121f6a:	0f b6 d0             	movzbl %al,%edx
f0121f6d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121f70:	01 d0                	add    %edx,%eax
f0121f72:	48                   	dec    %eax
f0121f73:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121f76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121f79:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f7e:	f7 75 c0             	divl   -0x40(%ebp)
f0121f81:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121f84:	29 d0                	sub    %edx,%eax
f0121f86:	01 c3                	add    %eax,%ebx
f0121f88:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121f8f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121f94:	0f b6 c0             	movzbl %al,%eax
f0121f97:	c1 e0 04             	shl    $0x4,%eax
f0121f9a:	89 c2                	mov    %eax,%edx
f0121f9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121f9f:	01 d0                	add    %edx,%eax
f0121fa1:	48                   	dec    %eax
f0121fa2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121fa5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121fa8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fad:	f7 75 b8             	divl   -0x48(%ebp)
f0121fb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121fb3:	29 d0                	sub    %edx,%eax
f0121fb5:	01 d8                	add    %ebx,%eax
f0121fb7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121fbc:	39 c1                	cmp    %eax,%ecx
f0121fbe:	74 17                	je     f0121fd7 <test_kfree_bestfirstfit+0x16c>
f0121fc0:	83 ec 04             	sub    $0x4,%esp
f0121fc3:	68 80 b3 13 f0       	push   $0xf013b380
f0121fc8:	68 95 06 00 00       	push   $0x695
f0121fcd:	68 9a b2 13 f0       	push   $0xf013b29a
f0121fd2:	e8 2e e2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fd7:	e8 ec 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fdc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fdf:	74 17                	je     f0121ff8 <test_kfree_bestfirstfit+0x18d>
f0121fe1:	83 ec 04             	sub    $0x4,%esp
f0121fe4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0121fe9:	68 96 06 00 00       	push   $0x696
f0121fee:	68 9a b2 13 f0       	push   $0xf013b29a
f0121ff3:	e8 0d e2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ff8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ffb:	e8 9d ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122000:	29 c3                	sub    %eax,%ebx
f0122002:	89 d8                	mov    %ebx,%eax
f0122004:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122009:	74 17                	je     f0122022 <test_kfree_bestfirstfit+0x1b7>
f012200b:	83 ec 04             	sub    $0x4,%esp
f012200e:	68 1c b3 13 f0       	push   $0xf013b31c
f0122013:	68 97 06 00 00       	push   $0x697
f0122018:	68 9a b2 13 f0       	push   $0xf013b29a
f012201d:	e8 e3 e1 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0122022:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0122029:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012202c:	e8 6c ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122031:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122034:	e8 8f 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122039:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012203c:	83 ec 0c             	sub    $0xc,%esp
f012203f:	68 00 fc 1f 00       	push   $0x1ffc00
f0122044:	e8 3c 58 fe ff       	call   f0107885 <kmalloc>
f0122049:	83 c4 10             	add    $0x10,%esp
f012204c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122052:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122058:	89 c1                	mov    %eax,%ecx
f012205a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0122061:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0122064:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122069:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012206c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012206f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122074:	f7 75 b0             	divl   -0x50(%ebp)
f0122077:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012207a:	29 d0                	sub    %edx,%eax
f012207c:	89 c3                	mov    %eax,%ebx
f012207e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122085:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012208a:	0f b6 d0             	movzbl %al,%edx
f012208d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122090:	01 d0                	add    %edx,%eax
f0122092:	48                   	dec    %eax
f0122093:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122096:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122099:	ba 00 00 00 00       	mov    $0x0,%edx
f012209e:	f7 75 a8             	divl   -0x58(%ebp)
f01220a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01220a4:	29 d0                	sub    %edx,%eax
f01220a6:	01 c3                	add    %eax,%ebx
f01220a8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01220af:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01220b4:	0f b6 c0             	movzbl %al,%eax
f01220b7:	c1 e0 04             	shl    $0x4,%eax
f01220ba:	89 c2                	mov    %eax,%edx
f01220bc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01220bf:	01 d0                	add    %edx,%eax
f01220c1:	48                   	dec    %eax
f01220c2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01220c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01220c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01220cd:	f7 75 a0             	divl   -0x60(%ebp)
f01220d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01220d3:	29 d0                	sub    %edx,%eax
f01220d5:	01 d8                	add    %ebx,%eax
f01220d7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01220dc:	39 c1                	cmp    %eax,%ecx
f01220de:	74 17                	je     f01220f7 <test_kfree_bestfirstfit+0x28c>
f01220e0:	83 ec 04             	sub    $0x4,%esp
f01220e3:	68 80 b3 13 f0       	push   $0xf013b380
f01220e8:	68 9e 06 00 00       	push   $0x69e
f01220ed:	68 9a b2 13 f0       	push   $0xf013b29a
f01220f2:	e8 0e e1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220f7:	e8 cc 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220ff:	74 17                	je     f0122118 <test_kfree_bestfirstfit+0x2ad>
f0122101:	83 ec 04             	sub    $0x4,%esp
f0122104:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122109:	68 9f 06 00 00       	push   $0x69f
f012210e:	68 9a b2 13 f0       	push   $0xf013b29a
f0122113:	e8 ed e0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122118:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012211b:	e8 7d aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122120:	29 c3                	sub    %eax,%ebx
f0122122:	89 d8                	mov    %ebx,%eax
f0122124:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122129:	74 17                	je     f0122142 <test_kfree_bestfirstfit+0x2d7>
f012212b:	83 ec 04             	sub    $0x4,%esp
f012212e:	68 1c b3 13 f0       	push   $0xf013b31c
f0122133:	68 a0 06 00 00       	push   $0x6a0
f0122138:	68 9a b2 13 f0       	push   $0xf013b29a
f012213d:	e8 c3 e0 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0122142:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122149:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012214c:	e8 4c aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122151:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122154:	e8 6f 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122159:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012215c:	83 ec 0c             	sub    $0xc,%esp
f012215f:	68 00 08 00 00       	push   $0x800
f0122164:	e8 1c 57 fe ff       	call   f0107885 <kmalloc>
f0122169:	83 c4 10             	add    $0x10,%esp
f012216c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122172:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122178:	89 c1                	mov    %eax,%ecx
f012217a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122181:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122184:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122189:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012218c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012218f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122194:	f7 75 98             	divl   -0x68(%ebp)
f0122197:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012219a:	29 d0                	sub    %edx,%eax
f012219c:	89 c3                	mov    %eax,%ebx
f012219e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01221a5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01221aa:	0f b6 d0             	movzbl %al,%edx
f01221ad:	8b 45 90             	mov    -0x70(%ebp),%eax
f01221b0:	01 d0                	add    %edx,%eax
f01221b2:	48                   	dec    %eax
f01221b3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01221b6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01221b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01221be:	f7 75 90             	divl   -0x70(%ebp)
f01221c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01221c4:	29 d0                	sub    %edx,%eax
f01221c6:	01 c3                	add    %eax,%ebx
f01221c8:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01221cf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01221d4:	0f b6 c0             	movzbl %al,%eax
f01221d7:	c1 e0 04             	shl    $0x4,%eax
f01221da:	89 c2                	mov    %eax,%edx
f01221dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01221df:	01 d0                	add    %edx,%eax
f01221e1:	48                   	dec    %eax
f01221e2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01221e5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01221e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01221ed:	f7 75 88             	divl   -0x78(%ebp)
f01221f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01221f3:	29 d0                	sub    %edx,%eax
f01221f5:	01 d8                	add    %ebx,%eax
f01221f7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01221fc:	39 c1                	cmp    %eax,%ecx
f01221fe:	74 17                	je     f0122217 <test_kfree_bestfirstfit+0x3ac>
f0122200:	83 ec 04             	sub    $0x4,%esp
f0122203:	68 80 b3 13 f0       	push   $0xf013b380
f0122208:	68 a7 06 00 00       	push   $0x6a7
f012220d:	68 9a b2 13 f0       	push   $0xf013b29a
f0122212:	e8 ee df fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122217:	e8 ac 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012221c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012221f:	74 17                	je     f0122238 <test_kfree_bestfirstfit+0x3cd>
f0122221:	83 ec 04             	sub    $0x4,%esp
f0122224:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122229:	68 a8 06 00 00       	push   $0x6a8
f012222e:	68 9a b2 13 f0       	push   $0xf013b29a
f0122233:	e8 cd df fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122238:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012223b:	e8 5d a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122240:	29 c3                	sub    %eax,%ebx
f0122242:	89 d8                	mov    %ebx,%eax
f0122244:	83 f8 01             	cmp    $0x1,%eax
f0122247:	74 17                	je     f0122260 <test_kfree_bestfirstfit+0x3f5>
f0122249:	83 ec 04             	sub    $0x4,%esp
f012224c:	68 1c b3 13 f0       	push   $0xf013b31c
f0122251:	68 a9 06 00 00       	push   $0x6a9
f0122256:	68 9a b2 13 f0       	push   $0xf013b29a
f012225b:	e8 a5 df fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122260:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122267:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012226a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122270:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012227a:	eb 0e                	jmp    f012228a <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f012227c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012227f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122282:	01 d0                	add    %edx,%eax
f0122284:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122287:	ff 45 f4             	incl   -0xc(%ebp)
f012228a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122290:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122293:	7f e7                	jg     f012227c <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122295:	e8 03 a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012229a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012229d:	e8 26 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01222a5:	83 ec 0c             	sub    $0xc,%esp
f01222a8:	68 00 08 00 00       	push   $0x800
f01222ad:	e8 d3 55 fe ff       	call   f0107885 <kmalloc>
f01222b2:	83 c4 10             	add    $0x10,%esp
f01222b5:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222bb:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01222c1:	89 c1                	mov    %eax,%ecx
f01222c3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01222ca:	10 00 00 
f01222cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01222d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01222d8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01222de:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01222e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01222e9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01222ef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01222f5:	29 d0                	sub    %edx,%eax
f01222f7:	89 c3                	mov    %eax,%ebx
f01222f9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122300:	10 00 00 
f0122303:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122308:	0f b6 d0             	movzbl %al,%edx
f012230b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122311:	01 d0                	add    %edx,%eax
f0122313:	48                   	dec    %eax
f0122314:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012231a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122320:	ba 00 00 00 00       	mov    $0x0,%edx
f0122325:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012232b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122331:	29 d0                	sub    %edx,%eax
f0122333:	01 c3                	add    %eax,%ebx
f0122335:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012233c:	10 00 00 
f012233f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122344:	0f b6 c0             	movzbl %al,%eax
f0122347:	c1 e0 04             	shl    $0x4,%eax
f012234a:	89 c2                	mov    %eax,%edx
f012234c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122352:	01 d0                	add    %edx,%eax
f0122354:	48                   	dec    %eax
f0122355:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012235b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122361:	ba 00 00 00 00       	mov    $0x0,%edx
f0122366:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012236c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122372:	29 d0                	sub    %edx,%eax
f0122374:	01 d8                	add    %ebx,%eax
f0122376:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012237b:	39 c1                	cmp    %eax,%ecx
f012237d:	74 17                	je     f0122396 <test_kfree_bestfirstfit+0x52b>
f012237f:	83 ec 04             	sub    $0x4,%esp
f0122382:	68 80 b3 13 f0       	push   $0xf013b380
f0122387:	68 b5 06 00 00       	push   $0x6b5
f012238c:	68 9a b2 13 f0       	push   $0xf013b29a
f0122391:	e8 6f de fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122396:	e8 2d 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012239b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012239e:	74 17                	je     f01223b7 <test_kfree_bestfirstfit+0x54c>
f01223a0:	83 ec 04             	sub    $0x4,%esp
f01223a3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01223a8:	68 b6 06 00 00       	push   $0x6b6
f01223ad:	68 9a b2 13 f0       	push   $0xf013b29a
f01223b2:	e8 4e de fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223ba:	e8 de a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01223bf:	29 c3                	sub    %eax,%ebx
f01223c1:	89 d8                	mov    %ebx,%eax
f01223c3:	83 f8 01             	cmp    $0x1,%eax
f01223c6:	74 17                	je     f01223df <test_kfree_bestfirstfit+0x574>
f01223c8:	83 ec 04             	sub    $0x4,%esp
f01223cb:	68 1c b3 13 f0       	push   $0xf013b31c
f01223d0:	68 b7 06 00 00       	push   $0x6b7
f01223d5:	68 9a b2 13 f0       	push   $0xf013b29a
f01223da:	e8 26 de fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01223df:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01223e6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01223e9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01223ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01223f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01223f9:	eb 0e                	jmp    f0122409 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f01223fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01223fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122401:	01 d0                	add    %edx,%eax
f0122403:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122406:	ff 45 f4             	incl   -0xc(%ebp)
f0122409:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012240f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122412:	7f e7                	jg     f01223fb <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122414:	e8 84 a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122419:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012241c:	e8 a7 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122421:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122424:	83 ec 0c             	sub    $0xc,%esp
f0122427:	68 00 1c 00 00       	push   $0x1c00
f012242c:	e8 54 54 fe ff       	call   f0107885 <kmalloc>
f0122431:	83 c4 10             	add    $0x10,%esp
f0122434:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012243a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122440:	89 c1                	mov    %eax,%ecx
f0122442:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122449:	10 00 00 
f012244c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122457:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012245d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122463:	ba 00 00 00 00       	mov    $0x0,%edx
f0122468:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012246e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122474:	29 d0                	sub    %edx,%eax
f0122476:	89 c3                	mov    %eax,%ebx
f0122478:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012247f:	10 00 00 
f0122482:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122487:	0f b6 d0             	movzbl %al,%edx
f012248a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122490:	01 d0                	add    %edx,%eax
f0122492:	48                   	dec    %eax
f0122493:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122499:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012249f:	ba 00 00 00 00       	mov    $0x0,%edx
f01224a4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01224aa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01224b0:	29 d0                	sub    %edx,%eax
f01224b2:	01 c3                	add    %eax,%ebx
f01224b4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01224bb:	10 00 00 
f01224be:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01224c3:	0f b6 c0             	movzbl %al,%eax
f01224c6:	c1 e0 04             	shl    $0x4,%eax
f01224c9:	89 c2                	mov    %eax,%edx
f01224cb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01224d1:	01 d0                	add    %edx,%eax
f01224d3:	48                   	dec    %eax
f01224d4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01224da:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01224e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01224e5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01224eb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01224f1:	29 d0                	sub    %edx,%eax
f01224f3:	01 d8                	add    %ebx,%eax
f01224f5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01224fa:	39 c1                	cmp    %eax,%ecx
f01224fc:	74 17                	je     f0122515 <test_kfree_bestfirstfit+0x6aa>
f01224fe:	83 ec 04             	sub    $0x4,%esp
f0122501:	68 80 b3 13 f0       	push   $0xf013b380
f0122506:	68 c3 06 00 00       	push   $0x6c3
f012250b:	68 9a b2 13 f0       	push   $0xf013b29a
f0122510:	e8 f0 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122515:	e8 ae 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012251a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012251d:	74 17                	je     f0122536 <test_kfree_bestfirstfit+0x6cb>
f012251f:	83 ec 04             	sub    $0x4,%esp
f0122522:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122527:	68 c4 06 00 00       	push   $0x6c4
f012252c:	68 9a b2 13 f0       	push   $0xf013b29a
f0122531:	e8 cf dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122536:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122539:	e8 5f a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012253e:	29 c3                	sub    %eax,%ebx
f0122540:	89 d8                	mov    %ebx,%eax
f0122542:	83 f8 02             	cmp    $0x2,%eax
f0122545:	74 17                	je     f012255e <test_kfree_bestfirstfit+0x6f3>
f0122547:	83 ec 04             	sub    $0x4,%esp
f012254a:	68 1c b3 13 f0       	push   $0xf013b31c
f012254f:	68 c5 06 00 00       	push   $0x6c5
f0122554:	68 9a b2 13 f0       	push   $0xf013b29a
f0122559:	e8 a7 dc fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012255e:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122565:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122568:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012256e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122571:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122578:	eb 0e                	jmp    f0122588 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f012257a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012257d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122580:	01 d0                	add    %edx,%eax
f0122582:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122585:	ff 45 f4             	incl   -0xc(%ebp)
f0122588:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012258e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122591:	7f e7                	jg     f012257a <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122593:	e8 05 a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122598:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012259b:	e8 28 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01225a3:	83 ec 0c             	sub    $0xc,%esp
f01225a6:	68 00 fc 2f 00       	push   $0x2ffc00
f01225ab:	e8 d5 52 fe ff       	call   f0107885 <kmalloc>
f01225b0:	83 c4 10             	add    $0x10,%esp
f01225b3:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225b9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01225bf:	89 c1                	mov    %eax,%ecx
f01225c1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01225c8:	10 00 00 
f01225cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01225d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01225d6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01225dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01225e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01225e7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01225ed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01225f3:	29 d0                	sub    %edx,%eax
f01225f5:	89 c3                	mov    %eax,%ebx
f01225f7:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01225fe:	10 00 00 
f0122601:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122606:	0f b6 d0             	movzbl %al,%edx
f0122609:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012260f:	01 d0                	add    %edx,%eax
f0122611:	48                   	dec    %eax
f0122612:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122618:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012261e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122623:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122629:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012262f:	29 d0                	sub    %edx,%eax
f0122631:	01 c3                	add    %eax,%ebx
f0122633:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012263a:	10 00 00 
f012263d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122642:	0f b6 c0             	movzbl %al,%eax
f0122645:	c1 e0 04             	shl    $0x4,%eax
f0122648:	89 c2                	mov    %eax,%edx
f012264a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122650:	01 d0                	add    %edx,%eax
f0122652:	48                   	dec    %eax
f0122653:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122659:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012265f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122664:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012266a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122670:	29 d0                	sub    %edx,%eax
f0122672:	01 d8                	add    %ebx,%eax
f0122674:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122679:	39 c1                	cmp    %eax,%ecx
f012267b:	74 17                	je     f0122694 <test_kfree_bestfirstfit+0x829>
f012267d:	83 ec 04             	sub    $0x4,%esp
f0122680:	68 80 b3 13 f0       	push   $0xf013b380
f0122685:	68 d1 06 00 00       	push   $0x6d1
f012268a:	68 9a b2 13 f0       	push   $0xf013b29a
f012268f:	e8 71 db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122694:	e8 2f 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122699:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012269c:	74 17                	je     f01226b5 <test_kfree_bestfirstfit+0x84a>
f012269e:	83 ec 04             	sub    $0x4,%esp
f01226a1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01226a6:	68 d2 06 00 00       	push   $0x6d2
f01226ab:	68 9a b2 13 f0       	push   $0xf013b29a
f01226b0:	e8 50 db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226b8:	e8 e0 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01226bd:	29 c3                	sub    %eax,%ebx
f01226bf:	89 d8                	mov    %ebx,%eax
f01226c1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01226c6:	74 17                	je     f01226df <test_kfree_bestfirstfit+0x874>
f01226c8:	83 ec 04             	sub    $0x4,%esp
f01226cb:	68 1c b3 13 f0       	push   $0xf013b31c
f01226d0:	68 d3 06 00 00       	push   $0x6d3
f01226d5:	68 9a b2 13 f0       	push   $0xf013b29a
f01226da:	e8 26 db fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01226df:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01226e6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01226e9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01226ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01226f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226f9:	eb 0e                	jmp    f0122709 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f01226fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01226fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122701:	01 d0                	add    %edx,%eax
f0122703:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122706:	ff 45 f4             	incl   -0xc(%ebp)
f0122709:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012270f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122712:	7f e7                	jg     f01226fb <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122714:	e8 84 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122719:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012271c:	e8 a7 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122721:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122724:	83 ec 0c             	sub    $0xc,%esp
f0122727:	68 00 fc 5f 00       	push   $0x5ffc00
f012272c:	e8 54 51 fe ff       	call   f0107885 <kmalloc>
f0122731:	83 c4 10             	add    $0x10,%esp
f0122734:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012273a:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122740:	89 c1                	mov    %eax,%ecx
f0122742:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122749:	10 00 00 
f012274c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122752:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122757:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012275d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122763:	ba 00 00 00 00       	mov    $0x0,%edx
f0122768:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012276e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122774:	29 d0                	sub    %edx,%eax
f0122776:	89 c3                	mov    %eax,%ebx
f0122778:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012277f:	10 00 00 
f0122782:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122787:	0f b6 d0             	movzbl %al,%edx
f012278a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122790:	01 d0                	add    %edx,%eax
f0122792:	48                   	dec    %eax
f0122793:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122799:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012279f:	ba 00 00 00 00       	mov    $0x0,%edx
f01227a4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01227aa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01227b0:	29 d0                	sub    %edx,%eax
f01227b2:	01 c3                	add    %eax,%ebx
f01227b4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01227bb:	10 00 00 
f01227be:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01227c3:	0f b6 c0             	movzbl %al,%eax
f01227c6:	c1 e0 04             	shl    $0x4,%eax
f01227c9:	89 c2                	mov    %eax,%edx
f01227cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01227d1:	01 d0                	add    %edx,%eax
f01227d3:	48                   	dec    %eax
f01227d4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01227da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01227e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01227e5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01227eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01227f1:	29 d0                	sub    %edx,%eax
f01227f3:	01 d8                	add    %ebx,%eax
f01227f5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01227fa:	39 c1                	cmp    %eax,%ecx
f01227fc:	74 17                	je     f0122815 <test_kfree_bestfirstfit+0x9aa>
f01227fe:	83 ec 04             	sub    $0x4,%esp
f0122801:	68 80 b3 13 f0       	push   $0xf013b380
f0122806:	68 df 06 00 00       	push   $0x6df
f012280b:	68 9a b2 13 f0       	push   $0xf013b29a
f0122810:	e8 f0 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122815:	e8 ae 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012281a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012281d:	74 17                	je     f0122836 <test_kfree_bestfirstfit+0x9cb>
f012281f:	83 ec 04             	sub    $0x4,%esp
f0122822:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122827:	68 e0 06 00 00       	push   $0x6e0
f012282c:	68 9a b2 13 f0       	push   $0xf013b29a
f0122831:	e8 cf d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122836:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122839:	e8 5f a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012283e:	29 c3                	sub    %eax,%ebx
f0122840:	89 d8                	mov    %ebx,%eax
f0122842:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122847:	74 17                	je     f0122860 <test_kfree_bestfirstfit+0x9f5>
f0122849:	83 ec 04             	sub    $0x4,%esp
f012284c:	68 1c b3 13 f0       	push   $0xf013b31c
f0122851:	68 e1 06 00 00       	push   $0x6e1
f0122856:	68 9a b2 13 f0       	push   $0xf013b29a
f012285b:	e8 a5 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122860:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122867:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012286a:	e8 2e a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012286f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122872:	e8 51 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122877:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012287a:	83 ec 0c             	sub    $0xc,%esp
f012287d:	68 00 38 00 00       	push   $0x3800
f0122882:	e8 fe 4f fe ff       	call   f0107885 <kmalloc>
f0122887:	83 c4 10             	add    $0x10,%esp
f012288a:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122890:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122896:	89 c1                	mov    %eax,%ecx
f0122898:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012289f:	10 00 00 
f01228a2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01228a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228ad:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01228b3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01228b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01228be:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01228c4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01228ca:	29 d0                	sub    %edx,%eax
f01228cc:	89 c3                	mov    %eax,%ebx
f01228ce:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01228d5:	10 00 00 
f01228d8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01228dd:	0f b6 d0             	movzbl %al,%edx
f01228e0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01228e6:	01 d0                	add    %edx,%eax
f01228e8:	48                   	dec    %eax
f01228e9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01228ef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01228f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01228fa:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122900:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122906:	29 d0                	sub    %edx,%eax
f0122908:	01 c3                	add    %eax,%ebx
f012290a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122911:	10 00 00 
f0122914:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122919:	0f b6 c0             	movzbl %al,%eax
f012291c:	c1 e0 04             	shl    $0x4,%eax
f012291f:	89 c2                	mov    %eax,%edx
f0122921:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122927:	01 d0                	add    %edx,%eax
f0122929:	48                   	dec    %eax
f012292a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122930:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122936:	ba 00 00 00 00       	mov    $0x0,%edx
f012293b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122941:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122947:	29 d0                	sub    %edx,%eax
f0122949:	01 d8                	add    %ebx,%eax
f012294b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122950:	39 c1                	cmp    %eax,%ecx
f0122952:	74 17                	je     f012296b <test_kfree_bestfirstfit+0xb00>
f0122954:	83 ec 04             	sub    $0x4,%esp
f0122957:	68 80 b3 13 f0       	push   $0xf013b380
f012295c:	68 e8 06 00 00       	push   $0x6e8
f0122961:	68 9a b2 13 f0       	push   $0xf013b29a
f0122966:	e8 9a d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012296b:	e8 58 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122970:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122973:	74 17                	je     f012298c <test_kfree_bestfirstfit+0xb21>
f0122975:	83 ec 04             	sub    $0x4,%esp
f0122978:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012297d:	68 e9 06 00 00       	push   $0x6e9
f0122982:	68 9a b2 13 f0       	push   $0xf013b29a
f0122987:	e8 79 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012298c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012298f:	e8 09 a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122994:	29 c3                	sub    %eax,%ebx
f0122996:	89 d8                	mov    %ebx,%eax
f0122998:	83 f8 04             	cmp    $0x4,%eax
f012299b:	74 17                	je     f01229b4 <test_kfree_bestfirstfit+0xb49>
f012299d:	83 ec 04             	sub    $0x4,%esp
f01229a0:	68 1c b3 13 f0       	push   $0xf013b31c
f01229a5:	68 ea 06 00 00       	push   $0x6ea
f01229aa:	68 9a b2 13 f0       	push   $0xf013b29a
f01229af:	e8 51 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01229b4:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01229bb:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01229be:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01229c4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01229c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01229ce:	eb 0e                	jmp    f01229de <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01229d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01229d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01229d6:	01 d0                	add    %edx,%eax
f01229d8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01229db:	ff 45 f4             	incl   -0xc(%ebp)
f01229de:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01229e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229e7:	7f e7                	jg     f01229d0 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01229e9:	e8 af a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01229ee:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01229f4:	e8 cf 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229f9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01229ff:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122a05:	83 ec 0c             	sub    $0xc,%esp
f0122a08:	50                   	push   %eax
f0122a09:	e8 42 4f fe ff       	call   f0107950 <kfree>
f0122a0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a11:	e8 b2 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a16:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122a1c:	74 17                	je     f0122a35 <test_kfree_bestfirstfit+0xbca>
f0122a1e:	83 ec 04             	sub    $0x4,%esp
f0122a21:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122a26:	68 f9 06 00 00       	push   $0x6f9
f0122a2b:	68 9a b2 13 f0       	push   $0xf013b29a
f0122a30:	e8 d0 d7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a35:	e8 63 a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122a3a:	89 c2                	mov    %eax,%edx
f0122a3c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122a42:	29 c2                	sub    %eax,%edx
f0122a44:	89 d0                	mov    %edx,%eax
f0122a46:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a4b:	74 17                	je     f0122a64 <test_kfree_bestfirstfit+0xbf9>
f0122a4d:	83 ec 04             	sub    $0x4,%esp
f0122a50:	68 24 ba 13 f0       	push   $0xf013ba24
f0122a55:	68 fa 06 00 00       	push   $0x6fa
f0122a5a:	68 9a b2 13 f0       	push   $0xf013b29a
f0122a5f:	e8 a1 d7 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a64:	e8 34 a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122a69:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a6f:	e8 54 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a74:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122a7a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122a80:	83 ec 0c             	sub    $0xc,%esp
f0122a83:	50                   	push   %eax
f0122a84:	e8 c7 4e fe ff       	call   f0107950 <kfree>
f0122a89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a8c:	e8 37 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a91:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122a97:	74 17                	je     f0122ab0 <test_kfree_bestfirstfit+0xc45>
f0122a99:	83 ec 04             	sub    $0x4,%esp
f0122a9c:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122aa1:	68 00 07 00 00       	push   $0x700
f0122aa6:	68 9a b2 13 f0       	push   $0xf013b29a
f0122aab:	e8 55 d7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ab0:	e8 e8 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ab5:	89 c2                	mov    %eax,%edx
f0122ab7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122abd:	29 c2                	sub    %eax,%edx
f0122abf:	89 d0                	mov    %edx,%eax
f0122ac1:	83 f8 01             	cmp    $0x1,%eax
f0122ac4:	74 17                	je     f0122add <test_kfree_bestfirstfit+0xc72>
f0122ac6:	83 ec 04             	sub    $0x4,%esp
f0122ac9:	68 24 ba 13 f0       	push   $0xf013ba24
f0122ace:	68 01 07 00 00       	push   $0x701
f0122ad3:	68 9a b2 13 f0       	push   $0xf013b29a
f0122ad8:	e8 28 d7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122add:	e8 bb a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ae2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ae8:	e8 db 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122aed:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122af3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122af9:	83 ec 0c             	sub    $0xc,%esp
f0122afc:	50                   	push   %eax
f0122afd:	e8 4e 4e fe ff       	call   f0107950 <kfree>
f0122b02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b05:	e8 be 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b0a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122b10:	74 17                	je     f0122b29 <test_kfree_bestfirstfit+0xcbe>
f0122b12:	83 ec 04             	sub    $0x4,%esp
f0122b15:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122b1a:	68 07 07 00 00       	push   $0x707
f0122b1f:	68 9a b2 13 f0       	push   $0xf013b29a
f0122b24:	e8 dc d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b29:	e8 6f a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b2e:	89 c2                	mov    %eax,%edx
f0122b30:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122b36:	29 c2                	sub    %eax,%edx
f0122b38:	89 d0                	mov    %edx,%eax
f0122b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122b3f:	74 17                	je     f0122b58 <test_kfree_bestfirstfit+0xced>
f0122b41:	83 ec 04             	sub    $0x4,%esp
f0122b44:	68 24 ba 13 f0       	push   $0xf013ba24
f0122b49:	68 08 07 00 00       	push   $0x708
f0122b4e:	68 9a b2 13 f0       	push   $0xf013b29a
f0122b53:	e8 ad d6 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b58:	e8 40 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b5d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b63:	e8 60 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b68:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122b6e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122b74:	83 ec 0c             	sub    $0xc,%esp
f0122b77:	50                   	push   %eax
f0122b78:	e8 d3 4d fe ff       	call   f0107950 <kfree>
f0122b7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b80:	e8 43 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b85:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122b8b:	74 17                	je     f0122ba4 <test_kfree_bestfirstfit+0xd39>
f0122b8d:	83 ec 04             	sub    $0x4,%esp
f0122b90:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122b95:	68 0e 07 00 00       	push   $0x70e
f0122b9a:	68 9a b2 13 f0       	push   $0xf013b29a
f0122b9f:	e8 61 d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ba4:	e8 f4 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ba9:	89 c2                	mov    %eax,%edx
f0122bab:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122bb1:	29 c2                	sub    %eax,%edx
f0122bb3:	89 d0                	mov    %edx,%eax
f0122bb5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122bba:	74 17                	je     f0122bd3 <test_kfree_bestfirstfit+0xd68>
f0122bbc:	83 ec 04             	sub    $0x4,%esp
f0122bbf:	68 24 ba 13 f0       	push   $0xf013ba24
f0122bc4:	68 0f 07 00 00       	push   $0x70f
f0122bc9:	68 9a b2 13 f0       	push   $0xf013b29a
f0122bce:	e8 32 d6 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122bd3:	83 ec 0c             	sub    $0xc,%esp
f0122bd6:	68 5c ba 13 f0       	push   $0xf013ba5c
f0122bdb:	e8 2e e1 fd ff       	call   f0100d0e <cprintf>
f0122be0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122be3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122be9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122bec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122bf3:	eb 1e                	jmp    f0122c13 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122bf5:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122bfb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122bfe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122c01:	01 c8                	add    %ecx,%eax
f0122c03:	8a 00                	mov    (%eax),%al
f0122c05:	0f be c0             	movsbl %al,%eax
f0122c08:	01 d0                	add    %edx,%eax
f0122c0a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122c10:	ff 45 f4             	incl   -0xc(%ebp)
f0122c13:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122c19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122c1c:	7f d7                	jg     f0122bf5 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122c1e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122c24:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122c2a:	89 c1                	mov    %eax,%ecx
f0122c2c:	01 c9                	add    %ecx,%ecx
f0122c2e:	01 c8                	add    %ecx,%eax
f0122c30:	39 c2                	cmp    %eax,%edx
f0122c32:	74 17                	je     f0122c4b <test_kfree_bestfirstfit+0xde0>
f0122c34:	83 ec 04             	sub    $0x4,%esp
f0122c37:	68 80 ba 13 f0       	push   $0xf013ba80
f0122c3c:	68 1c 07 00 00       	push   $0x71c
f0122c41:	68 9a b2 13 f0       	push   $0xf013b29a
f0122c46:	e8 ba d5 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122c4b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122c51:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122c54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122c5b:	eb 1e                	jmp    f0122c7b <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122c5d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122c63:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122c66:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122c69:	01 c8                	add    %ecx,%eax
f0122c6b:	8a 00                	mov    (%eax),%al
f0122c6d:	0f be c0             	movsbl %al,%eax
f0122c70:	01 d0                	add    %edx,%eax
f0122c72:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122c78:	ff 45 f4             	incl   -0xc(%ebp)
f0122c7b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122c81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122c84:	7f d7                	jg     f0122c5d <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122c86:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122c8c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122c92:	c1 e2 02             	shl    $0x2,%edx
f0122c95:	39 d0                	cmp    %edx,%eax
f0122c97:	74 17                	je     f0122cb0 <test_kfree_bestfirstfit+0xe45>
f0122c99:	83 ec 04             	sub    $0x4,%esp
f0122c9c:	68 80 ba 13 f0       	push   $0xf013ba80
f0122ca1:	68 24 07 00 00       	push   $0x724
f0122ca6:	68 9a b2 13 f0       	push   $0xf013b29a
f0122cab:	e8 55 d5 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122cb0:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122cb6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122cb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122cc0:	eb 1e                	jmp    f0122ce0 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122cc2:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122cc8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122ccb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cce:	01 c8                	add    %ecx,%eax
f0122cd0:	8a 00                	mov    (%eax),%al
f0122cd2:	0f be c0             	movsbl %al,%eax
f0122cd5:	01 d0                	add    %edx,%eax
f0122cd7:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122cdd:	ff 45 f4             	incl   -0xc(%ebp)
f0122ce0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122ce6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ce9:	7f d7                	jg     f0122cc2 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122ceb:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122cf1:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122cf7:	89 d0                	mov    %edx,%eax
f0122cf9:	c1 e0 02             	shl    $0x2,%eax
f0122cfc:	01 d0                	add    %edx,%eax
f0122cfe:	39 c1                	cmp    %eax,%ecx
f0122d00:	74 17                	je     f0122d19 <test_kfree_bestfirstfit+0xeae>
f0122d02:	83 ec 04             	sub    $0x4,%esp
f0122d05:	68 80 ba 13 f0       	push   $0xf013ba80
f0122d0a:	68 2c 07 00 00       	push   $0x72c
f0122d0f:	68 9a b2 13 f0       	push   $0xf013b29a
f0122d14:	e8 ec d4 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122d19:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122d1f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122d22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d29:	eb 1e                	jmp    f0122d49 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122d2b:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122d31:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122d34:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d37:	01 c8                	add    %ecx,%eax
f0122d39:	8a 00                	mov    (%eax),%al
f0122d3b:	0f be c0             	movsbl %al,%eax
f0122d3e:	01 d0                	add    %edx,%eax
f0122d40:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122d46:	ff 45 f4             	incl   -0xc(%ebp)
f0122d49:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122d4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d52:	7f d7                	jg     f0122d2b <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122d54:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122d5a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122d60:	89 d0                	mov    %edx,%eax
f0122d62:	01 c0                	add    %eax,%eax
f0122d64:	01 d0                	add    %edx,%eax
f0122d66:	01 c0                	add    %eax,%eax
f0122d68:	01 d0                	add    %edx,%eax
f0122d6a:	39 c1                	cmp    %eax,%ecx
f0122d6c:	74 17                	je     f0122d85 <test_kfree_bestfirstfit+0xf1a>
f0122d6e:	83 ec 04             	sub    $0x4,%esp
f0122d71:	68 80 ba 13 f0       	push   $0xf013ba80
f0122d76:	68 34 07 00 00       	push   $0x734
f0122d7b:	68 9a b2 13 f0       	push   $0xf013b29a
f0122d80:	e8 80 d4 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0122d85:	83 ec 0c             	sub    $0xc,%esp
f0122d88:	68 b3 ba 13 f0       	push   $0xf013bab3
f0122d8d:	e8 7c df fd ff       	call   f0100d0e <cprintf>
f0122d92:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d95:	e8 03 9e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122d9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d9d:	e8 26 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122da2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122da5:	83 ec 0c             	sub    $0xc,%esp
f0122da8:	68 00 00 30 00       	push   $0x300000
f0122dad:	e8 d3 4a fe ff       	call   f0107885 <kmalloc>
f0122db2:	83 c4 10             	add    $0x10,%esp
f0122db5:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122dbb:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122dc1:	89 c1                	mov    %eax,%ecx
f0122dc3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122dca:	10 00 00 
f0122dcd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122dd3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122dd8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122dde:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122de4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122de9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122def:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122df5:	29 d0                	sub    %edx,%eax
f0122df7:	89 c3                	mov    %eax,%ebx
f0122df9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122e00:	10 00 00 
f0122e03:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122e08:	0f b6 d0             	movzbl %al,%edx
f0122e0b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122e11:	01 d0                	add    %edx,%eax
f0122e13:	48                   	dec    %eax
f0122e14:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122e1a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122e20:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e25:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122e2b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122e31:	29 d0                	sub    %edx,%eax
f0122e33:	01 c3                	add    %eax,%ebx
f0122e35:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122e3c:	10 00 00 
f0122e3f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122e44:	0f b6 c0             	movzbl %al,%eax
f0122e47:	c1 e0 04             	shl    $0x4,%eax
f0122e4a:	89 c2                	mov    %eax,%edx
f0122e4c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122e52:	01 d0                	add    %edx,%eax
f0122e54:	48                   	dec    %eax
f0122e55:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122e5b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122e61:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e66:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122e6c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122e72:	29 d0                	sub    %edx,%eax
f0122e74:	01 d8                	add    %ebx,%eax
f0122e76:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122e7b:	39 c1                	cmp    %eax,%ecx
f0122e7d:	74 17                	je     f0122e96 <test_kfree_bestfirstfit+0x102b>
f0122e7f:	83 ec 04             	sub    $0x4,%esp
f0122e82:	68 80 b3 13 f0       	push   $0xf013b380
f0122e87:	68 3f 07 00 00       	push   $0x73f
f0122e8c:	68 9a b2 13 f0       	push   $0xf013b29a
f0122e91:	e8 6f d3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e96:	e8 2d 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e9e:	74 17                	je     f0122eb7 <test_kfree_bestfirstfit+0x104c>
f0122ea0:	83 ec 04             	sub    $0x4,%esp
f0122ea3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0122ea8:	68 40 07 00 00       	push   $0x740
f0122ead:	68 9a b2 13 f0       	push   $0xf013b29a
f0122eb2:	e8 4e d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122eb7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122eba:	e8 de 9c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ebf:	29 c3                	sub    %eax,%ebx
f0122ec1:	89 d8                	mov    %ebx,%eax
f0122ec3:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122ec8:	74 17                	je     f0122ee1 <test_kfree_bestfirstfit+0x1076>
f0122eca:	83 ec 04             	sub    $0x4,%esp
f0122ecd:	68 1c b3 13 f0       	push   $0xf013b31c
f0122ed2:	68 41 07 00 00       	push   $0x741
f0122ed7:	68 9a b2 13 f0       	push   $0xf013b29a
f0122edc:	e8 24 d3 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122ee1:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122ee8:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122eeb:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122ef1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122ef4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122efb:	eb 0e                	jmp    f0122f0b <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122efd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122f00:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122f03:	01 d0                	add    %edx,%eax
f0122f05:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122f08:	ff 45 f4             	incl   -0xc(%ebp)
f0122f0b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122f11:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122f14:	7f e7                	jg     f0122efd <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f16:	e8 82 9c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122f1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f1e:	e8 a5 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f23:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122f26:	83 ec 0c             	sub    $0xc,%esp
f0122f29:	68 00 08 00 00       	push   $0x800
f0122f2e:	e8 52 49 fe ff       	call   f0107885 <kmalloc>
f0122f33:	83 c4 10             	add    $0x10,%esp
f0122f36:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f3c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122f42:	89 c1                	mov    %eax,%ecx
f0122f44:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122f4b:	10 00 00 
f0122f4e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122f54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f59:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122f5f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122f65:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f6a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122f70:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122f76:	29 d0                	sub    %edx,%eax
f0122f78:	89 c3                	mov    %eax,%ebx
f0122f7a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122f81:	10 00 00 
f0122f84:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122f89:	0f b6 d0             	movzbl %al,%edx
f0122f8c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122f92:	01 d0                	add    %edx,%eax
f0122f94:	48                   	dec    %eax
f0122f95:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122f9b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122fa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fa6:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122fac:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122fb2:	29 d0                	sub    %edx,%eax
f0122fb4:	01 c3                	add    %eax,%ebx
f0122fb6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122fbd:	10 00 00 
f0122fc0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122fc5:	0f b6 c0             	movzbl %al,%eax
f0122fc8:	c1 e0 04             	shl    $0x4,%eax
f0122fcb:	89 c2                	mov    %eax,%edx
f0122fcd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122fd3:	01 d0                	add    %edx,%eax
f0122fd5:	48                   	dec    %eax
f0122fd6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122fdc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122fe2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fe7:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122fed:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122ff3:	29 d0                	sub    %edx,%eax
f0122ff5:	01 d8                	add    %ebx,%eax
f0122ff7:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122ffc:	39 c1                	cmp    %eax,%ecx
f0122ffe:	74 17                	je     f0123017 <test_kfree_bestfirstfit+0x11ac>
f0123000:	83 ec 04             	sub    $0x4,%esp
f0123003:	68 80 b3 13 f0       	push   $0xf013b380
f0123008:	68 4d 07 00 00       	push   $0x74d
f012300d:	68 9a b2 13 f0       	push   $0xf013b29a
f0123012:	e8 ee d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123017:	e8 ac 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012301c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012301f:	74 17                	je     f0123038 <test_kfree_bestfirstfit+0x11cd>
f0123021:	83 ec 04             	sub    $0x4,%esp
f0123024:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123029:	68 4e 07 00 00       	push   $0x74e
f012302e:	68 9a b2 13 f0       	push   $0xf013b29a
f0123033:	e8 cd d1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123038:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012303b:	e8 5d 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123040:	29 c3                	sub    %eax,%ebx
f0123042:	89 d8                	mov    %ebx,%eax
f0123044:	83 f8 01             	cmp    $0x1,%eax
f0123047:	74 17                	je     f0123060 <test_kfree_bestfirstfit+0x11f5>
f0123049:	83 ec 04             	sub    $0x4,%esp
f012304c:	68 1c b3 13 f0       	push   $0xf013b31c
f0123051:	68 4f 07 00 00       	push   $0x74f
f0123056:	68 9a b2 13 f0       	push   $0xf013b29a
f012305b:	e8 a5 d1 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0123060:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0123067:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f012306a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123070:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0123073:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012307a:	eb 0e                	jmp    f012308a <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f012307c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012307f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123082:	01 d0                	add    %edx,%eax
f0123084:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123087:	ff 45 f4             	incl   -0xc(%ebp)
f012308a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123090:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123093:	7f e7                	jg     f012307c <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123095:	e8 03 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012309a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012309d:	e8 26 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01230a5:	83 ec 0c             	sub    $0xc,%esp
f01230a8:	68 00 00 10 00       	push   $0x100000
f01230ad:	e8 d3 47 fe ff       	call   f0107885 <kmalloc>
f01230b2:	83 c4 10             	add    $0x10,%esp
f01230b5:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230bb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01230c1:	89 c1                	mov    %eax,%ecx
f01230c3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01230ca:	10 00 00 
f01230cd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01230d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230d8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01230de:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01230e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01230e9:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01230ef:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01230f5:	29 d0                	sub    %edx,%eax
f01230f7:	89 c3                	mov    %eax,%ebx
f01230f9:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123100:	10 00 00 
f0123103:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123108:	0f b6 d0             	movzbl %al,%edx
f012310b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123111:	01 d0                	add    %edx,%eax
f0123113:	48                   	dec    %eax
f0123114:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012311a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123120:	ba 00 00 00 00       	mov    $0x0,%edx
f0123125:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012312b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123131:	29 d0                	sub    %edx,%eax
f0123133:	01 c3                	add    %eax,%ebx
f0123135:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012313c:	10 00 00 
f012313f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123144:	0f b6 c0             	movzbl %al,%eax
f0123147:	c1 e0 04             	shl    $0x4,%eax
f012314a:	89 c2                	mov    %eax,%edx
f012314c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123152:	01 d0                	add    %edx,%eax
f0123154:	48                   	dec    %eax
f0123155:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012315b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123161:	ba 00 00 00 00       	mov    $0x0,%edx
f0123166:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012316c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123172:	29 d0                	sub    %edx,%eax
f0123174:	01 d8                	add    %ebx,%eax
f0123176:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012317b:	39 c1                	cmp    %eax,%ecx
f012317d:	74 17                	je     f0123196 <test_kfree_bestfirstfit+0x132b>
f012317f:	83 ec 04             	sub    $0x4,%esp
f0123182:	68 80 b3 13 f0       	push   $0xf013b380
f0123187:	68 5b 07 00 00       	push   $0x75b
f012318c:	68 9a b2 13 f0       	push   $0xf013b29a
f0123191:	e8 6f d0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123196:	e8 2d 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012319b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012319e:	74 17                	je     f01231b7 <test_kfree_bestfirstfit+0x134c>
f01231a0:	83 ec 04             	sub    $0x4,%esp
f01231a3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01231a8:	68 5c 07 00 00       	push   $0x75c
f01231ad:	68 9a b2 13 f0       	push   $0xf013b29a
f01231b2:	e8 4e d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01231ba:	e8 de 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01231bf:	29 c3                	sub    %eax,%ebx
f01231c1:	89 d8                	mov    %ebx,%eax
f01231c3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01231c8:	74 17                	je     f01231e1 <test_kfree_bestfirstfit+0x1376>
f01231ca:	83 ec 04             	sub    $0x4,%esp
f01231cd:	68 1c b3 13 f0       	push   $0xf013b31c
f01231d2:	68 5d 07 00 00       	push   $0x75d
f01231d7:	68 9a b2 13 f0       	push   $0xf013b29a
f01231dc:	e8 24 d0 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01231e1:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f01231e8:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01231eb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01231f1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01231f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231fb:	eb 0e                	jmp    f012320b <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f01231fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123200:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123203:	01 d0                	add    %edx,%eax
f0123205:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123208:	ff 45 f4             	incl   -0xc(%ebp)
f012320b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123211:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123214:	7f e7                	jg     f01231fd <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123216:	83 ec 0c             	sub    $0xc,%esp
f0123219:	68 ba ba 13 f0       	push   $0xf013baba
f012321e:	e8 eb da fd ff       	call   f0100d0e <cprintf>
f0123223:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123226:	e8 72 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012322b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012322e:	e8 95 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123233:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123236:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012323c:	83 ec 0c             	sub    $0xc,%esp
f012323f:	50                   	push   %eax
f0123240:	e8 0b 47 fe ff       	call   f0107950 <kfree>
f0123245:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123248:	e8 7b 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012324d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123250:	74 17                	je     f0123269 <test_kfree_bestfirstfit+0x13fe>
f0123252:	83 ec 04             	sub    $0x4,%esp
f0123255:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012325a:	68 6d 07 00 00       	push   $0x76d
f012325f:	68 9a b2 13 f0       	push   $0xf013b29a
f0123264:	e8 9c cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123269:	e8 2f 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012326e:	89 c2                	mov    %eax,%edx
f0123270:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123273:	29 c2                	sub    %eax,%edx
f0123275:	89 d0                	mov    %edx,%eax
f0123277:	83 f8 02             	cmp    $0x2,%eax
f012327a:	74 17                	je     f0123293 <test_kfree_bestfirstfit+0x1428>
f012327c:	83 ec 04             	sub    $0x4,%esp
f012327f:	68 24 ba 13 f0       	push   $0xf013ba24
f0123284:	68 6e 07 00 00       	push   $0x76e
f0123289:	68 9a b2 13 f0       	push   $0xf013b29a
f012328e:	e8 72 cf fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123293:	e8 05 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123298:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012329b:	e8 28 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01232a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01232a3:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01232a9:	83 ec 0c             	sub    $0xc,%esp
f01232ac:	50                   	push   %eax
f01232ad:	e8 9e 46 fe ff       	call   f0107950 <kfree>
f01232b2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232b5:	e8 0e 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01232ba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01232bd:	74 17                	je     f01232d6 <test_kfree_bestfirstfit+0x146b>
f01232bf:	83 ec 04             	sub    $0x4,%esp
f01232c2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01232c7:	68 74 07 00 00       	push   $0x774
f01232cc:	68 9a b2 13 f0       	push   $0xf013b29a
f01232d1:	e8 2f cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01232d6:	e8 c2 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01232db:	89 c2                	mov    %eax,%edx
f01232dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01232e0:	29 c2                	sub    %eax,%edx
f01232e2:	89 d0                	mov    %edx,%eax
f01232e4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01232e9:	74 17                	je     f0123302 <test_kfree_bestfirstfit+0x1497>
f01232eb:	83 ec 04             	sub    $0x4,%esp
f01232ee:	68 24 ba 13 f0       	push   $0xf013ba24
f01232f3:	68 75 07 00 00       	push   $0x775
f01232f8:	68 9a b2 13 f0       	push   $0xf013b29a
f01232fd:	e8 03 cf fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123302:	e8 96 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123307:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012330a:	e8 b9 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012330f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123312:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123318:	83 ec 0c             	sub    $0xc,%esp
f012331b:	50                   	push   %eax
f012331c:	e8 2f 46 fe ff       	call   f0107950 <kfree>
f0123321:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123324:	e8 9f 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123329:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012332c:	74 17                	je     f0123345 <test_kfree_bestfirstfit+0x14da>
f012332e:	83 ec 04             	sub    $0x4,%esp
f0123331:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123336:	68 7b 07 00 00       	push   $0x77b
f012333b:	68 9a b2 13 f0       	push   $0xf013b29a
f0123340:	e8 c0 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123345:	e8 53 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012334a:	89 c2                	mov    %eax,%edx
f012334c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012334f:	29 c2                	sub    %eax,%edx
f0123351:	89 d0                	mov    %edx,%eax
f0123353:	83 f8 01             	cmp    $0x1,%eax
f0123356:	74 17                	je     f012336f <test_kfree_bestfirstfit+0x1504>
f0123358:	83 ec 04             	sub    $0x4,%esp
f012335b:	68 24 ba 13 f0       	push   $0xf013ba24
f0123360:	68 7c 07 00 00       	push   $0x77c
f0123365:	68 9a b2 13 f0       	push   $0xf013b29a
f012336a:	e8 96 ce fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012336f:	e8 29 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123374:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123377:	e8 4c 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012337c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012337f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123385:	83 ec 0c             	sub    $0xc,%esp
f0123388:	50                   	push   %eax
f0123389:	e8 c2 45 fe ff       	call   f0107950 <kfree>
f012338e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123391:	e8 32 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123396:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123399:	74 17                	je     f01233b2 <test_kfree_bestfirstfit+0x1547>
f012339b:	83 ec 04             	sub    $0x4,%esp
f012339e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01233a3:	68 82 07 00 00       	push   $0x782
f01233a8:	68 9a b2 13 f0       	push   $0xf013b29a
f01233ad:	e8 53 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01233b2:	e8 e6 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233b7:	89 c2                	mov    %eax,%edx
f01233b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01233bc:	29 c2                	sub    %eax,%edx
f01233be:	89 d0                	mov    %edx,%eax
f01233c0:	83 f8 04             	cmp    $0x4,%eax
f01233c3:	74 17                	je     f01233dc <test_kfree_bestfirstfit+0x1571>
f01233c5:	83 ec 04             	sub    $0x4,%esp
f01233c8:	68 24 ba 13 f0       	push   $0xf013ba24
f01233cd:	68 83 07 00 00       	push   $0x783
f01233d2:	68 9a b2 13 f0       	push   $0xf013b29a
f01233d7:	e8 29 ce fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01233dc:	e8 bc 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233e4:	e8 df 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233e9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01233ec:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01233f2:	83 ec 0c             	sub    $0xc,%esp
f01233f5:	50                   	push   %eax
f01233f6:	e8 55 45 fe ff       	call   f0107950 <kfree>
f01233fb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233fe:	e8 c5 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123403:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123406:	74 17                	je     f012341f <test_kfree_bestfirstfit+0x15b4>
f0123408:	83 ec 04             	sub    $0x4,%esp
f012340b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123410:	68 89 07 00 00       	push   $0x789
f0123415:	68 9a b2 13 f0       	push   $0xf013b29a
f012341a:	e8 e6 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012341f:	e8 79 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123424:	89 c2                	mov    %eax,%edx
f0123426:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123429:	29 c2                	sub    %eax,%edx
f012342b:	89 d0                	mov    %edx,%eax
f012342d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123432:	74 17                	je     f012344b <test_kfree_bestfirstfit+0x15e0>
f0123434:	83 ec 04             	sub    $0x4,%esp
f0123437:	68 24 ba 13 f0       	push   $0xf013ba24
f012343c:	68 8a 07 00 00       	push   $0x78a
f0123441:	68 9a b2 13 f0       	push   $0xf013b29a
f0123446:	e8 ba cd fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012344b:	e8 4d 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123450:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123453:	e8 70 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123458:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012345b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123461:	83 ec 0c             	sub    $0xc,%esp
f0123464:	50                   	push   %eax
f0123465:	e8 e6 44 fe ff       	call   f0107950 <kfree>
f012346a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012346d:	e8 56 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123472:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123475:	74 17                	je     f012348e <test_kfree_bestfirstfit+0x1623>
f0123477:	83 ec 04             	sub    $0x4,%esp
f012347a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012347f:	68 90 07 00 00       	push   $0x790
f0123484:	68 9a b2 13 f0       	push   $0xf013b29a
f0123489:	e8 77 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012348e:	e8 0a 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123493:	89 c2                	mov    %eax,%edx
f0123495:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123498:	29 c2                	sub    %eax,%edx
f012349a:	89 d0                	mov    %edx,%eax
f012349c:	83 f8 01             	cmp    $0x1,%eax
f012349f:	74 17                	je     f01234b8 <test_kfree_bestfirstfit+0x164d>
f01234a1:	83 ec 04             	sub    $0x4,%esp
f01234a4:	68 24 ba 13 f0       	push   $0xf013ba24
f01234a9:	68 91 07 00 00       	push   $0x791
f01234ae:	68 9a b2 13 f0       	push   $0xf013b29a
f01234b3:	e8 4d cd fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01234b8:	e8 e0 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234c0:	e8 03 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01234c8:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01234ce:	83 ec 0c             	sub    $0xc,%esp
f01234d1:	50                   	push   %eax
f01234d2:	e8 79 44 fe ff       	call   f0107950 <kfree>
f01234d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234da:	e8 e9 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234e2:	74 17                	je     f01234fb <test_kfree_bestfirstfit+0x1690>
f01234e4:	83 ec 04             	sub    $0x4,%esp
f01234e7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01234ec:	68 97 07 00 00       	push   $0x797
f01234f1:	68 9a b2 13 f0       	push   $0xf013b29a
f01234f6:	e8 0a cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01234fb:	e8 9d 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123500:	89 c2                	mov    %eax,%edx
f0123502:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123505:	29 c2                	sub    %eax,%edx
f0123507:	89 d0                	mov    %edx,%eax
f0123509:	3d 00 01 00 00       	cmp    $0x100,%eax
f012350e:	74 17                	je     f0123527 <test_kfree_bestfirstfit+0x16bc>
f0123510:	83 ec 04             	sub    $0x4,%esp
f0123513:	68 24 ba 13 f0       	push   $0xf013ba24
f0123518:	68 98 07 00 00       	push   $0x798
f012351d:	68 9a b2 13 f0       	push   $0xf013b29a
f0123522:	e8 de cc fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123527:	e8 71 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012352c:	89 c2                	mov    %eax,%edx
f012352e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123531:	39 c2                	cmp    %eax,%edx
f0123533:	74 17                	je     f012354c <test_kfree_bestfirstfit+0x16e1>
f0123535:	83 ec 04             	sub    $0x4,%esp
f0123538:	68 c4 ba 13 f0       	push   $0xf013bac4
f012353d:	68 9a 07 00 00       	push   $0x79a
f0123542:	68 9a b2 13 f0       	push   $0xf013b29a
f0123547:	e8 b9 cc fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f012354c:	83 ec 0c             	sub    $0xc,%esp
f012354f:	68 f8 ba 13 f0       	push   $0xf013baf8
f0123554:	e8 b5 d7 fd ff       	call   f0100d0e <cprintf>
f0123559:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012355c:	83 ec 0c             	sub    $0xc,%esp
f012355f:	6a 03                	push   $0x3
f0123561:	e8 d7 9a fe ff       	call   f010d03d <sys_bypassPageFault>
f0123566:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123569:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123570:	e9 82 00 00 00       	jmp    f01235f7 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123575:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123578:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f012357f:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123582:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123585:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123588:	e8 9e 9a fe ff       	call   f010d02b <sys_rcr2>
f012358d:	89 c2                	mov    %eax,%edx
f012358f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123592:	39 c2                	cmp    %eax,%edx
f0123594:	74 17                	je     f01235ad <test_kfree_bestfirstfit+0x1742>
f0123596:	83 ec 04             	sub    $0x4,%esp
f0123599:	68 00 bb 13 f0       	push   $0xf013bb00
f012359e:	68 a9 07 00 00       	push   $0x7a9
f01235a3:	68 9a b2 13 f0       	push   $0xf013b29a
f01235a8:	e8 58 cc fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f01235ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235b0:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01235b7:	89 c2                	mov    %eax,%edx
f01235b9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235bc:	01 d0                	add    %edx,%eax
f01235be:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01235c1:	e8 65 9a fe ff       	call   f010d02b <sys_rcr2>
f01235c6:	89 c2                	mov    %eax,%edx
f01235c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235cb:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01235d2:	89 c1                	mov    %eax,%ecx
f01235d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235d7:	01 c8                	add    %ecx,%eax
f01235d9:	39 c2                	cmp    %eax,%edx
f01235db:	74 17                	je     f01235f4 <test_kfree_bestfirstfit+0x1789>
f01235dd:	83 ec 04             	sub    $0x4,%esp
f01235e0:	68 00 bb 13 f0       	push   $0xf013bb00
f01235e5:	68 ab 07 00 00       	push   $0x7ab
f01235ea:	68 9a b2 13 f0       	push   $0xf013b29a
f01235ef:	e8 11 cc fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01235f4:	ff 45 f4             	incl   -0xc(%ebp)
f01235f7:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01235fb:	0f 8e 74 ff ff ff    	jle    f0123575 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123601:	83 ec 0c             	sub    $0xc,%esp
f0123604:	6a 00                	push   $0x0
f0123606:	e8 32 9a fe ff       	call   f010d03d <sys_bypassPageFault>
f012360b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012360e:	83 ec 0c             	sub    $0xc,%esp
f0123611:	68 45 bb 13 f0       	push   $0xf013bb45
f0123616:	e8 f3 d6 fd ff       	call   f0100d0e <cprintf>
f012361b:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012361e:	e8 7a 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123623:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123626:	e8 9d 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012362b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012362e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123634:	83 ec 0c             	sub    $0xc,%esp
f0123637:	50                   	push   %eax
f0123638:	e8 13 43 fe ff       	call   f0107950 <kfree>
f012363d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123640:	e8 83 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123645:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123648:	74 17                	je     f0123661 <test_kfree_bestfirstfit+0x17f6>
f012364a:	83 ec 04             	sub    $0x4,%esp
f012364d:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123652:	68 b9 07 00 00       	push   $0x7b9
f0123657:	68 9a b2 13 f0       	push   $0xf013b29a
f012365c:	e8 a4 cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123661:	e8 37 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123666:	89 c2                	mov    %eax,%edx
f0123668:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012366b:	39 c2                	cmp    %eax,%edx
f012366d:	74 17                	je     f0123686 <test_kfree_bestfirstfit+0x181b>
f012366f:	83 ec 04             	sub    $0x4,%esp
f0123672:	68 4c bb 13 f0       	push   $0xf013bb4c
f0123677:	68 ba 07 00 00       	push   $0x7ba
f012367c:	68 9a b2 13 f0       	push   $0xf013b29a
f0123681:	e8 7f cb fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123686:	e8 12 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012368b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012368e:	e8 35 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123693:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123696:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012369c:	83 ec 0c             	sub    $0xc,%esp
f012369f:	50                   	push   %eax
f01236a0:	e8 ab 42 fe ff       	call   f0107950 <kfree>
f01236a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236a8:	e8 1b 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01236b0:	74 17                	je     f01236c9 <test_kfree_bestfirstfit+0x185e>
f01236b2:	83 ec 04             	sub    $0x4,%esp
f01236b5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01236ba:	68 c0 07 00 00       	push   $0x7c0
f01236bf:	68 9a b2 13 f0       	push   $0xf013b29a
f01236c4:	e8 3c cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01236c9:	e8 cf 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01236ce:	89 c2                	mov    %eax,%edx
f01236d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01236d3:	39 c2                	cmp    %eax,%edx
f01236d5:	74 17                	je     f01236ee <test_kfree_bestfirstfit+0x1883>
f01236d7:	83 ec 04             	sub    $0x4,%esp
f01236da:	68 4c bb 13 f0       	push   $0xf013bb4c
f01236df:	68 c1 07 00 00       	push   $0x7c1
f01236e4:	68 9a b2 13 f0       	push   $0xf013b29a
f01236e9:	e8 17 cb fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01236ee:	e8 aa 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01236f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236f6:	e8 cd 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01236fe:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123704:	83 ec 0c             	sub    $0xc,%esp
f0123707:	50                   	push   %eax
f0123708:	e8 43 42 fe ff       	call   f0107950 <kfree>
f012370d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123710:	e8 b3 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123715:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123718:	74 17                	je     f0123731 <test_kfree_bestfirstfit+0x18c6>
f012371a:	83 ec 04             	sub    $0x4,%esp
f012371d:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123722:	68 c7 07 00 00       	push   $0x7c7
f0123727:	68 9a b2 13 f0       	push   $0xf013b29a
f012372c:	e8 d4 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123731:	e8 67 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123736:	89 c2                	mov    %eax,%edx
f0123738:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012373b:	39 c2                	cmp    %eax,%edx
f012373d:	74 17                	je     f0123756 <test_kfree_bestfirstfit+0x18eb>
f012373f:	83 ec 04             	sub    $0x4,%esp
f0123742:	68 4c bb 13 f0       	push   $0xf013bb4c
f0123747:	68 c8 07 00 00       	push   $0x7c8
f012374c:	68 9a b2 13 f0       	push   $0xf013b29a
f0123751:	e8 af ca fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123756:	e8 42 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012375b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012375e:	e8 65 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123763:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123766:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012376c:	83 ec 0c             	sub    $0xc,%esp
f012376f:	50                   	push   %eax
f0123770:	e8 db 41 fe ff       	call   f0107950 <kfree>
f0123775:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123778:	e8 4b 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012377d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123780:	74 17                	je     f0123799 <test_kfree_bestfirstfit+0x192e>
f0123782:	83 ec 04             	sub    $0x4,%esp
f0123785:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012378a:	68 ce 07 00 00       	push   $0x7ce
f012378f:	68 9a b2 13 f0       	push   $0xf013b29a
f0123794:	e8 6c ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123799:	e8 ff 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012379e:	89 c2                	mov    %eax,%edx
f01237a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237a3:	39 c2                	cmp    %eax,%edx
f01237a5:	74 17                	je     f01237be <test_kfree_bestfirstfit+0x1953>
f01237a7:	83 ec 04             	sub    $0x4,%esp
f01237aa:	68 4c bb 13 f0       	push   $0xf013bb4c
f01237af:	68 cf 07 00 00       	push   $0x7cf
f01237b4:	68 9a b2 13 f0       	push   $0xf013b29a
f01237b9:	e8 47 ca fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f01237be:	83 ec 0c             	sub    $0xc,%esp
f01237c1:	68 93 bb 13 f0       	push   $0xf013bb93
f01237c6:	e8 43 d5 fd ff       	call   f0100d0e <cprintf>
f01237cb:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01237ce:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01237d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01237dc:	eb 48                	jmp    f0123826 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01237de:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01237e1:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01237e6:	83 ec 04             	sub    $0x4,%esp
f01237e9:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01237ef:	51                   	push   %ecx
f01237f0:	52                   	push   %edx
f01237f1:	50                   	push   %eax
f01237f2:	e8 ba 32 fe ff       	call   f0106ab1 <get_page_table>
f01237f7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01237fa:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123800:	85 c0                	test   %eax,%eax
f0123802:	75 17                	jne    f012381b <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123804:	83 ec 04             	sub    $0x4,%esp
f0123807:	68 9c bb 13 f0       	push   $0xf013bb9c
f012380c:	68 dd 07 00 00       	push   $0x7dd
f0123811:	68 9a b2 13 f0       	push   $0xf013b29a
f0123816:	e8 ea c9 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012381b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123822:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123826:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012382a:	78 b2                	js     f01237de <test_kfree_bestfirstfit+0x1973>
f012382c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123830:	7f 09                	jg     f012383b <test_kfree_bestfirstfit+0x19d0>
f0123832:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123839:	76 a3                	jbe    f01237de <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f012383b:	83 ec 0c             	sub    $0xc,%esp
f012383e:	68 7e b4 13 f0       	push   $0xf013b47e
f0123843:	e8 c6 d4 fd ff       	call   f0100d0e <cprintf>
f0123848:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012384b:	83 ec 0c             	sub    $0xc,%esp
f012384e:	68 04 bc 13 f0       	push   $0xf013bc04
f0123853:	e8 b6 d4 fd ff       	call   f0100d0e <cprintf>
f0123858:	83 c4 10             	add    $0x10,%esp

	return 1;
f012385b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123860:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123863:	5b                   	pop    %ebx
f0123864:	5f                   	pop    %edi
f0123865:	5d                   	pop    %ebp
f0123866:	c3                   	ret    

f0123867 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123867:	55                   	push   %ebp
f0123868:	89 e5                	mov    %esp,%ebp
f012386a:	57                   	push   %edi
f012386b:	56                   	push   %esi
f012386c:	53                   	push   %ebx
f012386d:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123873:	83 ec 0c             	sub    $0xc,%esp
f0123876:	68 dc b1 13 f0       	push   $0xf013b1dc
f012387b:	e8 8e d4 fd ff       	call   f0100d0e <cprintf>
f0123880:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123883:	83 ec 0c             	sub    $0xc,%esp
f0123886:	68 0c b2 13 f0       	push   $0xf013b20c
f012388b:	e8 7e d4 fd ff       	call   f0100d0e <cprintf>
f0123890:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123893:	83 ec 0c             	sub    $0xc,%esp
f0123896:	68 dc b1 13 f0       	push   $0xf013b1dc
f012389b:	e8 6e d4 fd ff       	call   f0100d0e <cprintf>
f01238a0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01238a3:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01238a7:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f01238ab:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f01238b1:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f01238b7:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01238be:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01238c5:	e8 d3 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01238ca:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01238cd:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01238d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01238d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01238dd:	89 d7                	mov    %edx,%edi
f01238df:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01238e1:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01238e7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01238ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01238f1:	89 d7                	mov    %edx,%edi
f01238f3:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01238f5:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01238fb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123900:	b8 00 00 00 00       	mov    $0x0,%eax
f0123905:	89 d7                	mov    %edx,%edi
f0123907:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123909:	e8 8f 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012390e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123911:	e8 b2 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123916:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123919:	83 ec 0c             	sub    $0xc,%esp
f012391c:	68 00 fc 1f 00       	push   $0x1ffc00
f0123921:	e8 5f 3f fe ff       	call   f0107885 <kmalloc>
f0123926:	83 c4 10             	add    $0x10,%esp
f0123929:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012392f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123935:	89 c1                	mov    %eax,%ecx
f0123937:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012393e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123941:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123946:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123949:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012394c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123951:	f7 75 a0             	divl   -0x60(%ebp)
f0123954:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123957:	29 d0                	sub    %edx,%eax
f0123959:	89 c3                	mov    %eax,%ebx
f012395b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123962:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123967:	0f b6 d0             	movzbl %al,%edx
f012396a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012396d:	01 d0                	add    %edx,%eax
f012396f:	48                   	dec    %eax
f0123970:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123973:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123976:	ba 00 00 00 00       	mov    $0x0,%edx
f012397b:	f7 75 98             	divl   -0x68(%ebp)
f012397e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123981:	29 d0                	sub    %edx,%eax
f0123983:	01 c3                	add    %eax,%ebx
f0123985:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012398c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123991:	0f b6 c0             	movzbl %al,%eax
f0123994:	c1 e0 04             	shl    $0x4,%eax
f0123997:	89 c2                	mov    %eax,%edx
f0123999:	8b 45 90             	mov    -0x70(%ebp),%eax
f012399c:	01 d0                	add    %edx,%eax
f012399e:	48                   	dec    %eax
f012399f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01239a2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01239a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01239aa:	f7 75 90             	divl   -0x70(%ebp)
f01239ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01239b0:	29 d0                	sub    %edx,%eax
f01239b2:	01 d8                	add    %ebx,%eax
f01239b4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01239b9:	39 c1                	cmp    %eax,%ecx
f01239bb:	74 17                	je     f01239d4 <test_kheap_phys_addr+0x16d>
f01239bd:	83 ec 04             	sub    $0x4,%esp
f01239c0:	68 80 b3 13 f0       	push   $0xf013b380
f01239c5:	68 0a 08 00 00       	push   $0x80a
f01239ca:	68 9a b2 13 f0       	push   $0xf013b29a
f01239cf:	e8 31 c8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239d4:	e8 ef 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01239d9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01239dc:	74 17                	je     f01239f5 <test_kheap_phys_addr+0x18e>
f01239de:	83 ec 04             	sub    $0x4,%esp
f01239e1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01239e6:	68 0b 08 00 00       	push   $0x80b
f01239eb:	68 9a b2 13 f0       	push   $0xf013b29a
f01239f0:	e8 10 c8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239f5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239f8:	e8 a0 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01239fd:	29 c3                	sub    %eax,%ebx
f01239ff:	89 d8                	mov    %ebx,%eax
f0123a01:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123a06:	74 17                	je     f0123a1f <test_kheap_phys_addr+0x1b8>
f0123a08:	83 ec 04             	sub    $0x4,%esp
f0123a0b:	68 1c b3 13 f0       	push   $0xf013b31c
f0123a10:	68 0c 08 00 00       	push   $0x80c
f0123a15:	68 9a b2 13 f0       	push   $0xf013b29a
f0123a1a:	e8 e6 c7 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a1f:	e8 79 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123a24:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a27:	e8 9c 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a2c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123a2f:	83 ec 0c             	sub    $0xc,%esp
f0123a32:	68 00 fc 1f 00       	push   $0x1ffc00
f0123a37:	e8 49 3e fe ff       	call   f0107885 <kmalloc>
f0123a3c:	83 c4 10             	add    $0x10,%esp
f0123a3f:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a45:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123a4b:	89 c1                	mov    %eax,%ecx
f0123a4d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123a54:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123a57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a5c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123a5f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123a62:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a67:	f7 75 88             	divl   -0x78(%ebp)
f0123a6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123a6d:	29 d0                	sub    %edx,%eax
f0123a6f:	89 c3                	mov    %eax,%ebx
f0123a71:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123a78:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123a7d:	0f b6 d0             	movzbl %al,%edx
f0123a80:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a83:	01 d0                	add    %edx,%eax
f0123a85:	48                   	dec    %eax
f0123a86:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123a8c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a97:	f7 75 80             	divl   -0x80(%ebp)
f0123a9a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123aa0:	29 d0                	sub    %edx,%eax
f0123aa2:	01 c3                	add    %eax,%ebx
f0123aa4:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123aab:	10 00 00 
f0123aae:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123ab3:	0f b6 c0             	movzbl %al,%eax
f0123ab6:	c1 e0 04             	shl    $0x4,%eax
f0123ab9:	89 c2                	mov    %eax,%edx
f0123abb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123ac1:	01 d0                	add    %edx,%eax
f0123ac3:	48                   	dec    %eax
f0123ac4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123aca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ad5:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123adb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123ae1:	29 d0                	sub    %edx,%eax
f0123ae3:	01 d8                	add    %ebx,%eax
f0123ae5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123aea:	39 c1                	cmp    %eax,%ecx
f0123aec:	74 17                	je     f0123b05 <test_kheap_phys_addr+0x29e>
f0123aee:	83 ec 04             	sub    $0x4,%esp
f0123af1:	68 80 b3 13 f0       	push   $0xf013b380
f0123af6:	68 12 08 00 00       	push   $0x812
f0123afb:	68 9a b2 13 f0       	push   $0xf013b29a
f0123b00:	e8 00 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b05:	e8 be 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b0a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b0d:	74 17                	je     f0123b26 <test_kheap_phys_addr+0x2bf>
f0123b0f:	83 ec 04             	sub    $0x4,%esp
f0123b12:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123b17:	68 13 08 00 00       	push   $0x813
f0123b1c:	68 9a b2 13 f0       	push   $0xf013b29a
f0123b21:	e8 df c6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b26:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b29:	e8 6f 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123b2e:	29 c3                	sub    %eax,%ebx
f0123b30:	89 d8                	mov    %ebx,%eax
f0123b32:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123b37:	74 17                	je     f0123b50 <test_kheap_phys_addr+0x2e9>
f0123b39:	83 ec 04             	sub    $0x4,%esp
f0123b3c:	68 1c b3 13 f0       	push   $0xf013b31c
f0123b41:	68 14 08 00 00       	push   $0x814
f0123b46:	68 9a b2 13 f0       	push   $0xf013b29a
f0123b4b:	e8 b5 c6 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b50:	e8 48 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123b55:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b58:	e8 6b 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b5d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123b60:	83 ec 0c             	sub    $0xc,%esp
f0123b63:	68 00 08 00 00       	push   $0x800
f0123b68:	e8 18 3d fe ff       	call   f0107885 <kmalloc>
f0123b6d:	83 c4 10             	add    $0x10,%esp
f0123b70:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b76:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0123b7c:	89 c1                	mov    %eax,%ecx
f0123b7e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123b85:	10 00 00 
f0123b88:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123b8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b93:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123b99:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ba4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123baa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123bb0:	29 d0                	sub    %edx,%eax
f0123bb2:	89 c3                	mov    %eax,%ebx
f0123bb4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123bbb:	10 00 00 
f0123bbe:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123bc3:	0f b6 d0             	movzbl %al,%edx
f0123bc6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123bcc:	01 d0                	add    %edx,%eax
f0123bce:	48                   	dec    %eax
f0123bcf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123bd5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123bdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0123be0:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123be6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123bec:	29 d0                	sub    %edx,%eax
f0123bee:	01 c3                	add    %eax,%ebx
f0123bf0:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123bf7:	10 00 00 
f0123bfa:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123bff:	0f b6 c0             	movzbl %al,%eax
f0123c02:	c1 e0 04             	shl    $0x4,%eax
f0123c05:	89 c2                	mov    %eax,%edx
f0123c07:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123c0d:	01 d0                	add    %edx,%eax
f0123c0f:	48                   	dec    %eax
f0123c10:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123c16:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123c1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c21:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123c27:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123c2d:	29 d0                	sub    %edx,%eax
f0123c2f:	01 d8                	add    %ebx,%eax
f0123c31:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123c36:	39 c1                	cmp    %eax,%ecx
f0123c38:	74 17                	je     f0123c51 <test_kheap_phys_addr+0x3ea>
f0123c3a:	83 ec 04             	sub    $0x4,%esp
f0123c3d:	68 80 b3 13 f0       	push   $0xf013b380
f0123c42:	68 1a 08 00 00       	push   $0x81a
f0123c47:	68 9a b2 13 f0       	push   $0xf013b29a
f0123c4c:	e8 b4 c5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c51:	e8 72 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c56:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c59:	74 17                	je     f0123c72 <test_kheap_phys_addr+0x40b>
f0123c5b:	83 ec 04             	sub    $0x4,%esp
f0123c5e:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123c63:	68 1b 08 00 00       	push   $0x81b
f0123c68:	68 9a b2 13 f0       	push   $0xf013b29a
f0123c6d:	e8 93 c5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123c72:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123c75:	e8 23 8f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123c7a:	29 c3                	sub    %eax,%ebx
f0123c7c:	89 d8                	mov    %ebx,%eax
f0123c7e:	83 f8 01             	cmp    $0x1,%eax
f0123c81:	74 17                	je     f0123c9a <test_kheap_phys_addr+0x433>
f0123c83:	83 ec 04             	sub    $0x4,%esp
f0123c86:	68 1c b3 13 f0       	push   $0xf013b31c
f0123c8b:	68 1c 08 00 00       	push   $0x81c
f0123c90:	68 9a b2 13 f0       	push   $0xf013b29a
f0123c95:	e8 6b c5 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c9a:	e8 fe 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123c9f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ca2:	e8 21 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ca7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123caa:	83 ec 0c             	sub    $0xc,%esp
f0123cad:	68 00 08 00 00       	push   $0x800
f0123cb2:	e8 ce 3b fe ff       	call   f0107885 <kmalloc>
f0123cb7:	83 c4 10             	add    $0x10,%esp
f0123cba:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123cc0:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123cc6:	89 c1                	mov    %eax,%ecx
f0123cc8:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123ccf:	10 00 00 
f0123cd2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123cd8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123cdd:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123ce3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123ce9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cee:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123cf4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123cfa:	29 d0                	sub    %edx,%eax
f0123cfc:	89 c3                	mov    %eax,%ebx
f0123cfe:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123d05:	10 00 00 
f0123d08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123d0d:	0f b6 d0             	movzbl %al,%edx
f0123d10:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123d16:	01 d0                	add    %edx,%eax
f0123d18:	48                   	dec    %eax
f0123d19:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123d1f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123d25:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d2a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123d30:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123d36:	29 d0                	sub    %edx,%eax
f0123d38:	01 c3                	add    %eax,%ebx
f0123d3a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123d41:	10 00 00 
f0123d44:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123d49:	0f b6 c0             	movzbl %al,%eax
f0123d4c:	c1 e0 04             	shl    $0x4,%eax
f0123d4f:	89 c2                	mov    %eax,%edx
f0123d51:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123d57:	01 d0                	add    %edx,%eax
f0123d59:	48                   	dec    %eax
f0123d5a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123d60:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123d66:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d6b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123d71:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123d77:	29 d0                	sub    %edx,%eax
f0123d79:	01 d8                	add    %ebx,%eax
f0123d7b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123d80:	39 c1                	cmp    %eax,%ecx
f0123d82:	74 17                	je     f0123d9b <test_kheap_phys_addr+0x534>
f0123d84:	83 ec 04             	sub    $0x4,%esp
f0123d87:	68 80 b3 13 f0       	push   $0xf013b380
f0123d8c:	68 22 08 00 00       	push   $0x822
f0123d91:	68 9a b2 13 f0       	push   $0xf013b29a
f0123d96:	e8 6a c4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d9b:	e8 28 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123da0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123da3:	74 17                	je     f0123dbc <test_kheap_phys_addr+0x555>
f0123da5:	83 ec 04             	sub    $0x4,%esp
f0123da8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123dad:	68 23 08 00 00       	push   $0x823
f0123db2:	68 9a b2 13 f0       	push   $0xf013b29a
f0123db7:	e8 49 c4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123dbc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123dbf:	e8 d9 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123dc4:	29 c3                	sub    %eax,%ebx
f0123dc6:	89 d8                	mov    %ebx,%eax
f0123dc8:	83 f8 01             	cmp    $0x1,%eax
f0123dcb:	74 17                	je     f0123de4 <test_kheap_phys_addr+0x57d>
f0123dcd:	83 ec 04             	sub    $0x4,%esp
f0123dd0:	68 1c b3 13 f0       	push   $0xf013b31c
f0123dd5:	68 24 08 00 00       	push   $0x824
f0123dda:	68 9a b2 13 f0       	push   $0xf013b29a
f0123ddf:	e8 21 c4 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123de4:	e8 b4 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123de9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123dec:	e8 d7 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123df1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123df4:	83 ec 0c             	sub    $0xc,%esp
f0123df7:	68 00 1c 00 00       	push   $0x1c00
f0123dfc:	e8 84 3a fe ff       	call   f0107885 <kmalloc>
f0123e01:	83 c4 10             	add    $0x10,%esp
f0123e04:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e0a:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123e10:	89 c1                	mov    %eax,%ecx
f0123e12:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123e19:	10 00 00 
f0123e1c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123e22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e27:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123e2d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123e33:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e38:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123e3e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123e44:	29 d0                	sub    %edx,%eax
f0123e46:	89 c3                	mov    %eax,%ebx
f0123e48:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123e4f:	10 00 00 
f0123e52:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123e57:	0f b6 d0             	movzbl %al,%edx
f0123e5a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123e60:	01 d0                	add    %edx,%eax
f0123e62:	48                   	dec    %eax
f0123e63:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123e69:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123e6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e74:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123e7a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123e80:	29 d0                	sub    %edx,%eax
f0123e82:	01 c3                	add    %eax,%ebx
f0123e84:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123e8b:	10 00 00 
f0123e8e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123e93:	0f b6 c0             	movzbl %al,%eax
f0123e96:	c1 e0 04             	shl    $0x4,%eax
f0123e99:	89 c2                	mov    %eax,%edx
f0123e9b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123ea1:	01 d0                	add    %edx,%eax
f0123ea3:	48                   	dec    %eax
f0123ea4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123eaa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123eb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eb5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123ebb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123ec1:	29 d0                	sub    %edx,%eax
f0123ec3:	01 d8                	add    %ebx,%eax
f0123ec5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123eca:	39 c1                	cmp    %eax,%ecx
f0123ecc:	74 17                	je     f0123ee5 <test_kheap_phys_addr+0x67e>
f0123ece:	83 ec 04             	sub    $0x4,%esp
f0123ed1:	68 80 b3 13 f0       	push   $0xf013b380
f0123ed6:	68 2a 08 00 00       	push   $0x82a
f0123edb:	68 9a b2 13 f0       	push   $0xf013b29a
f0123ee0:	e8 20 c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ee5:	e8 de fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123eea:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123eed:	74 17                	je     f0123f06 <test_kheap_phys_addr+0x69f>
f0123eef:	83 ec 04             	sub    $0x4,%esp
f0123ef2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0123ef7:	68 2b 08 00 00       	push   $0x82b
f0123efc:	68 9a b2 13 f0       	push   $0xf013b29a
f0123f01:	e8 ff c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f06:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123f09:	e8 8f 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f0e:	29 c3                	sub    %eax,%ebx
f0123f10:	89 d8                	mov    %ebx,%eax
f0123f12:	83 f8 02             	cmp    $0x2,%eax
f0123f15:	74 17                	je     f0123f2e <test_kheap_phys_addr+0x6c7>
f0123f17:	83 ec 04             	sub    $0x4,%esp
f0123f1a:	68 1c b3 13 f0       	push   $0xf013b31c
f0123f1f:	68 2c 08 00 00       	push   $0x82c
f0123f24:	68 9a b2 13 f0       	push   $0xf013b29a
f0123f29:	e8 d7 c2 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f2e:	e8 6a 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f33:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f36:	e8 8d fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f3b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123f3e:	83 ec 0c             	sub    $0xc,%esp
f0123f41:	68 00 fc 2f 00       	push   $0x2ffc00
f0123f46:	e8 3a 39 fe ff       	call   f0107885 <kmalloc>
f0123f4b:	83 c4 10             	add    $0x10,%esp
f0123f4e:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f54:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123f5a:	89 c1                	mov    %eax,%ecx
f0123f5c:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123f63:	10 00 00 
f0123f66:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123f6c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f71:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123f77:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f82:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123f88:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123f8e:	29 d0                	sub    %edx,%eax
f0123f90:	89 c3                	mov    %eax,%ebx
f0123f92:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123f99:	10 00 00 
f0123f9c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123fa1:	0f b6 d0             	movzbl %al,%edx
f0123fa4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123faa:	01 d0                	add    %edx,%eax
f0123fac:	48                   	dec    %eax
f0123fad:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123fb3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123fb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fbe:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123fc4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123fca:	29 d0                	sub    %edx,%eax
f0123fcc:	01 c3                	add    %eax,%ebx
f0123fce:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123fd5:	10 00 00 
f0123fd8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123fdd:	0f b6 c0             	movzbl %al,%eax
f0123fe0:	c1 e0 04             	shl    $0x4,%eax
f0123fe3:	89 c2                	mov    %eax,%edx
f0123fe5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123feb:	01 d0                	add    %edx,%eax
f0123fed:	48                   	dec    %eax
f0123fee:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123ff4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123ffa:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fff:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0124005:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012400b:	29 d0                	sub    %edx,%eax
f012400d:	01 d8                	add    %ebx,%eax
f012400f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124014:	39 c1                	cmp    %eax,%ecx
f0124016:	74 17                	je     f012402f <test_kheap_phys_addr+0x7c8>
f0124018:	83 ec 04             	sub    $0x4,%esp
f012401b:	68 80 b3 13 f0       	push   $0xf013b380
f0124020:	68 32 08 00 00       	push   $0x832
f0124025:	68 9a b2 13 f0       	push   $0xf013b29a
f012402a:	e8 d6 c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012402f:	e8 94 fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124034:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124037:	74 17                	je     f0124050 <test_kheap_phys_addr+0x7e9>
f0124039:	83 ec 04             	sub    $0x4,%esp
f012403c:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0124041:	68 33 08 00 00       	push   $0x833
f0124046:	68 9a b2 13 f0       	push   $0xf013b29a
f012404b:	e8 b5 c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124050:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124053:	e8 45 8b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124058:	29 c3                	sub    %eax,%ebx
f012405a:	89 d8                	mov    %ebx,%eax
f012405c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124061:	74 17                	je     f012407a <test_kheap_phys_addr+0x813>
f0124063:	83 ec 04             	sub    $0x4,%esp
f0124066:	68 1c b3 13 f0       	push   $0xf013b31c
f012406b:	68 34 08 00 00       	push   $0x834
f0124070:	68 9a b2 13 f0       	push   $0xf013b29a
f0124075:	e8 8b c1 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012407a:	e8 1e 8b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012407f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124082:	e8 41 fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124087:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012408a:	83 ec 0c             	sub    $0xc,%esp
f012408d:	68 00 fc 5f 00       	push   $0x5ffc00
f0124092:	e8 ee 37 fe ff       	call   f0107885 <kmalloc>
f0124097:	83 c4 10             	add    $0x10,%esp
f012409a:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240a0:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01240a6:	89 c1                	mov    %eax,%ecx
f01240a8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01240af:	10 00 00 
f01240b2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01240b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240bd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01240c3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01240c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ce:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01240d4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01240da:	29 d0                	sub    %edx,%eax
f01240dc:	89 c3                	mov    %eax,%ebx
f01240de:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01240e5:	10 00 00 
f01240e8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01240ed:	0f b6 d0             	movzbl %al,%edx
f01240f0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01240f6:	01 d0                	add    %edx,%eax
f01240f8:	48                   	dec    %eax
f01240f9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01240ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124105:	ba 00 00 00 00       	mov    $0x0,%edx
f012410a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124110:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124116:	29 d0                	sub    %edx,%eax
f0124118:	01 c3                	add    %eax,%ebx
f012411a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124121:	10 00 00 
f0124124:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124129:	0f b6 c0             	movzbl %al,%eax
f012412c:	c1 e0 04             	shl    $0x4,%eax
f012412f:	89 c2                	mov    %eax,%edx
f0124131:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124137:	01 d0                	add    %edx,%eax
f0124139:	48                   	dec    %eax
f012413a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124140:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124146:	ba 00 00 00 00       	mov    $0x0,%edx
f012414b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124151:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124157:	29 d0                	sub    %edx,%eax
f0124159:	01 d8                	add    %ebx,%eax
f012415b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124160:	39 c1                	cmp    %eax,%ecx
f0124162:	74 17                	je     f012417b <test_kheap_phys_addr+0x914>
f0124164:	83 ec 04             	sub    $0x4,%esp
f0124167:	68 80 b3 13 f0       	push   $0xf013b380
f012416c:	68 3a 08 00 00       	push   $0x83a
f0124171:	68 9a b2 13 f0       	push   $0xf013b29a
f0124176:	e8 8a c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012417b:	e8 48 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124180:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124183:	74 17                	je     f012419c <test_kheap_phys_addr+0x935>
f0124185:	83 ec 04             	sub    $0x4,%esp
f0124188:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012418d:	68 3b 08 00 00       	push   $0x83b
f0124192:	68 9a b2 13 f0       	push   $0xf013b29a
f0124197:	e8 69 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012419c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012419f:	e8 f9 89 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01241a4:	29 c3                	sub    %eax,%ebx
f01241a6:	89 d8                	mov    %ebx,%eax
f01241a8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01241ad:	74 17                	je     f01241c6 <test_kheap_phys_addr+0x95f>
f01241af:	83 ec 04             	sub    $0x4,%esp
f01241b2:	68 1c b3 13 f0       	push   $0xf013b31c
f01241b7:	68 3c 08 00 00       	push   $0x83c
f01241bc:	68 9a b2 13 f0       	push   $0xf013b29a
f01241c1:	e8 3f c0 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01241c6:	e8 d2 89 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01241cb:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241ce:	e8 f5 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01241d3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01241d6:	83 ec 0c             	sub    $0xc,%esp
f01241d9:	68 00 38 00 00       	push   $0x3800
f01241de:	e8 a2 36 fe ff       	call   f0107885 <kmalloc>
f01241e3:	83 c4 10             	add    $0x10,%esp
f01241e6:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01241ec:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01241f2:	89 c1                	mov    %eax,%ecx
f01241f4:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01241fb:	10 00 00 
f01241fe:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124204:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124209:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012420f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124215:	ba 00 00 00 00       	mov    $0x0,%edx
f012421a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124220:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124226:	29 d0                	sub    %edx,%eax
f0124228:	89 c3                	mov    %eax,%ebx
f012422a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124231:	10 00 00 
f0124234:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124239:	0f b6 d0             	movzbl %al,%edx
f012423c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124242:	01 d0                	add    %edx,%eax
f0124244:	48                   	dec    %eax
f0124245:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012424b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124251:	ba 00 00 00 00       	mov    $0x0,%edx
f0124256:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012425c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124262:	29 d0                	sub    %edx,%eax
f0124264:	01 c3                	add    %eax,%ebx
f0124266:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012426d:	10 00 00 
f0124270:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124275:	0f b6 c0             	movzbl %al,%eax
f0124278:	c1 e0 04             	shl    $0x4,%eax
f012427b:	89 c2                	mov    %eax,%edx
f012427d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124283:	01 d0                	add    %edx,%eax
f0124285:	48                   	dec    %eax
f0124286:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012428c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124292:	ba 00 00 00 00       	mov    $0x0,%edx
f0124297:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012429d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01242a3:	29 d0                	sub    %edx,%eax
f01242a5:	01 d8                	add    %ebx,%eax
f01242a7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01242ac:	39 c1                	cmp    %eax,%ecx
f01242ae:	74 17                	je     f01242c7 <test_kheap_phys_addr+0xa60>
f01242b0:	83 ec 04             	sub    $0x4,%esp
f01242b3:	68 80 b3 13 f0       	push   $0xf013b380
f01242b8:	68 42 08 00 00       	push   $0x842
f01242bd:	68 9a b2 13 f0       	push   $0xf013b29a
f01242c2:	e8 3e bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242c7:	e8 fc fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01242cc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01242cf:	74 17                	je     f01242e8 <test_kheap_phys_addr+0xa81>
f01242d1:	83 ec 04             	sub    $0x4,%esp
f01242d4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01242d9:	68 43 08 00 00       	push   $0x843
f01242de:	68 9a b2 13 f0       	push   $0xf013b29a
f01242e3:	e8 1d bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242e8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242eb:	e8 ad 88 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01242f0:	29 c3                	sub    %eax,%ebx
f01242f2:	89 d8                	mov    %ebx,%eax
f01242f4:	83 f8 04             	cmp    $0x4,%eax
f01242f7:	74 17                	je     f0124310 <test_kheap_phys_addr+0xaa9>
f01242f9:	83 ec 04             	sub    $0x4,%esp
f01242fc:	68 1c b3 13 f0       	push   $0xf013b31c
f0124301:	68 44 08 00 00       	push   $0x844
f0124306:	68 9a b2 13 f0       	push   $0xf013b29a
f012430b:	e8 f5 be fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124310:	89 e0                	mov    %esp,%eax
f0124312:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124314:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012431b:	10 00 00 
f012431e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124324:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124329:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012432f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124335:	ba 00 00 00 00       	mov    $0x0,%edx
f012433a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124340:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124346:	29 d0                	sub    %edx,%eax
f0124348:	89 c1                	mov    %eax,%ecx
f012434a:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124351:	10 00 00 
f0124354:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124359:	0f b6 d0             	movzbl %al,%edx
f012435c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124362:	01 d0                	add    %edx,%eax
f0124364:	48                   	dec    %eax
f0124365:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012436b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124371:	ba 00 00 00 00       	mov    $0x0,%edx
f0124376:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012437c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124382:	29 d0                	sub    %edx,%eax
f0124384:	01 c1                	add    %eax,%ecx
f0124386:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012438d:	10 00 00 
f0124390:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124395:	0f b6 c0             	movzbl %al,%eax
f0124398:	c1 e0 04             	shl    $0x4,%eax
f012439b:	89 c2                	mov    %eax,%edx
f012439d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01243a3:	01 d0                	add    %edx,%eax
f01243a5:	48                   	dec    %eax
f01243a6:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f01243ac:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01243b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01243b7:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f01243bd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01243c3:	29 d0                	sub    %edx,%eax
f01243c5:	01 c8                	add    %ecx,%eax
f01243c7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01243cc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01243d2:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01243d9:	10 00 00 
f01243dc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01243e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01243e7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01243ed:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01243f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01243f8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01243fe:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124404:	29 d0                	sub    %edx,%eax
f0124406:	89 c1                	mov    %eax,%ecx
f0124408:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012440f:	10 00 00 
f0124412:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124417:	0f b6 d0             	movzbl %al,%edx
f012441a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124420:	01 d0                	add    %edx,%eax
f0124422:	48                   	dec    %eax
f0124423:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124429:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012442f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124434:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012443a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124440:	29 d0                	sub    %edx,%eax
f0124442:	01 c1                	add    %eax,%ecx
f0124444:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012444b:	10 00 00 
f012444e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124453:	0f b6 c0             	movzbl %al,%eax
f0124456:	c1 e0 04             	shl    $0x4,%eax
f0124459:	89 c2                	mov    %eax,%edx
f012445b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124461:	01 d0                	add    %edx,%eax
f0124463:	48                   	dec    %eax
f0124464:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012446a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124470:	ba 00 00 00 00       	mov    $0x0,%edx
f0124475:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012447b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124481:	29 d0                	sub    %edx,%eax
f0124483:	01 c8                	add    %ecx,%eax
f0124485:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012448a:	c1 e8 0c             	shr    $0xc,%eax
f012448d:	89 c2                	mov    %eax,%edx
f012448f:	4a                   	dec    %edx
f0124490:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124496:	c1 e0 02             	shl    $0x2,%eax
f0124499:	8d 50 03             	lea    0x3(%eax),%edx
f012449c:	b8 10 00 00 00       	mov    $0x10,%eax
f01244a1:	48                   	dec    %eax
f01244a2:	01 d0                	add    %edx,%eax
f01244a4:	bf 10 00 00 00       	mov    $0x10,%edi
f01244a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01244ae:	f7 f7                	div    %edi
f01244b0:	6b c0 10             	imul   $0x10,%eax,%eax
f01244b3:	29 c4                	sub    %eax,%esp
f01244b5:	89 e0                	mov    %esp,%eax
f01244b7:	83 c0 03             	add    $0x3,%eax
f01244ba:	c1 e8 02             	shr    $0x2,%eax
f01244bd:	c1 e0 02             	shl    $0x2,%eax
f01244c0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01244c6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01244cd:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01244d4:	10 00 00 
f01244d7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01244dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244e2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01244e8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01244ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f3:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01244f9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01244ff:	29 d0                	sub    %edx,%eax
f0124501:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124506:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124509:	eb 29                	jmp    f0124534 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f012450b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012450e:	8d 43 01             	lea    0x1(%ebx),%eax
f0124511:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124514:	83 ec 0c             	sub    $0xc,%esp
f0124517:	ff 75 e0             	pushl  -0x20(%ebp)
f012451a:	e8 84 35 fe ff       	call   f0107aa3 <kheap_physical_address>
f012451f:	83 c4 10             	add    $0x10,%esp
f0124522:	89 c2                	mov    %eax,%edx
f0124524:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012452a:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012452d:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124534:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124537:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f012453d:	72 cc                	jb     f012450b <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012453f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124542:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124548:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012454f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124556:	10 00 00 
f0124559:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012455f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124564:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012456a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124570:	ba 00 00 00 00       	mov    $0x0,%edx
f0124575:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012457b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124581:	29 d0                	sub    %edx,%eax
f0124583:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124588:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012458b:	e9 ab 00 00 00       	jmp    f012463b <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124590:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0124595:	83 ec 04             	sub    $0x4,%esp
f0124598:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f012459e:	52                   	push   %edx
f012459f:	ff 75 e0             	pushl  -0x20(%ebp)
f01245a2:	50                   	push   %eax
f01245a3:	e8 09 25 fe ff       	call   f0106ab1 <get_page_table>
f01245a8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01245ab:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f01245b1:	85 c0                	test   %eax,%eax
f01245b3:	75 17                	jne    f01245cc <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01245b5:	83 ec 04             	sub    $0x4,%esp
f01245b8:	68 3c bc 13 f0       	push   $0xf013bc3c
f01245bd:	68 59 08 00 00       	push   $0x859
f01245c2:	68 9a b2 13 f0       	push   $0xf013b29a
f01245c7:	e8 39 bc fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01245cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01245cf:	c1 e8 0c             	shr    $0xc,%eax
f01245d2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01245d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01245da:	eb 4b                	jmp    f0124627 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01245dc:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f01245e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01245e5:	c1 e2 02             	shl    $0x2,%edx
f01245e8:	01 d0                	add    %edx,%eax
f01245ea:	8b 00                	mov    (%eax),%eax
f01245ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01245f1:	89 c1                	mov    %eax,%ecx
f01245f3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01245f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01245fc:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01245ff:	39 c1                	cmp    %eax,%ecx
f0124601:	74 17                	je     f012461a <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124603:	83 ec 04             	sub    $0x4,%esp
f0124606:	68 95 bc 13 f0       	push   $0xf013bc95
f012460b:	68 60 08 00 00       	push   $0x860
f0124610:	68 9a b2 13 f0       	push   $0xf013b29a
f0124615:	e8 eb bb fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f012461a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124621:	ff 45 dc             	incl   -0x24(%ebp)
f0124624:	ff 45 e4             	incl   -0x1c(%ebp)
f0124627:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012462a:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124630:	7d 09                	jge    f012463b <test_kheap_phys_addr+0xdd4>
f0124632:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124639:	7e a1                	jle    f01245dc <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012463b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012463e:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124644:	0f 82 46 ff ff ff    	jb     f0124590 <test_kheap_phys_addr+0xd29>
f012464a:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f012464c:	83 ec 0c             	sub    $0xc,%esp
f012464f:	68 b4 bc 13 f0       	push   $0xf013bcb4
f0124654:	e8 b5 c6 fd ff       	call   f0100d0e <cprintf>
f0124659:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012465c:	e8 3c 85 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124661:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124667:	e8 5c f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012466c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124672:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124678:	83 ec 0c             	sub    $0xc,%esp
f012467b:	50                   	push   %eax
f012467c:	e8 cf 32 fe ff       	call   f0107950 <kfree>
f0124681:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124684:	e8 3f f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124689:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012468f:	74 17                	je     f01246a8 <test_kheap_phys_addr+0xe41>
f0124691:	83 ec 04             	sub    $0x4,%esp
f0124694:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0124699:	68 6e 08 00 00       	push   $0x86e
f012469e:	68 9a b2 13 f0       	push   $0xf013b29a
f01246a3:	e8 5d bb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01246a8:	e8 f0 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01246ad:	89 c2                	mov    %eax,%edx
f01246af:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01246b5:	29 c2                	sub    %eax,%edx
f01246b7:	89 d0                	mov    %edx,%eax
f01246b9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01246be:	74 17                	je     f01246d7 <test_kheap_phys_addr+0xe70>
f01246c0:	83 ec 04             	sub    $0x4,%esp
f01246c3:	68 24 ba 13 f0       	push   $0xf013ba24
f01246c8:	68 6f 08 00 00       	push   $0x86f
f01246cd:	68 9a b2 13 f0       	push   $0xf013b29a
f01246d2:	e8 2e bb fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01246d7:	e8 c1 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01246dc:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246e2:	e8 e1 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01246e7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f01246ed:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01246f3:	83 ec 0c             	sub    $0xc,%esp
f01246f6:	50                   	push   %eax
f01246f7:	e8 54 32 fe ff       	call   f0107950 <kfree>
f01246fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01246ff:	e8 c4 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124704:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012470a:	74 17                	je     f0124723 <test_kheap_phys_addr+0xebc>
f012470c:	83 ec 04             	sub    $0x4,%esp
f012470f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0124714:	68 75 08 00 00       	push   $0x875
f0124719:	68 9a b2 13 f0       	push   $0xf013b29a
f012471e:	e8 e2 ba fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124723:	e8 75 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124728:	89 c2                	mov    %eax,%edx
f012472a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124730:	29 c2                	sub    %eax,%edx
f0124732:	89 d0                	mov    %edx,%eax
f0124734:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124739:	74 17                	je     f0124752 <test_kheap_phys_addr+0xeeb>
f012473b:	83 ec 04             	sub    $0x4,%esp
f012473e:	68 24 ba 13 f0       	push   $0xf013ba24
f0124743:	68 76 08 00 00       	push   $0x876
f0124748:	68 9a b2 13 f0       	push   $0xf013b29a
f012474d:	e8 b3 ba fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124752:	e8 46 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124757:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012475d:	e8 66 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124762:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124768:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012476e:	83 ec 0c             	sub    $0xc,%esp
f0124771:	50                   	push   %eax
f0124772:	e8 d9 31 fe ff       	call   f0107950 <kfree>
f0124777:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012477a:	e8 49 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012477f:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124785:	74 17                	je     f012479e <test_kheap_phys_addr+0xf37>
f0124787:	83 ec 04             	sub    $0x4,%esp
f012478a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012478f:	68 7c 08 00 00       	push   $0x87c
f0124794:	68 9a b2 13 f0       	push   $0xf013b29a
f0124799:	e8 67 ba fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012479e:	e8 fa 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01247a3:	89 c2                	mov    %eax,%edx
f01247a5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01247ab:	29 c2                	sub    %eax,%edx
f01247ad:	89 d0                	mov    %edx,%eax
f01247af:	3d 00 06 00 00       	cmp    $0x600,%eax
f01247b4:	74 17                	je     f01247cd <test_kheap_phys_addr+0xf66>
f01247b6:	83 ec 04             	sub    $0x4,%esp
f01247b9:	68 24 ba 13 f0       	push   $0xf013ba24
f01247be:	68 7d 08 00 00       	push   $0x87d
f01247c3:	68 9a b2 13 f0       	push   $0xf013b29a
f01247c8:	e8 38 ba fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01247cd:	89 e0                	mov    %esp,%eax
f01247cf:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01247d1:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01247d8:	10 00 00 
f01247db:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01247e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01247e6:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01247ec:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01247f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01247f7:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01247fd:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124803:	29 d0                	sub    %edx,%eax
f0124805:	89 c1                	mov    %eax,%ecx
f0124807:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012480e:	10 00 00 
f0124811:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124816:	0f b6 d0             	movzbl %al,%edx
f0124819:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012481f:	01 d0                	add    %edx,%eax
f0124821:	48                   	dec    %eax
f0124822:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124828:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012482e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124833:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124839:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012483f:	29 d0                	sub    %edx,%eax
f0124841:	01 c1                	add    %eax,%ecx
f0124843:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012484a:	10 00 00 
f012484d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124852:	0f b6 c0             	movzbl %al,%eax
f0124855:	c1 e0 04             	shl    $0x4,%eax
f0124858:	89 c2                	mov    %eax,%edx
f012485a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124860:	01 d0                	add    %edx,%eax
f0124862:	48                   	dec    %eax
f0124863:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124869:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012486f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124874:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012487a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124880:	29 d0                	sub    %edx,%eax
f0124882:	01 c8                	add    %ecx,%eax
f0124884:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124889:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012488f:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124896:	10 00 00 
f0124899:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012489f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248a4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01248aa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01248b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01248b5:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01248bb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01248c1:	29 d0                	sub    %edx,%eax
f01248c3:	89 c1                	mov    %eax,%ecx
f01248c5:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01248cc:	10 00 00 
f01248cf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01248d4:	0f b6 d0             	movzbl %al,%edx
f01248d7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01248dd:	01 d0                	add    %edx,%eax
f01248df:	48                   	dec    %eax
f01248e0:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01248e6:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01248ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01248f1:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01248f7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01248fd:	29 d0                	sub    %edx,%eax
f01248ff:	01 c1                	add    %eax,%ecx
f0124901:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124908:	10 00 00 
f012490b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124910:	0f b6 c0             	movzbl %al,%eax
f0124913:	c1 e0 04             	shl    $0x4,%eax
f0124916:	89 c2                	mov    %eax,%edx
f0124918:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012491e:	01 d0                	add    %edx,%eax
f0124920:	48                   	dec    %eax
f0124921:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124927:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012492d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124932:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124938:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012493e:	29 d0                	sub    %edx,%eax
f0124940:	01 c8                	add    %ecx,%eax
f0124942:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124947:	c1 e8 0c             	shr    $0xc,%eax
f012494a:	89 c2                	mov    %eax,%edx
f012494c:	4a                   	dec    %edx
f012494d:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124953:	c1 e0 02             	shl    $0x2,%eax
f0124956:	8d 50 03             	lea    0x3(%eax),%edx
f0124959:	b8 10 00 00 00       	mov    $0x10,%eax
f012495e:	48                   	dec    %eax
f012495f:	01 d0                	add    %edx,%eax
f0124961:	bf 10 00 00 00       	mov    $0x10,%edi
f0124966:	ba 00 00 00 00       	mov    $0x0,%edx
f012496b:	f7 f7                	div    %edi
f012496d:	6b c0 10             	imul   $0x10,%eax,%eax
f0124970:	29 c4                	sub    %eax,%esp
f0124972:	89 e0                	mov    %esp,%eax
f0124974:	83 c0 03             	add    $0x3,%eax
f0124977:	c1 e8 02             	shr    $0x2,%eax
f012497a:	c1 e0 02             	shl    $0x2,%eax
f012497d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124983:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012498a:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124991:	10 00 00 
f0124994:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012499a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012499f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01249a5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01249ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01249b0:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01249b6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01249bc:	29 d0                	sub    %edx,%eax
f01249be:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01249c3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01249c6:	eb 29                	jmp    f01249f1 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f01249c8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01249cb:	8d 43 01             	lea    0x1(%ebx),%eax
f01249ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01249d1:	83 ec 0c             	sub    $0xc,%esp
f01249d4:	ff 75 d8             	pushl  -0x28(%ebp)
f01249d7:	e8 c7 30 fe ff       	call   f0107aa3 <kheap_physical_address>
f01249dc:	83 c4 10             	add    $0x10,%esp
f01249df:	89 c2                	mov    %eax,%edx
f01249e1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01249e7:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01249ea:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01249f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01249f4:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01249fa:	72 cc                	jb     f01249c8 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01249fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01249ff:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124a05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124a0c:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124a13:	10 00 00 
f0124a16:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124a1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a21:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124a27:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124a2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a32:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124a38:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124a3e:	29 d0                	sub    %edx,%eax
f0124a40:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a45:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124a48:	e9 ab 00 00 00       	jmp    f0124af8 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124a4d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0124a52:	83 ec 04             	sub    $0x4,%esp
f0124a55:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124a5b:	52                   	push   %edx
f0124a5c:	ff 75 d8             	pushl  -0x28(%ebp)
f0124a5f:	50                   	push   %eax
f0124a60:	e8 4c 20 fe ff       	call   f0106ab1 <get_page_table>
f0124a65:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124a68:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124a6e:	85 c0                	test   %eax,%eax
f0124a70:	75 17                	jne    f0124a89 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124a72:	83 ec 04             	sub    $0x4,%esp
f0124a75:	68 3c bc 13 f0       	push   $0xf013bc3c
f0124a7a:	68 93 08 00 00       	push   $0x893
f0124a7f:	68 9a b2 13 f0       	push   $0xf013b29a
f0124a84:	e8 7c b7 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124a89:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124a8c:	c1 e8 0c             	shr    $0xc,%eax
f0124a8f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124a94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124a97:	eb 4b                	jmp    f0124ae4 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124a99:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124a9f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124aa2:	c1 e2 02             	shl    $0x2,%edx
f0124aa5:	01 d0                	add    %edx,%eax
f0124aa7:	8b 00                	mov    (%eax),%eax
f0124aa9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124aae:	89 c1                	mov    %eax,%ecx
f0124ab0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124ab6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124ab9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124abc:	39 c1                	cmp    %eax,%ecx
f0124abe:	74 17                	je     f0124ad7 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124ac0:	83 ec 04             	sub    $0x4,%esp
f0124ac3:	68 95 bc 13 f0       	push   $0xf013bc95
f0124ac8:	68 9a 08 00 00       	push   $0x89a
f0124acd:	68 9a b2 13 f0       	push   $0xf013b29a
f0124ad2:	e8 2e b7 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124ad7:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124ade:	ff 45 d4             	incl   -0x2c(%ebp)
f0124ae1:	ff 45 e4             	incl   -0x1c(%ebp)
f0124ae4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124ae7:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124aed:	7d 09                	jge    f0124af8 <test_kheap_phys_addr+0x1291>
f0124aef:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124af6:	7e a1                	jle    f0124a99 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124af8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124afb:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124b01:	0f 82 46 ff ff ff    	jb     f0124a4d <test_kheap_phys_addr+0x11e6>
f0124b07:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124b09:	83 ec 0c             	sub    $0xc,%esp
f0124b0c:	68 25 b4 13 f0       	push   $0xf013b425
f0124b11:	e8 f8 c1 fd ff       	call   f0100d0e <cprintf>
f0124b16:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124b19:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124b20:	10 00 00 
f0124b23:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124b29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b2e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124b34:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124b3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b3f:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124b45:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124b4b:	29 d0                	sub    %edx,%eax
f0124b4d:	89 c1                	mov    %eax,%ecx
f0124b4f:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124b56:	10 00 00 
f0124b59:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124b5e:	0f b6 d0             	movzbl %al,%edx
f0124b61:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124b67:	01 d0                	add    %edx,%eax
f0124b69:	48                   	dec    %eax
f0124b6a:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124b70:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124b76:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b7b:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124b81:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124b87:	29 d0                	sub    %edx,%eax
f0124b89:	01 c1                	add    %eax,%ecx
f0124b8b:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124b92:	10 00 00 
f0124b95:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124b9a:	0f b6 c0             	movzbl %al,%eax
f0124b9d:	c1 e0 04             	shl    $0x4,%eax
f0124ba0:	89 c2                	mov    %eax,%edx
f0124ba2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124ba8:	01 d0                	add    %edx,%eax
f0124baa:	48                   	dec    %eax
f0124bab:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124bb1:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124bb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bbc:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124bc2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124bc8:	29 d0                	sub    %edx,%eax
f0124bca:	01 c8                	add    %ecx,%eax
f0124bcc:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124bd1:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124bd7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124bde:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124be4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124be7:	eb 0a                	jmp    f0124bf3 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124be9:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124bec:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124bf3:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124bfa:	76 ed                	jbe    f0124be9 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124bfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124bff:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124c05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124c0c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124c12:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124c15:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124c1c:	e9 cc 00 00 00       	jmp    f0124ced <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124c21:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124c24:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0124c29:	83 ec 04             	sub    $0x4,%esp
f0124c2c:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124c32:	51                   	push   %ecx
f0124c33:	52                   	push   %edx
f0124c34:	50                   	push   %eax
f0124c35:	e8 77 1e fe ff       	call   f0106ab1 <get_page_table>
f0124c3a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124c3d:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124c43:	85 c0                	test   %eax,%eax
f0124c45:	75 17                	jne    f0124c5e <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124c47:	83 ec 04             	sub    $0x4,%esp
f0124c4a:	68 3c bc 13 f0       	push   $0xf013bc3c
f0124c4f:	68 b6 08 00 00       	push   $0x8b6
f0124c54:	68 9a b2 13 f0       	push   $0xf013b29a
f0124c59:	e8 a7 b5 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124c5e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124c65:	eb 67                	jmp    f0124cce <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124c67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124c6a:	c1 e0 0c             	shl    $0xc,%eax
f0124c6d:	89 c2                	mov    %eax,%edx
f0124c6f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124c75:	01 d0                	add    %edx,%eax
f0124c77:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124c7d:	83 ec 0c             	sub    $0xc,%esp
f0124c80:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124c86:	e8 18 2e fe ff       	call   f0107aa3 <kheap_physical_address>
f0124c8b:	83 c4 10             	add    $0x10,%esp
f0124c8e:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124c94:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124c9a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124c9d:	c1 e2 02             	shl    $0x2,%edx
f0124ca0:	01 d0                	add    %edx,%eax
f0124ca2:	8b 00                	mov    (%eax),%eax
f0124ca4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124ca9:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124caf:	74 17                	je     f0124cc8 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124cb1:	83 ec 04             	sub    $0x4,%esp
f0124cb4:	68 95 bc 13 f0       	push   $0xf013bc95
f0124cb9:	68 c0 08 00 00       	push   $0x8c0
f0124cbe:	68 9a b2 13 f0       	push   $0xf013b29a
f0124cc3:	e8 3d b5 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124cc8:	ff 45 cc             	incl   -0x34(%ebp)
f0124ccb:	ff 45 e4             	incl   -0x1c(%ebp)
f0124cce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124cd1:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124cd7:	7d 09                	jge    f0124ce2 <test_kheap_phys_addr+0x147b>
f0124cd9:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124ce0:	7e 85                	jle    f0124c67 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124ce2:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124ce9:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124ced:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124cf1:	0f 88 2a ff ff ff    	js     f0124c21 <test_kheap_phys_addr+0x13ba>
f0124cf7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124cfb:	7f 0d                	jg     f0124d0a <test_kheap_phys_addr+0x14a3>
f0124cfd:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124d04:	0f 86 17 ff ff ff    	jbe    f0124c21 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124d0a:	83 ec 0c             	sub    $0xc,%esp
f0124d0d:	68 7e b4 13 f0       	push   $0xf013b47e
f0124d12:	e8 f7 bf fd ff       	call   f0100d0e <cprintf>
f0124d17:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124d1a:	83 ec 0c             	sub    $0xc,%esp
f0124d1d:	68 e8 bc 13 f0       	push   $0xf013bce8
f0124d22:	e8 e7 bf fd ff       	call   f0100d0e <cprintf>
f0124d27:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124d2a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124d2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124d32:	5b                   	pop    %ebx
f0124d33:	5e                   	pop    %esi
f0124d34:	5f                   	pop    %edi
f0124d35:	5d                   	pop    %ebp
f0124d36:	c3                   	ret    

f0124d37 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124d37:	55                   	push   %ebp
f0124d38:	89 e5                	mov    %esp,%ebp
f0124d3a:	57                   	push   %edi
f0124d3b:	56                   	push   %esi
f0124d3c:	53                   	push   %ebx
f0124d3d:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124d43:	89 e0                	mov    %esp,%eax
f0124d45:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124d47:	83 ec 0c             	sub    $0xc,%esp
f0124d4a:	68 dc b1 13 f0       	push   $0xf013b1dc
f0124d4f:	e8 ba bf fd ff       	call   f0100d0e <cprintf>
f0124d54:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124d57:	83 ec 0c             	sub    $0xc,%esp
f0124d5a:	68 0c b2 13 f0       	push   $0xf013b20c
f0124d5f:	e8 aa bf fd ff       	call   f0100d0e <cprintf>
f0124d64:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124d67:	83 ec 0c             	sub    $0xc,%esp
f0124d6a:	68 dc b1 13 f0       	push   $0xf013b1dc
f0124d6f:	e8 9a bf fd ff       	call   f0100d0e <cprintf>
f0124d74:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124d77:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124d7b:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124d7f:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124d85:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124d8b:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124d92:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124d99:	e8 ff 7d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124d9e:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124da1:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124da7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124dac:	b8 00 00 00 00       	mov    $0x0,%eax
f0124db1:	89 d7                	mov    %edx,%edi
f0124db3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124db5:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124dbb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124dc0:	b8 00 00 00 00       	mov    $0x0,%eax
f0124dc5:	89 d7                	mov    %edx,%edi
f0124dc7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124dc9:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124dcf:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124dd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0124dd9:	89 d7                	mov    %edx,%edi
f0124ddb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ddd:	e8 bb 7d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124de2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124de5:	e8 de ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124dea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124ded:	83 ec 0c             	sub    $0xc,%esp
f0124df0:	68 00 fc 1f 00       	push   $0x1ffc00
f0124df5:	e8 8b 2a fe ff       	call   f0107885 <kmalloc>
f0124dfa:	83 c4 10             	add    $0x10,%esp
f0124dfd:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124e03:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124e09:	89 c1                	mov    %eax,%ecx
f0124e0b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124e12:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124e15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e1a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124e1d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124e20:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e25:	f7 75 b4             	divl   -0x4c(%ebp)
f0124e28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124e2b:	29 d0                	sub    %edx,%eax
f0124e2d:	89 c3                	mov    %eax,%ebx
f0124e2f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124e36:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124e3b:	0f b6 d0             	movzbl %al,%edx
f0124e3e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124e41:	01 d0                	add    %edx,%eax
f0124e43:	48                   	dec    %eax
f0124e44:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124e47:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124e4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e4f:	f7 75 ac             	divl   -0x54(%ebp)
f0124e52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124e55:	29 d0                	sub    %edx,%eax
f0124e57:	01 c3                	add    %eax,%ebx
f0124e59:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124e60:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124e65:	0f b6 c0             	movzbl %al,%eax
f0124e68:	c1 e0 04             	shl    $0x4,%eax
f0124e6b:	89 c2                	mov    %eax,%edx
f0124e6d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124e70:	01 d0                	add    %edx,%eax
f0124e72:	48                   	dec    %eax
f0124e73:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124e76:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124e79:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e7e:	f7 75 a4             	divl   -0x5c(%ebp)
f0124e81:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124e84:	29 d0                	sub    %edx,%eax
f0124e86:	01 d8                	add    %ebx,%eax
f0124e88:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124e8d:	39 c1                	cmp    %eax,%ecx
f0124e8f:	74 17                	je     f0124ea8 <test_kheap_virt_addr+0x171>
f0124e91:	83 ec 04             	sub    $0x4,%esp
f0124e94:	68 80 b3 13 f0       	push   $0xf013b380
f0124e99:	68 ed 08 00 00       	push   $0x8ed
f0124e9e:	68 9a b2 13 f0       	push   $0xf013b29a
f0124ea3:	e8 5d b3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ea8:	e8 1b ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124ead:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124eb0:	74 17                	je     f0124ec9 <test_kheap_virt_addr+0x192>
f0124eb2:	83 ec 04             	sub    $0x4,%esp
f0124eb5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0124eba:	68 ee 08 00 00       	push   $0x8ee
f0124ebf:	68 9a b2 13 f0       	push   $0xf013b29a
f0124ec4:	e8 3c b3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ec9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ecc:	e8 cc 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124ed1:	29 c3                	sub    %eax,%ebx
f0124ed3:	89 d8                	mov    %ebx,%eax
f0124ed5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124eda:	74 17                	je     f0124ef3 <test_kheap_virt_addr+0x1bc>
f0124edc:	83 ec 04             	sub    $0x4,%esp
f0124edf:	68 1c b3 13 f0       	push   $0xf013b31c
f0124ee4:	68 ef 08 00 00       	push   $0x8ef
f0124ee9:	68 9a b2 13 f0       	push   $0xf013b29a
f0124eee:	e8 12 b3 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ef3:	e8 a5 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124ef8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124efb:	e8 c8 ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f00:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124f03:	83 ec 0c             	sub    $0xc,%esp
f0124f06:	68 00 fc 1f 00       	push   $0x1ffc00
f0124f0b:	e8 75 29 fe ff       	call   f0107885 <kmalloc>
f0124f10:	83 c4 10             	add    $0x10,%esp
f0124f13:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f19:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124f1f:	89 c1                	mov    %eax,%ecx
f0124f21:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124f28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124f2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f30:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124f33:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124f36:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f3b:	f7 75 9c             	divl   -0x64(%ebp)
f0124f3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124f41:	29 d0                	sub    %edx,%eax
f0124f43:	89 c3                	mov    %eax,%ebx
f0124f45:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124f4c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124f51:	0f b6 d0             	movzbl %al,%edx
f0124f54:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124f57:	01 d0                	add    %edx,%eax
f0124f59:	48                   	dec    %eax
f0124f5a:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124f5d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124f60:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f65:	f7 75 94             	divl   -0x6c(%ebp)
f0124f68:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124f6b:	29 d0                	sub    %edx,%eax
f0124f6d:	01 c3                	add    %eax,%ebx
f0124f6f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124f76:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124f7b:	0f b6 c0             	movzbl %al,%eax
f0124f7e:	c1 e0 04             	shl    $0x4,%eax
f0124f81:	89 c2                	mov    %eax,%edx
f0124f83:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124f86:	01 d0                	add    %edx,%eax
f0124f88:	48                   	dec    %eax
f0124f89:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124f8c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124f8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f94:	f7 75 8c             	divl   -0x74(%ebp)
f0124f97:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124f9a:	29 d0                	sub    %edx,%eax
f0124f9c:	01 d8                	add    %ebx,%eax
f0124f9e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124fa3:	39 c1                	cmp    %eax,%ecx
f0124fa5:	74 17                	je     f0124fbe <test_kheap_virt_addr+0x287>
f0124fa7:	83 ec 04             	sub    $0x4,%esp
f0124faa:	68 80 b3 13 f0       	push   $0xf013b380
f0124faf:	68 f5 08 00 00       	push   $0x8f5
f0124fb4:	68 9a b2 13 f0       	push   $0xf013b29a
f0124fb9:	e8 47 b2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fbe:	e8 05 ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124fc3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124fc6:	74 17                	je     f0124fdf <test_kheap_virt_addr+0x2a8>
f0124fc8:	83 ec 04             	sub    $0x4,%esp
f0124fcb:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0124fd0:	68 f6 08 00 00       	push   $0x8f6
f0124fd5:	68 9a b2 13 f0       	push   $0xf013b29a
f0124fda:	e8 26 b2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124fdf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124fe2:	e8 b6 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124fe7:	29 c3                	sub    %eax,%ebx
f0124fe9:	89 d8                	mov    %ebx,%eax
f0124feb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124ff0:	74 17                	je     f0125009 <test_kheap_virt_addr+0x2d2>
f0124ff2:	83 ec 04             	sub    $0x4,%esp
f0124ff5:	68 1c b3 13 f0       	push   $0xf013b31c
f0124ffa:	68 f7 08 00 00       	push   $0x8f7
f0124fff:	68 9a b2 13 f0       	push   $0xf013b29a
f0125004:	e8 fc b1 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125009:	e8 8f 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012500e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125011:	e8 b2 ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125016:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125019:	83 ec 0c             	sub    $0xc,%esp
f012501c:	68 00 08 00 00       	push   $0x800
f0125021:	e8 5f 28 fe ff       	call   f0107885 <kmalloc>
f0125026:	83 c4 10             	add    $0x10,%esp
f0125029:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012502f:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0125035:	89 c1                	mov    %eax,%ecx
f0125037:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012503e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125041:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125046:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125049:	8b 45 80             	mov    -0x80(%ebp),%eax
f012504c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125051:	f7 75 84             	divl   -0x7c(%ebp)
f0125054:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125057:	29 d0                	sub    %edx,%eax
f0125059:	89 c3                	mov    %eax,%ebx
f012505b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125062:	10 00 00 
f0125065:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012506a:	0f b6 d0             	movzbl %al,%edx
f012506d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125073:	01 d0                	add    %edx,%eax
f0125075:	48                   	dec    %eax
f0125076:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012507c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125082:	ba 00 00 00 00       	mov    $0x0,%edx
f0125087:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012508d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125093:	29 d0                	sub    %edx,%eax
f0125095:	01 c3                	add    %eax,%ebx
f0125097:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012509e:	10 00 00 
f01250a1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01250a6:	0f b6 c0             	movzbl %al,%eax
f01250a9:	c1 e0 04             	shl    $0x4,%eax
f01250ac:	89 c2                	mov    %eax,%edx
f01250ae:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01250b4:	01 d0                	add    %edx,%eax
f01250b6:	48                   	dec    %eax
f01250b7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01250bd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01250c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01250c8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01250ce:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01250d4:	29 d0                	sub    %edx,%eax
f01250d6:	01 d8                	add    %ebx,%eax
f01250d8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01250dd:	39 c1                	cmp    %eax,%ecx
f01250df:	74 17                	je     f01250f8 <test_kheap_virt_addr+0x3c1>
f01250e1:	83 ec 04             	sub    $0x4,%esp
f01250e4:	68 80 b3 13 f0       	push   $0xf013b380
f01250e9:	68 fd 08 00 00       	push   $0x8fd
f01250ee:	68 9a b2 13 f0       	push   $0xf013b29a
f01250f3:	e8 0d b1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250f8:	e8 cb ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01250fd:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125100:	74 17                	je     f0125119 <test_kheap_virt_addr+0x3e2>
f0125102:	83 ec 04             	sub    $0x4,%esp
f0125105:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012510a:	68 fe 08 00 00       	push   $0x8fe
f012510f:	68 9a b2 13 f0       	push   $0xf013b29a
f0125114:	e8 ec b0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125119:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012511c:	e8 7c 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125121:	29 c3                	sub    %eax,%ebx
f0125123:	89 d8                	mov    %ebx,%eax
f0125125:	83 f8 01             	cmp    $0x1,%eax
f0125128:	74 17                	je     f0125141 <test_kheap_virt_addr+0x40a>
f012512a:	83 ec 04             	sub    $0x4,%esp
f012512d:	68 1c b3 13 f0       	push   $0xf013b31c
f0125132:	68 ff 08 00 00       	push   $0x8ff
f0125137:	68 9a b2 13 f0       	push   $0xf013b29a
f012513c:	e8 c4 b0 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125141:	e8 57 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125146:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125149:	e8 7a ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012514e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125151:	83 ec 0c             	sub    $0xc,%esp
f0125154:	68 00 08 00 00       	push   $0x800
f0125159:	e8 27 27 fe ff       	call   f0107885 <kmalloc>
f012515e:	83 c4 10             	add    $0x10,%esp
f0125161:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125167:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012516d:	89 c1                	mov    %eax,%ecx
f012516f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125176:	10 00 00 
f0125179:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012517f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125184:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012518a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125190:	ba 00 00 00 00       	mov    $0x0,%edx
f0125195:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012519b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01251a1:	29 d0                	sub    %edx,%eax
f01251a3:	89 c3                	mov    %eax,%ebx
f01251a5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01251ac:	10 00 00 
f01251af:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01251b4:	0f b6 d0             	movzbl %al,%edx
f01251b7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01251bd:	01 d0                	add    %edx,%eax
f01251bf:	48                   	dec    %eax
f01251c0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01251c6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01251cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01251d1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01251d7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01251dd:	29 d0                	sub    %edx,%eax
f01251df:	01 c3                	add    %eax,%ebx
f01251e1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01251e8:	10 00 00 
f01251eb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01251f0:	0f b6 c0             	movzbl %al,%eax
f01251f3:	c1 e0 04             	shl    $0x4,%eax
f01251f6:	89 c2                	mov    %eax,%edx
f01251f8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01251fe:	01 d0                	add    %edx,%eax
f0125200:	48                   	dec    %eax
f0125201:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125207:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012520d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125212:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125218:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012521e:	29 d0                	sub    %edx,%eax
f0125220:	01 d8                	add    %ebx,%eax
f0125222:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125227:	39 c1                	cmp    %eax,%ecx
f0125229:	74 17                	je     f0125242 <test_kheap_virt_addr+0x50b>
f012522b:	83 ec 04             	sub    $0x4,%esp
f012522e:	68 80 b3 13 f0       	push   $0xf013b380
f0125233:	68 05 09 00 00       	push   $0x905
f0125238:	68 9a b2 13 f0       	push   $0xf013b29a
f012523d:	e8 c3 af fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125242:	e8 81 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125247:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012524a:	74 17                	je     f0125263 <test_kheap_virt_addr+0x52c>
f012524c:	83 ec 04             	sub    $0x4,%esp
f012524f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125254:	68 06 09 00 00       	push   $0x906
f0125259:	68 9a b2 13 f0       	push   $0xf013b29a
f012525e:	e8 a2 af fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125263:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125266:	e8 32 79 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012526b:	29 c3                	sub    %eax,%ebx
f012526d:	89 d8                	mov    %ebx,%eax
f012526f:	83 f8 01             	cmp    $0x1,%eax
f0125272:	74 17                	je     f012528b <test_kheap_virt_addr+0x554>
f0125274:	83 ec 04             	sub    $0x4,%esp
f0125277:	68 1c b3 13 f0       	push   $0xf013b31c
f012527c:	68 07 09 00 00       	push   $0x907
f0125281:	68 9a b2 13 f0       	push   $0xf013b29a
f0125286:	e8 7a af fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012528b:	e8 0d 79 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125290:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125293:	e8 30 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125298:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012529b:	83 ec 0c             	sub    $0xc,%esp
f012529e:	68 00 1c 00 00       	push   $0x1c00
f01252a3:	e8 dd 25 fe ff       	call   f0107885 <kmalloc>
f01252a8:	83 c4 10             	add    $0x10,%esp
f01252ab:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252b1:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01252b7:	89 c1                	mov    %eax,%ecx
f01252b9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01252c0:	10 00 00 
f01252c3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01252c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252ce:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01252d4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01252da:	ba 00 00 00 00       	mov    $0x0,%edx
f01252df:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01252e5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01252eb:	29 d0                	sub    %edx,%eax
f01252ed:	89 c3                	mov    %eax,%ebx
f01252ef:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01252f6:	10 00 00 
f01252f9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01252fe:	0f b6 d0             	movzbl %al,%edx
f0125301:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125307:	01 d0                	add    %edx,%eax
f0125309:	48                   	dec    %eax
f012530a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125310:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125316:	ba 00 00 00 00       	mov    $0x0,%edx
f012531b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125321:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125327:	29 d0                	sub    %edx,%eax
f0125329:	01 c3                	add    %eax,%ebx
f012532b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125332:	10 00 00 
f0125335:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012533a:	0f b6 c0             	movzbl %al,%eax
f012533d:	c1 e0 04             	shl    $0x4,%eax
f0125340:	89 c2                	mov    %eax,%edx
f0125342:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125348:	01 d0                	add    %edx,%eax
f012534a:	48                   	dec    %eax
f012534b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125351:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125357:	ba 00 00 00 00       	mov    $0x0,%edx
f012535c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125362:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125368:	29 d0                	sub    %edx,%eax
f012536a:	01 d8                	add    %ebx,%eax
f012536c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125371:	39 c1                	cmp    %eax,%ecx
f0125373:	74 17                	je     f012538c <test_kheap_virt_addr+0x655>
f0125375:	83 ec 04             	sub    $0x4,%esp
f0125378:	68 80 b3 13 f0       	push   $0xf013b380
f012537d:	68 0d 09 00 00       	push   $0x90d
f0125382:	68 9a b2 13 f0       	push   $0xf013b29a
f0125387:	e8 79 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012538c:	e8 37 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125391:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125394:	74 17                	je     f01253ad <test_kheap_virt_addr+0x676>
f0125396:	83 ec 04             	sub    $0x4,%esp
f0125399:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012539e:	68 0e 09 00 00       	push   $0x90e
f01253a3:	68 9a b2 13 f0       	push   $0xf013b29a
f01253a8:	e8 58 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253ad:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01253b0:	e8 e8 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01253b5:	29 c3                	sub    %eax,%ebx
f01253b7:	89 d8                	mov    %ebx,%eax
f01253b9:	83 f8 02             	cmp    $0x2,%eax
f01253bc:	74 17                	je     f01253d5 <test_kheap_virt_addr+0x69e>
f01253be:	83 ec 04             	sub    $0x4,%esp
f01253c1:	68 1c b3 13 f0       	push   $0xf013b31c
f01253c6:	68 0f 09 00 00       	push   $0x90f
f01253cb:	68 9a b2 13 f0       	push   $0xf013b29a
f01253d0:	e8 30 ae fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01253d5:	e8 c3 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01253da:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01253dd:	e8 e6 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01253e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01253e5:	83 ec 0c             	sub    $0xc,%esp
f01253e8:	68 00 fc 2f 00       	push   $0x2ffc00
f01253ed:	e8 93 24 fe ff       	call   f0107885 <kmalloc>
f01253f2:	83 c4 10             	add    $0x10,%esp
f01253f5:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01253fb:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125401:	89 c1                	mov    %eax,%ecx
f0125403:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012540a:	10 00 00 
f012540d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125413:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125418:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012541e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125424:	ba 00 00 00 00       	mov    $0x0,%edx
f0125429:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012542f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125435:	29 d0                	sub    %edx,%eax
f0125437:	89 c3                	mov    %eax,%ebx
f0125439:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125440:	10 00 00 
f0125443:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125448:	0f b6 d0             	movzbl %al,%edx
f012544b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125451:	01 d0                	add    %edx,%eax
f0125453:	48                   	dec    %eax
f0125454:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012545a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125460:	ba 00 00 00 00       	mov    $0x0,%edx
f0125465:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012546b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125471:	29 d0                	sub    %edx,%eax
f0125473:	01 c3                	add    %eax,%ebx
f0125475:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012547c:	10 00 00 
f012547f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125484:	0f b6 c0             	movzbl %al,%eax
f0125487:	c1 e0 04             	shl    $0x4,%eax
f012548a:	89 c2                	mov    %eax,%edx
f012548c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125492:	01 d0                	add    %edx,%eax
f0125494:	48                   	dec    %eax
f0125495:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012549b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01254a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01254a6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01254ac:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01254b2:	29 d0                	sub    %edx,%eax
f01254b4:	01 d8                	add    %ebx,%eax
f01254b6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01254bb:	39 c1                	cmp    %eax,%ecx
f01254bd:	74 17                	je     f01254d6 <test_kheap_virt_addr+0x79f>
f01254bf:	83 ec 04             	sub    $0x4,%esp
f01254c2:	68 80 b3 13 f0       	push   $0xf013b380
f01254c7:	68 15 09 00 00       	push   $0x915
f01254cc:	68 9a b2 13 f0       	push   $0xf013b29a
f01254d1:	e8 2f ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254d6:	e8 ed e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01254db:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01254de:	74 17                	je     f01254f7 <test_kheap_virt_addr+0x7c0>
f01254e0:	83 ec 04             	sub    $0x4,%esp
f01254e3:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01254e8:	68 16 09 00 00       	push   $0x916
f01254ed:	68 9a b2 13 f0       	push   $0xf013b29a
f01254f2:	e8 0e ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254f7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01254fa:	e8 9e 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01254ff:	29 c3                	sub    %eax,%ebx
f0125501:	89 d8                	mov    %ebx,%eax
f0125503:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125508:	74 17                	je     f0125521 <test_kheap_virt_addr+0x7ea>
f012550a:	83 ec 04             	sub    $0x4,%esp
f012550d:	68 1c b3 13 f0       	push   $0xf013b31c
f0125512:	68 17 09 00 00       	push   $0x917
f0125517:	68 9a b2 13 f0       	push   $0xf013b29a
f012551c:	e8 e4 ac fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125521:	e8 77 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125526:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125529:	e8 9a e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012552e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125531:	83 ec 0c             	sub    $0xc,%esp
f0125534:	68 00 fc 5f 00       	push   $0x5ffc00
f0125539:	e8 47 23 fe ff       	call   f0107885 <kmalloc>
f012553e:	83 c4 10             	add    $0x10,%esp
f0125541:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125547:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012554d:	89 c1                	mov    %eax,%ecx
f012554f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125556:	10 00 00 
f0125559:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012555f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125564:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012556a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125570:	ba 00 00 00 00       	mov    $0x0,%edx
f0125575:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012557b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125581:	29 d0                	sub    %edx,%eax
f0125583:	89 c3                	mov    %eax,%ebx
f0125585:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012558c:	10 00 00 
f012558f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125594:	0f b6 d0             	movzbl %al,%edx
f0125597:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012559d:	01 d0                	add    %edx,%eax
f012559f:	48                   	dec    %eax
f01255a0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01255a6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01255ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01255b1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01255b7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01255bd:	29 d0                	sub    %edx,%eax
f01255bf:	01 c3                	add    %eax,%ebx
f01255c1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01255c8:	10 00 00 
f01255cb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01255d0:	0f b6 c0             	movzbl %al,%eax
f01255d3:	c1 e0 04             	shl    $0x4,%eax
f01255d6:	89 c2                	mov    %eax,%edx
f01255d8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01255de:	01 d0                	add    %edx,%eax
f01255e0:	48                   	dec    %eax
f01255e1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01255e7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01255ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01255f2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01255f8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01255fe:	29 d0                	sub    %edx,%eax
f0125600:	01 d8                	add    %ebx,%eax
f0125602:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125607:	39 c1                	cmp    %eax,%ecx
f0125609:	74 17                	je     f0125622 <test_kheap_virt_addr+0x8eb>
f012560b:	83 ec 04             	sub    $0x4,%esp
f012560e:	68 80 b3 13 f0       	push   $0xf013b380
f0125613:	68 1d 09 00 00       	push   $0x91d
f0125618:	68 9a b2 13 f0       	push   $0xf013b29a
f012561d:	e8 e3 ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125622:	e8 a1 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125627:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012562a:	74 17                	je     f0125643 <test_kheap_virt_addr+0x90c>
f012562c:	83 ec 04             	sub    $0x4,%esp
f012562f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125634:	68 1e 09 00 00       	push   $0x91e
f0125639:	68 9a b2 13 f0       	push   $0xf013b29a
f012563e:	e8 c2 ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125643:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125646:	e8 52 75 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012564b:	29 c3                	sub    %eax,%ebx
f012564d:	89 d8                	mov    %ebx,%eax
f012564f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125654:	74 17                	je     f012566d <test_kheap_virt_addr+0x936>
f0125656:	83 ec 04             	sub    $0x4,%esp
f0125659:	68 1c b3 13 f0       	push   $0xf013b31c
f012565e:	68 1f 09 00 00       	push   $0x91f
f0125663:	68 9a b2 13 f0       	push   $0xf013b29a
f0125668:	e8 98 ab fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012566d:	e8 2b 75 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125672:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125675:	e8 4e e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012567a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012567d:	83 ec 0c             	sub    $0xc,%esp
f0125680:	68 00 38 00 00       	push   $0x3800
f0125685:	e8 fb 21 fe ff       	call   f0107885 <kmalloc>
f012568a:	83 c4 10             	add    $0x10,%esp
f012568d:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125693:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125699:	89 c1                	mov    %eax,%ecx
f012569b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01256a2:	10 00 00 
f01256a5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01256ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256b0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01256b6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01256bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01256c1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01256c7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01256cd:	29 d0                	sub    %edx,%eax
f01256cf:	89 c3                	mov    %eax,%ebx
f01256d1:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01256d8:	10 00 00 
f01256db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01256e0:	0f b6 d0             	movzbl %al,%edx
f01256e3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01256e9:	01 d0                	add    %edx,%eax
f01256eb:	48                   	dec    %eax
f01256ec:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01256f2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01256f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01256fd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125703:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125709:	29 d0                	sub    %edx,%eax
f012570b:	01 c3                	add    %eax,%ebx
f012570d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125714:	10 00 00 
f0125717:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012571c:	0f b6 c0             	movzbl %al,%eax
f012571f:	c1 e0 04             	shl    $0x4,%eax
f0125722:	89 c2                	mov    %eax,%edx
f0125724:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012572a:	01 d0                	add    %edx,%eax
f012572c:	48                   	dec    %eax
f012572d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125733:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125739:	ba 00 00 00 00       	mov    $0x0,%edx
f012573e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125744:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012574a:	29 d0                	sub    %edx,%eax
f012574c:	01 d8                	add    %ebx,%eax
f012574e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125753:	39 c1                	cmp    %eax,%ecx
f0125755:	74 17                	je     f012576e <test_kheap_virt_addr+0xa37>
f0125757:	83 ec 04             	sub    $0x4,%esp
f012575a:	68 80 b3 13 f0       	push   $0xf013b380
f012575f:	68 25 09 00 00       	push   $0x925
f0125764:	68 9a b2 13 f0       	push   $0xf013b29a
f0125769:	e8 97 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012576e:	e8 55 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125773:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125776:	74 17                	je     f012578f <test_kheap_virt_addr+0xa58>
f0125778:	83 ec 04             	sub    $0x4,%esp
f012577b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125780:	68 26 09 00 00       	push   $0x926
f0125785:	68 9a b2 13 f0       	push   $0xf013b29a
f012578a:	e8 76 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012578f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125792:	e8 06 74 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125797:	29 c3                	sub    %eax,%ebx
f0125799:	89 d8                	mov    %ebx,%eax
f012579b:	83 f8 04             	cmp    $0x4,%eax
f012579e:	74 17                	je     f01257b7 <test_kheap_virt_addr+0xa80>
f01257a0:	83 ec 04             	sub    $0x4,%esp
f01257a3:	68 1c b3 13 f0       	push   $0xf013b31c
f01257a8:	68 27 09 00 00       	push   $0x927
f01257ad:	68 9a b2 13 f0       	push   $0xf013b29a
f01257b2:	e8 4e aa fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f01257b7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01257be:	10 00 00 
f01257c1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01257c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257cc:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01257d2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01257d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01257dd:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01257e3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01257e9:	29 d0                	sub    %edx,%eax
f01257eb:	89 c1                	mov    %eax,%ecx
f01257ed:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01257f4:	10 00 00 
f01257f7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01257fc:	0f b6 d0             	movzbl %al,%edx
f01257ff:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125805:	01 d0                	add    %edx,%eax
f0125807:	48                   	dec    %eax
f0125808:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012580e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125814:	ba 00 00 00 00       	mov    $0x0,%edx
f0125819:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012581f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125825:	29 d0                	sub    %edx,%eax
f0125827:	01 c1                	add    %eax,%ecx
f0125829:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125830:	10 00 00 
f0125833:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125838:	0f b6 c0             	movzbl %al,%eax
f012583b:	c1 e0 04             	shl    $0x4,%eax
f012583e:	89 c2                	mov    %eax,%edx
f0125840:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125846:	01 d0                	add    %edx,%eax
f0125848:	48                   	dec    %eax
f0125849:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012584f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125855:	ba 00 00 00 00       	mov    $0x0,%edx
f012585a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125860:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125866:	29 d0                	sub    %edx,%eax
f0125868:	01 c1                	add    %eax,%ecx
f012586a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125871:	10 00 00 
f0125874:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012587a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012587f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125885:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012588b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125890:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125896:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012589c:	29 d0                	sub    %edx,%eax
f012589e:	29 c1                	sub    %eax,%ecx
f01258a0:	89 c8                	mov    %ecx,%eax
f01258a2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01258a7:	c1 e8 0c             	shr    $0xc,%eax
f01258aa:	89 c2                	mov    %eax,%edx
f01258ac:	4a                   	dec    %edx
f01258ad:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f01258b3:	c1 e0 02             	shl    $0x2,%eax
f01258b6:	8d 50 03             	lea    0x3(%eax),%edx
f01258b9:	b8 10 00 00 00       	mov    $0x10,%eax
f01258be:	48                   	dec    %eax
f01258bf:	01 d0                	add    %edx,%eax
f01258c1:	bf 10 00 00 00       	mov    $0x10,%edi
f01258c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01258cb:	f7 f7                	div    %edi
f01258cd:	6b c0 10             	imul   $0x10,%eax,%eax
f01258d0:	29 c4                	sub    %eax,%esp
f01258d2:	89 e0                	mov    %esp,%eax
f01258d4:	83 c0 03             	add    $0x3,%eax
f01258d7:	c1 e8 02             	shr    $0x2,%eax
f01258da:	c1 e0 02             	shl    $0x2,%eax
f01258dd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01258e3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01258ea:	10 00 00 
f01258ed:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01258f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258f8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01258fe:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125904:	ba 00 00 00 00       	mov    $0x0,%edx
f0125909:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012590f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125915:	29 d0                	sub    %edx,%eax
f0125917:	89 c1                	mov    %eax,%ecx
f0125919:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125920:	10 00 00 
f0125923:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125928:	0f b6 d0             	movzbl %al,%edx
f012592b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125931:	01 d0                	add    %edx,%eax
f0125933:	48                   	dec    %eax
f0125934:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012593a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125940:	ba 00 00 00 00       	mov    $0x0,%edx
f0125945:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012594b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125951:	29 d0                	sub    %edx,%eax
f0125953:	01 c1                	add    %eax,%ecx
f0125955:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012595c:	10 00 00 
f012595f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125964:	0f b6 c0             	movzbl %al,%eax
f0125967:	c1 e0 04             	shl    $0x4,%eax
f012596a:	89 c2                	mov    %eax,%edx
f012596c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125972:	01 d0                	add    %edx,%eax
f0125974:	48                   	dec    %eax
f0125975:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012597b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125981:	ba 00 00 00 00       	mov    $0x0,%edx
f0125986:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012598c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125992:	29 d0                	sub    %edx,%eax
f0125994:	01 c1                	add    %eax,%ecx
f0125996:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012599d:	10 00 00 
f01259a0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01259a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259ab:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01259b1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01259b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01259bc:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01259c2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01259c8:	29 d0                	sub    %edx,%eax
f01259ca:	29 c1                	sub    %eax,%ecx
f01259cc:	89 c8                	mov    %ecx,%eax
f01259ce:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01259d3:	c1 e8 0c             	shr    $0xc,%eax
f01259d6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01259dc:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01259e3:	10 00 00 
f01259e6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01259ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259f1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01259f7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01259fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a02:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125a08:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125a0e:	29 d0                	sub    %edx,%eax
f0125a10:	89 c1                	mov    %eax,%ecx
f0125a12:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125a19:	10 00 00 
f0125a1c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125a21:	0f b6 d0             	movzbl %al,%edx
f0125a24:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125a2a:	01 d0                	add    %edx,%eax
f0125a2c:	48                   	dec    %eax
f0125a2d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125a33:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a3e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125a44:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125a4a:	29 d0                	sub    %edx,%eax
f0125a4c:	01 c1                	add    %eax,%ecx
f0125a4e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125a55:	10 00 00 
f0125a58:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125a5d:	0f b6 c0             	movzbl %al,%eax
f0125a60:	c1 e0 04             	shl    $0x4,%eax
f0125a63:	89 c2                	mov    %eax,%edx
f0125a65:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125a6b:	01 d0                	add    %edx,%eax
f0125a6d:	48                   	dec    %eax
f0125a6e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125a74:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a7f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125a85:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125a8b:	29 d0                	sub    %edx,%eax
f0125a8d:	01 c8                	add    %ecx,%eax
f0125a8f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125a94:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125a9a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125aa1:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125aa8:	10 00 00 
f0125aab:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125ab1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ab6:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125abc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125ac2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ac7:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125acd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125ad3:	29 d0                	sub    %edx,%eax
f0125ad5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125ada:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125add:	e9 21 01 00 00       	jmp    f0125c03 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125ae2:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0125ae7:	83 ec 04             	sub    $0x4,%esp
f0125aea:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125af0:	52                   	push   %edx
f0125af1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125af4:	50                   	push   %eax
f0125af5:	e8 b7 0f fe ff       	call   f0106ab1 <get_page_table>
f0125afa:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125afd:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125b03:	85 c0                	test   %eax,%eax
f0125b05:	75 17                	jne    f0125b1e <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125b07:	83 ec 04             	sub    $0x4,%esp
f0125b0a:	68 3c bc 13 f0       	push   $0xf013bc3c
f0125b0f:	68 38 09 00 00       	push   $0x938
f0125b14:	68 9a b2 13 f0       	push   $0xf013b29a
f0125b19:	e8 e7 a6 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125b1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125b21:	c1 e8 0c             	shr    $0xc,%eax
f0125b24:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125b29:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125b2c:	e9 ba 00 00 00       	jmp    f0125beb <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125b31:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125b37:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125b3a:	c1 e2 02             	shl    $0x2,%edx
f0125b3d:	01 d0                	add    %edx,%eax
f0125b3f:	8b 00                	mov    (%eax),%eax
f0125b41:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125b46:	89 c1                	mov    %eax,%ecx
f0125b48:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b4e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125b51:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125b54:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b5a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125b5d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125b60:	83 ec 0c             	sub    $0xc,%esp
f0125b63:	50                   	push   %eax
f0125b64:	e8 0e 1f fe ff       	call   f0107a77 <kheap_virtual_address>
f0125b69:	83 c4 10             	add    $0x10,%esp
f0125b6c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125b72:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125b78:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0125b7b:	74 61                	je     f0125bde <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0125b7d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b83:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125b86:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125b89:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125b8f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125b92:	c1 e1 02             	shl    $0x2,%ecx
f0125b95:	01 ca                	add    %ecx,%edx
f0125b97:	8b 12                	mov    (%edx),%edx
f0125b99:	89 d1                	mov    %edx,%ecx
f0125b9b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125ba1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125ba4:	c1 e2 0c             	shl    $0xc,%edx
f0125ba7:	89 d3                	mov    %edx,%ebx
f0125ba9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125bac:	01 da                	add    %ebx,%edx
f0125bae:	83 ec 0c             	sub    $0xc,%esp
f0125bb1:	50                   	push   %eax
f0125bb2:	51                   	push   %ecx
f0125bb3:	52                   	push   %edx
f0125bb4:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125bba:	68 30 bd 13 f0       	push   $0xf013bd30
f0125bbf:	e8 4a b1 fd ff       	call   f0100d0e <cprintf>
f0125bc4:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125bc7:	83 ec 04             	sub    $0x4,%esp
f0125bca:	68 73 bd 13 f0       	push   $0xf013bd73
f0125bcf:	68 42 09 00 00       	push   $0x942
f0125bd4:	68 9a b2 13 f0       	push   $0xf013b29a
f0125bd9:	e8 27 a6 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0125bde:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125be5:	ff 45 dc             	incl   -0x24(%ebp)
f0125be8:	ff 45 e0             	incl   -0x20(%ebp)
f0125beb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125bee:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125bf4:	7d 0d                	jge    f0125c03 <test_kheap_virt_addr+0xecc>
f0125bf6:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125bfd:	0f 8e 2e ff ff ff    	jle    f0125b31 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125c03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125c06:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125c0c:	0f 82 d0 fe ff ff    	jb     f0125ae2 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125c12:	83 ec 0c             	sub    $0xc,%esp
f0125c15:	68 90 bd 13 f0       	push   $0xf013bd90
f0125c1a:	e8 ef b0 fd ff       	call   f0100d0e <cprintf>
f0125c1f:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125c22:	e8 76 6f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125c27:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125c2d:	e8 96 e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125c32:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125c38:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125c3e:	83 ec 0c             	sub    $0xc,%esp
f0125c41:	50                   	push   %eax
f0125c42:	e8 09 1d fe ff       	call   f0107950 <kfree>
f0125c47:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c4a:	e8 79 e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125c4f:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125c55:	74 17                	je     f0125c6e <test_kheap_virt_addr+0xf37>
f0125c57:	83 ec 04             	sub    $0x4,%esp
f0125c5a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125c5f:	68 50 09 00 00       	push   $0x950
f0125c64:	68 9a b2 13 f0       	push   $0xf013b29a
f0125c69:	e8 97 a5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c6e:	e8 2a 6f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125c73:	89 c2                	mov    %eax,%edx
f0125c75:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125c7b:	29 c2                	sub    %eax,%edx
f0125c7d:	89 d0                	mov    %edx,%eax
f0125c7f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125c84:	74 17                	je     f0125c9d <test_kheap_virt_addr+0xf66>
f0125c86:	83 ec 04             	sub    $0x4,%esp
f0125c89:	68 24 ba 13 f0       	push   $0xf013ba24
f0125c8e:	68 51 09 00 00       	push   $0x951
f0125c93:	68 9a b2 13 f0       	push   $0xf013b29a
f0125c98:	e8 68 a5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125c9d:	e8 fb 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125ca2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ca8:	e8 1b e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125cad:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125cb3:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125cb9:	83 ec 0c             	sub    $0xc,%esp
f0125cbc:	50                   	push   %eax
f0125cbd:	e8 8e 1c fe ff       	call   f0107950 <kfree>
f0125cc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125cc5:	e8 fe e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125cca:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125cd0:	74 17                	je     f0125ce9 <test_kheap_virt_addr+0xfb2>
f0125cd2:	83 ec 04             	sub    $0x4,%esp
f0125cd5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125cda:	68 57 09 00 00       	push   $0x957
f0125cdf:	68 9a b2 13 f0       	push   $0xf013b29a
f0125ce4:	e8 1c a5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125ce9:	e8 af 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125cee:	89 c2                	mov    %eax,%edx
f0125cf0:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125cf6:	29 c2                	sub    %eax,%edx
f0125cf8:	89 d0                	mov    %edx,%eax
f0125cfa:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125cff:	74 17                	je     f0125d18 <test_kheap_virt_addr+0xfe1>
f0125d01:	83 ec 04             	sub    $0x4,%esp
f0125d04:	68 24 ba 13 f0       	push   $0xf013ba24
f0125d09:	68 58 09 00 00       	push   $0x958
f0125d0e:	68 9a b2 13 f0       	push   $0xf013b29a
f0125d13:	e8 ed a4 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d18:	e8 80 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125d1d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d23:	e8 a0 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d28:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125d2e:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125d34:	83 ec 0c             	sub    $0xc,%esp
f0125d37:	50                   	push   %eax
f0125d38:	e8 13 1c fe ff       	call   f0107950 <kfree>
f0125d3d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d40:	e8 83 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d45:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125d4b:	74 17                	je     f0125d64 <test_kheap_virt_addr+0x102d>
f0125d4d:	83 ec 04             	sub    $0x4,%esp
f0125d50:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0125d55:	68 5e 09 00 00       	push   $0x95e
f0125d5a:	68 9a b2 13 f0       	push   $0xf013b29a
f0125d5f:	e8 a1 a4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125d64:	e8 34 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125d69:	89 c2                	mov    %eax,%edx
f0125d6b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125d71:	29 c2                	sub    %eax,%edx
f0125d73:	89 d0                	mov    %edx,%eax
f0125d75:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125d7a:	74 17                	je     f0125d93 <test_kheap_virt_addr+0x105c>
f0125d7c:	83 ec 04             	sub    $0x4,%esp
f0125d7f:	68 24 ba 13 f0       	push   $0xf013ba24
f0125d84:	68 5f 09 00 00       	push   $0x95f
f0125d89:	68 9a b2 13 f0       	push   $0xf013b29a
f0125d8e:	e8 72 a4 fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125d93:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125d9a:	10 00 00 
f0125d9d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125da3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125da8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125dae:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125db4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db9:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125dbf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125dc5:	29 d0                	sub    %edx,%eax
f0125dc7:	89 c1                	mov    %eax,%ecx
f0125dc9:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125dd0:	10 00 00 
f0125dd3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125dd8:	0f b6 d0             	movzbl %al,%edx
f0125ddb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125de1:	01 d0                	add    %edx,%eax
f0125de3:	48                   	dec    %eax
f0125de4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125dea:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125df0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125df5:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125dfb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125e01:	29 d0                	sub    %edx,%eax
f0125e03:	01 c1                	add    %eax,%ecx
f0125e05:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125e0c:	10 00 00 
f0125e0f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125e14:	0f b6 c0             	movzbl %al,%eax
f0125e17:	c1 e0 04             	shl    $0x4,%eax
f0125e1a:	89 c2                	mov    %eax,%edx
f0125e1c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125e22:	01 d0                	add    %edx,%eax
f0125e24:	48                   	dec    %eax
f0125e25:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125e2b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e36:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125e3c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125e42:	29 d0                	sub    %edx,%eax
f0125e44:	01 c8                	add    %ecx,%eax
f0125e46:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125e4b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125e51:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125e58:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125e5f:	10 00 00 
f0125e62:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125e68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e6d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125e73:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125e79:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e7e:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125e84:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125e8a:	29 d0                	sub    %edx,%eax
f0125e8c:	89 c1                	mov    %eax,%ecx
f0125e8e:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125e95:	10 00 00 
f0125e98:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125e9d:	0f b6 d0             	movzbl %al,%edx
f0125ea0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125ea6:	01 d0                	add    %edx,%eax
f0125ea8:	48                   	dec    %eax
f0125ea9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125eaf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125eb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eba:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125ec0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125ec6:	29 d0                	sub    %edx,%eax
f0125ec8:	01 c1                	add    %eax,%ecx
f0125eca:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125ed1:	10 00 00 
f0125ed4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125ed9:	0f b6 c0             	movzbl %al,%eax
f0125edc:	c1 e0 04             	shl    $0x4,%eax
f0125edf:	89 c2                	mov    %eax,%edx
f0125ee1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125ee7:	01 d0                	add    %edx,%eax
f0125ee9:	48                   	dec    %eax
f0125eea:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125ef0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125ef6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125efb:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125f01:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125f07:	29 d0                	sub    %edx,%eax
f0125f09:	01 c1                	add    %eax,%ecx
f0125f0b:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125f12:	10 00 00 
f0125f15:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125f1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f20:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125f26:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125f2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f31:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125f37:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125f3d:	29 d0                	sub    %edx,%eax
f0125f3f:	29 c1                	sub    %eax,%ecx
f0125f41:	89 c8                	mov    %ecx,%eax
f0125f43:	05 00 40 00 00       	add    $0x4000,%eax
f0125f48:	c1 e8 0c             	shr    $0xc,%eax
f0125f4b:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125f51:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125f57:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125f5a:	eb 41                	jmp    f0125f9d <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125f5c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125f62:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125f65:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125f68:	83 ec 0c             	sub    $0xc,%esp
f0125f6b:	50                   	push   %eax
f0125f6c:	e8 06 1b fe ff       	call   f0107a77 <kheap_virtual_address>
f0125f71:	83 c4 10             	add    $0x10,%esp
f0125f74:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125f7a:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125f81:	74 17                	je     f0125f9a <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125f83:	83 ec 04             	sub    $0x4,%esp
f0125f86:	68 73 bd 13 f0       	push   $0xf013bd73
f0125f8b:	68 70 09 00 00       	push   $0x970
f0125f90:	68 9a b2 13 f0       	push   $0xf013b29a
f0125f95:	e8 6b a2 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125f9a:	ff 45 d8             	incl   -0x28(%ebp)
f0125f9d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125fa3:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125fa9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125fac:	39 c2                	cmp    %eax,%edx
f0125fae:	77 ac                	ja     f0125f5c <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125fb0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125fb6:	05 00 04 00 00       	add    $0x400,%eax
f0125fbb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125fbe:	e9 83 00 00 00       	jmp    f0126046 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125fc3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125fc9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125fcc:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125fcf:	83 ec 0c             	sub    $0xc,%esp
f0125fd2:	50                   	push   %eax
f0125fd3:	e8 9f 1a fe ff       	call   f0107a77 <kheap_virtual_address>
f0125fd8:	83 c4 10             	add    $0x10,%esp
f0125fdb:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125fe1:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125fe8:	10 00 00 
f0125feb:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125ff1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ff6:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125ffc:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126002:	ba 00 00 00 00       	mov    $0x0,%edx
f0126007:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012600d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126013:	29 d0                	sub    %edx,%eax
f0126015:	89 c2                	mov    %eax,%edx
f0126017:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012601a:	c1 e0 0c             	shl    $0xc,%eax
f012601d:	01 d0                	add    %edx,%eax
f012601f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126024:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f012602a:	74 17                	je     f0126043 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012602c:	83 ec 04             	sub    $0x4,%esp
f012602f:	68 73 bd 13 f0       	push   $0xf013bd73
f0126034:	68 7a 09 00 00       	push   $0x97a
f0126039:	68 9a b2 13 f0       	push   $0xf013b29a
f012603e:	e8 c2 a1 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126043:	ff 45 d8             	incl   -0x28(%ebp)
f0126046:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012604c:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0126052:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126055:	39 c2                	cmp    %eax,%edx
f0126057:	0f 87 66 ff ff ff    	ja     f0125fc3 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012605d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126063:	05 04 07 00 00       	add    $0x704,%eax
f0126068:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012606b:	eb 41                	jmp    f01260ae <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012606d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126073:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126076:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126079:	83 ec 0c             	sub    $0xc,%esp
f012607c:	50                   	push   %eax
f012607d:	e8 f5 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126082:	83 c4 10             	add    $0x10,%esp
f0126085:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f012608b:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126092:	74 17                	je     f01260ab <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126094:	83 ec 04             	sub    $0x4,%esp
f0126097:	68 73 bd 13 f0       	push   $0xf013bd73
f012609c:	68 83 09 00 00       	push   $0x983
f01260a1:	68 9a b2 13 f0       	push   $0xf013b29a
f01260a6:	e8 5a a1 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01260ab:	ff 45 d8             	incl   -0x28(%ebp)
f01260ae:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01260b4:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01260ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01260bd:	39 c2                	cmp    %eax,%edx
f01260bf:	77 ac                	ja     f012606d <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01260c1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01260c7:	05 04 0d 00 00       	add    $0xd04,%eax
f01260cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01260cf:	e9 83 00 00 00       	jmp    f0126157 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01260d4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01260da:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01260dd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01260e0:	83 ec 0c             	sub    $0xc,%esp
f01260e3:	50                   	push   %eax
f01260e4:	e8 8e 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f01260e9:	83 c4 10             	add    $0x10,%esp
f01260ec:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01260f2:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01260f9:	10 00 00 
f01260fc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126102:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126107:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f012610d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126113:	ba 00 00 00 00       	mov    $0x0,%edx
f0126118:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f012611e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126124:	29 d0                	sub    %edx,%eax
f0126126:	89 c2                	mov    %eax,%edx
f0126128:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012612b:	c1 e0 0c             	shl    $0xc,%eax
f012612e:	01 d0                	add    %edx,%eax
f0126130:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126135:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f012613b:	74 17                	je     f0126154 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f012613d:	83 ec 04             	sub    $0x4,%esp
f0126140:	68 73 bd 13 f0       	push   $0xf013bd73
f0126145:	68 8c 09 00 00       	push   $0x98c
f012614a:	68 9a b2 13 f0       	push   $0xf013b29a
f012614f:	e8 b1 a0 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126154:	ff 45 d8             	incl   -0x28(%ebp)
f0126157:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012615d:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126163:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126166:	39 c2                	cmp    %eax,%edx
f0126168:	0f 87 66 ff ff ff    	ja     f01260d4 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f012616e:	83 ec 0c             	sub    $0xc,%esp
f0126171:	68 25 b4 13 f0       	push   $0xf013b425
f0126176:	e8 93 ab fd ff       	call   f0100d0e <cprintf>
f012617b:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012617e:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126185:	eb 54                	jmp    f01261db <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126187:	83 ec 0c             	sub    $0xc,%esp
f012618a:	ff 75 d4             	pushl  -0x2c(%ebp)
f012618d:	e8 e5 18 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126192:	83 c4 10             	add    $0x10,%esp
f0126195:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f012619b:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f01261a2:	74 30                	je     f01261d4 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01261a4:	83 ec 04             	sub    $0x4,%esp
f01261a7:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01261ad:	ff 75 d4             	pushl  -0x2c(%ebp)
f01261b0:	68 c1 bd 13 f0       	push   $0xf013bdc1
f01261b5:	e8 54 ab fd ff       	call   f0100d0e <cprintf>
f01261ba:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01261bd:	83 ec 04             	sub    $0x4,%esp
f01261c0:	68 73 bd 13 f0       	push   $0xf013bd73
f01261c5:	68 9c 09 00 00       	push   $0x99c
f01261ca:	68 9a b2 13 f0       	push   $0xf013b29a
f01261cf:	e8 31 a0 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01261d4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01261db:	b8 7c 27 78 00       	mov    $0x78277c,%eax
f01261e0:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01261e3:	72 a2                	jb     f0126187 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01261e5:	83 ec 0c             	sub    $0xc,%esp
f01261e8:	68 7e b4 13 f0       	push   $0xf013b47e
f01261ed:	e8 1c ab fd ff       	call   f0100d0e <cprintf>
f01261f2:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01261f5:	83 ec 0c             	sub    $0xc,%esp
f01261f8:	68 e0 bd 13 f0       	push   $0xf013bde0
f01261fd:	e8 0c ab fd ff       	call   f0100d0e <cprintf>
f0126202:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126205:	b8 01 00 00 00       	mov    $0x1,%eax
f012620a:	89 f4                	mov    %esi,%esp

}
f012620c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012620f:	5b                   	pop    %ebx
f0126210:	5e                   	pop    %esi
f0126211:	5f                   	pop    %edi
f0126212:	5d                   	pop    %ebp
f0126213:	c3                   	ret    

f0126214 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126214:	55                   	push   %ebp
f0126215:	89 e5                	mov    %esp,%ebp
f0126217:	57                   	push   %edi
f0126218:	56                   	push   %esi
f0126219:	53                   	push   %ebx
f012621a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126220:	a0 23 2d 19 f0       	mov    0xf0192d23,%al
f0126225:	84 c0                	test   %al,%al
f0126227:	74 56                	je     f012627f <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126229:	c6 05 23 2d 19 f0 00 	movb   $0x0,0xf0192d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126230:	e8 68 69 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126235:	a3 78 27 78 f0       	mov    %eax,0xf0782778
		initFreeDiskFrames = pf_calculate_free_frames() ;
f012623a:	e8 89 db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012623f:	a3 74 27 78 f0       	mov    %eax,0xf0782774
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126244:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f012624a:	bb 3d bf 13 f0       	mov    $0xf013bf3d,%ebx
f012624f:	ba 11 00 00 00       	mov    $0x11,%edx
f0126254:	89 c7                	mov    %eax,%edi
f0126256:	89 de                	mov    %ebx,%esi
f0126258:	89 d1                	mov    %edx,%ecx
f012625a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012625c:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126262:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126267:	b0 00                	mov    $0x0,%al
f0126269:	89 d7                	mov    %edx,%edi
f012626b:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012626d:	83 ec 0c             	sub    $0xc,%esp
f0126270:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126276:	50                   	push   %eax
f0126277:	e8 f4 aa fd ff       	call   f0100d70 <execute_command>
f012627c:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f012627f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126286:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012628d:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0126292:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126295:	eb 2d                	jmp    f01262c4 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126297:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012629a:	05 5c 05 00 00       	add    $0x55c,%eax
f012629f:	83 ec 08             	sub    $0x8,%esp
f01262a2:	68 27 be 13 f0       	push   $0xf013be27
f01262a7:	50                   	push   %eax
f01262a8:	e8 79 af 00 00       	call   f0131226 <strcmp>
f01262ad:	83 c4 10             	add    $0x10,%esp
f01262b0:	85 c0                	test   %eax,%eax
f01262b2:	75 08                	jne    f01262bc <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f01262b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01262b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01262ba:	eb 2f                	jmp    f01262eb <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01262bc:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01262c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01262c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01262c8:	74 08                	je     f01262d2 <test_three_creation_functions+0xbe>
f01262ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01262cd:	8b 40 44             	mov    0x44(%eax),%eax
f01262d0:	eb 05                	jmp    f01262d7 <test_three_creation_functions+0xc3>
f01262d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01262d7:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01262dc:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01262e1:	85 c0                	test   %eax,%eax
f01262e3:	75 b2                	jne    f0126297 <test_three_creation_functions+0x83>
f01262e5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01262e9:	75 ac                	jne    f0126297 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01262eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01262ee:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f01262f4:	85 c0                	test   %eax,%eax
f01262f6:	74 17                	je     f012630f <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f01262f8:	83 ec 04             	sub    $0x4,%esp
f01262fb:	68 30 be 13 f0       	push   $0xf013be30
f0126300:	68 c6 09 00 00       	push   $0x9c6
f0126305:	68 9a b2 13 f0       	push   $0xf013b29a
f012630a:	e8 f6 9e fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f012630f:	83 ec 0c             	sub    $0xc,%esp
f0126312:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126315:	e8 fc 1a fe ff       	call   f0107e16 <env_page_ws_get_size>
f012631a:	83 c4 10             	add    $0x10,%esp
f012631d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126320:	e8 78 68 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126325:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126328:	e8 9b da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012632d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126330:	a1 74 27 78 f0       	mov    0xf0782774,%eax
f0126335:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126338:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012633b:	74 17                	je     f0126354 <test_three_creation_functions+0x140>
f012633d:	83 ec 04             	sub    $0x4,%esp
f0126340:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126345:	68 cc 09 00 00       	push   $0x9cc
f012634a:	68 9a b2 13 f0       	push   $0xf013b29a
f012634f:	e8 b1 9e fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126354:	a1 78 27 78 f0       	mov    0xf0782778,%eax
f0126359:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012635c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012635f:	83 c2 15             	add    $0x15,%edx
f0126362:	39 d0                	cmp    %edx,%eax
f0126364:	74 17                	je     f012637d <test_three_creation_functions+0x169>
f0126366:	83 ec 04             	sub    $0x4,%esp
f0126369:	68 1c b3 13 f0       	push   $0xf013b31c
f012636e:	68 ce 09 00 00       	push   $0x9ce
f0126373:	68 9a b2 13 f0       	push   $0xf013b29a
f0126378:	e8 88 9e fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f012637d:	83 ec 0c             	sub    $0xc,%esp
f0126380:	68 00 10 00 00       	push   $0x1000
f0126385:	e8 fb 14 fe ff       	call   f0107885 <kmalloc>
f012638a:	83 c4 10             	add    $0x10,%esp
f012638d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126390:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126397:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012639a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012639f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01263a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01263a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01263aa:	f7 75 cc             	divl   -0x34(%ebp)
f01263ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01263b0:	29 d0                	sub    %edx,%eax
f01263b2:	89 c1                	mov    %eax,%ecx
f01263b4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01263bb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01263c0:	0f b6 d0             	movzbl %al,%edx
f01263c3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01263c6:	01 d0                	add    %edx,%eax
f01263c8:	48                   	dec    %eax
f01263c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01263cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01263cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01263d4:	f7 75 c4             	divl   -0x3c(%ebp)
f01263d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01263da:	29 d0                	sub    %edx,%eax
f01263dc:	01 c1                	add    %eax,%ecx
f01263de:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01263e5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01263ea:	0f b6 c0             	movzbl %al,%eax
f01263ed:	c1 e0 04             	shl    $0x4,%eax
f01263f0:	89 c2                	mov    %eax,%edx
f01263f2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01263f5:	01 d0                	add    %edx,%eax
f01263f7:	48                   	dec    %eax
f01263f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01263fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01263fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0126403:	f7 75 bc             	divl   -0x44(%ebp)
f0126406:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126409:	29 d0                	sub    %edx,%eax
f012640b:	01 c8                	add    %ecx,%eax
f012640d:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126413:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126416:	39 c2                	cmp    %eax,%edx
f0126418:	74 17                	je     f0126431 <test_three_creation_functions+0x21d>
f012641a:	83 ec 04             	sub    $0x4,%esp
f012641d:	68 80 be 13 f0       	push   $0xf013be80
f0126422:	68 d2 09 00 00       	push   $0x9d2
f0126427:	68 9a b2 13 f0       	push   $0xf013b29a
f012642c:	e8 d4 9d fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126431:	83 ec 0c             	sub    $0xc,%esp
f0126434:	68 f0 be 13 f0       	push   $0xf013bef0
f0126439:	e8 d0 a8 fd ff       	call   f0100d0e <cprintf>
f012643e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126441:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126446:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126449:	5b                   	pop    %ebx
f012644a:	5e                   	pop    %esi
f012644b:	5f                   	pop    %edi
f012644c:	5d                   	pop    %ebp
f012644d:	c3                   	ret    

f012644e <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f012644e:	55                   	push   %ebp
f012644f:	89 e5                	mov    %esp,%ebp
f0126451:	57                   	push   %edi
f0126452:	53                   	push   %ebx
f0126453:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126459:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012645d:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126461:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126467:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012646d:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126474:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012647b:	e8 1d 67 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126480:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126483:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126489:	b9 14 00 00 00       	mov    $0x14,%ecx
f012648e:	b8 00 00 00 00       	mov    $0x0,%eax
f0126493:	89 d7                	mov    %edx,%edi
f0126495:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126497:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012649d:	b9 14 00 00 00       	mov    $0x14,%ecx
f01264a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01264a7:	89 d7                	mov    %edx,%edi
f01264a9:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01264ab:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01264b1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01264b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01264bb:	89 d7                	mov    %edx,%edi
f01264bd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01264bf:	e8 d9 66 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01264c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264c7:	e8 fc d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01264cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01264cf:	83 ec 0c             	sub    $0xc,%esp
f01264d2:	68 00 fc 1f 00       	push   $0x1ffc00
f01264d7:	e8 a9 13 fe ff       	call   f0107885 <kmalloc>
f01264dc:	83 c4 10             	add    $0x10,%esp
f01264df:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264e5:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01264eb:	89 c1                	mov    %eax,%ecx
f01264ed:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01264f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01264f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264fc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01264ff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126502:	ba 00 00 00 00       	mov    $0x0,%edx
f0126507:	f7 75 c8             	divl   -0x38(%ebp)
f012650a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012650d:	29 d0                	sub    %edx,%eax
f012650f:	89 c3                	mov    %eax,%ebx
f0126511:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126518:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012651d:	0f b6 d0             	movzbl %al,%edx
f0126520:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126523:	01 d0                	add    %edx,%eax
f0126525:	48                   	dec    %eax
f0126526:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126529:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012652c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126531:	f7 75 c0             	divl   -0x40(%ebp)
f0126534:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126537:	29 d0                	sub    %edx,%eax
f0126539:	01 c3                	add    %eax,%ebx
f012653b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126542:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126547:	0f b6 c0             	movzbl %al,%eax
f012654a:	c1 e0 04             	shl    $0x4,%eax
f012654d:	89 c2                	mov    %eax,%edx
f012654f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126552:	01 d0                	add    %edx,%eax
f0126554:	48                   	dec    %eax
f0126555:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126558:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012655b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126560:	f7 75 b8             	divl   -0x48(%ebp)
f0126563:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126566:	29 d0                	sub    %edx,%eax
f0126568:	01 d8                	add    %ebx,%eax
f012656a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012656f:	39 c1                	cmp    %eax,%ecx
f0126571:	74 17                	je     f012658a <test_kfreeall+0x13c>
f0126573:	83 ec 04             	sub    $0x4,%esp
f0126576:	68 80 b3 13 f0       	push   $0xf013b380
f012657b:	68 f9 09 00 00       	push   $0x9f9
f0126580:	68 9a b2 13 f0       	push   $0xf013b29a
f0126585:	e8 7b 9c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012658a:	e8 39 d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012658f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126592:	74 17                	je     f01265ab <test_kfreeall+0x15d>
f0126594:	83 ec 04             	sub    $0x4,%esp
f0126597:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012659c:	68 fa 09 00 00       	push   $0x9fa
f01265a1:	68 9a b2 13 f0       	push   $0xf013b29a
f01265a6:	e8 5a 9c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265ae:	e8 ea 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01265b3:	29 c3                	sub    %eax,%ebx
f01265b5:	89 d8                	mov    %ebx,%eax
f01265b7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265bc:	74 17                	je     f01265d5 <test_kfreeall+0x187>
f01265be:	83 ec 04             	sub    $0x4,%esp
f01265c1:	68 1c b3 13 f0       	push   $0xf013b31c
f01265c6:	68 fb 09 00 00       	push   $0x9fb
f01265cb:	68 9a b2 13 f0       	push   $0xf013b29a
f01265d0:	e8 30 9c fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01265d5:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01265dc:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01265df:	e8 b9 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01265e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265e7:	e8 dc d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01265ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01265ef:	83 ec 0c             	sub    $0xc,%esp
f01265f2:	68 00 fc 1f 00       	push   $0x1ffc00
f01265f7:	e8 89 12 fe ff       	call   f0107885 <kmalloc>
f01265fc:	83 c4 10             	add    $0x10,%esp
f01265ff:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126605:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012660b:	89 c1                	mov    %eax,%ecx
f012660d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126614:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126617:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012661c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012661f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126622:	ba 00 00 00 00       	mov    $0x0,%edx
f0126627:	f7 75 b0             	divl   -0x50(%ebp)
f012662a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012662d:	29 d0                	sub    %edx,%eax
f012662f:	89 c3                	mov    %eax,%ebx
f0126631:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126638:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012663d:	0f b6 d0             	movzbl %al,%edx
f0126640:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126643:	01 d0                	add    %edx,%eax
f0126645:	48                   	dec    %eax
f0126646:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126649:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012664c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126651:	f7 75 a8             	divl   -0x58(%ebp)
f0126654:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126657:	29 d0                	sub    %edx,%eax
f0126659:	01 c3                	add    %eax,%ebx
f012665b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126662:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126667:	0f b6 c0             	movzbl %al,%eax
f012666a:	c1 e0 04             	shl    $0x4,%eax
f012666d:	89 c2                	mov    %eax,%edx
f012666f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126672:	01 d0                	add    %edx,%eax
f0126674:	48                   	dec    %eax
f0126675:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126678:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012667b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126680:	f7 75 a0             	divl   -0x60(%ebp)
f0126683:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126686:	29 d0                	sub    %edx,%eax
f0126688:	01 d8                	add    %ebx,%eax
f012668a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012668f:	39 c1                	cmp    %eax,%ecx
f0126691:	74 17                	je     f01266aa <test_kfreeall+0x25c>
f0126693:	83 ec 04             	sub    $0x4,%esp
f0126696:	68 80 b3 13 f0       	push   $0xf013b380
f012669b:	68 02 0a 00 00       	push   $0xa02
f01266a0:	68 9a b2 13 f0       	push   $0xf013b29a
f01266a5:	e8 5b 9b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266aa:	e8 19 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01266af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01266b2:	74 17                	je     f01266cb <test_kfreeall+0x27d>
f01266b4:	83 ec 04             	sub    $0x4,%esp
f01266b7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01266bc:	68 03 0a 00 00       	push   $0xa03
f01266c1:	68 9a b2 13 f0       	push   $0xf013b29a
f01266c6:	e8 3a 9b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01266cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01266ce:	e8 ca 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01266d3:	29 c3                	sub    %eax,%ebx
f01266d5:	89 d8                	mov    %ebx,%eax
f01266d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01266dc:	74 17                	je     f01266f5 <test_kfreeall+0x2a7>
f01266de:	83 ec 04             	sub    $0x4,%esp
f01266e1:	68 1c b3 13 f0       	push   $0xf013b31c
f01266e6:	68 04 0a 00 00       	push   $0xa04
f01266eb:	68 9a b2 13 f0       	push   $0xf013b29a
f01266f0:	e8 10 9b fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01266f5:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01266fc:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01266ff:	e8 99 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126704:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126707:	e8 bc d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012670c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012670f:	83 ec 0c             	sub    $0xc,%esp
f0126712:	68 00 08 00 00       	push   $0x800
f0126717:	e8 69 11 fe ff       	call   f0107885 <kmalloc>
f012671c:	83 c4 10             	add    $0x10,%esp
f012671f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126725:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012672b:	89 c1                	mov    %eax,%ecx
f012672d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126734:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126737:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012673c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012673f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126742:	ba 00 00 00 00       	mov    $0x0,%edx
f0126747:	f7 75 98             	divl   -0x68(%ebp)
f012674a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012674d:	29 d0                	sub    %edx,%eax
f012674f:	89 c3                	mov    %eax,%ebx
f0126751:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126758:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012675d:	0f b6 d0             	movzbl %al,%edx
f0126760:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126763:	01 d0                	add    %edx,%eax
f0126765:	48                   	dec    %eax
f0126766:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126769:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012676c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126771:	f7 75 90             	divl   -0x70(%ebp)
f0126774:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126777:	29 d0                	sub    %edx,%eax
f0126779:	01 c3                	add    %eax,%ebx
f012677b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126782:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126787:	0f b6 c0             	movzbl %al,%eax
f012678a:	c1 e0 04             	shl    $0x4,%eax
f012678d:	89 c2                	mov    %eax,%edx
f012678f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126792:	01 d0                	add    %edx,%eax
f0126794:	48                   	dec    %eax
f0126795:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126798:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012679b:	ba 00 00 00 00       	mov    $0x0,%edx
f01267a0:	f7 75 88             	divl   -0x78(%ebp)
f01267a3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01267a6:	29 d0                	sub    %edx,%eax
f01267a8:	01 d8                	add    %ebx,%eax
f01267aa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01267af:	39 c1                	cmp    %eax,%ecx
f01267b1:	74 17                	je     f01267ca <test_kfreeall+0x37c>
f01267b3:	83 ec 04             	sub    $0x4,%esp
f01267b6:	68 80 b3 13 f0       	push   $0xf013b380
f01267bb:	68 0b 0a 00 00       	push   $0xa0b
f01267c0:	68 9a b2 13 f0       	push   $0xf013b29a
f01267c5:	e8 3b 9a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267ca:	e8 f9 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01267cf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01267d2:	74 17                	je     f01267eb <test_kfreeall+0x39d>
f01267d4:	83 ec 04             	sub    $0x4,%esp
f01267d7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01267dc:	68 0c 0a 00 00       	push   $0xa0c
f01267e1:	68 9a b2 13 f0       	push   $0xf013b29a
f01267e6:	e8 1a 9a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267eb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01267ee:	e8 aa 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01267f3:	29 c3                	sub    %eax,%ebx
f01267f5:	89 d8                	mov    %ebx,%eax
f01267f7:	83 f8 01             	cmp    $0x1,%eax
f01267fa:	74 17                	je     f0126813 <test_kfreeall+0x3c5>
f01267fc:	83 ec 04             	sub    $0x4,%esp
f01267ff:	68 1c b3 13 f0       	push   $0xf013b31c
f0126804:	68 0d 0a 00 00       	push   $0xa0d
f0126809:	68 9a b2 13 f0       	push   $0xf013b29a
f012680e:	e8 f2 99 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126813:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f012681a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012681d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126823:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126826:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012682d:	eb 0e                	jmp    f012683d <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012682f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126832:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126835:	01 d0                	add    %edx,%eax
f0126837:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012683a:	ff 45 f4             	incl   -0xc(%ebp)
f012683d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126843:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126846:	7f e7                	jg     f012682f <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126848:	e8 50 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012684d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126850:	e8 73 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126855:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126858:	83 ec 0c             	sub    $0xc,%esp
f012685b:	68 00 08 00 00       	push   $0x800
f0126860:	e8 20 10 fe ff       	call   f0107885 <kmalloc>
f0126865:	83 c4 10             	add    $0x10,%esp
f0126868:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012686e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126874:	89 c1                	mov    %eax,%ecx
f0126876:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012687d:	10 00 00 
f0126880:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126886:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012688b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126891:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126897:	ba 00 00 00 00       	mov    $0x0,%edx
f012689c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01268a2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01268a8:	29 d0                	sub    %edx,%eax
f01268aa:	89 c3                	mov    %eax,%ebx
f01268ac:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01268b3:	10 00 00 
f01268b6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01268bb:	0f b6 d0             	movzbl %al,%edx
f01268be:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01268c4:	01 d0                	add    %edx,%eax
f01268c6:	48                   	dec    %eax
f01268c7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01268cd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01268d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01268d8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01268de:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01268e4:	29 d0                	sub    %edx,%eax
f01268e6:	01 c3                	add    %eax,%ebx
f01268e8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01268ef:	10 00 00 
f01268f2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01268f7:	0f b6 c0             	movzbl %al,%eax
f01268fa:	c1 e0 04             	shl    $0x4,%eax
f01268fd:	89 c2                	mov    %eax,%edx
f01268ff:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126905:	01 d0                	add    %edx,%eax
f0126907:	48                   	dec    %eax
f0126908:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012690e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126914:	ba 00 00 00 00       	mov    $0x0,%edx
f0126919:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012691f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126925:	29 d0                	sub    %edx,%eax
f0126927:	01 d8                	add    %ebx,%eax
f0126929:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012692e:	39 c1                	cmp    %eax,%ecx
f0126930:	74 17                	je     f0126949 <test_kfreeall+0x4fb>
f0126932:	83 ec 04             	sub    $0x4,%esp
f0126935:	68 80 b3 13 f0       	push   $0xf013b380
f012693a:	68 19 0a 00 00       	push   $0xa19
f012693f:	68 9a b2 13 f0       	push   $0xf013b29a
f0126944:	e8 bc 98 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126949:	e8 7a d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012694e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126951:	74 17                	je     f012696a <test_kfreeall+0x51c>
f0126953:	83 ec 04             	sub    $0x4,%esp
f0126956:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012695b:	68 1a 0a 00 00       	push   $0xa1a
f0126960:	68 9a b2 13 f0       	push   $0xf013b29a
f0126965:	e8 9b 98 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012696a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012696d:	e8 2b 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126972:	29 c3                	sub    %eax,%ebx
f0126974:	89 d8                	mov    %ebx,%eax
f0126976:	83 f8 01             	cmp    $0x1,%eax
f0126979:	74 17                	je     f0126992 <test_kfreeall+0x544>
f012697b:	83 ec 04             	sub    $0x4,%esp
f012697e:	68 1c b3 13 f0       	push   $0xf013b31c
f0126983:	68 1b 0a 00 00       	push   $0xa1b
f0126988:	68 9a b2 13 f0       	push   $0xf013b29a
f012698d:	e8 73 98 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126992:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126999:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012699c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01269a2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01269a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269ac:	eb 0e                	jmp    f01269bc <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f01269ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01269b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269b4:	01 d0                	add    %edx,%eax
f01269b6:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01269b9:	ff 45 f4             	incl   -0xc(%ebp)
f01269bc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01269c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269c5:	7f e7                	jg     f01269ae <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01269c7:	e8 d1 61 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01269cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269cf:	e8 f4 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01269d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01269d7:	83 ec 0c             	sub    $0xc,%esp
f01269da:	68 00 1c 00 00       	push   $0x1c00
f01269df:	e8 a1 0e fe ff       	call   f0107885 <kmalloc>
f01269e4:	83 c4 10             	add    $0x10,%esp
f01269e7:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269ed:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01269f3:	89 c1                	mov    %eax,%ecx
f01269f5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01269fc:	10 00 00 
f01269ff:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126a05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126a0a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126a10:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a1b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126a21:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126a27:	29 d0                	sub    %edx,%eax
f0126a29:	89 c3                	mov    %eax,%ebx
f0126a2b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126a32:	10 00 00 
f0126a35:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126a3a:	0f b6 d0             	movzbl %al,%edx
f0126a3d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126a43:	01 d0                	add    %edx,%eax
f0126a45:	48                   	dec    %eax
f0126a46:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126a4c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a57:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126a5d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126a63:	29 d0                	sub    %edx,%eax
f0126a65:	01 c3                	add    %eax,%ebx
f0126a67:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126a6e:	10 00 00 
f0126a71:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126a76:	0f b6 c0             	movzbl %al,%eax
f0126a79:	c1 e0 04             	shl    $0x4,%eax
f0126a7c:	89 c2                	mov    %eax,%edx
f0126a7e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126a84:	01 d0                	add    %edx,%eax
f0126a86:	48                   	dec    %eax
f0126a87:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126a8d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a98:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126a9e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126aa4:	29 d0                	sub    %edx,%eax
f0126aa6:	01 d8                	add    %ebx,%eax
f0126aa8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126aad:	39 c1                	cmp    %eax,%ecx
f0126aaf:	74 17                	je     f0126ac8 <test_kfreeall+0x67a>
f0126ab1:	83 ec 04             	sub    $0x4,%esp
f0126ab4:	68 80 b3 13 f0       	push   $0xf013b380
f0126ab9:	68 27 0a 00 00       	push   $0xa27
f0126abe:	68 9a b2 13 f0       	push   $0xf013b29a
f0126ac3:	e8 3d 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ac8:	e8 fb d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126acd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ad0:	74 17                	je     f0126ae9 <test_kfreeall+0x69b>
f0126ad2:	83 ec 04             	sub    $0x4,%esp
f0126ad5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126ada:	68 28 0a 00 00       	push   $0xa28
f0126adf:	68 9a b2 13 f0       	push   $0xf013b29a
f0126ae4:	e8 1c 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ae9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126aec:	e8 ac 60 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126af1:	29 c3                	sub    %eax,%ebx
f0126af3:	89 d8                	mov    %ebx,%eax
f0126af5:	83 f8 02             	cmp    $0x2,%eax
f0126af8:	74 17                	je     f0126b11 <test_kfreeall+0x6c3>
f0126afa:	83 ec 04             	sub    $0x4,%esp
f0126afd:	68 1c b3 13 f0       	push   $0xf013b31c
f0126b02:	68 29 0a 00 00       	push   $0xa29
f0126b07:	68 9a b2 13 f0       	push   $0xf013b29a
f0126b0c:	e8 f4 96 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126b11:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126b18:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126b1b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126b21:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126b24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b2b:	eb 0e                	jmp    f0126b3b <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126b2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b30:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126b33:	01 d0                	add    %edx,%eax
f0126b35:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126b38:	ff 45 f4             	incl   -0xc(%ebp)
f0126b3b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126b41:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b44:	7f e7                	jg     f0126b2d <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b46:	e8 52 60 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126b4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b4e:	e8 75 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b53:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126b56:	83 ec 0c             	sub    $0xc,%esp
f0126b59:	68 00 fc 2f 00       	push   $0x2ffc00
f0126b5e:	e8 22 0d fe ff       	call   f0107885 <kmalloc>
f0126b63:	83 c4 10             	add    $0x10,%esp
f0126b66:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b6c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126b72:	89 c1                	mov    %eax,%ecx
f0126b74:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126b7b:	10 00 00 
f0126b7e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126b84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b89:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126b8f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b9a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126ba0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126ba6:	29 d0                	sub    %edx,%eax
f0126ba8:	89 c3                	mov    %eax,%ebx
f0126baa:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126bb1:	10 00 00 
f0126bb4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126bb9:	0f b6 d0             	movzbl %al,%edx
f0126bbc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126bc2:	01 d0                	add    %edx,%eax
f0126bc4:	48                   	dec    %eax
f0126bc5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126bcb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126bd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bd6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126bdc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126be2:	29 d0                	sub    %edx,%eax
f0126be4:	01 c3                	add    %eax,%ebx
f0126be6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126bed:	10 00 00 
f0126bf0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126bf5:	0f b6 c0             	movzbl %al,%eax
f0126bf8:	c1 e0 04             	shl    $0x4,%eax
f0126bfb:	89 c2                	mov    %eax,%edx
f0126bfd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126c03:	01 d0                	add    %edx,%eax
f0126c05:	48                   	dec    %eax
f0126c06:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126c0c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126c12:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c17:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126c1d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126c23:	29 d0                	sub    %edx,%eax
f0126c25:	01 d8                	add    %ebx,%eax
f0126c27:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126c2c:	39 c1                	cmp    %eax,%ecx
f0126c2e:	74 17                	je     f0126c47 <test_kfreeall+0x7f9>
f0126c30:	83 ec 04             	sub    $0x4,%esp
f0126c33:	68 80 b3 13 f0       	push   $0xf013b380
f0126c38:	68 35 0a 00 00       	push   $0xa35
f0126c3d:	68 9a b2 13 f0       	push   $0xf013b29a
f0126c42:	e8 be 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c47:	e8 7c d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c4c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c4f:	74 17                	je     f0126c68 <test_kfreeall+0x81a>
f0126c51:	83 ec 04             	sub    $0x4,%esp
f0126c54:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126c59:	68 36 0a 00 00       	push   $0xa36
f0126c5e:	68 9a b2 13 f0       	push   $0xf013b29a
f0126c63:	e8 9d 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c68:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c6b:	e8 2d 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126c70:	29 c3                	sub    %eax,%ebx
f0126c72:	89 d8                	mov    %ebx,%eax
f0126c74:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126c79:	74 17                	je     f0126c92 <test_kfreeall+0x844>
f0126c7b:	83 ec 04             	sub    $0x4,%esp
f0126c7e:	68 1c b3 13 f0       	push   $0xf013b31c
f0126c83:	68 37 0a 00 00       	push   $0xa37
f0126c88:	68 9a b2 13 f0       	push   $0xf013b29a
f0126c8d:	e8 73 95 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126c92:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126c99:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126c9c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126ca2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126ca5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cac:	eb 0e                	jmp    f0126cbc <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126cae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126cb1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cb4:	01 d0                	add    %edx,%eax
f0126cb6:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126cb9:	ff 45 f4             	incl   -0xc(%ebp)
f0126cbc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126cc2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cc5:	7f e7                	jg     f0126cae <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cc7:	e8 d1 5e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126ccc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ccf:	e8 f4 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126cd7:	83 ec 0c             	sub    $0xc,%esp
f0126cda:	68 00 fc 5f 00       	push   $0x5ffc00
f0126cdf:	e8 a1 0b fe ff       	call   f0107885 <kmalloc>
f0126ce4:	83 c4 10             	add    $0x10,%esp
f0126ce7:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ced:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126cf3:	89 c1                	mov    %eax,%ecx
f0126cf5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126cfc:	10 00 00 
f0126cff:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126d05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d0a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126d10:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126d16:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d1b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126d21:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126d27:	29 d0                	sub    %edx,%eax
f0126d29:	89 c3                	mov    %eax,%ebx
f0126d2b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126d32:	10 00 00 
f0126d35:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126d3a:	0f b6 d0             	movzbl %al,%edx
f0126d3d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126d43:	01 d0                	add    %edx,%eax
f0126d45:	48                   	dec    %eax
f0126d46:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126d4c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d57:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126d5d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126d63:	29 d0                	sub    %edx,%eax
f0126d65:	01 c3                	add    %eax,%ebx
f0126d67:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126d6e:	10 00 00 
f0126d71:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126d76:	0f b6 c0             	movzbl %al,%eax
f0126d79:	c1 e0 04             	shl    $0x4,%eax
f0126d7c:	89 c2                	mov    %eax,%edx
f0126d7e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126d84:	01 d0                	add    %edx,%eax
f0126d86:	48                   	dec    %eax
f0126d87:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126d8d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126d93:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d98:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126d9e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126da4:	29 d0                	sub    %edx,%eax
f0126da6:	01 d8                	add    %ebx,%eax
f0126da8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126dad:	39 c1                	cmp    %eax,%ecx
f0126daf:	74 17                	je     f0126dc8 <test_kfreeall+0x97a>
f0126db1:	83 ec 04             	sub    $0x4,%esp
f0126db4:	68 80 b3 13 f0       	push   $0xf013b380
f0126db9:	68 43 0a 00 00       	push   $0xa43
f0126dbe:	68 9a b2 13 f0       	push   $0xf013b29a
f0126dc3:	e8 3d 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dc8:	e8 fb cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126dcd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126dd0:	74 17                	je     f0126de9 <test_kfreeall+0x99b>
f0126dd2:	83 ec 04             	sub    $0x4,%esp
f0126dd5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126dda:	68 44 0a 00 00       	push   $0xa44
f0126ddf:	68 9a b2 13 f0       	push   $0xf013b29a
f0126de4:	e8 1c 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126de9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126dec:	e8 ac 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126df1:	29 c3                	sub    %eax,%ebx
f0126df3:	89 d8                	mov    %ebx,%eax
f0126df5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126dfa:	74 17                	je     f0126e13 <test_kfreeall+0x9c5>
f0126dfc:	83 ec 04             	sub    $0x4,%esp
f0126dff:	68 1c b3 13 f0       	push   $0xf013b31c
f0126e04:	68 45 0a 00 00       	push   $0xa45
f0126e09:	68 9a b2 13 f0       	push   $0xf013b29a
f0126e0e:	e8 f2 93 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126e13:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126e1a:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e1d:	e8 7b 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126e22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e25:	e8 9e cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126e2d:	83 ec 0c             	sub    $0xc,%esp
f0126e30:	68 00 38 00 00       	push   $0x3800
f0126e35:	e8 4b 0a fe ff       	call   f0107885 <kmalloc>
f0126e3a:	83 c4 10             	add    $0x10,%esp
f0126e3d:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e43:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126e49:	89 c1                	mov    %eax,%ecx
f0126e4b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126e52:	10 00 00 
f0126e55:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126e5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e60:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126e66:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e71:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126e77:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126e7d:	29 d0                	sub    %edx,%eax
f0126e7f:	89 c3                	mov    %eax,%ebx
f0126e81:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126e88:	10 00 00 
f0126e8b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126e90:	0f b6 d0             	movzbl %al,%edx
f0126e93:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126e99:	01 d0                	add    %edx,%eax
f0126e9b:	48                   	dec    %eax
f0126e9c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126ea2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ead:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126eb3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126eb9:	29 d0                	sub    %edx,%eax
f0126ebb:	01 c3                	add    %eax,%ebx
f0126ebd:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126ec4:	10 00 00 
f0126ec7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126ecc:	0f b6 c0             	movzbl %al,%eax
f0126ecf:	c1 e0 04             	shl    $0x4,%eax
f0126ed2:	89 c2                	mov    %eax,%edx
f0126ed4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126eda:	01 d0                	add    %edx,%eax
f0126edc:	48                   	dec    %eax
f0126edd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126ee3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eee:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126ef4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126efa:	29 d0                	sub    %edx,%eax
f0126efc:	01 d8                	add    %ebx,%eax
f0126efe:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126f03:	39 c1                	cmp    %eax,%ecx
f0126f05:	74 17                	je     f0126f1e <test_kfreeall+0xad0>
f0126f07:	83 ec 04             	sub    $0x4,%esp
f0126f0a:	68 80 b3 13 f0       	push   $0xf013b380
f0126f0f:	68 4c 0a 00 00       	push   $0xa4c
f0126f14:	68 9a b2 13 f0       	push   $0xf013b29a
f0126f19:	e8 e7 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f1e:	e8 a5 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f23:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f26:	74 17                	je     f0126f3f <test_kfreeall+0xaf1>
f0126f28:	83 ec 04             	sub    $0x4,%esp
f0126f2b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126f30:	68 4d 0a 00 00       	push   $0xa4d
f0126f35:	68 9a b2 13 f0       	push   $0xf013b29a
f0126f3a:	e8 c6 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f3f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f42:	e8 56 5c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126f47:	29 c3                	sub    %eax,%ebx
f0126f49:	89 d8                	mov    %ebx,%eax
f0126f4b:	83 f8 04             	cmp    $0x4,%eax
f0126f4e:	74 17                	je     f0126f67 <test_kfreeall+0xb19>
f0126f50:	83 ec 04             	sub    $0x4,%esp
f0126f53:	68 1c b3 13 f0       	push   $0xf013b31c
f0126f58:	68 4e 0a 00 00       	push   $0xa4e
f0126f5d:	68 9a b2 13 f0       	push   $0xf013b29a
f0126f62:	e8 9e 92 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126f67:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126f6e:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126f71:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126f77:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126f7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f81:	eb 0e                	jmp    f0126f91 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126f83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f86:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f89:	01 d0                	add    %edx,%eax
f0126f8b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126f8e:	ff 45 f4             	incl   -0xc(%ebp)
f0126f91:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126f97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f9a:	7f e7                	jg     f0126f83 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126f9c:	e8 fc 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126fa1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126fa7:	e8 1c ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fac:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126fb2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126fb8:	83 ec 0c             	sub    $0xc,%esp
f0126fbb:	50                   	push   %eax
f0126fbc:	e8 8f 09 fe ff       	call   f0107950 <kfree>
f0126fc1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126fc4:	e8 ff cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fc9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126fcf:	74 17                	je     f0126fe8 <test_kfreeall+0xb9a>
f0126fd1:	83 ec 04             	sub    $0x4,%esp
f0126fd4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0126fd9:	68 5d 0a 00 00       	push   $0xa5d
f0126fde:	68 9a b2 13 f0       	push   $0xf013b29a
f0126fe3:	e8 1d 92 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126fe8:	e8 b0 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126fed:	89 c2                	mov    %eax,%edx
f0126fef:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126ff5:	29 c2                	sub    %eax,%edx
f0126ff7:	89 d0                	mov    %edx,%eax
f0126ff9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ffe:	74 17                	je     f0127017 <test_kfreeall+0xbc9>
f0127000:	83 ec 04             	sub    $0x4,%esp
f0127003:	68 24 ba 13 f0       	push   $0xf013ba24
f0127008:	68 5e 0a 00 00       	push   $0xa5e
f012700d:	68 9a b2 13 f0       	push   $0xf013b29a
f0127012:	e8 ee 91 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127017:	e8 81 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012701c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127022:	e8 a1 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127027:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012702d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0127033:	83 ec 0c             	sub    $0xc,%esp
f0127036:	50                   	push   %eax
f0127037:	e8 14 09 fe ff       	call   f0107950 <kfree>
f012703c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012703f:	e8 84 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127044:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012704a:	74 17                	je     f0127063 <test_kfreeall+0xc15>
f012704c:	83 ec 04             	sub    $0x4,%esp
f012704f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127054:	68 64 0a 00 00       	push   $0xa64
f0127059:	68 9a b2 13 f0       	push   $0xf013b29a
f012705e:	e8 a2 91 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0127063:	e8 35 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127068:	89 c2                	mov    %eax,%edx
f012706a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127070:	29 c2                	sub    %eax,%edx
f0127072:	89 d0                	mov    %edx,%eax
f0127074:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127079:	74 17                	je     f0127092 <test_kfreeall+0xc44>
f012707b:	83 ec 04             	sub    $0x4,%esp
f012707e:	68 24 ba 13 f0       	push   $0xf013ba24
f0127083:	68 65 0a 00 00       	push   $0xa65
f0127088:	68 9a b2 13 f0       	push   $0xf013b29a
f012708d:	e8 73 91 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127092:	e8 06 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127097:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012709d:	e8 26 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270a2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01270a8:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01270ae:	83 ec 0c             	sub    $0xc,%esp
f01270b1:	50                   	push   %eax
f01270b2:	e8 99 08 fe ff       	call   f0107950 <kfree>
f01270b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270ba:	e8 09 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270bf:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01270c5:	74 17                	je     f01270de <test_kfreeall+0xc90>
f01270c7:	83 ec 04             	sub    $0x4,%esp
f01270ca:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01270cf:	68 6b 0a 00 00       	push   $0xa6b
f01270d4:	68 9a b2 13 f0       	push   $0xf013b29a
f01270d9:	e8 27 91 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01270de:	e8 ba 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01270e3:	89 c2                	mov    %eax,%edx
f01270e5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01270eb:	29 c2                	sub    %eax,%edx
f01270ed:	89 d0                	mov    %edx,%eax
f01270ef:	3d 00 06 00 00       	cmp    $0x600,%eax
f01270f4:	74 17                	je     f012710d <test_kfreeall+0xcbf>
f01270f6:	83 ec 04             	sub    $0x4,%esp
f01270f9:	68 24 ba 13 f0       	push   $0xf013ba24
f01270fe:	68 6c 0a 00 00       	push   $0xa6c
f0127103:	68 9a b2 13 f0       	push   $0xf013b29a
f0127108:	e8 f8 90 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012710d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127113:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127116:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012711d:	eb 1e                	jmp    f012713d <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f012711f:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127125:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127128:	8b 45 80             	mov    -0x80(%ebp),%eax
f012712b:	01 c8                	add    %ecx,%eax
f012712d:	8a 00                	mov    (%eax),%al
f012712f:	0f be c0             	movsbl %al,%eax
f0127132:	01 d0                	add    %edx,%eax
f0127134:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012713a:	ff 45 f4             	incl   -0xc(%ebp)
f012713d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127143:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127146:	7f d7                	jg     f012711f <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127148:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012714e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127154:	01 c0                	add    %eax,%eax
f0127156:	39 c2                	cmp    %eax,%edx
f0127158:	74 17                	je     f0127171 <test_kfreeall+0xd23>
f012715a:	83 ec 04             	sub    $0x4,%esp
f012715d:	68 80 ba 13 f0       	push   $0xf013ba80
f0127162:	68 78 0a 00 00       	push   $0xa78
f0127167:	68 9a b2 13 f0       	push   $0xf013b29a
f012716c:	e8 94 90 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127171:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127177:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012717a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127181:	eb 1e                	jmp    f01271a1 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127183:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127189:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012718c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012718f:	01 c8                	add    %ecx,%eax
f0127191:	8a 00                	mov    (%eax),%al
f0127193:	0f be c0             	movsbl %al,%eax
f0127196:	01 d0                	add    %edx,%eax
f0127198:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012719e:	ff 45 f4             	incl   -0xc(%ebp)
f01271a1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01271a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01271aa:	7f d7                	jg     f0127183 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01271ac:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01271b2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01271b8:	89 c1                	mov    %eax,%ecx
f01271ba:	01 c9                	add    %ecx,%ecx
f01271bc:	01 c8                	add    %ecx,%eax
f01271be:	39 c2                	cmp    %eax,%edx
f01271c0:	74 17                	je     f01271d9 <test_kfreeall+0xd8b>
f01271c2:	83 ec 04             	sub    $0x4,%esp
f01271c5:	68 80 ba 13 f0       	push   $0xf013ba80
f01271ca:	68 80 0a 00 00       	push   $0xa80
f01271cf:	68 9a b2 13 f0       	push   $0xf013b29a
f01271d4:	e8 2c 90 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01271d9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01271df:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01271e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01271e9:	eb 1e                	jmp    f0127209 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f01271eb:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01271f1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01271f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01271f7:	01 c8                	add    %ecx,%eax
f01271f9:	8a 00                	mov    (%eax),%al
f01271fb:	0f be c0             	movsbl %al,%eax
f01271fe:	01 d0                	add    %edx,%eax
f0127200:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127206:	ff 45 f4             	incl   -0xc(%ebp)
f0127209:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012720f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127212:	7f d7                	jg     f01271eb <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127214:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012721a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127220:	c1 e2 02             	shl    $0x2,%edx
f0127223:	39 d0                	cmp    %edx,%eax
f0127225:	74 17                	je     f012723e <test_kfreeall+0xdf0>
f0127227:	83 ec 04             	sub    $0x4,%esp
f012722a:	68 80 ba 13 f0       	push   $0xf013ba80
f012722f:	68 88 0a 00 00       	push   $0xa88
f0127234:	68 9a b2 13 f0       	push   $0xf013b29a
f0127239:	e8 c7 8f fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012723e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127244:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127247:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012724e:	eb 1e                	jmp    f012726e <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127250:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127256:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127259:	8b 45 80             	mov    -0x80(%ebp),%eax
f012725c:	01 c8                	add    %ecx,%eax
f012725e:	8a 00                	mov    (%eax),%al
f0127260:	0f be c0             	movsbl %al,%eax
f0127263:	01 d0                	add    %edx,%eax
f0127265:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012726b:	ff 45 f4             	incl   -0xc(%ebp)
f012726e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127274:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127277:	7f d7                	jg     f0127250 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127279:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012727f:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127285:	89 d0                	mov    %edx,%eax
f0127287:	c1 e0 02             	shl    $0x2,%eax
f012728a:	01 d0                	add    %edx,%eax
f012728c:	39 c1                	cmp    %eax,%ecx
f012728e:	74 17                	je     f01272a7 <test_kfreeall+0xe59>
f0127290:	83 ec 04             	sub    $0x4,%esp
f0127293:	68 80 ba 13 f0       	push   $0xf013ba80
f0127298:	68 90 0a 00 00       	push   $0xa90
f012729d:	68 9a b2 13 f0       	push   $0xf013b29a
f01272a2:	e8 5e 8f fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01272a7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01272ad:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01272b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272b7:	eb 1e                	jmp    f01272d7 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f01272b9:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01272bf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01272c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272c5:	01 c8                	add    %ecx,%eax
f01272c7:	8a 00                	mov    (%eax),%al
f01272c9:	0f be c0             	movsbl %al,%eax
f01272cc:	01 d0                	add    %edx,%eax
f01272ce:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01272d4:	ff 45 f4             	incl   -0xc(%ebp)
f01272d7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01272dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01272e0:	7f d7                	jg     f01272b9 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01272e2:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01272e8:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01272ee:	89 d0                	mov    %edx,%eax
f01272f0:	01 c0                	add    %eax,%eax
f01272f2:	01 d0                	add    %edx,%eax
f01272f4:	01 c0                	add    %eax,%eax
f01272f6:	01 d0                	add    %edx,%eax
f01272f8:	39 c1                	cmp    %eax,%ecx
f01272fa:	74 17                	je     f0127313 <test_kfreeall+0xec5>
f01272fc:	83 ec 04             	sub    $0x4,%esp
f01272ff:	68 80 ba 13 f0       	push   $0xf013ba80
f0127304:	68 98 0a 00 00       	push   $0xa98
f0127309:	68 9a b2 13 f0       	push   $0xf013b29a
f012730e:	e8 f2 8e fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127313:	e8 85 58 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127318:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012731b:	e8 a8 ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127320:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127323:	83 ec 0c             	sub    $0xc,%esp
f0127326:	68 00 50 00 00       	push   $0x5000
f012732b:	e8 55 05 fe ff       	call   f0107885 <kmalloc>
f0127330:	83 c4 10             	add    $0x10,%esp
f0127333:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127339:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012733f:	89 c1                	mov    %eax,%ecx
f0127341:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127348:	10 00 00 
f012734b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127351:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127356:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012735c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127362:	ba 00 00 00 00       	mov    $0x0,%edx
f0127367:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012736d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127373:	29 d0                	sub    %edx,%eax
f0127375:	89 c3                	mov    %eax,%ebx
f0127377:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012737e:	10 00 00 
f0127381:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127386:	0f b6 d0             	movzbl %al,%edx
f0127389:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012738f:	01 d0                	add    %edx,%eax
f0127391:	48                   	dec    %eax
f0127392:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127398:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012739e:	ba 00 00 00 00       	mov    $0x0,%edx
f01273a3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01273a9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01273af:	29 d0                	sub    %edx,%eax
f01273b1:	01 c3                	add    %eax,%ebx
f01273b3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01273ba:	10 00 00 
f01273bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01273c2:	0f b6 c0             	movzbl %al,%eax
f01273c5:	c1 e0 04             	shl    $0x4,%eax
f01273c8:	89 c2                	mov    %eax,%edx
f01273ca:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01273d0:	01 d0                	add    %edx,%eax
f01273d2:	48                   	dec    %eax
f01273d3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01273d9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01273df:	ba 00 00 00 00       	mov    $0x0,%edx
f01273e4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01273ea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01273f0:	29 d0                	sub    %edx,%eax
f01273f2:	01 d8                	add    %ebx,%eax
f01273f4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01273f9:	39 c1                	cmp    %eax,%ecx
f01273fb:	74 17                	je     f0127414 <test_kfreeall+0xfc6>
f01273fd:	83 ec 04             	sub    $0x4,%esp
f0127400:	68 80 b3 13 f0       	push   $0xf013b380
f0127405:	68 a1 0a 00 00       	push   $0xaa1
f012740a:	68 9a b2 13 f0       	push   $0xf013b29a
f012740f:	e8 f1 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127414:	e8 af c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127419:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012741c:	74 17                	je     f0127435 <test_kfreeall+0xfe7>
f012741e:	83 ec 04             	sub    $0x4,%esp
f0127421:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127426:	68 a2 0a 00 00       	push   $0xaa2
f012742b:	68 9a b2 13 f0       	push   $0xf013b29a
f0127430:	e8 d0 8d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127435:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127438:	e8 60 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012743d:	29 c3                	sub    %eax,%ebx
f012743f:	89 d8                	mov    %ebx,%eax
f0127441:	83 f8 05             	cmp    $0x5,%eax
f0127444:	74 17                	je     f012745d <test_kfreeall+0x100f>
f0127446:	83 ec 04             	sub    $0x4,%esp
f0127449:	68 1c b3 13 f0       	push   $0xf013b31c
f012744e:	68 a3 0a 00 00       	push   $0xaa3
f0127453:	68 9a b2 13 f0       	push   $0xf013b29a
f0127458:	e8 a8 8d fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012745d:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127464:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127467:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012746d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127470:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127477:	eb 0e                	jmp    f0127487 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127479:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012747c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012747f:	01 d0                	add    %edx,%eax
f0127481:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127484:	ff 45 f4             	incl   -0xc(%ebp)
f0127487:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012748d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127490:	7f e7                	jg     f0127479 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127492:	e8 06 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127497:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012749a:	e8 29 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012749f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01274a2:	83 ec 0c             	sub    $0xc,%esp
f01274a5:	68 00 00 10 00       	push   $0x100000
f01274aa:	e8 d6 03 fe ff       	call   f0107885 <kmalloc>
f01274af:	83 c4 10             	add    $0x10,%esp
f01274b2:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274b8:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01274be:	89 c1                	mov    %eax,%ecx
f01274c0:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01274c7:	10 00 00 
f01274ca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01274d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01274d5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01274db:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01274e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01274e6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01274ec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01274f2:	29 d0                	sub    %edx,%eax
f01274f4:	89 c3                	mov    %eax,%ebx
f01274f6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01274fd:	10 00 00 
f0127500:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127505:	0f b6 d0             	movzbl %al,%edx
f0127508:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012750e:	01 d0                	add    %edx,%eax
f0127510:	48                   	dec    %eax
f0127511:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127517:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012751d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127522:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127528:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012752e:	29 d0                	sub    %edx,%eax
f0127530:	01 c3                	add    %eax,%ebx
f0127532:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127539:	10 00 00 
f012753c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127541:	0f b6 c0             	movzbl %al,%eax
f0127544:	c1 e0 04             	shl    $0x4,%eax
f0127547:	89 c2                	mov    %eax,%edx
f0127549:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012754f:	01 d0                	add    %edx,%eax
f0127551:	48                   	dec    %eax
f0127552:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127558:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012755e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127563:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127569:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012756f:	29 d0                	sub    %edx,%eax
f0127571:	01 d8                	add    %ebx,%eax
f0127573:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127578:	39 c1                	cmp    %eax,%ecx
f012757a:	74 17                	je     f0127593 <test_kfreeall+0x1145>
f012757c:	83 ec 04             	sub    $0x4,%esp
f012757f:	68 80 b3 13 f0       	push   $0xf013b380
f0127584:	68 af 0a 00 00       	push   $0xaaf
f0127589:	68 9a b2 13 f0       	push   $0xf013b29a
f012758e:	e8 72 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127593:	e8 30 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127598:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012759b:	74 17                	je     f01275b4 <test_kfreeall+0x1166>
f012759d:	83 ec 04             	sub    $0x4,%esp
f01275a0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01275a5:	68 b0 0a 00 00       	push   $0xab0
f01275aa:	68 9a b2 13 f0       	push   $0xf013b29a
f01275af:	e8 51 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275b4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01275b7:	e8 e1 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01275bc:	29 c3                	sub    %eax,%ebx
f01275be:	89 d8                	mov    %ebx,%eax
f01275c0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01275c5:	74 17                	je     f01275de <test_kfreeall+0x1190>
f01275c7:	83 ec 04             	sub    $0x4,%esp
f01275ca:	68 1c b3 13 f0       	push   $0xf013b31c
f01275cf:	68 b1 0a 00 00       	push   $0xab1
f01275d4:	68 9a b2 13 f0       	push   $0xf013b29a
f01275d9:	e8 27 8c fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01275de:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01275e5:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01275e8:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01275ee:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01275f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275f8:	eb 0e                	jmp    f0127608 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f01275fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127600:	01 d0                	add    %edx,%eax
f0127602:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127605:	ff 45 f4             	incl   -0xc(%ebp)
f0127608:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012760e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127611:	7f e7                	jg     f01275fa <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127613:	e8 85 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127618:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012761b:	e8 a8 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127620:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127623:	e8 c6 04 fe ff       	call   f0107aee <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127628:	e8 9b c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012762d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127630:	74 17                	je     f0127649 <test_kfreeall+0x11fb>
f0127632:	83 ec 04             	sub    $0x4,%esp
f0127635:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012763a:	68 c1 0a 00 00       	push   $0xac1
f012763f:	68 9a b2 13 f0       	push   $0xf013b29a
f0127644:	e8 bc 8b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127649:	e8 4f 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012764e:	89 c2                	mov    %eax,%edx
f0127650:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127653:	89 d1                	mov    %edx,%ecx
f0127655:	29 c1                	sub    %eax,%ecx
f0127657:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012765e:	10 00 00 
f0127661:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127667:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012766c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127672:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127678:	ba 00 00 00 00       	mov    $0x0,%edx
f012767d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127683:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127689:	29 d0                	sub    %edx,%eax
f012768b:	89 c3                	mov    %eax,%ebx
f012768d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127694:	10 00 00 
f0127697:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012769c:	0f b6 d0             	movzbl %al,%edx
f012769f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01276a5:	01 d0                	add    %edx,%eax
f01276a7:	48                   	dec    %eax
f01276a8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01276ae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01276b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01276b9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01276bf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01276c5:	29 d0                	sub    %edx,%eax
f01276c7:	01 c3                	add    %eax,%ebx
f01276c9:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01276d0:	10 00 00 
f01276d3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01276d8:	0f b6 c0             	movzbl %al,%eax
f01276db:	c1 e0 04             	shl    $0x4,%eax
f01276de:	89 c2                	mov    %eax,%edx
f01276e0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01276e6:	01 d0                	add    %edx,%eax
f01276e8:	48                   	dec    %eax
f01276e9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01276ef:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01276f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01276fa:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127700:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127706:	29 d0                	sub    %edx,%eax
f0127708:	01 d8                	add    %ebx,%eax
f012770a:	05 00 40 00 00       	add    $0x4000,%eax
f012770f:	c1 e8 0c             	shr    $0xc,%eax
f0127712:	05 0d 04 00 00       	add    $0x40d,%eax
f0127717:	39 c1                	cmp    %eax,%ecx
f0127719:	74 17                	je     f0127732 <test_kfreeall+0x12e4>
f012771b:	83 ec 04             	sub    $0x4,%esp
f012771e:	68 24 ba 13 f0       	push   $0xf013ba24
f0127723:	68 c2 0a 00 00       	push   $0xac2
f0127728:	68 9a b2 13 f0       	push   $0xf013b29a
f012772d:	e8 d3 8a fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127732:	83 ec 0c             	sub    $0xc,%esp
f0127735:	6a 03                	push   $0x3
f0127737:	e8 01 59 fe ff       	call   f010d03d <sys_bypassPageFault>
f012773c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012773f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127746:	e9 82 00 00 00       	jmp    f01277cd <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f012774b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012774e:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127755:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127758:	8b 45 80             	mov    -0x80(%ebp),%eax
f012775b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012775e:	e8 c8 58 fe ff       	call   f010d02b <sys_rcr2>
f0127763:	89 c2                	mov    %eax,%edx
f0127765:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127768:	39 c2                	cmp    %eax,%edx
f012776a:	74 17                	je     f0127783 <test_kfreeall+0x1335>
f012776c:	83 ec 04             	sub    $0x4,%esp
f012776f:	68 00 bb 13 f0       	push   $0xf013bb00
f0127774:	68 d0 0a 00 00       	push   $0xad0
f0127779:	68 9a b2 13 f0       	push   $0xf013b29a
f012777e:	e8 82 8a fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127786:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012778d:	89 c2                	mov    %eax,%edx
f012778f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127792:	01 d0                	add    %edx,%eax
f0127794:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127797:	e8 8f 58 fe ff       	call   f010d02b <sys_rcr2>
f012779c:	89 c2                	mov    %eax,%edx
f012779e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01277a1:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01277a8:	89 c1                	mov    %eax,%ecx
f01277aa:	8b 45 80             	mov    -0x80(%ebp),%eax
f01277ad:	01 c8                	add    %ecx,%eax
f01277af:	39 c2                	cmp    %eax,%edx
f01277b1:	74 17                	je     f01277ca <test_kfreeall+0x137c>
f01277b3:	83 ec 04             	sub    $0x4,%esp
f01277b6:	68 00 bb 13 f0       	push   $0xf013bb00
f01277bb:	68 d2 0a 00 00       	push   $0xad2
f01277c0:	68 9a b2 13 f0       	push   $0xf013b29a
f01277c5:	e8 3b 8a fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01277ca:	ff 45 f4             	incl   -0xc(%ebp)
f01277cd:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01277d1:	0f 8e 74 ff ff ff    	jle    f012774b <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01277d7:	83 ec 0c             	sub    $0xc,%esp
f01277da:	6a 00                	push   $0x0
f01277dc:	e8 5c 58 fe ff       	call   f010d03d <sys_bypassPageFault>
f01277e1:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01277e4:	e8 b4 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01277e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277ec:	e8 d7 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01277f4:	83 ec 0c             	sub    $0xc,%esp
f01277f7:	68 00 00 40 00       	push   $0x400000
f01277fc:	e8 84 00 fe ff       	call   f0107885 <kmalloc>
f0127801:	83 c4 10             	add    $0x10,%esp
f0127804:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012780a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127810:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127815:	74 17                	je     f012782e <test_kfreeall+0x13e0>
f0127817:	83 ec 04             	sub    $0x4,%esp
f012781a:	68 a4 bf 13 f0       	push   $0xf013bfa4
f012781f:	68 de 0a 00 00       	push   $0xade
f0127824:	68 9a b2 13 f0       	push   $0xf013b29a
f0127829:	e8 d7 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012782e:	e8 95 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127833:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127836:	74 17                	je     f012784f <test_kfreeall+0x1401>
f0127838:	83 ec 04             	sub    $0x4,%esp
f012783b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127840:	68 df 0a 00 00       	push   $0xadf
f0127845:	68 9a b2 13 f0       	push   $0xf013b29a
f012784a:	e8 b6 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012784f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127852:	e8 46 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127857:	29 c3                	sub    %eax,%ebx
f0127859:	89 d8                	mov    %ebx,%eax
f012785b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127860:	74 17                	je     f0127879 <test_kfreeall+0x142b>
f0127862:	83 ec 04             	sub    $0x4,%esp
f0127865:	68 1c b3 13 f0       	push   $0xf013b31c
f012786a:	68 e0 0a 00 00       	push   $0xae0
f012786f:	68 9a b2 13 f0       	push   $0xf013b29a
f0127874:	e8 8c 89 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127879:	e8 1f 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012787e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127881:	e8 42 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127886:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127889:	83 ec 0c             	sub    $0xc,%esp
f012788c:	68 00 30 00 00       	push   $0x3000
f0127891:	e8 ef ff fd ff       	call   f0107885 <kmalloc>
f0127896:	83 c4 10             	add    $0x10,%esp
f0127899:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012789f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01278a5:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01278aa:	74 17                	je     f01278c3 <test_kfreeall+0x1475>
f01278ac:	83 ec 04             	sub    $0x4,%esp
f01278af:	68 a4 bf 13 f0       	push   $0xf013bfa4
f01278b4:	68 e6 0a 00 00       	push   $0xae6
f01278b9:	68 9a b2 13 f0       	push   $0xf013b29a
f01278be:	e8 42 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278c3:	e8 00 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01278c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01278cb:	74 17                	je     f01278e4 <test_kfreeall+0x1496>
f01278cd:	83 ec 04             	sub    $0x4,%esp
f01278d0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01278d5:	68 e7 0a 00 00       	push   $0xae7
f01278da:	68 9a b2 13 f0       	push   $0xf013b29a
f01278df:	e8 21 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01278e7:	e8 b1 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01278ec:	29 c3                	sub    %eax,%ebx
f01278ee:	89 d8                	mov    %ebx,%eax
f01278f0:	83 f8 03             	cmp    $0x3,%eax
f01278f3:	74 17                	je     f012790c <test_kfreeall+0x14be>
f01278f5:	83 ec 04             	sub    $0x4,%esp
f01278f8:	68 1c b3 13 f0       	push   $0xf013b31c
f01278fd:	68 e8 0a 00 00       	push   $0xae8
f0127902:	68 9a b2 13 f0       	push   $0xf013b29a
f0127907:	e8 f9 88 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f012790c:	e8 8c 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127911:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127914:	e8 af c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127919:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f012791c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127922:	83 ec 0c             	sub    $0xc,%esp
f0127925:	50                   	push   %eax
f0127926:	e8 25 00 fe ff       	call   f0107950 <kfree>
f012792b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012792e:	e8 95 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127933:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127936:	74 17                	je     f012794f <test_kfreeall+0x1501>
f0127938:	83 ec 04             	sub    $0x4,%esp
f012793b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127940:	68 f2 0a 00 00       	push   $0xaf2
f0127945:	68 9a b2 13 f0       	push   $0xf013b29a
f012794a:	e8 b6 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012794f:	e8 49 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127954:	89 c2                	mov    %eax,%edx
f0127956:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127959:	29 c2                	sub    %eax,%edx
f012795b:	89 d0                	mov    %edx,%eax
f012795d:	83 f8 03             	cmp    $0x3,%eax
f0127960:	74 17                	je     f0127979 <test_kfreeall+0x152b>
f0127962:	83 ec 04             	sub    $0x4,%esp
f0127965:	68 4c bb 13 f0       	push   $0xf013bb4c
f012796a:	68 f3 0a 00 00       	push   $0xaf3
f012796f:	68 9a b2 13 f0       	push   $0xf013b29a
f0127974:	e8 8c 88 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127979:	e8 1f 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012797e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127981:	e8 42 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127986:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127989:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012798f:	83 ec 0c             	sub    $0xc,%esp
f0127992:	50                   	push   %eax
f0127993:	e8 b8 ff fd ff       	call   f0107950 <kfree>
f0127998:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012799b:	e8 28 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01279a3:	74 17                	je     f01279bc <test_kfreeall+0x156e>
f01279a5:	83 ec 04             	sub    $0x4,%esp
f01279a8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01279ad:	68 fc 0a 00 00       	push   $0xafc
f01279b2:	68 9a b2 13 f0       	push   $0xf013b29a
f01279b7:	e8 49 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01279bc:	e8 dc 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279c1:	89 c2                	mov    %eax,%edx
f01279c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01279c6:	39 c2                	cmp    %eax,%edx
f01279c8:	74 17                	je     f01279e1 <test_kfreeall+0x1593>
f01279ca:	83 ec 04             	sub    $0x4,%esp
f01279cd:	68 4c bb 13 f0       	push   $0xf013bb4c
f01279d2:	68 fd 0a 00 00       	push   $0xafd
f01279d7:	68 9a b2 13 f0       	push   $0xf013b29a
f01279dc:	e8 24 88 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01279e1:	e8 b7 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279e9:	e8 da c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01279f1:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01279f7:	83 ec 0c             	sub    $0xc,%esp
f01279fa:	50                   	push   %eax
f01279fb:	e8 50 ff fd ff       	call   f0107950 <kfree>
f0127a00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a03:	e8 c0 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a0b:	74 17                	je     f0127a24 <test_kfreeall+0x15d6>
f0127a0d:	83 ec 04             	sub    $0x4,%esp
f0127a10:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127a15:	68 03 0b 00 00       	push   $0xb03
f0127a1a:	68 9a b2 13 f0       	push   $0xf013b29a
f0127a1f:	e8 e1 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127a24:	e8 74 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a29:	89 c2                	mov    %eax,%edx
f0127a2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127a2e:	39 c2                	cmp    %eax,%edx
f0127a30:	74 17                	je     f0127a49 <test_kfreeall+0x15fb>
f0127a32:	83 ec 04             	sub    $0x4,%esp
f0127a35:	68 4c bb 13 f0       	push   $0xf013bb4c
f0127a3a:	68 04 0b 00 00       	push   $0xb04
f0127a3f:	68 9a b2 13 f0       	push   $0xf013b29a
f0127a44:	e8 bc 87 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a49:	e8 4f 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a51:	e8 72 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a56:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127a59:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127a5f:	83 ec 0c             	sub    $0xc,%esp
f0127a62:	50                   	push   %eax
f0127a63:	e8 e8 fe fd ff       	call   f0107950 <kfree>
f0127a68:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a6b:	e8 58 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a70:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a73:	74 17                	je     f0127a8c <test_kfreeall+0x163e>
f0127a75:	83 ec 04             	sub    $0x4,%esp
f0127a78:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127a7d:	68 0a 0b 00 00       	push   $0xb0a
f0127a82:	68 9a b2 13 f0       	push   $0xf013b29a
f0127a87:	e8 79 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127a8c:	e8 0c 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a91:	89 c2                	mov    %eax,%edx
f0127a93:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127a96:	39 c2                	cmp    %eax,%edx
f0127a98:	74 17                	je     f0127ab1 <test_kfreeall+0x1663>
f0127a9a:	83 ec 04             	sub    $0x4,%esp
f0127a9d:	68 4c bb 13 f0       	push   $0xf013bb4c
f0127aa2:	68 0b 0b 00 00       	push   $0xb0b
f0127aa7:	68 9a b2 13 f0       	push   $0xf013b29a
f0127aac:	e8 54 87 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127ab1:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127ab8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127abf:	eb 48                	jmp    f0127b09 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127ac1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127ac4:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0127ac9:	83 ec 04             	sub    $0x4,%esp
f0127acc:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127ad2:	51                   	push   %ecx
f0127ad3:	52                   	push   %edx
f0127ad4:	50                   	push   %eax
f0127ad5:	e8 d7 ef fd ff       	call   f0106ab1 <get_page_table>
f0127ada:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127add:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127ae3:	85 c0                	test   %eax,%eax
f0127ae5:	75 17                	jne    f0127afe <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127ae7:	83 ec 04             	sub    $0x4,%esp
f0127aea:	68 9c bb 13 f0       	push   $0xf013bb9c
f0127aef:	68 18 0b 00 00       	push   $0xb18
f0127af4:	68 9a b2 13 f0       	push   $0xf013b29a
f0127af9:	e8 07 87 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127afe:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127b05:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127b09:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127b0d:	78 b2                	js     f0127ac1 <test_kfreeall+0x1673>
f0127b0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127b13:	7f 09                	jg     f0127b1e <test_kfreeall+0x16d0>
f0127b15:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127b1c:	76 a3                	jbe    f0127ac1 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127b1e:	83 ec 0c             	sub    $0xc,%esp
f0127b21:	68 f8 bf 13 f0       	push   $0xf013bff8
f0127b26:	e8 e3 91 fd ff       	call   f0100d0e <cprintf>
f0127b2b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127b2e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127b33:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127b36:	5b                   	pop    %ebx
f0127b37:	5f                   	pop    %edi
f0127b38:	5d                   	pop    %ebp
f0127b39:	c3                   	ret    

f0127b3a <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127b3a:	55                   	push   %ebp
f0127b3b:	89 e5                	mov    %esp,%ebp
f0127b3d:	57                   	push   %edi
f0127b3e:	53                   	push   %ebx
f0127b3f:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127b45:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127b49:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127b4d:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127b53:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127b59:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127b60:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127b67:	e8 31 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b6c:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127b6f:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127b75:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127b7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0127b7f:	89 d7                	mov    %edx,%edi
f0127b81:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127b83:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0127b89:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127b8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0127b93:	89 d7                	mov    %edx,%edi
f0127b95:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b97:	e8 01 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b9f:	e8 24 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ba4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127ba7:	83 ec 0c             	sub    $0xc,%esp
f0127baa:	68 00 fc 1f 00       	push   $0x1ffc00
f0127baf:	e8 d1 fc fd ff       	call   f0107885 <kmalloc>
f0127bb4:	83 c4 10             	add    $0x10,%esp
f0127bb7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bbd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127bc3:	89 c1                	mov    %eax,%ecx
f0127bc5:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127bcc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127bcf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127bd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127bda:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bdf:	f7 75 d4             	divl   -0x2c(%ebp)
f0127be2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127be5:	29 d0                	sub    %edx,%eax
f0127be7:	89 c3                	mov    %eax,%ebx
f0127be9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127bf0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127bf5:	0f b6 d0             	movzbl %al,%edx
f0127bf8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127bfb:	01 d0                	add    %edx,%eax
f0127bfd:	48                   	dec    %eax
f0127bfe:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127c01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127c04:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c09:	f7 75 cc             	divl   -0x34(%ebp)
f0127c0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127c0f:	29 d0                	sub    %edx,%eax
f0127c11:	01 c3                	add    %eax,%ebx
f0127c13:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127c1a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127c1f:	0f b6 c0             	movzbl %al,%eax
f0127c22:	c1 e0 04             	shl    $0x4,%eax
f0127c25:	89 c2                	mov    %eax,%edx
f0127c27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127c2a:	01 d0                	add    %edx,%eax
f0127c2c:	48                   	dec    %eax
f0127c2d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127c30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127c33:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c38:	f7 75 c4             	divl   -0x3c(%ebp)
f0127c3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127c3e:	29 d0                	sub    %edx,%eax
f0127c40:	01 d8                	add    %ebx,%eax
f0127c42:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127c47:	39 c1                	cmp    %eax,%ecx
f0127c49:	74 17                	je     f0127c62 <test_kexpand+0x128>
f0127c4b:	83 ec 04             	sub    $0x4,%esp
f0127c4e:	68 80 b3 13 f0       	push   $0xf013b380
f0127c53:	68 43 0b 00 00       	push   $0xb43
f0127c58:	68 9a b2 13 f0       	push   $0xf013b29a
f0127c5d:	e8 a3 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c62:	e8 61 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c67:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c6a:	74 17                	je     f0127c83 <test_kexpand+0x149>
f0127c6c:	83 ec 04             	sub    $0x4,%esp
f0127c6f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127c74:	68 44 0b 00 00       	push   $0xb44
f0127c79:	68 9a b2 13 f0       	push   $0xf013b29a
f0127c7e:	e8 82 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c83:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c86:	e8 12 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127c8b:	29 c3                	sub    %eax,%ebx
f0127c8d:	89 d8                	mov    %ebx,%eax
f0127c8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127c94:	74 17                	je     f0127cad <test_kexpand+0x173>
f0127c96:	83 ec 04             	sub    $0x4,%esp
f0127c99:	68 1c b3 13 f0       	push   $0xf013b31c
f0127c9e:	68 45 0b 00 00       	push   $0xb45
f0127ca3:	68 9a b2 13 f0       	push   $0xf013b29a
f0127ca8:	e8 58 85 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127cad:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127cb4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127cb7:	e8 e1 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127cbc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cbf:	e8 04 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127cc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127cc7:	83 ec 0c             	sub    $0xc,%esp
f0127cca:	68 00 fc 1f 00       	push   $0x1ffc00
f0127ccf:	e8 b1 fb fd ff       	call   f0107885 <kmalloc>
f0127cd4:	83 c4 10             	add    $0x10,%esp
f0127cd7:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127cdd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127ce3:	89 c1                	mov    %eax,%ecx
f0127ce5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127cec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127cef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127cf4:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127cf7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127cfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cff:	f7 75 bc             	divl   -0x44(%ebp)
f0127d02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127d05:	29 d0                	sub    %edx,%eax
f0127d07:	89 c3                	mov    %eax,%ebx
f0127d09:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127d10:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127d15:	0f b6 d0             	movzbl %al,%edx
f0127d18:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127d1b:	01 d0                	add    %edx,%eax
f0127d1d:	48                   	dec    %eax
f0127d1e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127d21:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127d24:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d29:	f7 75 b4             	divl   -0x4c(%ebp)
f0127d2c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127d2f:	29 d0                	sub    %edx,%eax
f0127d31:	01 c3                	add    %eax,%ebx
f0127d33:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127d3a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127d3f:	0f b6 c0             	movzbl %al,%eax
f0127d42:	c1 e0 04             	shl    $0x4,%eax
f0127d45:	89 c2                	mov    %eax,%edx
f0127d47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127d4a:	01 d0                	add    %edx,%eax
f0127d4c:	48                   	dec    %eax
f0127d4d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127d50:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127d53:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d58:	f7 75 ac             	divl   -0x54(%ebp)
f0127d5b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127d5e:	29 d0                	sub    %edx,%eax
f0127d60:	01 d8                	add    %ebx,%eax
f0127d62:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127d67:	39 c1                	cmp    %eax,%ecx
f0127d69:	74 17                	je     f0127d82 <test_kexpand+0x248>
f0127d6b:	83 ec 04             	sub    $0x4,%esp
f0127d6e:	68 80 b3 13 f0       	push   $0xf013b380
f0127d73:	68 4c 0b 00 00       	push   $0xb4c
f0127d78:	68 9a b2 13 f0       	push   $0xf013b29a
f0127d7d:	e8 83 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d82:	e8 41 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d8a:	74 17                	je     f0127da3 <test_kexpand+0x269>
f0127d8c:	83 ec 04             	sub    $0x4,%esp
f0127d8f:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127d94:	68 4d 0b 00 00       	push   $0xb4d
f0127d99:	68 9a b2 13 f0       	push   $0xf013b29a
f0127d9e:	e8 62 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127da3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127da6:	e8 f2 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127dab:	29 c3                	sub    %eax,%ebx
f0127dad:	89 d8                	mov    %ebx,%eax
f0127daf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127db4:	74 17                	je     f0127dcd <test_kexpand+0x293>
f0127db6:	83 ec 04             	sub    $0x4,%esp
f0127db9:	68 1c b3 13 f0       	push   $0xf013b31c
f0127dbe:	68 4e 0b 00 00       	push   $0xb4e
f0127dc3:	68 9a b2 13 f0       	push   $0xf013b29a
f0127dc8:	e8 38 84 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127dcd:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127dd4:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127dd7:	e8 c1 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ddc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ddf:	e8 e4 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127de4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127de7:	83 ec 0c             	sub    $0xc,%esp
f0127dea:	68 00 08 00 00       	push   $0x800
f0127def:	e8 91 fa fd ff       	call   f0107885 <kmalloc>
f0127df4:	83 c4 10             	add    $0x10,%esp
f0127df7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127dfd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127e03:	89 c1                	mov    %eax,%ecx
f0127e05:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127e0c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127e0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e14:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127e17:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127e1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e1f:	f7 75 a4             	divl   -0x5c(%ebp)
f0127e22:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127e25:	29 d0                	sub    %edx,%eax
f0127e27:	89 c3                	mov    %eax,%ebx
f0127e29:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127e30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127e35:	0f b6 d0             	movzbl %al,%edx
f0127e38:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127e3b:	01 d0                	add    %edx,%eax
f0127e3d:	48                   	dec    %eax
f0127e3e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127e41:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127e44:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e49:	f7 75 9c             	divl   -0x64(%ebp)
f0127e4c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127e4f:	29 d0                	sub    %edx,%eax
f0127e51:	01 c3                	add    %eax,%ebx
f0127e53:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127e5a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127e5f:	0f b6 c0             	movzbl %al,%eax
f0127e62:	c1 e0 04             	shl    $0x4,%eax
f0127e65:	89 c2                	mov    %eax,%edx
f0127e67:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127e6a:	01 d0                	add    %edx,%eax
f0127e6c:	48                   	dec    %eax
f0127e6d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127e70:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127e73:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e78:	f7 75 94             	divl   -0x6c(%ebp)
f0127e7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127e7e:	29 d0                	sub    %edx,%eax
f0127e80:	01 d8                	add    %ebx,%eax
f0127e82:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127e87:	39 c1                	cmp    %eax,%ecx
f0127e89:	74 17                	je     f0127ea2 <test_kexpand+0x368>
f0127e8b:	83 ec 04             	sub    $0x4,%esp
f0127e8e:	68 80 b3 13 f0       	push   $0xf013b380
f0127e93:	68 55 0b 00 00       	push   $0xb55
f0127e98:	68 9a b2 13 f0       	push   $0xf013b29a
f0127e9d:	e8 63 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ea2:	e8 21 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ea7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127eaa:	74 17                	je     f0127ec3 <test_kexpand+0x389>
f0127eac:	83 ec 04             	sub    $0x4,%esp
f0127eaf:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127eb4:	68 56 0b 00 00       	push   $0xb56
f0127eb9:	68 9a b2 13 f0       	push   $0xf013b29a
f0127ebe:	e8 42 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ec3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ec6:	e8 d2 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ecb:	29 c3                	sub    %eax,%ebx
f0127ecd:	89 d8                	mov    %ebx,%eax
f0127ecf:	83 f8 01             	cmp    $0x1,%eax
f0127ed2:	74 17                	je     f0127eeb <test_kexpand+0x3b1>
f0127ed4:	83 ec 04             	sub    $0x4,%esp
f0127ed7:	68 1c b3 13 f0       	push   $0xf013b31c
f0127edc:	68 57 0b 00 00       	push   $0xb57
f0127ee1:	68 9a b2 13 f0       	push   $0xf013b29a
f0127ee6:	e8 1a 83 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127eeb:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127ef2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127ef5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127efb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127efe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f05:	eb 0e                	jmp    f0127f15 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127f07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f0a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127f0d:	01 d0                	add    %edx,%eax
f0127f0f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127f12:	ff 45 f4             	incl   -0xc(%ebp)
f0127f15:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127f1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f1e:	7f e7                	jg     f0127f07 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f20:	e8 78 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127f25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f28:	e8 9b be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127f30:	83 ec 0c             	sub    $0xc,%esp
f0127f33:	68 00 08 00 00       	push   $0x800
f0127f38:	e8 48 f9 fd ff       	call   f0107885 <kmalloc>
f0127f3d:	83 c4 10             	add    $0x10,%esp
f0127f40:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f46:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127f4c:	89 c1                	mov    %eax,%ecx
f0127f4e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127f55:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127f58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f5d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127f60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f68:	f7 75 88             	divl   -0x78(%ebp)
f0127f6b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127f6e:	29 d0                	sub    %edx,%eax
f0127f70:	89 c3                	mov    %eax,%ebx
f0127f72:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127f79:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127f7e:	0f b6 d0             	movzbl %al,%edx
f0127f81:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f84:	01 d0                	add    %edx,%eax
f0127f86:	48                   	dec    %eax
f0127f87:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127f8d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f98:	f7 75 80             	divl   -0x80(%ebp)
f0127f9b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127fa1:	29 d0                	sub    %edx,%eax
f0127fa3:	01 c3                	add    %eax,%ebx
f0127fa5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127fac:	10 00 00 
f0127faf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127fb4:	0f b6 c0             	movzbl %al,%eax
f0127fb7:	c1 e0 04             	shl    $0x4,%eax
f0127fba:	89 c2                	mov    %eax,%edx
f0127fbc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127fc2:	01 d0                	add    %edx,%eax
f0127fc4:	48                   	dec    %eax
f0127fc5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127fcb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127fd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fd6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127fdc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127fe2:	29 d0                	sub    %edx,%eax
f0127fe4:	01 d8                	add    %ebx,%eax
f0127fe6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127feb:	39 c1                	cmp    %eax,%ecx
f0127fed:	74 17                	je     f0128006 <test_kexpand+0x4cc>
f0127fef:	83 ec 04             	sub    $0x4,%esp
f0127ff2:	68 80 b3 13 f0       	push   $0xf013b380
f0127ff7:	68 63 0b 00 00       	push   $0xb63
f0127ffc:	68 9a b2 13 f0       	push   $0xf013b29a
f0128001:	e8 ff 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128006:	e8 bd bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012800b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012800e:	74 17                	je     f0128027 <test_kexpand+0x4ed>
f0128010:	83 ec 04             	sub    $0x4,%esp
f0128013:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128018:	68 64 0b 00 00       	push   $0xb64
f012801d:	68 9a b2 13 f0       	push   $0xf013b29a
f0128022:	e8 de 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128027:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012802a:	e8 6e 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012802f:	29 c3                	sub    %eax,%ebx
f0128031:	89 d8                	mov    %ebx,%eax
f0128033:	83 f8 01             	cmp    $0x1,%eax
f0128036:	74 17                	je     f012804f <test_kexpand+0x515>
f0128038:	83 ec 04             	sub    $0x4,%esp
f012803b:	68 1c b3 13 f0       	push   $0xf013b31c
f0128040:	68 65 0b 00 00       	push   $0xb65
f0128045:	68 9a b2 13 f0       	push   $0xf013b29a
f012804a:	e8 b6 81 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012804f:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0128056:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128059:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012805f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128062:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128069:	eb 0e                	jmp    f0128079 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f012806b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012806e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128071:	01 d0                	add    %edx,%eax
f0128073:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128076:	ff 45 f4             	incl   -0xc(%ebp)
f0128079:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012807f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128082:	7f e7                	jg     f012806b <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128084:	e8 14 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128089:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012808c:	e8 37 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128091:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128094:	83 ec 0c             	sub    $0xc,%esp
f0128097:	68 00 1c 00 00       	push   $0x1c00
f012809c:	e8 e4 f7 fd ff       	call   f0107885 <kmalloc>
f01280a1:	83 c4 10             	add    $0x10,%esp
f01280a4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280aa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01280b0:	89 c1                	mov    %eax,%ecx
f01280b2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01280b9:	10 00 00 
f01280bc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01280c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01280c7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01280cd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01280d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01280d8:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01280de:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01280e4:	29 d0                	sub    %edx,%eax
f01280e6:	89 c3                	mov    %eax,%ebx
f01280e8:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01280ef:	10 00 00 
f01280f2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01280f7:	0f b6 d0             	movzbl %al,%edx
f01280fa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128100:	01 d0                	add    %edx,%eax
f0128102:	48                   	dec    %eax
f0128103:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128109:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012810f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128114:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012811a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128120:	29 d0                	sub    %edx,%eax
f0128122:	01 c3                	add    %eax,%ebx
f0128124:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012812b:	10 00 00 
f012812e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128133:	0f b6 c0             	movzbl %al,%eax
f0128136:	c1 e0 04             	shl    $0x4,%eax
f0128139:	89 c2                	mov    %eax,%edx
f012813b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128141:	01 d0                	add    %edx,%eax
f0128143:	48                   	dec    %eax
f0128144:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012814a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128150:	ba 00 00 00 00       	mov    $0x0,%edx
f0128155:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012815b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128161:	29 d0                	sub    %edx,%eax
f0128163:	01 d8                	add    %ebx,%eax
f0128165:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012816a:	39 c1                	cmp    %eax,%ecx
f012816c:	74 17                	je     f0128185 <test_kexpand+0x64b>
f012816e:	83 ec 04             	sub    $0x4,%esp
f0128171:	68 80 b3 13 f0       	push   $0xf013b380
f0128176:	68 71 0b 00 00       	push   $0xb71
f012817b:	68 9a b2 13 f0       	push   $0xf013b29a
f0128180:	e8 80 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128185:	e8 3e bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012818a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012818d:	74 17                	je     f01281a6 <test_kexpand+0x66c>
f012818f:	83 ec 04             	sub    $0x4,%esp
f0128192:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128197:	68 72 0b 00 00       	push   $0xb72
f012819c:	68 9a b2 13 f0       	push   $0xf013b29a
f01281a1:	e8 5f 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01281a9:	e8 ef 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01281ae:	29 c3                	sub    %eax,%ebx
f01281b0:	89 d8                	mov    %ebx,%eax
f01281b2:	83 f8 02             	cmp    $0x2,%eax
f01281b5:	74 17                	je     f01281ce <test_kexpand+0x694>
f01281b7:	83 ec 04             	sub    $0x4,%esp
f01281ba:	68 1c b3 13 f0       	push   $0xf013b31c
f01281bf:	68 73 0b 00 00       	push   $0xb73
f01281c4:	68 9a b2 13 f0       	push   $0xf013b29a
f01281c9:	e8 37 80 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01281ce:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01281d5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01281d8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01281de:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01281e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281e8:	eb 0e                	jmp    f01281f8 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f01281ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01281f0:	01 d0                	add    %edx,%eax
f01281f2:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01281f5:	ff 45 f4             	incl   -0xc(%ebp)
f01281f8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01281fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128201:	7f e7                	jg     f01281ea <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128203:	e8 95 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128208:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012820b:	e8 b8 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128210:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128213:	83 ec 0c             	sub    $0xc,%esp
f0128216:	68 00 fc 2f 00       	push   $0x2ffc00
f012821b:	e8 65 f6 fd ff       	call   f0107885 <kmalloc>
f0128220:	83 c4 10             	add    $0x10,%esp
f0128223:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128229:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012822f:	89 c1                	mov    %eax,%ecx
f0128231:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128238:	10 00 00 
f012823b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128241:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128246:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012824c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128252:	ba 00 00 00 00       	mov    $0x0,%edx
f0128257:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012825d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128263:	29 d0                	sub    %edx,%eax
f0128265:	89 c3                	mov    %eax,%ebx
f0128267:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012826e:	10 00 00 
f0128271:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128276:	0f b6 d0             	movzbl %al,%edx
f0128279:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012827f:	01 d0                	add    %edx,%eax
f0128281:	48                   	dec    %eax
f0128282:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128288:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012828e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128293:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128299:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012829f:	29 d0                	sub    %edx,%eax
f01282a1:	01 c3                	add    %eax,%ebx
f01282a3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01282aa:	10 00 00 
f01282ad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01282b2:	0f b6 c0             	movzbl %al,%eax
f01282b5:	c1 e0 04             	shl    $0x4,%eax
f01282b8:	89 c2                	mov    %eax,%edx
f01282ba:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01282c0:	01 d0                	add    %edx,%eax
f01282c2:	48                   	dec    %eax
f01282c3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01282c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01282cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01282d4:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01282da:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01282e0:	29 d0                	sub    %edx,%eax
f01282e2:	01 d8                	add    %ebx,%eax
f01282e4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01282e9:	39 c1                	cmp    %eax,%ecx
f01282eb:	74 17                	je     f0128304 <test_kexpand+0x7ca>
f01282ed:	83 ec 04             	sub    $0x4,%esp
f01282f0:	68 80 b3 13 f0       	push   $0xf013b380
f01282f5:	68 7f 0b 00 00       	push   $0xb7f
f01282fa:	68 9a b2 13 f0       	push   $0xf013b29a
f01282ff:	e8 01 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128304:	e8 bf ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128309:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012830c:	74 17                	je     f0128325 <test_kexpand+0x7eb>
f012830e:	83 ec 04             	sub    $0x4,%esp
f0128311:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128316:	68 80 0b 00 00       	push   $0xb80
f012831b:	68 9a b2 13 f0       	push   $0xf013b29a
f0128320:	e8 e0 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128325:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128328:	e8 70 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012832d:	29 c3                	sub    %eax,%ebx
f012832f:	89 d8                	mov    %ebx,%eax
f0128331:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128336:	74 17                	je     f012834f <test_kexpand+0x815>
f0128338:	83 ec 04             	sub    $0x4,%esp
f012833b:	68 1c b3 13 f0       	push   $0xf013b31c
f0128340:	68 81 0b 00 00       	push   $0xb81
f0128345:	68 9a b2 13 f0       	push   $0xf013b29a
f012834a:	e8 b6 7e fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012834f:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128356:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128359:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012835f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128362:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128369:	eb 0e                	jmp    f0128379 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f012836b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012836e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128371:	01 d0                	add    %edx,%eax
f0128373:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128376:	ff 45 f4             	incl   -0xc(%ebp)
f0128379:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012837f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128382:	7f e7                	jg     f012836b <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128384:	e8 14 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128389:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012838c:	e8 37 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128391:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128394:	83 ec 0c             	sub    $0xc,%esp
f0128397:	68 00 00 60 00       	push   $0x600000
f012839c:	e8 e4 f4 fd ff       	call   f0107885 <kmalloc>
f01283a1:	83 c4 10             	add    $0x10,%esp
f01283a4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283aa:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01283b0:	89 c1                	mov    %eax,%ecx
f01283b2:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01283b9:	10 00 00 
f01283bc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01283c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283c7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01283cd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01283d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283d8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01283de:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01283e4:	29 d0                	sub    %edx,%eax
f01283e6:	89 c3                	mov    %eax,%ebx
f01283e8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01283ef:	10 00 00 
f01283f2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01283f7:	0f b6 d0             	movzbl %al,%edx
f01283fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128400:	01 d0                	add    %edx,%eax
f0128402:	48                   	dec    %eax
f0128403:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128409:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012840f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128414:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012841a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128420:	29 d0                	sub    %edx,%eax
f0128422:	01 c3                	add    %eax,%ebx
f0128424:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012842b:	10 00 00 
f012842e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128433:	0f b6 c0             	movzbl %al,%eax
f0128436:	c1 e0 04             	shl    $0x4,%eax
f0128439:	89 c2                	mov    %eax,%edx
f012843b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128441:	01 d0                	add    %edx,%eax
f0128443:	48                   	dec    %eax
f0128444:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012844a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128450:	ba 00 00 00 00       	mov    $0x0,%edx
f0128455:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012845b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128461:	29 d0                	sub    %edx,%eax
f0128463:	01 d8                	add    %ebx,%eax
f0128465:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012846a:	39 c1                	cmp    %eax,%ecx
f012846c:	74 17                	je     f0128485 <test_kexpand+0x94b>
f012846e:	83 ec 04             	sub    $0x4,%esp
f0128471:	68 80 b3 13 f0       	push   $0xf013b380
f0128476:	68 8d 0b 00 00       	push   $0xb8d
f012847b:	68 9a b2 13 f0       	push   $0xf013b29a
f0128480:	e8 80 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128485:	e8 3e b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012848a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012848d:	74 17                	je     f01284a6 <test_kexpand+0x96c>
f012848f:	83 ec 04             	sub    $0x4,%esp
f0128492:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128497:	68 8e 0b 00 00       	push   $0xb8e
f012849c:	68 9a b2 13 f0       	push   $0xf013b29a
f01284a1:	e8 5f 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284a9:	e8 ef 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01284ae:	29 c3                	sub    %eax,%ebx
f01284b0:	89 d8                	mov    %ebx,%eax
f01284b2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01284b7:	74 17                	je     f01284d0 <test_kexpand+0x996>
f01284b9:	83 ec 04             	sub    $0x4,%esp
f01284bc:	68 1c b3 13 f0       	push   $0xf013b31c
f01284c1:	68 8f 0b 00 00       	push   $0xb8f
f01284c6:	68 9a b2 13 f0       	push   $0xf013b29a
f01284cb:	e8 35 7d fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01284d0:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f01284d7:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01284da:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01284e0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01284e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284ed:	eb 1a                	jmp    f0128509 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f01284ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01284f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01284f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01284ff:	01 c2                	add    %eax,%edx
f0128501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128504:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128506:	ff 45 f4             	incl   -0xc(%ebp)
f0128509:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012850f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128512:	7d db                	jge    f01284ef <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128514:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f012851b:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f012851e:	e8 7a 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128523:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128526:	e8 9d b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012852b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f012852e:	83 ec 0c             	sub    $0xc,%esp
f0128531:	68 00 00 70 00       	push   $0x700000
f0128536:	e8 ed f5 fd ff       	call   f0107b28 <kexpand>
f012853b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012853e:	e8 85 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128543:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128546:	74 19                	je     f0128561 <test_kexpand+0xa27>
f0128548:	68 34 c0 13 f0       	push   $0xf013c034
f012854d:	68 65 c0 13 f0       	push   $0xf013c065
f0128552:	68 a0 0b 00 00       	push   $0xba0
f0128557:	68 9a b2 13 f0       	push   $0xf013b29a
f012855c:	e8 a4 7c fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128561:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128564:	e8 34 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128569:	29 c3                	sub    %eax,%ebx
f012856b:	89 d8                	mov    %ebx,%eax
f012856d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128572:	74 19                	je     f012858d <test_kexpand+0xa53>
f0128574:	68 7c c0 13 f0       	push   $0xf013c07c
f0128579:	68 65 c0 13 f0       	push   $0xf013c065
f012857e:	68 a1 0b 00 00       	push   $0xba1
f0128583:	68 9a b2 13 f0       	push   $0xf013b29a
f0128588:	e8 78 7c fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012858d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128593:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128596:	eb 1a                	jmp    f01285b2 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012859b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01285a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01285a8:	01 c2                	add    %eax,%edx
f01285aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285ad:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01285af:	ff 45 f4             	incl   -0xc(%ebp)
f01285b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285b5:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01285bb:	7c db                	jl     f0128598 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01285bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01285c4:	eb 37                	jmp    f01285fd <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f01285c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01285d0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01285d6:	01 d0                	add    %edx,%eax
f01285d8:	8b 10                	mov    (%eax),%edx
f01285da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285dd:	39 c2                	cmp    %eax,%edx
f01285df:	74 19                	je     f01285fa <test_kexpand+0xac0>
f01285e1:	68 ac c0 13 f0       	push   $0xf013c0ac
f01285e6:	68 65 c0 13 f0       	push   $0xf013c065
f01285eb:	68 ad 0b 00 00       	push   $0xbad
f01285f0:	68 9a b2 13 f0       	push   $0xf013b29a
f01285f5:	e8 0b 7c fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01285fa:	ff 45 f4             	incl   -0xc(%ebp)
f01285fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128600:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128606:	7c be                	jl     f01285c6 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128608:	e8 90 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012860d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128610:	e8 b3 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128615:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128618:	83 ec 0c             	sub    $0xc,%esp
f012861b:	68 00 00 a0 00       	push   $0xa00000
f0128620:	e8 03 f5 fd ff       	call   f0107b28 <kexpand>
f0128625:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128628:	e8 9b b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012862d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128630:	74 19                	je     f012864b <test_kexpand+0xb11>
f0128632:	68 34 c0 13 f0       	push   $0xf013c034
f0128637:	68 65 c0 13 f0       	push   $0xf013c065
f012863c:	68 b8 0b 00 00       	push   $0xbb8
f0128641:	68 9a b2 13 f0       	push   $0xf013b29a
f0128646:	e8 ba 7b fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f012864b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012864e:	e8 4a 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128653:	29 c3                	sub    %eax,%ebx
f0128655:	89 d8                	mov    %ebx,%eax
f0128657:	3d 00 03 00 00       	cmp    $0x300,%eax
f012865c:	74 19                	je     f0128677 <test_kexpand+0xb3d>
f012865e:	68 b8 c0 13 f0       	push   $0xf013c0b8
f0128663:	68 65 c0 13 f0       	push   $0xf013c065
f0128668:	68 b9 0b 00 00       	push   $0xbb9
f012866d:	68 9a b2 13 f0       	push   $0xf013b29a
f0128672:	e8 8e 7b fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128677:	e8 21 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012867c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012867f:	e8 44 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128684:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128687:	83 ec 0c             	sub    $0xc,%esp
f012868a:	68 00 00 40 00       	push   $0x400000
f012868f:	e8 f1 f1 fd ff       	call   f0107885 <kmalloc>
f0128694:	83 c4 10             	add    $0x10,%esp
f0128697:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f012869d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01286a3:	89 c1                	mov    %eax,%ecx
f01286a5:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01286ac:	10 00 00 
f01286af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01286b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286ba:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01286c0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01286c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01286cb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01286d1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01286d7:	29 d0                	sub    %edx,%eax
f01286d9:	89 c3                	mov    %eax,%ebx
f01286db:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01286e2:	10 00 00 
f01286e5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01286ea:	0f b6 d0             	movzbl %al,%edx
f01286ed:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01286f3:	01 d0                	add    %edx,%eax
f01286f5:	48                   	dec    %eax
f01286f6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01286fc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128702:	ba 00 00 00 00       	mov    $0x0,%edx
f0128707:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012870d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128713:	29 d0                	sub    %edx,%eax
f0128715:	01 c3                	add    %eax,%ebx
f0128717:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012871e:	10 00 00 
f0128721:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128726:	0f b6 c0             	movzbl %al,%eax
f0128729:	c1 e0 04             	shl    $0x4,%eax
f012872c:	89 c2                	mov    %eax,%edx
f012872e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128734:	01 d0                	add    %edx,%eax
f0128736:	48                   	dec    %eax
f0128737:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012873d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128743:	ba 00 00 00 00       	mov    $0x0,%edx
f0128748:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012874e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128754:	29 d0                	sub    %edx,%eax
f0128756:	01 d8                	add    %ebx,%eax
f0128758:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f012875d:	39 c1                	cmp    %eax,%ecx
f012875f:	74 17                	je     f0128778 <test_kexpand+0xc3e>
f0128761:	83 ec 04             	sub    $0x4,%esp
f0128764:	68 e8 c0 13 f0       	push   $0xf013c0e8
f0128769:	68 c4 0b 00 00       	push   $0xbc4
f012876e:	68 9a b2 13 f0       	push   $0xf013b29a
f0128773:	e8 8d 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128778:	e8 4b b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012877d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128780:	74 17                	je     f0128799 <test_kexpand+0xc5f>
f0128782:	83 ec 04             	sub    $0x4,%esp
f0128785:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012878a:	68 c5 0b 00 00       	push   $0xbc5
f012878f:	68 9a b2 13 f0       	push   $0xf013b29a
f0128794:	e8 6c 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128799:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012879c:	e8 fc 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287a1:	29 c3                	sub    %eax,%ebx
f01287a3:	89 d8                	mov    %ebx,%eax
f01287a5:	3d 00 04 00 00       	cmp    $0x400,%eax
f01287aa:	74 17                	je     f01287c3 <test_kexpand+0xc89>
f01287ac:	83 ec 04             	sub    $0x4,%esp
f01287af:	68 1c b3 13 f0       	push   $0xf013b31c
f01287b4:	68 c6 0b 00 00       	push   $0xbc6
f01287b9:	68 9a b2 13 f0       	push   $0xf013b29a
f01287be:	e8 42 7a fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f01287c3:	e8 d5 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287cb:	e8 f8 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01287d3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01287d9:	83 ec 0c             	sub    $0xc,%esp
f01287dc:	50                   	push   %eax
f01287dd:	e8 6e f1 fd ff       	call   f0107950 <kfree>
f01287e2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287e5:	e8 de b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287ed:	74 17                	je     f0128806 <test_kexpand+0xccc>
f01287ef:	83 ec 04             	sub    $0x4,%esp
f01287f2:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01287f7:	68 cf 0b 00 00       	push   $0xbcf
f01287fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0128801:	e8 ff 79 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128806:	e8 92 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012880b:	89 c2                	mov    %eax,%edx
f012880d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128810:	29 c2                	sub    %eax,%edx
f0128812:	89 d0                	mov    %edx,%eax
f0128814:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128819:	74 17                	je     f0128832 <test_kexpand+0xcf8>
f012881b:	83 ec 04             	sub    $0x4,%esp
f012881e:	68 4c bb 13 f0       	push   $0xf013bb4c
f0128823:	68 d0 0b 00 00       	push   $0xbd0
f0128828:	68 9a b2 13 f0       	push   $0xf013b29a
f012882d:	e8 d3 79 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128832:	e8 66 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128837:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012883a:	e8 89 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012883f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128842:	83 ec 0c             	sub    $0xc,%esp
f0128845:	68 00 50 40 00       	push   $0x405000
f012884a:	e8 d9 f2 fd ff       	call   f0107b28 <kexpand>
f012884f:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128852:	e8 71 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128857:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012885a:	74 19                	je     f0128875 <test_kexpand+0xd3b>
f012885c:	68 34 c0 13 f0       	push   $0xf013c034
f0128861:	68 65 c0 13 f0       	push   $0xf013c065
f0128866:	68 da 0b 00 00       	push   $0xbda
f012886b:	68 9a b2 13 f0       	push   $0xf013b29a
f0128870:	e8 90 79 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128875:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128878:	e8 20 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012887d:	29 c3                	sub    %eax,%ebx
f012887f:	89 d8                	mov    %ebx,%eax
f0128881:	83 f8 05             	cmp    $0x5,%eax
f0128884:	74 19                	je     f012889f <test_kexpand+0xd65>
f0128886:	68 10 c1 13 f0       	push   $0xf013c110
f012888b:	68 65 c0 13 f0       	push   $0xf013c065
f0128890:	68 db 0b 00 00       	push   $0xbdb
f0128895:	68 9a b2 13 f0       	push   $0xf013b29a
f012889a:	e8 66 79 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012889f:	83 ec 0c             	sub    $0xc,%esp
f01288a2:	68 f8 bf 13 f0       	push   $0xf013bff8
f01288a7:	e8 62 84 fd ff       	call   f0100d0e <cprintf>
f01288ac:	83 c4 10             	add    $0x10,%esp

	return 1;
f01288af:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01288b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01288b7:	5b                   	pop    %ebx
f01288b8:	5f                   	pop    %edi
f01288b9:	5d                   	pop    %ebp
f01288ba:	c3                   	ret    

f01288bb <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f01288bb:	55                   	push   %ebp
f01288bc:	89 e5                	mov    %esp,%ebp
f01288be:	57                   	push   %edi
f01288bf:	53                   	push   %ebx
f01288c0:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f01288c6:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01288ca:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01288ce:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01288d4:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01288da:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01288e1:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01288e8:	e8 b0 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01288ed:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01288f0:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01288f6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01288fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0128900:	89 d7                	mov    %edx,%edi
f0128902:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128904:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f012890a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012890f:	b8 00 00 00 00       	mov    $0x0,%eax
f0128914:	89 d7                	mov    %edx,%edi
f0128916:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128918:	e8 80 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012891d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128920:	e8 a3 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128925:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128928:	83 ec 0c             	sub    $0xc,%esp
f012892b:	68 00 fc 1f 00       	push   $0x1ffc00
f0128930:	e8 50 ef fd ff       	call   f0107885 <kmalloc>
f0128935:	83 c4 10             	add    $0x10,%esp
f0128938:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012893e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128944:	89 c1                	mov    %eax,%ecx
f0128946:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012894d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128950:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128955:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128958:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012895b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128960:	f7 75 d4             	divl   -0x2c(%ebp)
f0128963:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128966:	29 d0                	sub    %edx,%eax
f0128968:	89 c3                	mov    %eax,%ebx
f012896a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128971:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128976:	0f b6 d0             	movzbl %al,%edx
f0128979:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012897c:	01 d0                	add    %edx,%eax
f012897e:	48                   	dec    %eax
f012897f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128982:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128985:	ba 00 00 00 00       	mov    $0x0,%edx
f012898a:	f7 75 cc             	divl   -0x34(%ebp)
f012898d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128990:	29 d0                	sub    %edx,%eax
f0128992:	01 c3                	add    %eax,%ebx
f0128994:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012899b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01289a0:	0f b6 c0             	movzbl %al,%eax
f01289a3:	c1 e0 04             	shl    $0x4,%eax
f01289a6:	89 c2                	mov    %eax,%edx
f01289a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01289ab:	01 d0                	add    %edx,%eax
f01289ad:	48                   	dec    %eax
f01289ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01289b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01289b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01289b9:	f7 75 c4             	divl   -0x3c(%ebp)
f01289bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01289bf:	29 d0                	sub    %edx,%eax
f01289c1:	01 d8                	add    %ebx,%eax
f01289c3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01289c8:	39 c1                	cmp    %eax,%ecx
f01289ca:	74 17                	je     f01289e3 <test_kshrink+0x128>
f01289cc:	83 ec 04             	sub    $0x4,%esp
f01289cf:	68 80 b3 13 f0       	push   $0xf013b380
f01289d4:	68 01 0c 00 00       	push   $0xc01
f01289d9:	68 9a b2 13 f0       	push   $0xf013b29a
f01289de:	e8 22 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289e3:	e8 e0 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289e8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289eb:	74 17                	je     f0128a04 <test_kshrink+0x149>
f01289ed:	83 ec 04             	sub    $0x4,%esp
f01289f0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01289f5:	68 02 0c 00 00       	push   $0xc02
f01289fa:	68 9a b2 13 f0       	push   $0xf013b29a
f01289ff:	e8 01 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a04:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a07:	e8 91 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128a0c:	29 c3                	sub    %eax,%ebx
f0128a0e:	89 d8                	mov    %ebx,%eax
f0128a10:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128a15:	74 17                	je     f0128a2e <test_kshrink+0x173>
f0128a17:	83 ec 04             	sub    $0x4,%esp
f0128a1a:	68 1c b3 13 f0       	push   $0xf013b31c
f0128a1f:	68 03 0c 00 00       	push   $0xc03
f0128a24:	68 9a b2 13 f0       	push   $0xf013b29a
f0128a29:	e8 d7 77 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128a2e:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128a35:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a38:	e8 60 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128a3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a40:	e8 83 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128a45:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128a48:	83 ec 0c             	sub    $0xc,%esp
f0128a4b:	68 00 fc 1f 00       	push   $0x1ffc00
f0128a50:	e8 30 ee fd ff       	call   f0107885 <kmalloc>
f0128a55:	83 c4 10             	add    $0x10,%esp
f0128a58:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a5e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128a64:	89 c1                	mov    %eax,%ecx
f0128a66:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128a6d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128a70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a75:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128a78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a80:	f7 75 bc             	divl   -0x44(%ebp)
f0128a83:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a86:	29 d0                	sub    %edx,%eax
f0128a88:	89 c3                	mov    %eax,%ebx
f0128a8a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128a91:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128a96:	0f b6 d0             	movzbl %al,%edx
f0128a99:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128a9c:	01 d0                	add    %edx,%eax
f0128a9e:	48                   	dec    %eax
f0128a9f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128aa2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128aa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128aaa:	f7 75 b4             	divl   -0x4c(%ebp)
f0128aad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128ab0:	29 d0                	sub    %edx,%eax
f0128ab2:	01 c3                	add    %eax,%ebx
f0128ab4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128abb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128ac0:	0f b6 c0             	movzbl %al,%eax
f0128ac3:	c1 e0 04             	shl    $0x4,%eax
f0128ac6:	89 c2                	mov    %eax,%edx
f0128ac8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128acb:	01 d0                	add    %edx,%eax
f0128acd:	48                   	dec    %eax
f0128ace:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128ad1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128ad4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ad9:	f7 75 ac             	divl   -0x54(%ebp)
f0128adc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128adf:	29 d0                	sub    %edx,%eax
f0128ae1:	01 d8                	add    %ebx,%eax
f0128ae3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128ae8:	39 c1                	cmp    %eax,%ecx
f0128aea:	74 17                	je     f0128b03 <test_kshrink+0x248>
f0128aec:	83 ec 04             	sub    $0x4,%esp
f0128aef:	68 80 b3 13 f0       	push   $0xf013b380
f0128af4:	68 0a 0c 00 00       	push   $0xc0a
f0128af9:	68 9a b2 13 f0       	push   $0xf013b29a
f0128afe:	e8 02 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b03:	e8 c0 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b0b:	74 17                	je     f0128b24 <test_kshrink+0x269>
f0128b0d:	83 ec 04             	sub    $0x4,%esp
f0128b10:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128b15:	68 0b 0c 00 00       	push   $0xc0b
f0128b1a:	68 9a b2 13 f0       	push   $0xf013b29a
f0128b1f:	e8 e1 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b24:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b27:	e8 71 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128b2c:	29 c3                	sub    %eax,%ebx
f0128b2e:	89 d8                	mov    %ebx,%eax
f0128b30:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128b35:	74 17                	je     f0128b4e <test_kshrink+0x293>
f0128b37:	83 ec 04             	sub    $0x4,%esp
f0128b3a:	68 1c b3 13 f0       	push   $0xf013b31c
f0128b3f:	68 0c 0c 00 00       	push   $0xc0c
f0128b44:	68 9a b2 13 f0       	push   $0xf013b29a
f0128b49:	e8 b7 76 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128b4e:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128b55:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128b58:	e8 40 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128b5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b60:	e8 63 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128b68:	83 ec 0c             	sub    $0xc,%esp
f0128b6b:	68 00 08 00 00       	push   $0x800
f0128b70:	e8 10 ed fd ff       	call   f0107885 <kmalloc>
f0128b75:	83 c4 10             	add    $0x10,%esp
f0128b78:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b7e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128b84:	89 c1                	mov    %eax,%ecx
f0128b86:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128b8d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128b90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b95:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128b98:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ba0:	f7 75 a4             	divl   -0x5c(%ebp)
f0128ba3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128ba6:	29 d0                	sub    %edx,%eax
f0128ba8:	89 c3                	mov    %eax,%ebx
f0128baa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128bb1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128bb6:	0f b6 d0             	movzbl %al,%edx
f0128bb9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128bbc:	01 d0                	add    %edx,%eax
f0128bbe:	48                   	dec    %eax
f0128bbf:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128bc2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128bc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bca:	f7 75 9c             	divl   -0x64(%ebp)
f0128bcd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128bd0:	29 d0                	sub    %edx,%eax
f0128bd2:	01 c3                	add    %eax,%ebx
f0128bd4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128bdb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128be0:	0f b6 c0             	movzbl %al,%eax
f0128be3:	c1 e0 04             	shl    $0x4,%eax
f0128be6:	89 c2                	mov    %eax,%edx
f0128be8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128beb:	01 d0                	add    %edx,%eax
f0128bed:	48                   	dec    %eax
f0128bee:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128bf1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bf9:	f7 75 94             	divl   -0x6c(%ebp)
f0128bfc:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128bff:	29 d0                	sub    %edx,%eax
f0128c01:	01 d8                	add    %ebx,%eax
f0128c03:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128c08:	39 c1                	cmp    %eax,%ecx
f0128c0a:	74 17                	je     f0128c23 <test_kshrink+0x368>
f0128c0c:	83 ec 04             	sub    $0x4,%esp
f0128c0f:	68 80 b3 13 f0       	push   $0xf013b380
f0128c14:	68 13 0c 00 00       	push   $0xc13
f0128c19:	68 9a b2 13 f0       	push   $0xf013b29a
f0128c1e:	e8 e2 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c23:	e8 a0 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c28:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c2b:	74 17                	je     f0128c44 <test_kshrink+0x389>
f0128c2d:	83 ec 04             	sub    $0x4,%esp
f0128c30:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128c35:	68 14 0c 00 00       	push   $0xc14
f0128c3a:	68 9a b2 13 f0       	push   $0xf013b29a
f0128c3f:	e8 c1 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c44:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c47:	e8 51 3f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128c4c:	29 c3                	sub    %eax,%ebx
f0128c4e:	89 d8                	mov    %ebx,%eax
f0128c50:	83 f8 01             	cmp    $0x1,%eax
f0128c53:	74 17                	je     f0128c6c <test_kshrink+0x3b1>
f0128c55:	83 ec 04             	sub    $0x4,%esp
f0128c58:	68 1c b3 13 f0       	push   $0xf013b31c
f0128c5d:	68 15 0c 00 00       	push   $0xc15
f0128c62:	68 9a b2 13 f0       	push   $0xf013b29a
f0128c67:	e8 99 75 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128c6c:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128c73:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128c76:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128c7c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128c7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c86:	eb 0e                	jmp    f0128c96 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128c88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c8b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c8e:	01 d0                	add    %edx,%eax
f0128c90:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128c93:	ff 45 f4             	incl   -0xc(%ebp)
f0128c96:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128c9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c9f:	7f e7                	jg     f0128c88 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128ca1:	e8 f7 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128ca6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ca9:	e8 1a b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128cb1:	83 ec 0c             	sub    $0xc,%esp
f0128cb4:	68 00 08 00 00       	push   $0x800
f0128cb9:	e8 c7 eb fd ff       	call   f0107885 <kmalloc>
f0128cbe:	83 c4 10             	add    $0x10,%esp
f0128cc1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cc7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128ccd:	89 c1                	mov    %eax,%ecx
f0128ccf:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128cd6:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128cd9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128cde:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128ce1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128ce4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ce9:	f7 75 88             	divl   -0x78(%ebp)
f0128cec:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128cef:	29 d0                	sub    %edx,%eax
f0128cf1:	89 c3                	mov    %eax,%ebx
f0128cf3:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128cfa:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128cff:	0f b6 d0             	movzbl %al,%edx
f0128d02:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128d05:	01 d0                	add    %edx,%eax
f0128d07:	48                   	dec    %eax
f0128d08:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128d0e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d19:	f7 75 80             	divl   -0x80(%ebp)
f0128d1c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d22:	29 d0                	sub    %edx,%eax
f0128d24:	01 c3                	add    %eax,%ebx
f0128d26:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128d2d:	10 00 00 
f0128d30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128d35:	0f b6 c0             	movzbl %al,%eax
f0128d38:	c1 e0 04             	shl    $0x4,%eax
f0128d3b:	89 c2                	mov    %eax,%edx
f0128d3d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128d43:	01 d0                	add    %edx,%eax
f0128d45:	48                   	dec    %eax
f0128d46:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128d4c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d57:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128d5d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128d63:	29 d0                	sub    %edx,%eax
f0128d65:	01 d8                	add    %ebx,%eax
f0128d67:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128d6c:	39 c1                	cmp    %eax,%ecx
f0128d6e:	74 17                	je     f0128d87 <test_kshrink+0x4cc>
f0128d70:	83 ec 04             	sub    $0x4,%esp
f0128d73:	68 80 b3 13 f0       	push   $0xf013b380
f0128d78:	68 21 0c 00 00       	push   $0xc21
f0128d7d:	68 9a b2 13 f0       	push   $0xf013b29a
f0128d82:	e8 7e 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d87:	e8 3c b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d8f:	74 17                	je     f0128da8 <test_kshrink+0x4ed>
f0128d91:	83 ec 04             	sub    $0x4,%esp
f0128d94:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128d99:	68 22 0c 00 00       	push   $0xc22
f0128d9e:	68 9a b2 13 f0       	push   $0xf013b29a
f0128da3:	e8 5d 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128da8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128dab:	e8 ed 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128db0:	29 c3                	sub    %eax,%ebx
f0128db2:	89 d8                	mov    %ebx,%eax
f0128db4:	83 f8 01             	cmp    $0x1,%eax
f0128db7:	74 17                	je     f0128dd0 <test_kshrink+0x515>
f0128db9:	83 ec 04             	sub    $0x4,%esp
f0128dbc:	68 1c b3 13 f0       	push   $0xf013b31c
f0128dc1:	68 23 0c 00 00       	push   $0xc23
f0128dc6:	68 9a b2 13 f0       	push   $0xf013b29a
f0128dcb:	e8 35 74 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128dd0:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128dd7:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128dda:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128de0:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128de3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128dea:	eb 0e                	jmp    f0128dfa <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128dec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128def:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128df2:	01 d0                	add    %edx,%eax
f0128df4:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128df7:	ff 45 f4             	incl   -0xc(%ebp)
f0128dfa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e03:	7f e7                	jg     f0128dec <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128e05:	e8 93 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128e0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e0d:	e8 b6 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128e15:	83 ec 0c             	sub    $0xc,%esp
f0128e18:	68 00 1c 00 00       	push   $0x1c00
f0128e1d:	e8 63 ea fd ff       	call   f0107885 <kmalloc>
f0128e22:	83 c4 10             	add    $0x10,%esp
f0128e25:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e2b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128e31:	89 c1                	mov    %eax,%ecx
f0128e33:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128e3a:	10 00 00 
f0128e3d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128e43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e48:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128e4e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128e54:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e59:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128e5f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128e65:	29 d0                	sub    %edx,%eax
f0128e67:	89 c3                	mov    %eax,%ebx
f0128e69:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128e70:	10 00 00 
f0128e73:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128e78:	0f b6 d0             	movzbl %al,%edx
f0128e7b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128e81:	01 d0                	add    %edx,%eax
f0128e83:	48                   	dec    %eax
f0128e84:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128e8a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128e90:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e95:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128e9b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128ea1:	29 d0                	sub    %edx,%eax
f0128ea3:	01 c3                	add    %eax,%ebx
f0128ea5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128eac:	10 00 00 
f0128eaf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128eb4:	0f b6 c0             	movzbl %al,%eax
f0128eb7:	c1 e0 04             	shl    $0x4,%eax
f0128eba:	89 c2                	mov    %eax,%edx
f0128ebc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128ec2:	01 d0                	add    %edx,%eax
f0128ec4:	48                   	dec    %eax
f0128ec5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128ecb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ed6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128edc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128ee2:	29 d0                	sub    %edx,%eax
f0128ee4:	01 d8                	add    %ebx,%eax
f0128ee6:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128eeb:	39 c1                	cmp    %eax,%ecx
f0128eed:	74 17                	je     f0128f06 <test_kshrink+0x64b>
f0128eef:	83 ec 04             	sub    $0x4,%esp
f0128ef2:	68 80 b3 13 f0       	push   $0xf013b380
f0128ef7:	68 2f 0c 00 00       	push   $0xc2f
f0128efc:	68 9a b2 13 f0       	push   $0xf013b29a
f0128f01:	e8 ff 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f06:	e8 bd ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f0e:	74 17                	je     f0128f27 <test_kshrink+0x66c>
f0128f10:	83 ec 04             	sub    $0x4,%esp
f0128f13:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128f18:	68 30 0c 00 00       	push   $0xc30
f0128f1d:	68 9a b2 13 f0       	push   $0xf013b29a
f0128f22:	e8 de 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f27:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f2a:	e8 6e 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128f2f:	29 c3                	sub    %eax,%ebx
f0128f31:	89 d8                	mov    %ebx,%eax
f0128f33:	83 f8 02             	cmp    $0x2,%eax
f0128f36:	74 17                	je     f0128f4f <test_kshrink+0x694>
f0128f38:	83 ec 04             	sub    $0x4,%esp
f0128f3b:	68 1c b3 13 f0       	push   $0xf013b31c
f0128f40:	68 31 0c 00 00       	push   $0xc31
f0128f45:	68 9a b2 13 f0       	push   $0xf013b29a
f0128f4a:	e8 b6 72 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128f4f:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128f56:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128f59:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128f5f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128f62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f69:	eb 0e                	jmp    f0128f79 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f6e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128f71:	01 d0                	add    %edx,%eax
f0128f73:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128f76:	ff 45 f4             	incl   -0xc(%ebp)
f0128f79:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128f7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f82:	7f e7                	jg     f0128f6b <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f84:	e8 14 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128f89:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f8c:	e8 37 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f91:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128f94:	83 ec 0c             	sub    $0xc,%esp
f0128f97:	68 00 fc 2f 00       	push   $0x2ffc00
f0128f9c:	e8 e4 e8 fd ff       	call   f0107885 <kmalloc>
f0128fa1:	83 c4 10             	add    $0x10,%esp
f0128fa4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128faa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128fb0:	89 c1                	mov    %eax,%ecx
f0128fb2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128fb9:	10 00 00 
f0128fbc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128fc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fc7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128fcd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fd8:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128fde:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128fe4:	29 d0                	sub    %edx,%eax
f0128fe6:	89 c3                	mov    %eax,%ebx
f0128fe8:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128fef:	10 00 00 
f0128ff2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128ff7:	0f b6 d0             	movzbl %al,%edx
f0128ffa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129000:	01 d0                	add    %edx,%eax
f0129002:	48                   	dec    %eax
f0129003:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129009:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012900f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129014:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012901a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129020:	29 d0                	sub    %edx,%eax
f0129022:	01 c3                	add    %eax,%ebx
f0129024:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012902b:	10 00 00 
f012902e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129033:	0f b6 c0             	movzbl %al,%eax
f0129036:	c1 e0 04             	shl    $0x4,%eax
f0129039:	89 c2                	mov    %eax,%edx
f012903b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129041:	01 d0                	add    %edx,%eax
f0129043:	48                   	dec    %eax
f0129044:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012904a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129050:	ba 00 00 00 00       	mov    $0x0,%edx
f0129055:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012905b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129061:	29 d0                	sub    %edx,%eax
f0129063:	01 d8                	add    %ebx,%eax
f0129065:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012906a:	39 c1                	cmp    %eax,%ecx
f012906c:	74 17                	je     f0129085 <test_kshrink+0x7ca>
f012906e:	83 ec 04             	sub    $0x4,%esp
f0129071:	68 80 b3 13 f0       	push   $0xf013b380
f0129076:	68 3d 0c 00 00       	push   $0xc3d
f012907b:	68 9a b2 13 f0       	push   $0xf013b29a
f0129080:	e8 80 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129085:	e8 3e ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012908a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012908d:	74 17                	je     f01290a6 <test_kshrink+0x7eb>
f012908f:	83 ec 04             	sub    $0x4,%esp
f0129092:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129097:	68 3e 0c 00 00       	push   $0xc3e
f012909c:	68 9a b2 13 f0       	push   $0xf013b29a
f01290a1:	e8 5f 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290a9:	e8 ef 3a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01290ae:	29 c3                	sub    %eax,%ebx
f01290b0:	89 d8                	mov    %ebx,%eax
f01290b2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01290b7:	74 17                	je     f01290d0 <test_kshrink+0x815>
f01290b9:	83 ec 04             	sub    $0x4,%esp
f01290bc:	68 1c b3 13 f0       	push   $0xf013b31c
f01290c1:	68 3f 0c 00 00       	push   $0xc3f
f01290c6:	68 9a b2 13 f0       	push   $0xf013b29a
f01290cb:	e8 35 71 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01290d0:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01290d7:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01290da:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01290e0:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01290e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290ea:	eb 0e                	jmp    f01290fa <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01290ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01290ef:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01290f2:	01 d0                	add    %edx,%eax
f01290f4:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01290f7:	ff 45 f4             	incl   -0xc(%ebp)
f01290fa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129100:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129103:	7f e7                	jg     f01290ec <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129105:	e8 93 3a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012910a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012910d:	e8 b6 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129112:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129115:	83 ec 0c             	sub    $0xc,%esp
f0129118:	68 00 00 60 00       	push   $0x600000
f012911d:	e8 63 e7 fd ff       	call   f0107885 <kmalloc>
f0129122:	83 c4 10             	add    $0x10,%esp
f0129125:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012912b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129131:	89 c1                	mov    %eax,%ecx
f0129133:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012913a:	10 00 00 
f012913d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129143:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129148:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012914e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129154:	ba 00 00 00 00       	mov    $0x0,%edx
f0129159:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012915f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129165:	29 d0                	sub    %edx,%eax
f0129167:	89 c3                	mov    %eax,%ebx
f0129169:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129170:	10 00 00 
f0129173:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129178:	0f b6 d0             	movzbl %al,%edx
f012917b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129181:	01 d0                	add    %edx,%eax
f0129183:	48                   	dec    %eax
f0129184:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012918a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129190:	ba 00 00 00 00       	mov    $0x0,%edx
f0129195:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012919b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01291a1:	29 d0                	sub    %edx,%eax
f01291a3:	01 c3                	add    %eax,%ebx
f01291a5:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01291ac:	10 00 00 
f01291af:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01291b4:	0f b6 c0             	movzbl %al,%eax
f01291b7:	c1 e0 04             	shl    $0x4,%eax
f01291ba:	89 c2                	mov    %eax,%edx
f01291bc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01291c2:	01 d0                	add    %edx,%eax
f01291c4:	48                   	dec    %eax
f01291c5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01291cb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01291d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01291d6:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01291dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01291e2:	29 d0                	sub    %edx,%eax
f01291e4:	01 d8                	add    %ebx,%eax
f01291e6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01291eb:	39 c1                	cmp    %eax,%ecx
f01291ed:	74 17                	je     f0129206 <test_kshrink+0x94b>
f01291ef:	83 ec 04             	sub    $0x4,%esp
f01291f2:	68 80 b3 13 f0       	push   $0xf013b380
f01291f7:	68 4b 0c 00 00       	push   $0xc4b
f01291fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0129201:	e8 ff 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129206:	e8 bd ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012920b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012920e:	74 17                	je     f0129227 <test_kshrink+0x96c>
f0129210:	83 ec 04             	sub    $0x4,%esp
f0129213:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129218:	68 4c 0c 00 00       	push   $0xc4c
f012921d:	68 9a b2 13 f0       	push   $0xf013b29a
f0129222:	e8 de 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129227:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012922a:	e8 6e 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012922f:	29 c3                	sub    %eax,%ebx
f0129231:	89 d8                	mov    %ebx,%eax
f0129233:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129238:	74 17                	je     f0129251 <test_kshrink+0x996>
f012923a:	83 ec 04             	sub    $0x4,%esp
f012923d:	68 1c b3 13 f0       	push   $0xf013b31c
f0129242:	68 4d 0c 00 00       	push   $0xc4d
f0129247:	68 9a b2 13 f0       	push   $0xf013b29a
f012924c:	e8 b4 6f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129251:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129258:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012925b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129261:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129267:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012926e:	eb 1a                	jmp    f012928a <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129270:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129273:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012927a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129280:	01 c2                	add    %eax,%edx
f0129282:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129285:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129287:	ff 45 f4             	incl   -0xc(%ebp)
f012928a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129290:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129293:	7d db                	jge    f0129270 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129295:	e8 03 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012929a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012929d:	e8 26 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01292a2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01292a5:	83 ec 0c             	sub    $0xc,%esp
f01292a8:	68 00 00 50 00       	push   $0x500000
f01292ad:	e8 59 e8 fd ff       	call   f0107b0b <kshrink>
f01292b2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01292b5:	e8 0e ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01292ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292bd:	74 19                	je     f01292d8 <test_kshrink+0xa1d>
f01292bf:	68 34 c0 13 f0       	push   $0xf013c034
f01292c4:	68 65 c0 13 f0       	push   $0xf013c065
f01292c9:	68 5d 0c 00 00       	push   $0xc5d
f01292ce:	68 9a b2 13 f0       	push   $0xf013b29a
f01292d3:	e8 2d 6f fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01292d8:	e8 c0 38 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01292dd:	89 c2                	mov    %eax,%edx
f01292df:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01292e2:	29 c2                	sub    %eax,%edx
f01292e4:	89 d0                	mov    %edx,%eax
f01292e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01292eb:	74 19                	je     f0129306 <test_kshrink+0xa4b>
f01292ed:	68 40 c1 13 f0       	push   $0xf013c140
f01292f2:	68 65 c0 13 f0       	push   $0xf013c065
f01292f7:	68 5e 0c 00 00       	push   $0xc5e
f01292fc:	68 9a b2 13 f0       	push   $0xf013b29a
f0129301:	e8 ff 6e fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129306:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f012930d:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129317:	eb 37                	jmp    f0129350 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129319:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012931c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129323:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129329:	01 d0                	add    %edx,%eax
f012932b:	8b 10                	mov    (%eax),%edx
f012932d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129330:	39 c2                	cmp    %eax,%edx
f0129332:	74 19                	je     f012934d <test_kshrink+0xa92>
f0129334:	68 70 c1 13 f0       	push   $0xf013c170
f0129339:	68 65 c0 13 f0       	push   $0xf013c065
f012933e:	68 66 0c 00 00       	push   $0xc66
f0129343:	68 9a b2 13 f0       	push   $0xf013b29a
f0129348:	e8 b8 6e fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012934d:	ff 45 f4             	incl   -0xc(%ebp)
f0129350:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129353:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129359:	7e be                	jle    f0129319 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012935b:	83 ec 0c             	sub    $0xc,%esp
f012935e:	6a 03                	push   $0x3
f0129360:	e8 d8 3c fe ff       	call   f010d03d <sys_bypassPageFault>
f0129365:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129368:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012936e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129371:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129374:	05 00 00 50 00       	add    $0x500000,%eax
f0129379:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012937c:	e8 aa 3c fe ff       	call   f010d02b <sys_rcr2>
f0129381:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129384:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012938a:	39 d0                	cmp    %edx,%eax
f012938c:	74 19                	je     f01293a7 <test_kshrink+0xaec>
f012938e:	68 7c c1 13 f0       	push   $0xf013c17c
f0129393:	68 65 c0 13 f0       	push   $0xf013c065
f0129398:	68 6f 0c 00 00       	push   $0xc6f
f012939d:	68 9a b2 13 f0       	push   $0xf013b29a
f01293a2:	e8 5e 6e fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f01293a7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01293aa:	05 00 10 50 00       	add    $0x501000,%eax
f01293af:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01293b2:	e8 74 3c fe ff       	call   f010d02b <sys_rcr2>
f01293b7:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01293ba:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01293c0:	39 d0                	cmp    %edx,%eax
f01293c2:	74 19                	je     f01293dd <test_kshrink+0xb22>
f01293c4:	68 a4 c1 13 f0       	push   $0xf013c1a4
f01293c9:	68 65 c0 13 f0       	push   $0xf013c065
f01293ce:	68 72 0c 00 00       	push   $0xc72
f01293d3:	68 9a b2 13 f0       	push   $0xf013b29a
f01293d8:	e8 28 6e fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f01293dd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01293e0:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01293e5:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01293e8:	e8 3e 3c fe ff       	call   f010d02b <sys_rcr2>
f01293ed:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01293f0:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01293f6:	39 d0                	cmp    %edx,%eax
f01293f8:	74 19                	je     f0129413 <test_kshrink+0xb58>
f01293fa:	68 d0 c1 13 f0       	push   $0xf013c1d0
f01293ff:	68 65 c0 13 f0       	push   $0xf013c065
f0129404:	68 75 0c 00 00       	push   $0xc75
f0129409:	68 9a b2 13 f0       	push   $0xf013b29a
f012940e:	e8 f2 6d fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129413:	83 ec 0c             	sub    $0xc,%esp
f0129416:	6a 00                	push   $0x0
f0129418:	e8 20 3c fe ff       	call   f010d03d <sys_bypassPageFault>
f012941d:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129420:	e8 78 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129425:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129428:	e8 9b a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012942d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129430:	83 ec 0c             	sub    $0xc,%esp
f0129433:	68 00 00 20 00       	push   $0x200000
f0129438:	e8 ce e6 fd ff       	call   f0107b0b <kshrink>
f012943d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129440:	e8 83 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129445:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129448:	74 19                	je     f0129463 <test_kshrink+0xba8>
f012944a:	68 34 c0 13 f0       	push   $0xf013c034
f012944f:	68 65 c0 13 f0       	push   $0xf013c065
f0129454:	68 82 0c 00 00       	push   $0xc82
f0129459:	68 9a b2 13 f0       	push   $0xf013b29a
f012945e:	e8 a2 6d fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129463:	e8 35 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129468:	89 c2                	mov    %eax,%edx
f012946a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012946d:	29 c2                	sub    %eax,%edx
f012946f:	89 d0                	mov    %edx,%eax
f0129471:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129476:	74 19                	je     f0129491 <test_kshrink+0xbd6>
f0129478:	68 fc c1 13 f0       	push   $0xf013c1fc
f012947d:	68 65 c0 13 f0       	push   $0xf013c065
f0129482:	68 83 0c 00 00       	push   $0xc83
f0129487:	68 9a b2 13 f0       	push   $0xf013b29a
f012948c:	e8 74 6d fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129491:	e8 07 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129496:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129499:	e8 2a a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012949e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01294a1:	83 ec 0c             	sub    $0xc,%esp
f01294a4:	68 00 00 40 00       	push   $0x400000
f01294a9:	e8 d7 e3 fd ff       	call   f0107885 <kmalloc>
f01294ae:	83 c4 10             	add    $0x10,%esp
f01294b1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f01294b7:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01294be:	10 00 00 
f01294c1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01294c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294cc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01294d2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01294d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01294dd:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01294e3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01294e9:	29 d0                	sub    %edx,%eax
f01294eb:	89 c1                	mov    %eax,%ecx
f01294ed:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01294f4:	10 00 00 
f01294f7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01294fc:	0f b6 d0             	movzbl %al,%edx
f01294ff:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129505:	01 d0                	add    %edx,%eax
f0129507:	48                   	dec    %eax
f0129508:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012950e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129514:	ba 00 00 00 00       	mov    $0x0,%edx
f0129519:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012951f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129525:	29 d0                	sub    %edx,%eax
f0129527:	01 c1                	add    %eax,%ecx
f0129529:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129530:	10 00 00 
f0129533:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129538:	0f b6 c0             	movzbl %al,%eax
f012953b:	c1 e0 04             	shl    $0x4,%eax
f012953e:	89 c2                	mov    %eax,%edx
f0129540:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129546:	01 d0                	add    %edx,%eax
f0129548:	48                   	dec    %eax
f0129549:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012954f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129555:	ba 00 00 00 00       	mov    $0x0,%edx
f012955a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129560:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129566:	29 d0                	sub    %edx,%eax
f0129568:	01 c8                	add    %ecx,%eax
f012956a:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129570:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129576:	83 ec 04             	sub    $0x4,%esp
f0129579:	52                   	push   %edx
f012957a:	50                   	push   %eax
f012957b:	68 2c c2 13 f0       	push   $0xf013c22c
f0129580:	e8 89 77 fd ff       	call   f0100d0e <cprintf>
f0129585:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129588:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012958e:	89 c1                	mov    %eax,%ecx
f0129590:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129597:	10 00 00 
f012959a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01295a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295a5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01295ab:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01295b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01295b6:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01295bc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01295c2:	29 d0                	sub    %edx,%eax
f01295c4:	89 c3                	mov    %eax,%ebx
f01295c6:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01295cd:	10 00 00 
f01295d0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01295d5:	0f b6 d0             	movzbl %al,%edx
f01295d8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01295de:	01 d0                	add    %edx,%eax
f01295e0:	48                   	dec    %eax
f01295e1:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01295e7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01295ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01295f2:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01295f8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01295fe:	29 d0                	sub    %edx,%eax
f0129600:	01 c3                	add    %eax,%ebx
f0129602:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129609:	10 00 00 
f012960c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129611:	0f b6 c0             	movzbl %al,%eax
f0129614:	c1 e0 04             	shl    $0x4,%eax
f0129617:	89 c2                	mov    %eax,%edx
f0129619:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012961f:	01 d0                	add    %edx,%eax
f0129621:	48                   	dec    %eax
f0129622:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129628:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012962e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129633:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129639:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012963f:	29 d0                	sub    %edx,%eax
f0129641:	01 d8                	add    %ebx,%eax
f0129643:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129648:	39 c1                	cmp    %eax,%ecx
f012964a:	74 17                	je     f0129663 <test_kshrink+0xda8>
f012964c:	83 ec 04             	sub    $0x4,%esp
f012964f:	68 48 c2 13 f0       	push   $0xf013c248
f0129654:	68 8e 0c 00 00       	push   $0xc8e
f0129659:	68 9a b2 13 f0       	push   $0xf013b29a
f012965e:	e8 a2 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129663:	e8 60 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129668:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012966b:	74 17                	je     f0129684 <test_kshrink+0xdc9>
f012966d:	83 ec 04             	sub    $0x4,%esp
f0129670:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129675:	68 8f 0c 00 00       	push   $0xc8f
f012967a:	68 9a b2 13 f0       	push   $0xf013b29a
f012967f:	e8 81 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129684:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129687:	e8 11 35 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012968c:	29 c3                	sub    %eax,%ebx
f012968e:	89 d8                	mov    %ebx,%eax
f0129690:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129695:	74 17                	je     f01296ae <test_kshrink+0xdf3>
f0129697:	83 ec 04             	sub    $0x4,%esp
f012969a:	68 1c b3 13 f0       	push   $0xf013b31c
f012969f:	68 90 0c 00 00       	push   $0xc90
f01296a4:	68 9a b2 13 f0       	push   $0xf013b29a
f01296a9:	e8 57 6b fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f01296ae:	e8 ea 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01296b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296b6:	e8 0d a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01296be:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01296c4:	83 ec 0c             	sub    $0xc,%esp
f01296c7:	50                   	push   %eax
f01296c8:	e8 83 e2 fd ff       	call   f0107950 <kfree>
f01296cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01296d0:	e8 f3 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01296d8:	74 17                	je     f01296f1 <test_kshrink+0xe36>
f01296da:	83 ec 04             	sub    $0x4,%esp
f01296dd:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01296e2:	68 9a 0c 00 00       	push   $0xc9a
f01296e7:	68 9a b2 13 f0       	push   $0xf013b29a
f01296ec:	e8 14 6b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01296f1:	e8 a7 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01296f6:	89 c2                	mov    %eax,%edx
f01296f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01296fb:	29 c2                	sub    %eax,%edx
f01296fd:	89 d0                	mov    %edx,%eax
f01296ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129704:	74 17                	je     f012971d <test_kshrink+0xe62>
f0129706:	83 ec 04             	sub    $0x4,%esp
f0129709:	68 4c bb 13 f0       	push   $0xf013bb4c
f012970e:	68 9b 0c 00 00       	push   $0xc9b
f0129713:	68 9a b2 13 f0       	push   $0xf013b29a
f0129718:	e8 e8 6a fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012971d:	e8 7b 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129722:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129725:	e8 9e a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012972a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012972d:	83 ec 0c             	sub    $0xc,%esp
f0129730:	68 00 b0 3f 00       	push   $0x3fb000
f0129735:	e8 d1 e3 fd ff       	call   f0107b0b <kshrink>
f012973a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012973d:	e8 86 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129742:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129745:	74 19                	je     f0129760 <test_kshrink+0xea5>
f0129747:	68 34 c0 13 f0       	push   $0xf013c034
f012974c:	68 65 c0 13 f0       	push   $0xf013c065
f0129751:	68 a5 0c 00 00       	push   $0xca5
f0129756:	68 9a b2 13 f0       	push   $0xf013b29a
f012975b:	e8 a5 6a fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129760:	e8 38 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129765:	89 c2                	mov    %eax,%edx
f0129767:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012976a:	29 c2                	sub    %eax,%edx
f012976c:	89 d0                	mov    %edx,%eax
f012976e:	83 f8 05             	cmp    $0x5,%eax
f0129771:	74 19                	je     f012978c <test_kshrink+0xed1>
f0129773:	68 9c c2 13 f0       	push   $0xf013c29c
f0129778:	68 65 c0 13 f0       	push   $0xf013c065
f012977d:	68 a6 0c 00 00       	push   $0xca6
f0129782:	68 9a b2 13 f0       	push   $0xf013b29a
f0129787:	e8 79 6a fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012978c:	83 ec 0c             	sub    $0xc,%esp
f012978f:	68 f8 bf 13 f0       	push   $0xf013bff8
f0129794:	e8 75 75 fd ff       	call   f0100d0e <cprintf>
f0129799:	83 c4 10             	add    $0x10,%esp

	return 1;
f012979c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01297a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01297a4:	5b                   	pop    %ebx
f01297a5:	5f                   	pop    %edi
f01297a6:	5d                   	pop    %ebp
f01297a7:	c3                   	ret    

f01297a8 <test_kfreelast>:


int test_kfreelast()
{
f01297a8:	55                   	push   %ebp
f01297a9:	89 e5                	mov    %esp,%ebp
f01297ab:	57                   	push   %edi
f01297ac:	53                   	push   %ebx
f01297ad:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f01297b3:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f01297b7:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f01297bb:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f01297c1:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f01297c7:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01297ce:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01297d5:	e8 c3 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01297da:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01297dd:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f01297e3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01297e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01297ed:	89 d7                	mov    %edx,%edi
f01297ef:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01297f1:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01297f7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01297fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0129801:	89 d7                	mov    %edx,%edi
f0129803:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129805:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012980b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129810:	b8 00 00 00 00       	mov    $0x0,%eax
f0129815:	89 d7                	mov    %edx,%edi
f0129817:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129819:	e8 7f 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012981e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129821:	e8 a2 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129826:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129829:	83 ec 0c             	sub    $0xc,%esp
f012982c:	68 00 fc 1f 00       	push   $0x1ffc00
f0129831:	e8 4f e0 fd ff       	call   f0107885 <kmalloc>
f0129836:	83 c4 10             	add    $0x10,%esp
f0129839:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012983f:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129845:	89 c1                	mov    %eax,%ecx
f0129847:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012984e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129851:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129856:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129859:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012985c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129861:	f7 75 cc             	divl   -0x34(%ebp)
f0129864:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129867:	29 d0                	sub    %edx,%eax
f0129869:	89 c3                	mov    %eax,%ebx
f012986b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129872:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129877:	0f b6 d0             	movzbl %al,%edx
f012987a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012987d:	01 d0                	add    %edx,%eax
f012987f:	48                   	dec    %eax
f0129880:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129883:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129886:	ba 00 00 00 00       	mov    $0x0,%edx
f012988b:	f7 75 c4             	divl   -0x3c(%ebp)
f012988e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129891:	29 d0                	sub    %edx,%eax
f0129893:	01 c3                	add    %eax,%ebx
f0129895:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012989c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01298a1:	0f b6 c0             	movzbl %al,%eax
f01298a4:	c1 e0 04             	shl    $0x4,%eax
f01298a7:	89 c2                	mov    %eax,%edx
f01298a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01298ac:	01 d0                	add    %edx,%eax
f01298ae:	48                   	dec    %eax
f01298af:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01298b2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01298b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01298ba:	f7 75 bc             	divl   -0x44(%ebp)
f01298bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01298c0:	29 d0                	sub    %edx,%eax
f01298c2:	01 d8                	add    %ebx,%eax
f01298c4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01298c9:	39 c1                	cmp    %eax,%ecx
f01298cb:	74 17                	je     f01298e4 <test_kfreelast+0x13c>
f01298cd:	83 ec 04             	sub    $0x4,%esp
f01298d0:	68 80 b3 13 f0       	push   $0xf013b380
f01298d5:	68 ca 0c 00 00       	push   $0xcca
f01298da:	68 9a b2 13 f0       	push   $0xf013b29a
f01298df:	e8 21 69 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298e4:	e8 df a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298e9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298ec:	74 17                	je     f0129905 <test_kfreelast+0x15d>
f01298ee:	83 ec 04             	sub    $0x4,%esp
f01298f1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f01298f6:	68 cb 0c 00 00       	push   $0xccb
f01298fb:	68 9a b2 13 f0       	push   $0xf013b29a
f0129900:	e8 00 69 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129905:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129908:	e8 90 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012990d:	29 c3                	sub    %eax,%ebx
f012990f:	89 d8                	mov    %ebx,%eax
f0129911:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129916:	74 17                	je     f012992f <test_kfreelast+0x187>
f0129918:	83 ec 04             	sub    $0x4,%esp
f012991b:	68 1c b3 13 f0       	push   $0xf013b31c
f0129920:	68 cc 0c 00 00       	push   $0xccc
f0129925:	68 9a b2 13 f0       	push   $0xf013b29a
f012992a:	e8 d6 68 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012992f:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129936:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129939:	e8 5f 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012993e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129941:	e8 82 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129946:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129949:	83 ec 0c             	sub    $0xc,%esp
f012994c:	68 00 fc 1f 00       	push   $0x1ffc00
f0129951:	e8 2f df fd ff       	call   f0107885 <kmalloc>
f0129956:	83 c4 10             	add    $0x10,%esp
f0129959:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012995f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129965:	89 c1                	mov    %eax,%ecx
f0129967:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012996e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129971:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129976:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129979:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012997c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129981:	f7 75 b4             	divl   -0x4c(%ebp)
f0129984:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129987:	29 d0                	sub    %edx,%eax
f0129989:	89 c3                	mov    %eax,%ebx
f012998b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129992:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129997:	0f b6 d0             	movzbl %al,%edx
f012999a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012999d:	01 d0                	add    %edx,%eax
f012999f:	48                   	dec    %eax
f01299a0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01299a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01299a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01299ab:	f7 75 ac             	divl   -0x54(%ebp)
f01299ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01299b1:	29 d0                	sub    %edx,%eax
f01299b3:	01 c3                	add    %eax,%ebx
f01299b5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01299bc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01299c1:	0f b6 c0             	movzbl %al,%eax
f01299c4:	c1 e0 04             	shl    $0x4,%eax
f01299c7:	89 c2                	mov    %eax,%edx
f01299c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01299cc:	01 d0                	add    %edx,%eax
f01299ce:	48                   	dec    %eax
f01299cf:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01299d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01299d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01299da:	f7 75 a4             	divl   -0x5c(%ebp)
f01299dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01299e0:	29 d0                	sub    %edx,%eax
f01299e2:	01 d8                	add    %ebx,%eax
f01299e4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01299e9:	39 c1                	cmp    %eax,%ecx
f01299eb:	74 17                	je     f0129a04 <test_kfreelast+0x25c>
f01299ed:	83 ec 04             	sub    $0x4,%esp
f01299f0:	68 80 b3 13 f0       	push   $0xf013b380
f01299f5:	68 d3 0c 00 00       	push   $0xcd3
f01299fa:	68 9a b2 13 f0       	push   $0xf013b29a
f01299ff:	e8 01 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a04:	e8 bf a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a09:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a0c:	74 17                	je     f0129a25 <test_kfreelast+0x27d>
f0129a0e:	83 ec 04             	sub    $0x4,%esp
f0129a11:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129a16:	68 d4 0c 00 00       	push   $0xcd4
f0129a1b:	68 9a b2 13 f0       	push   $0xf013b29a
f0129a20:	e8 e0 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a25:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a28:	e8 70 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129a2d:	29 c3                	sub    %eax,%ebx
f0129a2f:	89 d8                	mov    %ebx,%eax
f0129a31:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129a36:	74 17                	je     f0129a4f <test_kfreelast+0x2a7>
f0129a38:	83 ec 04             	sub    $0x4,%esp
f0129a3b:	68 1c b3 13 f0       	push   $0xf013b31c
f0129a40:	68 d5 0c 00 00       	push   $0xcd5
f0129a45:	68 9a b2 13 f0       	push   $0xf013b29a
f0129a4a:	e8 b6 67 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129a4f:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129a56:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a59:	e8 3f 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129a5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a61:	e8 62 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129a69:	83 ec 0c             	sub    $0xc,%esp
f0129a6c:	68 00 08 00 00       	push   $0x800
f0129a71:	e8 0f de fd ff       	call   f0107885 <kmalloc>
f0129a76:	83 c4 10             	add    $0x10,%esp
f0129a79:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a7f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129a85:	89 c1                	mov    %eax,%ecx
f0129a87:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129a8e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129a91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a96:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129a99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aa1:	f7 75 9c             	divl   -0x64(%ebp)
f0129aa4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129aa7:	29 d0                	sub    %edx,%eax
f0129aa9:	89 c3                	mov    %eax,%ebx
f0129aab:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129ab2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129ab7:	0f b6 d0             	movzbl %al,%edx
f0129aba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129abd:	01 d0                	add    %edx,%eax
f0129abf:	48                   	dec    %eax
f0129ac0:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129ac3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129ac6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129acb:	f7 75 94             	divl   -0x6c(%ebp)
f0129ace:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129ad1:	29 d0                	sub    %edx,%eax
f0129ad3:	01 c3                	add    %eax,%ebx
f0129ad5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129adc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129ae1:	0f b6 c0             	movzbl %al,%eax
f0129ae4:	c1 e0 04             	shl    $0x4,%eax
f0129ae7:	89 c2                	mov    %eax,%edx
f0129ae9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129aec:	01 d0                	add    %edx,%eax
f0129aee:	48                   	dec    %eax
f0129aef:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129af2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0129afa:	f7 75 8c             	divl   -0x74(%ebp)
f0129afd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129b00:	29 d0                	sub    %edx,%eax
f0129b02:	01 d8                	add    %ebx,%eax
f0129b04:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129b09:	39 c1                	cmp    %eax,%ecx
f0129b0b:	74 17                	je     f0129b24 <test_kfreelast+0x37c>
f0129b0d:	83 ec 04             	sub    $0x4,%esp
f0129b10:	68 80 b3 13 f0       	push   $0xf013b380
f0129b15:	68 dc 0c 00 00       	push   $0xcdc
f0129b1a:	68 9a b2 13 f0       	push   $0xf013b29a
f0129b1f:	e8 e1 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b24:	e8 9f a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b29:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b2c:	74 17                	je     f0129b45 <test_kfreelast+0x39d>
f0129b2e:	83 ec 04             	sub    $0x4,%esp
f0129b31:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129b36:	68 dd 0c 00 00       	push   $0xcdd
f0129b3b:	68 9a b2 13 f0       	push   $0xf013b29a
f0129b40:	e8 c0 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b45:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129b48:	e8 50 30 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129b4d:	29 c3                	sub    %eax,%ebx
f0129b4f:	89 d8                	mov    %ebx,%eax
f0129b51:	83 f8 01             	cmp    $0x1,%eax
f0129b54:	74 17                	je     f0129b6d <test_kfreelast+0x3c5>
f0129b56:	83 ec 04             	sub    $0x4,%esp
f0129b59:	68 1c b3 13 f0       	push   $0xf013b31c
f0129b5e:	68 de 0c 00 00       	push   $0xcde
f0129b63:	68 9a b2 13 f0       	push   $0xf013b29a
f0129b68:	e8 98 66 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129b6d:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129b74:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129b77:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129b7d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129b80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b87:	eb 0e                	jmp    f0129b97 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0129b89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129b8c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129b8f:	01 d0                	add    %edx,%eax
f0129b91:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129b94:	ff 45 f4             	incl   -0xc(%ebp)
f0129b97:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129b9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129ba0:	7f e7                	jg     f0129b89 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ba2:	e8 f6 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129ba7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129baa:	e8 19 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129baf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129bb2:	83 ec 0c             	sub    $0xc,%esp
f0129bb5:	68 00 08 00 00       	push   $0x800
f0129bba:	e8 c6 dc fd ff       	call   f0107885 <kmalloc>
f0129bbf:	83 c4 10             	add    $0x10,%esp
f0129bc2:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bc8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129bce:	89 c1                	mov    %eax,%ecx
f0129bd0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129bd7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129bda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129bdf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129be5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129beb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bf0:	f7 75 80             	divl   -0x80(%ebp)
f0129bf3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129bf9:	29 d0                	sub    %edx,%eax
f0129bfb:	89 c3                	mov    %eax,%ebx
f0129bfd:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129c04:	10 00 00 
f0129c07:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129c0c:	0f b6 d0             	movzbl %al,%edx
f0129c0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129c15:	01 d0                	add    %edx,%eax
f0129c17:	48                   	dec    %eax
f0129c18:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129c1e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c29:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129c2f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129c35:	29 d0                	sub    %edx,%eax
f0129c37:	01 c3                	add    %eax,%ebx
f0129c39:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129c40:	10 00 00 
f0129c43:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129c48:	0f b6 c0             	movzbl %al,%eax
f0129c4b:	c1 e0 04             	shl    $0x4,%eax
f0129c4e:	89 c2                	mov    %eax,%edx
f0129c50:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129c56:	01 d0                	add    %edx,%eax
f0129c58:	48                   	dec    %eax
f0129c59:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129c5f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129c65:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c6a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129c70:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129c76:	29 d0                	sub    %edx,%eax
f0129c78:	01 d8                	add    %ebx,%eax
f0129c7a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129c7f:	39 c1                	cmp    %eax,%ecx
f0129c81:	74 17                	je     f0129c9a <test_kfreelast+0x4f2>
f0129c83:	83 ec 04             	sub    $0x4,%esp
f0129c86:	68 80 b3 13 f0       	push   $0xf013b380
f0129c8b:	68 ea 0c 00 00       	push   $0xcea
f0129c90:	68 9a b2 13 f0       	push   $0xf013b29a
f0129c95:	e8 6b 65 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c9a:	e8 29 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c9f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ca2:	74 17                	je     f0129cbb <test_kfreelast+0x513>
f0129ca4:	83 ec 04             	sub    $0x4,%esp
f0129ca7:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129cac:	68 eb 0c 00 00       	push   $0xceb
f0129cb1:	68 9a b2 13 f0       	push   $0xf013b29a
f0129cb6:	e8 4a 65 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129cbb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129cbe:	e8 da 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129cc3:	29 c3                	sub    %eax,%ebx
f0129cc5:	89 d8                	mov    %ebx,%eax
f0129cc7:	83 f8 01             	cmp    $0x1,%eax
f0129cca:	74 17                	je     f0129ce3 <test_kfreelast+0x53b>
f0129ccc:	83 ec 04             	sub    $0x4,%esp
f0129ccf:	68 1c b3 13 f0       	push   $0xf013b31c
f0129cd4:	68 ec 0c 00 00       	push   $0xcec
f0129cd9:	68 9a b2 13 f0       	push   $0xf013b29a
f0129cde:	e8 22 65 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129ce3:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129cea:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129ced:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129cf3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129cf6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129cfd:	eb 0e                	jmp    f0129d0d <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129cff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129d02:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129d05:	01 d0                	add    %edx,%eax
f0129d07:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129d0a:	ff 45 f4             	incl   -0xc(%ebp)
f0129d0d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129d13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d16:	7f e7                	jg     f0129cff <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d18:	e8 80 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129d1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d20:	e8 a3 a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129d28:	83 ec 0c             	sub    $0xc,%esp
f0129d2b:	68 00 1c 00 00       	push   $0x1c00
f0129d30:	e8 50 db fd ff       	call   f0107885 <kmalloc>
f0129d35:	83 c4 10             	add    $0x10,%esp
f0129d38:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d3e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129d44:	89 c1                	mov    %eax,%ecx
f0129d46:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129d4d:	10 00 00 
f0129d50:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129d56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d5b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129d61:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129d67:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d6c:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129d72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129d78:	29 d0                	sub    %edx,%eax
f0129d7a:	89 c3                	mov    %eax,%ebx
f0129d7c:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129d83:	10 00 00 
f0129d86:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129d8b:	0f b6 d0             	movzbl %al,%edx
f0129d8e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129d94:	01 d0                	add    %edx,%eax
f0129d96:	48                   	dec    %eax
f0129d97:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129d9d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129da8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129dae:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129db4:	29 d0                	sub    %edx,%eax
f0129db6:	01 c3                	add    %eax,%ebx
f0129db8:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129dbf:	10 00 00 
f0129dc2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129dc7:	0f b6 c0             	movzbl %al,%eax
f0129dca:	c1 e0 04             	shl    $0x4,%eax
f0129dcd:	89 c2                	mov    %eax,%edx
f0129dcf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129dd5:	01 d0                	add    %edx,%eax
f0129dd7:	48                   	dec    %eax
f0129dd8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129dde:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129de4:	ba 00 00 00 00       	mov    $0x0,%edx
f0129de9:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129def:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129df5:	29 d0                	sub    %edx,%eax
f0129df7:	01 d8                	add    %ebx,%eax
f0129df9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129dfe:	39 c1                	cmp    %eax,%ecx
f0129e00:	74 17                	je     f0129e19 <test_kfreelast+0x671>
f0129e02:	83 ec 04             	sub    $0x4,%esp
f0129e05:	68 80 b3 13 f0       	push   $0xf013b380
f0129e0a:	68 f8 0c 00 00       	push   $0xcf8
f0129e0f:	68 9a b2 13 f0       	push   $0xf013b29a
f0129e14:	e8 ec 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e19:	e8 aa 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e1e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e21:	74 17                	je     f0129e3a <test_kfreelast+0x692>
f0129e23:	83 ec 04             	sub    $0x4,%esp
f0129e26:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129e2b:	68 f9 0c 00 00       	push   $0xcf9
f0129e30:	68 9a b2 13 f0       	push   $0xf013b29a
f0129e35:	e8 cb 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e3a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e3d:	e8 5b 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129e42:	29 c3                	sub    %eax,%ebx
f0129e44:	89 d8                	mov    %ebx,%eax
f0129e46:	83 f8 02             	cmp    $0x2,%eax
f0129e49:	74 17                	je     f0129e62 <test_kfreelast+0x6ba>
f0129e4b:	83 ec 04             	sub    $0x4,%esp
f0129e4e:	68 1c b3 13 f0       	push   $0xf013b31c
f0129e53:	68 fa 0c 00 00       	push   $0xcfa
f0129e58:	68 9a b2 13 f0       	push   $0xf013b29a
f0129e5d:	e8 a3 63 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129e62:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129e69:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129e6c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129e72:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129e75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e7c:	eb 0e                	jmp    f0129e8c <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129e7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e81:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e84:	01 d0                	add    %edx,%eax
f0129e86:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129e89:	ff 45 f4             	incl   -0xc(%ebp)
f0129e8c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129e92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e95:	7f e7                	jg     f0129e7e <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e97:	e8 01 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129e9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e9f:	e8 24 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129ea7:	83 ec 0c             	sub    $0xc,%esp
f0129eaa:	68 00 fc 2f 00       	push   $0x2ffc00
f0129eaf:	e8 d1 d9 fd ff       	call   f0107885 <kmalloc>
f0129eb4:	83 c4 10             	add    $0x10,%esp
f0129eb7:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ebd:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ec3:	89 c1                	mov    %eax,%ecx
f0129ec5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129ecc:	10 00 00 
f0129ecf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129ed5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129eda:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129ee0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129ee6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129eeb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129ef1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129ef7:	29 d0                	sub    %edx,%eax
f0129ef9:	89 c3                	mov    %eax,%ebx
f0129efb:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129f02:	10 00 00 
f0129f05:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129f0a:	0f b6 d0             	movzbl %al,%edx
f0129f0d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129f13:	01 d0                	add    %edx,%eax
f0129f15:	48                   	dec    %eax
f0129f16:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129f1c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f27:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129f2d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129f33:	29 d0                	sub    %edx,%eax
f0129f35:	01 c3                	add    %eax,%ebx
f0129f37:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129f3e:	10 00 00 
f0129f41:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129f46:	0f b6 c0             	movzbl %al,%eax
f0129f49:	c1 e0 04             	shl    $0x4,%eax
f0129f4c:	89 c2                	mov    %eax,%edx
f0129f4e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129f54:	01 d0                	add    %edx,%eax
f0129f56:	48                   	dec    %eax
f0129f57:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129f5d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f68:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129f6e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129f74:	29 d0                	sub    %edx,%eax
f0129f76:	01 d8                	add    %ebx,%eax
f0129f78:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129f7d:	39 c1                	cmp    %eax,%ecx
f0129f7f:	74 17                	je     f0129f98 <test_kfreelast+0x7f0>
f0129f81:	83 ec 04             	sub    $0x4,%esp
f0129f84:	68 80 b3 13 f0       	push   $0xf013b380
f0129f89:	68 06 0d 00 00       	push   $0xd06
f0129f8e:	68 9a b2 13 f0       	push   $0xf013b29a
f0129f93:	e8 6d 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f98:	e8 2b 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f9d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fa0:	74 17                	je     f0129fb9 <test_kfreelast+0x811>
f0129fa2:	83 ec 04             	sub    $0x4,%esp
f0129fa5:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0129faa:	68 07 0d 00 00       	push   $0xd07
f0129faf:	68 9a b2 13 f0       	push   $0xf013b29a
f0129fb4:	e8 4c 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fb9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fbc:	e8 dc 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129fc1:	29 c3                	sub    %eax,%ebx
f0129fc3:	89 d8                	mov    %ebx,%eax
f0129fc5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129fca:	74 17                	je     f0129fe3 <test_kfreelast+0x83b>
f0129fcc:	83 ec 04             	sub    $0x4,%esp
f0129fcf:	68 1c b3 13 f0       	push   $0xf013b31c
f0129fd4:	68 08 0d 00 00       	push   $0xd08
f0129fd9:	68 9a b2 13 f0       	push   $0xf013b29a
f0129fde:	e8 22 62 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129fe3:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129fea:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129fed:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ff3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129ff6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ffd:	eb 0e                	jmp    f012a00d <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129fff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a002:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a005:	01 d0                	add    %edx,%eax
f012a007:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a00a:	ff 45 f4             	incl   -0xc(%ebp)
f012a00d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a013:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a016:	7f e7                	jg     f0129fff <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a018:	e8 80 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a01d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a020:	e8 a3 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a025:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a028:	83 ec 0c             	sub    $0xc,%esp
f012a02b:	68 00 fc 5f 00       	push   $0x5ffc00
f012a030:	e8 50 d8 fd ff       	call   f0107885 <kmalloc>
f012a035:	83 c4 10             	add    $0x10,%esp
f012a038:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a03e:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a044:	89 c1                	mov    %eax,%ecx
f012a046:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a04d:	10 00 00 
f012a050:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a056:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a05b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a061:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a067:	ba 00 00 00 00       	mov    $0x0,%edx
f012a06c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a072:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a078:	29 d0                	sub    %edx,%eax
f012a07a:	89 c3                	mov    %eax,%ebx
f012a07c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a083:	10 00 00 
f012a086:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a08b:	0f b6 d0             	movzbl %al,%edx
f012a08e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a094:	01 d0                	add    %edx,%eax
f012a096:	48                   	dec    %eax
f012a097:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a09d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a0a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0a8:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a0ae:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a0b4:	29 d0                	sub    %edx,%eax
f012a0b6:	01 c3                	add    %eax,%ebx
f012a0b8:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a0bf:	10 00 00 
f012a0c2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a0c7:	0f b6 c0             	movzbl %al,%eax
f012a0ca:	c1 e0 04             	shl    $0x4,%eax
f012a0cd:	89 c2                	mov    %eax,%edx
f012a0cf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a0d5:	01 d0                	add    %edx,%eax
f012a0d7:	48                   	dec    %eax
f012a0d8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a0de:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a0e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0e9:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a0ef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a0f5:	29 d0                	sub    %edx,%eax
f012a0f7:	01 d8                	add    %ebx,%eax
f012a0f9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a0fe:	39 c1                	cmp    %eax,%ecx
f012a100:	74 17                	je     f012a119 <test_kfreelast+0x971>
f012a102:	83 ec 04             	sub    $0x4,%esp
f012a105:	68 80 b3 13 f0       	push   $0xf013b380
f012a10a:	68 14 0d 00 00       	push   $0xd14
f012a10f:	68 9a b2 13 f0       	push   $0xf013b29a
f012a114:	e8 ec 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a119:	e8 aa 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a11e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a121:	74 17                	je     f012a13a <test_kfreelast+0x992>
f012a123:	83 ec 04             	sub    $0x4,%esp
f012a126:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a12b:	68 15 0d 00 00       	push   $0xd15
f012a130:	68 9a b2 13 f0       	push   $0xf013b29a
f012a135:	e8 cb 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a13a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a13d:	e8 5b 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a142:	29 c3                	sub    %eax,%ebx
f012a144:	89 d8                	mov    %ebx,%eax
f012a146:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a14b:	74 17                	je     f012a164 <test_kfreelast+0x9bc>
f012a14d:	83 ec 04             	sub    $0x4,%esp
f012a150:	68 1c b3 13 f0       	push   $0xf013b31c
f012a155:	68 16 0d 00 00       	push   $0xd16
f012a15a:	68 9a b2 13 f0       	push   $0xf013b29a
f012a15f:	e8 a1 60 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a164:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a16b:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a16e:	e8 2a 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a173:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a176:	e8 4d 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a17b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a17e:	83 ec 0c             	sub    $0xc,%esp
f012a181:	68 00 38 00 00       	push   $0x3800
f012a186:	e8 fa d6 fd ff       	call   f0107885 <kmalloc>
f012a18b:	83 c4 10             	add    $0x10,%esp
f012a18e:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a194:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a19a:	89 c1                	mov    %eax,%ecx
f012a19c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a1a3:	10 00 00 
f012a1a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a1ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a1b1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a1b7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a1bd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1c2:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a1c8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a1ce:	29 d0                	sub    %edx,%eax
f012a1d0:	89 c3                	mov    %eax,%ebx
f012a1d2:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a1d9:	10 00 00 
f012a1dc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a1e1:	0f b6 d0             	movzbl %al,%edx
f012a1e4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a1ea:	01 d0                	add    %edx,%eax
f012a1ec:	48                   	dec    %eax
f012a1ed:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a1f3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a1f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1fe:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a204:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a20a:	29 d0                	sub    %edx,%eax
f012a20c:	01 c3                	add    %eax,%ebx
f012a20e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a215:	10 00 00 
f012a218:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a21d:	0f b6 c0             	movzbl %al,%eax
f012a220:	c1 e0 04             	shl    $0x4,%eax
f012a223:	89 c2                	mov    %eax,%edx
f012a225:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a22b:	01 d0                	add    %edx,%eax
f012a22d:	48                   	dec    %eax
f012a22e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a234:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a23a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a23f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a245:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a24b:	29 d0                	sub    %edx,%eax
f012a24d:	01 d8                	add    %ebx,%eax
f012a24f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a254:	39 c1                	cmp    %eax,%ecx
f012a256:	74 17                	je     f012a26f <test_kfreelast+0xac7>
f012a258:	83 ec 04             	sub    $0x4,%esp
f012a25b:	68 80 b3 13 f0       	push   $0xf013b380
f012a260:	68 1d 0d 00 00       	push   $0xd1d
f012a265:	68 9a b2 13 f0       	push   $0xf013b29a
f012a26a:	e8 96 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a26f:	e8 54 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a274:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a277:	74 17                	je     f012a290 <test_kfreelast+0xae8>
f012a279:	83 ec 04             	sub    $0x4,%esp
f012a27c:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a281:	68 1e 0d 00 00       	push   $0xd1e
f012a286:	68 9a b2 13 f0       	push   $0xf013b29a
f012a28b:	e8 75 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a290:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a293:	e8 05 29 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a298:	29 c3                	sub    %eax,%ebx
f012a29a:	89 d8                	mov    %ebx,%eax
f012a29c:	83 f8 04             	cmp    $0x4,%eax
f012a29f:	74 17                	je     f012a2b8 <test_kfreelast+0xb10>
f012a2a1:	83 ec 04             	sub    $0x4,%esp
f012a2a4:	68 1c b3 13 f0       	push   $0xf013b31c
f012a2a9:	68 1f 0d 00 00       	push   $0xd1f
f012a2ae:	68 9a b2 13 f0       	push   $0xf013b29a
f012a2b3:	e8 4d 5f fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a2b8:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a2bf:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a2c2:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a2c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a2cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a2d2:	eb 0e                	jmp    f012a2e2 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a2d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a2d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a2da:	01 d0                	add    %edx,%eax
f012a2dc:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a2df:	ff 45 f4             	incl   -0xc(%ebp)
f012a2e2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a2e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2eb:	7f e7                	jg     f012a2d4 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a2ed:	e8 ab 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a2f2:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a2f8:	e8 cb 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2fd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a303:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a309:	83 ec 0c             	sub    $0xc,%esp
f012a30c:	50                   	push   %eax
f012a30d:	e8 3e d6 fd ff       	call   f0107950 <kfree>
f012a312:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a315:	e8 ae 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a31a:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a320:	74 17                	je     f012a339 <test_kfreelast+0xb91>
f012a322:	83 ec 04             	sub    $0x4,%esp
f012a325:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a32a:	68 2e 0d 00 00       	push   $0xd2e
f012a32f:	68 9a b2 13 f0       	push   $0xf013b29a
f012a334:	e8 cc 5e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a339:	e8 5f 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a33e:	89 c2                	mov    %eax,%edx
f012a340:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a346:	29 c2                	sub    %eax,%edx
f012a348:	89 d0                	mov    %edx,%eax
f012a34a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a34f:	74 17                	je     f012a368 <test_kfreelast+0xbc0>
f012a351:	83 ec 04             	sub    $0x4,%esp
f012a354:	68 24 ba 13 f0       	push   $0xf013ba24
f012a359:	68 2f 0d 00 00       	push   $0xd2f
f012a35e:	68 9a b2 13 f0       	push   $0xf013b29a
f012a363:	e8 9d 5e fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a368:	e8 30 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a36d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a373:	e8 50 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a378:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a37e:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a384:	83 ec 0c             	sub    $0xc,%esp
f012a387:	50                   	push   %eax
f012a388:	e8 c3 d5 fd ff       	call   f0107950 <kfree>
f012a38d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a390:	e8 33 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a395:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a39b:	74 17                	je     f012a3b4 <test_kfreelast+0xc0c>
f012a39d:	83 ec 04             	sub    $0x4,%esp
f012a3a0:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a3a5:	68 35 0d 00 00       	push   $0xd35
f012a3aa:	68 9a b2 13 f0       	push   $0xf013b29a
f012a3af:	e8 51 5e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a3b4:	e8 e4 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a3b9:	89 c2                	mov    %eax,%edx
f012a3bb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a3c1:	29 c2                	sub    %eax,%edx
f012a3c3:	89 d0                	mov    %edx,%eax
f012a3c5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a3ca:	74 17                	je     f012a3e3 <test_kfreelast+0xc3b>
f012a3cc:	83 ec 04             	sub    $0x4,%esp
f012a3cf:	68 24 ba 13 f0       	push   $0xf013ba24
f012a3d4:	68 36 0d 00 00       	push   $0xd36
f012a3d9:	68 9a b2 13 f0       	push   $0xf013b29a
f012a3de:	e8 22 5e fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a3e3:	e8 b5 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a3e8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a3ee:	e8 d5 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a3f3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a3f9:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a3ff:	83 ec 0c             	sub    $0xc,%esp
f012a402:	50                   	push   %eax
f012a403:	e8 48 d5 fd ff       	call   f0107950 <kfree>
f012a408:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a40b:	e8 b8 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a410:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a416:	74 17                	je     f012a42f <test_kfreelast+0xc87>
f012a418:	83 ec 04             	sub    $0x4,%esp
f012a41b:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a420:	68 3c 0d 00 00       	push   $0xd3c
f012a425:	68 9a b2 13 f0       	push   $0xf013b29a
f012a42a:	e8 d6 5d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a42f:	e8 69 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a434:	89 c2                	mov    %eax,%edx
f012a436:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a43c:	29 c2                	sub    %eax,%edx
f012a43e:	89 d0                	mov    %edx,%eax
f012a440:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a445:	74 17                	je     f012a45e <test_kfreelast+0xcb6>
f012a447:	83 ec 04             	sub    $0x4,%esp
f012a44a:	68 24 ba 13 f0       	push   $0xf013ba24
f012a44f:	68 3d 0d 00 00       	push   $0xd3d
f012a454:	68 9a b2 13 f0       	push   $0xf013b29a
f012a459:	e8 a7 5d fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a45e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a464:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a467:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a46e:	eb 1e                	jmp    f012a48e <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a470:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a476:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a479:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a47c:	01 c8                	add    %ecx,%eax
f012a47e:	8a 00                	mov    (%eax),%al
f012a480:	0f be c0             	movsbl %al,%eax
f012a483:	01 d0                	add    %edx,%eax
f012a485:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a48b:	ff 45 f4             	incl   -0xc(%ebp)
f012a48e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a494:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a497:	7f d7                	jg     f012a470 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a499:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a49f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a4a5:	01 c0                	add    %eax,%eax
f012a4a7:	39 c2                	cmp    %eax,%edx
f012a4a9:	74 17                	je     f012a4c2 <test_kfreelast+0xd1a>
f012a4ab:	83 ec 04             	sub    $0x4,%esp
f012a4ae:	68 80 ba 13 f0       	push   $0xf013ba80
f012a4b3:	68 48 0d 00 00       	push   $0xd48
f012a4b8:	68 9a b2 13 f0       	push   $0xf013b29a
f012a4bd:	e8 43 5d fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a4c2:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a4c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a4cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4d2:	eb 1e                	jmp    f012a4f2 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a4d4:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a4da:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a4dd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4e0:	01 c8                	add    %ecx,%eax
f012a4e2:	8a 00                	mov    (%eax),%al
f012a4e4:	0f be c0             	movsbl %al,%eax
f012a4e7:	01 d0                	add    %edx,%eax
f012a4e9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a4ef:	ff 45 f4             	incl   -0xc(%ebp)
f012a4f2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a4f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4fb:	7f d7                	jg     f012a4d4 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a4fd:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a503:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a509:	89 c1                	mov    %eax,%ecx
f012a50b:	01 c9                	add    %ecx,%ecx
f012a50d:	01 c8                	add    %ecx,%eax
f012a50f:	39 c2                	cmp    %eax,%edx
f012a511:	74 17                	je     f012a52a <test_kfreelast+0xd82>
f012a513:	83 ec 04             	sub    $0x4,%esp
f012a516:	68 80 ba 13 f0       	push   $0xf013ba80
f012a51b:	68 50 0d 00 00       	push   $0xd50
f012a520:	68 9a b2 13 f0       	push   $0xf013b29a
f012a525:	e8 db 5c fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a52a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a530:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a533:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a53a:	eb 1e                	jmp    f012a55a <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a53c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a542:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a545:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a548:	01 c8                	add    %ecx,%eax
f012a54a:	8a 00                	mov    (%eax),%al
f012a54c:	0f be c0             	movsbl %al,%eax
f012a54f:	01 d0                	add    %edx,%eax
f012a551:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a557:	ff 45 f4             	incl   -0xc(%ebp)
f012a55a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a560:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a563:	7f d7                	jg     f012a53c <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a565:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a56b:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a571:	c1 e2 02             	shl    $0x2,%edx
f012a574:	39 d0                	cmp    %edx,%eax
f012a576:	74 17                	je     f012a58f <test_kfreelast+0xde7>
f012a578:	83 ec 04             	sub    $0x4,%esp
f012a57b:	68 80 ba 13 f0       	push   $0xf013ba80
f012a580:	68 58 0d 00 00       	push   $0xd58
f012a585:	68 9a b2 13 f0       	push   $0xf013b29a
f012a58a:	e8 76 5c fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a58f:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a595:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a598:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a59f:	eb 1e                	jmp    f012a5bf <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a5a1:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a5a7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a5aa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5ad:	01 c8                	add    %ecx,%eax
f012a5af:	8a 00                	mov    (%eax),%al
f012a5b1:	0f be c0             	movsbl %al,%eax
f012a5b4:	01 d0                	add    %edx,%eax
f012a5b6:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a5bc:	ff 45 f4             	incl   -0xc(%ebp)
f012a5bf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a5c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5c8:	7f d7                	jg     f012a5a1 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a5ca:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a5d0:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a5d6:	89 d0                	mov    %edx,%eax
f012a5d8:	c1 e0 02             	shl    $0x2,%eax
f012a5db:	01 d0                	add    %edx,%eax
f012a5dd:	39 c1                	cmp    %eax,%ecx
f012a5df:	74 17                	je     f012a5f8 <test_kfreelast+0xe50>
f012a5e1:	83 ec 04             	sub    $0x4,%esp
f012a5e4:	68 80 ba 13 f0       	push   $0xf013ba80
f012a5e9:	68 60 0d 00 00       	push   $0xd60
f012a5ee:	68 9a b2 13 f0       	push   $0xf013b29a
f012a5f3:	e8 0d 5c fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a5f8:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a5fe:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a601:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a608:	eb 1e                	jmp    f012a628 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a60a:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a610:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a613:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a616:	01 c8                	add    %ecx,%eax
f012a618:	8a 00                	mov    (%eax),%al
f012a61a:	0f be c0             	movsbl %al,%eax
f012a61d:	01 d0                	add    %edx,%eax
f012a61f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a625:	ff 45 f4             	incl   -0xc(%ebp)
f012a628:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a62e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a631:	7f d7                	jg     f012a60a <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a633:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a639:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a63f:	89 d0                	mov    %edx,%eax
f012a641:	01 c0                	add    %eax,%eax
f012a643:	01 d0                	add    %edx,%eax
f012a645:	01 c0                	add    %eax,%eax
f012a647:	01 d0                	add    %edx,%eax
f012a649:	39 c1                	cmp    %eax,%ecx
f012a64b:	74 17                	je     f012a664 <test_kfreelast+0xebc>
f012a64d:	83 ec 04             	sub    $0x4,%esp
f012a650:	68 80 ba 13 f0       	push   $0xf013ba80
f012a655:	68 68 0d 00 00       	push   $0xd68
f012a65a:	68 9a b2 13 f0       	push   $0xf013b29a
f012a65f:	e8 a1 5b fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a664:	e8 34 25 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a669:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a66c:	e8 57 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a671:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a674:	83 ec 0c             	sub    $0xc,%esp
f012a677:	68 00 50 00 00       	push   $0x5000
f012a67c:	e8 04 d2 fd ff       	call   f0107885 <kmalloc>
f012a681:	83 c4 10             	add    $0x10,%esp
f012a684:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a68a:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a690:	89 c1                	mov    %eax,%ecx
f012a692:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a699:	10 00 00 
f012a69c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a6a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a6a7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a6ad:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a6b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6b8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a6be:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a6c4:	29 d0                	sub    %edx,%eax
f012a6c6:	89 c3                	mov    %eax,%ebx
f012a6c8:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a6cf:	10 00 00 
f012a6d2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a6d7:	0f b6 d0             	movzbl %al,%edx
f012a6da:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a6e0:	01 d0                	add    %edx,%eax
f012a6e2:	48                   	dec    %eax
f012a6e3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a6e9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a6ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6f4:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a6fa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a700:	29 d0                	sub    %edx,%eax
f012a702:	01 c3                	add    %eax,%ebx
f012a704:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a70b:	10 00 00 
f012a70e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a713:	0f b6 c0             	movzbl %al,%eax
f012a716:	c1 e0 04             	shl    $0x4,%eax
f012a719:	89 c2                	mov    %eax,%edx
f012a71b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a721:	01 d0                	add    %edx,%eax
f012a723:	48                   	dec    %eax
f012a724:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a72a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a730:	ba 00 00 00 00       	mov    $0x0,%edx
f012a735:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a73b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a741:	29 d0                	sub    %edx,%eax
f012a743:	01 d8                	add    %ebx,%eax
f012a745:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a74a:	39 c1                	cmp    %eax,%ecx
f012a74c:	74 17                	je     f012a765 <test_kfreelast+0xfbd>
f012a74e:	83 ec 04             	sub    $0x4,%esp
f012a751:	68 80 b3 13 f0       	push   $0xf013b380
f012a756:	68 71 0d 00 00       	push   $0xd71
f012a75b:	68 9a b2 13 f0       	push   $0xf013b29a
f012a760:	e8 a0 5a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a765:	e8 5e 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a76a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a76d:	74 17                	je     f012a786 <test_kfreelast+0xfde>
f012a76f:	83 ec 04             	sub    $0x4,%esp
f012a772:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a777:	68 72 0d 00 00       	push   $0xd72
f012a77c:	68 9a b2 13 f0       	push   $0xf013b29a
f012a781:	e8 7f 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a786:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a789:	e8 0f 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a78e:	29 c3                	sub    %eax,%ebx
f012a790:	89 d8                	mov    %ebx,%eax
f012a792:	83 f8 05             	cmp    $0x5,%eax
f012a795:	74 17                	je     f012a7ae <test_kfreelast+0x1006>
f012a797:	83 ec 04             	sub    $0x4,%esp
f012a79a:	68 1c b3 13 f0       	push   $0xf013b31c
f012a79f:	68 73 0d 00 00       	push   $0xd73
f012a7a4:	68 9a b2 13 f0       	push   $0xf013b29a
f012a7a9:	e8 57 5a fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a7ae:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a7b5:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a7b8:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a7be:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a7c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7c8:	eb 0e                	jmp    f012a7d8 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a7ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7cd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7d0:	01 d0                	add    %edx,%eax
f012a7d2:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a7d5:	ff 45 f4             	incl   -0xc(%ebp)
f012a7d8:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a7de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7e1:	7f e7                	jg     f012a7ca <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7e3:	e8 b5 23 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a7e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7eb:	e8 d8 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a7f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a7f3:	83 ec 0c             	sub    $0xc,%esp
f012a7f6:	68 00 00 10 00       	push   $0x100000
f012a7fb:	e8 85 d0 fd ff       	call   f0107885 <kmalloc>
f012a800:	83 c4 10             	add    $0x10,%esp
f012a803:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a809:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a80f:	89 c1                	mov    %eax,%ecx
f012a811:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a818:	10 00 00 
f012a81b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a821:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a826:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a82c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a832:	ba 00 00 00 00       	mov    $0x0,%edx
f012a837:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a83d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a843:	29 d0                	sub    %edx,%eax
f012a845:	89 c3                	mov    %eax,%ebx
f012a847:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a84e:	10 00 00 
f012a851:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a856:	0f b6 d0             	movzbl %al,%edx
f012a859:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a85f:	01 d0                	add    %edx,%eax
f012a861:	48                   	dec    %eax
f012a862:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a868:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a86e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a873:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a879:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a87f:	29 d0                	sub    %edx,%eax
f012a881:	01 c3                	add    %eax,%ebx
f012a883:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a88a:	10 00 00 
f012a88d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a892:	0f b6 c0             	movzbl %al,%eax
f012a895:	c1 e0 04             	shl    $0x4,%eax
f012a898:	89 c2                	mov    %eax,%edx
f012a89a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a8a0:	01 d0                	add    %edx,%eax
f012a8a2:	48                   	dec    %eax
f012a8a3:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a8a9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a8af:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8b4:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a8ba:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a8c0:	29 d0                	sub    %edx,%eax
f012a8c2:	01 d8                	add    %ebx,%eax
f012a8c4:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a8c9:	39 c1                	cmp    %eax,%ecx
f012a8cb:	74 17                	je     f012a8e4 <test_kfreelast+0x113c>
f012a8cd:	83 ec 04             	sub    $0x4,%esp
f012a8d0:	68 80 b3 13 f0       	push   $0xf013b380
f012a8d5:	68 7f 0d 00 00       	push   $0xd7f
f012a8da:	68 9a b2 13 f0       	push   $0xf013b29a
f012a8df:	e8 21 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8e4:	e8 df 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8e9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8ec:	74 17                	je     f012a905 <test_kfreelast+0x115d>
f012a8ee:	83 ec 04             	sub    $0x4,%esp
f012a8f1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a8f6:	68 80 0d 00 00       	push   $0xd80
f012a8fb:	68 9a b2 13 f0       	push   $0xf013b29a
f012a900:	e8 00 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a905:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a908:	e8 90 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a90d:	29 c3                	sub    %eax,%ebx
f012a90f:	89 d8                	mov    %ebx,%eax
f012a911:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a916:	74 17                	je     f012a92f <test_kfreelast+0x1187>
f012a918:	83 ec 04             	sub    $0x4,%esp
f012a91b:	68 1c b3 13 f0       	push   $0xf013b31c
f012a920:	68 81 0d 00 00       	push   $0xd81
f012a925:	68 9a b2 13 f0       	push   $0xf013b29a
f012a92a:	e8 d6 58 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a92f:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a936:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a939:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a93f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a949:	eb 0e                	jmp    f012a959 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a94b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a94e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a951:	01 d0                	add    %edx,%eax
f012a953:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a956:	ff 45 f4             	incl   -0xc(%ebp)
f012a959:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a95f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a962:	7f e7                	jg     f012a94b <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a964:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a96b:	e8 2d 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a970:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a973:	e8 50 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a978:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a97b:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a981:	83 ec 0c             	sub    $0xc,%esp
f012a984:	50                   	push   %eax
f012a985:	e8 c6 cf fd ff       	call   f0107950 <kfree>
f012a98a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a98d:	e8 36 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a992:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a995:	74 17                	je     f012a9ae <test_kfreelast+0x1206>
f012a997:	83 ec 04             	sub    $0x4,%esp
f012a99a:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012a99f:	68 91 0d 00 00       	push   $0xd91
f012a9a4:	68 9a b2 13 f0       	push   $0xf013b29a
f012a9a9:	e8 57 58 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a9ae:	e8 ea 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a9b3:	89 c2                	mov    %eax,%edx
f012a9b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a9b8:	29 c2                	sub    %eax,%edx
f012a9ba:	89 d0                	mov    %edx,%eax
f012a9bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a9c1:	74 17                	je     f012a9da <test_kfreelast+0x1232>
f012a9c3:	83 ec 04             	sub    $0x4,%esp
f012a9c6:	68 24 ba 13 f0       	push   $0xf013ba24
f012a9cb:	68 92 0d 00 00       	push   $0xd92
f012a9d0:	68 9a b2 13 f0       	push   $0xf013b29a
f012a9d5:	e8 2b 58 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9da:	e8 be 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a9df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9e2:	e8 e1 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a9e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a9ea:	83 ec 0c             	sub    $0xc,%esp
f012a9ed:	68 00 78 00 00       	push   $0x7800
f012a9f2:	e8 8e ce fd ff       	call   f0107885 <kmalloc>
f012a9f7:	83 c4 10             	add    $0x10,%esp
f012a9fa:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aa00:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012aa06:	89 c1                	mov    %eax,%ecx
f012aa08:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012aa0f:	10 00 00 
f012aa12:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012aa18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa1d:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012aa23:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aa29:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa2e:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012aa34:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aa3a:	29 d0                	sub    %edx,%eax
f012aa3c:	89 c3                	mov    %eax,%ebx
f012aa3e:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012aa45:	10 00 00 
f012aa48:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012aa4d:	0f b6 d0             	movzbl %al,%edx
f012aa50:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012aa56:	01 d0                	add    %edx,%eax
f012aa58:	48                   	dec    %eax
f012aa59:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012aa5f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aa65:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa6a:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012aa70:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aa76:	29 d0                	sub    %edx,%eax
f012aa78:	01 c3                	add    %eax,%ebx
f012aa7a:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012aa81:	10 00 00 
f012aa84:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012aa89:	0f b6 c0             	movzbl %al,%eax
f012aa8c:	c1 e0 04             	shl    $0x4,%eax
f012aa8f:	89 c2                	mov    %eax,%edx
f012aa91:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012aa97:	01 d0                	add    %edx,%eax
f012aa99:	48                   	dec    %eax
f012aa9a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012aaa0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aaa6:	ba 00 00 00 00       	mov    $0x0,%edx
f012aaab:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012aab1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aab7:	29 d0                	sub    %edx,%eax
f012aab9:	01 d8                	add    %ebx,%eax
f012aabb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012aac0:	39 c1                	cmp    %eax,%ecx
f012aac2:	74 17                	je     f012aadb <test_kfreelast+0x1333>
f012aac4:	83 ec 04             	sub    $0x4,%esp
f012aac7:	68 80 b3 13 f0       	push   $0xf013b380
f012aacc:	68 9b 0d 00 00       	push   $0xd9b
f012aad1:	68 9a b2 13 f0       	push   $0xf013b29a
f012aad6:	e8 2a 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aadb:	e8 e8 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aae0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aae3:	74 17                	je     f012aafc <test_kfreelast+0x1354>
f012aae5:	83 ec 04             	sub    $0x4,%esp
f012aae8:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012aaed:	68 9c 0d 00 00       	push   $0xd9c
f012aaf2:	68 9a b2 13 f0       	push   $0xf013b29a
f012aaf7:	e8 09 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aafc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aaff:	e8 99 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab04:	29 c3                	sub    %eax,%ebx
f012ab06:	89 d8                	mov    %ebx,%eax
f012ab08:	83 f8 08             	cmp    $0x8,%eax
f012ab0b:	74 17                	je     f012ab24 <test_kfreelast+0x137c>
f012ab0d:	83 ec 04             	sub    $0x4,%esp
f012ab10:	68 1c b3 13 f0       	push   $0xf013b31c
f012ab15:	68 9d 0d 00 00       	push   $0xd9d
f012ab1a:	68 9a b2 13 f0       	push   $0xf013b29a
f012ab1f:	e8 e1 56 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012ab24:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012ab2b:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012ab2e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ab34:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012ab37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab3e:	eb 0e                	jmp    f012ab4e <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012ab40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab43:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab46:	01 d0                	add    %edx,%eax
f012ab48:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012ab4b:	ff 45 f4             	incl   -0xc(%ebp)
f012ab4e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012ab54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ab57:	7f e7                	jg     f012ab40 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ab59:	e8 3f 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab61:	e8 62 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012ab69:	83 ec 0c             	sub    $0xc,%esp
f012ab6c:	68 00 00 10 00       	push   $0x100000
f012ab71:	e8 0f cd fd ff       	call   f0107885 <kmalloc>
f012ab76:	83 c4 10             	add    $0x10,%esp
f012ab79:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab7f:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ab85:	89 c1                	mov    %eax,%ecx
f012ab87:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012ab8e:	10 00 00 
f012ab91:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ab97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab9c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012aba2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aba8:	ba 00 00 00 00       	mov    $0x0,%edx
f012abad:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012abb3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012abb9:	29 d0                	sub    %edx,%eax
f012abbb:	89 c3                	mov    %eax,%ebx
f012abbd:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012abc4:	10 00 00 
f012abc7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012abcc:	0f b6 d0             	movzbl %al,%edx
f012abcf:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012abd5:	01 d0                	add    %edx,%eax
f012abd7:	48                   	dec    %eax
f012abd8:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012abde:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012abe4:	ba 00 00 00 00       	mov    $0x0,%edx
f012abe9:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012abef:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012abf5:	29 d0                	sub    %edx,%eax
f012abf7:	01 c3                	add    %eax,%ebx
f012abf9:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012ac00:	10 00 00 
f012ac03:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ac08:	0f b6 c0             	movzbl %al,%eax
f012ac0b:	c1 e0 04             	shl    $0x4,%eax
f012ac0e:	89 c2                	mov    %eax,%edx
f012ac10:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ac16:	01 d0                	add    %edx,%eax
f012ac18:	48                   	dec    %eax
f012ac19:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012ac1f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ac25:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac2a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012ac30:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ac36:	29 d0                	sub    %edx,%eax
f012ac38:	01 d8                	add    %ebx,%eax
f012ac3a:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012ac3f:	39 c1                	cmp    %eax,%ecx
f012ac41:	74 17                	je     f012ac5a <test_kfreelast+0x14b2>
f012ac43:	83 ec 04             	sub    $0x4,%esp
f012ac46:	68 80 b3 13 f0       	push   $0xf013b380
f012ac4b:	68 a9 0d 00 00       	push   $0xda9
f012ac50:	68 9a b2 13 f0       	push   $0xf013b29a
f012ac55:	e8 ab 55 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac5a:	e8 69 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac5f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac62:	74 17                	je     f012ac7b <test_kfreelast+0x14d3>
f012ac64:	83 ec 04             	sub    $0x4,%esp
f012ac67:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012ac6c:	68 aa 0d 00 00       	push   $0xdaa
f012ac71:	68 9a b2 13 f0       	push   $0xf013b29a
f012ac76:	e8 8a 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac7b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac7e:	e8 1a 1f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ac83:	29 c3                	sub    %eax,%ebx
f012ac85:	89 d8                	mov    %ebx,%eax
f012ac87:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ac8c:	74 17                	je     f012aca5 <test_kfreelast+0x14fd>
f012ac8e:	83 ec 04             	sub    $0x4,%esp
f012ac91:	68 1c b3 13 f0       	push   $0xf013b31c
f012ac96:	68 ab 0d 00 00       	push   $0xdab
f012ac9b:	68 9a b2 13 f0       	push   $0xf013b29a
f012aca0:	e8 60 55 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012aca5:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012acac:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012acaf:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012acb5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012acb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012acbf:	eb 0e                	jmp    f012accf <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012acc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012acc4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012acc7:	01 d0                	add    %edx,%eax
f012acc9:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012accc:	ff 45 f4             	incl   -0xc(%ebp)
f012accf:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012acd5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012acd8:	7f e7                	jg     f012acc1 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012acda:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012acde:	83 ec 08             	sub    $0x8,%esp
f012ace1:	ff 75 f0             	pushl  -0x10(%ebp)
f012ace4:	68 cc c2 13 f0       	push   $0xf013c2cc
f012ace9:	e8 20 60 fd ff       	call   f0100d0e <cprintf>
f012acee:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012acf1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012acf8:	e8 a0 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012acfd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad00:	e8 c3 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad05:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012ad08:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ad0e:	83 ec 0c             	sub    $0xc,%esp
f012ad11:	50                   	push   %eax
f012ad12:	e8 39 cc fd ff       	call   f0107950 <kfree>
f012ad17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad1a:	e8 a9 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad1f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad22:	74 1d                	je     f012ad41 <test_kfreelast+0x1599>
f012ad24:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad28:	75 17                	jne    f012ad41 <test_kfreelast+0x1599>
f012ad2a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad31:	83 ec 0c             	sub    $0xc,%esp
f012ad34:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ad39:	e8 d0 5f fd ff       	call   f0100d0e <cprintf>
f012ad3e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ad41:	e8 57 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ad46:	89 c2                	mov    %eax,%edx
f012ad48:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad4b:	29 c2                	sub    %eax,%edx
f012ad4d:	89 d0                	mov    %edx,%eax
f012ad4f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad54:	74 1d                	je     f012ad73 <test_kfreelast+0x15cb>
f012ad56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad5a:	75 17                	jne    f012ad73 <test_kfreelast+0x15cb>
f012ad5c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad63:	83 ec 0c             	sub    $0xc,%esp
f012ad66:	68 60 c3 13 f0       	push   $0xf013c360
f012ad6b:	e8 9e 5f fd ff       	call   f0100d0e <cprintf>
f012ad70:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad73:	e8 25 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ad78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad7b:	e8 48 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad80:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012ad83:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ad89:	83 ec 0c             	sub    $0xc,%esp
f012ad8c:	50                   	push   %eax
f012ad8d:	e8 be cb fd ff       	call   f0107950 <kfree>
f012ad92:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad95:	e8 2e 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad9a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad9d:	74 1d                	je     f012adbc <test_kfreelast+0x1614>
f012ad9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ada3:	75 17                	jne    f012adbc <test_kfreelast+0x1614>
f012ada5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adac:	83 ec 0c             	sub    $0xc,%esp
f012adaf:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012adb4:	e8 55 5f fd ff       	call   f0100d0e <cprintf>
f012adb9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012adbc:	e8 dc 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012adc1:	89 c2                	mov    %eax,%edx
f012adc3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012adc6:	29 c2                	sub    %eax,%edx
f012adc8:	89 d0                	mov    %edx,%eax
f012adca:	83 f8 08             	cmp    $0x8,%eax
f012adcd:	74 1d                	je     f012adec <test_kfreelast+0x1644>
f012adcf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012add3:	75 17                	jne    f012adec <test_kfreelast+0x1644>
f012add5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012addc:	83 ec 0c             	sub    $0xc,%esp
f012addf:	68 60 c3 13 f0       	push   $0xf013c360
f012ade4:	e8 25 5f fd ff       	call   f0100d0e <cprintf>
f012ade9:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012adec:	e8 ac 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012adf1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012adf4:	e8 cf 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012adf9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012adfc:	83 ec 0c             	sub    $0xc,%esp
f012adff:	68 00 28 00 00       	push   $0x2800
f012ae04:	e8 7c ca fd ff       	call   f0107885 <kmalloc>
f012ae09:	83 c4 10             	add    $0x10,%esp
f012ae0c:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ae12:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ae18:	89 c1                	mov    %eax,%ecx
f012ae1a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012ae21:	10 00 00 
f012ae24:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ae2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ae2f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012ae35:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ae3b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae40:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012ae46:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ae4c:	29 d0                	sub    %edx,%eax
f012ae4e:	89 c3                	mov    %eax,%ebx
f012ae50:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012ae57:	10 00 00 
f012ae5a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ae5f:	0f b6 d0             	movzbl %al,%edx
f012ae62:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ae68:	01 d0                	add    %edx,%eax
f012ae6a:	48                   	dec    %eax
f012ae6b:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012ae71:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ae77:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae7c:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012ae82:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ae88:	29 d0                	sub    %edx,%eax
f012ae8a:	01 c3                	add    %eax,%ebx
f012ae8c:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012ae93:	10 00 00 
f012ae96:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ae9b:	0f b6 c0             	movzbl %al,%eax
f012ae9e:	c1 e0 04             	shl    $0x4,%eax
f012aea1:	89 c2                	mov    %eax,%edx
f012aea3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012aea9:	01 d0                	add    %edx,%eax
f012aeab:	48                   	dec    %eax
f012aeac:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012aeb2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012aeb8:	ba 00 00 00 00       	mov    $0x0,%edx
f012aebd:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012aec3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012aec9:	29 d0                	sub    %edx,%eax
f012aecb:	01 d8                	add    %ebx,%eax
f012aecd:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012aed2:	39 c1                	cmp    %eax,%ecx
f012aed4:	74 1d                	je     f012aef3 <test_kfreelast+0x174b>
f012aed6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aeda:	75 17                	jne    f012aef3 <test_kfreelast+0x174b>
f012aedc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aee3:	83 ec 0c             	sub    $0xc,%esp
f012aee6:	68 98 c3 13 f0       	push   $0xf013c398
f012aeeb:	e8 1e 5e fd ff       	call   f0100d0e <cprintf>
f012aef0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aef3:	e8 d0 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aef8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aefb:	74 1d                	je     f012af1a <test_kfreelast+0x1772>
f012aefd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af01:	75 17                	jne    f012af1a <test_kfreelast+0x1772>
f012af03:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af0a:	83 ec 0c             	sub    $0xc,%esp
f012af0d:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012af12:	e8 f7 5d fd ff       	call   f0100d0e <cprintf>
f012af17:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012af1a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012af1d:	e8 7b 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af22:	29 c3                	sub    %eax,%ebx
f012af24:	89 d8                	mov    %ebx,%eax
f012af26:	83 f8 03             	cmp    $0x3,%eax
f012af29:	74 1d                	je     f012af48 <test_kfreelast+0x17a0>
f012af2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af2f:	75 17                	jne    f012af48 <test_kfreelast+0x17a0>
f012af31:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af38:	83 ec 0c             	sub    $0xc,%esp
f012af3b:	68 00 c4 13 f0       	push   $0xf013c400
f012af40:	e8 c9 5d fd ff       	call   f0100d0e <cprintf>
f012af45:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012af48:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012af4f:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012af52:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012af58:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012af5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012af62:	eb 0e                	jmp    f012af72 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012af64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012af67:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af6a:	01 d0                	add    %edx,%eax
f012af6c:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012af6f:	ff 45 f4             	incl   -0xc(%ebp)
f012af72:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012af78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af7b:	7f e7                	jg     f012af64 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012af7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af81:	75 17                	jne    f012af9a <test_kfreelast+0x17f2>
f012af83:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012af87:	83 ec 08             	sub    $0x8,%esp
f012af8a:	ff 75 f0             	pushl  -0x10(%ebp)
f012af8d:	68 cc c2 13 f0       	push   $0xf013c2cc
f012af92:	e8 77 5d fd ff       	call   f0100d0e <cprintf>
f012af97:	83 c4 10             	add    $0x10,%esp
f012af9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012afa1:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012afa7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012afaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012afb1:	eb 1e                	jmp    f012afd1 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012afb3:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012afb9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012afbc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012afbf:	01 c8                	add    %ecx,%eax
f012afc1:	8a 00                	mov    (%eax),%al
f012afc3:	0f be c0             	movsbl %al,%eax
f012afc6:	01 d0                	add    %edx,%eax
f012afc8:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012afce:	ff 45 f4             	incl   -0xc(%ebp)
f012afd1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012afd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012afda:	7f d7                	jg     f012afb3 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012afdc:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012afe2:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012afe8:	89 d0                	mov    %edx,%eax
f012afea:	01 c0                	add    %eax,%eax
f012afec:	01 d0                	add    %edx,%eax
f012afee:	c1 e0 02             	shl    $0x2,%eax
f012aff1:	39 c1                	cmp    %eax,%ecx
f012aff3:	74 1d                	je     f012b012 <test_kfreelast+0x186a>
f012aff5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aff9:	75 17                	jne    f012b012 <test_kfreelast+0x186a>
f012affb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b002:	83 ec 0c             	sub    $0xc,%esp
f012b005:	68 44 c4 13 f0       	push   $0xf013c444
f012b00a:	e8 ff 5c fd ff       	call   f0100d0e <cprintf>
f012b00f:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b012:	83 ec 0c             	sub    $0xc,%esp
f012b015:	6a 03                	push   $0x3
f012b017:	e8 21 20 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b01c:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b01f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b025:	05 00 30 00 00       	add    $0x3000,%eax
f012b02a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b02d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b034:	eb 3c                	jmp    f012b072 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b039:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b03c:	01 d0                	add    %edx,%eax
f012b03e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b041:	e8 e5 1f fe ff       	call   f010d02b <sys_rcr2>
f012b046:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b049:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b04c:	01 ca                	add    %ecx,%edx
f012b04e:	39 d0                	cmp    %edx,%eax
f012b050:	74 1d                	je     f012b06f <test_kfreelast+0x18c7>
f012b052:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b056:	75 17                	jne    f012b06f <test_kfreelast+0x18c7>
f012b058:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b05f:	83 ec 0c             	sub    $0xc,%esp
f012b062:	68 78 c4 13 f0       	push   $0xf013c478
f012b067:	e8 a2 5c fd ff       	call   f0100d0e <cprintf>
f012b06c:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b06f:	ff 45 f4             	incl   -0xc(%ebp)
f012b072:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b079:	7e bb                	jle    f012b036 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b07b:	83 ec 0c             	sub    $0xc,%esp
f012b07e:	6a 00                	push   $0x0
f012b080:	e8 b8 1f fe ff       	call   f010d03d <sys_bypassPageFault>
f012b085:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b088:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b08c:	75 17                	jne    f012b0a5 <test_kfreelast+0x18fd>
f012b08e:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b092:	83 ec 08             	sub    $0x8,%esp
f012b095:	ff 75 f0             	pushl  -0x10(%ebp)
f012b098:	68 cc c2 13 f0       	push   $0xf013c2cc
f012b09d:	e8 6c 5c fd ff       	call   f0100d0e <cprintf>
f012b0a2:	83 c4 10             	add    $0x10,%esp
f012b0a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b0ac:	e8 ec 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b0b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0b4:	e8 0f 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b0bc:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b0c2:	83 ec 0c             	sub    $0xc,%esp
f012b0c5:	50                   	push   %eax
f012b0c6:	e8 85 c8 fd ff       	call   f0107950 <kfree>
f012b0cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0ce:	e8 f5 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0d3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0d6:	74 1d                	je     f012b0f5 <test_kfreelast+0x194d>
f012b0d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0dc:	75 17                	jne    f012b0f5 <test_kfreelast+0x194d>
f012b0de:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0e5:	83 ec 0c             	sub    $0xc,%esp
f012b0e8:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b0ed:	e8 1c 5c fd ff       	call   f0100d0e <cprintf>
f012b0f2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b0f5:	e8 a3 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b0fa:	89 c2                	mov    %eax,%edx
f012b0fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b0ff:	29 c2                	sub    %eax,%edx
f012b101:	89 d0                	mov    %edx,%eax
f012b103:	83 f8 03             	cmp    $0x3,%eax
f012b106:	74 1d                	je     f012b125 <test_kfreelast+0x197d>
f012b108:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b10c:	75 17                	jne    f012b125 <test_kfreelast+0x197d>
f012b10e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b115:	83 ec 0c             	sub    $0xc,%esp
f012b118:	68 60 c3 13 f0       	push   $0xf013c360
f012b11d:	e8 ec 5b fd ff       	call   f0100d0e <cprintf>
f012b122:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b125:	e8 73 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b12a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b12d:	e8 96 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b132:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b135:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b13b:	83 ec 0c             	sub    $0xc,%esp
f012b13e:	50                   	push   %eax
f012b13f:	e8 0c c8 fd ff       	call   f0107950 <kfree>
f012b144:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b147:	e8 7c 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b14c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b14f:	74 1d                	je     f012b16e <test_kfreelast+0x19c6>
f012b151:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b155:	75 17                	jne    f012b16e <test_kfreelast+0x19c6>
f012b157:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b15e:	83 ec 0c             	sub    $0xc,%esp
f012b161:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b166:	e8 a3 5b fd ff       	call   f0100d0e <cprintf>
f012b16b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b16e:	e8 2a 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b173:	89 c2                	mov    %eax,%edx
f012b175:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b178:	29 c2                	sub    %eax,%edx
f012b17a:	89 d0                	mov    %edx,%eax
f012b17c:	83 f8 04             	cmp    $0x4,%eax
f012b17f:	74 1d                	je     f012b19e <test_kfreelast+0x19f6>
f012b181:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b185:	75 17                	jne    f012b19e <test_kfreelast+0x19f6>
f012b187:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b18e:	83 ec 0c             	sub    $0xc,%esp
f012b191:	68 60 c3 13 f0       	push   $0xf013c360
f012b196:	e8 73 5b fd ff       	call   f0100d0e <cprintf>
f012b19b:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b19e:	e8 fa 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b1a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1a6:	e8 1d 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b1ae:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b1b4:	83 ec 0c             	sub    $0xc,%esp
f012b1b7:	50                   	push   %eax
f012b1b8:	e8 93 c7 fd ff       	call   f0107950 <kfree>
f012b1bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1c0:	e8 03 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1c5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1c8:	74 1d                	je     f012b1e7 <test_kfreelast+0x1a3f>
f012b1ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1ce:	75 17                	jne    f012b1e7 <test_kfreelast+0x1a3f>
f012b1d0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1d7:	83 ec 0c             	sub    $0xc,%esp
f012b1da:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b1df:	e8 2a 5b fd ff       	call   f0100d0e <cprintf>
f012b1e4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1e7:	e8 b1 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b1ec:	89 c2                	mov    %eax,%edx
f012b1ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b1f1:	29 c2                	sub    %eax,%edx
f012b1f3:	89 d0                	mov    %edx,%eax
f012b1f5:	83 f8 05             	cmp    $0x5,%eax
f012b1f8:	74 1d                	je     f012b217 <test_kfreelast+0x1a6f>
f012b1fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1fe:	75 17                	jne    f012b217 <test_kfreelast+0x1a6f>
f012b200:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b207:	83 ec 0c             	sub    $0xc,%esp
f012b20a:	68 60 c3 13 f0       	push   $0xf013c360
f012b20f:	e8 fa 5a fd ff       	call   f0100d0e <cprintf>
f012b214:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b217:	e8 81 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b21c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b21f:	e8 a4 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b224:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b227:	83 ec 0c             	sub    $0xc,%esp
f012b22a:	68 00 c8 00 00       	push   $0xc800
f012b22f:	e8 51 c6 fd ff       	call   f0107885 <kmalloc>
f012b234:	83 c4 10             	add    $0x10,%esp
f012b237:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b23d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b243:	89 c1                	mov    %eax,%ecx
f012b245:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b24c:	10 00 00 
f012b24f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b255:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b25a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b260:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b266:	ba 00 00 00 00       	mov    $0x0,%edx
f012b26b:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b271:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b277:	29 d0                	sub    %edx,%eax
f012b279:	89 c3                	mov    %eax,%ebx
f012b27b:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b282:	10 00 00 
f012b285:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b28a:	0f b6 d0             	movzbl %al,%edx
f012b28d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b293:	01 d0                	add    %edx,%eax
f012b295:	48                   	dec    %eax
f012b296:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b29c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b2a2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2a7:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b2ad:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b2b3:	29 d0                	sub    %edx,%eax
f012b2b5:	01 c3                	add    %eax,%ebx
f012b2b7:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b2be:	10 00 00 
f012b2c1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b2c6:	0f b6 c0             	movzbl %al,%eax
f012b2c9:	c1 e0 04             	shl    $0x4,%eax
f012b2cc:	89 c2                	mov    %eax,%edx
f012b2ce:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b2d4:	01 d0                	add    %edx,%eax
f012b2d6:	48                   	dec    %eax
f012b2d7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b2dd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b2e3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2e8:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b2ee:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b2f4:	29 d0                	sub    %edx,%eax
f012b2f6:	01 d8                	add    %ebx,%eax
f012b2f8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b2fd:	39 c1                	cmp    %eax,%ecx
f012b2ff:	74 1d                	je     f012b31e <test_kfreelast+0x1b76>
f012b301:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b305:	75 17                	jne    f012b31e <test_kfreelast+0x1b76>
f012b307:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b30e:	83 ec 0c             	sub    $0xc,%esp
f012b311:	68 98 c3 13 f0       	push   $0xf013c398
f012b316:	e8 f3 59 fd ff       	call   f0100d0e <cprintf>
f012b31b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b31e:	e8 a5 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b323:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b326:	74 1d                	je     f012b345 <test_kfreelast+0x1b9d>
f012b328:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b32c:	75 17                	jne    f012b345 <test_kfreelast+0x1b9d>
f012b32e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b335:	83 ec 0c             	sub    $0xc,%esp
f012b338:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b33d:	e8 cc 59 fd ff       	call   f0100d0e <cprintf>
f012b342:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b345:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b348:	e8 50 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b34d:	29 c3                	sub    %eax,%ebx
f012b34f:	89 d8                	mov    %ebx,%eax
f012b351:	83 f8 0d             	cmp    $0xd,%eax
f012b354:	74 1d                	je     f012b373 <test_kfreelast+0x1bcb>
f012b356:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b35a:	75 17                	jne    f012b373 <test_kfreelast+0x1bcb>
f012b35c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b363:	83 ec 0c             	sub    $0xc,%esp
f012b366:	68 00 c4 13 f0       	push   $0xf013c400
f012b36b:	e8 9e 59 fd ff       	call   f0100d0e <cprintf>
f012b370:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b373:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b37a:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b37d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b383:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b386:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b38d:	eb 0e                	jmp    f012b39d <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b38f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b392:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b395:	01 d0                	add    %edx,%eax
f012b397:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b39a:	ff 45 f4             	incl   -0xc(%ebp)
f012b39d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b3a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b3a6:	7f e7                	jg     f012b38f <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b3a8:	e8 f0 17 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b3ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3b0:	e8 13 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b3b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b3b8:	83 ec 0c             	sub    $0xc,%esp
f012b3bb:	68 00 fc 2f 00       	push   $0x2ffc00
f012b3c0:	e8 c0 c4 fd ff       	call   f0107885 <kmalloc>
f012b3c5:	83 c4 10             	add    $0x10,%esp
f012b3c8:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b3ce:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b3d4:	89 c1                	mov    %eax,%ecx
f012b3d6:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b3dd:	10 00 00 
f012b3e0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b3e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b3eb:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b3f1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b3f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3fc:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b402:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b408:	29 d0                	sub    %edx,%eax
f012b40a:	89 c3                	mov    %eax,%ebx
f012b40c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b413:	10 00 00 
f012b416:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b41b:	0f b6 d0             	movzbl %al,%edx
f012b41e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b424:	01 d0                	add    %edx,%eax
f012b426:	48                   	dec    %eax
f012b427:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b42d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b433:	ba 00 00 00 00       	mov    $0x0,%edx
f012b438:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b43e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b444:	29 d0                	sub    %edx,%eax
f012b446:	01 c3                	add    %eax,%ebx
f012b448:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b44f:	10 00 00 
f012b452:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b457:	0f b6 c0             	movzbl %al,%eax
f012b45a:	c1 e0 04             	shl    $0x4,%eax
f012b45d:	89 c2                	mov    %eax,%edx
f012b45f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b465:	01 d0                	add    %edx,%eax
f012b467:	48                   	dec    %eax
f012b468:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b46e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b474:	ba 00 00 00 00       	mov    $0x0,%edx
f012b479:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b47f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b485:	29 d0                	sub    %edx,%eax
f012b487:	01 d8                	add    %ebx,%eax
f012b489:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b48e:	39 c1                	cmp    %eax,%ecx
f012b490:	74 1d                	je     f012b4af <test_kfreelast+0x1d07>
f012b492:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b496:	75 17                	jne    f012b4af <test_kfreelast+0x1d07>
f012b498:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b49f:	83 ec 0c             	sub    $0xc,%esp
f012b4a2:	68 98 c3 13 f0       	push   $0xf013c398
f012b4a7:	e8 62 58 fd ff       	call   f0100d0e <cprintf>
f012b4ac:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b4af:	e8 14 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4b7:	74 1d                	je     f012b4d6 <test_kfreelast+0x1d2e>
f012b4b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4bd:	75 17                	jne    f012b4d6 <test_kfreelast+0x1d2e>
f012b4bf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4c6:	83 ec 0c             	sub    $0xc,%esp
f012b4c9:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b4ce:	e8 3b 58 fd ff       	call   f0100d0e <cprintf>
f012b4d3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b4d6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b4d9:	e8 bf 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b4de:	29 c3                	sub    %eax,%ebx
f012b4e0:	89 d8                	mov    %ebx,%eax
f012b4e2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b4e7:	74 1d                	je     f012b506 <test_kfreelast+0x1d5e>
f012b4e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4ed:	75 17                	jne    f012b506 <test_kfreelast+0x1d5e>
f012b4ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4f6:	83 ec 0c             	sub    $0xc,%esp
f012b4f9:	68 00 c4 13 f0       	push   $0xf013c400
f012b4fe:	e8 0b 58 fd ff       	call   f0100d0e <cprintf>
f012b503:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b506:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b50d:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b510:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b516:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b519:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b520:	eb 0e                	jmp    f012b530 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b522:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b525:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b528:	01 d0                	add    %edx,%eax
f012b52a:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b52d:	ff 45 f4             	incl   -0xc(%ebp)
f012b530:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b536:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b539:	7f e7                	jg     f012b522 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b53b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b53f:	75 17                	jne    f012b558 <test_kfreelast+0x1db0>
f012b541:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b545:	83 ec 08             	sub    $0x8,%esp
f012b548:	ff 75 f0             	pushl  -0x10(%ebp)
f012b54b:	68 cc c2 13 f0       	push   $0xf013c2cc
f012b550:	e8 b9 57 fd ff       	call   f0100d0e <cprintf>
f012b555:	83 c4 10             	add    $0x10,%esp
f012b558:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b55f:	e8 39 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b564:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b567:	e8 5c 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b56c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b56f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b575:	83 ec 0c             	sub    $0xc,%esp
f012b578:	50                   	push   %eax
f012b579:	e8 d2 c3 fd ff       	call   f0107950 <kfree>
f012b57e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b581:	e8 42 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b586:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b589:	74 1d                	je     f012b5a8 <test_kfreelast+0x1e00>
f012b58b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b58f:	75 17                	jne    f012b5a8 <test_kfreelast+0x1e00>
f012b591:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b598:	83 ec 0c             	sub    $0xc,%esp
f012b59b:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b5a0:	e8 69 57 fd ff       	call   f0100d0e <cprintf>
f012b5a5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b5a8:	e8 f0 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b5ad:	89 c2                	mov    %eax,%edx
f012b5af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5b2:	29 c2                	sub    %eax,%edx
f012b5b4:	89 d0                	mov    %edx,%eax
f012b5b6:	83 f8 0d             	cmp    $0xd,%eax
f012b5b9:	74 1d                	je     f012b5d8 <test_kfreelast+0x1e30>
f012b5bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5bf:	75 17                	jne    f012b5d8 <test_kfreelast+0x1e30>
f012b5c1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5c8:	83 ec 0c             	sub    $0xc,%esp
f012b5cb:	68 60 c3 13 f0       	push   $0xf013c360
f012b5d0:	e8 39 57 fd ff       	call   f0100d0e <cprintf>
f012b5d5:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b5d8:	83 ec 0c             	sub    $0xc,%esp
f012b5db:	6a 03                	push   $0x3
f012b5dd:	e8 5b 1a fe ff       	call   f010d03d <sys_bypassPageFault>
f012b5e2:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b5e5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b5eb:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b5ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b5f5:	eb 3c                	jmp    f012b633 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b5f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b5fa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b5fd:	01 d0                	add    %edx,%eax
f012b5ff:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b602:	e8 24 1a fe ff       	call   f010d02b <sys_rcr2>
f012b607:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b60a:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b60d:	01 ca                	add    %ecx,%edx
f012b60f:	39 d0                	cmp    %edx,%eax
f012b611:	74 1d                	je     f012b630 <test_kfreelast+0x1e88>
f012b613:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b617:	75 17                	jne    f012b630 <test_kfreelast+0x1e88>
f012b619:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b620:	83 ec 0c             	sub    $0xc,%esp
f012b623:	68 78 c4 13 f0       	push   $0xf013c478
f012b628:	e8 e1 56 fd ff       	call   f0100d0e <cprintf>
f012b62d:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b630:	ff 45 f4             	incl   -0xc(%ebp)
f012b633:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b63a:	7e bb                	jle    f012b5f7 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b63c:	83 ec 0c             	sub    $0xc,%esp
f012b63f:	6a 00                	push   $0x0
f012b641:	e8 f7 19 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b646:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b649:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b64f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b652:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b659:	eb 1e                	jmp    f012b679 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b65b:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b661:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b664:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b667:	01 c8                	add    %ecx,%eax
f012b669:	8a 00                	mov    (%eax),%al
f012b66b:	0f be c0             	movsbl %al,%eax
f012b66e:	01 d0                	add    %edx,%eax
f012b670:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b676:	ff 45 f4             	incl   -0xc(%ebp)
f012b679:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b67f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b682:	7f d7                	jg     f012b65b <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b684:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b68a:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b690:	89 d0                	mov    %edx,%eax
f012b692:	01 c0                	add    %eax,%eax
f012b694:	01 d0                	add    %edx,%eax
f012b696:	01 c0                	add    %eax,%eax
f012b698:	01 d0                	add    %edx,%eax
f012b69a:	01 c0                	add    %eax,%eax
f012b69c:	39 c1                	cmp    %eax,%ecx
f012b69e:	74 1d                	je     f012b6bd <test_kfreelast+0x1f15>
f012b6a0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6a4:	75 17                	jne    f012b6bd <test_kfreelast+0x1f15>
f012b6a6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6ad:	83 ec 0c             	sub    $0xc,%esp
f012b6b0:	68 44 c4 13 f0       	push   $0xf013c444
f012b6b5:	e8 54 56 fd ff       	call   f0100d0e <cprintf>
f012b6ba:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b6bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6c1:	75 17                	jne    f012b6da <test_kfreelast+0x1f32>
f012b6c3:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b6c7:	83 ec 08             	sub    $0x8,%esp
f012b6ca:	ff 75 f0             	pushl  -0x10(%ebp)
f012b6cd:	68 cc c2 13 f0       	push   $0xf013c2cc
f012b6d2:	e8 37 56 fd ff       	call   f0100d0e <cprintf>
f012b6d7:	83 c4 10             	add    $0x10,%esp
f012b6da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6e1:	e8 b7 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b6e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6e9:	e8 da 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b6f1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b6f7:	83 ec 0c             	sub    $0xc,%esp
f012b6fa:	50                   	push   %eax
f012b6fb:	e8 50 c2 fd ff       	call   f0107950 <kfree>
f012b700:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b703:	e8 c0 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b708:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b70b:	74 1d                	je     f012b72a <test_kfreelast+0x1f82>
f012b70d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b711:	75 17                	jne    f012b72a <test_kfreelast+0x1f82>
f012b713:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b71a:	83 ec 0c             	sub    $0xc,%esp
f012b71d:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b722:	e8 e7 55 fd ff       	call   f0100d0e <cprintf>
f012b727:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b72a:	e8 6e 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b72f:	89 c2                	mov    %eax,%edx
f012b731:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b734:	29 c2                	sub    %eax,%edx
f012b736:	89 d0                	mov    %edx,%eax
f012b738:	83 f8 02             	cmp    $0x2,%eax
f012b73b:	74 1d                	je     f012b75a <test_kfreelast+0x1fb2>
f012b73d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b741:	75 17                	jne    f012b75a <test_kfreelast+0x1fb2>
f012b743:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b74a:	83 ec 0c             	sub    $0xc,%esp
f012b74d:	68 60 c3 13 f0       	push   $0xf013c360
f012b752:	e8 b7 55 fd ff       	call   f0100d0e <cprintf>
f012b757:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b75a:	e8 3e 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b75f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b762:	e8 61 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b767:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b76a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b770:	83 ec 0c             	sub    $0xc,%esp
f012b773:	50                   	push   %eax
f012b774:	e8 d7 c1 fd ff       	call   f0107950 <kfree>
f012b779:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b77c:	e8 47 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b781:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b784:	74 1d                	je     f012b7a3 <test_kfreelast+0x1ffb>
f012b786:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b78a:	75 17                	jne    f012b7a3 <test_kfreelast+0x1ffb>
f012b78c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b793:	83 ec 0c             	sub    $0xc,%esp
f012b796:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b79b:	e8 6e 55 fd ff       	call   f0100d0e <cprintf>
f012b7a0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b7a3:	e8 f5 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b7a8:	89 c2                	mov    %eax,%edx
f012b7aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b7ad:	29 c2                	sub    %eax,%edx
f012b7af:	89 d0                	mov    %edx,%eax
f012b7b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b7b6:	74 1d                	je     f012b7d5 <test_kfreelast+0x202d>
f012b7b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7bc:	75 17                	jne    f012b7d5 <test_kfreelast+0x202d>
f012b7be:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7c5:	83 ec 0c             	sub    $0xc,%esp
f012b7c8:	68 60 c3 13 f0       	push   $0xf013c360
f012b7cd:	e8 3c 55 fd ff       	call   f0100d0e <cprintf>
f012b7d2:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b7d5:	e8 c3 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b7da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b7dd:	e8 e6 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b7e5:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b7eb:	83 ec 0c             	sub    $0xc,%esp
f012b7ee:	50                   	push   %eax
f012b7ef:	e8 5c c1 fd ff       	call   f0107950 <kfree>
f012b7f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7f7:	e8 cc 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7fc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7ff:	74 1d                	je     f012b81e <test_kfreelast+0x2076>
f012b801:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b805:	75 17                	jne    f012b81e <test_kfreelast+0x2076>
f012b807:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b80e:	83 ec 0c             	sub    $0xc,%esp
f012b811:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b816:	e8 f3 54 fd ff       	call   f0100d0e <cprintf>
f012b81b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b81e:	e8 7a 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b823:	89 c2                	mov    %eax,%edx
f012b825:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b828:	29 c2                	sub    %eax,%edx
f012b82a:	89 d0                	mov    %edx,%eax
f012b82c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b831:	74 1d                	je     f012b850 <test_kfreelast+0x20a8>
f012b833:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b837:	75 17                	jne    f012b850 <test_kfreelast+0x20a8>
f012b839:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b840:	83 ec 0c             	sub    $0xc,%esp
f012b843:	68 60 c3 13 f0       	push   $0xf013c360
f012b848:	e8 c1 54 fd ff       	call   f0100d0e <cprintf>
f012b84d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b850:	e8 48 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b855:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b858:	e8 6b 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b85d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b860:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b866:	83 ec 0c             	sub    $0xc,%esp
f012b869:	50                   	push   %eax
f012b86a:	e8 e1 c0 fd ff       	call   f0107950 <kfree>
f012b86f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b872:	e8 51 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b877:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b87a:	74 1d                	je     f012b899 <test_kfreelast+0x20f1>
f012b87c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b880:	75 17                	jne    f012b899 <test_kfreelast+0x20f1>
f012b882:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b889:	83 ec 0c             	sub    $0xc,%esp
f012b88c:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b891:	e8 78 54 fd ff       	call   f0100d0e <cprintf>
f012b896:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b899:	e8 ff 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b89e:	89 c2                	mov    %eax,%edx
f012b8a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b8a3:	29 c2                	sub    %eax,%edx
f012b8a5:	89 d0                	mov    %edx,%eax
f012b8a7:	83 f8 01             	cmp    $0x1,%eax
f012b8aa:	74 1d                	je     f012b8c9 <test_kfreelast+0x2121>
f012b8ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8b0:	75 17                	jne    f012b8c9 <test_kfreelast+0x2121>
f012b8b2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8b9:	83 ec 0c             	sub    $0xc,%esp
f012b8bc:	68 60 c3 13 f0       	push   $0xf013c360
f012b8c1:	e8 48 54 fd ff       	call   f0100d0e <cprintf>
f012b8c6:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b8c9:	e8 cf 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8d1:	e8 f2 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b8d9:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b8df:	83 ec 0c             	sub    $0xc,%esp
f012b8e2:	50                   	push   %eax
f012b8e3:	e8 68 c0 fd ff       	call   f0107950 <kfree>
f012b8e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8eb:	e8 d8 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8f0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b8f3:	74 1d                	je     f012b912 <test_kfreelast+0x216a>
f012b8f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8f9:	75 17                	jne    f012b912 <test_kfreelast+0x216a>
f012b8fb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b902:	83 ec 0c             	sub    $0xc,%esp
f012b905:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012b90a:	e8 ff 53 fd ff       	call   f0100d0e <cprintf>
f012b90f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b912:	e8 86 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b917:	89 c2                	mov    %eax,%edx
f012b919:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b91c:	29 c2                	sub    %eax,%edx
f012b91e:	89 d0                	mov    %edx,%eax
f012b920:	83 f8 01             	cmp    $0x1,%eax
f012b923:	74 1d                	je     f012b942 <test_kfreelast+0x219a>
f012b925:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b929:	75 17                	jne    f012b942 <test_kfreelast+0x219a>
f012b92b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b932:	83 ec 0c             	sub    $0xc,%esp
f012b935:	68 60 c3 13 f0       	push   $0xf013c360
f012b93a:	e8 cf 53 fd ff       	call   f0100d0e <cprintf>
f012b93f:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b942:	e8 56 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b947:	89 c2                	mov    %eax,%edx
f012b949:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b94c:	39 c2                	cmp    %eax,%edx
f012b94e:	74 1d                	je     f012b96d <test_kfreelast+0x21c5>
f012b950:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b954:	75 17                	jne    f012b96d <test_kfreelast+0x21c5>
f012b956:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b95d:	83 ec 0c             	sub    $0xc,%esp
f012b960:	68 c0 c4 13 f0       	push   $0xf013c4c0
f012b965:	e8 a4 53 fd ff       	call   f0100d0e <cprintf>
f012b96a:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b96d:	83 ec 0c             	sub    $0xc,%esp
f012b970:	6a 03                	push   $0x3
f012b972:	e8 c6 16 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b977:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b97a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b981:	e9 8e 00 00 00       	jmp    f012ba14 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b989:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b990:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b993:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b996:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b999:	e8 8d 16 fe ff       	call   f010d02b <sys_rcr2>
f012b99e:	89 c2                	mov    %eax,%edx
f012b9a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9a3:	39 c2                	cmp    %eax,%edx
f012b9a5:	74 1d                	je     f012b9c4 <test_kfreelast+0x221c>
f012b9a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9ab:	75 17                	jne    f012b9c4 <test_kfreelast+0x221c>
f012b9ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9b4:	83 ec 0c             	sub    $0xc,%esp
f012b9b7:	68 78 c4 13 f0       	push   $0xf013c478
f012b9bc:	e8 4d 53 fd ff       	call   f0100d0e <cprintf>
f012b9c1:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b9c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b9c7:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b9ce:	89 c2                	mov    %eax,%edx
f012b9d0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9d3:	01 d0                	add    %edx,%eax
f012b9d5:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b9d8:	e8 4e 16 fe ff       	call   f010d02b <sys_rcr2>
f012b9dd:	89 c2                	mov    %eax,%edx
f012b9df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b9e2:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b9e9:	89 c1                	mov    %eax,%ecx
f012b9eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9ee:	01 c8                	add    %ecx,%eax
f012b9f0:	39 c2                	cmp    %eax,%edx
f012b9f2:	74 1d                	je     f012ba11 <test_kfreelast+0x2269>
f012b9f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9f8:	75 17                	jne    f012ba11 <test_kfreelast+0x2269>
f012b9fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba01:	83 ec 0c             	sub    $0xc,%esp
f012ba04:	68 78 c4 13 f0       	push   $0xf013c478
f012ba09:	e8 00 53 fd ff       	call   f0100d0e <cprintf>
f012ba0e:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012ba11:	ff 45 f4             	incl   -0xc(%ebp)
f012ba14:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012ba18:	0f 8e 68 ff ff ff    	jle    f012b986 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ba1e:	83 ec 0c             	sub    $0xc,%esp
f012ba21:	6a 00                	push   $0x0
f012ba23:	e8 15 16 fe ff       	call   f010d03d <sys_bypassPageFault>
f012ba28:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ba2b:	e8 6d 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba33:	e8 90 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba38:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012ba3b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012ba41:	83 ec 0c             	sub    $0xc,%esp
f012ba44:	50                   	push   %eax
f012ba45:	e8 06 bf fd ff       	call   f0107950 <kfree>
f012ba4a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba4d:	e8 76 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba52:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba55:	74 1d                	je     f012ba74 <test_kfreelast+0x22cc>
f012ba57:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba5b:	75 17                	jne    f012ba74 <test_kfreelast+0x22cc>
f012ba5d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba64:	83 ec 0c             	sub    $0xc,%esp
f012ba67:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ba6c:	e8 9d 52 fd ff       	call   f0100d0e <cprintf>
f012ba71:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ba74:	e8 24 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba79:	89 c2                	mov    %eax,%edx
f012ba7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba7e:	39 c2                	cmp    %eax,%edx
f012ba80:	74 1d                	je     f012ba9f <test_kfreelast+0x22f7>
f012ba82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba86:	75 17                	jne    f012ba9f <test_kfreelast+0x22f7>
f012ba88:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba8f:	83 ec 0c             	sub    $0xc,%esp
f012ba92:	68 f8 c4 13 f0       	push   $0xf013c4f8
f012ba97:	e8 72 52 fd ff       	call   f0100d0e <cprintf>
f012ba9c:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba9f:	e8 f9 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012baa4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012baa7:	e8 1c 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012baac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012baaf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bab5:	83 ec 0c             	sub    $0xc,%esp
f012bab8:	50                   	push   %eax
f012bab9:	e8 92 be fd ff       	call   f0107950 <kfree>
f012babe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bac1:	e8 02 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bac6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bac9:	74 1d                	je     f012bae8 <test_kfreelast+0x2340>
f012bacb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bacf:	75 17                	jne    f012bae8 <test_kfreelast+0x2340>
f012bad1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bad8:	83 ec 0c             	sub    $0xc,%esp
f012badb:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012bae0:	e8 29 52 fd ff       	call   f0100d0e <cprintf>
f012bae5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bae8:	e8 b0 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012baed:	89 c2                	mov    %eax,%edx
f012baef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012baf2:	39 c2                	cmp    %eax,%edx
f012baf4:	74 1d                	je     f012bb13 <test_kfreelast+0x236b>
f012baf6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bafa:	75 17                	jne    f012bb13 <test_kfreelast+0x236b>
f012bafc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb03:	83 ec 0c             	sub    $0xc,%esp
f012bb06:	68 f8 c4 13 f0       	push   $0xf013c4f8
f012bb0b:	e8 fe 51 fd ff       	call   f0100d0e <cprintf>
f012bb10:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb13:	e8 85 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb18:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb1b:	e8 a8 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb20:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bb23:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bb29:	83 ec 0c             	sub    $0xc,%esp
f012bb2c:	50                   	push   %eax
f012bb2d:	e8 1e be fd ff       	call   f0107950 <kfree>
f012bb32:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb35:	e8 8e 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb3a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb3d:	74 1d                	je     f012bb5c <test_kfreelast+0x23b4>
f012bb3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb43:	75 17                	jne    f012bb5c <test_kfreelast+0x23b4>
f012bb45:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb4c:	83 ec 0c             	sub    $0xc,%esp
f012bb4f:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012bb54:	e8 b5 51 fd ff       	call   f0100d0e <cprintf>
f012bb59:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bb5c:	e8 3c 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb61:	89 c2                	mov    %eax,%edx
f012bb63:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb66:	39 c2                	cmp    %eax,%edx
f012bb68:	74 1d                	je     f012bb87 <test_kfreelast+0x23df>
f012bb6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb6e:	75 17                	jne    f012bb87 <test_kfreelast+0x23df>
f012bb70:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb77:	83 ec 0c             	sub    $0xc,%esp
f012bb7a:	68 f8 c4 13 f0       	push   $0xf013c4f8
f012bb7f:	e8 8a 51 fd ff       	call   f0100d0e <cprintf>
f012bb84:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012bb87:	e8 11 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb8c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb8f:	e8 34 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb94:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012bb97:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012bb9d:	83 ec 0c             	sub    $0xc,%esp
f012bba0:	50                   	push   %eax
f012bba1:	e8 aa bd fd ff       	call   f0107950 <kfree>
f012bba6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bba9:	e8 1a 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbae:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbb1:	74 1d                	je     f012bbd0 <test_kfreelast+0x2428>
f012bbb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbb7:	75 17                	jne    f012bbd0 <test_kfreelast+0x2428>
f012bbb9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbc0:	83 ec 0c             	sub    $0xc,%esp
f012bbc3:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012bbc8:	e8 41 51 fd ff       	call   f0100d0e <cprintf>
f012bbcd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bbd0:	e8 c8 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bbd5:	89 c2                	mov    %eax,%edx
f012bbd7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bbda:	39 c2                	cmp    %eax,%edx
f012bbdc:	74 1d                	je     f012bbfb <test_kfreelast+0x2453>
f012bbde:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbe2:	75 17                	jne    f012bbfb <test_kfreelast+0x2453>
f012bbe4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbeb:	83 ec 0c             	sub    $0xc,%esp
f012bbee:	68 f8 c4 13 f0       	push   $0xf013c4f8
f012bbf3:	e8 16 51 fd ff       	call   f0100d0e <cprintf>
f012bbf8:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bbfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbff:	75 17                	jne    f012bc18 <test_kfreelast+0x2470>
f012bc01:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012bc05:	83 ec 08             	sub    $0x8,%esp
f012bc08:	ff 75 f0             	pushl  -0x10(%ebp)
f012bc0b:	68 cc c2 13 f0       	push   $0xf013c2cc
f012bc10:	e8 f9 50 fd ff       	call   f0100d0e <cprintf>
f012bc15:	83 c4 10             	add    $0x10,%esp
f012bc18:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012bc1f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012bc24:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bc27:	5b                   	pop    %ebx
f012bc28:	5f                   	pop    %edi
f012bc29:	5d                   	pop    %ebp
f012bc2a:	c3                   	ret    

f012bc2b <test_krealloc>:

int test_krealloc() {
f012bc2b:	55                   	push   %ebp
f012bc2c:	89 e5                	mov    %esp,%ebp
f012bc2e:	57                   	push   %edi
f012bc2f:	53                   	push   %ebx
f012bc30:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012bc36:	83 ec 0c             	sub    $0xc,%esp
f012bc39:	68 dc b1 13 f0       	push   $0xf013b1dc
f012bc3e:	e8 cb 50 fd ff       	call   f0100d0e <cprintf>
f012bc43:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bc46:	83 ec 0c             	sub    $0xc,%esp
f012bc49:	68 0c b2 13 f0       	push   $0xf013b20c
f012bc4e:	e8 bb 50 fd ff       	call   f0100d0e <cprintf>
f012bc53:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bc56:	83 ec 0c             	sub    $0xc,%esp
f012bc59:	68 dc b1 13 f0       	push   $0xf013b1dc
f012bc5e:	e8 ab 50 fd ff       	call   f0100d0e <cprintf>
f012bc63:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bc66:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bc6a:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bc6e:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bc74:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bc7a:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bc81:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bc88:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012bc8e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc93:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc98:	89 d7                	mov    %edx,%edi
f012bc9a:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bc9c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bca3:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012bca9:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bcae:	b8 00 00 00 00       	mov    $0x0,%eax
f012bcb3:	89 d7                	mov    %edx,%edi
f012bcb5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bcb7:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012bcbd:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bcc2:	b8 00 00 00 00       	mov    $0x0,%eax
f012bcc7:	89 d7                	mov    %edx,%edi
f012bcc9:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bccb:	e8 cd 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bcd0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bcd3:	83 ec 08             	sub    $0x8,%esp
f012bcd6:	68 00 fc 0f 00       	push   $0xffc00
f012bcdb:	6a 00                	push   $0x0
f012bcdd:	e8 63 be fd ff       	call   f0107b45 <krealloc>
f012bce2:	83 c4 10             	add    $0x10,%esp
f012bce5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bceb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bcf1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bcf6:	77 17                	ja     f012bd0f <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bcf8:	83 ec 04             	sub    $0x4,%esp
f012bcfb:	68 40 c5 13 f0       	push   $0xf013c540
f012bd00:	68 e2 0e 00 00       	push   $0xee2
f012bd05:	68 9a b2 13 f0       	push   $0xf013b29a
f012bd0a:	e8 f6 44 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bd0f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bd15:	89 c1                	mov    %eax,%ecx
f012bd17:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bd1e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bd21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bd26:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bd29:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd2c:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd31:	f7 75 b4             	divl   -0x4c(%ebp)
f012bd34:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd37:	29 d0                	sub    %edx,%eax
f012bd39:	89 c3                	mov    %eax,%ebx
f012bd3b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bd42:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bd47:	0f b6 d0             	movzbl %al,%edx
f012bd4a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bd4d:	01 d0                	add    %edx,%eax
f012bd4f:	48                   	dec    %eax
f012bd50:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bd53:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd56:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd5b:	f7 75 ac             	divl   -0x54(%ebp)
f012bd5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd61:	29 d0                	sub    %edx,%eax
f012bd63:	01 c3                	add    %eax,%ebx
f012bd65:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bd6c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bd71:	0f b6 c0             	movzbl %al,%eax
f012bd74:	c1 e0 04             	shl    $0x4,%eax
f012bd77:	89 c2                	mov    %eax,%edx
f012bd79:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012bd7c:	01 d0                	add    %edx,%eax
f012bd7e:	48                   	dec    %eax
f012bd7f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bd82:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bd85:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd8a:	f7 75 a4             	divl   -0x5c(%ebp)
f012bd8d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bd90:	29 d0                	sub    %edx,%eax
f012bd92:	01 d8                	add    %ebx,%eax
f012bd94:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bd99:	39 c1                	cmp    %eax,%ecx
f012bd9b:	74 17                	je     f012bdb4 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012bd9d:	83 ec 04             	sub    $0x4,%esp
f012bda0:	68 7c c5 13 f0       	push   $0xf013c57c
f012bda5:	68 e4 0e 00 00       	push   $0xee4
f012bdaa:	68 9a b2 13 f0       	push   $0xf013b29a
f012bdaf:	e8 51 44 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bdb4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bdb7:	e8 e1 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bdbc:	29 c3                	sub    %eax,%ebx
f012bdbe:	89 d8                	mov    %ebx,%eax
f012bdc0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bdc5:	74 17                	je     f012bdde <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012bdc7:	83 ec 04             	sub    $0x4,%esp
f012bdca:	68 ae c5 13 f0       	push   $0xf013c5ae
f012bdcf:	68 e7 0e 00 00       	push   $0xee7
f012bdd4:	68 9a b2 13 f0       	push   $0xf013b29a
f012bdd9:	e8 27 44 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bdde:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012bde5:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bde8:	e8 b0 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bded:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bdf0:	83 ec 08             	sub    $0x8,%esp
f012bdf3:	68 00 fc 0f 00       	push   $0xffc00
f012bdf8:	6a 00                	push   $0x0
f012bdfa:	e8 46 bd fd ff       	call   f0107b45 <krealloc>
f012bdff:	83 c4 10             	add    $0x10,%esp
f012be02:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012be08:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012be0e:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012be13:	77 17                	ja     f012be2c <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be15:	83 ec 04             	sub    $0x4,%esp
f012be18:	68 40 c5 13 f0       	push   $0xf013c540
f012be1d:	68 ef 0e 00 00       	push   $0xeef
f012be22:	68 9a b2 13 f0       	push   $0xf013b29a
f012be27:	e8 d9 43 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012be2c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012be32:	89 c1                	mov    %eax,%ecx
f012be34:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012be3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012be3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be43:	89 45 98             	mov    %eax,-0x68(%ebp)
f012be46:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be49:	ba 00 00 00 00       	mov    $0x0,%edx
f012be4e:	f7 75 9c             	divl   -0x64(%ebp)
f012be51:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be54:	29 d0                	sub    %edx,%eax
f012be56:	89 c3                	mov    %eax,%ebx
f012be58:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012be5f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012be64:	0f b6 d0             	movzbl %al,%edx
f012be67:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012be6a:	01 d0                	add    %edx,%eax
f012be6c:	48                   	dec    %eax
f012be6d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012be70:	8b 45 90             	mov    -0x70(%ebp),%eax
f012be73:	ba 00 00 00 00       	mov    $0x0,%edx
f012be78:	f7 75 94             	divl   -0x6c(%ebp)
f012be7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012be7e:	29 d0                	sub    %edx,%eax
f012be80:	01 c3                	add    %eax,%ebx
f012be82:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012be89:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012be8e:	0f b6 c0             	movzbl %al,%eax
f012be91:	c1 e0 04             	shl    $0x4,%eax
f012be94:	89 c2                	mov    %eax,%edx
f012be96:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012be99:	01 d0                	add    %edx,%eax
f012be9b:	48                   	dec    %eax
f012be9c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012be9f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bea2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bea7:	f7 75 8c             	divl   -0x74(%ebp)
f012beaa:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bead:	29 d0                	sub    %edx,%eax
f012beaf:	01 d8                	add    %ebx,%eax
f012beb1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012beb6:	39 c1                	cmp    %eax,%ecx
f012beb8:	74 17                	je     f012bed1 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012beba:	83 ec 04             	sub    $0x4,%esp
f012bebd:	68 7c c5 13 f0       	push   $0xf013c57c
f012bec2:	68 f1 0e 00 00       	push   $0xef1
f012bec7:	68 9a b2 13 f0       	push   $0xf013b29a
f012becc:	e8 34 43 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bed1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bed4:	e8 c4 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bed9:	29 c3                	sub    %eax,%ebx
f012bedb:	89 d8                	mov    %ebx,%eax
f012bedd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bee2:	74 17                	je     f012befb <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012bee4:	83 ec 04             	sub    $0x4,%esp
f012bee7:	68 ae c5 13 f0       	push   $0xf013c5ae
f012beec:	68 f3 0e 00 00       	push   $0xef3
f012bef1:	68 9a b2 13 f0       	push   $0xf013b29a
f012bef6:	e8 0a 43 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012befb:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012bf02:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf05:	e8 93 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bf0a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bf0d:	83 ec 08             	sub    $0x8,%esp
f012bf10:	68 00 fc 0f 00       	push   $0xffc00
f012bf15:	6a 00                	push   $0x0
f012bf17:	e8 29 bc fd ff       	call   f0107b45 <krealloc>
f012bf1c:	83 c4 10             	add    $0x10,%esp
f012bf1f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bf25:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bf2b:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bf30:	77 17                	ja     f012bf49 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf32:	83 ec 04             	sub    $0x4,%esp
f012bf35:	68 40 c5 13 f0       	push   $0xf013c540
f012bf3a:	68 fb 0e 00 00       	push   $0xefb
f012bf3f:	68 9a b2 13 f0       	push   $0xf013b29a
f012bf44:	e8 bc 42 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bf49:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bf4f:	89 c1                	mov    %eax,%ecx
f012bf51:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bf58:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bf60:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bf63:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bf66:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf6b:	f7 75 84             	divl   -0x7c(%ebp)
f012bf6e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bf71:	29 d0                	sub    %edx,%eax
f012bf73:	89 c3                	mov    %eax,%ebx
f012bf75:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bf7c:	10 00 00 
f012bf7f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bf84:	0f b6 d0             	movzbl %al,%edx
f012bf87:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bf8d:	01 d0                	add    %edx,%eax
f012bf8f:	48                   	dec    %eax
f012bf90:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bf96:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bf9c:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfa1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bfa7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bfad:	29 d0                	sub    %edx,%eax
f012bfaf:	01 c3                	add    %eax,%ebx
f012bfb1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bfb8:	10 00 00 
f012bfbb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bfc0:	0f b6 c0             	movzbl %al,%eax
f012bfc3:	c1 e0 04             	shl    $0x4,%eax
f012bfc6:	89 c2                	mov    %eax,%edx
f012bfc8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bfce:	01 d0                	add    %edx,%eax
f012bfd0:	48                   	dec    %eax
f012bfd1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bfd7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bfdd:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfe2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bfe8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bfee:	29 d0                	sub    %edx,%eax
f012bff0:	01 d8                	add    %ebx,%eax
f012bff2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bff7:	39 c1                	cmp    %eax,%ecx
f012bff9:	74 17                	je     f012c012 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bffb:	83 ec 04             	sub    $0x4,%esp
f012bffe:	68 7c c5 13 f0       	push   $0xf013c57c
f012c003:	68 fd 0e 00 00       	push   $0xefd
f012c008:	68 9a b2 13 f0       	push   $0xf013b29a
f012c00d:	e8 f3 41 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c012:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c015:	e8 83 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c01a:	29 c3                	sub    %eax,%ebx
f012c01c:	89 d8                	mov    %ebx,%eax
f012c01e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c023:	74 17                	je     f012c03c <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c025:	83 ec 04             	sub    $0x4,%esp
f012c028:	68 ae c5 13 f0       	push   $0xf013c5ae
f012c02d:	68 ff 0e 00 00       	push   $0xeff
f012c032:	68 9a b2 13 f0       	push   $0xf013b29a
f012c037:	e8 c9 41 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c03c:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c043:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c046:	e8 52 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c04b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c04e:	83 ec 08             	sub    $0x8,%esp
f012c051:	68 00 fc 0f 00       	push   $0xffc00
f012c056:	6a 00                	push   $0x0
f012c058:	e8 e8 ba fd ff       	call   f0107b45 <krealloc>
f012c05d:	83 c4 10             	add    $0x10,%esp
f012c060:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c066:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c06c:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c071:	77 17                	ja     f012c08a <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c073:	83 ec 04             	sub    $0x4,%esp
f012c076:	68 40 c5 13 f0       	push   $0xf013c540
f012c07b:	68 06 0f 00 00       	push   $0xf06
f012c080:	68 9a b2 13 f0       	push   $0xf013b29a
f012c085:	e8 7b 41 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c08a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c090:	89 c1                	mov    %eax,%ecx
f012c092:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c099:	10 00 00 
f012c09c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c0a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c0a7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c0ad:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c0b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0b8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c0be:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c0c4:	29 d0                	sub    %edx,%eax
f012c0c6:	89 c3                	mov    %eax,%ebx
f012c0c8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c0cf:	10 00 00 
f012c0d2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c0d7:	0f b6 d0             	movzbl %al,%edx
f012c0da:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c0e0:	01 d0                	add    %edx,%eax
f012c0e2:	48                   	dec    %eax
f012c0e3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c0e9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c0ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0f4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c0fa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c100:	29 d0                	sub    %edx,%eax
f012c102:	01 c3                	add    %eax,%ebx
f012c104:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c10b:	10 00 00 
f012c10e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c113:	0f b6 c0             	movzbl %al,%eax
f012c116:	c1 e0 04             	shl    $0x4,%eax
f012c119:	89 c2                	mov    %eax,%edx
f012c11b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c121:	01 d0                	add    %edx,%eax
f012c123:	48                   	dec    %eax
f012c124:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c12a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c130:	ba 00 00 00 00       	mov    $0x0,%edx
f012c135:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c13b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c141:	29 d0                	sub    %edx,%eax
f012c143:	01 d8                	add    %ebx,%eax
f012c145:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c14a:	39 c1                	cmp    %eax,%ecx
f012c14c:	74 17                	je     f012c165 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c14e:	83 ec 04             	sub    $0x4,%esp
f012c151:	68 7c c5 13 f0       	push   $0xf013c57c
f012c156:	68 08 0f 00 00       	push   $0xf08
f012c15b:	68 9a b2 13 f0       	push   $0xf013b29a
f012c160:	e8 a0 40 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c165:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c168:	e8 30 0a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c16d:	29 c3                	sub    %eax,%ebx
f012c16f:	89 d8                	mov    %ebx,%eax
f012c171:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c176:	74 17                	je     f012c18f <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c178:	83 ec 04             	sub    $0x4,%esp
f012c17b:	68 ae c5 13 f0       	push   $0xf013c5ae
f012c180:	68 0a 0f 00 00       	push   $0xf0a
f012c185:	68 9a b2 13 f0       	push   $0xf013b29a
f012c18a:	e8 76 40 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c18f:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c196:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c199:	e8 ff 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c19e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c1a1:	83 ec 08             	sub    $0x8,%esp
f012c1a4:	68 00 fc 1f 00       	push   $0x1ffc00
f012c1a9:	6a 00                	push   $0x0
f012c1ab:	e8 95 b9 fd ff       	call   f0107b45 <krealloc>
f012c1b0:	83 c4 10             	add    $0x10,%esp
f012c1b3:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c1b9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c1bf:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c1c4:	77 17                	ja     f012c1dd <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1c6:	83 ec 04             	sub    $0x4,%esp
f012c1c9:	68 40 c5 13 f0       	push   $0xf013c540
f012c1ce:	68 11 0f 00 00       	push   $0xf11
f012c1d3:	68 9a b2 13 f0       	push   $0xf013b29a
f012c1d8:	e8 28 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c1dd:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c1e3:	89 c1                	mov    %eax,%ecx
f012c1e5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c1ec:	10 00 00 
f012c1ef:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c1f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c1fa:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c200:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c206:	ba 00 00 00 00       	mov    $0x0,%edx
f012c20b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c211:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c217:	29 d0                	sub    %edx,%eax
f012c219:	89 c3                	mov    %eax,%ebx
f012c21b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c222:	10 00 00 
f012c225:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c22a:	0f b6 d0             	movzbl %al,%edx
f012c22d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c233:	01 d0                	add    %edx,%eax
f012c235:	48                   	dec    %eax
f012c236:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c23c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c242:	ba 00 00 00 00       	mov    $0x0,%edx
f012c247:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c24d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c253:	29 d0                	sub    %edx,%eax
f012c255:	01 c3                	add    %eax,%ebx
f012c257:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c25e:	10 00 00 
f012c261:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c266:	0f b6 c0             	movzbl %al,%eax
f012c269:	c1 e0 04             	shl    $0x4,%eax
f012c26c:	89 c2                	mov    %eax,%edx
f012c26e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c274:	01 d0                	add    %edx,%eax
f012c276:	48                   	dec    %eax
f012c277:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c27d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c283:	ba 00 00 00 00       	mov    $0x0,%edx
f012c288:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c28e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c294:	29 d0                	sub    %edx,%eax
f012c296:	01 d8                	add    %ebx,%eax
f012c298:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c29d:	39 c1                	cmp    %eax,%ecx
f012c29f:	74 17                	je     f012c2b8 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c2a1:	83 ec 04             	sub    $0x4,%esp
f012c2a4:	68 7c c5 13 f0       	push   $0xf013c57c
f012c2a9:	68 13 0f 00 00       	push   $0xf13
f012c2ae:	68 9a b2 13 f0       	push   $0xf013b29a
f012c2b3:	e8 4d 3f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c2b8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2bb:	e8 dd 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c2c0:	29 c3                	sub    %eax,%ebx
f012c2c2:	89 d8                	mov    %ebx,%eax
f012c2c4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c2c9:	74 17                	je     f012c2e2 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c2cb:	83 ec 04             	sub    $0x4,%esp
f012c2ce:	68 ae c5 13 f0       	push   $0xf013c5ae
f012c2d3:	68 15 0f 00 00       	push   $0xf15
f012c2d8:	68 9a b2 13 f0       	push   $0xf013b29a
f012c2dd:	e8 23 3f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c2e2:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c2e9:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c2ec:	e8 ac 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c2f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c2f4:	83 ec 08             	sub    $0x8,%esp
f012c2f7:	68 00 fc 1f 00       	push   $0x1ffc00
f012c2fc:	6a 00                	push   $0x0
f012c2fe:	e8 42 b8 fd ff       	call   f0107b45 <krealloc>
f012c303:	83 c4 10             	add    $0x10,%esp
f012c306:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c30c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c312:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c317:	77 17                	ja     f012c330 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c319:	83 ec 04             	sub    $0x4,%esp
f012c31c:	68 40 c5 13 f0       	push   $0xf013c540
f012c321:	68 1c 0f 00 00       	push   $0xf1c
f012c326:	68 9a b2 13 f0       	push   $0xf013b29a
f012c32b:	e8 d5 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c330:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c336:	89 c1                	mov    %eax,%ecx
f012c338:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c33f:	10 00 00 
f012c342:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c348:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c34d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c353:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c359:	ba 00 00 00 00       	mov    $0x0,%edx
f012c35e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c364:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c36a:	29 d0                	sub    %edx,%eax
f012c36c:	89 c3                	mov    %eax,%ebx
f012c36e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c375:	10 00 00 
f012c378:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c37d:	0f b6 d0             	movzbl %al,%edx
f012c380:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c386:	01 d0                	add    %edx,%eax
f012c388:	48                   	dec    %eax
f012c389:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c38f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c395:	ba 00 00 00 00       	mov    $0x0,%edx
f012c39a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c3a0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c3a6:	29 d0                	sub    %edx,%eax
f012c3a8:	01 c3                	add    %eax,%ebx
f012c3aa:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c3b1:	10 00 00 
f012c3b4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c3b9:	0f b6 c0             	movzbl %al,%eax
f012c3bc:	c1 e0 04             	shl    $0x4,%eax
f012c3bf:	89 c2                	mov    %eax,%edx
f012c3c1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c3c7:	01 d0                	add    %edx,%eax
f012c3c9:	48                   	dec    %eax
f012c3ca:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c3d0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c3d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3db:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c3e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c3e7:	29 d0                	sub    %edx,%eax
f012c3e9:	01 d8                	add    %ebx,%eax
f012c3eb:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c3f0:	39 c1                	cmp    %eax,%ecx
f012c3f2:	74 17                	je     f012c40b <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c3f4:	83 ec 04             	sub    $0x4,%esp
f012c3f7:	68 7c c5 13 f0       	push   $0xf013c57c
f012c3fc:	68 1e 0f 00 00       	push   $0xf1e
f012c401:	68 9a b2 13 f0       	push   $0xf013b29a
f012c406:	e8 fa 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c40b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c40e:	e8 8a 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c413:	29 c3                	sub    %eax,%ebx
f012c415:	89 d8                	mov    %ebx,%eax
f012c417:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c41c:	74 17                	je     f012c435 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c41e:	83 ec 04             	sub    $0x4,%esp
f012c421:	68 ae c5 13 f0       	push   $0xf013c5ae
f012c426:	68 20 0f 00 00       	push   $0xf20
f012c42b:	68 9a b2 13 f0       	push   $0xf013b29a
f012c430:	e8 d0 3d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c435:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c43c:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c43f:	e8 59 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c444:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c447:	83 ec 08             	sub    $0x8,%esp
f012c44a:	68 00 fc 2f 00       	push   $0x2ffc00
f012c44f:	6a 00                	push   $0x0
f012c451:	e8 ef b6 fd ff       	call   f0107b45 <krealloc>
f012c456:	83 c4 10             	add    $0x10,%esp
f012c459:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c45f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c465:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c46a:	77 17                	ja     f012c483 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c46c:	83 ec 04             	sub    $0x4,%esp
f012c46f:	68 40 c5 13 f0       	push   $0xf013c540
f012c474:	68 27 0f 00 00       	push   $0xf27
f012c479:	68 9a b2 13 f0       	push   $0xf013b29a
f012c47e:	e8 82 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c483:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c489:	89 c1                	mov    %eax,%ecx
f012c48b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c492:	10 00 00 
f012c495:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c49b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c4a0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c4a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c4ac:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4b1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c4b7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c4bd:	29 d0                	sub    %edx,%eax
f012c4bf:	89 c3                	mov    %eax,%ebx
f012c4c1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c4c8:	10 00 00 
f012c4cb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c4d0:	0f b6 d0             	movzbl %al,%edx
f012c4d3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c4d9:	01 d0                	add    %edx,%eax
f012c4db:	48                   	dec    %eax
f012c4dc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c4e2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c4e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4ed:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c4f3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c4f9:	29 d0                	sub    %edx,%eax
f012c4fb:	01 c3                	add    %eax,%ebx
f012c4fd:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c504:	10 00 00 
f012c507:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c50c:	0f b6 c0             	movzbl %al,%eax
f012c50f:	c1 e0 04             	shl    $0x4,%eax
f012c512:	89 c2                	mov    %eax,%edx
f012c514:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c51a:	01 d0                	add    %edx,%eax
f012c51c:	48                   	dec    %eax
f012c51d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c523:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c529:	ba 00 00 00 00       	mov    $0x0,%edx
f012c52e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c534:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c53a:	29 d0                	sub    %edx,%eax
f012c53c:	01 d8                	add    %ebx,%eax
f012c53e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c543:	39 c1                	cmp    %eax,%ecx
f012c545:	74 17                	je     f012c55e <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c547:	83 ec 04             	sub    $0x4,%esp
f012c54a:	68 7c c5 13 f0       	push   $0xf013c57c
f012c54f:	68 29 0f 00 00       	push   $0xf29
f012c554:	68 9a b2 13 f0       	push   $0xf013b29a
f012c559:	e8 a7 3c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c55e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c561:	e8 37 06 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c566:	29 c3                	sub    %eax,%ebx
f012c568:	89 d8                	mov    %ebx,%eax
f012c56a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c56f:	74 17                	je     f012c588 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c571:	83 ec 04             	sub    $0x4,%esp
f012c574:	68 e4 b6 13 f0       	push   $0xf013b6e4
f012c579:	68 2b 0f 00 00       	push   $0xf2b
f012c57e:	68 9a b2 13 f0       	push   $0xf013b29a
f012c583:	e8 7d 3c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c588:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c58f:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c592:	e8 06 06 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c597:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c59a:	83 ec 08             	sub    $0x8,%esp
f012c59d:	68 00 fc 2f 00       	push   $0x2ffc00
f012c5a2:	6a 00                	push   $0x0
f012c5a4:	e8 9c b5 fd ff       	call   f0107b45 <krealloc>
f012c5a9:	83 c4 10             	add    $0x10,%esp
f012c5ac:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c5b2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c5b8:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c5bd:	77 17                	ja     f012c5d6 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5bf:	83 ec 04             	sub    $0x4,%esp
f012c5c2:	68 40 c5 13 f0       	push   $0xf013c540
f012c5c7:	68 32 0f 00 00       	push   $0xf32
f012c5cc:	68 9a b2 13 f0       	push   $0xf013b29a
f012c5d1:	e8 2f 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c5d6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c5dc:	89 c1                	mov    %eax,%ecx
f012c5de:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c5e5:	10 00 00 
f012c5e8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c5ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c5f3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c5f9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c5ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012c604:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c60a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c610:	29 d0                	sub    %edx,%eax
f012c612:	89 c3                	mov    %eax,%ebx
f012c614:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c61b:	10 00 00 
f012c61e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c623:	0f b6 d0             	movzbl %al,%edx
f012c626:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c62c:	01 d0                	add    %edx,%eax
f012c62e:	48                   	dec    %eax
f012c62f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c635:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c63b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c640:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c646:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c64c:	29 d0                	sub    %edx,%eax
f012c64e:	01 c3                	add    %eax,%ebx
f012c650:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c657:	10 00 00 
f012c65a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c65f:	0f b6 c0             	movzbl %al,%eax
f012c662:	c1 e0 04             	shl    $0x4,%eax
f012c665:	89 c2                	mov    %eax,%edx
f012c667:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c66d:	01 d0                	add    %edx,%eax
f012c66f:	48                   	dec    %eax
f012c670:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c676:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c67c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c681:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c687:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c68d:	29 d0                	sub    %edx,%eax
f012c68f:	01 d8                	add    %ebx,%eax
f012c691:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c696:	39 c1                	cmp    %eax,%ecx
f012c698:	74 17                	je     f012c6b1 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c69a:	83 ec 04             	sub    $0x4,%esp
f012c69d:	68 7c c5 13 f0       	push   $0xf013c57c
f012c6a2:	68 34 0f 00 00       	push   $0xf34
f012c6a7:	68 9a b2 13 f0       	push   $0xf013b29a
f012c6ac:	e8 54 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c6b1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6b4:	e8 e4 04 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c6b9:	29 c3                	sub    %eax,%ebx
f012c6bb:	89 d8                	mov    %ebx,%eax
f012c6bd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c6c2:	74 17                	je     f012c6db <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c6c4:	83 ec 04             	sub    $0x4,%esp
f012c6c7:	68 ae c5 13 f0       	push   $0xf013c5ae
f012c6cc:	68 36 0f 00 00       	push   $0xf36
f012c6d1:	68 9a b2 13 f0       	push   $0xf013b29a
f012c6d6:	e8 2a 3b fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c6db:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c6e2:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c6e5:	e8 b3 04 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c6ea:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c6ed:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c6f4:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c6f7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c6fd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c703:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c709:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c70c:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c70e:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c714:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c71a:	01 c2                	add    %eax,%edx
f012c71c:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c71f:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c721:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c727:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c72d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c734:	eb 11                	jmp    f012c747 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c736:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c739:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c73f:	01 d0                	add    %edx,%eax
f012c741:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c744:	ff 45 f4             	incl   -0xc(%ebp)
f012c747:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c74d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c750:	7d e4                	jge    f012c736 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c752:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c758:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c75e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c764:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c76a:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c770:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c777:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c77d:	01 d0                	add    %edx,%eax
f012c77f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c785:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c78b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c791:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c798:	eb 1b                	jmp    f012c7b5 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c79a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c79d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7a4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c7aa:	01 d0                	add    %edx,%eax
f012c7ac:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c7b2:	ff 45 f0             	incl   -0x10(%ebp)
f012c7b5:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c7bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c7be:	7d da                	jge    f012c79a <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c7c0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c7c6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c7cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c7d3:	eb 17                	jmp    f012c7ec <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c7d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c7d8:	01 c0                	add    %eax,%eax
f012c7da:	89 c2                	mov    %eax,%edx
f012c7dc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c7e2:	01 d0                	add    %edx,%eax
f012c7e4:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c7e9:	ff 45 ec             	incl   -0x14(%ebp)
f012c7ec:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c7f2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c7f5:	7d de                	jge    f012c7d5 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c7f7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c7fd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c803:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c809:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c80e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c814:	01 c0                	add    %eax,%eax
f012c816:	89 c2                	mov    %eax,%edx
f012c818:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c81e:	01 d0                	add    %edx,%eax
f012c820:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c825:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c82b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c831:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c838:	eb 49                	jmp    f012c883 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c83a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c83d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c844:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c84a:	01 d0                	add    %edx,%eax
f012c84c:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c84f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c852:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c859:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c85f:	01 d0                	add    %edx,%eax
f012c861:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c867:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c86a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c871:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c877:	01 d0                	add    %edx,%eax
f012c879:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c880:	ff 45 e8             	incl   -0x18(%ebp)
f012c883:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c889:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c88c:	7d ac                	jge    f012c83a <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c88e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c894:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c89a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8a0:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c8a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8a9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c8af:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8b5:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c8bc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c8c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8cf:	01 d0                	add    %edx,%eax
f012c8d1:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c8d4:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c8da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8e7:	01 d0                	add    %edx,%eax
f012c8e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c8ef:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c8f5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c902:	01 d0                	add    %edx,%eax
f012c904:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c90b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c911:	8a 00                	mov    (%eax),%al
f012c913:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c916:	75 17                	jne    f012c92f <test_krealloc+0xd04>
f012c918:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c91e:	89 c2                	mov    %eax,%edx
f012c920:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c926:	01 d0                	add    %edx,%eax
f012c928:	8a 00                	mov    (%eax),%al
f012c92a:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c92d:	74 17                	je     f012c946 <test_krealloc+0xd1b>
			panic(
f012c92f:	83 ec 04             	sub    $0x4,%esp
f012c932:	68 cc c5 13 f0       	push   $0xf013c5cc
f012c937:	68 79 0f 00 00       	push   $0xf79
f012c93c:	68 9a b2 13 f0       	push   $0xf013b29a
f012c941:	e8 bf 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c946:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c94c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c952:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c958:	8a 00                	mov    (%eax),%al
f012c95a:	3c 02                	cmp    $0x2,%al
f012c95c:	75 16                	jne    f012c974 <test_krealloc+0xd49>
f012c95e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c964:	89 c2                	mov    %eax,%edx
f012c966:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c96c:	01 d0                	add    %edx,%eax
f012c96e:	8a 00                	mov    (%eax),%al
f012c970:	3c 02                	cmp    $0x2,%al
f012c972:	74 20                	je     f012c994 <test_krealloc+0xd69>
			panic(
f012c974:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c97a:	8a 00                	mov    (%eax),%al
f012c97c:	0f be c0             	movsbl %al,%eax
f012c97f:	50                   	push   %eax
f012c980:	68 0c c6 13 f0       	push   $0xf013c60c
f012c985:	68 7f 0f 00 00       	push   $0xf7f
f012c98a:	68 9a b2 13 f0       	push   $0xf013b29a
f012c98f:	e8 71 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c994:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c99a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c9a0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c9a6:	8b 00                	mov    (%eax),%eax
f012c9a8:	83 f8 03             	cmp    $0x3,%eax
f012c9ab:	75 1c                	jne    f012c9c9 <test_krealloc+0xd9e>
f012c9ad:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c9b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c9ba:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c9c0:	01 d0                	add    %edx,%eax
f012c9c2:	8b 00                	mov    (%eax),%eax
f012c9c4:	83 f8 03             	cmp    $0x3,%eax
f012c9c7:	74 17                	je     f012c9e0 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c9c9:	83 ec 04             	sub    $0x4,%esp
f012c9cc:	68 58 c6 13 f0       	push   $0xf013c658
f012c9d1:	68 83 0f 00 00       	push   $0xf83
f012c9d6:	68 9a b2 13 f0       	push   $0xf013b29a
f012c9db:	e8 25 38 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c9e0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9e6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c9ec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c9f2:	8b 00                	mov    (%eax),%eax
f012c9f4:	83 f8 04             	cmp    $0x4,%eax
f012c9f7:	75 1c                	jne    f012ca15 <test_krealloc+0xdea>
f012c9f9:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c9ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ca06:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ca0c:	01 d0                	add    %edx,%eax
f012ca0e:	8b 00                	mov    (%eax),%eax
f012ca10:	83 f8 04             	cmp    $0x4,%eax
f012ca13:	74 17                	je     f012ca2c <test_krealloc+0xe01>
			panic(
f012ca15:	83 ec 04             	sub    $0x4,%esp
f012ca18:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ca1d:	68 88 0f 00 00       	push   $0xf88
f012ca22:	68 9a b2 13 f0       	push   $0xf013b29a
f012ca27:	e8 d9 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ca2c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca32:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ca38:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ca3e:	66 8b 00             	mov    (%eax),%ax
f012ca41:	66 83 f8 05          	cmp    $0x5,%ax
f012ca45:	75 1b                	jne    f012ca62 <test_krealloc+0xe37>
f012ca47:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012ca4d:	01 c0                	add    %eax,%eax
f012ca4f:	89 c2                	mov    %eax,%edx
f012ca51:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ca57:	01 d0                	add    %edx,%eax
f012ca59:	66 8b 00             	mov    (%eax),%ax
f012ca5c:	66 83 f8 05          	cmp    $0x5,%ax
f012ca60:	74 17                	je     f012ca79 <test_krealloc+0xe4e>
			panic(
f012ca62:	83 ec 04             	sub    $0x4,%esp
f012ca65:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ca6a:	68 8d 0f 00 00       	push   $0xf8d
f012ca6f:	68 9a b2 13 f0       	push   $0xf013b29a
f012ca74:	e8 8c 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ca79:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ca7f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ca85:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ca8b:	66 8b 00             	mov    (%eax),%ax
f012ca8e:	66 83 f8 06          	cmp    $0x6,%ax
f012ca92:	75 1b                	jne    f012caaf <test_krealloc+0xe84>
f012ca94:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ca9a:	01 c0                	add    %eax,%eax
f012ca9c:	89 c2                	mov    %eax,%edx
f012ca9e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012caa4:	01 d0                	add    %edx,%eax
f012caa6:	66 8b 00             	mov    (%eax),%ax
f012caa9:	66 83 f8 06          	cmp    $0x6,%ax
f012caad:	74 17                	je     f012cac6 <test_krealloc+0xe9b>
			panic(
f012caaf:	83 ec 04             	sub    $0x4,%esp
f012cab2:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cab7:	68 92 0f 00 00       	push   $0xf92
f012cabc:	68 9a b2 13 f0       	push   $0xf013b29a
f012cac1:	e8 3f 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cac6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cacc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cad2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cad8:	8a 00                	mov    (%eax),%al
f012cada:	3c 07                	cmp    $0x7,%al
f012cadc:	75 1b                	jne    f012caf9 <test_krealloc+0xece>
f012cade:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cae4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012caeb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012caf1:	01 d0                	add    %edx,%eax
f012caf3:	8a 00                	mov    (%eax),%al
f012caf5:	3c 07                	cmp    $0x7,%al
f012caf7:	74 17                	je     f012cb10 <test_krealloc+0xee5>
			panic(
f012caf9:	83 ec 04             	sub    $0x4,%esp
f012cafc:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cb01:	68 97 0f 00 00       	push   $0xf97
f012cb06:	68 9a b2 13 f0       	push   $0xf013b29a
f012cb0b:	e8 f5 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cb10:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb16:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb1a:	66 83 f8 07          	cmp    $0x7,%ax
f012cb1e:	75 1f                	jne    f012cb3f <test_krealloc+0xf14>
f012cb20:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb26:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cb2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb33:	01 d0                	add    %edx,%eax
f012cb35:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb39:	66 83 f8 07          	cmp    $0x7,%ax
f012cb3d:	74 17                	je     f012cb56 <test_krealloc+0xf2b>
			panic(
f012cb3f:	83 ec 04             	sub    $0x4,%esp
f012cb42:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cb47:	68 9a 0f 00 00       	push   $0xf9a
f012cb4c:	68 9a b2 13 f0       	push   $0xf013b29a
f012cb51:	e8 af 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cb56:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb5c:	8b 40 04             	mov    0x4(%eax),%eax
f012cb5f:	83 f8 07             	cmp    $0x7,%eax
f012cb62:	75 1d                	jne    f012cb81 <test_krealloc+0xf56>
f012cb64:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb6a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cb71:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb77:	01 d0                	add    %edx,%eax
f012cb79:	8b 40 04             	mov    0x4(%eax),%eax
f012cb7c:	83 f8 07             	cmp    $0x7,%eax
f012cb7f:	74 17                	je     f012cb98 <test_krealloc+0xf6d>
			panic(
f012cb81:	83 ec 04             	sub    $0x4,%esp
f012cb84:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cb89:	68 9d 0f 00 00       	push   $0xf9d
f012cb8e:	68 9a b2 13 f0       	push   $0xf013b29a
f012cb93:	e8 6d 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cb98:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cb9e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cba4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbaa:	8a 00                	mov    (%eax),%al
f012cbac:	3c 08                	cmp    $0x8,%al
f012cbae:	75 1b                	jne    f012cbcb <test_krealloc+0xfa0>
f012cbb0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cbb6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbbd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbc3:	01 d0                	add    %edx,%eax
f012cbc5:	8a 00                	mov    (%eax),%al
f012cbc7:	3c 08                	cmp    $0x8,%al
f012cbc9:	74 17                	je     f012cbe2 <test_krealloc+0xfb7>
			panic(
f012cbcb:	83 ec 04             	sub    $0x4,%esp
f012cbce:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cbd3:	68 a2 0f 00 00       	push   $0xfa2
f012cbd8:	68 9a b2 13 f0       	push   $0xf013b29a
f012cbdd:	e8 23 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012cbe2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbe8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cbec:	66 83 f8 08          	cmp    $0x8,%ax
f012cbf0:	75 1f                	jne    f012cc11 <test_krealloc+0xfe6>
f012cbf2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cbf8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc05:	01 d0                	add    %edx,%eax
f012cc07:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc0b:	66 83 f8 08          	cmp    $0x8,%ax
f012cc0f:	74 17                	je     f012cc28 <test_krealloc+0xffd>
			panic(
f012cc11:	83 ec 04             	sub    $0x4,%esp
f012cc14:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cc19:	68 a5 0f 00 00       	push   $0xfa5
f012cc1e:	68 9a b2 13 f0       	push   $0xf013b29a
f012cc23:	e8 dd 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cc28:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc2e:	8b 40 04             	mov    0x4(%eax),%eax
f012cc31:	83 f8 08             	cmp    $0x8,%eax
f012cc34:	75 1d                	jne    f012cc53 <test_krealloc+0x1028>
f012cc36:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cc3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc43:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc49:	01 d0                	add    %edx,%eax
f012cc4b:	8b 40 04             	mov    0x4(%eax),%eax
f012cc4e:	83 f8 08             	cmp    $0x8,%eax
f012cc51:	74 17                	je     f012cc6a <test_krealloc+0x103f>
			panic(
f012cc53:	83 ec 04             	sub    $0x4,%esp
f012cc56:	68 cc c5 13 f0       	push   $0xf013c5cc
f012cc5b:	68 a8 0f 00 00       	push   $0xfa8
f012cc60:	68 9a b2 13 f0       	push   $0xf013b29a
f012cc65:	e8 9b 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cc6a:	e8 2e ff fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cc6f:	89 c2                	mov    %eax,%edx
f012cc71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc74:	39 c2                	cmp    %eax,%edx
f012cc76:	74 17                	je     f012cc8f <test_krealloc+0x1064>
			panic(
f012cc78:	83 ec 04             	sub    $0x4,%esp
f012cc7b:	68 8c c6 13 f0       	push   $0xf013c68c
f012cc80:	68 ac 0f 00 00       	push   $0xfac
f012cc85:	68 9a b2 13 f0       	push   $0xf013b29a
f012cc8a:	e8 76 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012cc8f:	83 ec 0c             	sub    $0xc,%esp
f012cc92:	68 d8 c6 13 f0       	push   $0xf013c6d8
f012cc97:	e8 72 40 fd ff       	call   f0100d0e <cprintf>
f012cc9c:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cc9f:	e8 f9 fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cca4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cca7:	e8 1c 71 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ccac:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ccb2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ccb8:	83 ec 08             	sub    $0x8,%esp
f012ccbb:	6a 00                	push   $0x0
f012ccbd:	50                   	push   %eax
f012ccbe:	e8 82 ae fd ff       	call   f0107b45 <krealloc>
f012ccc3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ccc6:	e8 fd 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cccb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ccd1:	74 17                	je     f012ccea <test_krealloc+0x10bf>
			panic(
f012ccd3:	83 ec 04             	sub    $0x4,%esp
f012ccd6:	68 fc c6 13 f0       	push   $0xf013c6fc
f012ccdb:	68 b9 0f 00 00       	push   $0xfb9
f012cce0:	68 9a b2 13 f0       	push   $0xf013b29a
f012cce5:	e8 1b 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ccea:	e8 ae fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ccef:	89 c2                	mov    %eax,%edx
f012ccf1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ccf4:	29 c2                	sub    %eax,%edx
f012ccf6:	89 d0                	mov    %edx,%eax
f012ccf8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ccfd:	74 17                	je     f012cd16 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ccff:	83 ec 04             	sub    $0x4,%esp
f012cd02:	68 70 c7 13 f0       	push   $0xf013c770
f012cd07:	68 bb 0f 00 00       	push   $0xfbb
f012cd0c:	68 9a b2 13 f0       	push   $0xf013b29a
f012cd11:	e8 ef 34 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cd16:	e8 82 fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cd1b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cd1e:	e8 a5 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cd23:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cd29:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cd2f:	83 ec 08             	sub    $0x8,%esp
f012cd32:	6a 00                	push   $0x0
f012cd34:	50                   	push   %eax
f012cd35:	e8 0b ae fd ff       	call   f0107b45 <krealloc>
f012cd3a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cd3d:	e8 86 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cd42:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cd48:	74 17                	je     f012cd61 <test_krealloc+0x1136>
			panic(
f012cd4a:	83 ec 04             	sub    $0x4,%esp
f012cd4d:	68 fc c6 13 f0       	push   $0xf013c6fc
f012cd52:	68 c4 0f 00 00       	push   $0xfc4
f012cd57:	68 9a b2 13 f0       	push   $0xf013b29a
f012cd5c:	e8 a4 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cd61:	e8 37 fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cd66:	89 c2                	mov    %eax,%edx
f012cd68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd6b:	29 c2                	sub    %eax,%edx
f012cd6d:	89 d0                	mov    %edx,%eax
f012cd6f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cd74:	74 17                	je     f012cd8d <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012cd76:	83 ec 04             	sub    $0x4,%esp
f012cd79:	68 70 c7 13 f0       	push   $0xf013c770
f012cd7e:	68 c6 0f 00 00       	push   $0xfc6
f012cd83:	68 9a b2 13 f0       	push   $0xf013b29a
f012cd88:	e8 78 34 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cd8d:	e8 0b fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cd92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cd95:	e8 2e 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cd9a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cda0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cda6:	83 ec 08             	sub    $0x8,%esp
f012cda9:	6a 00                	push   $0x0
f012cdab:	50                   	push   %eax
f012cdac:	e8 94 ad fd ff       	call   f0107b45 <krealloc>
f012cdb1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cdb4:	e8 0f 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cdb9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cdbf:	74 17                	je     f012cdd8 <test_krealloc+0x11ad>
			panic(
f012cdc1:	83 ec 04             	sub    $0x4,%esp
f012cdc4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012cdc9:	68 ce 0f 00 00       	push   $0xfce
f012cdce:	68 9a b2 13 f0       	push   $0xf013b29a
f012cdd3:	e8 2d 34 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cdd8:	e8 c0 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cddd:	89 c2                	mov    %eax,%edx
f012cddf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cde2:	29 c2                	sub    %eax,%edx
f012cde4:	89 d0                	mov    %edx,%eax
f012cde6:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cdeb:	74 17                	je     f012ce04 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012cded:	83 ec 04             	sub    $0x4,%esp
f012cdf0:	68 70 c7 13 f0       	push   $0xf013c770
f012cdf5:	68 d0 0f 00 00       	push   $0xfd0
f012cdfa:	68 9a b2 13 f0       	push   $0xf013b29a
f012cdff:	e8 01 34 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ce04:	e8 94 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce0c:	e8 b7 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce11:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ce17:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ce1d:	83 ec 08             	sub    $0x8,%esp
f012ce20:	6a 00                	push   $0x0
f012ce22:	50                   	push   %eax
f012ce23:	e8 1d ad fd ff       	call   f0107b45 <krealloc>
f012ce28:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce2b:	e8 98 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce30:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ce36:	74 17                	je     f012ce4f <test_krealloc+0x1224>
			panic(
f012ce38:	83 ec 04             	sub    $0x4,%esp
f012ce3b:	68 fc c6 13 f0       	push   $0xf013c6fc
f012ce40:	68 d8 0f 00 00       	push   $0xfd8
f012ce45:	68 9a b2 13 f0       	push   $0xf013b29a
f012ce4a:	e8 b6 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ce4f:	e8 49 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce54:	89 c2                	mov    %eax,%edx
f012ce56:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce59:	29 c2                	sub    %eax,%edx
f012ce5b:	89 d0                	mov    %edx,%eax
f012ce5d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce62:	74 17                	je     f012ce7b <test_krealloc+0x1250>
			panic(
f012ce64:	83 ec 04             	sub    $0x4,%esp
f012ce67:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012ce6c:	68 db 0f 00 00       	push   $0xfdb
f012ce71:	68 9a b2 13 f0       	push   $0xf013b29a
f012ce76:	e8 8a 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ce7b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ce82:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ce89:	eb 48                	jmp    f012ced3 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ce8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ce8e:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012ce93:	83 ec 04             	sub    $0x4,%esp
f012ce96:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012ce9c:	51                   	push   %ecx
f012ce9d:	52                   	push   %edx
f012ce9e:	50                   	push   %eax
f012ce9f:	e8 0d 9c fd ff       	call   f0106ab1 <get_page_table>
f012cea4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cea7:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012cead:	85 c0                	test   %eax,%eax
f012ceaf:	75 17                	jne    f012cec8 <test_krealloc+0x129d>
					panic(
f012ceb1:	83 ec 04             	sub    $0x4,%esp
f012ceb4:	68 9c bb 13 f0       	push   $0xf013bb9c
f012ceb9:	68 e7 0f 00 00       	push   $0xfe7
f012cebe:	68 9a b2 13 f0       	push   $0xf013b29a
f012cec3:	e8 3d 33 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cec8:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cecf:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012ced3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ced7:	78 b2                	js     f012ce8b <test_krealloc+0x1260>
f012ced9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cedd:	7f 09                	jg     f012cee8 <test_krealloc+0x12bd>
f012cedf:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cee6:	76 a3                	jbe    f012ce8b <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cee8:	83 ec 0c             	sub    $0xc,%esp
f012ceeb:	68 e3 c7 13 f0       	push   $0xf013c7e3
f012cef0:	e8 19 3e fd ff       	call   f0100d0e <cprintf>
f012cef5:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cef8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cefe:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cf04:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cf0b:	eb 21                	jmp    f012cf2e <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012cf0d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cf13:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cf16:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cf1c:	01 c8                	add    %ecx,%eax
f012cf1e:	8a 00                	mov    (%eax),%al
f012cf20:	0f be c0             	movsbl %al,%eax
f012cf23:	01 d0                	add    %edx,%eax
f012cf25:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cf2b:	ff 45 dc             	incl   -0x24(%ebp)
f012cf2e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cf34:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cf37:	7d d4                	jge    f012cf0d <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cf39:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012cf3f:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cf45:	42                   	inc    %edx
f012cf46:	01 d2                	add    %edx,%edx
f012cf48:	39 d0                	cmp    %edx,%eax
f012cf4a:	74 17                	je     f012cf63 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012cf4c:	83 ec 04             	sub    $0x4,%esp
f012cf4f:	68 ec c7 13 f0       	push   $0xf013c7ec
f012cf54:	68 f9 0f 00 00       	push   $0xff9
f012cf59:	68 9a b2 13 f0       	push   $0xf013b29a
f012cf5e:	e8 a2 32 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cf63:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cf69:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cf6f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cf76:	eb 25                	jmp    f012cf9d <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012cf78:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012cf7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cf81:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cf88:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf8e:	01 c8                	add    %ecx,%eax
f012cf90:	8b 00                	mov    (%eax),%eax
f012cf92:	01 d0                	add    %edx,%eax
f012cf94:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cf9a:	ff 45 dc             	incl   -0x24(%ebp)
f012cf9d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cfa3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cfa6:	7d d0                	jge    f012cf78 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cfa8:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012cfae:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012cfb4:	42                   	inc    %edx
f012cfb5:	c1 e2 02             	shl    $0x2,%edx
f012cfb8:	39 d0                	cmp    %edx,%eax
f012cfba:	74 17                	je     f012cfd3 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012cfbc:	83 ec 04             	sub    $0x4,%esp
f012cfbf:	68 ec c7 13 f0       	push   $0xf013c7ec
f012cfc4:	68 03 10 00 00       	push   $0x1003
f012cfc9:	68 9a b2 13 f0       	push   $0xf013b29a
f012cfce:	e8 32 32 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cfd3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfd9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cfdf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cfe6:	eb 24                	jmp    f012d00c <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cfe8:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cfee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cff1:	01 c0                	add    %eax,%eax
f012cff3:	89 c1                	mov    %eax,%ecx
f012cff5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cffb:	01 c8                	add    %ecx,%eax
f012cffd:	66 8b 00             	mov    (%eax),%ax
f012d000:	98                   	cwtl   
f012d001:	01 d0                	add    %edx,%eax
f012d003:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d009:	ff 45 dc             	incl   -0x24(%ebp)
f012d00c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d012:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d015:	7d d1                	jge    f012cfe8 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d017:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d01d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d023:	8d 48 01             	lea    0x1(%eax),%ecx
f012d026:	89 c8                	mov    %ecx,%eax
f012d028:	c1 e0 02             	shl    $0x2,%eax
f012d02b:	01 c8                	add    %ecx,%eax
f012d02d:	39 c2                	cmp    %eax,%edx
f012d02f:	74 17                	je     f012d048 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d031:	83 ec 04             	sub    $0x4,%esp
f012d034:	68 ec c7 13 f0       	push   $0xf013c7ec
f012d039:	68 0d 10 00 00       	push   $0x100d
f012d03e:	68 9a b2 13 f0       	push   $0xf013b29a
f012d043:	e8 bd 31 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d048:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d04e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d054:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d05b:	eb 70                	jmp    f012d0cd <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d05d:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d063:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d066:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d06d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d073:	01 c8                	add    %ecx,%eax
f012d075:	8a 00                	mov    (%eax),%al
f012d077:	0f be c0             	movsbl %al,%eax
f012d07a:	01 d0                	add    %edx,%eax
f012d07c:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d082:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d088:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d08b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d092:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d098:	01 c8                	add    %ecx,%eax
f012d09a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d09e:	98                   	cwtl   
f012d09f:	01 d0                	add    %edx,%eax
f012d0a1:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d0a7:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d0ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d0b0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d0b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0bd:	01 c8                	add    %ecx,%eax
f012d0bf:	8b 40 04             	mov    0x4(%eax),%eax
f012d0c2:	01 d0                	add    %edx,%eax
f012d0c4:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d0ca:	ff 45 dc             	incl   -0x24(%ebp)
f012d0cd:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d0d3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d0d6:	7d 85                	jge    f012d05d <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d0d8:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d0de:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d0e4:	8d 50 01             	lea    0x1(%eax),%edx
f012d0e7:	89 d0                	mov    %edx,%eax
f012d0e9:	01 c0                	add    %eax,%eax
f012d0eb:	01 d0                	add    %edx,%eax
f012d0ed:	01 c0                	add    %eax,%eax
f012d0ef:	01 d0                	add    %edx,%eax
f012d0f1:	39 c1                	cmp    %eax,%ecx
f012d0f3:	75 3a                	jne    f012d12f <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d0f5:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d0fb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d101:	8d 50 01             	lea    0x1(%eax),%edx
f012d104:	89 d0                	mov    %edx,%eax
f012d106:	01 c0                	add    %eax,%eax
f012d108:	01 d0                	add    %edx,%eax
f012d10a:	01 c0                	add    %eax,%eax
f012d10c:	01 d0                	add    %edx,%eax
f012d10e:	39 c1                	cmp    %eax,%ecx
f012d110:	75 1d                	jne    f012d12f <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d112:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d118:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d11e:	8d 50 01             	lea    0x1(%eax),%edx
f012d121:	89 d0                	mov    %edx,%eax
f012d123:	01 c0                	add    %eax,%eax
f012d125:	01 d0                	add    %edx,%eax
f012d127:	01 c0                	add    %eax,%eax
f012d129:	01 d0                	add    %edx,%eax
f012d12b:	39 c1                	cmp    %eax,%ecx
f012d12d:	74 17                	je     f012d146 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d12f:	83 ec 04             	sub    $0x4,%esp
f012d132:	68 ec c7 13 f0       	push   $0xf013c7ec
f012d137:	68 1b 10 00 00       	push   $0x101b
f012d13c:	68 9a b2 13 f0       	push   $0xf013b29a
f012d141:	e8 bf 30 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d146:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d14d:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d150:	e8 48 fa fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d155:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d158:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d15e:	83 ec 08             	sub    $0x8,%esp
f012d161:	68 00 3c 00 00       	push   $0x3c00
f012d166:	50                   	push   %eax
f012d167:	e8 d9 a9 fd ff       	call   f0107b45 <krealloc>
f012d16c:	83 c4 10             	add    $0x10,%esp
f012d16f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d175:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d17b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d180:	77 17                	ja     f012d199 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d182:	83 ec 04             	sub    $0x4,%esp
f012d185:	68 40 c5 13 f0       	push   $0xf013c540
f012d18a:	68 27 10 00 00       	push   $0x1027
f012d18f:	68 9a b2 13 f0       	push   $0xf013b29a
f012d194:	e8 6c 30 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d199:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d19f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d1a5:	74 17                	je     f012d1be <test_krealloc+0x1593>
			panic(
f012d1a7:	83 ec 04             	sub    $0x4,%esp
f012d1aa:	68 24 c8 13 f0       	push   $0xf013c824
f012d1af:	68 2a 10 00 00       	push   $0x102a
f012d1b4:	68 9a b2 13 f0       	push   $0xf013b29a
f012d1b9:	e8 47 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d1be:	e8 da f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d1c3:	89 c2                	mov    %eax,%edx
f012d1c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1c8:	39 c2                	cmp    %eax,%edx
f012d1ca:	74 17                	je     f012d1e3 <test_krealloc+0x15b8>
			panic(
f012d1cc:	83 ec 04             	sub    $0x4,%esp
f012d1cf:	68 90 c8 13 f0       	push   $0xf013c890
f012d1d4:	68 2d 10 00 00       	push   $0x102d
f012d1d9:	68 9a b2 13 f0       	push   $0xf013b29a
f012d1de:	e8 22 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d1e3:	e8 b5 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d1e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d1eb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d1f1:	83 ec 08             	sub    $0x8,%esp
f012d1f4:	68 00 fc 0f 00       	push   $0xffc00
f012d1f9:	50                   	push   %eax
f012d1fa:	e8 46 a9 fd ff       	call   f0107b45 <krealloc>
f012d1ff:	83 c4 10             	add    $0x10,%esp
f012d202:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d208:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d20e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d213:	77 17                	ja     f012d22c <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d215:	83 ec 04             	sub    $0x4,%esp
f012d218:	68 40 c5 13 f0       	push   $0xf013c540
f012d21d:	68 33 10 00 00       	push   $0x1033
f012d222:	68 9a b2 13 f0       	push   $0xf013b29a
f012d227:	e8 d9 2f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d22c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d232:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d238:	74 17                	je     f012d251 <test_krealloc+0x1626>
			panic(
f012d23a:	83 ec 04             	sub    $0x4,%esp
f012d23d:	68 24 c8 13 f0       	push   $0xf013c824
f012d242:	68 36 10 00 00       	push   $0x1036
f012d247:	68 9a b2 13 f0       	push   $0xf013b29a
f012d24c:	e8 b4 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d251:	e8 47 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d256:	89 c2                	mov    %eax,%edx
f012d258:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d25b:	39 c2                	cmp    %eax,%edx
f012d25d:	74 17                	je     f012d276 <test_krealloc+0x164b>
			panic(
f012d25f:	83 ec 04             	sub    $0x4,%esp
f012d262:	68 90 c8 13 f0       	push   $0xf013c890
f012d267:	68 39 10 00 00       	push   $0x1039
f012d26c:	68 9a b2 13 f0       	push   $0xf013b29a
f012d271:	e8 8f 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d276:	e8 22 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d27b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d27e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d284:	83 ec 08             	sub    $0x8,%esp
f012d287:	68 00 fc 0f 00       	push   $0xffc00
f012d28c:	50                   	push   %eax
f012d28d:	e8 b3 a8 fd ff       	call   f0107b45 <krealloc>
f012d292:	83 c4 10             	add    $0x10,%esp
f012d295:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d29b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d2a1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2a6:	77 17                	ja     f012d2bf <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2a8:	83 ec 04             	sub    $0x4,%esp
f012d2ab:	68 40 c5 13 f0       	push   $0xf013c540
f012d2b0:	68 3f 10 00 00       	push   $0x103f
f012d2b5:	68 9a b2 13 f0       	push   $0xf013b29a
f012d2ba:	e8 46 2f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d2bf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d2c5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d2cb:	74 17                	je     f012d2e4 <test_krealloc+0x16b9>
			panic(
f012d2cd:	83 ec 04             	sub    $0x4,%esp
f012d2d0:	68 24 c8 13 f0       	push   $0xf013c824
f012d2d5:	68 42 10 00 00       	push   $0x1042
f012d2da:	68 9a b2 13 f0       	push   $0xf013b29a
f012d2df:	e8 21 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d2e4:	e8 b4 f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d2e9:	89 c2                	mov    %eax,%edx
f012d2eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2ee:	39 c2                	cmp    %eax,%edx
f012d2f0:	74 17                	je     f012d309 <test_krealloc+0x16de>
			panic(
f012d2f2:	83 ec 04             	sub    $0x4,%esp
f012d2f5:	68 90 c8 13 f0       	push   $0xf013c890
f012d2fa:	68 45 10 00 00       	push   $0x1045
f012d2ff:	68 9a b2 13 f0       	push   $0xf013b29a
f012d304:	e8 fc 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d309:	e8 8f f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d30e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d311:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d317:	83 ec 08             	sub    $0x8,%esp
f012d31a:	68 00 fc 0f 00       	push   $0xffc00
f012d31f:	50                   	push   %eax
f012d320:	e8 20 a8 fd ff       	call   f0107b45 <krealloc>
f012d325:	83 c4 10             	add    $0x10,%esp
f012d328:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d32e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d334:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d339:	77 17                	ja     f012d352 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d33b:	83 ec 04             	sub    $0x4,%esp
f012d33e:	68 40 c5 13 f0       	push   $0xf013c540
f012d343:	68 4d 10 00 00       	push   $0x104d
f012d348:	68 9a b2 13 f0       	push   $0xf013b29a
f012d34d:	e8 b3 2e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d352:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d358:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d35e:	74 17                	je     f012d377 <test_krealloc+0x174c>
			panic(
f012d360:	83 ec 04             	sub    $0x4,%esp
f012d363:	68 d4 c8 13 f0       	push   $0xf013c8d4
f012d368:	68 50 10 00 00       	push   $0x1050
f012d36d:	68 9a b2 13 f0       	push   $0xf013b29a
f012d372:	e8 8e 2e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d377:	e8 21 f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d37c:	89 c2                	mov    %eax,%edx
f012d37e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d381:	39 c2                	cmp    %eax,%edx
f012d383:	74 17                	je     f012d39c <test_krealloc+0x1771>
			panic(
f012d385:	83 ec 04             	sub    $0x4,%esp
f012d388:	68 90 c8 13 f0       	push   $0xf013c890
f012d38d:	68 53 10 00 00       	push   $0x1053
f012d392:	68 9a b2 13 f0       	push   $0xf013b29a
f012d397:	e8 69 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d39c:	83 ec 0c             	sub    $0xc,%esp
f012d39f:	68 b3 ba 13 f0       	push   $0xf013bab3
f012d3a4:	e8 65 39 fd ff       	call   f0100d0e <cprintf>
f012d3a9:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d3ac:	e8 ec f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d3b4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d3ba:	83 ec 08             	sub    $0x8,%esp
f012d3bd:	68 00 18 10 00       	push   $0x101800
f012d3c2:	50                   	push   %eax
f012d3c3:	e8 7d a7 fd ff       	call   f0107b45 <krealloc>
f012d3c8:	83 c4 10             	add    $0x10,%esp
f012d3cb:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d3ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3d1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d3d6:	77 17                	ja     f012d3ef <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d3d8:	83 ec 04             	sub    $0x4,%esp
f012d3db:	68 40 c5 13 f0       	push   $0xf013c540
f012d3e0:	68 5c 10 00 00       	push   $0x105c
f012d3e5:	68 9a b2 13 f0       	push   $0xf013b29a
f012d3ea:	e8 16 2e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d3ef:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d3f5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d3f8:	74 17                	je     f012d411 <test_krealloc+0x17e6>
			panic(
f012d3fa:	83 ec 04             	sub    $0x4,%esp
f012d3fd:	68 34 c9 13 f0       	push   $0xf013c934
f012d402:	68 5f 10 00 00       	push   $0x105f
f012d407:	68 9a b2 13 f0       	push   $0xf013b29a
f012d40c:	e8 f4 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d411:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d414:	e8 84 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d419:	29 c3                	sub    %eax,%ebx
f012d41b:	89 d8                	mov    %ebx,%eax
f012d41d:	83 f8 02             	cmp    $0x2,%eax
f012d420:	74 17                	je     f012d439 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d422:	83 ec 04             	sub    $0x4,%esp
f012d425:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012d42a:	68 61 10 00 00       	push   $0x1061
f012d42f:	68 9a b2 13 f0       	push   $0xf013b29a
f012d434:	e8 cc 2d fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d439:	e8 5f f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d441:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d447:	83 ec 08             	sub    $0x8,%esp
f012d44a:	68 00 fc 3f 00       	push   $0x3ffc00
f012d44f:	50                   	push   %eax
f012d450:	e8 f0 a6 fd ff       	call   f0107b45 <krealloc>
f012d455:	83 c4 10             	add    $0x10,%esp
f012d458:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d45b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d45e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d463:	77 17                	ja     f012d47c <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d465:	83 ec 04             	sub    $0x4,%esp
f012d468:	68 40 c5 13 f0       	push   $0xf013c540
f012d46d:	68 67 10 00 00       	push   $0x1067
f012d472:	68 9a b2 13 f0       	push   $0xf013b29a
f012d477:	e8 89 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d47c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d482:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d485:	74 17                	je     f012d49e <test_krealloc+0x1873>
			panic(
f012d487:	83 ec 04             	sub    $0x4,%esp
f012d48a:	68 34 c9 13 f0       	push   $0xf013c934
f012d48f:	68 6a 10 00 00       	push   $0x106a
f012d494:	68 9a b2 13 f0       	push   $0xf013b29a
f012d499:	e8 67 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d49e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4a1:	e8 f7 f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d4a6:	29 c3                	sub    %eax,%ebx
f012d4a8:	89 d8                	mov    %ebx,%eax
f012d4aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d4af:	74 17                	je     f012d4c8 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d4b1:	83 ec 04             	sub    $0x4,%esp
f012d4b4:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012d4b9:	68 6d 10 00 00       	push   $0x106d
f012d4be:	68 9a b2 13 f0       	push   $0xf013b29a
f012d4c3:	e8 3d 2d fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d4c8:	83 ec 0c             	sub    $0xc,%esp
f012d4cb:	68 f8 ba 13 f0       	push   $0xf013baf8
f012d4d0:	e8 39 38 fd ff       	call   f0100d0e <cprintf>
f012d4d5:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d4d8:	e8 c0 f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d4dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d4e0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d4e6:	83 ec 08             	sub    $0x8,%esp
f012d4e9:	68 00 fc 9f 00       	push   $0x9ffc00
f012d4ee:	50                   	push   %eax
f012d4ef:	e8 51 a6 fd ff       	call   f0107b45 <krealloc>
f012d4f4:	83 c4 10             	add    $0x10,%esp
f012d4f7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d4fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d4fd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d502:	77 17                	ja     f012d51b <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d504:	83 ec 04             	sub    $0x4,%esp
f012d507:	68 40 c5 13 f0       	push   $0xf013c540
f012d50c:	68 78 10 00 00       	push   $0x1078
f012d511:	68 9a b2 13 f0       	push   $0xf013b29a
f012d516:	e8 ea 2c fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d51b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d522:	10 00 00 
f012d525:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d52b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d530:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d536:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d53c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d541:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d547:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d54d:	29 d0                	sub    %edx,%eax
f012d54f:	89 c1                	mov    %eax,%ecx
f012d551:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d558:	10 00 00 
f012d55b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d560:	0f b6 d0             	movzbl %al,%edx
f012d563:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d569:	01 d0                	add    %edx,%eax
f012d56b:	48                   	dec    %eax
f012d56c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d572:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d578:	ba 00 00 00 00       	mov    $0x0,%edx
f012d57d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d583:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d589:	29 d0                	sub    %edx,%eax
f012d58b:	01 c1                	add    %eax,%ecx
f012d58d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d594:	10 00 00 
f012d597:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d59c:	0f b6 c0             	movzbl %al,%eax
f012d59f:	c1 e0 04             	shl    $0x4,%eax
f012d5a2:	89 c2                	mov    %eax,%edx
f012d5a4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d5aa:	01 d0                	add    %edx,%eax
f012d5ac:	48                   	dec    %eax
f012d5ad:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d5b3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d5b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5be:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d5c4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d5ca:	29 d0                	sub    %edx,%eax
f012d5cc:	01 c8                	add    %ecx,%eax
f012d5ce:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d5d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5d7:	39 c2                	cmp    %eax,%edx
f012d5d9:	74 18                	je     f012d5f3 <test_krealloc+0x19c8>
			panic(
f012d5db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5de:	50                   	push   %eax
f012d5df:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012d5e4:	68 7c 10 00 00       	push   $0x107c
f012d5e9:	68 9a b2 13 f0       	push   $0xf013b29a
f012d5ee:	e8 12 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d5f3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5f9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d5fc:	75 17                	jne    f012d615 <test_krealloc+0x19ea>
			panic(
f012d5fe:	83 ec 04             	sub    $0x4,%esp
f012d601:	68 28 ca 13 f0       	push   $0xf013ca28
f012d606:	68 7f 10 00 00       	push   $0x107f
f012d60b:	68 9a b2 13 f0       	push   $0xf013b29a
f012d610:	e8 f0 2b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d615:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d618:	e8 80 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d61d:	29 c3                	sub    %eax,%ebx
f012d61f:	89 d8                	mov    %ebx,%eax
f012d621:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d626:	74 17                	je     f012d63f <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d628:	83 ec 04             	sub    $0x4,%esp
f012d62b:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012d630:	68 82 10 00 00       	push   $0x1082
f012d635:	68 9a b2 13 f0       	push   $0xf013b29a
f012d63a:	e8 c6 2b fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012d63f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d642:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d648:	e8 50 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d64d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d650:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d656:	83 ec 08             	sub    $0x8,%esp
f012d659:	68 00 fc 5f 00       	push   $0x5ffc00
f012d65e:	50                   	push   %eax
f012d65f:	e8 e1 a4 fd ff       	call   f0107b45 <krealloc>
f012d664:	83 c4 10             	add    $0x10,%esp
f012d667:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d66a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d66d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d672:	77 17                	ja     f012d68b <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d674:	83 ec 04             	sub    $0x4,%esp
f012d677:	68 40 c5 13 f0       	push   $0xf013c540
f012d67c:	68 8b 10 00 00       	push   $0x108b
f012d681:	68 9a b2 13 f0       	push   $0xf013b29a
f012d686:	e8 7a 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012d68b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d691:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d694:	74 17                	je     f012d6ad <test_krealloc+0x1a82>
			panic(
f012d696:	83 ec 04             	sub    $0x4,%esp
f012d699:	68 34 c9 13 f0       	push   $0xf013c934
f012d69e:	68 8e 10 00 00       	push   $0x108e
f012d6a3:	68 9a b2 13 f0       	push   $0xf013b29a
f012d6a8:	e8 58 2b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d6ad:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6b0:	e8 e8 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d6b5:	29 c3                	sub    %eax,%ebx
f012d6b7:	89 d8                	mov    %ebx,%eax
f012d6b9:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d6be:	74 17                	je     f012d6d7 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d6c0:	83 ec 04             	sub    $0x4,%esp
f012d6c3:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012d6c8:	68 91 10 00 00       	push   $0x1091
f012d6cd:	68 9a b2 13 f0       	push   $0xf013b29a
f012d6d2:	e8 2e 2b fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d6d7:	e8 c1 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d6dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d6df:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d6e5:	83 ec 08             	sub    $0x8,%esp
f012d6e8:	68 00 fc 3f 01       	push   $0x13ffc00
f012d6ed:	50                   	push   %eax
f012d6ee:	e8 52 a4 fd ff       	call   f0107b45 <krealloc>
f012d6f3:	83 c4 10             	add    $0x10,%esp
f012d6f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d6f9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6fc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d701:	77 17                	ja     f012d71a <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d703:	83 ec 04             	sub    $0x4,%esp
f012d706:	68 40 c5 13 f0       	push   $0xf013c540
f012d70b:	68 98 10 00 00       	push   $0x1098
f012d710:	68 9a b2 13 f0       	push   $0xf013b29a
f012d715:	e8 eb 2a fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012d71a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d720:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d723:	75 17                	jne    f012d73c <test_krealloc+0x1b11>
			panic(
f012d725:	83 ec 04             	sub    $0x4,%esp
f012d728:	68 28 ca 13 f0       	push   $0xf013ca28
f012d72d:	68 9b 10 00 00       	push   $0x109b
f012d732:	68 9a b2 13 f0       	push   $0xf013b29a
f012d737:	e8 c9 2a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d73c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d743:	10 00 00 
f012d746:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d74c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d751:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d757:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d75d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d762:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d768:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d76e:	29 d0                	sub    %edx,%eax
f012d770:	89 c1                	mov    %eax,%ecx
f012d772:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d779:	10 00 00 
f012d77c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d781:	0f b6 d0             	movzbl %al,%edx
f012d784:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d78a:	01 d0                	add    %edx,%eax
f012d78c:	48                   	dec    %eax
f012d78d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d793:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d799:	ba 00 00 00 00       	mov    $0x0,%edx
f012d79e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d7a4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d7aa:	29 d0                	sub    %edx,%eax
f012d7ac:	01 c1                	add    %eax,%ecx
f012d7ae:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d7b5:	10 00 00 
f012d7b8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d7bd:	0f b6 c0             	movzbl %al,%eax
f012d7c0:	c1 e0 04             	shl    $0x4,%eax
f012d7c3:	89 c2                	mov    %eax,%edx
f012d7c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d7cb:	01 d0                	add    %edx,%eax
f012d7cd:	48                   	dec    %eax
f012d7ce:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d7d4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d7da:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7df:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d7e5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d7eb:	29 d0                	sub    %edx,%eax
f012d7ed:	01 c8                	add    %ecx,%eax
f012d7ef:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d7f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7f8:	39 c2                	cmp    %eax,%edx
f012d7fa:	74 17                	je     f012d813 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d7fc:	83 ec 04             	sub    $0x4,%esp
f012d7ff:	68 ac ca 13 f0       	push   $0xf013caac
f012d804:	68 9d 10 00 00       	push   $0x109d
f012d809:	68 9a b2 13 f0       	push   $0xf013b29a
f012d80e:	e8 f2 29 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d813:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d816:	e8 82 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d81b:	29 c3                	sub    %eax,%ebx
f012d81d:	89 d8                	mov    %ebx,%eax
f012d81f:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d824:	74 17                	je     f012d83d <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d826:	83 ec 04             	sub    $0x4,%esp
f012d829:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012d82e:	68 a0 10 00 00       	push   $0x10a0
f012d833:	68 9a b2 13 f0       	push   $0xf013b29a
f012d838:	e8 c8 29 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012d83d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d840:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d846:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d84c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d852:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d859:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d85c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d863:	eb 21                	jmp    f012d886 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d865:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d86b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d86e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d874:	01 c8                	add    %ecx,%eax
f012d876:	8a 00                	mov    (%eax),%al
f012d878:	0f be c0             	movsbl %al,%eax
f012d87b:	01 d0                	add    %edx,%eax
f012d87d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d883:	ff 45 d8             	incl   -0x28(%ebp)
f012d886:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d88c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d88f:	7d d4                	jge    f012d865 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d891:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d897:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d89d:	42                   	inc    %edx
f012d89e:	01 d2                	add    %edx,%edx
f012d8a0:	39 d0                	cmp    %edx,%eax
f012d8a2:	74 17                	je     f012d8bb <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d8a4:	83 ec 04             	sub    $0x4,%esp
f012d8a7:	68 e0 ca 13 f0       	push   $0xf013cae0
f012d8ac:	68 ae 10 00 00       	push   $0x10ae
f012d8b1:	68 9a b2 13 f0       	push   $0xf013b29a
f012d8b6:	e8 4a 29 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d8bb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d8c1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d8c7:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d8ce:	00 00 00 
		sums[1] = 0;
f012d8d1:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d8d8:	00 00 00 
		sums[2] = 0;
f012d8db:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d8e2:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d8e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d8ec:	eb 70                	jmp    f012d95e <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d8ee:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d8f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d8f7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d8fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d904:	01 c8                	add    %ecx,%eax
f012d906:	8a 00                	mov    (%eax),%al
f012d908:	0f be c0             	movsbl %al,%eax
f012d90b:	01 d0                	add    %edx,%eax
f012d90d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d913:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d919:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d91c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d923:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d929:	01 c8                	add    %ecx,%eax
f012d92b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d92f:	98                   	cwtl   
f012d930:	01 d0                	add    %edx,%eax
f012d932:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d938:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d93e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d941:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d948:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d94e:	01 c8                	add    %ecx,%eax
f012d950:	8b 40 04             	mov    0x4(%eax),%eax
f012d953:	01 d0                	add    %edx,%eax
f012d955:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d95b:	ff 45 d8             	incl   -0x28(%ebp)
f012d95e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d964:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d967:	7d 85                	jge    f012d8ee <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d969:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d96f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d975:	8d 50 01             	lea    0x1(%eax),%edx
f012d978:	89 d0                	mov    %edx,%eax
f012d97a:	01 c0                	add    %eax,%eax
f012d97c:	01 d0                	add    %edx,%eax
f012d97e:	01 c0                	add    %eax,%eax
f012d980:	01 d0                	add    %edx,%eax
f012d982:	39 c1                	cmp    %eax,%ecx
f012d984:	75 3a                	jne    f012d9c0 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d986:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d98c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d992:	8d 50 01             	lea    0x1(%eax),%edx
f012d995:	89 d0                	mov    %edx,%eax
f012d997:	01 c0                	add    %eax,%eax
f012d999:	01 d0                	add    %edx,%eax
f012d99b:	01 c0                	add    %eax,%eax
f012d99d:	01 d0                	add    %edx,%eax
f012d99f:	39 c1                	cmp    %eax,%ecx
f012d9a1:	75 1d                	jne    f012d9c0 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d9a3:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d9a9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9af:	8d 50 01             	lea    0x1(%eax),%edx
f012d9b2:	89 d0                	mov    %edx,%eax
f012d9b4:	01 c0                	add    %eax,%eax
f012d9b6:	01 d0                	add    %edx,%eax
f012d9b8:	01 c0                	add    %eax,%eax
f012d9ba:	01 d0                	add    %edx,%eax
f012d9bc:	39 c1                	cmp    %eax,%ecx
f012d9be:	74 17                	je     f012d9d7 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d9c0:	83 ec 04             	sub    $0x4,%esp
f012d9c3:	68 e0 ca 13 f0       	push   $0xf013cae0
f012d9c8:	68 c0 10 00 00       	push   $0x10c0
f012d9cd:	68 9a b2 13 f0       	push   $0xf013b29a
f012d9d2:	e8 2e 28 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d9d7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d9dd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d9e3:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d9ea:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d9ed:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d9f4:	eb 24                	jmp    f012da1a <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d9f6:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d9fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d9ff:	01 c0                	add    %eax,%eax
f012da01:	89 c1                	mov    %eax,%ecx
f012da03:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012da09:	01 c8                	add    %ecx,%eax
f012da0b:	66 8b 00             	mov    (%eax),%ax
f012da0e:	98                   	cwtl   
f012da0f:	01 d0                	add    %edx,%eax
f012da11:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012da17:	ff 45 d8             	incl   -0x28(%ebp)
f012da1a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012da20:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012da23:	7d d1                	jge    f012d9f6 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012da25:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012da2b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012da31:	8d 48 01             	lea    0x1(%eax),%ecx
f012da34:	89 c8                	mov    %ecx,%eax
f012da36:	c1 e0 02             	shl    $0x2,%eax
f012da39:	01 c8                	add    %ecx,%eax
f012da3b:	39 c2                	cmp    %eax,%edx
f012da3d:	74 17                	je     f012da56 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012da3f:	83 ec 04             	sub    $0x4,%esp
f012da42:	68 e0 ca 13 f0       	push   $0xf013cae0
f012da47:	68 ca 10 00 00       	push   $0x10ca
f012da4c:	68 9a b2 13 f0       	push   $0xf013b29a
f012da51:	e8 af 27 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012da56:	e8 42 f1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012da5b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012da5e:	e8 65 63 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012da63:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012da69:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012da6f:	83 ec 08             	sub    $0x8,%esp
f012da72:	6a 00                	push   $0x0
f012da74:	50                   	push   %eax
f012da75:	e8 cb a0 fd ff       	call   f0107b45 <krealloc>
f012da7a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012da7d:	e8 46 63 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012da82:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012da88:	74 17                	je     f012daa1 <test_krealloc+0x1e76>
			panic(
f012da8a:	83 ec 04             	sub    $0x4,%esp
f012da8d:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012da92:	68 d2 10 00 00       	push   $0x10d2
f012da97:	68 9a b2 13 f0       	push   $0xf013b29a
f012da9c:	e8 64 27 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012daa1:	e8 f7 f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012daa6:	89 c2                	mov    %eax,%edx
f012daa8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012daab:	29 c2                	sub    %eax,%edx
f012daad:	89 d0                	mov    %edx,%eax
f012daaf:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012dab4:	74 17                	je     f012dacd <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012dab6:	83 ec 04             	sub    $0x4,%esp
f012dab9:	68 70 c7 13 f0       	push   $0xf013c770
f012dabe:	68 d4 10 00 00       	push   $0x10d4
f012dac3:	68 9a b2 13 f0       	push   $0xf013b29a
f012dac8:	e8 38 27 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dacd:	e8 cb f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dad2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dad5:	e8 ee 62 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dada:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012dae0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dae6:	83 ec 0c             	sub    $0xc,%esp
f012dae9:	50                   	push   %eax
f012daea:	e8 61 9e fd ff       	call   f0107950 <kfree>
f012daef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012daf2:	e8 d1 62 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012daf7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dafd:	74 17                	je     f012db16 <test_krealloc+0x1eeb>
			panic(
f012daff:	83 ec 04             	sub    $0x4,%esp
f012db02:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012db07:	68 dc 10 00 00       	push   $0x10dc
f012db0c:	68 9a b2 13 f0       	push   $0xf013b29a
f012db11:	e8 ef 26 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012db16:	e8 82 f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012db1b:	89 c2                	mov    %eax,%edx
f012db1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db20:	29 c2                	sub    %eax,%edx
f012db22:	89 d0                	mov    %edx,%eax
f012db24:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012db29:	74 17                	je     f012db42 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012db2b:	83 ec 04             	sub    $0x4,%esp
f012db2e:	68 70 c7 13 f0       	push   $0xf013c770
f012db33:	68 de 10 00 00       	push   $0x10de
f012db38:	68 9a b2 13 f0       	push   $0xf013b29a
f012db3d:	e8 c3 26 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012db42:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012db49:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012db50:	eb 48                	jmp    f012db9a <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012db52:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012db55:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012db5a:	83 ec 04             	sub    $0x4,%esp
f012db5d:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012db63:	51                   	push   %ecx
f012db64:	52                   	push   %edx
f012db65:	50                   	push   %eax
f012db66:	e8 46 8f fd ff       	call   f0106ab1 <get_page_table>
f012db6b:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012db6e:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012db74:	85 c0                	test   %eax,%eax
f012db76:	75 17                	jne    f012db8f <test_krealloc+0x1f64>
					panic(
f012db78:	83 ec 04             	sub    $0x4,%esp
f012db7b:	68 9c bb 13 f0       	push   $0xf013bb9c
f012db80:	68 eb 10 00 00       	push   $0x10eb
f012db85:	68 9a b2 13 f0       	push   $0xf013b29a
f012db8a:	e8 76 26 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012db8f:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012db96:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012db9a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012db9e:	78 b2                	js     f012db52 <test_krealloc+0x1f27>
f012dba0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dba4:	7f 09                	jg     f012dbaf <test_krealloc+0x1f84>
f012dba6:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012dbad:	76 a3                	jbe    f012db52 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012dbaf:	83 ec 0c             	sub    $0xc,%esp
f012dbb2:	68 7e b4 13 f0       	push   $0xf013b47e
f012dbb7:	e8 52 31 fd ff       	call   f0100d0e <cprintf>
f012dbbc:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012dbbf:	83 ec 0c             	sub    $0xc,%esp
f012dbc2:	68 0c cb 13 f0       	push   $0xf013cb0c
f012dbc7:	e8 42 31 fd ff       	call   f0100d0e <cprintf>
f012dbcc:	83 c4 10             	add    $0x10,%esp
	return 0;
f012dbcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dbd4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012dbd7:	5b                   	pop    %ebx
f012dbd8:	5f                   	pop    %edi
f012dbd9:	5d                   	pop    %ebp
f012dbda:	c3                   	ret    

f012dbdb <test_krealloc_BF>:


int test_krealloc_BF() {
f012dbdb:	55                   	push   %ebp
f012dbdc:	89 e5                	mov    %esp,%ebp
f012dbde:	57                   	push   %edi
f012dbdf:	53                   	push   %ebx
f012dbe0:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012dbe6:	83 ec 0c             	sub    $0xc,%esp
f012dbe9:	68 dc b1 13 f0       	push   $0xf013b1dc
f012dbee:	e8 1b 31 fd ff       	call   f0100d0e <cprintf>
f012dbf3:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012dbf6:	83 ec 0c             	sub    $0xc,%esp
f012dbf9:	68 0c b2 13 f0       	push   $0xf013b20c
f012dbfe:	e8 0b 31 fd ff       	call   f0100d0e <cprintf>
f012dc03:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012dc06:	83 ec 0c             	sub    $0xc,%esp
f012dc09:	68 dc b1 13 f0       	push   $0xf013b1dc
f012dc0e:	e8 fb 30 fd ff       	call   f0100d0e <cprintf>
f012dc13:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012dc16:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012dc1a:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012dc1e:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012dc24:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012dc2a:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012dc31:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012dc38:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012dc3e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dc43:	b8 00 00 00 00       	mov    $0x0,%eax
f012dc48:	89 d7                	mov    %edx,%edi
f012dc4a:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012dc4c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012dc53:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012dc59:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dc5e:	b8 00 00 00 00       	mov    $0x0,%eax
f012dc63:	89 d7                	mov    %edx,%edi
f012dc65:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012dc67:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012dc6d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dc72:	b8 00 00 00 00       	mov    $0x0,%eax
f012dc77:	89 d7                	mov    %edx,%edi
f012dc79:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dc7b:	e8 1d ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc80:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012dc83:	83 ec 08             	sub    $0x8,%esp
f012dc86:	68 00 fc 0f 00       	push   $0xffc00
f012dc8b:	6a 00                	push   $0x0
f012dc8d:	e8 b3 9e fd ff       	call   f0107b45 <krealloc>
f012dc92:	83 c4 10             	add    $0x10,%esp
f012dc95:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012dc9b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dca1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dca6:	77 17                	ja     f012dcbf <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dca8:	83 ec 04             	sub    $0x4,%esp
f012dcab:	68 40 c5 13 f0       	push   $0xf013c540
f012dcb0:	68 1a 11 00 00       	push   $0x111a
f012dcb5:	68 9a b2 13 f0       	push   $0xf013b29a
f012dcba:	e8 46 25 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012dcbf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dcc5:	89 c1                	mov    %eax,%ecx
f012dcc7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012dcce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012dcd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dcd6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012dcd9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012dcdc:	ba 00 00 00 00       	mov    $0x0,%edx
f012dce1:	f7 75 b4             	divl   -0x4c(%ebp)
f012dce4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012dce7:	29 d0                	sub    %edx,%eax
f012dce9:	89 c3                	mov    %eax,%ebx
f012dceb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012dcf2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012dcf7:	0f b6 d0             	movzbl %al,%edx
f012dcfa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012dcfd:	01 d0                	add    %edx,%eax
f012dcff:	48                   	dec    %eax
f012dd00:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012dd03:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012dd06:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd0b:	f7 75 ac             	divl   -0x54(%ebp)
f012dd0e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012dd11:	29 d0                	sub    %edx,%eax
f012dd13:	01 c3                	add    %eax,%ebx
f012dd15:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012dd1c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012dd21:	0f b6 c0             	movzbl %al,%eax
f012dd24:	c1 e0 04             	shl    $0x4,%eax
f012dd27:	89 c2                	mov    %eax,%edx
f012dd29:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012dd2c:	01 d0                	add    %edx,%eax
f012dd2e:	48                   	dec    %eax
f012dd2f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012dd32:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012dd35:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd3a:	f7 75 a4             	divl   -0x5c(%ebp)
f012dd3d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012dd40:	29 d0                	sub    %edx,%eax
f012dd42:	01 d8                	add    %ebx,%eax
f012dd44:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012dd49:	39 c1                	cmp    %eax,%ecx
f012dd4b:	74 17                	je     f012dd64 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012dd4d:	83 ec 04             	sub    $0x4,%esp
f012dd50:	68 7c c5 13 f0       	push   $0xf013c57c
f012dd55:	68 1c 11 00 00       	push   $0x111c
f012dd5a:	68 9a b2 13 f0       	push   $0xf013b29a
f012dd5f:	e8 a1 24 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dd64:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd67:	e8 31 ee fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dd6c:	29 c3                	sub    %eax,%ebx
f012dd6e:	89 d8                	mov    %ebx,%eax
f012dd70:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dd75:	74 17                	je     f012dd8e <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012dd77:	83 ec 04             	sub    $0x4,%esp
f012dd7a:	68 ae c5 13 f0       	push   $0xf013c5ae
f012dd7f:	68 1f 11 00 00       	push   $0x111f
f012dd84:	68 9a b2 13 f0       	push   $0xf013b29a
f012dd89:	e8 77 24 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012dd8e:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012dd95:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dd98:	e8 00 ee fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dd9d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012dda0:	83 ec 08             	sub    $0x8,%esp
f012dda3:	68 00 fc 0f 00       	push   $0xffc00
f012dda8:	6a 00                	push   $0x0
f012ddaa:	e8 96 9d fd ff       	call   f0107b45 <krealloc>
f012ddaf:	83 c4 10             	add    $0x10,%esp
f012ddb2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012ddb8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ddbe:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012ddc3:	77 17                	ja     f012dddc <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddc5:	83 ec 04             	sub    $0x4,%esp
f012ddc8:	68 40 c5 13 f0       	push   $0xf013c540
f012ddcd:	68 27 11 00 00       	push   $0x1127
f012ddd2:	68 9a b2 13 f0       	push   $0xf013b29a
f012ddd7:	e8 29 24 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012dddc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012dde2:	89 c1                	mov    %eax,%ecx
f012dde4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012ddeb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012ddee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ddf3:	89 45 98             	mov    %eax,-0x68(%ebp)
f012ddf6:	8b 45 98             	mov    -0x68(%ebp),%eax
f012ddf9:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddfe:	f7 75 9c             	divl   -0x64(%ebp)
f012de01:	8b 45 98             	mov    -0x68(%ebp),%eax
f012de04:	29 d0                	sub    %edx,%eax
f012de06:	89 c3                	mov    %eax,%ebx
f012de08:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012de0f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012de14:	0f b6 d0             	movzbl %al,%edx
f012de17:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012de1a:	01 d0                	add    %edx,%eax
f012de1c:	48                   	dec    %eax
f012de1d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012de20:	8b 45 90             	mov    -0x70(%ebp),%eax
f012de23:	ba 00 00 00 00       	mov    $0x0,%edx
f012de28:	f7 75 94             	divl   -0x6c(%ebp)
f012de2b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012de2e:	29 d0                	sub    %edx,%eax
f012de30:	01 c3                	add    %eax,%ebx
f012de32:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012de39:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012de3e:	0f b6 c0             	movzbl %al,%eax
f012de41:	c1 e0 04             	shl    $0x4,%eax
f012de44:	89 c2                	mov    %eax,%edx
f012de46:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012de49:	01 d0                	add    %edx,%eax
f012de4b:	48                   	dec    %eax
f012de4c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012de4f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012de52:	ba 00 00 00 00       	mov    $0x0,%edx
f012de57:	f7 75 8c             	divl   -0x74(%ebp)
f012de5a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012de5d:	29 d0                	sub    %edx,%eax
f012de5f:	01 d8                	add    %ebx,%eax
f012de61:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012de66:	39 c1                	cmp    %eax,%ecx
f012de68:	74 17                	je     f012de81 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012de6a:	83 ec 04             	sub    $0x4,%esp
f012de6d:	68 7c c5 13 f0       	push   $0xf013c57c
f012de72:	68 29 11 00 00       	push   $0x1129
f012de77:	68 9a b2 13 f0       	push   $0xf013b29a
f012de7c:	e8 84 23 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012de81:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de84:	e8 14 ed fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012de89:	29 c3                	sub    %eax,%ebx
f012de8b:	89 d8                	mov    %ebx,%eax
f012de8d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012de92:	74 17                	je     f012deab <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012de94:	83 ec 04             	sub    $0x4,%esp
f012de97:	68 ae c5 13 f0       	push   $0xf013c5ae
f012de9c:	68 2b 11 00 00       	push   $0x112b
f012dea1:	68 9a b2 13 f0       	push   $0xf013b29a
f012dea6:	e8 5a 23 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012deab:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012deb2:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012deb5:	e8 e3 ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012deba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012debd:	83 ec 08             	sub    $0x8,%esp
f012dec0:	68 00 fc 0f 00       	push   $0xffc00
f012dec5:	6a 00                	push   $0x0
f012dec7:	e8 79 9c fd ff       	call   f0107b45 <krealloc>
f012decc:	83 c4 10             	add    $0x10,%esp
f012decf:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012ded5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dedb:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012dee0:	77 17                	ja     f012def9 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dee2:	83 ec 04             	sub    $0x4,%esp
f012dee5:	68 40 c5 13 f0       	push   $0xf013c540
f012deea:	68 33 11 00 00       	push   $0x1133
f012deef:	68 9a b2 13 f0       	push   $0xf013b29a
f012def4:	e8 0c 23 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012def9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012deff:	89 c1                	mov    %eax,%ecx
f012df01:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012df08:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012df0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df10:	89 45 80             	mov    %eax,-0x80(%ebp)
f012df13:	8b 45 80             	mov    -0x80(%ebp),%eax
f012df16:	ba 00 00 00 00       	mov    $0x0,%edx
f012df1b:	f7 75 84             	divl   -0x7c(%ebp)
f012df1e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012df21:	29 d0                	sub    %edx,%eax
f012df23:	89 c3                	mov    %eax,%ebx
f012df25:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012df2c:	10 00 00 
f012df2f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012df34:	0f b6 d0             	movzbl %al,%edx
f012df37:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012df3d:	01 d0                	add    %edx,%eax
f012df3f:	48                   	dec    %eax
f012df40:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012df46:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012df4c:	ba 00 00 00 00       	mov    $0x0,%edx
f012df51:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012df57:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012df5d:	29 d0                	sub    %edx,%eax
f012df5f:	01 c3                	add    %eax,%ebx
f012df61:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012df68:	10 00 00 
f012df6b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012df70:	0f b6 c0             	movzbl %al,%eax
f012df73:	c1 e0 04             	shl    $0x4,%eax
f012df76:	89 c2                	mov    %eax,%edx
f012df78:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012df7e:	01 d0                	add    %edx,%eax
f012df80:	48                   	dec    %eax
f012df81:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012df87:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012df8d:	ba 00 00 00 00       	mov    $0x0,%edx
f012df92:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012df98:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012df9e:	29 d0                	sub    %edx,%eax
f012dfa0:	01 d8                	add    %ebx,%eax
f012dfa2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012dfa7:	39 c1                	cmp    %eax,%ecx
f012dfa9:	74 17                	je     f012dfc2 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012dfab:	83 ec 04             	sub    $0x4,%esp
f012dfae:	68 7c c5 13 f0       	push   $0xf013c57c
f012dfb3:	68 35 11 00 00       	push   $0x1135
f012dfb8:	68 9a b2 13 f0       	push   $0xf013b29a
f012dfbd:	e8 43 22 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dfc2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dfc5:	e8 d3 eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dfca:	29 c3                	sub    %eax,%ebx
f012dfcc:	89 d8                	mov    %ebx,%eax
f012dfce:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dfd3:	74 17                	je     f012dfec <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012dfd5:	83 ec 04             	sub    $0x4,%esp
f012dfd8:	68 ae c5 13 f0       	push   $0xf013c5ae
f012dfdd:	68 37 11 00 00       	push   $0x1137
f012dfe2:	68 9a b2 13 f0       	push   $0xf013b29a
f012dfe7:	e8 19 22 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dfec:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012dff3:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dff6:	e8 a2 eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dffb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012dffe:	83 ec 08             	sub    $0x8,%esp
f012e001:	68 00 fc 0f 00       	push   $0xffc00
f012e006:	6a 00                	push   $0x0
f012e008:	e8 38 9b fd ff       	call   f0107b45 <krealloc>
f012e00d:	83 c4 10             	add    $0x10,%esp
f012e010:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e016:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e01c:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e021:	77 17                	ja     f012e03a <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e023:	83 ec 04             	sub    $0x4,%esp
f012e026:	68 40 c5 13 f0       	push   $0xf013c540
f012e02b:	68 3e 11 00 00       	push   $0x113e
f012e030:	68 9a b2 13 f0       	push   $0xf013b29a
f012e035:	e8 cb 21 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e03a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e040:	89 c1                	mov    %eax,%ecx
f012e042:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e049:	10 00 00 
f012e04c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e052:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e057:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e05d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e063:	ba 00 00 00 00       	mov    $0x0,%edx
f012e068:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e06e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e074:	29 d0                	sub    %edx,%eax
f012e076:	89 c3                	mov    %eax,%ebx
f012e078:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e07f:	10 00 00 
f012e082:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e087:	0f b6 d0             	movzbl %al,%edx
f012e08a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e090:	01 d0                	add    %edx,%eax
f012e092:	48                   	dec    %eax
f012e093:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e099:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e09f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0a4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e0aa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e0b0:	29 d0                	sub    %edx,%eax
f012e0b2:	01 c3                	add    %eax,%ebx
f012e0b4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e0bb:	10 00 00 
f012e0be:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e0c3:	0f b6 c0             	movzbl %al,%eax
f012e0c6:	c1 e0 04             	shl    $0x4,%eax
f012e0c9:	89 c2                	mov    %eax,%edx
f012e0cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e0d1:	01 d0                	add    %edx,%eax
f012e0d3:	48                   	dec    %eax
f012e0d4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e0da:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e0e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0e5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e0eb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e0f1:	29 d0                	sub    %edx,%eax
f012e0f3:	01 d8                	add    %ebx,%eax
f012e0f5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e0fa:	39 c1                	cmp    %eax,%ecx
f012e0fc:	74 17                	je     f012e115 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e0fe:	83 ec 04             	sub    $0x4,%esp
f012e101:	68 7c c5 13 f0       	push   $0xf013c57c
f012e106:	68 40 11 00 00       	push   $0x1140
f012e10b:	68 9a b2 13 f0       	push   $0xf013b29a
f012e110:	e8 f0 20 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e115:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e118:	e8 80 ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e11d:	29 c3                	sub    %eax,%ebx
f012e11f:	89 d8                	mov    %ebx,%eax
f012e121:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e126:	74 17                	je     f012e13f <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e128:	83 ec 04             	sub    $0x4,%esp
f012e12b:	68 ae c5 13 f0       	push   $0xf013c5ae
f012e130:	68 42 11 00 00       	push   $0x1142
f012e135:	68 9a b2 13 f0       	push   $0xf013b29a
f012e13a:	e8 c6 20 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e13f:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e146:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e149:	e8 4f ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e14e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e151:	83 ec 08             	sub    $0x8,%esp
f012e154:	68 00 fc 1f 00       	push   $0x1ffc00
f012e159:	6a 00                	push   $0x0
f012e15b:	e8 e5 99 fd ff       	call   f0107b45 <krealloc>
f012e160:	83 c4 10             	add    $0x10,%esp
f012e163:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e169:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e16f:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e174:	77 17                	ja     f012e18d <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e176:	83 ec 04             	sub    $0x4,%esp
f012e179:	68 40 c5 13 f0       	push   $0xf013c540
f012e17e:	68 49 11 00 00       	push   $0x1149
f012e183:	68 9a b2 13 f0       	push   $0xf013b29a
f012e188:	e8 78 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e18d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e193:	89 c1                	mov    %eax,%ecx
f012e195:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e19c:	10 00 00 
f012e19f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e1a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e1aa:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e1b0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e1b6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1bb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e1c1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e1c7:	29 d0                	sub    %edx,%eax
f012e1c9:	89 c3                	mov    %eax,%ebx
f012e1cb:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e1d2:	10 00 00 
f012e1d5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e1da:	0f b6 d0             	movzbl %al,%edx
f012e1dd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e1e3:	01 d0                	add    %edx,%eax
f012e1e5:	48                   	dec    %eax
f012e1e6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e1ec:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e1f2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1f7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e1fd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e203:	29 d0                	sub    %edx,%eax
f012e205:	01 c3                	add    %eax,%ebx
f012e207:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e20e:	10 00 00 
f012e211:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e216:	0f b6 c0             	movzbl %al,%eax
f012e219:	c1 e0 04             	shl    $0x4,%eax
f012e21c:	89 c2                	mov    %eax,%edx
f012e21e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e224:	01 d0                	add    %edx,%eax
f012e226:	48                   	dec    %eax
f012e227:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e22d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e233:	ba 00 00 00 00       	mov    $0x0,%edx
f012e238:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e23e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e244:	29 d0                	sub    %edx,%eax
f012e246:	01 d8                	add    %ebx,%eax
f012e248:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e24d:	39 c1                	cmp    %eax,%ecx
f012e24f:	74 17                	je     f012e268 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e251:	83 ec 04             	sub    $0x4,%esp
f012e254:	68 7c c5 13 f0       	push   $0xf013c57c
f012e259:	68 4b 11 00 00       	push   $0x114b
f012e25e:	68 9a b2 13 f0       	push   $0xf013b29a
f012e263:	e8 9d 1f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e268:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e26b:	e8 2d e9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e270:	29 c3                	sub    %eax,%ebx
f012e272:	89 d8                	mov    %ebx,%eax
f012e274:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e279:	74 17                	je     f012e292 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e27b:	83 ec 04             	sub    $0x4,%esp
f012e27e:	68 ae c5 13 f0       	push   $0xf013c5ae
f012e283:	68 4d 11 00 00       	push   $0x114d
f012e288:	68 9a b2 13 f0       	push   $0xf013b29a
f012e28d:	e8 73 1f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e292:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e299:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e29c:	e8 fc e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e2a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e2a4:	83 ec 08             	sub    $0x8,%esp
f012e2a7:	68 00 fc 1f 00       	push   $0x1ffc00
f012e2ac:	6a 00                	push   $0x0
f012e2ae:	e8 92 98 fd ff       	call   f0107b45 <krealloc>
f012e2b3:	83 c4 10             	add    $0x10,%esp
f012e2b6:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e2bc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e2c2:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e2c7:	77 17                	ja     f012e2e0 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e2c9:	83 ec 04             	sub    $0x4,%esp
f012e2cc:	68 40 c5 13 f0       	push   $0xf013c540
f012e2d1:	68 54 11 00 00       	push   $0x1154
f012e2d6:	68 9a b2 13 f0       	push   $0xf013b29a
f012e2db:	e8 25 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e2e0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e2e6:	89 c1                	mov    %eax,%ecx
f012e2e8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e2ef:	10 00 00 
f012e2f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e2f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e2fd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e303:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e309:	ba 00 00 00 00       	mov    $0x0,%edx
f012e30e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e314:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e31a:	29 d0                	sub    %edx,%eax
f012e31c:	89 c3                	mov    %eax,%ebx
f012e31e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e325:	10 00 00 
f012e328:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e32d:	0f b6 d0             	movzbl %al,%edx
f012e330:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e336:	01 d0                	add    %edx,%eax
f012e338:	48                   	dec    %eax
f012e339:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e33f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e345:	ba 00 00 00 00       	mov    $0x0,%edx
f012e34a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e350:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e356:	29 d0                	sub    %edx,%eax
f012e358:	01 c3                	add    %eax,%ebx
f012e35a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e361:	10 00 00 
f012e364:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e369:	0f b6 c0             	movzbl %al,%eax
f012e36c:	c1 e0 04             	shl    $0x4,%eax
f012e36f:	89 c2                	mov    %eax,%edx
f012e371:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e377:	01 d0                	add    %edx,%eax
f012e379:	48                   	dec    %eax
f012e37a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e380:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e386:	ba 00 00 00 00       	mov    $0x0,%edx
f012e38b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e391:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e397:	29 d0                	sub    %edx,%eax
f012e399:	01 d8                	add    %ebx,%eax
f012e39b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e3a0:	39 c1                	cmp    %eax,%ecx
f012e3a2:	74 17                	je     f012e3bb <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e3a4:	83 ec 04             	sub    $0x4,%esp
f012e3a7:	68 7c c5 13 f0       	push   $0xf013c57c
f012e3ac:	68 56 11 00 00       	push   $0x1156
f012e3b1:	68 9a b2 13 f0       	push   $0xf013b29a
f012e3b6:	e8 4a 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e3bb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e3be:	e8 da e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e3c3:	29 c3                	sub    %eax,%ebx
f012e3c5:	89 d8                	mov    %ebx,%eax
f012e3c7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e3cc:	74 17                	je     f012e3e5 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e3ce:	83 ec 04             	sub    $0x4,%esp
f012e3d1:	68 ae c5 13 f0       	push   $0xf013c5ae
f012e3d6:	68 58 11 00 00       	push   $0x1158
f012e3db:	68 9a b2 13 f0       	push   $0xf013b29a
f012e3e0:	e8 20 1e fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e3e5:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e3ec:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e3ef:	e8 a9 e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e3f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e3f7:	83 ec 08             	sub    $0x8,%esp
f012e3fa:	68 00 fc 2f 00       	push   $0x2ffc00
f012e3ff:	6a 00                	push   $0x0
f012e401:	e8 3f 97 fd ff       	call   f0107b45 <krealloc>
f012e406:	83 c4 10             	add    $0x10,%esp
f012e409:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e40f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e415:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e41a:	77 17                	ja     f012e433 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e41c:	83 ec 04             	sub    $0x4,%esp
f012e41f:	68 40 c5 13 f0       	push   $0xf013c540
f012e424:	68 5f 11 00 00       	push   $0x115f
f012e429:	68 9a b2 13 f0       	push   $0xf013b29a
f012e42e:	e8 d2 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e433:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e439:	89 c1                	mov    %eax,%ecx
f012e43b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e442:	10 00 00 
f012e445:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e44b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e450:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e456:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e45c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e461:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e467:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e46d:	29 d0                	sub    %edx,%eax
f012e46f:	89 c3                	mov    %eax,%ebx
f012e471:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e478:	10 00 00 
f012e47b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e480:	0f b6 d0             	movzbl %al,%edx
f012e483:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e489:	01 d0                	add    %edx,%eax
f012e48b:	48                   	dec    %eax
f012e48c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e492:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e498:	ba 00 00 00 00       	mov    $0x0,%edx
f012e49d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e4a3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e4a9:	29 d0                	sub    %edx,%eax
f012e4ab:	01 c3                	add    %eax,%ebx
f012e4ad:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e4b4:	10 00 00 
f012e4b7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e4bc:	0f b6 c0             	movzbl %al,%eax
f012e4bf:	c1 e0 04             	shl    $0x4,%eax
f012e4c2:	89 c2                	mov    %eax,%edx
f012e4c4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e4ca:	01 d0                	add    %edx,%eax
f012e4cc:	48                   	dec    %eax
f012e4cd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e4d3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e4d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4de:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e4e4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e4ea:	29 d0                	sub    %edx,%eax
f012e4ec:	01 d8                	add    %ebx,%eax
f012e4ee:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e4f3:	39 c1                	cmp    %eax,%ecx
f012e4f5:	74 17                	je     f012e50e <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e4f7:	83 ec 04             	sub    $0x4,%esp
f012e4fa:	68 7c c5 13 f0       	push   $0xf013c57c
f012e4ff:	68 61 11 00 00       	push   $0x1161
f012e504:	68 9a b2 13 f0       	push   $0xf013b29a
f012e509:	e8 f7 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e50e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e511:	e8 87 e6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e516:	29 c3                	sub    %eax,%ebx
f012e518:	89 d8                	mov    %ebx,%eax
f012e51a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e51f:	74 17                	je     f012e538 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e521:	83 ec 04             	sub    $0x4,%esp
f012e524:	68 e4 b6 13 f0       	push   $0xf013b6e4
f012e529:	68 63 11 00 00       	push   $0x1163
f012e52e:	68 9a b2 13 f0       	push   $0xf013b29a
f012e533:	e8 cd 1c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e538:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e53f:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e542:	e8 56 e6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e547:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e54a:	83 ec 08             	sub    $0x8,%esp
f012e54d:	68 00 fc 2f 00       	push   $0x2ffc00
f012e552:	6a 00                	push   $0x0
f012e554:	e8 ec 95 fd ff       	call   f0107b45 <krealloc>
f012e559:	83 c4 10             	add    $0x10,%esp
f012e55c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e562:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e568:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e56d:	77 17                	ja     f012e586 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e56f:	83 ec 04             	sub    $0x4,%esp
f012e572:	68 40 c5 13 f0       	push   $0xf013c540
f012e577:	68 6a 11 00 00       	push   $0x116a
f012e57c:	68 9a b2 13 f0       	push   $0xf013b29a
f012e581:	e8 7f 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e586:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e58c:	89 c1                	mov    %eax,%ecx
f012e58e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e595:	10 00 00 
f012e598:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e59e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5a3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e5a9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e5af:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5b4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e5ba:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e5c0:	29 d0                	sub    %edx,%eax
f012e5c2:	89 c3                	mov    %eax,%ebx
f012e5c4:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e5cb:	10 00 00 
f012e5ce:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e5d3:	0f b6 d0             	movzbl %al,%edx
f012e5d6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e5dc:	01 d0                	add    %edx,%eax
f012e5de:	48                   	dec    %eax
f012e5df:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e5e5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e5eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5f0:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e5f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e5fc:	29 d0                	sub    %edx,%eax
f012e5fe:	01 c3                	add    %eax,%ebx
f012e600:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e607:	10 00 00 
f012e60a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e60f:	0f b6 c0             	movzbl %al,%eax
f012e612:	c1 e0 04             	shl    $0x4,%eax
f012e615:	89 c2                	mov    %eax,%edx
f012e617:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e61d:	01 d0                	add    %edx,%eax
f012e61f:	48                   	dec    %eax
f012e620:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e626:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e62c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e631:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e637:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e63d:	29 d0                	sub    %edx,%eax
f012e63f:	01 d8                	add    %ebx,%eax
f012e641:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e646:	39 c1                	cmp    %eax,%ecx
f012e648:	74 17                	je     f012e661 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e64a:	83 ec 04             	sub    $0x4,%esp
f012e64d:	68 7c c5 13 f0       	push   $0xf013c57c
f012e652:	68 6c 11 00 00       	push   $0x116c
f012e657:	68 9a b2 13 f0       	push   $0xf013b29a
f012e65c:	e8 a4 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e661:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e664:	e8 34 e5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e669:	29 c3                	sub    %eax,%ebx
f012e66b:	89 d8                	mov    %ebx,%eax
f012e66d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e672:	74 17                	je     f012e68b <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e674:	83 ec 04             	sub    $0x4,%esp
f012e677:	68 ae c5 13 f0       	push   $0xf013c5ae
f012e67c:	68 6e 11 00 00       	push   $0x116e
f012e681:	68 9a b2 13 f0       	push   $0xf013b29a
f012e686:	e8 7a 1b fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e68b:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e692:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e695:	e8 03 e5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e69a:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e69d:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e6a4:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e6a7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e6ad:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e6b3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e6b9:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e6bc:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e6be:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e6c4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e6ca:	01 c2                	add    %eax,%edx
f012e6cc:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e6cf:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e6d1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6d7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e6dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e6e4:	eb 11                	jmp    f012e6f7 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e6e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e6e9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e6ef:	01 d0                	add    %edx,%eax
f012e6f1:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e6f4:	ff 45 f4             	incl   -0xc(%ebp)
f012e6f7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e6fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e700:	7d e4                	jge    f012e6e6 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e702:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e708:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e70e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e714:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e71a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e720:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e727:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e72d:	01 d0                	add    %edx,%eax
f012e72f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e735:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e73b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e741:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e748:	eb 1b                	jmp    f012e765 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e74a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e74d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e754:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e75a:	01 d0                	add    %edx,%eax
f012e75c:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e762:	ff 45 f0             	incl   -0x10(%ebp)
f012e765:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e76b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e76e:	7d da                	jge    f012e74a <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e770:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e776:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e77c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e783:	eb 17                	jmp    f012e79c <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e785:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e788:	01 c0                	add    %eax,%eax
f012e78a:	89 c2                	mov    %eax,%edx
f012e78c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e792:	01 d0                	add    %edx,%eax
f012e794:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e799:	ff 45 ec             	incl   -0x14(%ebp)
f012e79c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e7a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e7a5:	7d de                	jge    f012e785 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e7a7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e7ad:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e7b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7b9:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e7be:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e7c4:	01 c0                	add    %eax,%eax
f012e7c6:	89 c2                	mov    %eax,%edx
f012e7c8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7ce:	01 d0                	add    %edx,%eax
f012e7d0:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e7d5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e7db:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e7e1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e7e8:	eb 49                	jmp    f012e833 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e7ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e7ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e7f4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e7fa:	01 d0                	add    %edx,%eax
f012e7fc:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e7ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e802:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e809:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e80f:	01 d0                	add    %edx,%eax
f012e811:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e817:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e81a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e821:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e827:	01 d0                	add    %edx,%eax
f012e829:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e830:	ff 45 e8             	incl   -0x18(%ebp)
f012e833:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e839:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e83c:	7d ac                	jge    f012e7ea <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e83e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e844:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e84a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e850:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e853:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e859:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e85f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e865:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e86c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e872:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e879:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e87f:	01 d0                	add    %edx,%eax
f012e881:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e884:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e88a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e891:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e897:	01 d0                	add    %edx,%eax
f012e899:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e89f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e8a5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e8ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8b2:	01 d0                	add    %edx,%eax
f012e8b4:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e8bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e8c1:	8a 00                	mov    (%eax),%al
f012e8c3:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e8c6:	75 17                	jne    f012e8df <test_krealloc_BF+0xd04>
f012e8c8:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e8ce:	89 c2                	mov    %eax,%edx
f012e8d0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e8d6:	01 d0                	add    %edx,%eax
f012e8d8:	8a 00                	mov    (%eax),%al
f012e8da:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e8dd:	74 17                	je     f012e8f6 <test_krealloc_BF+0xd1b>
			panic(
f012e8df:	83 ec 04             	sub    $0x4,%esp
f012e8e2:	68 cc c5 13 f0       	push   $0xf013c5cc
f012e8e7:	68 b1 11 00 00       	push   $0x11b1
f012e8ec:	68 9a b2 13 f0       	push   $0xf013b29a
f012e8f1:	e8 0f 19 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e8f6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e8fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e902:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e908:	8a 00                	mov    (%eax),%al
f012e90a:	3c 02                	cmp    $0x2,%al
f012e90c:	75 16                	jne    f012e924 <test_krealloc_BF+0xd49>
f012e90e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e914:	89 c2                	mov    %eax,%edx
f012e916:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e91c:	01 d0                	add    %edx,%eax
f012e91e:	8a 00                	mov    (%eax),%al
f012e920:	3c 02                	cmp    $0x2,%al
f012e922:	74 20                	je     f012e944 <test_krealloc_BF+0xd69>
			panic(
f012e924:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e92a:	8a 00                	mov    (%eax),%al
f012e92c:	0f be c0             	movsbl %al,%eax
f012e92f:	50                   	push   %eax
f012e930:	68 0c c6 13 f0       	push   $0xf013c60c
f012e935:	68 b7 11 00 00       	push   $0x11b7
f012e93a:	68 9a b2 13 f0       	push   $0xf013b29a
f012e93f:	e8 c1 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e944:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e94a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e950:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e956:	8b 00                	mov    (%eax),%eax
f012e958:	83 f8 03             	cmp    $0x3,%eax
f012e95b:	75 1c                	jne    f012e979 <test_krealloc_BF+0xd9e>
f012e95d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e963:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e96a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e970:	01 d0                	add    %edx,%eax
f012e972:	8b 00                	mov    (%eax),%eax
f012e974:	83 f8 03             	cmp    $0x3,%eax
f012e977:	74 17                	je     f012e990 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e979:	83 ec 04             	sub    $0x4,%esp
f012e97c:	68 58 c6 13 f0       	push   $0xf013c658
f012e981:	68 bb 11 00 00       	push   $0x11bb
f012e986:	68 9a b2 13 f0       	push   $0xf013b29a
f012e98b:	e8 75 18 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012e990:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e996:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e99c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e9a2:	8b 00                	mov    (%eax),%eax
f012e9a4:	83 f8 04             	cmp    $0x4,%eax
f012e9a7:	75 1c                	jne    f012e9c5 <test_krealloc_BF+0xdea>
f012e9a9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e9af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e9b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e9bc:	01 d0                	add    %edx,%eax
f012e9be:	8b 00                	mov    (%eax),%eax
f012e9c0:	83 f8 04             	cmp    $0x4,%eax
f012e9c3:	74 17                	je     f012e9dc <test_krealloc_BF+0xe01>
			panic(
f012e9c5:	83 ec 04             	sub    $0x4,%esp
f012e9c8:	68 cc c5 13 f0       	push   $0xf013c5cc
f012e9cd:	68 c0 11 00 00       	push   $0x11c0
f012e9d2:	68 9a b2 13 f0       	push   $0xf013b29a
f012e9d7:	e8 29 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e9dc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e9e2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e9e8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e9ee:	66 8b 00             	mov    (%eax),%ax
f012e9f1:	66 83 f8 05          	cmp    $0x5,%ax
f012e9f5:	75 1b                	jne    f012ea12 <test_krealloc_BF+0xe37>
f012e9f7:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e9fd:	01 c0                	add    %eax,%eax
f012e9ff:	89 c2                	mov    %eax,%edx
f012ea01:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ea07:	01 d0                	add    %edx,%eax
f012ea09:	66 8b 00             	mov    (%eax),%ax
f012ea0c:	66 83 f8 05          	cmp    $0x5,%ax
f012ea10:	74 17                	je     f012ea29 <test_krealloc_BF+0xe4e>
			panic(
f012ea12:	83 ec 04             	sub    $0x4,%esp
f012ea15:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ea1a:	68 c5 11 00 00       	push   $0x11c5
f012ea1f:	68 9a b2 13 f0       	push   $0xf013b29a
f012ea24:	e8 dc 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ea29:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ea2f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ea35:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ea3b:	66 8b 00             	mov    (%eax),%ax
f012ea3e:	66 83 f8 06          	cmp    $0x6,%ax
f012ea42:	75 1b                	jne    f012ea5f <test_krealloc_BF+0xe84>
f012ea44:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ea4a:	01 c0                	add    %eax,%eax
f012ea4c:	89 c2                	mov    %eax,%edx
f012ea4e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ea54:	01 d0                	add    %edx,%eax
f012ea56:	66 8b 00             	mov    (%eax),%ax
f012ea59:	66 83 f8 06          	cmp    $0x6,%ax
f012ea5d:	74 17                	je     f012ea76 <test_krealloc_BF+0xe9b>
			panic(
f012ea5f:	83 ec 04             	sub    $0x4,%esp
f012ea62:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ea67:	68 ca 11 00 00       	push   $0x11ca
f012ea6c:	68 9a b2 13 f0       	push   $0xf013b29a
f012ea71:	e8 8f 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ea76:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ea7c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ea82:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ea88:	8a 00                	mov    (%eax),%al
f012ea8a:	3c 07                	cmp    $0x7,%al
f012ea8c:	75 1b                	jne    f012eaa9 <test_krealloc_BF+0xece>
f012ea8e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ea94:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ea9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eaa1:	01 d0                	add    %edx,%eax
f012eaa3:	8a 00                	mov    (%eax),%al
f012eaa5:	3c 07                	cmp    $0x7,%al
f012eaa7:	74 17                	je     f012eac0 <test_krealloc_BF+0xee5>
			panic(
f012eaa9:	83 ec 04             	sub    $0x4,%esp
f012eaac:	68 cc c5 13 f0       	push   $0xf013c5cc
f012eab1:	68 cf 11 00 00       	push   $0x11cf
f012eab6:	68 9a b2 13 f0       	push   $0xf013b29a
f012eabb:	e8 45 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012eac0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eac6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eaca:	66 83 f8 07          	cmp    $0x7,%ax
f012eace:	75 1f                	jne    f012eaef <test_krealloc_BF+0xf14>
f012ead0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ead6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eadd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eae3:	01 d0                	add    %edx,%eax
f012eae5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eae9:	66 83 f8 07          	cmp    $0x7,%ax
f012eaed:	74 17                	je     f012eb06 <test_krealloc_BF+0xf2b>
			panic(
f012eaef:	83 ec 04             	sub    $0x4,%esp
f012eaf2:	68 cc c5 13 f0       	push   $0xf013c5cc
f012eaf7:	68 d2 11 00 00       	push   $0x11d2
f012eafc:	68 9a b2 13 f0       	push   $0xf013b29a
f012eb01:	e8 ff 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012eb06:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb0c:	8b 40 04             	mov    0x4(%eax),%eax
f012eb0f:	83 f8 07             	cmp    $0x7,%eax
f012eb12:	75 1d                	jne    f012eb31 <test_krealloc_BF+0xf56>
f012eb14:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb1a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb21:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb27:	01 d0                	add    %edx,%eax
f012eb29:	8b 40 04             	mov    0x4(%eax),%eax
f012eb2c:	83 f8 07             	cmp    $0x7,%eax
f012eb2f:	74 17                	je     f012eb48 <test_krealloc_BF+0xf6d>
			panic(
f012eb31:	83 ec 04             	sub    $0x4,%esp
f012eb34:	68 cc c5 13 f0       	push   $0xf013c5cc
f012eb39:	68 d5 11 00 00       	push   $0x11d5
f012eb3e:	68 9a b2 13 f0       	push   $0xf013b29a
f012eb43:	e8 bd 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012eb48:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eb4e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012eb54:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb5a:	8a 00                	mov    (%eax),%al
f012eb5c:	3c 08                	cmp    $0x8,%al
f012eb5e:	75 1b                	jne    f012eb7b <test_krealloc_BF+0xfa0>
f012eb60:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012eb66:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb6d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb73:	01 d0                	add    %edx,%eax
f012eb75:	8a 00                	mov    (%eax),%al
f012eb77:	3c 08                	cmp    $0x8,%al
f012eb79:	74 17                	je     f012eb92 <test_krealloc_BF+0xfb7>
			panic(
f012eb7b:	83 ec 04             	sub    $0x4,%esp
f012eb7e:	68 cc c5 13 f0       	push   $0xf013c5cc
f012eb83:	68 da 11 00 00       	push   $0x11da
f012eb88:	68 9a b2 13 f0       	push   $0xf013b29a
f012eb8d:	e8 73 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012eb92:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb98:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eb9c:	66 83 f8 08          	cmp    $0x8,%ax
f012eba0:	75 1f                	jne    f012ebc1 <test_krealloc_BF+0xfe6>
f012eba2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012eba8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ebaf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebb5:	01 d0                	add    %edx,%eax
f012ebb7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ebbb:	66 83 f8 08          	cmp    $0x8,%ax
f012ebbf:	74 17                	je     f012ebd8 <test_krealloc_BF+0xffd>
			panic(
f012ebc1:	83 ec 04             	sub    $0x4,%esp
f012ebc4:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ebc9:	68 dd 11 00 00       	push   $0x11dd
f012ebce:	68 9a b2 13 f0       	push   $0xf013b29a
f012ebd3:	e8 2d 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ebd8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebde:	8b 40 04             	mov    0x4(%eax),%eax
f012ebe1:	83 f8 08             	cmp    $0x8,%eax
f012ebe4:	75 1d                	jne    f012ec03 <test_krealloc_BF+0x1028>
f012ebe6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ebec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ebf3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebf9:	01 d0                	add    %edx,%eax
f012ebfb:	8b 40 04             	mov    0x4(%eax),%eax
f012ebfe:	83 f8 08             	cmp    $0x8,%eax
f012ec01:	74 17                	je     f012ec1a <test_krealloc_BF+0x103f>
			panic(
f012ec03:	83 ec 04             	sub    $0x4,%esp
f012ec06:	68 cc c5 13 f0       	push   $0xf013c5cc
f012ec0b:	68 e0 11 00 00       	push   $0x11e0
f012ec10:	68 9a b2 13 f0       	push   $0xf013b29a
f012ec15:	e8 eb 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ec1a:	e8 7e df fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ec1f:	89 c2                	mov    %eax,%edx
f012ec21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ec24:	39 c2                	cmp    %eax,%edx
f012ec26:	74 17                	je     f012ec3f <test_krealloc_BF+0x1064>
			panic(
f012ec28:	83 ec 04             	sub    $0x4,%esp
f012ec2b:	68 8c c6 13 f0       	push   $0xf013c68c
f012ec30:	68 e4 11 00 00       	push   $0x11e4
f012ec35:	68 9a b2 13 f0       	push   $0xf013b29a
f012ec3a:	e8 c6 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ec3f:	83 ec 0c             	sub    $0xc,%esp
f012ec42:	68 d8 c6 13 f0       	push   $0xf013c6d8
f012ec47:	e8 c2 20 fd ff       	call   f0100d0e <cprintf>
f012ec4c:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ec4f:	e8 49 df fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ec54:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ec57:	e8 6c 51 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ec5c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ec62:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ec68:	83 ec 08             	sub    $0x8,%esp
f012ec6b:	6a 00                	push   $0x0
f012ec6d:	50                   	push   %eax
f012ec6e:	e8 d2 8e fd ff       	call   f0107b45 <krealloc>
f012ec73:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ec76:	e8 4d 51 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ec7b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ec81:	74 17                	je     f012ec9a <test_krealloc_BF+0x10bf>
			panic(
f012ec83:	83 ec 04             	sub    $0x4,%esp
f012ec86:	68 fc c6 13 f0       	push   $0xf013c6fc
f012ec8b:	68 f1 11 00 00       	push   $0x11f1
f012ec90:	68 9a b2 13 f0       	push   $0xf013b29a
f012ec95:	e8 6b 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ec9a:	e8 fe de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ec9f:	89 c2                	mov    %eax,%edx
f012eca1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eca4:	29 c2                	sub    %eax,%edx
f012eca6:	89 d0                	mov    %edx,%eax
f012eca8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ecad:	74 17                	je     f012ecc6 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ecaf:	83 ec 04             	sub    $0x4,%esp
f012ecb2:	68 70 c7 13 f0       	push   $0xf013c770
f012ecb7:	68 f3 11 00 00       	push   $0x11f3
f012ecbc:	68 9a b2 13 f0       	push   $0xf013b29a
f012ecc1:	e8 3f 15 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ecc6:	e8 d2 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eccb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ecce:	e8 f5 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ecd3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ecd9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ecdf:	83 ec 08             	sub    $0x8,%esp
f012ece2:	6a 00                	push   $0x0
f012ece4:	50                   	push   %eax
f012ece5:	e8 5b 8e fd ff       	call   f0107b45 <krealloc>
f012ecea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eced:	e8 d6 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ecf2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ecf8:	74 17                	je     f012ed11 <test_krealloc_BF+0x1136>
			panic(
f012ecfa:	83 ec 04             	sub    $0x4,%esp
f012ecfd:	68 fc c6 13 f0       	push   $0xf013c6fc
f012ed02:	68 fc 11 00 00       	push   $0x11fc
f012ed07:	68 9a b2 13 f0       	push   $0xf013b29a
f012ed0c:	e8 f4 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ed11:	e8 87 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed16:	89 c2                	mov    %eax,%edx
f012ed18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed1b:	29 c2                	sub    %eax,%edx
f012ed1d:	89 d0                	mov    %edx,%eax
f012ed1f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ed24:	74 17                	je     f012ed3d <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012ed26:	83 ec 04             	sub    $0x4,%esp
f012ed29:	68 70 c7 13 f0       	push   $0xf013c770
f012ed2e:	68 fe 11 00 00       	push   $0x11fe
f012ed33:	68 9a b2 13 f0       	push   $0xf013b29a
f012ed38:	e8 c8 14 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ed3d:	e8 5b de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed42:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ed45:	e8 7e 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ed4a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ed50:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ed56:	83 ec 08             	sub    $0x8,%esp
f012ed59:	6a 00                	push   $0x0
f012ed5b:	50                   	push   %eax
f012ed5c:	e8 e4 8d fd ff       	call   f0107b45 <krealloc>
f012ed61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ed64:	e8 5f 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ed69:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ed6f:	74 17                	je     f012ed88 <test_krealloc_BF+0x11ad>
			panic(
f012ed71:	83 ec 04             	sub    $0x4,%esp
f012ed74:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012ed79:	68 06 12 00 00       	push   $0x1206
f012ed7e:	68 9a b2 13 f0       	push   $0xf013b29a
f012ed83:	e8 7d 14 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ed88:	e8 10 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed8d:	89 c2                	mov    %eax,%edx
f012ed8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed92:	29 c2                	sub    %eax,%edx
f012ed94:	89 d0                	mov    %edx,%eax
f012ed96:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ed9b:	74 17                	je     f012edb4 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012ed9d:	83 ec 04             	sub    $0x4,%esp
f012eda0:	68 70 c7 13 f0       	push   $0xf013c770
f012eda5:	68 08 12 00 00       	push   $0x1208
f012edaa:	68 9a b2 13 f0       	push   $0xf013b29a
f012edaf:	e8 51 14 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012edb4:	e8 e4 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012edb9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012edbc:	e8 07 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012edc1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012edc7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012edcd:	83 ec 08             	sub    $0x8,%esp
f012edd0:	6a 00                	push   $0x0
f012edd2:	50                   	push   %eax
f012edd3:	e8 6d 8d fd ff       	call   f0107b45 <krealloc>
f012edd8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eddb:	e8 e8 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ede0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ede6:	74 17                	je     f012edff <test_krealloc_BF+0x1224>
			panic(
f012ede8:	83 ec 04             	sub    $0x4,%esp
f012edeb:	68 fc c6 13 f0       	push   $0xf013c6fc
f012edf0:	68 10 12 00 00       	push   $0x1210
f012edf5:	68 9a b2 13 f0       	push   $0xf013b29a
f012edfa:	e8 06 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012edff:	e8 99 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee04:	89 c2                	mov    %eax,%edx
f012ee06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee09:	29 c2                	sub    %eax,%edx
f012ee0b:	89 d0                	mov    %edx,%eax
f012ee0d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ee12:	74 17                	je     f012ee2b <test_krealloc_BF+0x1250>
			panic(
f012ee14:	83 ec 04             	sub    $0x4,%esp
f012ee17:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012ee1c:	68 13 12 00 00       	push   $0x1213
f012ee21:	68 9a b2 13 f0       	push   $0xf013b29a
f012ee26:	e8 da 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ee2b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ee32:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ee39:	eb 48                	jmp    f012ee83 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ee3b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ee3e:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012ee43:	83 ec 04             	sub    $0x4,%esp
f012ee46:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012ee4c:	51                   	push   %ecx
f012ee4d:	52                   	push   %edx
f012ee4e:	50                   	push   %eax
f012ee4f:	e8 5d 7c fd ff       	call   f0106ab1 <get_page_table>
f012ee54:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ee57:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ee5d:	85 c0                	test   %eax,%eax
f012ee5f:	75 17                	jne    f012ee78 <test_krealloc_BF+0x129d>
					panic(
f012ee61:	83 ec 04             	sub    $0x4,%esp
f012ee64:	68 9c bb 13 f0       	push   $0xf013bb9c
f012ee69:	68 1f 12 00 00       	push   $0x121f
f012ee6e:	68 9a b2 13 f0       	push   $0xf013b29a
f012ee73:	e8 8d 13 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ee78:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ee7f:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012ee83:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ee87:	78 b2                	js     f012ee3b <test_krealloc_BF+0x1260>
f012ee89:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ee8d:	7f 09                	jg     f012ee98 <test_krealloc_BF+0x12bd>
f012ee8f:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ee96:	76 a3                	jbe    f012ee3b <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ee98:	83 ec 0c             	sub    $0xc,%esp
f012ee9b:	68 e3 c7 13 f0       	push   $0xf013c7e3
f012eea0:	e8 69 1e fd ff       	call   f0100d0e <cprintf>
f012eea5:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012eea8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eeae:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012eeb4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eebb:	eb 21                	jmp    f012eede <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012eebd:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eec3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012eec6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eecc:	01 c8                	add    %ecx,%eax
f012eece:	8a 00                	mov    (%eax),%al
f012eed0:	0f be c0             	movsbl %al,%eax
f012eed3:	01 d0                	add    %edx,%eax
f012eed5:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012eedb:	ff 45 dc             	incl   -0x24(%ebp)
f012eede:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eee4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eee7:	7d d4                	jge    f012eebd <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012eee9:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012eeef:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012eef5:	42                   	inc    %edx
f012eef6:	01 d2                	add    %edx,%edx
f012eef8:	39 d0                	cmp    %edx,%eax
f012eefa:	74 17                	je     f012ef13 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012eefc:	83 ec 04             	sub    $0x4,%esp
f012eeff:	68 ec c7 13 f0       	push   $0xf013c7ec
f012ef04:	68 31 12 00 00       	push   $0x1231
f012ef09:	68 9a b2 13 f0       	push   $0xf013b29a
f012ef0e:	e8 f2 12 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ef13:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ef19:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ef1f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ef26:	eb 25                	jmp    f012ef4d <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012ef28:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ef2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ef31:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ef38:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ef3e:	01 c8                	add    %ecx,%eax
f012ef40:	8b 00                	mov    (%eax),%eax
f012ef42:	01 d0                	add    %edx,%eax
f012ef44:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ef4a:	ff 45 dc             	incl   -0x24(%ebp)
f012ef4d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ef53:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ef56:	7d d0                	jge    f012ef28 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ef58:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ef5e:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ef64:	42                   	inc    %edx
f012ef65:	c1 e2 02             	shl    $0x2,%edx
f012ef68:	39 d0                	cmp    %edx,%eax
f012ef6a:	74 17                	je     f012ef83 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ef6c:	83 ec 04             	sub    $0x4,%esp
f012ef6f:	68 ec c7 13 f0       	push   $0xf013c7ec
f012ef74:	68 3b 12 00 00       	push   $0x123b
f012ef79:	68 9a b2 13 f0       	push   $0xf013b29a
f012ef7e:	e8 82 12 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ef83:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef89:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ef8f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ef96:	eb 24                	jmp    f012efbc <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012ef98:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ef9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012efa1:	01 c0                	add    %eax,%eax
f012efa3:	89 c1                	mov    %eax,%ecx
f012efa5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012efab:	01 c8                	add    %ecx,%eax
f012efad:	66 8b 00             	mov    (%eax),%ax
f012efb0:	98                   	cwtl   
f012efb1:	01 d0                	add    %edx,%eax
f012efb3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012efb9:	ff 45 dc             	incl   -0x24(%ebp)
f012efbc:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012efc2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012efc5:	7d d1                	jge    f012ef98 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012efc7:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012efcd:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012efd3:	8d 48 01             	lea    0x1(%eax),%ecx
f012efd6:	89 c8                	mov    %ecx,%eax
f012efd8:	c1 e0 02             	shl    $0x2,%eax
f012efdb:	01 c8                	add    %ecx,%eax
f012efdd:	39 c2                	cmp    %eax,%edx
f012efdf:	74 17                	je     f012eff8 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012efe1:	83 ec 04             	sub    $0x4,%esp
f012efe4:	68 ec c7 13 f0       	push   $0xf013c7ec
f012efe9:	68 45 12 00 00       	push   $0x1245
f012efee:	68 9a b2 13 f0       	push   $0xf013b29a
f012eff3:	e8 0d 12 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012eff8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012effe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f004:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f00b:	eb 70                	jmp    f012f07d <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f00d:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f013:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f016:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f01d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f023:	01 c8                	add    %ecx,%eax
f012f025:	8a 00                	mov    (%eax),%al
f012f027:	0f be c0             	movsbl %al,%eax
f012f02a:	01 d0                	add    %edx,%eax
f012f02c:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f032:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f038:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f03b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f042:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f048:	01 c8                	add    %ecx,%eax
f012f04a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f04e:	98                   	cwtl   
f012f04f:	01 d0                	add    %edx,%eax
f012f051:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f057:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f05d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f060:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f067:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f06d:	01 c8                	add    %ecx,%eax
f012f06f:	8b 40 04             	mov    0x4(%eax),%eax
f012f072:	01 d0                	add    %edx,%eax
f012f074:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f07a:	ff 45 dc             	incl   -0x24(%ebp)
f012f07d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f083:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f086:	7d 85                	jge    f012f00d <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f088:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f08e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f094:	8d 50 01             	lea    0x1(%eax),%edx
f012f097:	89 d0                	mov    %edx,%eax
f012f099:	01 c0                	add    %eax,%eax
f012f09b:	01 d0                	add    %edx,%eax
f012f09d:	01 c0                	add    %eax,%eax
f012f09f:	01 d0                	add    %edx,%eax
f012f0a1:	39 c1                	cmp    %eax,%ecx
f012f0a3:	75 3a                	jne    f012f0df <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f0a5:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f0ab:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f0b1:	8d 50 01             	lea    0x1(%eax),%edx
f012f0b4:	89 d0                	mov    %edx,%eax
f012f0b6:	01 c0                	add    %eax,%eax
f012f0b8:	01 d0                	add    %edx,%eax
f012f0ba:	01 c0                	add    %eax,%eax
f012f0bc:	01 d0                	add    %edx,%eax
f012f0be:	39 c1                	cmp    %eax,%ecx
f012f0c0:	75 1d                	jne    f012f0df <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f0c2:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f0c8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f0ce:	8d 50 01             	lea    0x1(%eax),%edx
f012f0d1:	89 d0                	mov    %edx,%eax
f012f0d3:	01 c0                	add    %eax,%eax
f012f0d5:	01 d0                	add    %edx,%eax
f012f0d7:	01 c0                	add    %eax,%eax
f012f0d9:	01 d0                	add    %edx,%eax
f012f0db:	39 c1                	cmp    %eax,%ecx
f012f0dd:	74 17                	je     f012f0f6 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f0df:	83 ec 04             	sub    $0x4,%esp
f012f0e2:	68 ec c7 13 f0       	push   $0xf013c7ec
f012f0e7:	68 53 12 00 00       	push   $0x1253
f012f0ec:	68 9a b2 13 f0       	push   $0xf013b29a
f012f0f1:	e8 0f 11 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f0f6:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f0fd:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f100:	e8 98 da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f105:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f108:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f10e:	83 ec 08             	sub    $0x8,%esp
f012f111:	68 00 3c 00 00       	push   $0x3c00
f012f116:	50                   	push   %eax
f012f117:	e8 29 8a fd ff       	call   f0107b45 <krealloc>
f012f11c:	83 c4 10             	add    $0x10,%esp
f012f11f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f125:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f12b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f130:	77 17                	ja     f012f149 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f132:	83 ec 04             	sub    $0x4,%esp
f012f135:	68 40 c5 13 f0       	push   $0xf013c540
f012f13a:	68 5f 12 00 00       	push   $0x125f
f012f13f:	68 9a b2 13 f0       	push   $0xf013b29a
f012f144:	e8 bc 10 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f149:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f14f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f155:	74 17                	je     f012f16e <test_krealloc_BF+0x1593>
			panic(
f012f157:	83 ec 04             	sub    $0x4,%esp
f012f15a:	68 24 c8 13 f0       	push   $0xf013c824
f012f15f:	68 62 12 00 00       	push   $0x1262
f012f164:	68 9a b2 13 f0       	push   $0xf013b29a
f012f169:	e8 97 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f16e:	e8 2a da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f173:	89 c2                	mov    %eax,%edx
f012f175:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f178:	39 c2                	cmp    %eax,%edx
f012f17a:	74 17                	je     f012f193 <test_krealloc_BF+0x15b8>
			panic(
f012f17c:	83 ec 04             	sub    $0x4,%esp
f012f17f:	68 90 c8 13 f0       	push   $0xf013c890
f012f184:	68 65 12 00 00       	push   $0x1265
f012f189:	68 9a b2 13 f0       	push   $0xf013b29a
f012f18e:	e8 72 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f193:	e8 05 da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f198:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f19b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f1a1:	83 ec 08             	sub    $0x8,%esp
f012f1a4:	68 00 fc 0f 00       	push   $0xffc00
f012f1a9:	50                   	push   %eax
f012f1aa:	e8 96 89 fd ff       	call   f0107b45 <krealloc>
f012f1af:	83 c4 10             	add    $0x10,%esp
f012f1b2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f1b8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f1be:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f1c3:	77 17                	ja     f012f1dc <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f1c5:	83 ec 04             	sub    $0x4,%esp
f012f1c8:	68 40 c5 13 f0       	push   $0xf013c540
f012f1cd:	68 6b 12 00 00       	push   $0x126b
f012f1d2:	68 9a b2 13 f0       	push   $0xf013b29a
f012f1d7:	e8 29 10 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f1dc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f1e2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f1e8:	74 17                	je     f012f201 <test_krealloc_BF+0x1626>
			panic(
f012f1ea:	83 ec 04             	sub    $0x4,%esp
f012f1ed:	68 24 c8 13 f0       	push   $0xf013c824
f012f1f2:	68 6e 12 00 00       	push   $0x126e
f012f1f7:	68 9a b2 13 f0       	push   $0xf013b29a
f012f1fc:	e8 04 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f201:	e8 97 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f206:	89 c2                	mov    %eax,%edx
f012f208:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f20b:	39 c2                	cmp    %eax,%edx
f012f20d:	74 17                	je     f012f226 <test_krealloc_BF+0x164b>
			panic(
f012f20f:	83 ec 04             	sub    $0x4,%esp
f012f212:	68 90 c8 13 f0       	push   $0xf013c890
f012f217:	68 71 12 00 00       	push   $0x1271
f012f21c:	68 9a b2 13 f0       	push   $0xf013b29a
f012f221:	e8 df 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f226:	e8 72 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f22b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f22e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f234:	83 ec 08             	sub    $0x8,%esp
f012f237:	68 00 fc 0f 00       	push   $0xffc00
f012f23c:	50                   	push   %eax
f012f23d:	e8 03 89 fd ff       	call   f0107b45 <krealloc>
f012f242:	83 c4 10             	add    $0x10,%esp
f012f245:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f24b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f251:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f256:	77 17                	ja     f012f26f <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f258:	83 ec 04             	sub    $0x4,%esp
f012f25b:	68 40 c5 13 f0       	push   $0xf013c540
f012f260:	68 77 12 00 00       	push   $0x1277
f012f265:	68 9a b2 13 f0       	push   $0xf013b29a
f012f26a:	e8 96 0f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f26f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f275:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f27b:	74 17                	je     f012f294 <test_krealloc_BF+0x16b9>
			panic(
f012f27d:	83 ec 04             	sub    $0x4,%esp
f012f280:	68 24 c8 13 f0       	push   $0xf013c824
f012f285:	68 7a 12 00 00       	push   $0x127a
f012f28a:	68 9a b2 13 f0       	push   $0xf013b29a
f012f28f:	e8 71 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f294:	e8 04 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f299:	89 c2                	mov    %eax,%edx
f012f29b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f29e:	39 c2                	cmp    %eax,%edx
f012f2a0:	74 17                	je     f012f2b9 <test_krealloc_BF+0x16de>
			panic(
f012f2a2:	83 ec 04             	sub    $0x4,%esp
f012f2a5:	68 90 c8 13 f0       	push   $0xf013c890
f012f2aa:	68 7d 12 00 00       	push   $0x127d
f012f2af:	68 9a b2 13 f0       	push   $0xf013b29a
f012f2b4:	e8 4c 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f2b9:	e8 df d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f2be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f2c1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f2c7:	83 ec 08             	sub    $0x8,%esp
f012f2ca:	68 00 fc 0f 00       	push   $0xffc00
f012f2cf:	50                   	push   %eax
f012f2d0:	e8 70 88 fd ff       	call   f0107b45 <krealloc>
f012f2d5:	83 c4 10             	add    $0x10,%esp
f012f2d8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f2de:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f2e4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f2e9:	77 17                	ja     f012f302 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f2eb:	83 ec 04             	sub    $0x4,%esp
f012f2ee:	68 40 c5 13 f0       	push   $0xf013c540
f012f2f3:	68 85 12 00 00       	push   $0x1285
f012f2f8:	68 9a b2 13 f0       	push   $0xf013b29a
f012f2fd:	e8 03 0f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f302:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f308:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f30e:	74 17                	je     f012f327 <test_krealloc_BF+0x174c>
			panic(
f012f310:	83 ec 04             	sub    $0x4,%esp
f012f313:	68 d4 c8 13 f0       	push   $0xf013c8d4
f012f318:	68 88 12 00 00       	push   $0x1288
f012f31d:	68 9a b2 13 f0       	push   $0xf013b29a
f012f322:	e8 de 0e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f327:	e8 71 d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f32c:	89 c2                	mov    %eax,%edx
f012f32e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f331:	39 c2                	cmp    %eax,%edx
f012f333:	74 17                	je     f012f34c <test_krealloc_BF+0x1771>
			panic(
f012f335:	83 ec 04             	sub    $0x4,%esp
f012f338:	68 90 c8 13 f0       	push   $0xf013c890
f012f33d:	68 8b 12 00 00       	push   $0x128b
f012f342:	68 9a b2 13 f0       	push   $0xf013b29a
f012f347:	e8 b9 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f34c:	83 ec 0c             	sub    $0xc,%esp
f012f34f:	68 b3 ba 13 f0       	push   $0xf013bab3
f012f354:	e8 b5 19 fd ff       	call   f0100d0e <cprintf>
f012f359:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f35c:	e8 3c d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f361:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f364:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f36a:	83 ec 08             	sub    $0x8,%esp
f012f36d:	68 00 18 10 00       	push   $0x101800
f012f372:	50                   	push   %eax
f012f373:	e8 cd 87 fd ff       	call   f0107b45 <krealloc>
f012f378:	83 c4 10             	add    $0x10,%esp
f012f37b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f37e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f381:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f386:	77 17                	ja     f012f39f <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f388:	83 ec 04             	sub    $0x4,%esp
f012f38b:	68 40 c5 13 f0       	push   $0xf013c540
f012f390:	68 93 12 00 00       	push   $0x1293
f012f395:	68 9a b2 13 f0       	push   $0xf013b29a
f012f39a:	e8 66 0e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f39f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f3a5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f3a8:	74 17                	je     f012f3c1 <test_krealloc_BF+0x17e6>
			panic(
f012f3aa:	83 ec 04             	sub    $0x4,%esp
f012f3ad:	68 34 c9 13 f0       	push   $0xf013c934
f012f3b2:	68 96 12 00 00       	push   $0x1296
f012f3b7:	68 9a b2 13 f0       	push   $0xf013b29a
f012f3bc:	e8 44 0e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f3c1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f3c4:	e8 d4 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f3c9:	29 c3                	sub    %eax,%ebx
f012f3cb:	89 d8                	mov    %ebx,%eax
f012f3cd:	83 f8 02             	cmp    $0x2,%eax
f012f3d0:	74 17                	je     f012f3e9 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f3d2:	83 ec 04             	sub    $0x4,%esp
f012f3d5:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012f3da:	68 98 12 00 00       	push   $0x1298
f012f3df:	68 9a b2 13 f0       	push   $0xf013b29a
f012f3e4:	e8 1c 0e fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f3e9:	e8 af d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f3ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f3f1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f3f7:	83 ec 08             	sub    $0x8,%esp
f012f3fa:	68 00 fc 3f 00       	push   $0x3ffc00
f012f3ff:	50                   	push   %eax
f012f400:	e8 40 87 fd ff       	call   f0107b45 <krealloc>
f012f405:	83 c4 10             	add    $0x10,%esp
f012f408:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f40b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f40e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f413:	77 17                	ja     f012f42c <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f415:	83 ec 04             	sub    $0x4,%esp
f012f418:	68 40 c5 13 f0       	push   $0xf013c540
f012f41d:	68 9e 12 00 00       	push   $0x129e
f012f422:	68 9a b2 13 f0       	push   $0xf013b29a
f012f427:	e8 d9 0d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f42c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f432:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f435:	74 17                	je     f012f44e <test_krealloc_BF+0x1873>
			panic(
f012f437:	83 ec 04             	sub    $0x4,%esp
f012f43a:	68 34 c9 13 f0       	push   $0xf013c934
f012f43f:	68 a1 12 00 00       	push   $0x12a1
f012f444:	68 9a b2 13 f0       	push   $0xf013b29a
f012f449:	e8 b7 0d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f44e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f451:	e8 47 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f456:	29 c3                	sub    %eax,%ebx
f012f458:	89 d8                	mov    %ebx,%eax
f012f45a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f45f:	74 17                	je     f012f478 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f461:	83 ec 04             	sub    $0x4,%esp
f012f464:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012f469:	68 a4 12 00 00       	push   $0x12a4
f012f46e:	68 9a b2 13 f0       	push   $0xf013b29a
f012f473:	e8 8d 0d fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f478:	83 ec 0c             	sub    $0xc,%esp
f012f47b:	68 f8 ba 13 f0       	push   $0xf013baf8
f012f480:	e8 89 18 fd ff       	call   f0100d0e <cprintf>
f012f485:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f488:	e8 10 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f48d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f490:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f496:	83 ec 08             	sub    $0x8,%esp
f012f499:	68 00 fc 9f 00       	push   $0x9ffc00
f012f49e:	50                   	push   %eax
f012f49f:	e8 a1 86 fd ff       	call   f0107b45 <krealloc>
f012f4a4:	83 c4 10             	add    $0x10,%esp
f012f4a7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f4aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f4ad:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f4b2:	77 17                	ja     f012f4cb <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f4b4:	83 ec 04             	sub    $0x4,%esp
f012f4b7:	68 40 c5 13 f0       	push   $0xf013c540
f012f4bc:	68 af 12 00 00       	push   $0x12af
f012f4c1:	68 9a b2 13 f0       	push   $0xf013b29a
f012f4c6:	e8 3a 0d fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f4cb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f4d2:	10 00 00 
f012f4d5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f4db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f4e0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f4e6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f4ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012f4f1:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f4f7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f4fd:	29 d0                	sub    %edx,%eax
f012f4ff:	89 c1                	mov    %eax,%ecx
f012f501:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f508:	10 00 00 
f012f50b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f510:	0f b6 d0             	movzbl %al,%edx
f012f513:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f519:	01 d0                	add    %edx,%eax
f012f51b:	48                   	dec    %eax
f012f51c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f522:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f528:	ba 00 00 00 00       	mov    $0x0,%edx
f012f52d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f533:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f539:	29 d0                	sub    %edx,%eax
f012f53b:	01 c1                	add    %eax,%ecx
f012f53d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f544:	10 00 00 
f012f547:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f54c:	0f b6 c0             	movzbl %al,%eax
f012f54f:	c1 e0 04             	shl    $0x4,%eax
f012f552:	89 c2                	mov    %eax,%edx
f012f554:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f55a:	01 d0                	add    %edx,%eax
f012f55c:	48                   	dec    %eax
f012f55d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f563:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f569:	ba 00 00 00 00       	mov    $0x0,%edx
f012f56e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f574:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f57a:	29 d0                	sub    %edx,%eax
f012f57c:	01 c8                	add    %ecx,%eax
f012f57e:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f584:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f587:	39 c2                	cmp    %eax,%edx
f012f589:	74 18                	je     f012f5a3 <test_krealloc_BF+0x19c8>
			panic(
f012f58b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f58e:	50                   	push   %eax
f012f58f:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012f594:	68 b3 12 00 00       	push   $0x12b3
f012f599:	68 9a b2 13 f0       	push   $0xf013b29a
f012f59e:	e8 62 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f5a3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f5a9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f5ac:	75 17                	jne    f012f5c5 <test_krealloc_BF+0x19ea>
			panic(
f012f5ae:	83 ec 04             	sub    $0x4,%esp
f012f5b1:	68 28 ca 13 f0       	push   $0xf013ca28
f012f5b6:	68 b6 12 00 00       	push   $0x12b6
f012f5bb:	68 9a b2 13 f0       	push   $0xf013b29a
f012f5c0:	e8 40 0c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f5c5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f5c8:	e8 d0 d5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f5cd:	29 c3                	sub    %eax,%ebx
f012f5cf:	89 d8                	mov    %ebx,%eax
f012f5d1:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f5d6:	74 17                	je     f012f5ef <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f5d8:	83 ec 04             	sub    $0x4,%esp
f012f5db:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012f5e0:	68 b9 12 00 00       	push   $0x12b9
f012f5e5:	68 9a b2 13 f0       	push   $0xf013b29a
f012f5ea:	e8 16 0c fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012f5ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f5f2:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f5f8:	e8 a0 d5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f5fd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f600:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f606:	83 ec 08             	sub    $0x8,%esp
f012f609:	68 00 fc 3f 00       	push   $0x3ffc00
f012f60e:	50                   	push   %eax
f012f60f:	e8 31 85 fd ff       	call   f0107b45 <krealloc>
f012f614:	83 c4 10             	add    $0x10,%esp
f012f617:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f61a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f61d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f622:	77 17                	ja     f012f63b <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f624:	83 ec 04             	sub    $0x4,%esp
f012f627:	68 40 c5 13 f0       	push   $0xf013c540
f012f62c:	68 c2 12 00 00       	push   $0x12c2
f012f631:	68 9a b2 13 f0       	push   $0xf013b29a
f012f636:	e8 ca 0b fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f63b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f641:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f644:	75 17                	jne    f012f65d <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f646:	83 ec 04             	sub    $0x4,%esp
f012f649:	68 28 ca 13 f0       	push   $0xf013ca28
f012f64e:	68 c4 12 00 00       	push   $0x12c4
f012f653:	68 9a b2 13 f0       	push   $0xf013b29a
f012f658:	e8 a8 0b fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f65d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f664:	10 00 00 
f012f667:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f66d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f672:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f678:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f67e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f683:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f689:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f68f:	29 d0                	sub    %edx,%eax
f012f691:	89 c1                	mov    %eax,%ecx
f012f693:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f69a:	10 00 00 
f012f69d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f6a2:	0f b6 d0             	movzbl %al,%edx
f012f6a5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f6ab:	01 d0                	add    %edx,%eax
f012f6ad:	48                   	dec    %eax
f012f6ae:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f6b4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012f6bf:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f6c5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f6cb:	29 d0                	sub    %edx,%eax
f012f6cd:	01 c1                	add    %eax,%ecx
f012f6cf:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f6d6:	10 00 00 
f012f6d9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f6de:	0f b6 c0             	movzbl %al,%eax
f012f6e1:	c1 e0 04             	shl    $0x4,%eax
f012f6e4:	89 c2                	mov    %eax,%edx
f012f6e6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f6ec:	01 d0                	add    %edx,%eax
f012f6ee:	48                   	dec    %eax
f012f6ef:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f6f5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012f700:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f706:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f70c:	29 d0                	sub    %edx,%eax
f012f70e:	01 c8                	add    %ecx,%eax
f012f710:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f716:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f719:	39 c2                	cmp    %eax,%edx
f012f71b:	74 17                	je     f012f734 <test_krealloc_BF+0x1b59>
f012f71d:	83 ec 04             	sub    $0x4,%esp
f012f720:	68 7c c5 13 f0       	push   $0xf013c57c
f012f725:	68 c5 12 00 00       	push   $0x12c5
f012f72a:	68 9a b2 13 f0       	push   $0xf013b29a
f012f72f:	e8 d1 0a fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f734:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f737:	e8 61 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f73c:	29 c3                	sub    %eax,%ebx
f012f73e:	89 d8                	mov    %ebx,%eax
f012f740:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f745:	74 17                	je     f012f75e <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f747:	83 ec 04             	sub    $0x4,%esp
f012f74a:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012f74f:	68 c9 12 00 00       	push   $0x12c9
f012f754:	68 9a b2 13 f0       	push   $0xf013b29a
f012f759:	e8 a7 0a fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012f75e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f761:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f767:	e8 31 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f76c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f76f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f775:	83 ec 08             	sub    $0x8,%esp
f012f778:	68 00 fc 3f 01       	push   $0x13ffc00
f012f77d:	50                   	push   %eax
f012f77e:	e8 c2 83 fd ff       	call   f0107b45 <krealloc>
f012f783:	83 c4 10             	add    $0x10,%esp
f012f786:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f789:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f78c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f791:	77 17                	ja     f012f7aa <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f793:	83 ec 04             	sub    $0x4,%esp
f012f796:	68 40 c5 13 f0       	push   $0xf013c540
f012f79b:	68 cf 12 00 00       	push   $0x12cf
f012f7a0:	68 9a b2 13 f0       	push   $0xf013b29a
f012f7a5:	e8 5b 0a fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f7aa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f7b0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f7b3:	75 17                	jne    f012f7cc <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f7b5:	83 ec 04             	sub    $0x4,%esp
f012f7b8:	68 28 ca 13 f0       	push   $0xf013ca28
f012f7bd:	68 d1 12 00 00       	push   $0x12d1
f012f7c2:	68 9a b2 13 f0       	push   $0xf013b29a
f012f7c7:	e8 39 0a fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f7cc:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f7d3:	10 00 00 
f012f7d6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f7dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f7e1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f7e7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f7ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012f7f2:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f7f8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f7fe:	29 d0                	sub    %edx,%eax
f012f800:	89 c1                	mov    %eax,%ecx
f012f802:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f809:	10 00 00 
f012f80c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f811:	0f b6 d0             	movzbl %al,%edx
f012f814:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f81a:	01 d0                	add    %edx,%eax
f012f81c:	48                   	dec    %eax
f012f81d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f823:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f829:	ba 00 00 00 00       	mov    $0x0,%edx
f012f82e:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f834:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f83a:	29 d0                	sub    %edx,%eax
f012f83c:	01 c1                	add    %eax,%ecx
f012f83e:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f845:	10 00 00 
f012f848:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f84d:	0f b6 c0             	movzbl %al,%eax
f012f850:	c1 e0 04             	shl    $0x4,%eax
f012f853:	89 c2                	mov    %eax,%edx
f012f855:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f85b:	01 d0                	add    %edx,%eax
f012f85d:	48                   	dec    %eax
f012f85e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f864:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f86a:	ba 00 00 00 00       	mov    $0x0,%edx
f012f86f:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f875:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f87b:	29 d0                	sub    %edx,%eax
f012f87d:	01 c8                	add    %ecx,%eax
f012f87f:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f885:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f888:	39 c2                	cmp    %eax,%edx
f012f88a:	74 17                	je     f012f8a3 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f88c:	83 ec 04             	sub    $0x4,%esp
f012f88f:	68 48 cb 13 f0       	push   $0xf013cb48
f012f894:	68 d3 12 00 00       	push   $0x12d3
f012f899:	68 9a b2 13 f0       	push   $0xf013b29a
f012f89e:	e8 62 09 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f8a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f8a6:	e8 f2 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f8ab:	29 c3                	sub    %eax,%ebx
f012f8ad:	89 d8                	mov    %ebx,%eax
f012f8af:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f8b4:	74 17                	je     f012f8cd <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f8b6:	83 ec 04             	sub    $0x4,%esp
f012f8b9:	68 b0 c9 13 f0       	push   $0xf013c9b0
f012f8be:	68 d6 12 00 00       	push   $0x12d6
f012f8c3:	68 9a b2 13 f0       	push   $0xf013b29a
f012f8c8:	e8 38 09 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012f8cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f8d0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f8d6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f8dc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f8e2:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f8e9:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f8ec:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f8f3:	eb 21                	jmp    f012f916 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f8f5:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f8fb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f8fe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f904:	01 c8                	add    %ecx,%eax
f012f906:	8a 00                	mov    (%eax),%al
f012f908:	0f be c0             	movsbl %al,%eax
f012f90b:	01 d0                	add    %edx,%eax
f012f90d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f913:	ff 45 d8             	incl   -0x28(%ebp)
f012f916:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f91c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f91f:	7d d4                	jge    f012f8f5 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f921:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f927:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f92d:	42                   	inc    %edx
f012f92e:	01 d2                	add    %edx,%edx
f012f930:	39 d0                	cmp    %edx,%eax
f012f932:	74 17                	je     f012f94b <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f934:	83 ec 04             	sub    $0x4,%esp
f012f937:	68 e0 ca 13 f0       	push   $0xf013cae0
f012f93c:	68 e4 12 00 00       	push   $0x12e4
f012f941:	68 9a b2 13 f0       	push   $0xf013b29a
f012f946:	e8 ba 08 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f94b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f951:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f957:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f95e:	00 00 00 
		sums[1] = 0;
f012f961:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f968:	00 00 00 
		sums[2] = 0;
f012f96b:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f972:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f975:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f97c:	eb 70                	jmp    f012f9ee <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f97e:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f987:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f98e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f994:	01 c8                	add    %ecx,%eax
f012f996:	8a 00                	mov    (%eax),%al
f012f998:	0f be c0             	movsbl %al,%eax
f012f99b:	01 d0                	add    %edx,%eax
f012f99d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f9a3:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f9a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f9ac:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f9b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f9b9:	01 c8                	add    %ecx,%eax
f012f9bb:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f9bf:	98                   	cwtl   
f012f9c0:	01 d0                	add    %edx,%eax
f012f9c2:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f9c8:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f9ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f9d1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f9d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f9de:	01 c8                	add    %ecx,%eax
f012f9e0:	8b 40 04             	mov    0x4(%eax),%eax
f012f9e3:	01 d0                	add    %edx,%eax
f012f9e5:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f9eb:	ff 45 d8             	incl   -0x28(%ebp)
f012f9ee:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f9f7:	7d 85                	jge    f012f97e <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f9f9:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f9ff:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fa05:	8d 50 01             	lea    0x1(%eax),%edx
f012fa08:	89 d0                	mov    %edx,%eax
f012fa0a:	01 c0                	add    %eax,%eax
f012fa0c:	01 d0                	add    %edx,%eax
f012fa0e:	01 c0                	add    %eax,%eax
f012fa10:	01 d0                	add    %edx,%eax
f012fa12:	39 c1                	cmp    %eax,%ecx
f012fa14:	75 3a                	jne    f012fa50 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012fa16:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012fa1c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fa22:	8d 50 01             	lea    0x1(%eax),%edx
f012fa25:	89 d0                	mov    %edx,%eax
f012fa27:	01 c0                	add    %eax,%eax
f012fa29:	01 d0                	add    %edx,%eax
f012fa2b:	01 c0                	add    %eax,%eax
f012fa2d:	01 d0                	add    %edx,%eax
f012fa2f:	39 c1                	cmp    %eax,%ecx
f012fa31:	75 1d                	jne    f012fa50 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012fa33:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fa39:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fa3f:	8d 50 01             	lea    0x1(%eax),%edx
f012fa42:	89 d0                	mov    %edx,%eax
f012fa44:	01 c0                	add    %eax,%eax
f012fa46:	01 d0                	add    %edx,%eax
f012fa48:	01 c0                	add    %eax,%eax
f012fa4a:	01 d0                	add    %edx,%eax
f012fa4c:	39 c1                	cmp    %eax,%ecx
f012fa4e:	74 17                	je     f012fa67 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fa50:	83 ec 04             	sub    $0x4,%esp
f012fa53:	68 e0 ca 13 f0       	push   $0xf013cae0
f012fa58:	68 f6 12 00 00       	push   $0x12f6
f012fa5d:	68 9a b2 13 f0       	push   $0xf013b29a
f012fa62:	e8 9e 07 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fa67:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa6d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012fa73:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fa7a:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fa7d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fa84:	eb 24                	jmp    f012faaa <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012fa86:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fa8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fa8f:	01 c0                	add    %eax,%eax
f012fa91:	89 c1                	mov    %eax,%ecx
f012fa93:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012fa99:	01 c8                	add    %ecx,%eax
f012fa9b:	66 8b 00             	mov    (%eax),%ax
f012fa9e:	98                   	cwtl   
f012fa9f:	01 d0                	add    %edx,%eax
f012faa1:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012faa7:	ff 45 d8             	incl   -0x28(%ebp)
f012faaa:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fab0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fab3:	7d d1                	jge    f012fa86 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012fab5:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fabb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fac1:	8d 48 01             	lea    0x1(%eax),%ecx
f012fac4:	89 c8                	mov    %ecx,%eax
f012fac6:	c1 e0 02             	shl    $0x2,%eax
f012fac9:	01 c8                	add    %ecx,%eax
f012facb:	39 c2                	cmp    %eax,%edx
f012facd:	74 17                	je     f012fae6 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012facf:	83 ec 04             	sub    $0x4,%esp
f012fad2:	68 e0 ca 13 f0       	push   $0xf013cae0
f012fad7:	68 00 13 00 00       	push   $0x1300
f012fadc:	68 9a b2 13 f0       	push   $0xf013b29a
f012fae1:	e8 1f 07 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012fae6:	e8 b2 d0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012faeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012faee:	e8 d5 42 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012faf3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012faf9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012faff:	83 ec 08             	sub    $0x8,%esp
f012fb02:	6a 00                	push   $0x0
f012fb04:	50                   	push   %eax
f012fb05:	e8 3b 80 fd ff       	call   f0107b45 <krealloc>
f012fb0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fb0d:	e8 b6 42 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fb12:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fb18:	74 17                	je     f012fb31 <test_krealloc_BF+0x1f56>
			panic(
f012fb1a:	83 ec 04             	sub    $0x4,%esp
f012fb1d:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012fb22:	68 08 13 00 00       	push   $0x1308
f012fb27:	68 9a b2 13 f0       	push   $0xf013b29a
f012fb2c:	e8 d4 06 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012fb31:	e8 67 d0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fb36:	89 c2                	mov    %eax,%edx
f012fb38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fb3b:	29 c2                	sub    %eax,%edx
f012fb3d:	89 d0                	mov    %edx,%eax
f012fb3f:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012fb44:	74 17                	je     f012fb5d <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012fb46:	83 ec 04             	sub    $0x4,%esp
f012fb49:	68 70 c7 13 f0       	push   $0xf013c770
f012fb4e:	68 0a 13 00 00       	push   $0x130a
f012fb53:	68 9a b2 13 f0       	push   $0xf013b29a
f012fb58:	e8 a8 06 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012fb5d:	e8 3b d0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fb62:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fb65:	e8 5e 42 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fb6a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012fb70:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fb76:	83 ec 0c             	sub    $0xc,%esp
f012fb79:	50                   	push   %eax
f012fb7a:	e8 d1 7d fd ff       	call   f0107950 <kfree>
f012fb7f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fb82:	e8 41 42 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fb87:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fb8d:	74 17                	je     f012fba6 <test_krealloc_BF+0x1fcb>
			panic(
f012fb8f:	83 ec 04             	sub    $0x4,%esp
f012fb92:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012fb97:	68 12 13 00 00       	push   $0x1312
f012fb9c:	68 9a b2 13 f0       	push   $0xf013b29a
f012fba1:	e8 5f 06 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012fba6:	e8 f2 cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fbab:	89 c2                	mov    %eax,%edx
f012fbad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fbb0:	29 c2                	sub    %eax,%edx
f012fbb2:	89 d0                	mov    %edx,%eax
f012fbb4:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012fbb9:	74 17                	je     f012fbd2 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012fbbb:	83 ec 04             	sub    $0x4,%esp
f012fbbe:	68 70 c7 13 f0       	push   $0xf013c770
f012fbc3:	68 14 13 00 00       	push   $0x1314
f012fbc8:	68 9a b2 13 f0       	push   $0xf013b29a
f012fbcd:	e8 33 06 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fbd2:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012fbd9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012fbe0:	eb 48                	jmp    f012fc2a <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012fbe2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012fbe5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fbea:	83 ec 04             	sub    $0x4,%esp
f012fbed:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012fbf3:	51                   	push   %ecx
f012fbf4:	52                   	push   %edx
f012fbf5:	50                   	push   %eax
f012fbf6:	e8 b6 6e fd ff       	call   f0106ab1 <get_page_table>
f012fbfb:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012fbfe:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012fc04:	85 c0                	test   %eax,%eax
f012fc06:	75 17                	jne    f012fc1f <test_krealloc_BF+0x2044>
					panic(
f012fc08:	83 ec 04             	sub    $0x4,%esp
f012fc0b:	68 9c bb 13 f0       	push   $0xf013bb9c
f012fc10:	68 21 13 00 00       	push   $0x1321
f012fc15:	68 9a b2 13 f0       	push   $0xf013b29a
f012fc1a:	e8 e6 05 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fc1f:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012fc26:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012fc2a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fc2e:	78 b2                	js     f012fbe2 <test_krealloc_BF+0x2007>
f012fc30:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fc34:	7f 09                	jg     f012fc3f <test_krealloc_BF+0x2064>
f012fc36:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012fc3d:	76 a3                	jbe    f012fbe2 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012fc3f:	83 ec 0c             	sub    $0xc,%esp
f012fc42:	68 7e b4 13 f0       	push   $0xf013b47e
f012fc47:	e8 c2 10 fd ff       	call   f0100d0e <cprintf>
f012fc4c:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012fc4f:	83 ec 0c             	sub    $0xc,%esp
f012fc52:	68 80 cb 13 f0       	push   $0xf013cb80
f012fc57:	e8 b2 10 fd ff       	call   f0100d0e <cprintf>
f012fc5c:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fc5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fc64:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fc67:	5b                   	pop    %ebx
f012fc68:	5f                   	pop    %edi
f012fc69:	5d                   	pop    %ebp
f012fc6a:	c3                   	ret    

f012fc6b <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012fc6b:	55                   	push   %ebp
f012fc6c:	89 e5                	mov    %esp,%ebp
f012fc6e:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012fc71:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f012fc76:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012fc7b:	74 17                	je     f012fc94 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012fc7d:	83 ec 04             	sub    $0x4,%esp
f012fc80:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012fc85:	68 39 13 00 00       	push   $0x1339
f012fc8a:	68 9a b2 13 f0       	push   $0xf013b29a
f012fc8f:	e8 71 05 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012fc94:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f012fc99:	8b 15 c4 25 78 f0    	mov    0xf07825c4,%edx
f012fc9f:	4a                   	dec    %edx
f012fca0:	39 d0                	cmp    %edx,%eax
f012fca2:	74 17                	je     f012fcbb <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012fca4:	83 ec 04             	sub    $0x4,%esp
f012fca7:	68 14 cc 13 f0       	push   $0xf013cc14
f012fcac:	68 3f 13 00 00       	push   $0x133f
f012fcb1:	68 9a b2 13 f0       	push   $0xf013b29a
f012fcb6:	e8 4a 05 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012fcbb:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f012fcc0:	85 c0                	test   %eax,%eax
f012fcc2:	74 17                	je     f012fcdb <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012fcc4:	83 ec 04             	sub    $0x4,%esp
f012fcc7:	68 50 cc 13 f0       	push   $0xf013cc50
f012fccc:	68 45 13 00 00       	push   $0x1345
f012fcd1:	68 9a b2 13 f0       	push   $0xf013b29a
f012fcd6:	e8 2a 05 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012fcdb:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f012fce0:	83 f8 01             	cmp    $0x1,%eax
f012fce3:	74 17                	je     f012fcfc <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012fce5:	83 ec 04             	sub    $0x4,%esp
f012fce8:	68 88 cc 13 f0       	push   $0xf013cc88
f012fced:	68 4b 13 00 00       	push   $0x134b
f012fcf2:	68 9a b2 13 f0       	push   $0xf013b29a
f012fcf7:	e8 09 05 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012fcfc:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f012fd01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012fd04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fd08:	74 66                	je     f012fd70 <test_initialize_dyn_block_system+0x105>
f012fd0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd0d:	8b 48 0c             	mov    0xc(%eax),%ecx
f012fd10:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012fd17:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fd1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fd1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012fd22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd25:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd2a:	f7 75 ec             	divl   -0x14(%ebp)
f012fd2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd30:	29 d0                	sub    %edx,%eax
f012fd32:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012fd37:	29 c2                	sub    %eax,%edx
f012fd39:	89 d0                	mov    %edx,%eax
f012fd3b:	39 c1                	cmp    %eax,%ecx
f012fd3d:	75 31                	jne    f012fd70 <test_initialize_dyn_block_system+0x105>
f012fd3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd42:	8b 48 08             	mov    0x8(%eax),%ecx
f012fd45:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012fd4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fd4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fd54:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012fd57:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd5a:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd5f:	f7 75 e4             	divl   -0x1c(%ebp)
f012fd62:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd65:	29 d0                	sub    %edx,%eax
f012fd67:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fd6c:	39 c1                	cmp    %eax,%ecx
f012fd6e:	74 17                	je     f012fd87 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012fd70:	83 ec 04             	sub    $0x4,%esp
f012fd73:	68 c0 cc 13 f0       	push   $0xf013ccc0
f012fd78:	68 52 13 00 00       	push   $0x1352
f012fd7d:	68 9a b2 13 f0       	push   $0xf013b29a
f012fd82:	e8 7e 04 fd ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012fd87:	8b 45 14             	mov    0x14(%ebp),%eax
f012fd8a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012fd8d:	74 17                	je     f012fda6 <test_initialize_dyn_block_system+0x13b>
f012fd8f:	83 ec 04             	sub    $0x4,%esp
f012fd92:	68 b4 b2 13 f0       	push   $0xf013b2b4
f012fd97:	68 56 13 00 00       	push   $0x1356
f012fd9c:	68 9a b2 13 f0       	push   $0xf013b29a
f012fda1:	e8 5f 04 fd ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012fda6:	8b 45 08             	mov    0x8(%ebp),%eax
f012fda9:	2b 45 10             	sub    0x10(%ebp),%eax
f012fdac:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012fdb1:	74 1b                	je     f012fdce <test_initialize_dyn_block_system+0x163>
f012fdb3:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdb6:	2b 45 10             	sub    0x10(%ebp),%eax
f012fdb9:	50                   	push   %eax
f012fdba:	68 fc cc 13 f0       	push   $0xf013ccfc
f012fdbf:	68 57 13 00 00       	push   $0x1357
f012fdc4:	68 9a b2 13 f0       	push   $0xf013b29a
f012fdc9:	e8 37 04 fd ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012fdce:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012fdd5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fdda:	83 ec 04             	sub    $0x4,%esp
f012fddd:	6a 00                	push   $0x0
f012fddf:	ff 75 f4             	pushl  -0xc(%ebp)
f012fde2:	50                   	push   %eax
f012fde3:	e8 e9 5f fe ff       	call   f0115dd1 <CB>
f012fde8:	83 c4 10             	add    $0x10,%esp
f012fdeb:	83 f8 01             	cmp    $0x1,%eax
f012fdee:	75 35                	jne    f012fe25 <test_initialize_dyn_block_system+0x1ba>
f012fdf0:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fdf5:	83 ec 04             	sub    $0x4,%esp
f012fdf8:	6a 01                	push   $0x1
f012fdfa:	ff 75 f4             	pushl  -0xc(%ebp)
f012fdfd:	50                   	push   %eax
f012fdfe:	e8 ce 5f fe ff       	call   f0115dd1 <CB>
f012fe03:	83 c4 10             	add    $0x10,%esp
f012fe06:	83 f8 01             	cmp    $0x1,%eax
f012fe09:	75 1a                	jne    f012fe25 <test_initialize_dyn_block_system+0x1ba>
f012fe0b:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fe10:	83 ec 04             	sub    $0x4,%esp
f012fe13:	6a 02                	push   $0x2
f012fe15:	ff 75 f4             	pushl  -0xc(%ebp)
f012fe18:	50                   	push   %eax
f012fe19:	e8 b3 5f fe ff       	call   f0115dd1 <CB>
f012fe1e:	83 c4 10             	add    $0x10,%esp
f012fe21:	85 c0                	test   %eax,%eax
f012fe23:	74 17                	je     f012fe3c <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012fe25:	83 ec 04             	sub    $0x4,%esp
f012fe28:	68 40 cd 13 f0       	push   $0xf013cd40
f012fe2d:	68 5f 13 00 00       	push   $0x135f
f012fe32:	68 9a b2 13 f0       	push   $0xf013b29a
f012fe37:	e8 c9 03 fd ff       	call   f0100205 <_panic>

			a+=4096;
f012fe3c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012fe43:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012fe4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fe4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fe52:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012fe55:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe58:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe5d:	f7 75 dc             	divl   -0x24(%ebp)
f012fe60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe63:	29 d0                	sub    %edx,%eax
f012fe65:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fe6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fe6d:	74 05                	je     f012fe74 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012fe6f:	e9 61 ff ff ff       	jmp    f012fdd5 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012fe74:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012fe75:	83 ec 0c             	sub    $0xc,%esp
f012fe78:	68 a0 cd 13 f0       	push   $0xf013cda0
f012fe7d:	e8 8c 0e fd ff       	call   f0100d0e <cprintf>
f012fe82:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fe85:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fe8a:	c9                   	leave  
f012fe8b:	c3                   	ret    

f012fe8c <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012fe8c:	55                   	push   %ebp
f012fe8d:	89 e5                	mov    %esp,%ebp
f012fe8f:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fe92:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fe96:	77 07                	ja     f012fe9f <nearest_pow2_ceil+0x13>
f012fe98:	b8 01 00 00 00       	mov    $0x1,%eax
f012fe9d:	eb 20                	jmp    f012febf <nearest_pow2_ceil+0x33>
    int power = 2;
f012fe9f:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fea6:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fea9:	eb 08                	jmp    f012feb3 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012feab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012feae:	01 c0                	add    %eax,%eax
f012feb0:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012feb3:	d1 6d 08             	shrl   0x8(%ebp)
f012feb6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012feba:	75 ef                	jne    f012feab <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012febc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012febf:	c9                   	leave  
f012fec0:	c3                   	ret    

f012fec1 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012fec1:	55                   	push   %ebp
f012fec2:	89 e5                	mov    %esp,%ebp
f012fec4:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fec7:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fecb:	77 07                	ja     f012fed4 <log2_ceil+0x13>
f012fecd:	b8 01 00 00 00       	mov    $0x1,%eax
f012fed2:	eb 1b                	jmp    f012feef <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012fed4:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fedb:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fede:	eb 03                	jmp    f012fee3 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012fee0:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012fee3:	d1 6d 08             	shrl   0x8(%ebp)
f012fee6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012feea:	75 f4                	jne    f012fee0 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012feec:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012feef:	c9                   	leave  
f012fef0:	c3                   	ret    

f012fef1 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012fef1:	55                   	push   %ebp
f012fef2:	89 e5                	mov    %esp,%ebp
f012fef4:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012fef7:	8b 45 08             	mov    0x8(%ebp),%eax
f012fefa:	8b 00                	mov    (%eax),%eax
f012fefc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012feff:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff02:	8b 00                	mov    (%eax),%eax
f012ff04:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012ff07:	eb 52                	jmp    f012ff5b <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012ff09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff0c:	8b 00                	mov    (%eax),%eax
f012ff0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012ff11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ff17:	75 12                	jne    f012ff2b <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012ff19:	83 ec 0c             	sub    $0xc,%esp
f012ff1c:	68 f8 cd 13 f0       	push   $0xf013cdf8
f012ff21:	e8 e8 0d fd ff       	call   f0100d0e <cprintf>
f012ff26:	83 c4 10             	add    $0x10,%esp
			break;
f012ff29:	eb 3f                	jmp    f012ff6a <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012ff2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff2f:	74 38                	je     f012ff69 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012ff31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff34:	8b 00                	mov    (%eax),%eax
f012ff36:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012ff39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ff3f:	75 12                	jne    f012ff53 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012ff41:	83 ec 0c             	sub    $0xc,%esp
f012ff44:	68 14 ce 13 f0       	push   $0xf013ce14
f012ff49:	e8 c0 0d fd ff       	call   f0100d0e <cprintf>
f012ff4e:	83 c4 10             	add    $0x10,%esp
			break;
f012ff51:	eb 17                	jmp    f012ff6a <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012ff53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff56:	8b 00                	mov    (%eax),%eax
f012ff58:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012ff5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ff5f:	74 09                	je     f012ff6a <detect_loop_in_FrameInfo_list+0x79>
f012ff61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff65:	75 a2                	jne    f012ff09 <detect_loop_in_FrameInfo_list+0x18>
f012ff67:	eb 01                	jmp    f012ff6a <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012ff69:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012ff6a:	83 ec 0c             	sub    $0xc,%esp
f012ff6d:	68 2b ce 13 f0       	push   $0xf013ce2b
f012ff72:	e8 97 0d fd ff       	call   f0100d0e <cprintf>
f012ff77:	83 c4 10             	add    $0x10,%esp
}
f012ff7a:	90                   	nop
f012ff7b:	c9                   	leave  
f012ff7c:	c3                   	ret    

f012ff7d <scarce_memory>:

void scarce_memory()
{
f012ff7d:	55                   	push   %ebp
f012ff7e:	89 e5                	mov    %esp,%ebp
f012ff80:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012ff83:	a1 b0 25 78 f0       	mov    0xf07825b0,%eax
f012ff88:	ba 64 00 00 00       	mov    $0x64,%edx
f012ff8d:	29 c2                	sub    %eax,%edx
f012ff8f:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f012ff94:	0f af c2             	imul   %edx,%eax
f012ff97:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012ff9c:	f7 e2                	mul    %edx
f012ff9e:	89 d0                	mov    %edx,%eax
f012ffa0:	c1 e8 05             	shr    $0x5,%eax
f012ffa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012ffa6:	a1 b0 25 78 f0       	mov    0xf07825b0,%eax
f012ffab:	ba 64 00 00 00       	mov    $0x64,%edx
f012ffb0:	29 c2                	sub    %eax,%edx
f012ffb2:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f012ffb7:	89 d1                	mov    %edx,%ecx
f012ffb9:	0f af c8             	imul   %eax,%ecx
f012ffbc:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ffc1:	f7 e1                	mul    %ecx
f012ffc3:	c1 ea 05             	shr    $0x5,%edx
f012ffc6:	89 d0                	mov    %edx,%eax
f012ffc8:	c1 e0 02             	shl    $0x2,%eax
f012ffcb:	01 d0                	add    %edx,%eax
f012ffcd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ffd4:	01 d0                	add    %edx,%eax
f012ffd6:	c1 e0 02             	shl    $0x2,%eax
f012ffd9:	29 c1                	sub    %eax,%ecx
f012ffdb:	89 ca                	mov    %ecx,%edx
f012ffdd:	85 d2                	test   %edx,%edx
f012ffdf:	74 03                	je     f012ffe4 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012ffe1:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012ffe4:	8b 15 d0 25 78 f0    	mov    0xf07825d0,%edx
f012ffea:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f012ffef:	29 c2                	sub    %eax,%edx
f012fff1:	89 d0                	mov    %edx,%eax
f012fff3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012fff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fff9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fffc:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012ffff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130006:	eb 12                	jmp    f013001a <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f0130008:	83 ec 0c             	sub    $0xc,%esp
f013000b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f013000e:	50                   	push   %eax
f013000f:	e8 de 68 fd ff       	call   f01068f2 <allocate_frame>
f0130014:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130017:	ff 45 f0             	incl   -0x10(%ebp)
f013001a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013001d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130020:	76 e6                	jbe    f0130008 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f0130022:	90                   	nop
f0130023:	c9                   	leave  
f0130024:	c3                   	ret    

f0130025 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0130025:	55                   	push   %ebp
f0130026:	89 e5                	mov    %esp,%ebp
f0130028:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f013002b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f0130032:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130039:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f0130040:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130044:	0f 85 d0 01 00 00    	jne    f013021a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f013004a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0130051:	e9 de 00 00 00       	jmp    f0130134 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f0130056:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f013005d:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0130062:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130065:	c1 e2 04             	shl    $0x4,%edx
f0130068:	01 d0                	add    %edx,%eax
f013006a:	8b 00                	mov    (%eax),%eax
f013006c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013006f:	e9 85 00 00 00       	jmp    f01300f9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f0130074:	83 ec 0c             	sub    $0xc,%esp
f0130077:	ff 75 e4             	pushl  -0x1c(%ebp)
f013007a:	e8 97 7d fd ff       	call   f0107e16 <env_page_ws_get_size>
f013007f:	83 c4 10             	add    $0x10,%esp
f0130082:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130085:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013008a:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130090:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130093:	0f af c2             	imul   %edx,%eax
f0130096:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013009b:	f7 e2                	mul    %edx
f013009d:	89 d0                	mov    %edx,%eax
f013009f:	c1 e8 05             	shr    $0x5,%eax
f01300a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01300a5:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01300aa:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01300b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01300b3:	89 d1                	mov    %edx,%ecx
f01300b5:	0f af c8             	imul   %eax,%ecx
f01300b8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01300bd:	f7 e1                	mul    %ecx
f01300bf:	c1 ea 05             	shr    $0x5,%edx
f01300c2:	89 d0                	mov    %edx,%eax
f01300c4:	c1 e0 02             	shl    $0x2,%eax
f01300c7:	01 d0                	add    %edx,%eax
f01300c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01300d0:	01 d0                	add    %edx,%eax
f01300d2:	c1 e0 02             	shl    $0x2,%eax
f01300d5:	29 c1                	sub    %eax,%ecx
f01300d7:	89 ca                	mov    %ecx,%edx
f01300d9:	85 d2                	test   %edx,%edx
f01300db:	74 03                	je     f01300e0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01300dd:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01300e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01300e3:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01300e6:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01300eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01300ee:	c1 e2 04             	shl    $0x4,%edx
f01300f1:	01 d0                	add    %edx,%eax
f01300f3:	8b 40 08             	mov    0x8(%eax),%eax
f01300f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01300f9:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01300fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130101:	c1 e2 04             	shl    $0x4,%edx
f0130104:	01 d0                	add    %edx,%eax
f0130106:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013010a:	74 08                	je     f0130114 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f013010c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013010f:	8b 52 44             	mov    0x44(%edx),%edx
f0130112:	eb 05                	jmp    f0130119 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f0130114:	ba 00 00 00 00       	mov    $0x0,%edx
f0130119:	89 50 08             	mov    %edx,0x8(%eax)
f013011c:	8b 40 08             	mov    0x8(%eax),%eax
f013011f:	85 c0                	test   %eax,%eax
f0130121:	0f 85 4d ff ff ff    	jne    f0130074 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f0130127:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013012b:	0f 85 43 ff ff ff    	jne    f0130074 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130131:	ff 45 e8             	incl   -0x18(%ebp)
f0130134:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0130139:	0f b6 c0             	movzbl %al,%eax
f013013c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013013f:	0f 8f 11 ff ff ff    	jg     f0130056 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130145:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f013014c:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0130151:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130154:	eb 19                	jmp    f013016f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130156:	83 ec 0c             	sub    $0xc,%esp
f0130159:	ff 75 dc             	pushl  -0x24(%ebp)
f013015c:	e8 b5 7c fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130161:	83 c4 10             	add    $0x10,%esp
f0130164:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130167:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f013016c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013016f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130173:	74 08                	je     f013017d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130175:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130178:	8b 40 44             	mov    0x44(%eax),%eax
f013017b:	eb 05                	jmp    f0130182 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f013017d:	b8 00 00 00 00       	mov    $0x0,%eax
f0130182:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f0130187:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f013018c:	85 c0                	test   %eax,%eax
f013018e:	75 c6                	jne    f0130156 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130190:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130194:	75 c0                	jne    f0130156 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130196:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013019b:	85 c0                	test   %eax,%eax
f013019d:	0f 84 ec 00 00 00    	je     f013028f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01301a3:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01301a8:	83 ec 0c             	sub    $0xc,%esp
f01301ab:	50                   	push   %eax
f01301ac:	e8 65 7c fd ff       	call   f0107e16 <env_page_ws_get_size>
f01301b1:	83 c4 10             	add    $0x10,%esp
f01301b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01301b7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01301bc:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01301c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01301c5:	0f af c2             	imul   %edx,%eax
f01301c8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01301cd:	f7 e2                	mul    %edx
f01301cf:	89 d0                	mov    %edx,%eax
f01301d1:	c1 e8 05             	shr    $0x5,%eax
f01301d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01301d7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01301dc:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01301e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01301e5:	89 d1                	mov    %edx,%ecx
f01301e7:	0f af c8             	imul   %eax,%ecx
f01301ea:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01301ef:	f7 e1                	mul    %ecx
f01301f1:	c1 ea 05             	shr    $0x5,%edx
f01301f4:	89 d0                	mov    %edx,%eax
f01301f6:	c1 e0 02             	shl    $0x2,%eax
f01301f9:	01 d0                	add    %edx,%eax
f01301fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130202:	01 d0                	add    %edx,%eax
f0130204:	c1 e0 02             	shl    $0x2,%eax
f0130207:	29 c1                	sub    %eax,%ecx
f0130209:	89 ca                	mov    %ecx,%edx
f013020b:	85 d2                	test   %edx,%edx
f013020d:	74 03                	je     f0130212 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f013020f:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130212:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130215:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130218:	eb 75                	jmp    f013028f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f013021a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013021f:	83 ec 0c             	sub    $0xc,%esp
f0130222:	50                   	push   %eax
f0130223:	e8 ee 7b fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130228:	83 c4 10             	add    $0x10,%esp
f013022b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013022e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130233:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130239:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013023c:	0f af c2             	imul   %edx,%eax
f013023f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130244:	f7 e2                	mul    %edx
f0130246:	89 d0                	mov    %edx,%eax
f0130248:	c1 e8 05             	shr    $0x5,%eax
f013024b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013024e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130253:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130259:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013025c:	89 d1                	mov    %edx,%ecx
f013025e:	0f af c8             	imul   %eax,%ecx
f0130261:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130266:	f7 e1                	mul    %ecx
f0130268:	c1 ea 05             	shr    $0x5,%edx
f013026b:	89 d0                	mov    %edx,%eax
f013026d:	c1 e0 02             	shl    $0x2,%eax
f0130270:	01 d0                	add    %edx,%eax
f0130272:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130279:	01 d0                	add    %edx,%eax
f013027b:	c1 e0 02             	shl    $0x2,%eax
f013027e:	29 c1                	sub    %eax,%ecx
f0130280:	89 ca                	mov    %ecx,%edx
f0130282:	85 d2                	test   %edx,%edx
f0130284:	74 03                	je     f0130289 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130286:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130289:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f013028c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f013028f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130292:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130295:	01 c2                	add    %eax,%edx
f0130297:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013029a:	01 d0                	add    %edx,%eax
}
f013029c:	c9                   	leave  
f013029d:	c3                   	ret    

f013029e <schenv>:


void schenv()
{
f013029e:	55                   	push   %ebp
f013029f:	89 e5                	mov    %esp,%ebp
f01302a1:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f01302a4:	c6 05 68 26 78 f0 00 	movb   $0x0,0xf0782668
	__ne = NULL;
f01302ab:	c7 05 f8 25 78 f0 00 	movl   $0x0,0xf07825f8
f01302b2:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f01302b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01302bc:	eb 3f                	jmp    f01302fd <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f01302be:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01302c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302c6:	c1 e2 04             	shl    $0x4,%edx
f01302c9:	01 d0                	add    %edx,%eax
f01302cb:	83 ec 0c             	sub    $0xc,%esp
f01302ce:	50                   	push   %eax
f01302cf:	e8 b1 41 fd ff       	call   f0104485 <queue_size>
f01302d4:	83 c4 10             	add    $0x10,%esp
f01302d7:	85 c0                	test   %eax,%eax
f01302d9:	74 1f                	je     f01302fa <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f01302db:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01302e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302e3:	c1 e2 04             	shl    $0x4,%edx
f01302e6:	01 d0                	add    %edx,%eax
f01302e8:	8b 40 04             	mov    0x4(%eax),%eax
f01302eb:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
			__nl = i;
f01302f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302f3:	a2 68 26 78 f0       	mov    %al,0xf0782668
			break;
f01302f8:	eb 10                	jmp    f013030a <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f01302fa:	ff 45 f4             	incl   -0xc(%ebp)
f01302fd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0130302:	0f b6 c0             	movzbl %al,%eax
f0130305:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130308:	7f b4                	jg     f01302be <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f013030a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013030f:	85 c0                	test   %eax,%eax
f0130311:	0f 84 86 00 00 00    	je     f013039d <schenv+0xff>
	{
		if (__ne != NULL)
f0130317:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f013031c:	85 c0                	test   %eax,%eax
f013031e:	74 4b                	je     f013036b <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130320:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130325:	0f b6 c0             	movzbl %al,%eax
f0130328:	8d 50 01             	lea    0x1(%eax),%edx
f013032b:	a0 68 26 78 f0       	mov    0xf0782668,%al
f0130330:	0f b6 c0             	movzbl %al,%eax
f0130333:	39 c2                	cmp    %eax,%edx
f0130335:	7d 66                	jge    f013039d <schenv+0xff>
			{
				__ne = curenv;
f0130337:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013033c:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130341:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130346:	0f b6 c0             	movzbl %al,%eax
f0130349:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f013034f:	0f b6 d2             	movzbl %dl,%edx
f0130352:	4a                   	dec    %edx
f0130353:	39 d0                	cmp    %edx,%eax
f0130355:	7d 08                	jge    f013035f <schenv+0xc1>
f0130357:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013035c:	40                   	inc    %eax
f013035d:	eb 05                	jmp    f0130364 <schenv+0xc6>
f013035f:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130364:	a2 68 26 78 f0       	mov    %al,0xf0782668
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130369:	eb 32                	jmp    f013039d <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f013036b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130370:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130375:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013037a:	0f b6 c0             	movzbl %al,%eax
f013037d:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f0130383:	0f b6 d2             	movzbl %dl,%edx
f0130386:	4a                   	dec    %edx
f0130387:	39 d0                	cmp    %edx,%eax
f0130389:	7d 08                	jge    f0130393 <schenv+0xf5>
f013038b:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130390:	40                   	inc    %eax
f0130391:	eb 05                	jmp    f0130398 <schenv+0xfa>
f0130393:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130398:	a2 68 26 78 f0       	mov    %al,0xf0782668
		}
	}
}
f013039d:	90                   	nop
f013039e:	c9                   	leave  
f013039f:	c3                   	ret    

f01303a0 <chksch>:

void chksch(uint8 onoff)
{
f01303a0:	55                   	push   %ebp
f01303a1:	89 e5                	mov    %esp,%ebp
f01303a3:	83 ec 04             	sub    $0x4,%esp
f01303a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01303a9:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f01303ac:	c7 05 54 26 78 f0 00 	movl   $0x0,0xf0782654
f01303b3:	00 00 00 
	__ne = NULL;
f01303b6:	c7 05 f8 25 78 f0 00 	movl   $0x0,0xf07825f8
f01303bd:	00 00 00 
	__pl = 0 ;
f01303c0:	c6 05 a0 25 78 f0 00 	movb   $0x0,0xf07825a0
	__nl = 0 ;
f01303c7:	c6 05 68 26 78 f0 00 	movb   $0x0,0xf0782668
	__chkstatus = onoff;
f01303ce:	8a 45 fc             	mov    -0x4(%ebp),%al
f01303d1:	a2 f4 25 78 f0       	mov    %al,0xf07825f4
}
f01303d6:	90                   	nop
f01303d7:	c9                   	leave  
f01303d8:	c3                   	ret    

f01303d9 <chk1>:
void chk1()
{
f01303d9:	55                   	push   %ebp
f01303da:	89 e5                	mov    %esp,%ebp
f01303dc:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f01303df:	a0 f4 25 78 f0       	mov    0xf07825f4,%al
f01303e4:	84 c0                	test   %al,%al
f01303e6:	74 2b                	je     f0130413 <chk1+0x3a>
		return ;
	__pe = curenv;
f01303e8:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01303ed:	a3 54 26 78 f0       	mov    %eax,0xf0782654
	__pl = __nl ;
f01303f2:	a0 68 26 78 f0       	mov    0xf0782668,%al
f01303f7:	a2 a0 25 78 f0       	mov    %al,0xf07825a0
	if (__pe == NULL)
f01303fc:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f0130401:	85 c0                	test   %eax,%eax
f0130403:	75 07                	jne    f013040c <chk1+0x33>
	{
		__pl = 0;
f0130405:	c6 05 a0 25 78 f0 00 	movb   $0x0,0xf07825a0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f013040c:	e8 8d fe ff ff       	call   f013029e <schenv>
f0130411:	eb 01                	jmp    f0130414 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130413:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130414:	c9                   	leave  
f0130415:	c3                   	ret    

f0130416 <chk2>:
void chk2(struct Env* __se)
{
f0130416:	55                   	push   %ebp
f0130417:	89 e5                	mov    %esp,%ebp
f0130419:	53                   	push   %ebx
f013041a:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f013041d:	a0 f4 25 78 f0       	mov    0xf07825f4,%al
f0130422:	84 c0                	test   %al,%al
f0130424:	0f 84 43 02 00 00    	je     f013066d <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f013042a:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f013042f:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130432:	74 19                	je     f013044d <chk2+0x37>
f0130434:	68 45 ce 13 f0       	push   $0xf013ce45
f0130439:	68 52 ce 13 f0       	push   $0xf013ce52
f013043e:	68 c0 00 00 00       	push   $0xc0
f0130443:	68 67 ce 13 f0       	push   $0xf013ce67
f0130448:	e8 6e fe fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f013044d:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f0130452:	85 c0                	test   %eax,%eax
f0130454:	0f 84 25 01 00 00    	je     f013057f <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f013045a:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f0130460:	a0 68 26 78 f0       	mov    0xf0782668,%al
f0130465:	0f b6 c0             	movzbl %al,%eax
f0130468:	01 d0                	add    %edx,%eax
f013046a:	8a 00                	mov    (%eax),%al
f013046c:	0f b6 d8             	movzbl %al,%ebx
f013046f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130474:	99                   	cltd   
f0130475:	f7 fb                	idiv   %ebx
f0130477:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f013047d:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f0130483:	a0 68 26 78 f0       	mov    0xf0782668,%al
f0130488:	0f b6 c0             	movzbl %al,%eax
f013048b:	01 d0                	add    %edx,%eax
f013048d:	8a 00                	mov    (%eax),%al
f013048f:	0f b6 d8             	movzbl %al,%ebx
f0130492:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130497:	99                   	cltd   
f0130498:	f7 fb                	idiv   %ebx
f013049a:	89 c3                	mov    %eax,%ebx
f013049c:	89 c8                	mov    %ecx,%eax
f013049e:	99                   	cltd   
f013049f:	f7 fb                	idiv   %ebx
f01304a1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f01304a5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01304a9:	83 e0 01             	and    $0x1,%eax
f01304ac:	66 85 c0             	test   %ax,%ax
f01304af:	74 07                	je     f01304b8 <chk2+0xa2>
f01304b1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01304b5:	40                   	inc    %eax
f01304b6:	eb 04                	jmp    f01304bc <chk2+0xa6>
f01304b8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01304bc:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f01304c0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f01304c4:	89 d0                	mov    %edx,%eax
f01304c6:	c1 e0 02             	shl    $0x2,%eax
f01304c9:	01 d0                	add    %edx,%eax
f01304cb:	01 c0                	add    %eax,%eax
f01304cd:	01 d0                	add    %edx,%eax
f01304cf:	c1 e0 02             	shl    $0x2,%eax
f01304d2:	01 d0                	add    %edx,%eax
f01304d4:	01 c0                	add    %eax,%eax
f01304d6:	89 c1                	mov    %eax,%ecx
f01304d8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01304dd:	f7 e9                	imul   %ecx
f01304df:	c1 fa 05             	sar    $0x5,%edx
f01304e2:	89 c8                	mov    %ecx,%eax
f01304e4:	c1 f8 1f             	sar    $0x1f,%eax
f01304e7:	29 c2                	sub    %eax,%edx
f01304e9:	89 d0                	mov    %edx,%eax
f01304eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f01304ef:	e8 62 3e fd ff       	call   f0104356 <kclock_read_cnt0>
f01304f4:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f01304f8:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01304fc:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130500:	76 0a                	jbe    f013050c <chk2+0xf6>
f0130502:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130506:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f013050a:	76 19                	jbe    f0130525 <chk2+0x10f>
f013050c:	68 80 ce 13 f0       	push   $0xf013ce80
f0130511:	68 52 ce 13 f0       	push   $0xf013ce52
f0130516:	68 ca 00 00 00       	push   $0xca
f013051b:	68 67 ce 13 f0       	push   $0xf013ce67
f0130520:	e8 96 fd fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130525:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013052c:	eb 44                	jmp    f0130572 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f013052e:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f0130533:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130536:	89 c2                	mov    %eax,%edx
f0130538:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f013053d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130540:	c1 e1 04             	shl    $0x4,%ecx
f0130543:	01 c8                	add    %ecx,%eax
f0130545:	83 ec 08             	sub    $0x8,%esp
f0130548:	52                   	push   %edx
f0130549:	50                   	push   %eax
f013054a:	e8 50 41 fd ff       	call   f010469f <find_env_in_queue>
f013054f:	83 c4 10             	add    $0x10,%esp
f0130552:	85 c0                	test   %eax,%eax
f0130554:	74 19                	je     f013056f <chk2+0x159>
f0130556:	68 a4 ce 13 f0       	push   $0xf013cea4
f013055b:	68 52 ce 13 f0       	push   $0xf013ce52
f0130560:	68 ce 00 00 00       	push   $0xce
f0130565:	68 67 ce 13 f0       	push   $0xf013ce67
f013056a:	e8 4c fd fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f013056f:	ff 45 f4             	incl   -0xc(%ebp)
f0130572:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0130577:	0f b6 c0             	movzbl %al,%eax
f013057a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013057d:	7f af                	jg     f013052e <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f013057f:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f0130584:	85 c0                	test   %eax,%eax
f0130586:	0f 84 e2 00 00 00    	je     f013066e <chk2+0x258>
f013058c:	8b 15 54 26 78 f0    	mov    0xf0782654,%edx
f0130592:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f0130597:	39 c2                	cmp    %eax,%edx
f0130599:	0f 84 cf 00 00 00    	je     f013066e <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f013059f:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f01305a4:	0f b6 c0             	movzbl %al,%eax
f01305a7:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f01305ad:	0f b6 d2             	movzbl %dl,%edx
f01305b0:	4a                   	dec    %edx
f01305b1:	39 d0                	cmp    %edx,%eax
f01305b3:	74 08                	je     f01305bd <chk2+0x1a7>
f01305b5:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f01305ba:	40                   	inc    %eax
f01305bb:	eb 05                	jmp    f01305c2 <chk2+0x1ac>
f01305bd:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f01305c2:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f01305c5:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f01305ca:	8b 40 4c             	mov    0x4c(%eax),%eax
f01305cd:	89 c2                	mov    %eax,%edx
f01305cf:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01305d4:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f01305d8:	c1 e1 04             	shl    $0x4,%ecx
f01305db:	01 c8                	add    %ecx,%eax
f01305dd:	83 ec 08             	sub    $0x8,%esp
f01305e0:	52                   	push   %edx
f01305e1:	50                   	push   %eax
f01305e2:	e8 b8 40 fd ff       	call   f010469f <find_env_in_queue>
f01305e7:	83 c4 10             	add    $0x10,%esp
f01305ea:	85 c0                	test   %eax,%eax
f01305ec:	75 19                	jne    f0130607 <chk2+0x1f1>
f01305ee:	68 e4 ce 13 f0       	push   $0xf013cee4
f01305f3:	68 52 ce 13 f0       	push   $0xf013ce52
f01305f8:	68 d4 00 00 00       	push   $0xd4
f01305fd:	68 67 ce 13 f0       	push   $0xf013ce67
f0130602:	e8 b4 fc fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130607:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f013060e:	eb 4e                	jmp    f013065e <chk2+0x248>
		{
			if (i == __tl) continue;
f0130610:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130614:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130617:	74 41                	je     f013065a <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130619:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f013061e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130621:	89 c2                	mov    %eax,%edx
f0130623:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0130628:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013062b:	c1 e1 04             	shl    $0x4,%ecx
f013062e:	01 c8                	add    %ecx,%eax
f0130630:	83 ec 08             	sub    $0x8,%esp
f0130633:	52                   	push   %edx
f0130634:	50                   	push   %eax
f0130635:	e8 65 40 fd ff       	call   f010469f <find_env_in_queue>
f013063a:	83 c4 10             	add    $0x10,%esp
f013063d:	85 c0                	test   %eax,%eax
f013063f:	74 1a                	je     f013065b <chk2+0x245>
f0130641:	68 28 cf 13 f0       	push   $0xf013cf28
f0130646:	68 52 ce 13 f0       	push   $0xf013ce52
f013064b:	68 d8 00 00 00       	push   $0xd8
f0130650:	68 67 ce 13 f0       	push   $0xf013ce67
f0130655:	e8 61 fc fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f013065a:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f013065b:	ff 45 f0             	incl   -0x10(%ebp)
f013065e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0130663:	0f b6 c0             	movzbl %al,%eax
f0130666:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130669:	7f a5                	jg     f0130610 <chk2+0x1fa>
f013066b:	eb 01                	jmp    f013066e <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f013066d:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f013066e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130671:	c9                   	leave  
f0130672:	c3                   	ret    

f0130673 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130673:	55                   	push   %ebp
f0130674:	89 e5                	mov    %esp,%ebp
f0130676:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130679:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130680:	eb 40                	jmp    f01306c2 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130682:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130685:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013068b:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0130690:	83 ec 08             	sub    $0x8,%esp
f0130693:	52                   	push   %edx
f0130694:	50                   	push   %eax
f0130695:	e8 9b 01 00 00       	call   f0130835 <check_va2pa>
f013069a:	83 c4 10             	add    $0x10,%esp
f013069d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01306a0:	74 19                	je     f01306bb <check_boot_pgdir+0x48>
f01306a2:	68 68 cf 13 f0       	push   $0xf013cf68
f01306a7:	68 52 ce 13 f0       	push   $0xf013ce52
f01306ac:	68 fa 00 00 00       	push   $0xfa
f01306b1:	68 67 ce 13 f0       	push   $0xf013ce67
f01306b6:	e8 4a fb fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f01306bb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01306c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01306c5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01306cb:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f01306d0:	39 c2                	cmp    %eax,%edx
f01306d2:	72 ae                	jb     f0130682 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01306d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01306db:	eb 74                	jmp    f0130751 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01306dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01306e0:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01306e6:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01306eb:	83 ec 08             	sub    $0x8,%esp
f01306ee:	52                   	push   %edx
f01306ef:	50                   	push   %eax
f01306f0:	e8 40 01 00 00       	call   f0130835 <check_va2pa>
f01306f5:	83 c4 10             	add    $0x10,%esp
f01306f8:	c7 45 f0 00 a0 18 f0 	movl   $0xf018a000,-0x10(%ebp)
f01306ff:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130706:	77 17                	ja     f013071f <check_boot_pgdir+0xac>
f0130708:	ff 75 f0             	pushl  -0x10(%ebp)
f013070b:	68 a0 cf 13 f0       	push   $0xf013cfa0
f0130710:	68 04 01 00 00       	push   $0x104
f0130715:	68 67 ce 13 f0       	push   $0xf013ce67
f013071a:	e8 e6 fa fc ff       	call   f0100205 <_panic>
f013071f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130722:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130728:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013072b:	01 ca                	add    %ecx,%edx
f013072d:	39 d0                	cmp    %edx,%eax
f013072f:	74 19                	je     f013074a <check_boot_pgdir+0xd7>
f0130731:	68 d4 cf 13 f0       	push   $0xf013cfd4
f0130736:	68 52 ce 13 f0       	push   $0xf013ce52
f013073b:	68 04 01 00 00       	push   $0x104
f0130740:	68 67 ce 13 f0       	push   $0xf013ce67
f0130745:	e8 bb fa fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f013074a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130751:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130758:	76 83                	jbe    f01306dd <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f013075a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130761:	e9 af 00 00 00       	jmp    f0130815 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130766:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130769:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f013076e:	74 11                	je     f0130781 <check_boot_pgdir+0x10e>
f0130770:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130775:	72 36                	jb     f01307ad <check_boot_pgdir+0x13a>
f0130777:	2d bd 03 00 00       	sub    $0x3bd,%eax
f013077c:	83 f8 02             	cmp    $0x2,%eax
f013077f:	77 2c                	ja     f01307ad <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130781:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0130786:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130789:	c1 e2 02             	shl    $0x2,%edx
f013078c:	01 d0                	add    %edx,%eax
f013078e:	8b 00                	mov    (%eax),%eax
f0130790:	85 c0                	test   %eax,%eax
f0130792:	75 7a                	jne    f013080e <check_boot_pgdir+0x19b>
f0130794:	68 56 d0 13 f0       	push   $0xf013d056
f0130799:	68 52 ce 13 f0       	push   $0xf013ce52
f013079e:	68 0f 01 00 00       	push   $0x10f
f01307a3:	68 67 ce 13 f0       	push   $0xf013ce67
f01307a8:	e8 58 fa fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f01307ad:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f01307b4:	76 2c                	jbe    f01307e2 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f01307b6:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01307bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307be:	c1 e2 02             	shl    $0x2,%edx
f01307c1:	01 d0                	add    %edx,%eax
f01307c3:	8b 00                	mov    (%eax),%eax
f01307c5:	85 c0                	test   %eax,%eax
f01307c7:	75 48                	jne    f0130811 <check_boot_pgdir+0x19e>
f01307c9:	68 56 d0 13 f0       	push   $0xf013d056
f01307ce:	68 52 ce 13 f0       	push   $0xf013ce52
f01307d3:	68 13 01 00 00       	push   $0x113
f01307d8:	68 67 ce 13 f0       	push   $0xf013ce67
f01307dd:	e8 23 fa fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01307e2:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01307e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307ea:	c1 e2 02             	shl    $0x2,%edx
f01307ed:	01 d0                	add    %edx,%eax
f01307ef:	8b 00                	mov    (%eax),%eax
f01307f1:	85 c0                	test   %eax,%eax
f01307f3:	74 1c                	je     f0130811 <check_boot_pgdir+0x19e>
f01307f5:	68 6c d0 13 f0       	push   $0xf013d06c
f01307fa:	68 52 ce 13 f0       	push   $0xf013ce52
f01307ff:	68 15 01 00 00       	push   $0x115
f0130804:	68 67 ce 13 f0       	push   $0xf013ce67
f0130809:	e8 f7 f9 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f013080e:	90                   	nop
f013080f:	eb 01                	jmp    f0130812 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130811:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130812:	ff 45 f4             	incl   -0xc(%ebp)
f0130815:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f013081c:	0f 86 44 ff ff ff    	jbe    f0130766 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130822:	83 ec 0c             	sub    $0xc,%esp
f0130825:	68 88 d0 13 f0       	push   $0xf013d088
f013082a:	e8 df 04 fd ff       	call   f0100d0e <cprintf>
f013082f:	83 c4 10             	add    $0x10,%esp
}
f0130832:	90                   	nop
f0130833:	c9                   	leave  
f0130834:	c3                   	ret    

f0130835 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130835:	55                   	push   %ebp
f0130836:	89 e5                	mov    %esp,%ebp
f0130838:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f013083b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013083e:	c1 e8 16             	shr    $0x16,%eax
f0130841:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130848:	8b 45 08             	mov    0x8(%ebp),%eax
f013084b:	01 d0                	add    %edx,%eax
f013084d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130850:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130853:	8b 00                	mov    (%eax),%eax
f0130855:	83 e0 01             	and    $0x1,%eax
f0130858:	85 c0                	test   %eax,%eax
f013085a:	75 0a                	jne    f0130866 <check_va2pa+0x31>
		return ~0;
f013085c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130861:	e9 87 00 00 00       	jmp    f01308ed <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130869:	8b 00                	mov    (%eax),%eax
f013086b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130870:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130873:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130876:	c1 e8 0c             	shr    $0xc,%eax
f0130879:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013087c:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0130881:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130884:	72 17                	jb     f013089d <check_va2pa+0x68>
f0130886:	ff 75 f0             	pushl  -0x10(%ebp)
f0130889:	68 a8 d0 13 f0       	push   $0xf013d0a8
f013088e:	68 2b 01 00 00       	push   $0x12b
f0130893:	68 67 ce 13 f0       	push   $0xf013ce67
f0130898:	e8 68 f9 fc ff       	call   f0100205 <_panic>
f013089d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01308a0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01308a5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f01308a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308ab:	c1 e8 0c             	shr    $0xc,%eax
f01308ae:	25 ff 03 00 00       	and    $0x3ff,%eax
f01308b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01308ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01308bd:	01 d0                	add    %edx,%eax
f01308bf:	8b 00                	mov    (%eax),%eax
f01308c1:	83 e0 01             	and    $0x1,%eax
f01308c4:	85 c0                	test   %eax,%eax
f01308c6:	75 07                	jne    f01308cf <check_va2pa+0x9a>
		return ~0;
f01308c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01308cd:	eb 1e                	jmp    f01308ed <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01308cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308d2:	c1 e8 0c             	shr    $0xc,%eax
f01308d5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01308da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01308e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01308e4:	01 d0                	add    %edx,%eax
f01308e6:	8b 00                	mov    (%eax),%eax
f01308e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01308ed:	c9                   	leave  
f01308ee:	c3                   	ret    

f01308ef <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01308ef:	55                   	push   %ebp
f01308f0:	89 e5                	mov    %esp,%ebp
f01308f2:	53                   	push   %ebx
f01308f3:	83 ec 14             	sub    $0x14,%esp
f01308f6:	8b 45 10             	mov    0x10(%ebp),%eax
f01308f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01308fc:	8b 45 14             	mov    0x14(%ebp),%eax
f01308ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130902:	8b 45 18             	mov    0x18(%ebp),%eax
f0130905:	ba 00 00 00 00       	mov    $0x0,%edx
f013090a:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f013090d:	77 55                	ja     f0130964 <printnum+0x75>
f013090f:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130912:	72 05                	jb     f0130919 <printnum+0x2a>
f0130914:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130917:	77 4b                	ja     f0130964 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130919:	8b 45 1c             	mov    0x1c(%ebp),%eax
f013091c:	8d 58 ff             	lea    -0x1(%eax),%ebx
f013091f:	8b 45 18             	mov    0x18(%ebp),%eax
f0130922:	ba 00 00 00 00       	mov    $0x0,%edx
f0130927:	52                   	push   %edx
f0130928:	50                   	push   %eax
f0130929:	ff 75 f4             	pushl  -0xc(%ebp)
f013092c:	ff 75 f0             	pushl  -0x10(%ebp)
f013092f:	e8 0c 28 00 00       	call   f0133140 <__udivdi3>
f0130934:	83 c4 10             	add    $0x10,%esp
f0130937:	83 ec 04             	sub    $0x4,%esp
f013093a:	ff 75 20             	pushl  0x20(%ebp)
f013093d:	53                   	push   %ebx
f013093e:	ff 75 18             	pushl  0x18(%ebp)
f0130941:	52                   	push   %edx
f0130942:	50                   	push   %eax
f0130943:	ff 75 0c             	pushl  0xc(%ebp)
f0130946:	ff 75 08             	pushl  0x8(%ebp)
f0130949:	e8 a1 ff ff ff       	call   f01308ef <printnum>
f013094e:	83 c4 20             	add    $0x20,%esp
f0130951:	eb 1a                	jmp    f013096d <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130953:	83 ec 08             	sub    $0x8,%esp
f0130956:	ff 75 0c             	pushl  0xc(%ebp)
f0130959:	ff 75 20             	pushl  0x20(%ebp)
f013095c:	8b 45 08             	mov    0x8(%ebp),%eax
f013095f:	ff d0                	call   *%eax
f0130961:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130964:	ff 4d 1c             	decl   0x1c(%ebp)
f0130967:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f013096b:	7f e6                	jg     f0130953 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f013096d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130970:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130975:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130978:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013097b:	53                   	push   %ebx
f013097c:	51                   	push   %ecx
f013097d:	52                   	push   %edx
f013097e:	50                   	push   %eax
f013097f:	e8 cc 28 00 00       	call   f0133250 <__umoddi3>
f0130984:	83 c4 10             	add    $0x10,%esp
f0130987:	05 f4 d2 13 f0       	add    $0xf013d2f4,%eax
f013098c:	8a 00                	mov    (%eax),%al
f013098e:	0f be c0             	movsbl %al,%eax
f0130991:	83 ec 08             	sub    $0x8,%esp
f0130994:	ff 75 0c             	pushl  0xc(%ebp)
f0130997:	50                   	push   %eax
f0130998:	8b 45 08             	mov    0x8(%ebp),%eax
f013099b:	ff d0                	call   *%eax
f013099d:	83 c4 10             	add    $0x10,%esp
}
f01309a0:	90                   	nop
f01309a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01309a4:	c9                   	leave  
f01309a5:	c3                   	ret    

f01309a6 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f01309a6:	55                   	push   %ebp
f01309a7:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01309a9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01309ad:	7e 1c                	jle    f01309cb <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f01309af:	8b 45 08             	mov    0x8(%ebp),%eax
f01309b2:	8b 00                	mov    (%eax),%eax
f01309b4:	8d 50 08             	lea    0x8(%eax),%edx
f01309b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01309ba:	89 10                	mov    %edx,(%eax)
f01309bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01309bf:	8b 00                	mov    (%eax),%eax
f01309c1:	83 e8 08             	sub    $0x8,%eax
f01309c4:	8b 50 04             	mov    0x4(%eax),%edx
f01309c7:	8b 00                	mov    (%eax),%eax
f01309c9:	eb 40                	jmp    f0130a0b <getuint+0x65>
	else if (lflag)
f01309cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01309cf:	74 1e                	je     f01309ef <getuint+0x49>
		return va_arg(*ap, unsigned long);
f01309d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01309d4:	8b 00                	mov    (%eax),%eax
f01309d6:	8d 50 04             	lea    0x4(%eax),%edx
f01309d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01309dc:	89 10                	mov    %edx,(%eax)
f01309de:	8b 45 08             	mov    0x8(%ebp),%eax
f01309e1:	8b 00                	mov    (%eax),%eax
f01309e3:	83 e8 04             	sub    $0x4,%eax
f01309e6:	8b 00                	mov    (%eax),%eax
f01309e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01309ed:	eb 1c                	jmp    f0130a0b <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01309ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01309f2:	8b 00                	mov    (%eax),%eax
f01309f4:	8d 50 04             	lea    0x4(%eax),%edx
f01309f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01309fa:	89 10                	mov    %edx,(%eax)
f01309fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01309ff:	8b 00                	mov    (%eax),%eax
f0130a01:	83 e8 04             	sub    $0x4,%eax
f0130a04:	8b 00                	mov    (%eax),%eax
f0130a06:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130a0b:	5d                   	pop    %ebp
f0130a0c:	c3                   	ret    

f0130a0d <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130a0d:	55                   	push   %ebp
f0130a0e:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130a10:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130a14:	7e 1c                	jle    f0130a32 <getint+0x25>
		return va_arg(*ap, long long);
f0130a16:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a19:	8b 00                	mov    (%eax),%eax
f0130a1b:	8d 50 08             	lea    0x8(%eax),%edx
f0130a1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a21:	89 10                	mov    %edx,(%eax)
f0130a23:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a26:	8b 00                	mov    (%eax),%eax
f0130a28:	83 e8 08             	sub    $0x8,%eax
f0130a2b:	8b 50 04             	mov    0x4(%eax),%edx
f0130a2e:	8b 00                	mov    (%eax),%eax
f0130a30:	eb 38                	jmp    f0130a6a <getint+0x5d>
	else if (lflag)
f0130a32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130a36:	74 1a                	je     f0130a52 <getint+0x45>
		return va_arg(*ap, long);
f0130a38:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a3b:	8b 00                	mov    (%eax),%eax
f0130a3d:	8d 50 04             	lea    0x4(%eax),%edx
f0130a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a43:	89 10                	mov    %edx,(%eax)
f0130a45:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a48:	8b 00                	mov    (%eax),%eax
f0130a4a:	83 e8 04             	sub    $0x4,%eax
f0130a4d:	8b 00                	mov    (%eax),%eax
f0130a4f:	99                   	cltd   
f0130a50:	eb 18                	jmp    f0130a6a <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a55:	8b 00                	mov    (%eax),%eax
f0130a57:	8d 50 04             	lea    0x4(%eax),%edx
f0130a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a5d:	89 10                	mov    %edx,(%eax)
f0130a5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a62:	8b 00                	mov    (%eax),%eax
f0130a64:	83 e8 04             	sub    $0x4,%eax
f0130a67:	8b 00                	mov    (%eax),%eax
f0130a69:	99                   	cltd   
}
f0130a6a:	5d                   	pop    %ebp
f0130a6b:	c3                   	ret    

f0130a6c <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130a6c:	55                   	push   %ebp
f0130a6d:	89 e5                	mov    %esp,%ebp
f0130a6f:	56                   	push   %esi
f0130a70:	53                   	push   %ebx
f0130a71:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130a74:	eb 17                	jmp    f0130a8d <vprintfmt+0x21>
			if (ch == '\0')
f0130a76:	85 db                	test   %ebx,%ebx
f0130a78:	0f 84 af 03 00 00    	je     f0130e2d <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130a7e:	83 ec 08             	sub    $0x8,%esp
f0130a81:	ff 75 0c             	pushl  0xc(%ebp)
f0130a84:	53                   	push   %ebx
f0130a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a88:	ff d0                	call   *%eax
f0130a8a:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130a8d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a90:	8d 50 01             	lea    0x1(%eax),%edx
f0130a93:	89 55 10             	mov    %edx,0x10(%ebp)
f0130a96:	8a 00                	mov    (%eax),%al
f0130a98:	0f b6 d8             	movzbl %al,%ebx
f0130a9b:	83 fb 25             	cmp    $0x25,%ebx
f0130a9e:	75 d6                	jne    f0130a76 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130aa0:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130aa4:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130aab:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130ab2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130ab9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130ac0:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ac3:	8d 50 01             	lea    0x1(%eax),%edx
f0130ac6:	89 55 10             	mov    %edx,0x10(%ebp)
f0130ac9:	8a 00                	mov    (%eax),%al
f0130acb:	0f b6 d8             	movzbl %al,%ebx
f0130ace:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130ad1:	83 f8 55             	cmp    $0x55,%eax
f0130ad4:	0f 87 2b 03 00 00    	ja     f0130e05 <vprintfmt+0x399>
f0130ada:	8b 04 85 18 d3 13 f0 	mov    -0xfec2ce8(,%eax,4),%eax
f0130ae1:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130ae3:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130ae7:	eb d7                	jmp    f0130ac0 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130ae9:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130aed:	eb d1                	jmp    f0130ac0 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130aef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130af6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130af9:	89 d0                	mov    %edx,%eax
f0130afb:	c1 e0 02             	shl    $0x2,%eax
f0130afe:	01 d0                	add    %edx,%eax
f0130b00:	01 c0                	add    %eax,%eax
f0130b02:	01 d8                	add    %ebx,%eax
f0130b04:	83 e8 30             	sub    $0x30,%eax
f0130b07:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130b0a:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b0d:	8a 00                	mov    (%eax),%al
f0130b0f:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130b12:	83 fb 2f             	cmp    $0x2f,%ebx
f0130b15:	7e 3e                	jle    f0130b55 <vprintfmt+0xe9>
f0130b17:	83 fb 39             	cmp    $0x39,%ebx
f0130b1a:	7f 39                	jg     f0130b55 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130b1c:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130b1f:	eb d5                	jmp    f0130af6 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130b21:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b24:	83 c0 04             	add    $0x4,%eax
f0130b27:	89 45 14             	mov    %eax,0x14(%ebp)
f0130b2a:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b2d:	83 e8 04             	sub    $0x4,%eax
f0130b30:	8b 00                	mov    (%eax),%eax
f0130b32:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130b35:	eb 1f                	jmp    f0130b56 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130b37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130b3b:	79 83                	jns    f0130ac0 <vprintfmt+0x54>
				width = 0;
f0130b3d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130b44:	e9 77 ff ff ff       	jmp    f0130ac0 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130b49:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130b50:	e9 6b ff ff ff       	jmp    f0130ac0 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130b55:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130b56:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130b5a:	0f 89 60 ff ff ff    	jns    f0130ac0 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130b60:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130b66:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130b6d:	e9 4e ff ff ff       	jmp    f0130ac0 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130b72:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130b75:	e9 46 ff ff ff       	jmp    f0130ac0 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0130b7a:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b7d:	83 c0 04             	add    $0x4,%eax
f0130b80:	89 45 14             	mov    %eax,0x14(%ebp)
f0130b83:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b86:	83 e8 04             	sub    $0x4,%eax
f0130b89:	8b 00                	mov    (%eax),%eax
f0130b8b:	83 ec 08             	sub    $0x8,%esp
f0130b8e:	ff 75 0c             	pushl  0xc(%ebp)
f0130b91:	50                   	push   %eax
f0130b92:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b95:	ff d0                	call   *%eax
f0130b97:	83 c4 10             	add    $0x10,%esp
			break;
f0130b9a:	e9 89 02 00 00       	jmp    f0130e28 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130b9f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ba2:	83 c0 04             	add    $0x4,%eax
f0130ba5:	89 45 14             	mov    %eax,0x14(%ebp)
f0130ba8:	8b 45 14             	mov    0x14(%ebp),%eax
f0130bab:	83 e8 04             	sub    $0x4,%eax
f0130bae:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130bb0:	85 db                	test   %ebx,%ebx
f0130bb2:	79 02                	jns    f0130bb6 <vprintfmt+0x14a>
				err = -err;
f0130bb4:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130bb6:	83 fb 64             	cmp    $0x64,%ebx
f0130bb9:	7f 0b                	jg     f0130bc6 <vprintfmt+0x15a>
f0130bbb:	8b 34 9d 60 d1 13 f0 	mov    -0xfec2ea0(,%ebx,4),%esi
f0130bc2:	85 f6                	test   %esi,%esi
f0130bc4:	75 19                	jne    f0130bdf <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130bc6:	53                   	push   %ebx
f0130bc7:	68 05 d3 13 f0       	push   $0xf013d305
f0130bcc:	ff 75 0c             	pushl  0xc(%ebp)
f0130bcf:	ff 75 08             	pushl  0x8(%ebp)
f0130bd2:	e8 5e 02 00 00       	call   f0130e35 <printfmt>
f0130bd7:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130bda:	e9 49 02 00 00       	jmp    f0130e28 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130bdf:	56                   	push   %esi
f0130be0:	68 0e d3 13 f0       	push   $0xf013d30e
f0130be5:	ff 75 0c             	pushl  0xc(%ebp)
f0130be8:	ff 75 08             	pushl  0x8(%ebp)
f0130beb:	e8 45 02 00 00       	call   f0130e35 <printfmt>
f0130bf0:	83 c4 10             	add    $0x10,%esp
			break;
f0130bf3:	e9 30 02 00 00       	jmp    f0130e28 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130bf8:	8b 45 14             	mov    0x14(%ebp),%eax
f0130bfb:	83 c0 04             	add    $0x4,%eax
f0130bfe:	89 45 14             	mov    %eax,0x14(%ebp)
f0130c01:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c04:	83 e8 04             	sub    $0x4,%eax
f0130c07:	8b 30                	mov    (%eax),%esi
f0130c09:	85 f6                	test   %esi,%esi
f0130c0b:	75 05                	jne    f0130c12 <vprintfmt+0x1a6>
				p = "(null)";
f0130c0d:	be 11 d3 13 f0       	mov    $0xf013d311,%esi
			if (width > 0 && padc != '-')
f0130c12:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130c16:	7e 6d                	jle    f0130c85 <vprintfmt+0x219>
f0130c18:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130c1c:	74 67                	je     f0130c85 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130c1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130c21:	83 ec 08             	sub    $0x8,%esp
f0130c24:	50                   	push   %eax
f0130c25:	56                   	push   %esi
f0130c26:	e8 12 05 00 00       	call   f013113d <strnlen>
f0130c2b:	83 c4 10             	add    $0x10,%esp
f0130c2e:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130c31:	eb 16                	jmp    f0130c49 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130c33:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130c37:	83 ec 08             	sub    $0x8,%esp
f0130c3a:	ff 75 0c             	pushl  0xc(%ebp)
f0130c3d:	50                   	push   %eax
f0130c3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c41:	ff d0                	call   *%eax
f0130c43:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130c46:	ff 4d e4             	decl   -0x1c(%ebp)
f0130c49:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130c4d:	7f e4                	jg     f0130c33 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130c4f:	eb 34                	jmp    f0130c85 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130c51:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130c55:	74 1c                	je     f0130c73 <vprintfmt+0x207>
f0130c57:	83 fb 1f             	cmp    $0x1f,%ebx
f0130c5a:	7e 05                	jle    f0130c61 <vprintfmt+0x1f5>
f0130c5c:	83 fb 7e             	cmp    $0x7e,%ebx
f0130c5f:	7e 12                	jle    f0130c73 <vprintfmt+0x207>
					putch('?', putdat);
f0130c61:	83 ec 08             	sub    $0x8,%esp
f0130c64:	ff 75 0c             	pushl  0xc(%ebp)
f0130c67:	6a 3f                	push   $0x3f
f0130c69:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c6c:	ff d0                	call   *%eax
f0130c6e:	83 c4 10             	add    $0x10,%esp
f0130c71:	eb 0f                	jmp    f0130c82 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130c73:	83 ec 08             	sub    $0x8,%esp
f0130c76:	ff 75 0c             	pushl  0xc(%ebp)
f0130c79:	53                   	push   %ebx
f0130c7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c7d:	ff d0                	call   *%eax
f0130c7f:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130c82:	ff 4d e4             	decl   -0x1c(%ebp)
f0130c85:	89 f0                	mov    %esi,%eax
f0130c87:	8d 70 01             	lea    0x1(%eax),%esi
f0130c8a:	8a 00                	mov    (%eax),%al
f0130c8c:	0f be d8             	movsbl %al,%ebx
f0130c8f:	85 db                	test   %ebx,%ebx
f0130c91:	74 24                	je     f0130cb7 <vprintfmt+0x24b>
f0130c93:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130c97:	78 b8                	js     f0130c51 <vprintfmt+0x1e5>
f0130c99:	ff 4d e0             	decl   -0x20(%ebp)
f0130c9c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130ca0:	79 af                	jns    f0130c51 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130ca2:	eb 13                	jmp    f0130cb7 <vprintfmt+0x24b>
				putch(' ', putdat);
f0130ca4:	83 ec 08             	sub    $0x8,%esp
f0130ca7:	ff 75 0c             	pushl  0xc(%ebp)
f0130caa:	6a 20                	push   $0x20
f0130cac:	8b 45 08             	mov    0x8(%ebp),%eax
f0130caf:	ff d0                	call   *%eax
f0130cb1:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130cb4:	ff 4d e4             	decl   -0x1c(%ebp)
f0130cb7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130cbb:	7f e7                	jg     f0130ca4 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130cbd:	e9 66 01 00 00       	jmp    f0130e28 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130cc2:	83 ec 08             	sub    $0x8,%esp
f0130cc5:	ff 75 e8             	pushl  -0x18(%ebp)
f0130cc8:	8d 45 14             	lea    0x14(%ebp),%eax
f0130ccb:	50                   	push   %eax
f0130ccc:	e8 3c fd ff ff       	call   f0130a0d <getint>
f0130cd1:	83 c4 10             	add    $0x10,%esp
f0130cd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130cd7:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130cdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ce0:	85 d2                	test   %edx,%edx
f0130ce2:	79 23                	jns    f0130d07 <vprintfmt+0x29b>
				putch('-', putdat);
f0130ce4:	83 ec 08             	sub    $0x8,%esp
f0130ce7:	ff 75 0c             	pushl  0xc(%ebp)
f0130cea:	6a 2d                	push   $0x2d
f0130cec:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cef:	ff d0                	call   *%eax
f0130cf1:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130cf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130cfa:	f7 d8                	neg    %eax
f0130cfc:	83 d2 00             	adc    $0x0,%edx
f0130cff:	f7 da                	neg    %edx
f0130d01:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d04:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130d07:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130d0e:	e9 bc 00 00 00       	jmp    f0130dcf <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130d13:	83 ec 08             	sub    $0x8,%esp
f0130d16:	ff 75 e8             	pushl  -0x18(%ebp)
f0130d19:	8d 45 14             	lea    0x14(%ebp),%eax
f0130d1c:	50                   	push   %eax
f0130d1d:	e8 84 fc ff ff       	call   f01309a6 <getuint>
f0130d22:	83 c4 10             	add    $0x10,%esp
f0130d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130d2b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130d32:	e9 98 00 00 00       	jmp    f0130dcf <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130d37:	83 ec 08             	sub    $0x8,%esp
f0130d3a:	ff 75 0c             	pushl  0xc(%ebp)
f0130d3d:	6a 58                	push   $0x58
f0130d3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d42:	ff d0                	call   *%eax
f0130d44:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130d47:	83 ec 08             	sub    $0x8,%esp
f0130d4a:	ff 75 0c             	pushl  0xc(%ebp)
f0130d4d:	6a 58                	push   $0x58
f0130d4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d52:	ff d0                	call   *%eax
f0130d54:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130d57:	83 ec 08             	sub    $0x8,%esp
f0130d5a:	ff 75 0c             	pushl  0xc(%ebp)
f0130d5d:	6a 58                	push   $0x58
f0130d5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d62:	ff d0                	call   *%eax
f0130d64:	83 c4 10             	add    $0x10,%esp
			break;
f0130d67:	e9 bc 00 00 00       	jmp    f0130e28 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130d6c:	83 ec 08             	sub    $0x8,%esp
f0130d6f:	ff 75 0c             	pushl  0xc(%ebp)
f0130d72:	6a 30                	push   $0x30
f0130d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d77:	ff d0                	call   *%eax
f0130d79:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130d7c:	83 ec 08             	sub    $0x8,%esp
f0130d7f:	ff 75 0c             	pushl  0xc(%ebp)
f0130d82:	6a 78                	push   $0x78
f0130d84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d87:	ff d0                	call   *%eax
f0130d89:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130d8c:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d8f:	83 c0 04             	add    $0x4,%eax
f0130d92:	89 45 14             	mov    %eax,0x14(%ebp)
f0130d95:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d98:	83 e8 04             	sub    $0x4,%eax
f0130d9b:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130d9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130da0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130da7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130dae:	eb 1f                	jmp    f0130dcf <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130db0:	83 ec 08             	sub    $0x8,%esp
f0130db3:	ff 75 e8             	pushl  -0x18(%ebp)
f0130db6:	8d 45 14             	lea    0x14(%ebp),%eax
f0130db9:	50                   	push   %eax
f0130dba:	e8 e7 fb ff ff       	call   f01309a6 <getuint>
f0130dbf:	83 c4 10             	add    $0x10,%esp
f0130dc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130dc5:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130dc8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0130dcf:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130dd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130dd6:	83 ec 04             	sub    $0x4,%esp
f0130dd9:	52                   	push   %edx
f0130dda:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130ddd:	50                   	push   %eax
f0130dde:	ff 75 f4             	pushl  -0xc(%ebp)
f0130de1:	ff 75 f0             	pushl  -0x10(%ebp)
f0130de4:	ff 75 0c             	pushl  0xc(%ebp)
f0130de7:	ff 75 08             	pushl  0x8(%ebp)
f0130dea:	e8 00 fb ff ff       	call   f01308ef <printnum>
f0130def:	83 c4 20             	add    $0x20,%esp
			break;
f0130df2:	eb 34                	jmp    f0130e28 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130df4:	83 ec 08             	sub    $0x8,%esp
f0130df7:	ff 75 0c             	pushl  0xc(%ebp)
f0130dfa:	53                   	push   %ebx
f0130dfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dfe:	ff d0                	call   *%eax
f0130e00:	83 c4 10             	add    $0x10,%esp
			break;
f0130e03:	eb 23                	jmp    f0130e28 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130e05:	83 ec 08             	sub    $0x8,%esp
f0130e08:	ff 75 0c             	pushl  0xc(%ebp)
f0130e0b:	6a 25                	push   $0x25
f0130e0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e10:	ff d0                	call   *%eax
f0130e12:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130e15:	ff 4d 10             	decl   0x10(%ebp)
f0130e18:	eb 03                	jmp    f0130e1d <vprintfmt+0x3b1>
f0130e1a:	ff 4d 10             	decl   0x10(%ebp)
f0130e1d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e20:	48                   	dec    %eax
f0130e21:	8a 00                	mov    (%eax),%al
f0130e23:	3c 25                	cmp    $0x25,%al
f0130e25:	75 f3                	jne    f0130e1a <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130e27:	90                   	nop
		}
	}
f0130e28:	e9 47 fc ff ff       	jmp    f0130a74 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130e2d:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130e2e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130e31:	5b                   	pop    %ebx
f0130e32:	5e                   	pop    %esi
f0130e33:	5d                   	pop    %ebp
f0130e34:	c3                   	ret    

f0130e35 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130e35:	55                   	push   %ebp
f0130e36:	89 e5                	mov    %esp,%ebp
f0130e38:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130e3b:	8d 45 10             	lea    0x10(%ebp),%eax
f0130e3e:	83 c0 04             	add    $0x4,%eax
f0130e41:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130e44:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e47:	ff 75 f4             	pushl  -0xc(%ebp)
f0130e4a:	50                   	push   %eax
f0130e4b:	ff 75 0c             	pushl  0xc(%ebp)
f0130e4e:	ff 75 08             	pushl  0x8(%ebp)
f0130e51:	e8 16 fc ff ff       	call   f0130a6c <vprintfmt>
f0130e56:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130e59:	90                   	nop
f0130e5a:	c9                   	leave  
f0130e5b:	c3                   	ret    

f0130e5c <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130e5c:	55                   	push   %ebp
f0130e5d:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130e5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e62:	8b 40 08             	mov    0x8(%eax),%eax
f0130e65:	8d 50 01             	lea    0x1(%eax),%edx
f0130e68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e6b:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130e6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e71:	8b 10                	mov    (%eax),%edx
f0130e73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e76:	8b 40 04             	mov    0x4(%eax),%eax
f0130e79:	39 c2                	cmp    %eax,%edx
f0130e7b:	73 12                	jae    f0130e8f <sprintputch+0x33>
		*b->buf++ = ch;
f0130e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e80:	8b 00                	mov    (%eax),%eax
f0130e82:	8d 48 01             	lea    0x1(%eax),%ecx
f0130e85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130e88:	89 0a                	mov    %ecx,(%edx)
f0130e8a:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e8d:	88 10                	mov    %dl,(%eax)
}
f0130e8f:	90                   	nop
f0130e90:	5d                   	pop    %ebp
f0130e91:	c3                   	ret    

f0130e92 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130e92:	55                   	push   %ebp
f0130e93:	89 e5                	mov    %esp,%ebp
f0130e95:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130e98:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ea1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130ea4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea7:	01 d0                	add    %edx,%eax
f0130ea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130eac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130eb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130eb7:	74 06                	je     f0130ebf <vsnprintf+0x2d>
f0130eb9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130ebd:	7f 07                	jg     f0130ec6 <vsnprintf+0x34>
		return -E_INVAL;
f0130ebf:	b8 03 00 00 00       	mov    $0x3,%eax
f0130ec4:	eb 20                	jmp    f0130ee6 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130ec6:	ff 75 14             	pushl  0x14(%ebp)
f0130ec9:	ff 75 10             	pushl  0x10(%ebp)
f0130ecc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0130ecf:	50                   	push   %eax
f0130ed0:	68 5c 0e 13 f0       	push   $0xf0130e5c
f0130ed5:	e8 92 fb ff ff       	call   f0130a6c <vprintfmt>
f0130eda:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130edd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130ee0:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130ee6:	c9                   	leave  
f0130ee7:	c3                   	ret    

f0130ee8 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130ee8:	55                   	push   %ebp
f0130ee9:	89 e5                	mov    %esp,%ebp
f0130eeb:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130eee:	8d 45 10             	lea    0x10(%ebp),%eax
f0130ef1:	83 c0 04             	add    $0x4,%eax
f0130ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130ef7:	8b 45 10             	mov    0x10(%ebp),%eax
f0130efa:	ff 75 f4             	pushl  -0xc(%ebp)
f0130efd:	50                   	push   %eax
f0130efe:	ff 75 0c             	pushl  0xc(%ebp)
f0130f01:	ff 75 08             	pushl  0x8(%ebp)
f0130f04:	e8 89 ff ff ff       	call   f0130e92 <vsnprintf>
f0130f09:	83 c4 10             	add    $0x10,%esp
f0130f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130f12:	c9                   	leave  
f0130f13:	c3                   	ret    

f0130f14 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130f14:	55                   	push   %ebp
f0130f15:	89 e5                	mov    %esp,%ebp
f0130f17:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130f1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130f1e:	74 13                	je     f0130f33 <readline+0x1f>
		cprintf("%s", prompt);
f0130f20:	83 ec 08             	sub    $0x8,%esp
f0130f23:	ff 75 08             	pushl  0x8(%ebp)
f0130f26:	68 70 d4 13 f0       	push   $0xf013d470
f0130f2b:	e8 de fd fc ff       	call   f0100d0e <cprintf>
f0130f30:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130f33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130f3a:	83 ec 0c             	sub    $0xc,%esp
f0130f3d:	6a 00                	push   $0x0
f0130f3f:	e8 77 fd fc ff       	call   f0100cbb <iscons>
f0130f44:	83 c4 10             	add    $0x10,%esp
f0130f47:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130f4a:	e8 53 fd fc ff       	call   f0100ca2 <getchar>
f0130f4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130f52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130f56:	79 22                	jns    f0130f7a <readline+0x66>
			if (c != -E_EOF)
f0130f58:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130f5c:	0f 84 ad 00 00 00    	je     f013100f <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130f62:	83 ec 08             	sub    $0x8,%esp
f0130f65:	ff 75 ec             	pushl  -0x14(%ebp)
f0130f68:	68 73 d4 13 f0       	push   $0xf013d473
f0130f6d:	e8 9c fd fc ff       	call   f0100d0e <cprintf>
f0130f72:	83 c4 10             	add    $0x10,%esp
			return;
f0130f75:	e9 95 00 00 00       	jmp    f013100f <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130f7a:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130f7e:	7e 34                	jle    f0130fb4 <readline+0xa0>
f0130f80:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130f87:	7f 2b                	jg     f0130fb4 <readline+0xa0>
			if (echoing)
f0130f89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130f8d:	74 0e                	je     f0130f9d <readline+0x89>
				cputchar(c);
f0130f8f:	83 ec 0c             	sub    $0xc,%esp
f0130f92:	ff 75 ec             	pushl  -0x14(%ebp)
f0130f95:	e8 f1 fc fc ff       	call   f0100c8b <cputchar>
f0130f9a:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fa0:	8d 50 01             	lea    0x1(%eax),%edx
f0130fa3:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130fa6:	89 c2                	mov    %eax,%edx
f0130fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fab:	01 d0                	add    %edx,%eax
f0130fad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130fb0:	88 10                	mov    %dl,(%eax)
f0130fb2:	eb 56                	jmp    f013100a <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130fb4:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130fb8:	75 1f                	jne    f0130fd9 <readline+0xc5>
f0130fba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130fbe:	7e 19                	jle    f0130fd9 <readline+0xc5>
			if (echoing)
f0130fc0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130fc4:	74 0e                	je     f0130fd4 <readline+0xc0>
				cputchar(c);
f0130fc6:	83 ec 0c             	sub    $0xc,%esp
f0130fc9:	ff 75 ec             	pushl  -0x14(%ebp)
f0130fcc:	e8 ba fc fc ff       	call   f0100c8b <cputchar>
f0130fd1:	83 c4 10             	add    $0x10,%esp

			i--;
f0130fd4:	ff 4d f4             	decl   -0xc(%ebp)
f0130fd7:	eb 31                	jmp    f013100a <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130fd9:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130fdd:	74 0a                	je     f0130fe9 <readline+0xd5>
f0130fdf:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130fe3:	0f 85 61 ff ff ff    	jne    f0130f4a <readline+0x36>
			if (echoing)
f0130fe9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130fed:	74 0e                	je     f0130ffd <readline+0xe9>
				cputchar(c);
f0130fef:	83 ec 0c             	sub    $0xc,%esp
f0130ff2:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ff5:	e8 91 fc fc ff       	call   f0100c8b <cputchar>
f0130ffa:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130ffd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131000:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131003:	01 d0                	add    %edx,%eax
f0131005:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0131008:	eb 06                	jmp    f0131010 <readline+0xfc>
		}
	}
f013100a:	e9 3b ff ff ff       	jmp    f0130f4a <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f013100f:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0131010:	c9                   	leave  
f0131011:	c3                   	ret    

f0131012 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0131012:	55                   	push   %ebp
f0131013:	89 e5                	mov    %esp,%ebp
f0131015:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0131018:	e8 01 bd fd ff       	call   f010cd1e <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f013101d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131021:	74 13                	je     f0131036 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0131023:	83 ec 08             	sub    $0x8,%esp
f0131026:	ff 75 08             	pushl  0x8(%ebp)
f0131029:	68 70 d4 13 f0       	push   $0xf013d470
f013102e:	e8 db fc fc ff       	call   f0100d0e <cprintf>
f0131033:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131036:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013103d:	83 ec 0c             	sub    $0xc,%esp
f0131040:	6a 00                	push   $0x0
f0131042:	e8 74 fc fc ff       	call   f0100cbb <iscons>
f0131047:	83 c4 10             	add    $0x10,%esp
f013104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013104d:	e8 50 fc fc ff       	call   f0100ca2 <getchar>
f0131052:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131059:	79 23                	jns    f013107e <atomic_readline+0x6c>
			if (c != -E_EOF)
f013105b:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013105f:	74 13                	je     f0131074 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0131061:	83 ec 08             	sub    $0x8,%esp
f0131064:	ff 75 ec             	pushl  -0x14(%ebp)
f0131067:	68 73 d4 13 f0       	push   $0xf013d473
f013106c:	e8 9d fc fc ff       	call   f0100d0e <cprintf>
f0131071:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0131074:	e8 bf bc fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0131079:	e9 9a 00 00 00       	jmp    f0131118 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013107e:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131082:	7e 34                	jle    f01310b8 <atomic_readline+0xa6>
f0131084:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013108b:	7f 2b                	jg     f01310b8 <atomic_readline+0xa6>
			if (echoing)
f013108d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131091:	74 0e                	je     f01310a1 <atomic_readline+0x8f>
				cputchar(c);
f0131093:	83 ec 0c             	sub    $0xc,%esp
f0131096:	ff 75 ec             	pushl  -0x14(%ebp)
f0131099:	e8 ed fb fc ff       	call   f0100c8b <cputchar>
f013109e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01310a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310a4:	8d 50 01             	lea    0x1(%eax),%edx
f01310a7:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01310aa:	89 c2                	mov    %eax,%edx
f01310ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310af:	01 d0                	add    %edx,%eax
f01310b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01310b4:	88 10                	mov    %dl,(%eax)
f01310b6:	eb 5b                	jmp    f0131113 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01310b8:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01310bc:	75 1f                	jne    f01310dd <atomic_readline+0xcb>
f01310be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01310c2:	7e 19                	jle    f01310dd <atomic_readline+0xcb>
			if (echoing)
f01310c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01310c8:	74 0e                	je     f01310d8 <atomic_readline+0xc6>
				cputchar(c);
f01310ca:	83 ec 0c             	sub    $0xc,%esp
f01310cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01310d0:	e8 b6 fb fc ff       	call   f0100c8b <cputchar>
f01310d5:	83 c4 10             	add    $0x10,%esp
			i--;
f01310d8:	ff 4d f4             	decl   -0xc(%ebp)
f01310db:	eb 36                	jmp    f0131113 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01310dd:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01310e1:	74 0a                	je     f01310ed <atomic_readline+0xdb>
f01310e3:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01310e7:	0f 85 60 ff ff ff    	jne    f013104d <atomic_readline+0x3b>
			if (echoing)
f01310ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01310f1:	74 0e                	je     f0131101 <atomic_readline+0xef>
				cputchar(c);
f01310f3:	83 ec 0c             	sub    $0xc,%esp
f01310f6:	ff 75 ec             	pushl  -0x14(%ebp)
f01310f9:	e8 8d fb fc ff       	call   f0100c8b <cputchar>
f01310fe:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131101:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131104:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131107:	01 d0                	add    %edx,%eax
f0131109:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013110c:	e8 27 bc fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0131111:	eb 05                	jmp    f0131118 <atomic_readline+0x106>
		}
	}
f0131113:	e9 35 ff ff ff       	jmp    f013104d <atomic_readline+0x3b>
}
f0131118:	c9                   	leave  
f0131119:	c3                   	ret    

f013111a <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f013111a:	55                   	push   %ebp
f013111b:	89 e5                	mov    %esp,%ebp
f013111d:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0131120:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131127:	eb 06                	jmp    f013112f <strlen+0x15>
		n++;
f0131129:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f013112c:	ff 45 08             	incl   0x8(%ebp)
f013112f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131132:	8a 00                	mov    (%eax),%al
f0131134:	84 c0                	test   %al,%al
f0131136:	75 f1                	jne    f0131129 <strlen+0xf>
		n++;
	return n;
f0131138:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013113b:	c9                   	leave  
f013113c:	c3                   	ret    

f013113d <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f013113d:	55                   	push   %ebp
f013113e:	89 e5                	mov    %esp,%ebp
f0131140:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131143:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013114a:	eb 09                	jmp    f0131155 <strnlen+0x18>
		n++;
f013114c:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013114f:	ff 45 08             	incl   0x8(%ebp)
f0131152:	ff 4d 0c             	decl   0xc(%ebp)
f0131155:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131159:	74 09                	je     f0131164 <strnlen+0x27>
f013115b:	8b 45 08             	mov    0x8(%ebp),%eax
f013115e:	8a 00                	mov    (%eax),%al
f0131160:	84 c0                	test   %al,%al
f0131162:	75 e8                	jne    f013114c <strnlen+0xf>
		n++;
	return n;
f0131164:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131167:	c9                   	leave  
f0131168:	c3                   	ret    

f0131169 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131169:	55                   	push   %ebp
f013116a:	89 e5                	mov    %esp,%ebp
f013116c:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f013116f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131172:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131175:	90                   	nop
f0131176:	8b 45 08             	mov    0x8(%ebp),%eax
f0131179:	8d 50 01             	lea    0x1(%eax),%edx
f013117c:	89 55 08             	mov    %edx,0x8(%ebp)
f013117f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131182:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131185:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131188:	8a 12                	mov    (%edx),%dl
f013118a:	88 10                	mov    %dl,(%eax)
f013118c:	8a 00                	mov    (%eax),%al
f013118e:	84 c0                	test   %al,%al
f0131190:	75 e4                	jne    f0131176 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131192:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131195:	c9                   	leave  
f0131196:	c3                   	ret    

f0131197 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131197:	55                   	push   %ebp
f0131198:	89 e5                	mov    %esp,%ebp
f013119a:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f013119d:	8b 45 08             	mov    0x8(%ebp),%eax
f01311a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01311a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01311aa:	eb 1f                	jmp    f01311cb <strncpy+0x34>
		*dst++ = *src;
f01311ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01311af:	8d 50 01             	lea    0x1(%eax),%edx
f01311b2:	89 55 08             	mov    %edx,0x8(%ebp)
f01311b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01311b8:	8a 12                	mov    (%edx),%dl
f01311ba:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01311bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311bf:	8a 00                	mov    (%eax),%al
f01311c1:	84 c0                	test   %al,%al
f01311c3:	74 03                	je     f01311c8 <strncpy+0x31>
			src++;
f01311c5:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01311c8:	ff 45 fc             	incl   -0x4(%ebp)
f01311cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311ce:	3b 45 10             	cmp    0x10(%ebp),%eax
f01311d1:	72 d9                	jb     f01311ac <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01311d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01311d6:	c9                   	leave  
f01311d7:	c3                   	ret    

f01311d8 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01311d8:	55                   	push   %ebp
f01311d9:	89 e5                	mov    %esp,%ebp
f01311db:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01311de:	8b 45 08             	mov    0x8(%ebp),%eax
f01311e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01311e4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01311e8:	74 30                	je     f013121a <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01311ea:	eb 16                	jmp    f0131202 <strlcpy+0x2a>
			*dst++ = *src++;
f01311ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ef:	8d 50 01             	lea    0x1(%eax),%edx
f01311f2:	89 55 08             	mov    %edx,0x8(%ebp)
f01311f5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01311f8:	8d 4a 01             	lea    0x1(%edx),%ecx
f01311fb:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01311fe:	8a 12                	mov    (%edx),%dl
f0131200:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131202:	ff 4d 10             	decl   0x10(%ebp)
f0131205:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131209:	74 09                	je     f0131214 <strlcpy+0x3c>
f013120b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013120e:	8a 00                	mov    (%eax),%al
f0131210:	84 c0                	test   %al,%al
f0131212:	75 d8                	jne    f01311ec <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131214:	8b 45 08             	mov    0x8(%ebp),%eax
f0131217:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f013121a:	8b 55 08             	mov    0x8(%ebp),%edx
f013121d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131220:	29 c2                	sub    %eax,%edx
f0131222:	89 d0                	mov    %edx,%eax
}
f0131224:	c9                   	leave  
f0131225:	c3                   	ret    

f0131226 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131226:	55                   	push   %ebp
f0131227:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131229:	eb 06                	jmp    f0131231 <strcmp+0xb>
		p++, q++;
f013122b:	ff 45 08             	incl   0x8(%ebp)
f013122e:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131231:	8b 45 08             	mov    0x8(%ebp),%eax
f0131234:	8a 00                	mov    (%eax),%al
f0131236:	84 c0                	test   %al,%al
f0131238:	74 0e                	je     f0131248 <strcmp+0x22>
f013123a:	8b 45 08             	mov    0x8(%ebp),%eax
f013123d:	8a 10                	mov    (%eax),%dl
f013123f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131242:	8a 00                	mov    (%eax),%al
f0131244:	38 c2                	cmp    %al,%dl
f0131246:	74 e3                	je     f013122b <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131248:	8b 45 08             	mov    0x8(%ebp),%eax
f013124b:	8a 00                	mov    (%eax),%al
f013124d:	0f b6 d0             	movzbl %al,%edx
f0131250:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131253:	8a 00                	mov    (%eax),%al
f0131255:	0f b6 c0             	movzbl %al,%eax
f0131258:	29 c2                	sub    %eax,%edx
f013125a:	89 d0                	mov    %edx,%eax
}
f013125c:	5d                   	pop    %ebp
f013125d:	c3                   	ret    

f013125e <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f013125e:	55                   	push   %ebp
f013125f:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131261:	eb 09                	jmp    f013126c <strncmp+0xe>
		n--, p++, q++;
f0131263:	ff 4d 10             	decl   0x10(%ebp)
f0131266:	ff 45 08             	incl   0x8(%ebp)
f0131269:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f013126c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131270:	74 17                	je     f0131289 <strncmp+0x2b>
f0131272:	8b 45 08             	mov    0x8(%ebp),%eax
f0131275:	8a 00                	mov    (%eax),%al
f0131277:	84 c0                	test   %al,%al
f0131279:	74 0e                	je     f0131289 <strncmp+0x2b>
f013127b:	8b 45 08             	mov    0x8(%ebp),%eax
f013127e:	8a 10                	mov    (%eax),%dl
f0131280:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131283:	8a 00                	mov    (%eax),%al
f0131285:	38 c2                	cmp    %al,%dl
f0131287:	74 da                	je     f0131263 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131289:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013128d:	75 07                	jne    f0131296 <strncmp+0x38>
		return 0;
f013128f:	b8 00 00 00 00       	mov    $0x0,%eax
f0131294:	eb 14                	jmp    f01312aa <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131296:	8b 45 08             	mov    0x8(%ebp),%eax
f0131299:	8a 00                	mov    (%eax),%al
f013129b:	0f b6 d0             	movzbl %al,%edx
f013129e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312a1:	8a 00                	mov    (%eax),%al
f01312a3:	0f b6 c0             	movzbl %al,%eax
f01312a6:	29 c2                	sub    %eax,%edx
f01312a8:	89 d0                	mov    %edx,%eax
}
f01312aa:	5d                   	pop    %ebp
f01312ab:	c3                   	ret    

f01312ac <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01312ac:	55                   	push   %ebp
f01312ad:	89 e5                	mov    %esp,%ebp
f01312af:	83 ec 04             	sub    $0x4,%esp
f01312b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312b5:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01312b8:	eb 12                	jmp    f01312cc <strchr+0x20>
		if (*s == c)
f01312ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01312bd:	8a 00                	mov    (%eax),%al
f01312bf:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01312c2:	75 05                	jne    f01312c9 <strchr+0x1d>
			return (char *) s;
f01312c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c7:	eb 11                	jmp    f01312da <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01312c9:	ff 45 08             	incl   0x8(%ebp)
f01312cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01312cf:	8a 00                	mov    (%eax),%al
f01312d1:	84 c0                	test   %al,%al
f01312d3:	75 e5                	jne    f01312ba <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01312d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01312da:	c9                   	leave  
f01312db:	c3                   	ret    

f01312dc <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01312dc:	55                   	push   %ebp
f01312dd:	89 e5                	mov    %esp,%ebp
f01312df:	83 ec 04             	sub    $0x4,%esp
f01312e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312e5:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01312e8:	eb 0d                	jmp    f01312f7 <strfind+0x1b>
		if (*s == c)
f01312ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ed:	8a 00                	mov    (%eax),%al
f01312ef:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01312f2:	74 0e                	je     f0131302 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01312f4:	ff 45 08             	incl   0x8(%ebp)
f01312f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fa:	8a 00                	mov    (%eax),%al
f01312fc:	84 c0                	test   %al,%al
f01312fe:	75 ea                	jne    f01312ea <strfind+0xe>
f0131300:	eb 01                	jmp    f0131303 <strfind+0x27>
		if (*s == c)
			break;
f0131302:	90                   	nop
	return (char *) s;
f0131303:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131306:	c9                   	leave  
f0131307:	c3                   	ret    

f0131308 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131308:	55                   	push   %ebp
f0131309:	89 e5                	mov    %esp,%ebp
f013130b:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f013130e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131311:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131314:	8b 45 10             	mov    0x10(%ebp),%eax
f0131317:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f013131a:	eb 0e                	jmp    f013132a <memset+0x22>
		*p++ = c;
f013131c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013131f:	8d 50 01             	lea    0x1(%eax),%edx
f0131322:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131325:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131328:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f013132a:	ff 4d f8             	decl   -0x8(%ebp)
f013132d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131331:	79 e9                	jns    f013131c <memset+0x14>
		*p++ = c;

	return v;
f0131333:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131336:	c9                   	leave  
f0131337:	c3                   	ret    

f0131338 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131338:	55                   	push   %ebp
f0131339:	89 e5                	mov    %esp,%ebp
f013133b:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013133e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131341:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131344:	8b 45 08             	mov    0x8(%ebp),%eax
f0131347:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f013134a:	eb 16                	jmp    f0131362 <memcpy+0x2a>
		*d++ = *s++;
f013134c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013134f:	8d 50 01             	lea    0x1(%eax),%edx
f0131352:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131355:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131358:	8d 4a 01             	lea    0x1(%edx),%ecx
f013135b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013135e:	8a 12                	mov    (%edx),%dl
f0131360:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131362:	8b 45 10             	mov    0x10(%ebp),%eax
f0131365:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131368:	89 55 10             	mov    %edx,0x10(%ebp)
f013136b:	85 c0                	test   %eax,%eax
f013136d:	75 dd                	jne    f013134c <memcpy+0x14>
		*d++ = *s++;

	return dst;
f013136f:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131372:	c9                   	leave  
f0131373:	c3                   	ret    

f0131374 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131374:	55                   	push   %ebp
f0131375:	89 e5                	mov    %esp,%ebp
f0131377:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013137a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013137d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131380:	8b 45 08             	mov    0x8(%ebp),%eax
f0131383:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131386:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131389:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013138c:	73 50                	jae    f01313de <memmove+0x6a>
f013138e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131391:	8b 45 10             	mov    0x10(%ebp),%eax
f0131394:	01 d0                	add    %edx,%eax
f0131396:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131399:	76 43                	jbe    f01313de <memmove+0x6a>
		s += n;
f013139b:	8b 45 10             	mov    0x10(%ebp),%eax
f013139e:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01313a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01313a4:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01313a7:	eb 10                	jmp    f01313b9 <memmove+0x45>
			*--d = *--s;
f01313a9:	ff 4d f8             	decl   -0x8(%ebp)
f01313ac:	ff 4d fc             	decl   -0x4(%ebp)
f01313af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01313b2:	8a 10                	mov    (%eax),%dl
f01313b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01313b7:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01313b9:	8b 45 10             	mov    0x10(%ebp),%eax
f01313bc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01313bf:	89 55 10             	mov    %edx,0x10(%ebp)
f01313c2:	85 c0                	test   %eax,%eax
f01313c4:	75 e3                	jne    f01313a9 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01313c6:	eb 23                	jmp    f01313eb <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01313c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01313cb:	8d 50 01             	lea    0x1(%eax),%edx
f01313ce:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01313d1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01313d4:	8d 4a 01             	lea    0x1(%edx),%ecx
f01313d7:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01313da:	8a 12                	mov    (%edx),%dl
f01313dc:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01313de:	8b 45 10             	mov    0x10(%ebp),%eax
f01313e1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01313e4:	89 55 10             	mov    %edx,0x10(%ebp)
f01313e7:	85 c0                	test   %eax,%eax
f01313e9:	75 dd                	jne    f01313c8 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01313eb:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01313ee:	c9                   	leave  
f01313ef:	c3                   	ret    

f01313f0 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01313f0:	55                   	push   %ebp
f01313f1:	89 e5                	mov    %esp,%ebp
f01313f3:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01313f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01313f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01313fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313ff:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131402:	eb 2a                	jmp    f013142e <memcmp+0x3e>
		if (*s1 != *s2)
f0131404:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131407:	8a 10                	mov    (%eax),%dl
f0131409:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013140c:	8a 00                	mov    (%eax),%al
f013140e:	38 c2                	cmp    %al,%dl
f0131410:	74 16                	je     f0131428 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131412:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131415:	8a 00                	mov    (%eax),%al
f0131417:	0f b6 d0             	movzbl %al,%edx
f013141a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013141d:	8a 00                	mov    (%eax),%al
f013141f:	0f b6 c0             	movzbl %al,%eax
f0131422:	29 c2                	sub    %eax,%edx
f0131424:	89 d0                	mov    %edx,%eax
f0131426:	eb 18                	jmp    f0131440 <memcmp+0x50>
		s1++, s2++;
f0131428:	ff 45 fc             	incl   -0x4(%ebp)
f013142b:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f013142e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131431:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131434:	89 55 10             	mov    %edx,0x10(%ebp)
f0131437:	85 c0                	test   %eax,%eax
f0131439:	75 c9                	jne    f0131404 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f013143b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131440:	c9                   	leave  
f0131441:	c3                   	ret    

f0131442 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131442:	55                   	push   %ebp
f0131443:	89 e5                	mov    %esp,%ebp
f0131445:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131448:	8b 55 08             	mov    0x8(%ebp),%edx
f013144b:	8b 45 10             	mov    0x10(%ebp),%eax
f013144e:	01 d0                	add    %edx,%eax
f0131450:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131453:	eb 15                	jmp    f013146a <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131455:	8b 45 08             	mov    0x8(%ebp),%eax
f0131458:	8a 00                	mov    (%eax),%al
f013145a:	0f b6 d0             	movzbl %al,%edx
f013145d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131460:	0f b6 c0             	movzbl %al,%eax
f0131463:	39 c2                	cmp    %eax,%edx
f0131465:	74 0d                	je     f0131474 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131467:	ff 45 08             	incl   0x8(%ebp)
f013146a:	8b 45 08             	mov    0x8(%ebp),%eax
f013146d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131470:	72 e3                	jb     f0131455 <memfind+0x13>
f0131472:	eb 01                	jmp    f0131475 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131474:	90                   	nop
	return (void *) s;
f0131475:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131478:	c9                   	leave  
f0131479:	c3                   	ret    

f013147a <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f013147a:	55                   	push   %ebp
f013147b:	89 e5                	mov    %esp,%ebp
f013147d:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131480:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131487:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013148e:	eb 03                	jmp    f0131493 <strtol+0x19>
		s++;
f0131490:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131493:	8b 45 08             	mov    0x8(%ebp),%eax
f0131496:	8a 00                	mov    (%eax),%al
f0131498:	3c 20                	cmp    $0x20,%al
f013149a:	74 f4                	je     f0131490 <strtol+0x16>
f013149c:	8b 45 08             	mov    0x8(%ebp),%eax
f013149f:	8a 00                	mov    (%eax),%al
f01314a1:	3c 09                	cmp    $0x9,%al
f01314a3:	74 eb                	je     f0131490 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01314a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01314a8:	8a 00                	mov    (%eax),%al
f01314aa:	3c 2b                	cmp    $0x2b,%al
f01314ac:	75 05                	jne    f01314b3 <strtol+0x39>
		s++;
f01314ae:	ff 45 08             	incl   0x8(%ebp)
f01314b1:	eb 13                	jmp    f01314c6 <strtol+0x4c>
	else if (*s == '-')
f01314b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01314b6:	8a 00                	mov    (%eax),%al
f01314b8:	3c 2d                	cmp    $0x2d,%al
f01314ba:	75 0a                	jne    f01314c6 <strtol+0x4c>
		s++, neg = 1;
f01314bc:	ff 45 08             	incl   0x8(%ebp)
f01314bf:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01314c6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01314ca:	74 06                	je     f01314d2 <strtol+0x58>
f01314cc:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01314d0:	75 20                	jne    f01314f2 <strtol+0x78>
f01314d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01314d5:	8a 00                	mov    (%eax),%al
f01314d7:	3c 30                	cmp    $0x30,%al
f01314d9:	75 17                	jne    f01314f2 <strtol+0x78>
f01314db:	8b 45 08             	mov    0x8(%ebp),%eax
f01314de:	40                   	inc    %eax
f01314df:	8a 00                	mov    (%eax),%al
f01314e1:	3c 78                	cmp    $0x78,%al
f01314e3:	75 0d                	jne    f01314f2 <strtol+0x78>
		s += 2, base = 16;
f01314e5:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01314e9:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01314f0:	eb 28                	jmp    f013151a <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01314f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01314f6:	75 15                	jne    f013150d <strtol+0x93>
f01314f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01314fb:	8a 00                	mov    (%eax),%al
f01314fd:	3c 30                	cmp    $0x30,%al
f01314ff:	75 0c                	jne    f013150d <strtol+0x93>
		s++, base = 8;
f0131501:	ff 45 08             	incl   0x8(%ebp)
f0131504:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f013150b:	eb 0d                	jmp    f013151a <strtol+0xa0>
	else if (base == 0)
f013150d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131511:	75 07                	jne    f013151a <strtol+0xa0>
		base = 10;
f0131513:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f013151a:	8b 45 08             	mov    0x8(%ebp),%eax
f013151d:	8a 00                	mov    (%eax),%al
f013151f:	3c 2f                	cmp    $0x2f,%al
f0131521:	7e 19                	jle    f013153c <strtol+0xc2>
f0131523:	8b 45 08             	mov    0x8(%ebp),%eax
f0131526:	8a 00                	mov    (%eax),%al
f0131528:	3c 39                	cmp    $0x39,%al
f013152a:	7f 10                	jg     f013153c <strtol+0xc2>
			dig = *s - '0';
f013152c:	8b 45 08             	mov    0x8(%ebp),%eax
f013152f:	8a 00                	mov    (%eax),%al
f0131531:	0f be c0             	movsbl %al,%eax
f0131534:	83 e8 30             	sub    $0x30,%eax
f0131537:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013153a:	eb 42                	jmp    f013157e <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f013153c:	8b 45 08             	mov    0x8(%ebp),%eax
f013153f:	8a 00                	mov    (%eax),%al
f0131541:	3c 60                	cmp    $0x60,%al
f0131543:	7e 19                	jle    f013155e <strtol+0xe4>
f0131545:	8b 45 08             	mov    0x8(%ebp),%eax
f0131548:	8a 00                	mov    (%eax),%al
f013154a:	3c 7a                	cmp    $0x7a,%al
f013154c:	7f 10                	jg     f013155e <strtol+0xe4>
			dig = *s - 'a' + 10;
f013154e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131551:	8a 00                	mov    (%eax),%al
f0131553:	0f be c0             	movsbl %al,%eax
f0131556:	83 e8 57             	sub    $0x57,%eax
f0131559:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013155c:	eb 20                	jmp    f013157e <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f013155e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131561:	8a 00                	mov    (%eax),%al
f0131563:	3c 40                	cmp    $0x40,%al
f0131565:	7e 39                	jle    f01315a0 <strtol+0x126>
f0131567:	8b 45 08             	mov    0x8(%ebp),%eax
f013156a:	8a 00                	mov    (%eax),%al
f013156c:	3c 5a                	cmp    $0x5a,%al
f013156e:	7f 30                	jg     f01315a0 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131570:	8b 45 08             	mov    0x8(%ebp),%eax
f0131573:	8a 00                	mov    (%eax),%al
f0131575:	0f be c0             	movsbl %al,%eax
f0131578:	83 e8 37             	sub    $0x37,%eax
f013157b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f013157e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131581:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131584:	7d 19                	jge    f013159f <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131586:	ff 45 08             	incl   0x8(%ebp)
f0131589:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013158c:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131590:	89 c2                	mov    %eax,%edx
f0131592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131595:	01 d0                	add    %edx,%eax
f0131597:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013159a:	e9 7b ff ff ff       	jmp    f013151a <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f013159f:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01315a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01315a4:	74 08                	je     f01315ae <strtol+0x134>
		*endptr = (char *) s;
f01315a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315a9:	8b 55 08             	mov    0x8(%ebp),%edx
f01315ac:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01315ae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01315b2:	74 07                	je     f01315bb <strtol+0x141>
f01315b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01315b7:	f7 d8                	neg    %eax
f01315b9:	eb 03                	jmp    f01315be <strtol+0x144>
f01315bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01315be:	c9                   	leave  
f01315bf:	c3                   	ret    

f01315c0 <ltostr>:

void
ltostr(long value, char *str)
{
f01315c0:	55                   	push   %ebp
f01315c1:	89 e5                	mov    %esp,%ebp
f01315c3:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01315c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01315cd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01315d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01315d8:	79 13                	jns    f01315ed <ltostr+0x2d>
	{
		neg = 1;
f01315da:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01315e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315e4:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01315e7:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01315ea:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01315ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01315f0:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01315f5:	99                   	cltd   
f01315f6:	f7 f9                	idiv   %ecx
f01315f8:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01315fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01315fe:	8d 50 01             	lea    0x1(%eax),%edx
f0131601:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131604:	89 c2                	mov    %eax,%edx
f0131606:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131609:	01 d0                	add    %edx,%eax
f013160b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013160e:	83 c2 30             	add    $0x30,%edx
f0131611:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131613:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131616:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013161b:	f7 e9                	imul   %ecx
f013161d:	c1 fa 02             	sar    $0x2,%edx
f0131620:	89 c8                	mov    %ecx,%eax
f0131622:	c1 f8 1f             	sar    $0x1f,%eax
f0131625:	29 c2                	sub    %eax,%edx
f0131627:	89 d0                	mov    %edx,%eax
f0131629:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f013162c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013162f:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131634:	f7 e9                	imul   %ecx
f0131636:	c1 fa 02             	sar    $0x2,%edx
f0131639:	89 c8                	mov    %ecx,%eax
f013163b:	c1 f8 1f             	sar    $0x1f,%eax
f013163e:	29 c2                	sub    %eax,%edx
f0131640:	89 d0                	mov    %edx,%eax
f0131642:	c1 e0 02             	shl    $0x2,%eax
f0131645:	01 d0                	add    %edx,%eax
f0131647:	01 c0                	add    %eax,%eax
f0131649:	29 c1                	sub    %eax,%ecx
f013164b:	89 ca                	mov    %ecx,%edx
f013164d:	85 d2                	test   %edx,%edx
f013164f:	75 9c                	jne    f01315ed <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131651:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131658:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013165b:	48                   	dec    %eax
f013165c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f013165f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131663:	74 3d                	je     f01316a2 <ltostr+0xe2>
		start = 1 ;
f0131665:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f013166c:	eb 34                	jmp    f01316a2 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f013166e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131674:	01 d0                	add    %edx,%eax
f0131676:	8a 00                	mov    (%eax),%al
f0131678:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f013167b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013167e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131681:	01 c2                	add    %eax,%edx
f0131683:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131686:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131689:	01 c8                	add    %ecx,%eax
f013168b:	8a 00                	mov    (%eax),%al
f013168d:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f013168f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131695:	01 c2                	add    %eax,%edx
f0131697:	8a 45 eb             	mov    -0x15(%ebp),%al
f013169a:	88 02                	mov    %al,(%edx)
		start++ ;
f013169c:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f013169f:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f01316a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01316a8:	7c c4                	jl     f013166e <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f01316aa:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01316ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316b0:	01 d0                	add    %edx,%eax
f01316b2:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f01316b5:	90                   	nop
f01316b6:	c9                   	leave  
f01316b7:	c3                   	ret    

f01316b8 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f01316b8:	55                   	push   %ebp
f01316b9:	89 e5                	mov    %esp,%ebp
f01316bb:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f01316be:	ff 75 08             	pushl  0x8(%ebp)
f01316c1:	e8 54 fa ff ff       	call   f013111a <strlen>
f01316c6:	83 c4 04             	add    $0x4,%esp
f01316c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01316cc:	ff 75 0c             	pushl  0xc(%ebp)
f01316cf:	e8 46 fa ff ff       	call   f013111a <strlen>
f01316d4:	83 c4 04             	add    $0x4,%esp
f01316d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01316da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01316e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01316e8:	eb 17                	jmp    f0131701 <strcconcat+0x49>
		final[s] = str1[s] ;
f01316ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01316ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01316f0:	01 c2                	add    %eax,%edx
f01316f2:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01316f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01316f8:	01 c8                	add    %ecx,%eax
f01316fa:	8a 00                	mov    (%eax),%al
f01316fc:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01316fe:	ff 45 fc             	incl   -0x4(%ebp)
f0131701:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131704:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131707:	7c e1                	jl     f01316ea <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131709:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131710:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131717:	eb 1f                	jmp    f0131738 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131719:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013171c:	8d 50 01             	lea    0x1(%eax),%edx
f013171f:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131722:	89 c2                	mov    %eax,%edx
f0131724:	8b 45 10             	mov    0x10(%ebp),%eax
f0131727:	01 c2                	add    %eax,%edx
f0131729:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f013172c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013172f:	01 c8                	add    %ecx,%eax
f0131731:	8a 00                	mov    (%eax),%al
f0131733:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131735:	ff 45 f8             	incl   -0x8(%ebp)
f0131738:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013173b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013173e:	7c d9                	jl     f0131719 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131740:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131743:	8b 45 10             	mov    0x10(%ebp),%eax
f0131746:	01 d0                	add    %edx,%eax
f0131748:	c6 00 00             	movb   $0x0,(%eax)
}
f013174b:	90                   	nop
f013174c:	c9                   	leave  
f013174d:	c3                   	ret    

f013174e <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f013174e:	55                   	push   %ebp
f013174f:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131751:	8b 45 14             	mov    0x14(%ebp),%eax
f0131754:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f013175a:	8b 45 14             	mov    0x14(%ebp),%eax
f013175d:	8b 00                	mov    (%eax),%eax
f013175f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131766:	8b 45 10             	mov    0x10(%ebp),%eax
f0131769:	01 d0                	add    %edx,%eax
f013176b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131771:	eb 0c                	jmp    f013177f <strsplit+0x31>
			*string++ = 0;
f0131773:	8b 45 08             	mov    0x8(%ebp),%eax
f0131776:	8d 50 01             	lea    0x1(%eax),%edx
f0131779:	89 55 08             	mov    %edx,0x8(%ebp)
f013177c:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013177f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131782:	8a 00                	mov    (%eax),%al
f0131784:	84 c0                	test   %al,%al
f0131786:	74 18                	je     f01317a0 <strsplit+0x52>
f0131788:	8b 45 08             	mov    0x8(%ebp),%eax
f013178b:	8a 00                	mov    (%eax),%al
f013178d:	0f be c0             	movsbl %al,%eax
f0131790:	50                   	push   %eax
f0131791:	ff 75 0c             	pushl  0xc(%ebp)
f0131794:	e8 13 fb ff ff       	call   f01312ac <strchr>
f0131799:	83 c4 08             	add    $0x8,%esp
f013179c:	85 c0                	test   %eax,%eax
f013179e:	75 d3                	jne    f0131773 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f01317a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01317a3:	8a 00                	mov    (%eax),%al
f01317a5:	84 c0                	test   %al,%al
f01317a7:	74 5a                	je     f0131803 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f01317a9:	8b 45 14             	mov    0x14(%ebp),%eax
f01317ac:	8b 00                	mov    (%eax),%eax
f01317ae:	83 f8 0f             	cmp    $0xf,%eax
f01317b1:	75 07                	jne    f01317ba <strsplit+0x6c>
		{
			return 0;
f01317b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01317b8:	eb 66                	jmp    f0131820 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f01317ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01317bd:	8b 00                	mov    (%eax),%eax
f01317bf:	8d 48 01             	lea    0x1(%eax),%ecx
f01317c2:	8b 55 14             	mov    0x14(%ebp),%edx
f01317c5:	89 0a                	mov    %ecx,(%edx)
f01317c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01317ce:	8b 45 10             	mov    0x10(%ebp),%eax
f01317d1:	01 c2                	add    %eax,%edx
f01317d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01317d6:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01317d8:	eb 03                	jmp    f01317dd <strsplit+0x8f>
			string++;
f01317da:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01317dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01317e0:	8a 00                	mov    (%eax),%al
f01317e2:	84 c0                	test   %al,%al
f01317e4:	74 8b                	je     f0131771 <strsplit+0x23>
f01317e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01317e9:	8a 00                	mov    (%eax),%al
f01317eb:	0f be c0             	movsbl %al,%eax
f01317ee:	50                   	push   %eax
f01317ef:	ff 75 0c             	pushl  0xc(%ebp)
f01317f2:	e8 b5 fa ff ff       	call   f01312ac <strchr>
f01317f7:	83 c4 08             	add    $0x8,%esp
f01317fa:	85 c0                	test   %eax,%eax
f01317fc:	74 dc                	je     f01317da <strsplit+0x8c>
			string++;
	}
f01317fe:	e9 6e ff ff ff       	jmp    f0131771 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131803:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131804:	8b 45 14             	mov    0x14(%ebp),%eax
f0131807:	8b 00                	mov    (%eax),%eax
f0131809:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131810:	8b 45 10             	mov    0x10(%ebp),%eax
f0131813:	01 d0                	add    %edx,%eax
f0131815:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f013181b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131820:	c9                   	leave  
f0131821:	c3                   	ret    

f0131822 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131822:	55                   	push   %ebp
f0131823:	89 e5                	mov    %esp,%ebp
f0131825:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131828:	90                   	nop
f0131829:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131830:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131833:	89 c2                	mov    %eax,%edx
f0131835:	ec                   	in     (%dx),%al
f0131836:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131839:	8a 45 f7             	mov    -0x9(%ebp),%al
f013183c:	0f b6 c0             	movzbl %al,%eax
f013183f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131842:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131845:	25 c0 00 00 00       	and    $0xc0,%eax
f013184a:	83 f8 40             	cmp    $0x40,%eax
f013184d:	75 da                	jne    f0131829 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013184f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131853:	74 11                	je     f0131866 <ide_wait_ready+0x44>
f0131855:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131858:	83 e0 21             	and    $0x21,%eax
f013185b:	85 c0                	test   %eax,%eax
f013185d:	74 07                	je     f0131866 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f013185f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131864:	eb 05                	jmp    f013186b <ide_wait_ready+0x49>
	}
	return 0;
f0131866:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013186b:	c9                   	leave  
f013186c:	c3                   	ret    

f013186d <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f013186d:	55                   	push   %ebp
f013186e:	89 e5                	mov    %esp,%ebp
f0131870:	57                   	push   %edi
f0131871:	53                   	push   %ebx
f0131872:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131875:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013187c:	76 16                	jbe    f0131894 <ide_read+0x27>
f013187e:	68 83 d4 13 f0       	push   $0xf013d483
f0131883:	68 90 d4 13 f0       	push   $0xf013d490
f0131888:	6a 25                	push   $0x25
f013188a:	68 a5 d4 13 f0       	push   $0xf013d4a5
f013188f:	e8 71 e9 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131894:	83 ec 0c             	sub    $0xc,%esp
f0131897:	6a 00                	push   $0x0
f0131899:	e8 84 ff ff ff       	call   f0131822 <ide_wait_ready>
f013189e:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f01318a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01318a4:	0f b6 c0             	movzbl %al,%eax
f01318a7:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01318ae:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01318b1:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01318b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01318b7:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01318b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01318bb:	0f b6 c0             	movzbl %al,%eax
f01318be:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01318c5:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01318c8:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01318cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01318ce:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01318cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01318d2:	c1 e8 08             	shr    $0x8,%eax
f01318d5:	0f b6 c0             	movzbl %al,%eax
f01318d8:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01318df:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01318e2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01318e5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01318e8:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01318e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01318ec:	c1 e8 10             	shr    $0x10,%eax
f01318ef:	0f b6 c0             	movzbl %al,%eax
f01318f2:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01318f9:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01318fc:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01318ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131902:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131903:	a1 6c 25 78 f0       	mov    0xf078256c,%eax
f0131908:	83 e0 01             	and    $0x1,%eax
f013190b:	c1 e0 04             	shl    $0x4,%eax
f013190e:	88 c2                	mov    %al,%dl
f0131910:	8b 45 08             	mov    0x8(%ebp),%eax
f0131913:	c1 e8 18             	shr    $0x18,%eax
f0131916:	83 e0 0f             	and    $0xf,%eax
f0131919:	09 d0                	or     %edx,%eax
f013191b:	83 c8 e0             	or     $0xffffffe0,%eax
f013191e:	0f b6 c0             	movzbl %al,%eax
f0131921:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131928:	88 45 d6             	mov    %al,-0x2a(%ebp)
f013192b:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013192e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131931:	ee                   	out    %al,(%dx)
f0131932:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131939:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f013193d:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131940:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131943:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131944:	eb 55                	jmp    f013199b <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131946:	83 ec 0c             	sub    $0xc,%esp
f0131949:	6a 01                	push   $0x1
f013194b:	e8 d2 fe ff ff       	call   f0131822 <ide_wait_ready>
f0131950:	83 c4 10             	add    $0x10,%esp
f0131953:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131956:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013195a:	79 05                	jns    f0131961 <ide_read+0xf4>
			return r;
f013195c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013195f:	eb 45                	jmp    f01319a6 <ide_read+0x139>
f0131961:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131968:	8b 45 0c             	mov    0xc(%ebp),%eax
f013196b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f013196e:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131975:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131978:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013197b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013197e:	89 cb                	mov    %ecx,%ebx
f0131980:	89 df                	mov    %ebx,%edi
f0131982:	89 c1                	mov    %eax,%ecx
f0131984:	fc                   	cld    
f0131985:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131987:	89 c8                	mov    %ecx,%eax
f0131989:	89 fb                	mov    %edi,%ebx
f013198b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f013198e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131991:	ff 4d 10             	decl   0x10(%ebp)
f0131994:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013199b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013199f:	75 a5                	jne    f0131946 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01319a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01319a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01319a9:	5b                   	pop    %ebx
f01319aa:	5f                   	pop    %edi
f01319ab:	5d                   	pop    %ebp
f01319ac:	c3                   	ret    

f01319ad <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01319ad:	55                   	push   %ebp
f01319ae:	89 e5                	mov    %esp,%ebp
f01319b0:	56                   	push   %esi
f01319b1:	53                   	push   %ebx
f01319b2:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f01319b5:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01319bc:	76 16                	jbe    f01319d4 <ide_write+0x27>
f01319be:	68 83 d4 13 f0       	push   $0xf013d483
f01319c3:	68 90 d4 13 f0       	push   $0xf013d490
f01319c8:	6a 3e                	push   $0x3e
f01319ca:	68 a5 d4 13 f0       	push   $0xf013d4a5
f01319cf:	e8 31 e8 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01319d4:	83 ec 0c             	sub    $0xc,%esp
f01319d7:	6a 00                	push   $0x0
f01319d9:	e8 44 fe ff ff       	call   f0131822 <ide_wait_ready>
f01319de:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01319e1:	8b 45 10             	mov    0x10(%ebp),%eax
f01319e4:	0f b6 c0             	movzbl %al,%eax
f01319e7:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01319ee:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01319f1:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01319f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01319f7:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01319f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01319fb:	0f b6 c0             	movzbl %al,%eax
f01319fe:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131a05:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131a08:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131a0b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131a0e:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a12:	c1 e8 08             	shr    $0x8,%eax
f0131a15:	0f b6 c0             	movzbl %al,%eax
f0131a18:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131a1f:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131a22:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131a25:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131a28:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131a29:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a2c:	c1 e8 10             	shr    $0x10,%eax
f0131a2f:	0f b6 c0             	movzbl %al,%eax
f0131a32:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131a39:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131a3c:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131a3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131a42:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131a43:	a1 6c 25 78 f0       	mov    0xf078256c,%eax
f0131a48:	83 e0 01             	and    $0x1,%eax
f0131a4b:	c1 e0 04             	shl    $0x4,%eax
f0131a4e:	88 c2                	mov    %al,%dl
f0131a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a53:	c1 e8 18             	shr    $0x18,%eax
f0131a56:	83 e0 0f             	and    $0xf,%eax
f0131a59:	09 d0                	or     %edx,%eax
f0131a5b:	83 c8 e0             	or     $0xffffffe0,%eax
f0131a5e:	0f b6 c0             	movzbl %al,%eax
f0131a61:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131a68:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131a6b:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131a6e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131a71:	ee                   	out    %al,(%dx)
f0131a72:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131a79:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131a7d:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131a80:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131a83:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131a84:	eb 55                	jmp    f0131adb <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131a86:	83 ec 0c             	sub    $0xc,%esp
f0131a89:	6a 01                	push   $0x1
f0131a8b:	e8 92 fd ff ff       	call   f0131822 <ide_wait_ready>
f0131a90:	83 c4 10             	add    $0x10,%esp
f0131a93:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131a96:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131a9a:	79 05                	jns    f0131aa1 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131a9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131a9f:	eb 45                	jmp    f0131ae6 <ide_write+0x139>
f0131aa1:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131aab:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131aae:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131ab5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ab8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131abb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131abe:	89 cb                	mov    %ecx,%ebx
f0131ac0:	89 de                	mov    %ebx,%esi
f0131ac2:	89 c1                	mov    %eax,%ecx
f0131ac4:	fc                   	cld    
f0131ac5:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131ac7:	89 c8                	mov    %ecx,%eax
f0131ac9:	89 f3                	mov    %esi,%ebx
f0131acb:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131ace:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131ad1:	ff 4d 10             	decl   0x10(%ebp)
f0131ad4:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131adb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131adf:	75 a5                	jne    f0131a86 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131ae1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131ae6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131ae9:	5b                   	pop    %ebx
f0131aea:	5e                   	pop    %esi
f0131aeb:	5d                   	pop    %ebp
f0131aec:	c3                   	ret    

f0131aed <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131aed:	55                   	push   %ebp
f0131aee:	89 e5                	mov    %esp,%ebp
f0131af0:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131af3:	83 ec 0c             	sub    $0xc,%esp
f0131af6:	68 b0 d4 13 f0       	push   $0xf013d4b0
f0131afb:	e8 0e f2 fc ff       	call   f0100d0e <cprintf>
f0131b00:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131b03:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131b0a:	83 ec 0c             	sub    $0xc,%esp
f0131b0d:	68 dc d4 13 f0       	push   $0xf013d4dc
f0131b12:	e8 f7 f1 fc ff       	call   f0100d0e <cprintf>
f0131b17:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131b1a:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131b1e:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0131b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b26:	eb 56                	jmp    f0131b7e <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131b2c:	74 1c                	je     f0131b4a <print_mem_block_lists+0x5d>
f0131b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b31:	8b 50 08             	mov    0x8(%eax),%edx
f0131b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b37:	8b 48 08             	mov    0x8(%eax),%ecx
f0131b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b3d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b40:	01 c8                	add    %ecx,%eax
f0131b42:	39 c2                	cmp    %eax,%edx
f0131b44:	73 04                	jae    f0131b4a <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131b46:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b4d:	8b 50 08             	mov    0x8(%eax),%edx
f0131b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b53:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b56:	01 c2                	add    %eax,%edx
f0131b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b5b:	8b 40 08             	mov    0x8(%eax),%eax
f0131b5e:	83 ec 04             	sub    $0x4,%esp
f0131b61:	52                   	push   %edx
f0131b62:	50                   	push   %eax
f0131b63:	68 f1 d4 13 f0       	push   $0xf013d4f1
f0131b68:	e8 a1 f1 fc ff       	call   f0100d0e <cprintf>
f0131b6d:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131b76:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0131b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b82:	74 07                	je     f0131b8b <print_mem_block_lists+0x9e>
f0131b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b87:	8b 00                	mov    (%eax),%eax
f0131b89:	eb 05                	jmp    f0131b90 <print_mem_block_lists+0xa3>
f0131b8b:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b90:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f0131b95:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0131b9a:	85 c0                	test   %eax,%eax
f0131b9c:	75 8a                	jne    f0131b28 <print_mem_block_lists+0x3b>
f0131b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ba2:	75 84                	jne    f0131b28 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131ba4:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131ba8:	75 10                	jne    f0131bba <print_mem_block_lists+0xcd>
f0131baa:	83 ec 0c             	sub    $0xc,%esp
f0131bad:	68 00 d5 13 f0       	push   $0xf013d500
f0131bb2:	e8 57 f1 fc ff       	call   f0100d0e <cprintf>
f0131bb7:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131bba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131bc1:	83 ec 0c             	sub    $0xc,%esp
f0131bc4:	68 24 d5 13 f0       	push   $0xf013d524
f0131bc9:	e8 40 f1 fc ff       	call   f0100d0e <cprintf>
f0131bce:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131bd1:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131bd5:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131bda:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bdd:	eb 56                	jmp    f0131c35 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131bdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131be3:	74 1c                	je     f0131c01 <print_mem_block_lists+0x114>
f0131be5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131be8:	8b 50 08             	mov    0x8(%eax),%edx
f0131beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bee:	8b 48 08             	mov    0x8(%eax),%ecx
f0131bf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bf4:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bf7:	01 c8                	add    %ecx,%eax
f0131bf9:	39 c2                	cmp    %eax,%edx
f0131bfb:	73 04                	jae    f0131c01 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131bfd:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c04:	8b 50 08             	mov    0x8(%eax),%edx
f0131c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c0a:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c0d:	01 c2                	add    %eax,%edx
f0131c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c12:	8b 40 08             	mov    0x8(%eax),%eax
f0131c15:	83 ec 04             	sub    $0x4,%esp
f0131c18:	52                   	push   %edx
f0131c19:	50                   	push   %eax
f0131c1a:	68 f1 d4 13 f0       	push   $0xf013d4f1
f0131c1f:	e8 ea f0 fc ff       	call   f0100d0e <cprintf>
f0131c24:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131c2d:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f0131c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c39:	74 07                	je     f0131c42 <print_mem_block_lists+0x155>
f0131c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c3e:	8b 00                	mov    (%eax),%eax
f0131c40:	eb 05                	jmp    f0131c47 <print_mem_block_lists+0x15a>
f0131c42:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c47:	a3 90 25 78 f0       	mov    %eax,0xf0782590
f0131c4c:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f0131c51:	85 c0                	test   %eax,%eax
f0131c53:	75 8a                	jne    f0131bdf <print_mem_block_lists+0xf2>
f0131c55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c59:	75 84                	jne    f0131bdf <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131c5b:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131c5f:	75 10                	jne    f0131c71 <print_mem_block_lists+0x184>
f0131c61:	83 ec 0c             	sub    $0xc,%esp
f0131c64:	68 3c d5 13 f0       	push   $0xf013d53c
f0131c69:	e8 a0 f0 fc ff       	call   f0100d0e <cprintf>
f0131c6e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131c71:	83 ec 0c             	sub    $0xc,%esp
f0131c74:	68 b0 d4 13 f0       	push   $0xf013d4b0
f0131c79:	e8 90 f0 fc ff       	call   f0100d0e <cprintf>
f0131c7e:	83 c4 10             	add    $0x10,%esp

}
f0131c81:	90                   	nop
f0131c82:	c9                   	leave  
f0131c83:	c3                   	ret    

f0131c84 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131c84:	55                   	push   %ebp
f0131c85:	89 e5                	mov    %esp,%ebp
f0131c87:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131c8a:	c7 05 58 26 78 f0 00 	movl   $0x0,0xf0782658
f0131c91:	00 00 00 
f0131c94:	c7 05 5c 26 78 f0 00 	movl   $0x0,0xf078265c
f0131c9b:	00 00 00 
f0131c9e:	c7 05 64 26 78 f0 00 	movl   $0x0,0xf0782664
f0131ca5:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131ca8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131caf:	e9 9e 00 00 00       	jmp    f0131d52 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131cb4:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131cb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131cbc:	c1 e2 04             	shl    $0x4,%edx
f0131cbf:	01 d0                	add    %edx,%eax
f0131cc1:	85 c0                	test   %eax,%eax
f0131cc3:	75 14                	jne    f0131cd9 <initialize_MemBlocksList+0x55>
f0131cc5:	83 ec 04             	sub    $0x4,%esp
f0131cc8:	68 64 d5 13 f0       	push   $0xf013d564
f0131ccd:	6a 46                	push   $0x46
f0131ccf:	68 87 d5 13 f0       	push   $0xf013d587
f0131cd4:	e8 2c e5 fc ff       	call   f0100205 <_panic>
f0131cd9:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131cde:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ce1:	c1 e2 04             	shl    $0x4,%edx
f0131ce4:	01 d0                	add    %edx,%eax
f0131ce6:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0131cec:	89 10                	mov    %edx,(%eax)
f0131cee:	8b 00                	mov    (%eax),%eax
f0131cf0:	85 c0                	test   %eax,%eax
f0131cf2:	74 18                	je     f0131d0c <initialize_MemBlocksList+0x88>
f0131cf4:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0131cf9:	8b 15 98 25 78 f0    	mov    0xf0782598,%edx
f0131cff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131d02:	c1 e1 04             	shl    $0x4,%ecx
f0131d05:	01 ca                	add    %ecx,%edx
f0131d07:	89 50 04             	mov    %edx,0x4(%eax)
f0131d0a:	eb 12                	jmp    f0131d1e <initialize_MemBlocksList+0x9a>
f0131d0c:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d14:	c1 e2 04             	shl    $0x4,%edx
f0131d17:	01 d0                	add    %edx,%eax
f0131d19:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0131d1e:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131d23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d26:	c1 e2 04             	shl    $0x4,%edx
f0131d29:	01 d0                	add    %edx,%eax
f0131d2b:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0131d30:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d38:	c1 e2 04             	shl    $0x4,%edx
f0131d3b:	01 d0                	add    %edx,%eax
f0131d3d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d44:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0131d49:	40                   	inc    %eax
f0131d4a:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131d4f:	ff 45 f4             	incl   -0xc(%ebp)
f0131d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d55:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d58:	0f 82 56 ff ff ff    	jb     f0131cb4 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131d5e:	90                   	nop
f0131d5f:	c9                   	leave  
f0131d60:	c3                   	ret    

f0131d61 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131d61:	55                   	push   %ebp
f0131d62:	89 e5                	mov    %esp,%ebp
f0131d64:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131d67:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d6a:	8b 00                	mov    (%eax),%eax
f0131d6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131d6f:	eb 19                	jmp    f0131d8a <find_block+0x29>
	{
		if(va==point->sva)
f0131d71:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d74:	8b 40 08             	mov    0x8(%eax),%eax
f0131d77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131d7a:	75 05                	jne    f0131d81 <find_block+0x20>
		   return point;
f0131d7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d7f:	eb 36                	jmp    f0131db7 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131d81:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d84:	8b 40 08             	mov    0x8(%eax),%eax
f0131d87:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131d8a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131d8e:	74 07                	je     f0131d97 <find_block+0x36>
f0131d90:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d93:	8b 00                	mov    (%eax),%eax
f0131d95:	eb 05                	jmp    f0131d9c <find_block+0x3b>
f0131d97:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d9c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d9f:	89 42 08             	mov    %eax,0x8(%edx)
f0131da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da5:	8b 40 08             	mov    0x8(%eax),%eax
f0131da8:	85 c0                	test   %eax,%eax
f0131daa:	75 c5                	jne    f0131d71 <find_block+0x10>
f0131dac:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131db0:	75 bf                	jne    f0131d71 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131db2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131db7:	c9                   	leave  
f0131db8:	c3                   	ret    

f0131db9 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131db9:	55                   	push   %ebp
f0131dba:	89 e5                	mov    %esp,%ebp
f0131dbc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131dbf:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131dc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131dc7:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f0131dcc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0131dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dd2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131dd5:	74 24                	je     f0131dfb <insert_sorted_allocList+0x42>
f0131dd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dda:	8b 50 08             	mov    0x8(%eax),%edx
f0131ddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131de0:	8b 40 08             	mov    0x8(%eax),%eax
f0131de3:	39 c2                	cmp    %eax,%edx
f0131de5:	76 14                	jbe    f0131dfb <insert_sorted_allocList+0x42>
f0131de7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dea:	8b 50 08             	mov    0x8(%eax),%edx
f0131ded:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131df0:	8b 40 08             	mov    0x8(%eax),%eax
f0131df3:	39 c2                	cmp    %eax,%edx
f0131df5:	0f 82 60 01 00 00    	jb     f0131f5b <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131dfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131dff:	75 65                	jne    f0131e66 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131e01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e05:	75 14                	jne    f0131e1b <insert_sorted_allocList+0x62>
f0131e07:	83 ec 04             	sub    $0x4,%esp
f0131e0a:	68 64 d5 13 f0       	push   $0xf013d564
f0131e0f:	6a 6b                	push   $0x6b
f0131e11:	68 87 d5 13 f0       	push   $0xf013d587
f0131e16:	e8 ea e3 fc ff       	call   f0100205 <_panic>
f0131e1b:	8b 15 88 25 78 f0    	mov    0xf0782588,%edx
f0131e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e24:	89 10                	mov    %edx,(%eax)
f0131e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e29:	8b 00                	mov    (%eax),%eax
f0131e2b:	85 c0                	test   %eax,%eax
f0131e2d:	74 0d                	je     f0131e3c <insert_sorted_allocList+0x83>
f0131e2f:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131e34:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e37:	89 50 04             	mov    %edx,0x4(%eax)
f0131e3a:	eb 08                	jmp    f0131e44 <insert_sorted_allocList+0x8b>
f0131e3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e3f:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f0131e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e47:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0131e4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e56:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0131e5b:	40                   	inc    %eax
f0131e5c:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131e61:	e9 dc 01 00 00       	jmp    f0132042 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e69:	8b 50 08             	mov    0x8(%eax),%edx
f0131e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e6f:	8b 40 08             	mov    0x8(%eax),%eax
f0131e72:	39 c2                	cmp    %eax,%edx
f0131e74:	77 6c                	ja     f0131ee2 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131e76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131e7a:	74 06                	je     f0131e82 <insert_sorted_allocList+0xc9>
f0131e7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e80:	75 14                	jne    f0131e96 <insert_sorted_allocList+0xdd>
f0131e82:	83 ec 04             	sub    $0x4,%esp
f0131e85:	68 a0 d5 13 f0       	push   $0xf013d5a0
f0131e8a:	6a 6f                	push   $0x6f
f0131e8c:	68 87 d5 13 f0       	push   $0xf013d587
f0131e91:	e8 6f e3 fc ff       	call   f0100205 <_panic>
f0131e96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e99:	8b 50 04             	mov    0x4(%eax),%edx
f0131e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e9f:	89 50 04             	mov    %edx,0x4(%eax)
f0131ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ea5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131ea8:	89 10                	mov    %edx,(%eax)
f0131eaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ead:	8b 40 04             	mov    0x4(%eax),%eax
f0131eb0:	85 c0                	test   %eax,%eax
f0131eb2:	74 0d                	je     f0131ec1 <insert_sorted_allocList+0x108>
f0131eb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eb7:	8b 40 04             	mov    0x4(%eax),%eax
f0131eba:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ebd:	89 10                	mov    %edx,(%eax)
f0131ebf:	eb 08                	jmp    f0131ec9 <insert_sorted_allocList+0x110>
f0131ec1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec4:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0131ec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ecc:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ecf:	89 50 04             	mov    %edx,0x4(%eax)
f0131ed2:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0131ed7:	40                   	inc    %eax
f0131ed8:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131edd:	e9 60 01 00 00       	jmp    f0132042 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0131ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee5:	8b 50 08             	mov    0x8(%eax),%edx
f0131ee8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131eeb:	8b 40 08             	mov    0x8(%eax),%eax
f0131eee:	39 c2                	cmp    %eax,%edx
f0131ef0:	0f 82 4c 01 00 00    	jb     f0132042 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131ef6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131efa:	75 14                	jne    f0131f10 <insert_sorted_allocList+0x157>
f0131efc:	83 ec 04             	sub    $0x4,%esp
f0131eff:	68 d8 d5 13 f0       	push   $0xf013d5d8
f0131f04:	6a 73                	push   $0x73
f0131f06:	68 87 d5 13 f0       	push   $0xf013d587
f0131f0b:	e8 f5 e2 fc ff       	call   f0100205 <_panic>
f0131f10:	8b 15 8c 25 78 f0    	mov    0xf078258c,%edx
f0131f16:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f19:	89 50 04             	mov    %edx,0x4(%eax)
f0131f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f1f:	8b 40 04             	mov    0x4(%eax),%eax
f0131f22:	85 c0                	test   %eax,%eax
f0131f24:	74 0c                	je     f0131f32 <insert_sorted_allocList+0x179>
f0131f26:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f0131f2b:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f2e:	89 10                	mov    %edx,(%eax)
f0131f30:	eb 08                	jmp    f0131f3a <insert_sorted_allocList+0x181>
f0131f32:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f35:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0131f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f3d:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f0131f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f4b:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0131f50:	40                   	inc    %eax
f0131f51:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131f56:	e9 e7 00 00 00       	jmp    f0132042 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131f61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131f68:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f70:	e9 9d 00 00 00       	jmp    f0132012 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f78:	8b 00                	mov    (%eax),%eax
f0131f7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f80:	8b 50 08             	mov    0x8(%eax),%edx
f0131f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f86:	8b 40 08             	mov    0x8(%eax),%eax
f0131f89:	39 c2                	cmp    %eax,%edx
f0131f8b:	76 7d                	jbe    f013200a <insert_sorted_allocList+0x251>
f0131f8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f90:	8b 50 08             	mov    0x8(%eax),%edx
f0131f93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f96:	8b 40 08             	mov    0x8(%eax),%eax
f0131f99:	39 c2                	cmp    %eax,%edx
f0131f9b:	73 6d                	jae    f013200a <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131f9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fa1:	74 06                	je     f0131fa9 <insert_sorted_allocList+0x1f0>
f0131fa3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131fa7:	75 14                	jne    f0131fbd <insert_sorted_allocList+0x204>
f0131fa9:	83 ec 04             	sub    $0x4,%esp
f0131fac:	68 fc d5 13 f0       	push   $0xf013d5fc
f0131fb1:	6a 7f                	push   $0x7f
f0131fb3:	68 87 d5 13 f0       	push   $0xf013d587
f0131fb8:	e8 48 e2 fc ff       	call   f0100205 <_panic>
f0131fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc0:	8b 10                	mov    (%eax),%edx
f0131fc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fc5:	89 10                	mov    %edx,(%eax)
f0131fc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fca:	8b 00                	mov    (%eax),%eax
f0131fcc:	85 c0                	test   %eax,%eax
f0131fce:	74 0b                	je     f0131fdb <insert_sorted_allocList+0x222>
f0131fd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd3:	8b 00                	mov    (%eax),%eax
f0131fd5:	8b 55 08             	mov    0x8(%ebp),%edx
f0131fd8:	89 50 04             	mov    %edx,0x4(%eax)
f0131fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fde:	8b 55 08             	mov    0x8(%ebp),%edx
f0131fe1:	89 10                	mov    %edx,(%eax)
f0131fe3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fe9:	89 50 04             	mov    %edx,0x4(%eax)
f0131fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fef:	8b 00                	mov    (%eax),%eax
f0131ff1:	85 c0                	test   %eax,%eax
f0131ff3:	75 08                	jne    f0131ffd <insert_sorted_allocList+0x244>
f0131ff5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ff8:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f0131ffd:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0132002:	40                   	inc    %eax
f0132003:	a3 94 25 78 f0       	mov    %eax,0xf0782594
				break;
f0132008:	eb 39                	jmp    f0132043 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f013200a:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f013200f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132012:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132016:	74 07                	je     f013201f <insert_sorted_allocList+0x266>
f0132018:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013201b:	8b 00                	mov    (%eax),%eax
f013201d:	eb 05                	jmp    f0132024 <insert_sorted_allocList+0x26b>
f013201f:	b8 00 00 00 00       	mov    $0x0,%eax
f0132024:	a3 90 25 78 f0       	mov    %eax,0xf0782590
f0132029:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f013202e:	85 c0                	test   %eax,%eax
f0132030:	0f 85 3f ff ff ff    	jne    f0131f75 <insert_sorted_allocList+0x1bc>
f0132036:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013203a:	0f 85 35 ff ff ff    	jne    f0131f75 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0132040:	eb 01                	jmp    f0132043 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0132042:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0132043:	90                   	nop
f0132044:	c9                   	leave  
f0132045:	c3                   	ret    

f0132046 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0132046:	55                   	push   %ebp
f0132047:	89 e5                	mov    %esp,%ebp
f0132049:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013204c:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132051:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132054:	e9 85 01 00 00       	jmp    f01321de <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0132059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013205c:	8b 40 0c             	mov    0xc(%eax),%eax
f013205f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132062:	0f 82 6e 01 00 00    	jb     f01321d6 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0132068:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013206b:	8b 40 0c             	mov    0xc(%eax),%eax
f013206e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132071:	0f 85 8a 00 00 00    	jne    f0132101 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0132077:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013207b:	75 17                	jne    f0132094 <alloc_block_FF+0x4e>
f013207d:	83 ec 04             	sub    $0x4,%esp
f0132080:	68 30 d6 13 f0       	push   $0xf013d630
f0132085:	68 93 00 00 00       	push   $0x93
f013208a:	68 87 d5 13 f0       	push   $0xf013d587
f013208f:	e8 71 e1 fc ff       	call   f0100205 <_panic>
f0132094:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132097:	8b 00                	mov    (%eax),%eax
f0132099:	85 c0                	test   %eax,%eax
f013209b:	74 10                	je     f01320ad <alloc_block_FF+0x67>
f013209d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320a0:	8b 00                	mov    (%eax),%eax
f01320a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320a5:	8b 52 04             	mov    0x4(%edx),%edx
f01320a8:	89 50 04             	mov    %edx,0x4(%eax)
f01320ab:	eb 0b                	jmp    f01320b8 <alloc_block_FF+0x72>
f01320ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320b0:	8b 40 04             	mov    0x4(%eax),%eax
f01320b3:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f01320b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320bb:	8b 40 04             	mov    0x4(%eax),%eax
f01320be:	85 c0                	test   %eax,%eax
f01320c0:	74 0f                	je     f01320d1 <alloc_block_FF+0x8b>
f01320c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c5:	8b 40 04             	mov    0x4(%eax),%eax
f01320c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320cb:	8b 12                	mov    (%edx),%edx
f01320cd:	89 10                	mov    %edx,(%eax)
f01320cf:	eb 0a                	jmp    f01320db <alloc_block_FF+0x95>
f01320d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320d4:	8b 00                	mov    (%eax),%eax
f01320d6:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01320db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01320e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320e7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01320ee:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01320f3:	48                   	dec    %eax
f01320f4:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			   return  point;
f01320f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320fc:	e9 10 01 00 00       	jmp    f0132211 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0132101:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132104:	8b 40 0c             	mov    0xc(%eax),%eax
f0132107:	3b 45 08             	cmp    0x8(%ebp),%eax
f013210a:	0f 86 c6 00 00 00    	jbe    f01321d6 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132110:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132115:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0132118:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013211b:	8b 50 08             	mov    0x8(%eax),%edx
f013211e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132121:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0132124:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132127:	8b 55 08             	mov    0x8(%ebp),%edx
f013212a:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f013212d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132131:	75 17                	jne    f013214a <alloc_block_FF+0x104>
f0132133:	83 ec 04             	sub    $0x4,%esp
f0132136:	68 30 d6 13 f0       	push   $0xf013d630
f013213b:	68 9b 00 00 00       	push   $0x9b
f0132140:	68 87 d5 13 f0       	push   $0xf013d587
f0132145:	e8 bb e0 fc ff       	call   f0100205 <_panic>
f013214a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013214d:	8b 00                	mov    (%eax),%eax
f013214f:	85 c0                	test   %eax,%eax
f0132151:	74 10                	je     f0132163 <alloc_block_FF+0x11d>
f0132153:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132156:	8b 00                	mov    (%eax),%eax
f0132158:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013215b:	8b 52 04             	mov    0x4(%edx),%edx
f013215e:	89 50 04             	mov    %edx,0x4(%eax)
f0132161:	eb 0b                	jmp    f013216e <alloc_block_FF+0x128>
f0132163:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132166:	8b 40 04             	mov    0x4(%eax),%eax
f0132169:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f013216e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132171:	8b 40 04             	mov    0x4(%eax),%eax
f0132174:	85 c0                	test   %eax,%eax
f0132176:	74 0f                	je     f0132187 <alloc_block_FF+0x141>
f0132178:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013217b:	8b 40 04             	mov    0x4(%eax),%eax
f013217e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132181:	8b 12                	mov    (%edx),%edx
f0132183:	89 10                	mov    %edx,(%eax)
f0132185:	eb 0a                	jmp    f0132191 <alloc_block_FF+0x14b>
f0132187:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013218a:	8b 00                	mov    (%eax),%eax
f013218c:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132191:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132194:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013219a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013219d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321a4:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01321a9:	48                   	dec    %eax
f01321aa:	a3 64 26 78 f0       	mov    %eax,0xf0782664
			   point->sva += size;
f01321af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b2:	8b 50 08             	mov    0x8(%eax),%edx
f01321b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01321b8:	01 c2                	add    %eax,%edx
f01321ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321bd:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f01321c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01321c6:	2b 45 08             	sub    0x8(%ebp),%eax
f01321c9:	89 c2                	mov    %eax,%edx
f01321cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ce:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f01321d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321d4:	eb 3b                	jmp    f0132211 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01321d6:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01321db:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01321de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321e2:	74 07                	je     f01321eb <alloc_block_FF+0x1a5>
f01321e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321e7:	8b 00                	mov    (%eax),%eax
f01321e9:	eb 05                	jmp    f01321f0 <alloc_block_FF+0x1aa>
f01321eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01321f0:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01321f5:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01321fa:	85 c0                	test   %eax,%eax
f01321fc:	0f 85 57 fe ff ff    	jne    f0132059 <alloc_block_FF+0x13>
f0132202:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132206:	0f 85 4d fe ff ff    	jne    f0132059 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013220c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132211:	c9                   	leave  
f0132212:	c3                   	ret    

f0132213 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132213:	55                   	push   %ebp
f0132214:	89 e5                	mov    %esp,%ebp
f0132216:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0132219:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132220:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132225:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132228:	e9 df 00 00 00       	jmp    f013230c <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f013222d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132230:	8b 40 0c             	mov    0xc(%eax),%eax
f0132233:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132236:	0f 82 c8 00 00 00    	jb     f0132304 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f013223c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013223f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132242:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132245:	0f 85 8a 00 00 00    	jne    f01322d5 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f013224b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013224f:	75 17                	jne    f0132268 <alloc_block_BF+0x55>
f0132251:	83 ec 04             	sub    $0x4,%esp
f0132254:	68 30 d6 13 f0       	push   $0xf013d630
f0132259:	68 b7 00 00 00       	push   $0xb7
f013225e:	68 87 d5 13 f0       	push   $0xf013d587
f0132263:	e8 9d df fc ff       	call   f0100205 <_panic>
f0132268:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013226b:	8b 00                	mov    (%eax),%eax
f013226d:	85 c0                	test   %eax,%eax
f013226f:	74 10                	je     f0132281 <alloc_block_BF+0x6e>
f0132271:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132274:	8b 00                	mov    (%eax),%eax
f0132276:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132279:	8b 52 04             	mov    0x4(%edx),%edx
f013227c:	89 50 04             	mov    %edx,0x4(%eax)
f013227f:	eb 0b                	jmp    f013228c <alloc_block_BF+0x79>
f0132281:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132284:	8b 40 04             	mov    0x4(%eax),%eax
f0132287:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f013228c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013228f:	8b 40 04             	mov    0x4(%eax),%eax
f0132292:	85 c0                	test   %eax,%eax
f0132294:	74 0f                	je     f01322a5 <alloc_block_BF+0x92>
f0132296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132299:	8b 40 04             	mov    0x4(%eax),%eax
f013229c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013229f:	8b 12                	mov    (%edx),%edx
f01322a1:	89 10                	mov    %edx,(%eax)
f01322a3:	eb 0a                	jmp    f01322af <alloc_block_BF+0x9c>
f01322a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322a8:	8b 00                	mov    (%eax),%eax
f01322aa:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01322af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01322b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322bb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322c2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01322c7:	48                   	dec    %eax
f01322c8:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			   return currentMemBlock;
f01322cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322d0:	e9 4d 01 00 00       	jmp    f0132422 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f01322d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322d8:	8b 40 0c             	mov    0xc(%eax),%eax
f01322db:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322de:	76 24                	jbe    f0132304 <alloc_block_BF+0xf1>
f01322e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01322e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01322e9:	73 19                	jae    f0132304 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f01322eb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f01322f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322f5:	8b 40 0c             	mov    0xc(%eax),%eax
f01322f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f01322fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322fe:	8b 40 08             	mov    0x8(%eax),%eax
f0132301:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132304:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0132309:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013230c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132310:	74 07                	je     f0132319 <alloc_block_BF+0x106>
f0132312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132315:	8b 00                	mov    (%eax),%eax
f0132317:	eb 05                	jmp    f013231e <alloc_block_BF+0x10b>
f0132319:	b8 00 00 00 00       	mov    $0x0,%eax
f013231e:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f0132323:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0132328:	85 c0                	test   %eax,%eax
f013232a:	0f 85 fd fe ff ff    	jne    f013222d <alloc_block_BF+0x1a>
f0132330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132334:	0f 85 f3 fe ff ff    	jne    f013222d <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f013233a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013233e:	0f 84 d9 00 00 00    	je     f013241d <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132344:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132349:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f013234c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013234f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132352:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0132355:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132358:	8b 55 08             	mov    0x8(%ebp),%edx
f013235b:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f013235e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0132362:	75 17                	jne    f013237b <alloc_block_BF+0x168>
f0132364:	83 ec 04             	sub    $0x4,%esp
f0132367:	68 30 d6 13 f0       	push   $0xf013d630
f013236c:	68 c7 00 00 00       	push   $0xc7
f0132371:	68 87 d5 13 f0       	push   $0xf013d587
f0132376:	e8 8a de fc ff       	call   f0100205 <_panic>
f013237b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013237e:	8b 00                	mov    (%eax),%eax
f0132380:	85 c0                	test   %eax,%eax
f0132382:	74 10                	je     f0132394 <alloc_block_BF+0x181>
f0132384:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132387:	8b 00                	mov    (%eax),%eax
f0132389:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013238c:	8b 52 04             	mov    0x4(%edx),%edx
f013238f:	89 50 04             	mov    %edx,0x4(%eax)
f0132392:	eb 0b                	jmp    f013239f <alloc_block_BF+0x18c>
f0132394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132397:	8b 40 04             	mov    0x4(%eax),%eax
f013239a:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f013239f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01323a2:	8b 40 04             	mov    0x4(%eax),%eax
f01323a5:	85 c0                	test   %eax,%eax
f01323a7:	74 0f                	je     f01323b8 <alloc_block_BF+0x1a5>
f01323a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01323ac:	8b 40 04             	mov    0x4(%eax),%eax
f01323af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01323b2:	8b 12                	mov    (%edx),%edx
f01323b4:	89 10                	mov    %edx,(%eax)
f01323b6:	eb 0a                	jmp    f01323c2 <alloc_block_BF+0x1af>
f01323b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01323bb:	8b 00                	mov    (%eax),%eax
f01323bd:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f01323c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01323c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01323cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01323ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01323d5:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01323da:	48                   	dec    %eax
f01323db:	a3 64 26 78 f0       	mov    %eax,0xf0782664
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f01323e0:	83 ec 08             	sub    $0x8,%esp
f01323e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01323e6:	68 24 26 78 f0       	push   $0xf0782624
f01323eb:	e8 71 f9 ff ff       	call   f0131d61 <find_block>
f01323f0:	83 c4 10             	add    $0x10,%esp
f01323f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f01323f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01323f9:	8b 50 08             	mov    0x8(%eax),%edx
f01323fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01323ff:	01 c2                	add    %eax,%edx
f0132401:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132404:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0132407:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013240a:	8b 40 0c             	mov    0xc(%eax),%eax
f013240d:	2b 45 08             	sub    0x8(%ebp),%eax
f0132410:	89 c2                	mov    %eax,%edx
f0132412:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132415:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0132418:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013241b:	eb 05                	jmp    f0132422 <alloc_block_BF+0x20f>
	}
	return NULL;
f013241d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132422:	c9                   	leave  
f0132423:	c3                   	ret    

f0132424 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132424:	55                   	push   %ebp
f0132425:	89 e5                	mov    %esp,%ebp
f0132427:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f013242a:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f013242f:	85 c0                	test   %eax,%eax
f0132431:	0f 85 de 01 00 00    	jne    f0132615 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132437:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f013243c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013243f:	e9 9e 01 00 00       	jmp    f01325e2 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0132444:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132447:	8b 40 0c             	mov    0xc(%eax),%eax
f013244a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013244d:	0f 82 87 01 00 00    	jb     f01325da <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0132453:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132456:	8b 40 0c             	mov    0xc(%eax),%eax
f0132459:	3b 45 08             	cmp    0x8(%ebp),%eax
f013245c:	0f 85 95 00 00 00    	jne    f01324f7 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0132462:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132466:	75 17                	jne    f013247f <alloc_block_NF+0x5b>
f0132468:	83 ec 04             	sub    $0x4,%esp
f013246b:	68 30 d6 13 f0       	push   $0xf013d630
f0132470:	68 e0 00 00 00       	push   $0xe0
f0132475:	68 87 d5 13 f0       	push   $0xf013d587
f013247a:	e8 86 dd fc ff       	call   f0100205 <_panic>
f013247f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132482:	8b 00                	mov    (%eax),%eax
f0132484:	85 c0                	test   %eax,%eax
f0132486:	74 10                	je     f0132498 <alloc_block_NF+0x74>
f0132488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248b:	8b 00                	mov    (%eax),%eax
f013248d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132490:	8b 52 04             	mov    0x4(%edx),%edx
f0132493:	89 50 04             	mov    %edx,0x4(%eax)
f0132496:	eb 0b                	jmp    f01324a3 <alloc_block_NF+0x7f>
f0132498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013249b:	8b 40 04             	mov    0x4(%eax),%eax
f013249e:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f01324a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a6:	8b 40 04             	mov    0x4(%eax),%eax
f01324a9:	85 c0                	test   %eax,%eax
f01324ab:	74 0f                	je     f01324bc <alloc_block_NF+0x98>
f01324ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324b0:	8b 40 04             	mov    0x4(%eax),%eax
f01324b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324b6:	8b 12                	mov    (%edx),%edx
f01324b8:	89 10                	mov    %edx,(%eax)
f01324ba:	eb 0a                	jmp    f01324c6 <alloc_block_NF+0xa2>
f01324bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324bf:	8b 00                	mov    (%eax),%eax
f01324c1:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01324c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01324cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01324d9:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01324de:	48                   	dec    %eax
f01324df:	a3 30 26 78 f0       	mov    %eax,0xf0782630
				   svaOfNF = point->sva;
f01324e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e7:	8b 40 08             	mov    0x8(%eax),%eax
f01324ea:	a3 70 25 78 f0       	mov    %eax,0xf0782570
				   return  point;
f01324ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f2:	e9 f8 04 00 00       	jmp    f01329ef <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f01324f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324fa:	8b 40 0c             	mov    0xc(%eax),%eax
f01324fd:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132500:	0f 86 d4 00 00 00    	jbe    f01325da <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132506:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f013250b:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f013250e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132511:	8b 50 08             	mov    0x8(%eax),%edx
f0132514:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132517:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f013251a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013251d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132520:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132523:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132527:	75 17                	jne    f0132540 <alloc_block_NF+0x11c>
f0132529:	83 ec 04             	sub    $0x4,%esp
f013252c:	68 30 d6 13 f0       	push   $0xf013d630
f0132531:	68 e9 00 00 00       	push   $0xe9
f0132536:	68 87 d5 13 f0       	push   $0xf013d587
f013253b:	e8 c5 dc fc ff       	call   f0100205 <_panic>
f0132540:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132543:	8b 00                	mov    (%eax),%eax
f0132545:	85 c0                	test   %eax,%eax
f0132547:	74 10                	je     f0132559 <alloc_block_NF+0x135>
f0132549:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013254c:	8b 00                	mov    (%eax),%eax
f013254e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132551:	8b 52 04             	mov    0x4(%edx),%edx
f0132554:	89 50 04             	mov    %edx,0x4(%eax)
f0132557:	eb 0b                	jmp    f0132564 <alloc_block_NF+0x140>
f0132559:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013255c:	8b 40 04             	mov    0x4(%eax),%eax
f013255f:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132564:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132567:	8b 40 04             	mov    0x4(%eax),%eax
f013256a:	85 c0                	test   %eax,%eax
f013256c:	74 0f                	je     f013257d <alloc_block_NF+0x159>
f013256e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132571:	8b 40 04             	mov    0x4(%eax),%eax
f0132574:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132577:	8b 12                	mov    (%edx),%edx
f0132579:	89 10                	mov    %edx,(%eax)
f013257b:	eb 0a                	jmp    f0132587 <alloc_block_NF+0x163>
f013257d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132580:	8b 00                	mov    (%eax),%eax
f0132582:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013258a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132590:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132593:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013259a:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f013259f:	48                   	dec    %eax
f01325a0:	a3 64 26 78 f0       	mov    %eax,0xf0782664
				   svaOfNF = ReturnedBlock->sva;
f01325a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325a8:	8b 40 08             	mov    0x8(%eax),%eax
f01325ab:	a3 70 25 78 f0       	mov    %eax,0xf0782570
				   point->sva += size;
f01325b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325b3:	8b 50 08             	mov    0x8(%eax),%edx
f01325b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01325b9:	01 c2                	add    %eax,%edx
f01325bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325be:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f01325c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325c4:	8b 40 0c             	mov    0xc(%eax),%eax
f01325c7:	2b 45 08             	sub    0x8(%ebp),%eax
f01325ca:	89 c2                	mov    %eax,%edx
f01325cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325cf:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01325d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325d5:	e9 15 04 00 00       	jmp    f01329ef <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01325da:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01325df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325e6:	74 07                	je     f01325ef <alloc_block_NF+0x1cb>
f01325e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325eb:	8b 00                	mov    (%eax),%eax
f01325ed:	eb 05                	jmp    f01325f4 <alloc_block_NF+0x1d0>
f01325ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01325f4:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01325f9:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01325fe:	85 c0                	test   %eax,%eax
f0132600:	0f 85 3e fe ff ff    	jne    f0132444 <alloc_block_NF+0x20>
f0132606:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013260a:	0f 85 34 fe ff ff    	jne    f0132444 <alloc_block_NF+0x20>
f0132610:	e9 d5 03 00 00       	jmp    f01329ea <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132615:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f013261a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013261d:	e9 b1 01 00 00       	jmp    f01327d3 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132622:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132625:	8b 50 08             	mov    0x8(%eax),%edx
f0132628:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f013262d:	39 c2                	cmp    %eax,%edx
f013262f:	0f 82 96 01 00 00    	jb     f01327cb <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132638:	8b 40 0c             	mov    0xc(%eax),%eax
f013263b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013263e:	0f 82 87 01 00 00    	jb     f01327cb <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132647:	8b 40 0c             	mov    0xc(%eax),%eax
f013264a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013264d:	0f 85 95 00 00 00    	jne    f01326e8 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132653:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132657:	75 17                	jne    f0132670 <alloc_block_NF+0x24c>
f0132659:	83 ec 04             	sub    $0x4,%esp
f013265c:	68 30 d6 13 f0       	push   $0xf013d630
f0132661:	68 fc 00 00 00       	push   $0xfc
f0132666:	68 87 d5 13 f0       	push   $0xf013d587
f013266b:	e8 95 db fc ff       	call   f0100205 <_panic>
f0132670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132673:	8b 00                	mov    (%eax),%eax
f0132675:	85 c0                	test   %eax,%eax
f0132677:	74 10                	je     f0132689 <alloc_block_NF+0x265>
f0132679:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013267c:	8b 00                	mov    (%eax),%eax
f013267e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132681:	8b 52 04             	mov    0x4(%edx),%edx
f0132684:	89 50 04             	mov    %edx,0x4(%eax)
f0132687:	eb 0b                	jmp    f0132694 <alloc_block_NF+0x270>
f0132689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013268c:	8b 40 04             	mov    0x4(%eax),%eax
f013268f:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132694:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132697:	8b 40 04             	mov    0x4(%eax),%eax
f013269a:	85 c0                	test   %eax,%eax
f013269c:	74 0f                	je     f01326ad <alloc_block_NF+0x289>
f013269e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326a1:	8b 40 04             	mov    0x4(%eax),%eax
f01326a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01326a7:	8b 12                	mov    (%edx),%edx
f01326a9:	89 10                	mov    %edx,(%eax)
f01326ab:	eb 0a                	jmp    f01326b7 <alloc_block_NF+0x293>
f01326ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326b0:	8b 00                	mov    (%eax),%eax
f01326b2:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01326b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01326c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01326ca:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01326cf:	48                   	dec    %eax
f01326d0:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					   svaOfNF = point->sva;
f01326d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326d8:	8b 40 08             	mov    0x8(%eax),%eax
f01326db:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   return  point;
f01326e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326e3:	e9 07 03 00 00       	jmp    f01329ef <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01326e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326eb:	8b 40 0c             	mov    0xc(%eax),%eax
f01326ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01326f1:	0f 86 d4 00 00 00    	jbe    f01327cb <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01326f7:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01326fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01326ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132702:	8b 50 08             	mov    0x8(%eax),%edx
f0132705:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132708:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013270b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013270e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132711:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132714:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132718:	75 17                	jne    f0132731 <alloc_block_NF+0x30d>
f013271a:	83 ec 04             	sub    $0x4,%esp
f013271d:	68 30 d6 13 f0       	push   $0xf013d630
f0132722:	68 04 01 00 00       	push   $0x104
f0132727:	68 87 d5 13 f0       	push   $0xf013d587
f013272c:	e8 d4 da fc ff       	call   f0100205 <_panic>
f0132731:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132734:	8b 00                	mov    (%eax),%eax
f0132736:	85 c0                	test   %eax,%eax
f0132738:	74 10                	je     f013274a <alloc_block_NF+0x326>
f013273a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013273d:	8b 00                	mov    (%eax),%eax
f013273f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132742:	8b 52 04             	mov    0x4(%edx),%edx
f0132745:	89 50 04             	mov    %edx,0x4(%eax)
f0132748:	eb 0b                	jmp    f0132755 <alloc_block_NF+0x331>
f013274a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013274d:	8b 40 04             	mov    0x4(%eax),%eax
f0132750:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132755:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132758:	8b 40 04             	mov    0x4(%eax),%eax
f013275b:	85 c0                	test   %eax,%eax
f013275d:	74 0f                	je     f013276e <alloc_block_NF+0x34a>
f013275f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132762:	8b 40 04             	mov    0x4(%eax),%eax
f0132765:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132768:	8b 12                	mov    (%edx),%edx
f013276a:	89 10                	mov    %edx,(%eax)
f013276c:	eb 0a                	jmp    f0132778 <alloc_block_NF+0x354>
f013276e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132771:	8b 00                	mov    (%eax),%eax
f0132773:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132778:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013277b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132781:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132784:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013278b:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132790:	48                   	dec    %eax
f0132791:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					   svaOfNF = ReturnedBlock->sva;
f0132796:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132799:	8b 40 08             	mov    0x8(%eax),%eax
f013279c:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   point->sva += size;
f01327a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327a4:	8b 50 08             	mov    0x8(%eax),%edx
f01327a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01327aa:	01 c2                	add    %eax,%edx
f01327ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327af:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f01327b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327b5:	8b 40 0c             	mov    0xc(%eax),%eax
f01327b8:	2b 45 08             	sub    0x8(%ebp),%eax
f01327bb:	89 c2                	mov    %eax,%edx
f01327bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c0:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01327c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327c6:	e9 24 02 00 00       	jmp    f01329ef <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01327cb:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01327d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327d7:	74 07                	je     f01327e0 <alloc_block_NF+0x3bc>
f01327d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327dc:	8b 00                	mov    (%eax),%eax
f01327de:	eb 05                	jmp    f01327e5 <alloc_block_NF+0x3c1>
f01327e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01327e5:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01327ea:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01327ef:	85 c0                	test   %eax,%eax
f01327f1:	0f 85 2b fe ff ff    	jne    f0132622 <alloc_block_NF+0x1fe>
f01327f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327fb:	0f 85 21 fe ff ff    	jne    f0132622 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132801:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132806:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132809:	e9 ae 01 00 00       	jmp    f01329bc <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f013280e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132811:	8b 50 08             	mov    0x8(%eax),%edx
f0132814:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f0132819:	39 c2                	cmp    %eax,%edx
f013281b:	0f 83 93 01 00 00    	jae    f01329b4 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132821:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132824:	8b 40 0c             	mov    0xc(%eax),%eax
f0132827:	3b 45 08             	cmp    0x8(%ebp),%eax
f013282a:	0f 82 84 01 00 00    	jb     f01329b4 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132830:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132833:	8b 40 0c             	mov    0xc(%eax),%eax
f0132836:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132839:	0f 85 95 00 00 00    	jne    f01328d4 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f013283f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132843:	75 17                	jne    f013285c <alloc_block_NF+0x438>
f0132845:	83 ec 04             	sub    $0x4,%esp
f0132848:	68 30 d6 13 f0       	push   $0xf013d630
f013284d:	68 14 01 00 00       	push   $0x114
f0132852:	68 87 d5 13 f0       	push   $0xf013d587
f0132857:	e8 a9 d9 fc ff       	call   f0100205 <_panic>
f013285c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013285f:	8b 00                	mov    (%eax),%eax
f0132861:	85 c0                	test   %eax,%eax
f0132863:	74 10                	je     f0132875 <alloc_block_NF+0x451>
f0132865:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132868:	8b 00                	mov    (%eax),%eax
f013286a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013286d:	8b 52 04             	mov    0x4(%edx),%edx
f0132870:	89 50 04             	mov    %edx,0x4(%eax)
f0132873:	eb 0b                	jmp    f0132880 <alloc_block_NF+0x45c>
f0132875:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132878:	8b 40 04             	mov    0x4(%eax),%eax
f013287b:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132880:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132883:	8b 40 04             	mov    0x4(%eax),%eax
f0132886:	85 c0                	test   %eax,%eax
f0132888:	74 0f                	je     f0132899 <alloc_block_NF+0x475>
f013288a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013288d:	8b 40 04             	mov    0x4(%eax),%eax
f0132890:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132893:	8b 12                	mov    (%edx),%edx
f0132895:	89 10                	mov    %edx,(%eax)
f0132897:	eb 0a                	jmp    f01328a3 <alloc_block_NF+0x47f>
f0132899:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013289c:	8b 00                	mov    (%eax),%eax
f013289e:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01328a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328b6:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01328bb:	48                   	dec    %eax
f01328bc:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					   svaOfNF = point->sva;
f01328c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328c4:	8b 40 08             	mov    0x8(%eax),%eax
f01328c7:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   return  point;
f01328cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328cf:	e9 1b 01 00 00       	jmp    f01329ef <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01328d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328d7:	8b 40 0c             	mov    0xc(%eax),%eax
f01328da:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328dd:	0f 86 d1 00 00 00    	jbe    f01329b4 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01328e3:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01328e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f01328eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328ee:	8b 50 08             	mov    0x8(%eax),%edx
f01328f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01328f4:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01328f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01328fa:	8b 55 08             	mov    0x8(%ebp),%edx
f01328fd:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132900:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132904:	75 17                	jne    f013291d <alloc_block_NF+0x4f9>
f0132906:	83 ec 04             	sub    $0x4,%esp
f0132909:	68 30 d6 13 f0       	push   $0xf013d630
f013290e:	68 1c 01 00 00       	push   $0x11c
f0132913:	68 87 d5 13 f0       	push   $0xf013d587
f0132918:	e8 e8 d8 fc ff       	call   f0100205 <_panic>
f013291d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132920:	8b 00                	mov    (%eax),%eax
f0132922:	85 c0                	test   %eax,%eax
f0132924:	74 10                	je     f0132936 <alloc_block_NF+0x512>
f0132926:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132929:	8b 00                	mov    (%eax),%eax
f013292b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013292e:	8b 52 04             	mov    0x4(%edx),%edx
f0132931:	89 50 04             	mov    %edx,0x4(%eax)
f0132934:	eb 0b                	jmp    f0132941 <alloc_block_NF+0x51d>
f0132936:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132939:	8b 40 04             	mov    0x4(%eax),%eax
f013293c:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132941:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132944:	8b 40 04             	mov    0x4(%eax),%eax
f0132947:	85 c0                	test   %eax,%eax
f0132949:	74 0f                	je     f013295a <alloc_block_NF+0x536>
f013294b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013294e:	8b 40 04             	mov    0x4(%eax),%eax
f0132951:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132954:	8b 12                	mov    (%edx),%edx
f0132956:	89 10                	mov    %edx,(%eax)
f0132958:	eb 0a                	jmp    f0132964 <alloc_block_NF+0x540>
f013295a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013295d:	8b 00                	mov    (%eax),%eax
f013295f:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132964:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132967:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013296d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132970:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132977:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f013297c:	48                   	dec    %eax
f013297d:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					   svaOfNF = ReturnedBlock->sva;
f0132982:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132985:	8b 40 08             	mov    0x8(%eax),%eax
f0132988:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   point->sva += size;
f013298d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132990:	8b 50 08             	mov    0x8(%eax),%edx
f0132993:	8b 45 08             	mov    0x8(%ebp),%eax
f0132996:	01 c2                	add    %eax,%edx
f0132998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013299b:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f013299e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a1:	8b 40 0c             	mov    0xc(%eax),%eax
f01329a4:	2b 45 08             	sub    0x8(%ebp),%eax
f01329a7:	89 c2                	mov    %eax,%edx
f01329a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ac:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01329af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329b2:	eb 3b                	jmp    f01329ef <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01329b4:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01329b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01329bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329c0:	74 07                	je     f01329c9 <alloc_block_NF+0x5a5>
f01329c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329c5:	8b 00                	mov    (%eax),%eax
f01329c7:	eb 05                	jmp    f01329ce <alloc_block_NF+0x5aa>
f01329c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01329ce:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01329d3:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01329d8:	85 c0                	test   %eax,%eax
f01329da:	0f 85 2e fe ff ff    	jne    f013280e <alloc_block_NF+0x3ea>
f01329e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329e4:	0f 85 24 fe ff ff    	jne    f013280e <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f01329ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01329ef:	c9                   	leave  
f01329f0:	c3                   	ret    

f01329f1 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f01329f1:	55                   	push   %ebp
f01329f2:	89 e5                	mov    %esp,%ebp
f01329f4:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f01329f7:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f01329fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f01329ff:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f0132a04:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132a07:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132a0c:	85 c0                	test   %eax,%eax
f0132a0e:	74 14                	je     f0132a24 <insert_sorted_with_merge_freeList+0x33>
f0132a10:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a13:	8b 50 08             	mov    0x8(%eax),%edx
f0132a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a19:	8b 40 08             	mov    0x8(%eax),%eax
f0132a1c:	39 c2                	cmp    %eax,%edx
f0132a1e:	0f 87 9b 01 00 00    	ja     f0132bbf <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132a24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a28:	75 17                	jne    f0132a41 <insert_sorted_with_merge_freeList+0x50>
f0132a2a:	83 ec 04             	sub    $0x4,%esp
f0132a2d:	68 64 d5 13 f0       	push   $0xf013d564
f0132a32:	68 38 01 00 00       	push   $0x138
f0132a37:	68 87 d5 13 f0       	push   $0xf013d587
f0132a3c:	e8 c4 d7 fc ff       	call   f0100205 <_panic>
f0132a41:	8b 15 24 26 78 f0    	mov    0xf0782624,%edx
f0132a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a4a:	89 10                	mov    %edx,(%eax)
f0132a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a4f:	8b 00                	mov    (%eax),%eax
f0132a51:	85 c0                	test   %eax,%eax
f0132a53:	74 0d                	je     f0132a62 <insert_sorted_with_merge_freeList+0x71>
f0132a55:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132a5a:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a5d:	89 50 04             	mov    %edx,0x4(%eax)
f0132a60:	eb 08                	jmp    f0132a6a <insert_sorted_with_merge_freeList+0x79>
f0132a62:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a65:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132a6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a6d:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132a72:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a75:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a7c:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132a81:	40                   	inc    %eax
f0132a82:	a3 30 26 78 f0       	mov    %eax,0xf0782630
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132a87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132a8b:	0f 84 a8 06 00 00    	je     f0133139 <insert_sorted_with_merge_freeList+0x748>
f0132a91:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a94:	8b 50 08             	mov    0x8(%eax),%edx
f0132a97:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a9a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a9d:	01 c2                	add    %eax,%edx
f0132a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132aa2:	8b 40 08             	mov    0x8(%eax),%eax
f0132aa5:	39 c2                	cmp    %eax,%edx
f0132aa7:	0f 85 8c 06 00 00    	jne    f0133139 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ab0:	8b 50 0c             	mov    0xc(%eax),%edx
f0132ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ab6:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ab9:	01 c2                	add    %eax,%edx
f0132abb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132abe:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132ac1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132ac5:	75 17                	jne    f0132ade <insert_sorted_with_merge_freeList+0xed>
f0132ac7:	83 ec 04             	sub    $0x4,%esp
f0132aca:	68 30 d6 13 f0       	push   $0xf013d630
f0132acf:	68 3c 01 00 00       	push   $0x13c
f0132ad4:	68 87 d5 13 f0       	push   $0xf013d587
f0132ad9:	e8 27 d7 fc ff       	call   f0100205 <_panic>
f0132ade:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ae1:	8b 00                	mov    (%eax),%eax
f0132ae3:	85 c0                	test   %eax,%eax
f0132ae5:	74 10                	je     f0132af7 <insert_sorted_with_merge_freeList+0x106>
f0132ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132aea:	8b 00                	mov    (%eax),%eax
f0132aec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132aef:	8b 52 04             	mov    0x4(%edx),%edx
f0132af2:	89 50 04             	mov    %edx,0x4(%eax)
f0132af5:	eb 0b                	jmp    f0132b02 <insert_sorted_with_merge_freeList+0x111>
f0132af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132afa:	8b 40 04             	mov    0x4(%eax),%eax
f0132afd:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b05:	8b 40 04             	mov    0x4(%eax),%eax
f0132b08:	85 c0                	test   %eax,%eax
f0132b0a:	74 0f                	je     f0132b1b <insert_sorted_with_merge_freeList+0x12a>
f0132b0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b0f:	8b 40 04             	mov    0x4(%eax),%eax
f0132b12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132b15:	8b 12                	mov    (%edx),%edx
f0132b17:	89 10                	mov    %edx,(%eax)
f0132b19:	eb 0a                	jmp    f0132b25 <insert_sorted_with_merge_freeList+0x134>
f0132b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b1e:	8b 00                	mov    (%eax),%eax
f0132b20:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b38:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132b3d:	48                   	dec    %eax
f0132b3e:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			head->size = 0;
f0132b43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b46:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b50:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132b57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132b5b:	75 17                	jne    f0132b74 <insert_sorted_with_merge_freeList+0x183>
f0132b5d:	83 ec 04             	sub    $0x4,%esp
f0132b60:	68 64 d5 13 f0       	push   $0xf013d564
f0132b65:	68 3f 01 00 00       	push   $0x13f
f0132b6a:	68 87 d5 13 f0       	push   $0xf013d587
f0132b6f:	e8 91 d6 fc ff       	call   f0100205 <_panic>
f0132b74:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b7d:	89 10                	mov    %edx,(%eax)
f0132b7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b82:	8b 00                	mov    (%eax),%eax
f0132b84:	85 c0                	test   %eax,%eax
f0132b86:	74 0d                	je     f0132b95 <insert_sorted_with_merge_freeList+0x1a4>
f0132b88:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132b8d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132b90:	89 50 04             	mov    %edx,0x4(%eax)
f0132b93:	eb 08                	jmp    f0132b9d <insert_sorted_with_merge_freeList+0x1ac>
f0132b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b98:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ba0:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132ba5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ba8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132baf:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132bb4:	40                   	inc    %eax
f0132bb5:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132bba:	e9 7a 05 00 00       	jmp    f0133139 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bc2:	8b 50 08             	mov    0x8(%eax),%edx
f0132bc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132bc8:	8b 40 08             	mov    0x8(%eax),%eax
f0132bcb:	39 c2                	cmp    %eax,%edx
f0132bcd:	0f 82 14 01 00 00    	jb     f0132ce7 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132bd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132bd6:	8b 50 08             	mov    0x8(%eax),%edx
f0132bd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132bdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bdf:	01 c2                	add    %eax,%edx
f0132be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132be4:	8b 40 08             	mov    0x8(%eax),%eax
f0132be7:	39 c2                	cmp    %eax,%edx
f0132be9:	0f 85 90 00 00 00    	jne    f0132c7f <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132bf2:	8b 50 0c             	mov    0xc(%eax),%edx
f0132bf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bf8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bfb:	01 c2                	add    %eax,%edx
f0132bfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132c00:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c06:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132c0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c10:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132c17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132c1b:	75 17                	jne    f0132c34 <insert_sorted_with_merge_freeList+0x243>
f0132c1d:	83 ec 04             	sub    $0x4,%esp
f0132c20:	68 64 d5 13 f0       	push   $0xf013d564
f0132c25:	68 49 01 00 00       	push   $0x149
f0132c2a:	68 87 d5 13 f0       	push   $0xf013d587
f0132c2f:	e8 d1 d5 fc ff       	call   f0100205 <_panic>
f0132c34:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132c3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c3d:	89 10                	mov    %edx,(%eax)
f0132c3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c42:	8b 00                	mov    (%eax),%eax
f0132c44:	85 c0                	test   %eax,%eax
f0132c46:	74 0d                	je     f0132c55 <insert_sorted_with_merge_freeList+0x264>
f0132c48:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132c4d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c50:	89 50 04             	mov    %edx,0x4(%eax)
f0132c53:	eb 08                	jmp    f0132c5d <insert_sorted_with_merge_freeList+0x26c>
f0132c55:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c58:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132c5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c60:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c68:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c6f:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132c74:	40                   	inc    %eax
f0132c75:	a3 64 26 78 f0       	mov    %eax,0xf0782664
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132c7a:	e9 bb 04 00 00       	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132c7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132c83:	75 17                	jne    f0132c9c <insert_sorted_with_merge_freeList+0x2ab>
f0132c85:	83 ec 04             	sub    $0x4,%esp
f0132c88:	68 d8 d5 13 f0       	push   $0xf013d5d8
f0132c8d:	68 4c 01 00 00       	push   $0x14c
f0132c92:	68 87 d5 13 f0       	push   $0xf013d587
f0132c97:	e8 69 d5 fc ff       	call   f0100205 <_panic>
f0132c9c:	8b 15 28 26 78 f0    	mov    0xf0782628,%edx
f0132ca2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ca5:	89 50 04             	mov    %edx,0x4(%eax)
f0132ca8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cab:	8b 40 04             	mov    0x4(%eax),%eax
f0132cae:	85 c0                	test   %eax,%eax
f0132cb0:	74 0c                	je     f0132cbe <insert_sorted_with_merge_freeList+0x2cd>
f0132cb2:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f0132cb7:	8b 55 08             	mov    0x8(%ebp),%edx
f0132cba:	89 10                	mov    %edx,(%eax)
f0132cbc:	eb 08                	jmp    f0132cc6 <insert_sorted_with_merge_freeList+0x2d5>
f0132cbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cc1:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cc9:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132cce:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cd1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132cd7:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132cdc:	40                   	inc    %eax
f0132cdd:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132ce2:	e9 53 04 00 00       	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132ce7:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132cef:	e9 15 04 00 00       	jmp    f0133109 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132cf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cf7:	8b 00                	mov    (%eax),%eax
f0132cf9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132cfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cff:	8b 50 08             	mov    0x8(%eax),%edx
f0132d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d05:	8b 40 08             	mov    0x8(%eax),%eax
f0132d08:	39 c2                	cmp    %eax,%edx
f0132d0a:	0f 86 f1 03 00 00    	jbe    f0133101 <insert_sorted_with_merge_freeList+0x710>
f0132d10:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d13:	8b 50 08             	mov    0x8(%eax),%edx
f0132d16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d19:	8b 40 08             	mov    0x8(%eax),%eax
f0132d1c:	39 c2                	cmp    %eax,%edx
f0132d1e:	0f 83 dd 03 00 00    	jae    f0133101 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d27:	8b 50 08             	mov    0x8(%eax),%edx
f0132d2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d2d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d30:	01 c2                	add    %eax,%edx
f0132d32:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d35:	8b 40 08             	mov    0x8(%eax),%eax
f0132d38:	39 c2                	cmp    %eax,%edx
f0132d3a:	0f 85 b9 01 00 00    	jne    f0132ef9 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132d40:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d43:	8b 50 08             	mov    0x8(%eax),%edx
f0132d46:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d49:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d4c:	01 c2                	add    %eax,%edx
f0132d4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d51:	8b 40 08             	mov    0x8(%eax),%eax
f0132d54:	39 c2                	cmp    %eax,%edx
f0132d56:	0f 85 0d 01 00 00    	jne    f0132e69 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d5f:	8b 50 0c             	mov    0xc(%eax),%edx
f0132d62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d65:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d68:	01 c2                	add    %eax,%edx
f0132d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d6d:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132d70:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132d74:	75 17                	jne    f0132d8d <insert_sorted_with_merge_freeList+0x39c>
f0132d76:	83 ec 04             	sub    $0x4,%esp
f0132d79:	68 30 d6 13 f0       	push   $0xf013d630
f0132d7e:	68 5c 01 00 00       	push   $0x15c
f0132d83:	68 87 d5 13 f0       	push   $0xf013d587
f0132d88:	e8 78 d4 fc ff       	call   f0100205 <_panic>
f0132d8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d90:	8b 00                	mov    (%eax),%eax
f0132d92:	85 c0                	test   %eax,%eax
f0132d94:	74 10                	je     f0132da6 <insert_sorted_with_merge_freeList+0x3b5>
f0132d96:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d99:	8b 00                	mov    (%eax),%eax
f0132d9b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132d9e:	8b 52 04             	mov    0x4(%edx),%edx
f0132da1:	89 50 04             	mov    %edx,0x4(%eax)
f0132da4:	eb 0b                	jmp    f0132db1 <insert_sorted_with_merge_freeList+0x3c0>
f0132da6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132da9:	8b 40 04             	mov    0x4(%eax),%eax
f0132dac:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132db1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132db4:	8b 40 04             	mov    0x4(%eax),%eax
f0132db7:	85 c0                	test   %eax,%eax
f0132db9:	74 0f                	je     f0132dca <insert_sorted_with_merge_freeList+0x3d9>
f0132dbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dbe:	8b 40 04             	mov    0x4(%eax),%eax
f0132dc1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132dc4:	8b 12                	mov    (%edx),%edx
f0132dc6:	89 10                	mov    %edx,(%eax)
f0132dc8:	eb 0a                	jmp    f0132dd4 <insert_sorted_with_merge_freeList+0x3e3>
f0132dca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dcd:	8b 00                	mov    (%eax),%eax
f0132dcf:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132dd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dd7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ddd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132de0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132de7:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132dec:	48                   	dec    %eax
f0132ded:	a3 30 26 78 f0       	mov    %eax,0xf0782630
						nextBlock->sva = 0;
f0132df2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132df5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132dfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132e06:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132e0a:	75 17                	jne    f0132e23 <insert_sorted_with_merge_freeList+0x432>
f0132e0c:	83 ec 04             	sub    $0x4,%esp
f0132e0f:	68 64 d5 13 f0       	push   $0xf013d564
f0132e14:	68 5f 01 00 00       	push   $0x15f
f0132e19:	68 87 d5 13 f0       	push   $0xf013d587
f0132e1e:	e8 e2 d3 fc ff       	call   f0100205 <_panic>
f0132e23:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132e29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e2c:	89 10                	mov    %edx,(%eax)
f0132e2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e31:	8b 00                	mov    (%eax),%eax
f0132e33:	85 c0                	test   %eax,%eax
f0132e35:	74 0d                	je     f0132e44 <insert_sorted_with_merge_freeList+0x453>
f0132e37:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132e3c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132e3f:	89 50 04             	mov    %edx,0x4(%eax)
f0132e42:	eb 08                	jmp    f0132e4c <insert_sorted_with_merge_freeList+0x45b>
f0132e44:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e47:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e4f:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132e54:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e57:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e5e:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132e63:	40                   	inc    %eax
f0132e64:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					}
					currentBlock->size += blockToInsert->size;
f0132e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e6c:	8b 50 0c             	mov    0xc(%eax),%edx
f0132e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e72:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e75:	01 c2                	add    %eax,%edx
f0132e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e7a:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e80:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132e87:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e8a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132e91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e95:	75 17                	jne    f0132eae <insert_sorted_with_merge_freeList+0x4bd>
f0132e97:	83 ec 04             	sub    $0x4,%esp
f0132e9a:	68 64 d5 13 f0       	push   $0xf013d564
f0132e9f:	68 64 01 00 00       	push   $0x164
f0132ea4:	68 87 d5 13 f0       	push   $0xf013d587
f0132ea9:	e8 57 d3 fc ff       	call   f0100205 <_panic>
f0132eae:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132eb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eb7:	89 10                	mov    %edx,(%eax)
f0132eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ebc:	8b 00                	mov    (%eax),%eax
f0132ebe:	85 c0                	test   %eax,%eax
f0132ec0:	74 0d                	je     f0132ecf <insert_sorted_with_merge_freeList+0x4de>
f0132ec2:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132ec7:	8b 55 08             	mov    0x8(%ebp),%edx
f0132eca:	89 50 04             	mov    %edx,0x4(%eax)
f0132ecd:	eb 08                	jmp    f0132ed7 <insert_sorted_with_merge_freeList+0x4e6>
f0132ecf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed2:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132ed7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eda:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132edf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ee2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ee9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132eee:	40                   	inc    %eax
f0132eef:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					break;
f0132ef4:	e9 41 02 00 00       	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132ef9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132efc:	8b 50 08             	mov    0x8(%eax),%edx
f0132eff:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f02:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f05:	01 c2                	add    %eax,%edx
f0132f07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f0a:	8b 40 08             	mov    0x8(%eax),%eax
f0132f0d:	39 c2                	cmp    %eax,%edx
f0132f0f:	0f 85 7c 01 00 00    	jne    f0133091 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132f15:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132f19:	74 06                	je     f0132f21 <insert_sorted_with_merge_freeList+0x530>
f0132f1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f1f:	75 17                	jne    f0132f38 <insert_sorted_with_merge_freeList+0x547>
f0132f21:	83 ec 04             	sub    $0x4,%esp
f0132f24:	68 a0 d5 13 f0       	push   $0xf013d5a0
f0132f29:	68 69 01 00 00       	push   $0x169
f0132f2e:	68 87 d5 13 f0       	push   $0xf013d587
f0132f33:	e8 cd d2 fc ff       	call   f0100205 <_panic>
f0132f38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f3b:	8b 50 04             	mov    0x4(%eax),%edx
f0132f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f41:	89 50 04             	mov    %edx,0x4(%eax)
f0132f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f47:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f4a:	89 10                	mov    %edx,(%eax)
f0132f4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f4f:	8b 40 04             	mov    0x4(%eax),%eax
f0132f52:	85 c0                	test   %eax,%eax
f0132f54:	74 0d                	je     f0132f63 <insert_sorted_with_merge_freeList+0x572>
f0132f56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f59:	8b 40 04             	mov    0x4(%eax),%eax
f0132f5c:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f5f:	89 10                	mov    %edx,(%eax)
f0132f61:	eb 08                	jmp    f0132f6b <insert_sorted_with_merge_freeList+0x57a>
f0132f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f66:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132f6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f6e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f71:	89 50 04             	mov    %edx,0x4(%eax)
f0132f74:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132f79:	40                   	inc    %eax
f0132f7a:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					blockToInsert->size += nextBlock->size;
f0132f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f82:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f88:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f8b:	01 c2                	add    %eax,%edx
f0132f8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f90:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132f93:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132f97:	75 17                	jne    f0132fb0 <insert_sorted_with_merge_freeList+0x5bf>
f0132f99:	83 ec 04             	sub    $0x4,%esp
f0132f9c:	68 30 d6 13 f0       	push   $0xf013d630
f0132fa1:	68 6b 01 00 00       	push   $0x16b
f0132fa6:	68 87 d5 13 f0       	push   $0xf013d587
f0132fab:	e8 55 d2 fc ff       	call   f0100205 <_panic>
f0132fb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fb3:	8b 00                	mov    (%eax),%eax
f0132fb5:	85 c0                	test   %eax,%eax
f0132fb7:	74 10                	je     f0132fc9 <insert_sorted_with_merge_freeList+0x5d8>
f0132fb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fbc:	8b 00                	mov    (%eax),%eax
f0132fbe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132fc1:	8b 52 04             	mov    0x4(%edx),%edx
f0132fc4:	89 50 04             	mov    %edx,0x4(%eax)
f0132fc7:	eb 0b                	jmp    f0132fd4 <insert_sorted_with_merge_freeList+0x5e3>
f0132fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fcc:	8b 40 04             	mov    0x4(%eax),%eax
f0132fcf:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132fd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fd7:	8b 40 04             	mov    0x4(%eax),%eax
f0132fda:	85 c0                	test   %eax,%eax
f0132fdc:	74 0f                	je     f0132fed <insert_sorted_with_merge_freeList+0x5fc>
f0132fde:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fe1:	8b 40 04             	mov    0x4(%eax),%eax
f0132fe4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132fe7:	8b 12                	mov    (%edx),%edx
f0132fe9:	89 10                	mov    %edx,(%eax)
f0132feb:	eb 0a                	jmp    f0132ff7 <insert_sorted_with_merge_freeList+0x606>
f0132fed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ff0:	8b 00                	mov    (%eax),%eax
f0132ff2:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132ff7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ffa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133000:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133003:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013300a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f013300f:	48                   	dec    %eax
f0133010:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					nextBlock->sva = 0;
f0133015:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133018:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f013301f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133022:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0133029:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013302d:	75 17                	jne    f0133046 <insert_sorted_with_merge_freeList+0x655>
f013302f:	83 ec 04             	sub    $0x4,%esp
f0133032:	68 64 d5 13 f0       	push   $0xf013d564
f0133037:	68 6e 01 00 00       	push   $0x16e
f013303c:	68 87 d5 13 f0       	push   $0xf013d587
f0133041:	e8 bf d1 fc ff       	call   f0100205 <_panic>
f0133046:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f013304c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013304f:	89 10                	mov    %edx,(%eax)
f0133051:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133054:	8b 00                	mov    (%eax),%eax
f0133056:	85 c0                	test   %eax,%eax
f0133058:	74 0d                	je     f0133067 <insert_sorted_with_merge_freeList+0x676>
f013305a:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f013305f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133062:	89 50 04             	mov    %edx,0x4(%eax)
f0133065:	eb 08                	jmp    f013306f <insert_sorted_with_merge_freeList+0x67e>
f0133067:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013306a:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f013306f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133072:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0133077:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013307a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133081:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0133086:	40                   	inc    %eax
f0133087:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					break;
f013308c:	e9 a9 00 00 00       	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133091:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133095:	74 06                	je     f013309d <insert_sorted_with_merge_freeList+0x6ac>
f0133097:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013309b:	75 17                	jne    f01330b4 <insert_sorted_with_merge_freeList+0x6c3>
f013309d:	83 ec 04             	sub    $0x4,%esp
f01330a0:	68 fc d5 13 f0       	push   $0xf013d5fc
f01330a5:	68 73 01 00 00       	push   $0x173
f01330aa:	68 87 d5 13 f0       	push   $0xf013d587
f01330af:	e8 51 d1 fc ff       	call   f0100205 <_panic>
f01330b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330b7:	8b 10                	mov    (%eax),%edx
f01330b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01330bc:	89 10                	mov    %edx,(%eax)
f01330be:	8b 45 08             	mov    0x8(%ebp),%eax
f01330c1:	8b 00                	mov    (%eax),%eax
f01330c3:	85 c0                	test   %eax,%eax
f01330c5:	74 0b                	je     f01330d2 <insert_sorted_with_merge_freeList+0x6e1>
f01330c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330ca:	8b 00                	mov    (%eax),%eax
f01330cc:	8b 55 08             	mov    0x8(%ebp),%edx
f01330cf:	89 50 04             	mov    %edx,0x4(%eax)
f01330d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330d5:	8b 55 08             	mov    0x8(%ebp),%edx
f01330d8:	89 10                	mov    %edx,(%eax)
f01330da:	8b 45 08             	mov    0x8(%ebp),%eax
f01330dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01330e0:	89 50 04             	mov    %edx,0x4(%eax)
f01330e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01330e6:	8b 00                	mov    (%eax),%eax
f01330e8:	85 c0                	test   %eax,%eax
f01330ea:	75 08                	jne    f01330f4 <insert_sorted_with_merge_freeList+0x703>
f01330ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ef:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f01330f4:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01330f9:	40                   	inc    %eax
f01330fa:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					break;
f01330ff:	eb 39                	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133101:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0133106:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013310d:	74 07                	je     f0133116 <insert_sorted_with_merge_freeList+0x725>
f013310f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133112:	8b 00                	mov    (%eax),%eax
f0133114:	eb 05                	jmp    f013311b <insert_sorted_with_merge_freeList+0x72a>
f0133116:	b8 00 00 00 00       	mov    $0x0,%eax
f013311b:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f0133120:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0133125:	85 c0                	test   %eax,%eax
f0133127:	0f 85 c7 fb ff ff    	jne    f0132cf4 <insert_sorted_with_merge_freeList+0x303>
f013312d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133131:	0f 85 bd fb ff ff    	jne    f0132cf4 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133137:	eb 01                	jmp    f013313a <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133139:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013313a:	90                   	nop
f013313b:	c9                   	leave  
f013313c:	c3                   	ret    
f013313d:	66 90                	xchg   %ax,%ax
f013313f:	90                   	nop

f0133140 <__udivdi3>:
f0133140:	55                   	push   %ebp
f0133141:	57                   	push   %edi
f0133142:	56                   	push   %esi
f0133143:	53                   	push   %ebx
f0133144:	83 ec 1c             	sub    $0x1c,%esp
f0133147:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013314b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013314f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133153:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0133157:	89 ca                	mov    %ecx,%edx
f0133159:	89 f8                	mov    %edi,%eax
f013315b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013315f:	85 f6                	test   %esi,%esi
f0133161:	75 2d                	jne    f0133190 <__udivdi3+0x50>
f0133163:	39 cf                	cmp    %ecx,%edi
f0133165:	77 65                	ja     f01331cc <__udivdi3+0x8c>
f0133167:	89 fd                	mov    %edi,%ebp
f0133169:	85 ff                	test   %edi,%edi
f013316b:	75 0b                	jne    f0133178 <__udivdi3+0x38>
f013316d:	b8 01 00 00 00       	mov    $0x1,%eax
f0133172:	31 d2                	xor    %edx,%edx
f0133174:	f7 f7                	div    %edi
f0133176:	89 c5                	mov    %eax,%ebp
f0133178:	31 d2                	xor    %edx,%edx
f013317a:	89 c8                	mov    %ecx,%eax
f013317c:	f7 f5                	div    %ebp
f013317e:	89 c1                	mov    %eax,%ecx
f0133180:	89 d8                	mov    %ebx,%eax
f0133182:	f7 f5                	div    %ebp
f0133184:	89 cf                	mov    %ecx,%edi
f0133186:	89 fa                	mov    %edi,%edx
f0133188:	83 c4 1c             	add    $0x1c,%esp
f013318b:	5b                   	pop    %ebx
f013318c:	5e                   	pop    %esi
f013318d:	5f                   	pop    %edi
f013318e:	5d                   	pop    %ebp
f013318f:	c3                   	ret    
f0133190:	39 ce                	cmp    %ecx,%esi
f0133192:	77 28                	ja     f01331bc <__udivdi3+0x7c>
f0133194:	0f bd fe             	bsr    %esi,%edi
f0133197:	83 f7 1f             	xor    $0x1f,%edi
f013319a:	75 40                	jne    f01331dc <__udivdi3+0x9c>
f013319c:	39 ce                	cmp    %ecx,%esi
f013319e:	72 0a                	jb     f01331aa <__udivdi3+0x6a>
f01331a0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01331a4:	0f 87 9e 00 00 00    	ja     f0133248 <__udivdi3+0x108>
f01331aa:	b8 01 00 00 00       	mov    $0x1,%eax
f01331af:	89 fa                	mov    %edi,%edx
f01331b1:	83 c4 1c             	add    $0x1c,%esp
f01331b4:	5b                   	pop    %ebx
f01331b5:	5e                   	pop    %esi
f01331b6:	5f                   	pop    %edi
f01331b7:	5d                   	pop    %ebp
f01331b8:	c3                   	ret    
f01331b9:	8d 76 00             	lea    0x0(%esi),%esi
f01331bc:	31 ff                	xor    %edi,%edi
f01331be:	31 c0                	xor    %eax,%eax
f01331c0:	89 fa                	mov    %edi,%edx
f01331c2:	83 c4 1c             	add    $0x1c,%esp
f01331c5:	5b                   	pop    %ebx
f01331c6:	5e                   	pop    %esi
f01331c7:	5f                   	pop    %edi
f01331c8:	5d                   	pop    %ebp
f01331c9:	c3                   	ret    
f01331ca:	66 90                	xchg   %ax,%ax
f01331cc:	89 d8                	mov    %ebx,%eax
f01331ce:	f7 f7                	div    %edi
f01331d0:	31 ff                	xor    %edi,%edi
f01331d2:	89 fa                	mov    %edi,%edx
f01331d4:	83 c4 1c             	add    $0x1c,%esp
f01331d7:	5b                   	pop    %ebx
f01331d8:	5e                   	pop    %esi
f01331d9:	5f                   	pop    %edi
f01331da:	5d                   	pop    %ebp
f01331db:	c3                   	ret    
f01331dc:	bd 20 00 00 00       	mov    $0x20,%ebp
f01331e1:	89 eb                	mov    %ebp,%ebx
f01331e3:	29 fb                	sub    %edi,%ebx
f01331e5:	89 f9                	mov    %edi,%ecx
f01331e7:	d3 e6                	shl    %cl,%esi
f01331e9:	89 c5                	mov    %eax,%ebp
f01331eb:	88 d9                	mov    %bl,%cl
f01331ed:	d3 ed                	shr    %cl,%ebp
f01331ef:	89 e9                	mov    %ebp,%ecx
f01331f1:	09 f1                	or     %esi,%ecx
f01331f3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01331f7:	89 f9                	mov    %edi,%ecx
f01331f9:	d3 e0                	shl    %cl,%eax
f01331fb:	89 c5                	mov    %eax,%ebp
f01331fd:	89 d6                	mov    %edx,%esi
f01331ff:	88 d9                	mov    %bl,%cl
f0133201:	d3 ee                	shr    %cl,%esi
f0133203:	89 f9                	mov    %edi,%ecx
f0133205:	d3 e2                	shl    %cl,%edx
f0133207:	8b 44 24 08          	mov    0x8(%esp),%eax
f013320b:	88 d9                	mov    %bl,%cl
f013320d:	d3 e8                	shr    %cl,%eax
f013320f:	09 c2                	or     %eax,%edx
f0133211:	89 d0                	mov    %edx,%eax
f0133213:	89 f2                	mov    %esi,%edx
f0133215:	f7 74 24 0c          	divl   0xc(%esp)
f0133219:	89 d6                	mov    %edx,%esi
f013321b:	89 c3                	mov    %eax,%ebx
f013321d:	f7 e5                	mul    %ebp
f013321f:	39 d6                	cmp    %edx,%esi
f0133221:	72 19                	jb     f013323c <__udivdi3+0xfc>
f0133223:	74 0b                	je     f0133230 <__udivdi3+0xf0>
f0133225:	89 d8                	mov    %ebx,%eax
f0133227:	31 ff                	xor    %edi,%edi
f0133229:	e9 58 ff ff ff       	jmp    f0133186 <__udivdi3+0x46>
f013322e:	66 90                	xchg   %ax,%ax
f0133230:	8b 54 24 08          	mov    0x8(%esp),%edx
f0133234:	89 f9                	mov    %edi,%ecx
f0133236:	d3 e2                	shl    %cl,%edx
f0133238:	39 c2                	cmp    %eax,%edx
f013323a:	73 e9                	jae    f0133225 <__udivdi3+0xe5>
f013323c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013323f:	31 ff                	xor    %edi,%edi
f0133241:	e9 40 ff ff ff       	jmp    f0133186 <__udivdi3+0x46>
f0133246:	66 90                	xchg   %ax,%ax
f0133248:	31 c0                	xor    %eax,%eax
f013324a:	e9 37 ff ff ff       	jmp    f0133186 <__udivdi3+0x46>
f013324f:	90                   	nop

f0133250 <__umoddi3>:
f0133250:	55                   	push   %ebp
f0133251:	57                   	push   %edi
f0133252:	56                   	push   %esi
f0133253:	53                   	push   %ebx
f0133254:	83 ec 1c             	sub    $0x1c,%esp
f0133257:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013325b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013325f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133263:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133267:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013326b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013326f:	89 f3                	mov    %esi,%ebx
f0133271:	89 fa                	mov    %edi,%edx
f0133273:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133277:	89 34 24             	mov    %esi,(%esp)
f013327a:	85 c0                	test   %eax,%eax
f013327c:	75 1a                	jne    f0133298 <__umoddi3+0x48>
f013327e:	39 f7                	cmp    %esi,%edi
f0133280:	0f 86 a2 00 00 00    	jbe    f0133328 <__umoddi3+0xd8>
f0133286:	89 c8                	mov    %ecx,%eax
f0133288:	89 f2                	mov    %esi,%edx
f013328a:	f7 f7                	div    %edi
f013328c:	89 d0                	mov    %edx,%eax
f013328e:	31 d2                	xor    %edx,%edx
f0133290:	83 c4 1c             	add    $0x1c,%esp
f0133293:	5b                   	pop    %ebx
f0133294:	5e                   	pop    %esi
f0133295:	5f                   	pop    %edi
f0133296:	5d                   	pop    %ebp
f0133297:	c3                   	ret    
f0133298:	39 f0                	cmp    %esi,%eax
f013329a:	0f 87 ac 00 00 00    	ja     f013334c <__umoddi3+0xfc>
f01332a0:	0f bd e8             	bsr    %eax,%ebp
f01332a3:	83 f5 1f             	xor    $0x1f,%ebp
f01332a6:	0f 84 ac 00 00 00    	je     f0133358 <__umoddi3+0x108>
f01332ac:	bf 20 00 00 00       	mov    $0x20,%edi
f01332b1:	29 ef                	sub    %ebp,%edi
f01332b3:	89 fe                	mov    %edi,%esi
f01332b5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01332b9:	89 e9                	mov    %ebp,%ecx
f01332bb:	d3 e0                	shl    %cl,%eax
f01332bd:	89 d7                	mov    %edx,%edi
f01332bf:	89 f1                	mov    %esi,%ecx
f01332c1:	d3 ef                	shr    %cl,%edi
f01332c3:	09 c7                	or     %eax,%edi
f01332c5:	89 e9                	mov    %ebp,%ecx
f01332c7:	d3 e2                	shl    %cl,%edx
f01332c9:	89 14 24             	mov    %edx,(%esp)
f01332cc:	89 d8                	mov    %ebx,%eax
f01332ce:	d3 e0                	shl    %cl,%eax
f01332d0:	89 c2                	mov    %eax,%edx
f01332d2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01332d6:	d3 e0                	shl    %cl,%eax
f01332d8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01332dc:	8b 44 24 08          	mov    0x8(%esp),%eax
f01332e0:	89 f1                	mov    %esi,%ecx
f01332e2:	d3 e8                	shr    %cl,%eax
f01332e4:	09 d0                	or     %edx,%eax
f01332e6:	d3 eb                	shr    %cl,%ebx
f01332e8:	89 da                	mov    %ebx,%edx
f01332ea:	f7 f7                	div    %edi
f01332ec:	89 d3                	mov    %edx,%ebx
f01332ee:	f7 24 24             	mull   (%esp)
f01332f1:	89 c6                	mov    %eax,%esi
f01332f3:	89 d1                	mov    %edx,%ecx
f01332f5:	39 d3                	cmp    %edx,%ebx
f01332f7:	0f 82 87 00 00 00    	jb     f0133384 <__umoddi3+0x134>
f01332fd:	0f 84 91 00 00 00    	je     f0133394 <__umoddi3+0x144>
f0133303:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133307:	29 f2                	sub    %esi,%edx
f0133309:	19 cb                	sbb    %ecx,%ebx
f013330b:	89 d8                	mov    %ebx,%eax
f013330d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133311:	d3 e0                	shl    %cl,%eax
f0133313:	89 e9                	mov    %ebp,%ecx
f0133315:	d3 ea                	shr    %cl,%edx
f0133317:	09 d0                	or     %edx,%eax
f0133319:	89 e9                	mov    %ebp,%ecx
f013331b:	d3 eb                	shr    %cl,%ebx
f013331d:	89 da                	mov    %ebx,%edx
f013331f:	83 c4 1c             	add    $0x1c,%esp
f0133322:	5b                   	pop    %ebx
f0133323:	5e                   	pop    %esi
f0133324:	5f                   	pop    %edi
f0133325:	5d                   	pop    %ebp
f0133326:	c3                   	ret    
f0133327:	90                   	nop
f0133328:	89 fd                	mov    %edi,%ebp
f013332a:	85 ff                	test   %edi,%edi
f013332c:	75 0b                	jne    f0133339 <__umoddi3+0xe9>
f013332e:	b8 01 00 00 00       	mov    $0x1,%eax
f0133333:	31 d2                	xor    %edx,%edx
f0133335:	f7 f7                	div    %edi
f0133337:	89 c5                	mov    %eax,%ebp
f0133339:	89 f0                	mov    %esi,%eax
f013333b:	31 d2                	xor    %edx,%edx
f013333d:	f7 f5                	div    %ebp
f013333f:	89 c8                	mov    %ecx,%eax
f0133341:	f7 f5                	div    %ebp
f0133343:	89 d0                	mov    %edx,%eax
f0133345:	e9 44 ff ff ff       	jmp    f013328e <__umoddi3+0x3e>
f013334a:	66 90                	xchg   %ax,%ax
f013334c:	89 c8                	mov    %ecx,%eax
f013334e:	89 f2                	mov    %esi,%edx
f0133350:	83 c4 1c             	add    $0x1c,%esp
f0133353:	5b                   	pop    %ebx
f0133354:	5e                   	pop    %esi
f0133355:	5f                   	pop    %edi
f0133356:	5d                   	pop    %ebp
f0133357:	c3                   	ret    
f0133358:	3b 04 24             	cmp    (%esp),%eax
f013335b:	72 06                	jb     f0133363 <__umoddi3+0x113>
f013335d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133361:	77 0f                	ja     f0133372 <__umoddi3+0x122>
f0133363:	89 f2                	mov    %esi,%edx
f0133365:	29 f9                	sub    %edi,%ecx
f0133367:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013336b:	89 14 24             	mov    %edx,(%esp)
f013336e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133372:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133376:	8b 14 24             	mov    (%esp),%edx
f0133379:	83 c4 1c             	add    $0x1c,%esp
f013337c:	5b                   	pop    %ebx
f013337d:	5e                   	pop    %esi
f013337e:	5f                   	pop    %edi
f013337f:	5d                   	pop    %ebp
f0133380:	c3                   	ret    
f0133381:	8d 76 00             	lea    0x0(%esi),%esi
f0133384:	2b 04 24             	sub    (%esp),%eax
f0133387:	19 fa                	sbb    %edi,%edx
f0133389:	89 d1                	mov    %edx,%ecx
f013338b:	89 c6                	mov    %eax,%esi
f013338d:	e9 71 ff ff ff       	jmp    f0133303 <__umoddi3+0xb3>
f0133392:	66 90                	xchg   %ax,%ax
f0133394:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133398:	72 ea                	jb     f0133384 <__umoddi3+0x134>
f013339a:	89 d9                	mov    %ebx,%ecx
f013339c:	e9 62 ff ff ff       	jmp    f0133303 <__umoddi3+0xb3>
