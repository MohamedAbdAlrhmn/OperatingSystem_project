
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c ed 88 f0 01 	movl   $0x1,0xf088ed5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 ed 88 f0 01 	movl   $0x1,0xf088ed30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc ee 88 f0       	mov    $0xf088eebc,%edx
f010006a:	b8 9c e1 88 f0       	mov    $0xf088e19c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c e1 88 f0       	push   $0xf088e19c
f010007e:	e8 0e 17 03 00       	call   f0131791 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 ed 88 f0 ff 	movl   $0xffffffff,0xf088ed58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 52 9e 00 00       	call   f0109f00 <env_init>
	idt_init();
f01000ae:	e8 0a b4 00 00       	call   f010b4bd <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 3d df 00 00       	call   f010dff5 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 e0 cd 00 00       	call   f010cea7 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 fc 78 00 00       	call   f01079d3 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 cb cd 00 00       	call   f010cea7 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 fc ff 02 00       	call   f01300f4 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 ed 88 f0 61 	movl   $0x61,0xf088ed28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 ec 88 f0 59 	movl   $0x59,0xf088ecb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 a7 e2 00 00       	call   f010e3d5 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 c7 df 00 00       	call   f010e102 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 a2 df 00 00       	call   f010e0ea <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 c2 df 00 00       	call   f010e11a <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 40 38 13 f0       	push   $0xf0133840
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 6c 38 13 f0       	push   $0xf013386c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 91 38 13 f0       	push   $0xf0133891
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 98 38 13 f0       	push   $0xf0133898
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 28 39 13 f0       	push   $0xf0133928
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 98 38 13 f0       	push   $0xf0133898
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 6d 39 13 f0       	push   $0xf013396d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 72 39 13 f0       	push   $0xf0133972
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 8b 39 13 f0       	push   $0xf013398b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 86 9b 00 00       	call   f0109df5 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 8d 39 13 f0       	push   $0xf013398d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 72 39 13 f0       	push   $0xf0133972
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 8b 39 13 f0       	push   $0xf013398b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 72 39 13 f0       	push   $0xf0133972
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 8b 39 13 f0       	push   $0xf013398b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 a2 39 13 f0       	push   $0xf01339a2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 8b 39 13 f0       	push   $0xf013398b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 e1 88 f0       	mov    %eax,0xf088e1c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 e1 88 f0 b4 	movl   $0x3b4,0xf088e1c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 e1 88 f0 d4 	movl   $0x3d4,0xf088e1c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 e1 88 f0       	mov    %eax,0xf088e1c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 e1 88 f0    	mov    0xf088e1c8,%edx
f0100771:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc e1 88 f0 	mov    0xf088e1cc,%cx
f01007a4:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 e1 88 f0    	mov    0xf088e1c8,%ecx
f010080e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc e1 88 f0 	mov    %dx,0xf088e1cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 e1 88 f0       	mov    0xf088e1c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 e1 88 f0       	mov    0xf088e1c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 67 0f 03 00       	call   f01317c1 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 e1 88 f0    	mov    0xf088e1c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 e1 88 f0    	mov    0xf088e1c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 e1 88 f0    	mov    0xf088e1c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 bd 39 13 f0       	push   $0xf01339bd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 e3 88 f0    	mov    0xf088e3e0,%edx
f0100b03:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 e3 88 f0    	mov    %edx,0xf088e3e0
f0100b1a:	8a 80 e0 e1 88 f0    	mov    -0xf771e20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 e3 88 f0 00 	movl   $0x0,0xf088e3e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 e3 88 f0    	mov    0xf088e3e0,%edx
f0100bf3:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 e3 88 f0    	mov    %edx,0xf088e3e0
f0100c0a:	8a 80 e0 e1 88 f0    	mov    -0xf771e20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 e3 88 f0 00 	movl   $0x0,0xf088e3e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 c9 39 13 f0       	push   $0xf01339c9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 ef 01 03 00       	call   f0130ef5 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 e6 39 13 f0       	push   $0xf01339e6
f0100d4c:	e8 4c 06 03 00       	call   f013139d <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 ec 39 13 f0       	push   $0xf01339ec
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 49 0e 03 00       	call   f0131bd7 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 d3 08 03 00       	call   f01316af <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 ab 07 03 00       	call   f01315a3 <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 c9 08 03 00       	call   f01316e7 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 f1 39 13 f0       	push   $0xf01339f1
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 07 3a 13 f0       	push   $0xf0133a07
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c ed 88 f0 00 	movl   $0x0,0xf088ed5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c ed 88 f0 01 	movl   $0x1,0xf088ed5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c ed 88 f0 02 	movl   $0x2,0xf088ed5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c ed 88 f0 03 	movl   $0x3,0xf088ed5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c ed 88 f0 04 	movl   $0x4,0xf088ed5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 ed 88 f0 01 	movl   $0x1,0xf088ed30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 ed 88 f0 02 	movl   $0x2,0xf088ed30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 ed 88 f0 03 	movl   $0x3,0xf088ed30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 ed 88 f0 04 	movl   $0x4,0xf088ed30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 0c 3a 13 f0       	push   $0xf0133a0c
f0101046:	6a 55                	push   $0x55
f0101048:	68 34 3a 13 f0       	push   $0xf0133a34
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 35 19 f0       	add    $0xf0193544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ae 48 13 f0       	push   $0xf01348ae
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 b7 48 13 f0       	push   $0xf01348b7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 cc 48 13 f0       	push   $0xf01348cc
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 e8 48 13 f0       	push   $0xf01348e8
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 04 49 13 f0       	push   $0xf0134904
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 29 38 13 00       	mov    $0x133829,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 29 38 13 f0       	push   $0xf0133829
f0101172:	68 40 49 13 f0       	push   $0xf0134940
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c e1 88 00       	mov    $0x88e19c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c e1 88 f0       	push   $0xf088e19c
f010118d:	68 7c 49 13 f0       	push   $0xf013497c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc ee 88 00       	mov    $0x88eebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc ee 88 f0       	push   $0xf088eebc
f01011a8:	68 c4 49 13 f0       	push   $0xf01349c4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc ee 88 f0       	mov    $0xf088eebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 00 4a 13 f0       	push   $0xf0134a00
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 30 06 03 00       	call   f0131903 <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 df 05 03 00       	call   f0131903 <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 59 05 03 00       	call   f0131903 <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 18 05 03 00       	call   f0131903 <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 0b 8a 00 00       	call   f0109e14 <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 e2 04 03 00       	call   f0131903 <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 64 4a 13 f0       	push   $0xf0134a64
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 5c 04 03 00       	call   f0131903 <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 3c 04 03 00       	call   f0131903 <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 be 00 03 00       	call   f01315a3 <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 af 03 03 00       	call   f0131903 <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 8e 4a 13 f0       	push   $0xf0134a8e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 63 03 03 00       	call   f0131903 <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 56 88 00 00       	call   f0109e14 <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 2d 03 03 00       	call   f0131903 <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 8e 4a 13 f0       	push   $0xf0134a8e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 a8 4a 13 f0       	push   $0xf0134aa8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 9c 02 03 00       	call   f0131903 <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 7c 02 03 00       	call   f0131903 <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 d2 4a 13 f0       	push   $0xf0134ad2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 d5 4a 13 f0       	push   $0xf0134ad5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 11 02 03 00       	call   f0131903 <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 04 87 00 00       	call   f0109e14 <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 db 01 03 00       	call   f0131903 <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 c0 01 03 00       	call   f0131903 <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 d7 4a 13 f0       	push   $0xf0134ad7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 24 01 03 00       	call   f0131903 <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 17 86 00 00       	call   f0109e14 <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 dd 00 03 00       	call   f0131903 <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 1f 65 00 00       	call   f0107d81 <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 ec 63 00 00       	call   f0107c5a <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 e8 4a 13 f0       	push   $0xf0134ae8
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 e8 ff 02 00       	call   f0131903 <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 db 84 00 00       	call   f0109e14 <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 a1 ff 02 00       	call   f0131903 <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 12 4b 13 f0       	push   $0xf0134b12
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 70 4b 13 f0       	push   $0xf0134b70
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 ed 88 f0       	mov    0xf088ed74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 c8 4b 13 f0       	push   $0xf0134bc8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 58 c5 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 04 4c 13 f0       	push   $0xf0134c04
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 d8 fd 02 00       	call   f0131903 <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 bd fd 02 00       	call   f0131903 <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 a2 fd 02 00       	call   f0131903 <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 d7 c4 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 71 fd 02 00       	call   f0131903 <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 54 fd 02 00       	call   f0131903 <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 39 fd 02 00       	call   f0131903 <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 71 c4 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 c4 4c 13 f0       	push   $0xf0134cc4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 f1 fc 02 00       	call   f0131903 <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 54 4d 13 f0       	push   $0xf0134d54
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 ec 4d 13 f0       	push   $0xf0134dec
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 e7 c3 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 2c 4e 13 f0       	push   $0xf0134e2c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 84 4e 13 f0       	push   $0xf0134e84
f0101c98:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 84 4e 13 f0       	push   $0xf0134e84
f0101cb7:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 8b 74 00 00       	call   f010916d <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 de 4e 13 f0       	push   $0xf0134ede
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 ed 88 f0 00 	movl   $0x0,0xf088ed74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 8c fb 02 00       	call   f0131903 <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 de 4e 13 f0       	push   $0xf0134ede
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 ed 88 f0 00 	movl   $0x0,0xf088ed74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 f4 4e 13 f0       	push   $0xf0134ef4
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 a2 fa 02 00       	call   f0131903 <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 4a c1 00 00       	call   f010dfc2 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 54 4f 13 f0       	push   $0xf0134f54
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 24 c1 00 00       	call   f010dfc2 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 98 4f 13 f0       	push   $0xf0134f98
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 d8 4f 13 f0       	push   $0xf0134fd8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 17 fa 02 00       	call   f0131903 <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 38 c1 00 00       	call   f010e035 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 2c 50 13 f0       	push   $0xf013502c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 d3 c0 00 00       	call   f010dff5 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 60 50 13 f0       	push   $0xf0135060
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 c1 c0 00 00       	call   f010e005 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 8c 50 13 f0       	push   $0xf013508c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 af c0 00 00       	call   f010e015 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 b4 50 13 f0       	push   $0xf01350b4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 6b f9 02 00       	call   f0131903 <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 e8 50 13 f0       	push   $0xf01350e8
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 17 f9 02 00       	call   f0131903 <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 e4 f8 02 00       	call   f0131903 <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 20 51 13 f0       	push   $0xf0135120
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 4d 51 13 f0       	push   $0xf013514d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 d5 4a 13 f0       	push   $0xf0134ad5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 54 51 13 f0       	push   $0xf0135154
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 4d 51 13 f0       	push   $0xf013514d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 d5 4a 13 f0       	push   $0xf0134ad5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 88 51 13 f0       	push   $0xf0135188
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 c4 51 13 f0       	push   $0xf01351c4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 97 f7 02 00       	call   f0131903 <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 a8 e6 02 00       	call   f0130829 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 ec 51 13 f0       	push   $0xf01351ec
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 14 52 13 f0       	push   $0xf0135214
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 9f be 00 00       	call   f010e063 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 38 52 13 f0       	push   $0xf0135238
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 66 be 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 60 52 13 f0       	push   $0xf0135260
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 43 be 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 a0 52 13 f0       	push   $0xf01352a0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 56 be 00 00       	call   f010e07e <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 dc 52 13 f0       	push   $0xf01352dc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 56 be 00 00       	call   f010e099 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 00 53 13 f0       	push   $0xf0135300
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 30 53 13 f0       	push   $0xf0135330
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 5c 53 13 f0       	push   $0xf013535c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 8c 53 13 f0       	push   $0xf013538c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 bc 53 13 f0       	push   $0xf01353bc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 ec 53 13 f0       	push   $0xf01353ec
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 1c 54 13 f0       	push   $0xf013541c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 48 54 13 f0       	push   $0xf0135448
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 74 54 13 f0       	push   $0xf0135474
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 a0 54 13 f0       	push   $0xf01354a0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 cc 54 13 f0       	push   $0xf01354cc
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 f8 54 13 f0       	push   $0xf01354f8
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 f8 54 13 f0       	push   $0xf01354f8
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 2c 55 13 f0       	push   $0xf013552c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 5c 55 13 f0       	push   $0xf013555c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 8c 55 13 f0       	push   $0xf013558c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 c0 55 13 f0       	push   $0xf01355c0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 fc 55 13 f0       	push   $0xf01355fc
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 2c 56 13 f0       	push   $0xf013562c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 58 56 13 f0       	push   $0xf0135658
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 84 56 13 f0       	push   $0xf0135684
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 b4 56 13 f0       	push   $0xf01356b4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 36 bc 00 00       	call   f010e110 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 e4 56 13 f0       	push   $0xf01356e4
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 f0 bb 00 00       	call   f010e0ea <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 20 57 13 f0       	push   $0xf0135720
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 f1 bb 00 00       	call   f010e110 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 e4 56 13 f0       	push   $0xf01356e4
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 ab bb 00 00       	call   f010e0ea <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 44 57 13 f0       	push   $0xf0135744
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 99 bb 00 00       	call   f010e102 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 74 bb 00 00       	call   f010e0ea <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 64 57 13 f0       	push   $0xf0135764
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 62 bb 00 00       	call   f010e102 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 3d bb 00 00       	call   f010e0ea <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 73 bb 00 00       	call   f010e128 <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 80 57 13 f0       	push   $0xf0135780
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 b0 57 13 f0       	push   $0xf01357b0
f01025d5:	e8 c3 ed 02 00       	call   f013139d <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 16 f3 02 00       	call   f0131903 <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 21 bb 00 00       	call   f010e11a <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 27 bb 00 00       	call   f010e128 <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 dc 57 13 f0       	push   $0xf01357dc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 01 58 13 f0       	push   $0xf0135801
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 dc ba 00 00       	call   f010e110 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 1c 58 13 f0       	push   $0xf013581c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 a9 ba 00 00       	call   f010e0f8 <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 6c 58 13 f0       	push   $0xf013586c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 8b f2 02 00       	call   f0131903 <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 96 ba 00 00       	call   f010e11a <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 9c ba 00 00       	call   f010e128 <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 dc 57 13 f0       	push   $0xf01357dc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 61 ba 00 00       	call   f010e110 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 1c 58 13 f0       	push   $0xf013581c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 2e ba 00 00       	call   f010e0f8 <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 6c 58 13 f0       	push   $0xf013586c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 45 ba 00 00       	call   f010e128 <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 b2 58 13 f0       	push   $0xf01358b2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 e0 f1 02 00       	call   f0131903 <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 5b 53 01 00       	call   f0117a92 <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 d0 58 13 f0       	push   $0xf01358d0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 ab a1 01 00       	call   f011c91b <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 39 b5 01 00       	call   f011dcbd <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 20 59 13 f0       	push   $0xf0135920
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 d8 52 01 00       	call   f0117a92 <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 1e 7c 01 00       	call   f011a3e5 <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 67 8e 01 00       	call   f011b63b <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 70 59 13 f0       	push   $0xf0135970
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 8b 52 01 00       	call   f0117a92 <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 dc 64 01 00       	call   f0118cf0 <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 2e c3 01 00       	call   f011eb52 <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 ac fa 01 00       	call   f01222f4 <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 53 d9 01 00       	call   f01201a2 <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 8f 14 02 00       	call   f0123cf0 <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 4d 29 02 00       	call   f01251c0 <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 18 3e 02 00       	call   f012669d <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 14 98 02 00       	call   f012c0b4 <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 b4 b7 02 00       	call   f012e064 <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 e5 3d 01 00       	call   f01166a7 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 b9 47 01 00       	call   f011708d <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 f1 3f 02 00       	call   f01268d7 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 cb 56 02 00       	call   f0127fc3 <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 3a 64 02 00       	call   f0128d44 <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 15 73 02 00       	call   f0129c31 <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 c5 ef 02 00       	call   f0131903 <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 be 59 13 f0       	push   $0xf01359be
f010296c:	50                   	push   %eax
f010296d:	e8 3d ed 02 00       	call   f01316af <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f01029b1:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 c8 59 13 f0       	push   $0xf01359c8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 01 5a 13 f0       	push   $0xf0135a01
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 9d e9 00 00       	call   f01113a3 <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 18 5a 13 f0       	push   $0xf0135a18
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 50 5a 13 f0       	push   $0xf0135a50
f0102a46:	50                   	push   %eax
f0102a47:	e8 63 ec 02 00       	call   f01316af <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 f5 be 00 00       	call   f010e94d <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 55 5a 13 f0       	push   $0xf0135a55
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 3c ec 02 00       	call   f01316af <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 e2 bf 00 00       	call   f010ea61 <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 5b 5a 13 f0       	push   $0xf0135a5b
f0102a94:	50                   	push   %eax
f0102a95:	e8 15 ec 02 00       	call   f01316af <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 79 c4 00 00       	call   f010ef1f <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 60 5a 13 f0       	push   $0xf0135a60
f0102abb:	50                   	push   %eax
f0102abc:	e8 ee eb 02 00       	call   f01316af <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 63 5a 13 f0       	push   $0xf0135a63
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 d1 eb 02 00       	call   f01316af <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 90 c7 00 00       	call   f010f27a <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 66 5a 13 f0       	push   $0xf0135a66
f0102aff:	50                   	push   %eax
f0102b00:	e8 aa eb 02 00       	call   f01316af <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 69 5a 13 f0       	push   $0xf0135a69
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 8d eb 02 00       	call   f01316af <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 ca cb 00 00       	call   f010f6f8 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102b43:	50                   	push   %eax
f0102b44:	e8 66 eb 02 00       	call   f01316af <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102b60:	50                   	push   %eax
f0102b61:	e8 49 eb 02 00       	call   f01316af <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 0d d2 00 00       	call   f010fd7f <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 72 5a 13 f0       	push   $0xf0135a72
f0102b84:	50                   	push   %eax
f0102b85:	e8 25 eb 02 00       	call   f01316af <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 78 5a 13 f0       	push   $0xf0135a78
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 08 eb 02 00       	call   f01316af <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 5a da 00 00       	call   f011060d <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 80 5a 13 f0       	push   $0xf0135a80
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 b9 5a 13 f0       	push   $0xf0135ab9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 b9 ea 02 00       	call   f01316af <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 35 f2 00 00       	call   f0111e37 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 c2 5a 13 f0       	push   $0xf0135ac2
f0102c17:	50                   	push   %eax
f0102c18:	e8 92 ea 02 00       	call   f01316af <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 59 fc 00 00       	call   f0112882 <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 cc 5a 13 f0       	push   $0xf0135acc
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 6b ea 02 00       	call   f01316af <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 30 0d 01 00       	call   f0113980 <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 d2 5a 13 f0       	push   $0xf0135ad2
f0102c62:	50                   	push   %eax
f0102c63:	e8 47 ea 02 00       	call   f01316af <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 34 17 01 00       	call   f01143a8 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 db 5a 13 f0       	push   $0xf0135adb
f0102c86:	50                   	push   %eax
f0102c87:	e8 23 ea 02 00       	call   f01316af <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 bf 1f 01 00       	call   f0114c57 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 ea 5a 13 f0       	push   $0xf0135aea
f0102caa:	50                   	push   %eax
f0102cab:	e8 ff e9 02 00       	call   f01316af <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 0f 28 01 00       	call   f01154cb <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 fc 5a 13 f0       	push   $0xf0135afc
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 32 5b 13 f0       	push   $0xf0135b32
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 b0 e9 02 00       	call   f01316af <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 1d e8 00 00       	call   f0111528 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 3a 5b 13 f0       	push   $0xf0135b3a
f0102d20:	50                   	push   %eax
f0102d21:	e8 89 e9 02 00       	call   f01316af <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 59 ea 00 00       	call   f011178b <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 42 5b 13 f0       	push   $0xf0135b42
f0102d47:	50                   	push   %eax
f0102d48:	e8 62 e9 02 00       	call   f01316af <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 7b ea 00 00       	call   f01117d4 <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 4a 5b 13 f0       	push   $0xf0135b4a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 3e e9 02 00       	call   f01316af <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 9b eb 00 00       	call   f0111918 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 51 5b 13 f0       	push   $0xf0135b51
f0102d8f:	50                   	push   %eax
f0102d90:	e8 1a e9 02 00       	call   f01316af <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 d0 ec 00 00       	call   f0111a71 <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 58 5b 13 f0       	push   $0xf0135b58
f0102db3:	50                   	push   %eax
f0102db4:	e8 f6 e8 02 00       	call   f01316af <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 e4 ec 00 00       	call   f0111aa9 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102de2:	50                   	push   %eax
f0102de3:	e8 c7 e8 02 00       	call   f01316af <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 64 5b 13 f0       	push   $0xf0135b64
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 8a e8 02 00       	call   f01316af <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 b4 5b 13 f0       	push   $0xf0135bb4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 60 5a 13 f0       	push   $0xf0135a60
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 4d e8 02 00       	call   f01316af <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 63 5a 13 f0       	push   $0xf0135a63
f0102e79:	50                   	push   %eax
f0102e7a:	e8 30 e8 02 00       	call   f01316af <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 fc 55 13 f0       	push   $0xf01355fc
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 66 5a 13 f0       	push   $0xf0135a66
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 f9 e7 02 00       	call   f01316af <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 69 5a 13 f0       	push   $0xf0135a69
f0102ecd:	50                   	push   %eax
f0102ece:	e8 dc e7 02 00       	call   f01316af <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 2c 56 13 f0       	push   $0xf013562c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102f01:	50                   	push   %eax
f0102f02:	e8 a8 e7 02 00       	call   f01316af <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 8b e7 02 00       	call   f01316af <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 58 56 13 f0       	push   $0xf0135658
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102f50:	50                   	push   %eax
f0102f51:	e8 59 e7 02 00       	call   f01316af <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 8d e9 02 00       	call   f0131903 <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 d0 58 13 f0       	push   $0xf01358d0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 e2 4a 01 00       	call   f0117a92 <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 5b 99 01 00       	call   f011c91b <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 e9 ac 01 00       	call   f011dcbd <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 20 59 13 f0       	push   $0xf0135920
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 85 4a 01 00       	call   f0117a92 <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 cb 73 01 00       	call   f011a3e5 <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 14 86 01 00       	call   f011b63b <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 70 59 13 f0       	push   $0xf0135970
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 35 4a 01 00       	call   f0117a92 <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 86 5c 01 00       	call   f0118cf0 <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0103084:	50                   	push   %eax
f0103085:	e8 25 e6 02 00       	call   f01316af <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 4c f2 01 00       	call   f01222f4 <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 f3 d0 01 00       	call   f01201a2 <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01030c9:	50                   	push   %eax
f01030ca:	e8 e0 e5 02 00       	call   f01316af <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 15 0c 02 00       	call   f0123cf0 <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 08 5c 13 f0       	push   $0xf0135c08
f01030f2:	50                   	push   %eax
f01030f3:	e8 b7 e5 02 00       	call   f01316af <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 bc 20 02 00       	call   f01251c0 <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 12 5c 13 f0       	push   $0xf0135c12
f010311b:	50                   	push   %eax
f010311c:	e8 8e e5 02 00       	call   f01316af <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 2e af 02 00       	call   f012e064 <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 8e eb 02 00       	call   f0131cf6 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 9f ec 02 00       	call   f0131e36 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 1c 5c 13 f0       	push   $0xf0135c1c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 33 5c 13 f0       	push   $0xf0135c33
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 ed 88 f0 00 	movl   $0x0,0xf088edb8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc ed 88 f0 00 	movl   $0x0,0xf088edbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 ed 88 f0 00 	movl   $0x0,0xf088edc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 50 5c 13 f0       	push   $0xf0135c50
f010322d:	6a 59                	push   $0x59
f010322f:	68 33 5c 13 f0       	push   $0xf0135c33
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103261:	8b 1d dc ec 88 f0    	mov    0xf088ecdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f0103293:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f01032ac:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc ec 88 f0    	mov    0xf088ecdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 ed 88 f0       	mov    0xf088edb8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 73 5c 13 f0       	push   $0xf0135c73
f010334c:	6a 78                	push   $0x78
f010334e:	68 33 5c 13 f0       	push   $0xf0135c33
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 50 5c 13 f0       	push   $0xf0135c50
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 33 5c 13 f0       	push   $0xf0135c33
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f010344f:	8b 1d dc ec 88 f0    	mov    0xf088ecdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f0103481:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f010349a:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 81 48 00 00       	call   f0107d81 <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 94 5c 13 f0       	push   $0xf0135c94
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 33 5c 13 f0       	push   $0xf0135c33
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 22 46 00 00       	call   f0107b8f <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 05 48 00 00       	call   f0107dad <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 cc e1 02 00       	call   f0131791 <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 ed 88 f0       	mov    0xf088ed60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103679:	68 ea 5c 13 f0       	push   $0xf0135cea
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 33 5c 13 f0       	push   $0xf0135c33
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103729:	68 ea 5c 13 f0       	push   $0xf0135cea
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 33 5c 13 f0       	push   $0xf0135c33
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 c4 5c 13 f0       	push   $0xf0135cc4
f01037ec:	68 ea 5c 13 f0       	push   $0xf0135cea
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 33 5c 13 f0       	push   $0xf0135c33
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 00 5d 13 f0       	push   $0xf0135d00
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 33 5c 13 f0       	push   $0xf0135c33
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 2c 5d 13 f0       	push   $0xf0135d2c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 33 5c 13 f0       	push   $0xf0135c33
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 78 5d 13 f0       	push   $0xf0135d78
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 33 5c 13 f0       	push   $0xf0135c33
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 dd 43 00 00       	call   f0107eb7 <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 c2 41 00 00       	call   f0107d81 <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 2a 40 00 00       	call   f0107c5a <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 05 40 00 00       	call   f0107c5a <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 c7 3f 00 00       	call   f0107c5a <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 b9 3e 00 00       	call   f0107b8f <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 af 40 00 00       	call   f0107dad <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 73 da 02 00       	call   f0131791 <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 09 40 00 00       	call   f0107d81 <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 ed 88 f0       	mov    0xf088edb8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 ed 88 f0       	mov    0xf088edc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 ed 88 f0       	mov    %eax,0xf088edc0
f0103e01:	a1 c0 ed 88 f0       	mov    0xf088edc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 53 3d 00 00       	call   f0107b8f <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 49 3f 00 00       	call   f0107dad <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 0d d9 02 00       	call   f0131791 <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103ea2:	68 ea 5c 13 f0       	push   $0xf0135cea
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 33 5c 13 f0       	push   $0xf0135c33
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 f4 5d 13 f0       	push   $0xf0135df4
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 cb dd 02 00       	call   f0131e36 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 18 5e 13 f0       	push   $0xf0135e18
f0104168:	6a 33                	push   $0x33
f010416a:	68 74 5e 13 f0       	push   $0xf0135e74
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 18 5e 13 f0       	push   $0xf0135e18
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 74 5e 13 f0       	push   $0xf0135e74
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 88 5e 13 f0       	push   $0xf0135e88
f01044ae:	68 96 5e 13 f0       	push   $0xf0135e96
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 ab 5e 13 f0       	push   $0xf0135eab
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 bc 5e 13 f0       	push   $0xf0135ebc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 ab 5e 13 f0       	push   $0xf0135eab
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 df 5e 13 f0       	push   $0xf0135edf
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 ab 5e 13 f0       	push   $0xf0135eab
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 88 5e 13 f0       	push   $0xf0135e88
f01045f7:	68 96 5e 13 f0       	push   $0xf0135e96
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 df 5e 13 f0       	push   $0xf0135edf
f0104620:	6a 45                	push   $0x45
f0104622:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 00 5f 13 f0       	push   $0xf0135f00
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 31 c1 02 00       	call   f0130862 <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 ed 88 f0 01 	movl   $0x1,0xf088ed58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010475a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 da c0 02 00       	call   f013089f <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 95 55 00 00       	call   f0109d76 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 ed 88 f0 01 	movb   $0x1,0xf088ed80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 5b 33 00 00       	call   f0107b8f <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 ec 88 f0       	mov    %eax,0xf088ece8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 42 33 00 00       	call   f0107b8f <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c ed 88 f0       	mov    %eax,0xf088ed2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c ed 88 f0 00 	movl   $0x0,0xf088ed4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 34 5f 13 f0       	push   $0xf0135f34
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 ab 5e 13 f0       	push   $0xf0135eab
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 ed 88 f0 00 	movl   $0x0,0xf088ed08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c ed 88 f0       	push   $0xf088ed3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 ec 88 f0       	push   $0xf088ecf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 2e 33 00 00       	call   f0107c5a <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 14 33 00 00       	call   f0107c5a <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 df 5e 13 f0       	push   $0xf0135edf
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 ab 5e 13 f0       	push   $0xf0135eab
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c ed 88 f0       	push   $0xf088ed3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 df 5e 13 f0       	push   $0xf0135edf
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 ed 88 f0       	mov    %eax,0xf088ed40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c ed 88 f0       	mov    %eax,0xf088ed3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 ed 88 f0       	mov    0xf088ed48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 ed 88 f0       	mov    %eax,0xf088ed48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 a5 95 00 00       	call   f010e110 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 6a 66 00 00       	call   f010b1e4 <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 ec 88 f0       	push   $0xf088ecf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 df 5e 13 f0       	push   $0xf0135edf
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 ec 88 f0       	mov    %eax,0xf088ecf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 ec 88 f0       	mov    %eax,0xf088ecf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 ed 88 f0       	mov    0xf088ed00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 ed 88 f0       	mov    %eax,0xf088ed00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 64 5f 13 f0       	push   $0xf0135f64
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 86 5f 13 f0       	push   $0xf0135f86
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104cac:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 90 5f 13 f0       	push   $0xf0135f90
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 e0 5f 13 f0       	push   $0xf0135fe0
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 86 5f 13 f0       	push   $0xf0135f86
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 08 60 13 f0       	push   $0xf0136008
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 2c 60 13 f0       	push   $0xf013602c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 86 5f 13 f0       	push   $0xf0135f86
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0104e28:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 4e 60 13 f0       	push   $0xf013604e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104e9f:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 6c 60 13 f0       	push   $0xf013606c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 98 60 13 f0       	push   $0xf0136098
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 a4 4e 00 00       	call   f0109dca <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 ab 60 13 f0       	push   $0xf01360ab
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104f59:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 b1 60 13 f0       	push   $0xf01360b1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 cc 60 13 f0       	push   $0xf01360cc
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 98 60 13 f0       	push   $0xf0136098
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 df 5e 13 f0       	push   $0xf0135edf
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 21 4d 00 00       	call   f0109dca <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 ab 60 13 f0       	push   $0xf01360ab
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 08 60 13 f0       	push   $0xf0136008
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 ac 5f 13 f0       	push   $0xf0135fac
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 00 61 13 f0       	push   $0xf0136100
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 98 60 13 f0       	push   $0xf0136098
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 29 4c 00 00       	call   f0109dca <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 ab 60 13 f0       	push   $0xf01360ab
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f01051d4:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 4e 60 13 f0       	push   $0xf013604e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f010528d:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0105306:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 df 5e 13 f0       	push   $0xf0135edf
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 df 5e 13 f0       	push   $0xf0135edf
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 2c 61 13 f0       	push   $0xf013612c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 1e 47 00 00       	call   f0109dca <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 ab 60 13 f0       	push   $0xf01360ab
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f01056e6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 54 61 13 f0       	push   $0xf0136154
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 df 5e 13 f0       	push   $0xf0135edf
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 a1 45 00 00       	call   f0109dca <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 ab 60 13 f0       	push   $0xf01360ab
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 80 61 13 f0       	push   $0xf0136180
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 bd 44 00 00       	call   f0109dca <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 ab 60 13 f0       	push   $0xf01360ab
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0105947:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 a8 61 13 f0       	push   $0xf01361a8
f0105991:	68 96 5e 13 f0       	push   $0xf0135e96
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 ab 5e 13 f0       	push   $0xf0135eab
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 c8 61 13 f0       	push   $0xf01361c8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 f9 43 00 00       	call   f0109dca <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 ab 60 13 f0       	push   $0xf01360ab
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 32 86 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 d0 24 00 00       	call   f0107f6b <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 bc 23 00 00       	call   f0107eb7 <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 e9 24 00 00       	call   f010808a <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 cf 24 00 00       	call   f01080ae <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec e3 88 f0 01 	movl   $0x1,0xf088e3ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d5d:	a1 ec e3 88 f0       	mov    0xf088e3ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c ed 88 f0       	mov    %eax,0xf088ed7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 bf b9 02 00       	call   f0131791 <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 f4 61 13 f0       	push   $0xf01361f4
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 28 62 13 f0       	push   $0xf0136228
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac ed 88 f0       	mov    %eax,0xf088edac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 f4 61 13 f0       	push   $0xf01361f4
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 28 62 13 f0       	push   $0xf0136228
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 ed 88 f0    	mov    0xf088ed10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 ed 88 f0       	mov    %eax,0xf088ed54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 b4 b8 02 00       	call   f0131791 <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc ec 88 f0       	mov    %eax,0xf088ecdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc ec 88 f0       	mov    0xf088ecdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 7f b8 02 00       	call   f0131791 <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 ee a3 02 00       	call   f0130315 <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 48 62 13 f0       	push   $0xf0136248
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 e3 88 f0       	mov    %eax,0xf088e3f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 1d b8 02 00       	call   f0131791 <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 f4 61 13 f0       	push   $0xf01361f4
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 28 62 13 f0       	push   $0xf0136228
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c ed 88 f0    	mov    0xf088ed7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 ef aa 02 00       	call   f0130afc <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 ec 88 f0 19 	movl   $0x19,0xf088ecf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 ed 88 f0 bc 	movl   $0xf088eebc,0xf088ed78
f0106035:	ee 88 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 ed 88 f0       	mov    %eax,0xf088ed78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 ed 88 f0    	mov    0xf088ed78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 ed 88 f0       	mov    %eax,0xf088ed78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 70 62 13 f0       	push   $0xf0136270
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 28 62 13 f0       	push   $0xf0136228
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 f4 61 13 f0       	push   $0xf01361f4
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 28 62 13 f0       	push   $0xf0136228
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 ed 88 f0       	mov    %eax,0xf088ed10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 a0 62 13 f0       	push   $0xf01362a0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 c1 62 13 f0       	push   $0xf01362c1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 f4 61 13 f0       	push   $0xf01361f4
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 28 62 13 f0       	push   $0xf0136228
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 f4 61 13 f0       	push   $0xf01361f4
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 28 62 13 f0       	push   $0xf0136228
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 e0 62 13 f0       	push   $0xf01362e0
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 05 63 13 f0       	push   $0xf0136305
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 ed 88 f0 00 	movl   $0x0,0xf088ed18
f0106531:	00 00 00 
f0106534:	c7 05 1c ed 88 f0 00 	movl   $0x0,0xf088ed1c
f010653b:	00 00 00 
f010653e:	c7 05 24 ed 88 f0 00 	movl   $0x0,0xf088ed24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 ec 88 f0 00 	movl   $0x0,0xf088ecb8
f010654f:	00 00 00 
f0106552:	c7 05 bc ec 88 f0 00 	movl   $0x0,0xf088ecbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 ec 88 f0 00 	movl   $0x0,0xf088ecc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 ed 88 f0 00 	movl   $0xf0001000,0xf088ed60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 ed 88 f0 00 	movl   $0xf0002000,0xf088ed84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 ed 88 f0    	mov    0xf088ed60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 20 63 13 f0       	push   $0xf0136320
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 43 63 13 f0       	push   $0xf0136343
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106677:	8b 1d 54 ed 88 f0    	mov    0xf088ed54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f01066a9:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f01066c2:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 60 63 13 f0       	push   $0xf0136360
f0106752:	6a 64                	push   $0x64
f0106754:	68 43 63 13 f0       	push   $0xf0136343
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 20 63 13 f0       	push   $0xf0136320
f0106814:	6a 70                	push   $0x70
f0106816:	68 43 63 13 f0       	push   $0xf0136343
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106848:	8b 1d 54 ed 88 f0    	mov    0xf088ed54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f010687a:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f0106893:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 a5 ae 02 00       	call   f0131791 <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 94 63 13 f0       	push   $0xf0136394
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 43 63 13 f0       	push   $0xf0136343
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 e1 63 13 f0       	push   $0xf01363e1
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 43 63 13 f0       	push   $0xf0136343
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 da 15 00 00       	call   f0107fc6 <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 20 63 13 f0       	push   $0xf0136320
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 43 63 13 f0       	push   $0xf0136343
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 ed 88 f0       	mov    0xf088ed18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 8f 12 00 00       	call   f0107d81 <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 00 64 13 f0       	push   $0xf0136400
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 43 63 13 f0       	push   $0xf0136343
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 4d 5e 00 00       	call   f010c9b9 <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 e1 11 00 00       	call   f0107d81 <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 00 64 13 f0       	push   $0xf0136400
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 43 63 13 f0       	push   $0xf0136343
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 74 0f 00 00       	call   f0107b8f <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 2f 64 13 f0       	push   $0xf013642f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 43 63 13 f0       	push   $0xf0136343
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 50 11 00 00       	call   f0107dad <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 1a ab 02 00       	call   f0131791 <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 00 64 13 f0       	push   $0xf0136400
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 43 63 13 f0       	push   $0xf0136343
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 62 aa 02 00       	call   f0131791 <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 4c 64 13 f0       	push   $0xf013644c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 3f 0e 00 00       	call   f0107d81 <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 00 64 13 f0       	push   $0xf0136400
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 43 63 13 f0       	push   $0xf0136343
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 ed 88 f0       	mov    0xf088ed18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 ed 88 f0       	mov    0xf088ed20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 ed 88 f0       	mov    %eax,0xf088ed20
f0107034:	a1 20 ed 88 f0       	mov    0xf088ed20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 ec 88 f0       	mov    0xf088ecb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 ec 88 f0       	mov    %eax,0xf088ecc0
f010706f:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 ed 88 f0       	mov    %eax,0xf088ed28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 69 0a 00 00       	call   f0107b8f <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec ec 88 f0       	mov    %eax,0xf088ecec
	if (shares == NULL)
f010712e:	a1 ec ec 88 f0       	mov    0xf088ecec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 70 64 13 f0       	push   $0xf0136470
f010713f:	6a 21                	push   $0x21
f0107141:	68 b4 64 13 f0       	push   $0xf01364b4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 16 a6 02 00       	call   f0131791 <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 f6 a4 02 00       	call   f0131791 <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 8f a3 02 00       	call   f01316af <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 aa 08 00 00       	call   f0107c5a <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 b7 a3 02 00       	call   f0131791 <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 7a 07 00 00       	call   f0107b8f <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 d5 64 13 f0       	push   $0xf01364d5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 b4 64 13 f0       	push   $0xf01364b4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 5e 08 00 00       	call   f0107d81 <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 2b 07 00 00       	call   f0107c5a <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	56                   	push   %esi
f01075a0:	53                   	push   %ebx
f01075a1:	83 ec 50             	sub    $0x50,%esp
f01075a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a7:	88 45 b4             	mov    %al,-0x4c(%ebp)
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
	struct Env* myenv = curenv; //The calling environment
f01075aa:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01075af:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//Check if the shared object already exists
	int shared_Result = get_share_object_ID(ownerID , shareName);
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 0c             	pushl  0xc(%ebp)
f01075b8:	ff 75 08             	pushl  0x8(%ebp)
f01075bb:	e8 e6 fc ff ff       	call   f01072a6 <get_share_object_ID>
f01075c0:	83 c4 10             	add    $0x10,%esp
f01075c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (shared_Result != E_SHARED_MEM_NOT_EXISTS)
f01075c6:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f01075ca:	74 0a                	je     f01075d6 <createSharedObject+0x3a>
		return E_SHARED_MEM_EXISTS;
f01075cc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075d1:	e9 d7 01 00 00       	jmp    f01077ad <createSharedObject+0x211>

	//Check if any shared object available
	struct Share * allocatedObject = NULL;
f01075d6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	int sharedObj_index = allocate_share_object(&allocatedObject);
f01075dd:	83 ec 0c             	sub    $0xc,%esp
f01075e0:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01075e3:	50                   	push   %eax
f01075e4:	e8 c5 fb ff ff       	call   f01071ae <allocate_share_object>
f01075e9:	83 c4 10             	add    $0x10,%esp
f01075ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sharedObj_index == E_NO_SHARE)
f01075ef:	83 7d e0 f2          	cmpl   $0xfffffff2,-0x20(%ebp)
f01075f3:	75 0a                	jne    f01075ff <createSharedObject+0x63>
		return E_NO_SHARE;
f01075f5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01075fa:	e9 ae 01 00 00       	jmp    f01077ad <createSharedObject+0x211>

	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
f01075ff:	8b 45 18             	mov    0x18(%ebp),%eax
f0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
f0107605:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010760c:	8b 55 10             	mov    0x10(%ebp),%edx
f010760f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107612:	01 d0                	add    %edx,%eax
f0107614:	48                   	dec    %eax
f0107615:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010761b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107620:	f7 75 dc             	divl   -0x24(%ebp)
f0107623:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107626:	29 d0                	sub    %edx,%eax
f0107628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct FrameInfo *sb_chunck;
	int j = 0;
f010762b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f0107632:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107639:	e9 93 00 00 00       	jmp    f01076d1 <createSharedObject+0x135>
	{
		sb_chunck= NULL;
f010763e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		int result= allocate_frame(&sb_chunck);
f0107645:	83 ec 0c             	sub    $0xc,%esp
f0107648:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010764b:	50                   	push   %eax
f010764c:	e8 a1 f2 ff ff       	call   f01068f2 <allocate_frame>
f0107651:	83 c4 10             	add    $0x10,%esp
f0107654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(result != E_NO_MEM)
f0107657:	83 7d d0 fc          	cmpl   $0xfffffffc,-0x30(%ebp)
f010765b:	74 63                	je     f01076c0 <createSharedObject+0x124>
		{
			sb_chunck->va = va;
f010765d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0107660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107663:	89 50 0c             	mov    %edx,0xc(%eax)
			int m_result=map_frame(curenv->env_page_directory ,sb_chunck ,va, PERM_WRITEABLE | PERM_USER);
f0107666:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0107669:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010766e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107671:	6a 06                	push   $0x6
f0107673:	ff 75 f4             	pushl  -0xc(%ebp)
f0107676:	52                   	push   %edx
f0107677:	50                   	push   %eax
f0107678:	e8 c4 f6 ff ff       	call   f0106d41 <map_frame>
f010767d:	83 c4 10             	add    $0x10,%esp
f0107680:	89 45 cc             	mov    %eax,-0x34(%ebp)
			add_frame_to_storage(shares[sharedObj_index].framesStorage , sb_chunck , j);
f0107683:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0107686:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
f0107689:	8b 35 ec ec 88 f0    	mov    0xf088ecec,%esi
f010768f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107692:	89 d0                	mov    %edx,%eax
f0107694:	c1 e0 02             	shl    $0x2,%eax
f0107697:	01 d0                	add    %edx,%eax
f0107699:	c1 e0 02             	shl    $0x2,%eax
f010769c:	01 d0                	add    %edx,%eax
f010769e:	c1 e0 02             	shl    $0x2,%eax
f01076a1:	01 f0                	add    %esi,%eax
f01076a3:	8b 40 50             	mov    0x50(%eax),%eax
f01076a6:	83 ec 04             	sub    $0x4,%esp
f01076a9:	53                   	push   %ebx
f01076aa:	51                   	push   %ecx
f01076ab:	50                   	push   %eax
f01076ac:	e8 8c fd ff ff       	call   f010743d <add_frame_to_storage>
f01076b1:	83 c4 10             	add    $0x10,%esp
			j++;
f01076b4:	ff 45 f0             	incl   -0x10(%ebp)
			va += PAGE_SIZE;
f01076b7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076be:	eb 0a                	jmp    f01076ca <createSharedObject+0x12e>
		}
		else
			return -1;
f01076c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01076c5:	e9 e3 00 00 00       	jmp    f01077ad <createSharedObject+0x211>
	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
	struct FrameInfo *sb_chunck;
	int j = 0;
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f01076ca:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01076d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01076d7:	0f 82 61 ff ff ff    	jb     f010763e <createSharedObject+0xa2>
		else
			return -1;
	}

	//Initialize the shared object infos
	shares[sharedObj_index].ownerID = ownerID;
f01076dd:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01076e3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01076e6:	89 d0                	mov    %edx,%eax
f01076e8:	c1 e0 02             	shl    $0x2,%eax
f01076eb:	01 d0                	add    %edx,%eax
f01076ed:	c1 e0 02             	shl    $0x2,%eax
f01076f0:	01 d0                	add    %edx,%eax
f01076f2:	c1 e0 02             	shl    $0x2,%eax
f01076f5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01076fb:	89 02                	mov    %eax,(%edx)
	strcpy(shares[sharedObj_index].name,shareName);
f01076fd:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107703:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107706:	89 d0                	mov    %edx,%eax
f0107708:	c1 e0 02             	shl    $0x2,%eax
f010770b:	01 d0                	add    %edx,%eax
f010770d:	c1 e0 02             	shl    $0x2,%eax
f0107710:	01 d0                	add    %edx,%eax
f0107712:	c1 e0 02             	shl    $0x2,%eax
f0107715:	01 c8                	add    %ecx,%eax
f0107717:	83 c0 04             	add    $0x4,%eax
f010771a:	83 ec 08             	sub    $0x8,%esp
f010771d:	ff 75 0c             	pushl  0xc(%ebp)
f0107720:	50                   	push   %eax
f0107721:	e8 cc 9e 02 00       	call   f01315f2 <strcpy>
f0107726:	83 c4 10             	add    $0x10,%esp
	shares[sharedObj_index].references = 1;
f0107729:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010772f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107732:	89 d0                	mov    %edx,%eax
f0107734:	c1 e0 02             	shl    $0x2,%eax
f0107737:	01 d0                	add    %edx,%eax
f0107739:	c1 e0 02             	shl    $0x2,%eax
f010773c:	01 d0                	add    %edx,%eax
f010773e:	c1 e0 02             	shl    $0x2,%eax
f0107741:	01 c8                	add    %ecx,%eax
f0107743:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
	shares[sharedObj_index].size = size;
f010774a:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107750:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107753:	89 d0                	mov    %edx,%eax
f0107755:	c1 e0 02             	shl    $0x2,%eax
f0107758:	01 d0                	add    %edx,%eax
f010775a:	c1 e0 02             	shl    $0x2,%eax
f010775d:	01 d0                	add    %edx,%eax
f010775f:	c1 e0 02             	shl    $0x2,%eax
f0107762:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107765:	8b 45 10             	mov    0x10(%ebp),%eax
f0107768:	89 42 44             	mov    %eax,0x44(%edx)
	shares[sharedObj_index].isWritable = isWritable;
f010776b:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107771:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107774:	89 d0                	mov    %edx,%eax
f0107776:	c1 e0 02             	shl    $0x2,%eax
f0107779:	01 d0                	add    %edx,%eax
f010777b:	c1 e0 02             	shl    $0x2,%eax
f010777e:	01 d0                	add    %edx,%eax
f0107780:	c1 e0 02             	shl    $0x2,%eax
f0107783:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107786:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0107789:	88 42 4c             	mov    %al,0x4c(%edx)
	shares[sharedObj_index].empty = 0;
f010778c:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107792:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107795:	89 d0                	mov    %edx,%eax
f0107797:	c1 e0 02             	shl    $0x2,%eax
f010779a:	01 d0                	add    %edx,%eax
f010779c:	c1 e0 02             	shl    $0x2,%eax
f010779f:	01 d0                	add    %edx,%eax
f01077a1:	c1 e0 02             	shl    $0x2,%eax
f01077a4:	01 c8                	add    %ecx,%eax
f01077a6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)
	return sharedObj_index;
f01077aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01077ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01077b0:	5b                   	pop    %ebx
f01077b1:	5e                   	pop    %esi
f01077b2:	5d                   	pop    %ebp
f01077b3:	c3                   	ret    

f01077b4 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01077b4:	55                   	push   %ebp
f01077b5:	89 e5                	mov    %esp,%ebp
f01077b7:	53                   	push   %ebx
f01077b8:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01077bb:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01077c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists

	uint32 va = (uint32) virtual_address;
f01077c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077c6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 shared_index = get_share_object_ID(ownerID,shareName);
f01077c9:	83 ec 08             	sub    $0x8,%esp
f01077cc:	ff 75 0c             	pushl  0xc(%ebp)
f01077cf:	ff 75 08             	pushl  0x8(%ebp)
f01077d2:	e8 cf fa ff ff       	call   f01072a6 <get_share_object_ID>
f01077d7:	83 c4 10             	add    $0x10,%esp
f01077da:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
f01077dd:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
f01077e1:	75 0a                	jne    f01077ed <getSharedObject+0x39>
		return E_SHARED_MEM_NOT_EXISTS;
f01077e3:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01077e8:	e9 f4 00 00 00       	jmp    f01078e1 <getSharedObject+0x12d>

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
f01077ed:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01077f4:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01077fa:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077fd:	89 d0                	mov    %edx,%eax
f01077ff:	c1 e0 02             	shl    $0x2,%eax
f0107802:	01 d0                	add    %edx,%eax
f0107804:	c1 e0 02             	shl    $0x2,%eax
f0107807:	01 d0                	add    %edx,%eax
f0107809:	c1 e0 02             	shl    $0x2,%eax
f010780c:	01 c8                	add    %ecx,%eax
f010780e:	8b 40 44             	mov    0x44(%eax),%eax
f0107811:	89 c2                	mov    %eax,%edx
f0107813:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107816:	01 d0                	add    %edx,%eax
f0107818:	48                   	dec    %eax
f0107819:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010781c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010781f:	ba 00 00 00 00       	mov    $0x0,%edx
f0107824:	f7 75 e4             	divl   -0x1c(%ebp)
f0107827:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010782a:	29 d0                	sub    %edx,%eax
f010782c:	85 c0                	test   %eax,%eax
f010782e:	79 05                	jns    f0107835 <getSharedObject+0x81>
f0107830:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107835:	c1 f8 0c             	sar    $0xc,%eax
f0107838:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f010783b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107842:	e9 8b 00 00 00       	jmp    f01078d2 <getSharedObject+0x11e>
	{
		struct FrameInfo* frame = get_frame_from_storage(shares[shared_index].framesStorage, index_of_page);
f0107847:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010784a:	8b 1d ec ec 88 f0    	mov    0xf088ecec,%ebx
f0107850:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107853:	89 d0                	mov    %edx,%eax
f0107855:	c1 e0 02             	shl    $0x2,%eax
f0107858:	01 d0                	add    %edx,%eax
f010785a:	c1 e0 02             	shl    $0x2,%eax
f010785d:	01 d0                	add    %edx,%eax
f010785f:	c1 e0 02             	shl    $0x2,%eax
f0107862:	01 d8                	add    %ebx,%eax
f0107864:	8b 40 50             	mov    0x50(%eax),%eax
f0107867:	83 ec 08             	sub    $0x8,%esp
f010786a:	51                   	push   %ecx
f010786b:	50                   	push   %eax
f010786c:	e8 3c fc ff ff       	call   f01074ad <get_frame_from_storage>
f0107871:	83 c4 10             	add    $0x10,%esp
f0107874:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(shares[shared_index].isWritable == 1)
f0107877:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010787d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107880:	89 d0                	mov    %edx,%eax
f0107882:	c1 e0 02             	shl    $0x2,%eax
f0107885:	01 d0                	add    %edx,%eax
f0107887:	c1 e0 02             	shl    $0x2,%eax
f010788a:	01 d0                	add    %edx,%eax
f010788c:	c1 e0 02             	shl    $0x2,%eax
f010788f:	01 c8                	add    %ecx,%eax
f0107891:	8a 40 4c             	mov    0x4c(%eax),%al
f0107894:	3c 01                	cmp    $0x1,%al
f0107896:	75 19                	jne    f01078b1 <getSharedObject+0xfd>
			map_frame(myenv->env_page_directory, frame, va, PERM_WRITEABLE | PERM_USER);
f0107898:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010789b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010789e:	6a 06                	push   $0x6
f01078a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01078a6:	50                   	push   %eax
f01078a7:	e8 95 f4 ff ff       	call   f0106d41 <map_frame>
f01078ac:	83 c4 10             	add    $0x10,%esp
f01078af:	eb 17                	jmp    f01078c8 <getSharedObject+0x114>
		else
			map_frame(myenv->env_page_directory, frame, va, PERM_USER);
f01078b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078b4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01078b7:	6a 04                	push   $0x4
f01078b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01078bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01078bf:	50                   	push   %eax
f01078c0:	e8 7c f4 ff ff       	call   f0106d41 <map_frame>
f01078c5:	83 c4 10             	add    $0x10,%esp
		va += PAGE_SIZE;
f01078c8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	uint32 shared_index = get_share_object_ID(ownerID,shareName);
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
		return E_SHARED_MEM_NOT_EXISTS;

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f01078cf:	ff 45 f0             	incl   -0x10(%ebp)
f01078d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078d5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01078d8:	0f 8c 69 ff ff ff    	jl     f0107847 <getSharedObject+0x93>
			map_frame(myenv->env_page_directory, frame, va, PERM_USER);
		va += PAGE_SIZE;
	}

	//shares[shared_index].references++;
	return shared_index;
f01078de:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01078e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01078e4:	c9                   	leave  
f01078e5:	c3                   	ret    

f01078e6 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01078e6:	55                   	push   %ebp
f01078e7:	89 e5                	mov    %esp,%ebp
f01078e9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01078ec:	83 ec 04             	sub    $0x4,%esp
f01078ef:	68 f4 64 13 f0       	push   $0xf01364f4
f01078f4:	68 75 01 00 00       	push   $0x175
f01078f9:	68 b4 64 13 f0       	push   $0xf01364b4
f01078fe:	e8 02 89 ff ff       	call   f0100205 <_panic>

f0107903 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107903:	55                   	push   %ebp
f0107904:	89 e5                	mov    %esp,%ebp
f0107906:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f010790b:	83 f8 01             	cmp    $0x1,%eax
f010790e:	75 04                	jne    f0107914 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107910:	b0 01                	mov    $0x1,%al
f0107912:	eb 02                	jmp    f0107916 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107914:	b0 00                	mov    $0x0,%al
f0107916:	5d                   	pop    %ebp
f0107917:	c3                   	ret    

f0107918 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107918:	55                   	push   %ebp
f0107919:	89 e5                	mov    %esp,%ebp
f010791b:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0107920:	83 f8 02             	cmp    $0x2,%eax
f0107923:	75 04                	jne    f0107929 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107925:	b0 01                	mov    $0x1,%al
f0107927:	eb 02                	jmp    f010792b <isKHeapPlacementStrategyBESTFIT+0x13>
f0107929:	b0 00                	mov    $0x0,%al
f010792b:	5d                   	pop    %ebp
f010792c:	c3                   	ret    

f010792d <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010792d:	55                   	push   %ebp
f010792e:	89 e5                	mov    %esp,%ebp
f0107930:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0107935:	83 f8 03             	cmp    $0x3,%eax
f0107938:	75 04                	jne    f010793e <isKHeapPlacementStrategyNEXTFIT+0x11>
f010793a:	b0 01                	mov    $0x1,%al
f010793c:	eb 02                	jmp    f0107940 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010793e:	b0 00                	mov    $0x0,%al
f0107940:	5d                   	pop    %ebp
f0107941:	c3                   	ret    

f0107942 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107942:	55                   	push   %ebp
f0107943:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107945:	8b 45 08             	mov    0x8(%ebp),%eax
f0107948:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f010794e:	29 d0                	sub    %edx,%eax
f0107950:	c1 f8 03             	sar    $0x3,%eax
f0107953:	89 c2                	mov    %eax,%edx
f0107955:	89 d0                	mov    %edx,%eax
f0107957:	c1 e0 02             	shl    $0x2,%eax
f010795a:	01 d0                	add    %edx,%eax
f010795c:	c1 e0 02             	shl    $0x2,%eax
f010795f:	01 d0                	add    %edx,%eax
f0107961:	c1 e0 02             	shl    $0x2,%eax
f0107964:	01 d0                	add    %edx,%eax
f0107966:	89 c1                	mov    %eax,%ecx
f0107968:	c1 e1 08             	shl    $0x8,%ecx
f010796b:	01 c8                	add    %ecx,%eax
f010796d:	89 c1                	mov    %eax,%ecx
f010796f:	c1 e1 10             	shl    $0x10,%ecx
f0107972:	01 c8                	add    %ecx,%eax
f0107974:	01 c0                	add    %eax,%eax
f0107976:	01 d0                	add    %edx,%eax
}
f0107978:	5d                   	pop    %ebp
f0107979:	c3                   	ret    

f010797a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010797a:	55                   	push   %ebp
f010797b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010797d:	ff 75 08             	pushl  0x8(%ebp)
f0107980:	e8 bd ff ff ff       	call   f0107942 <to_frame_number>
f0107985:	83 c4 04             	add    $0x4,%esp
f0107988:	c1 e0 0c             	shl    $0xc,%eax
}
f010798b:	c9                   	leave  
f010798c:	c3                   	ret    

f010798d <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010798d:	55                   	push   %ebp
f010798e:	89 e5                	mov    %esp,%ebp
f0107990:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107993:	8b 45 08             	mov    0x8(%ebp),%eax
f0107996:	c1 e8 0c             	shr    $0xc,%eax
f0107999:	89 c2                	mov    %eax,%edx
f010799b:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01079a0:	39 c2                	cmp    %eax,%edx
f01079a2:	72 14                	jb     f01079b8 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01079a4:	83 ec 04             	sub    $0x4,%esp
f01079a7:	68 24 65 13 f0       	push   $0xf0136524
f01079ac:	6a 55                	push   $0x55
f01079ae:	68 49 65 13 f0       	push   $0xf0136549
f01079b3:	e8 4d 88 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01079b8:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01079be:	8b 45 08             	mov    0x8(%ebp),%eax
f01079c1:	c1 e8 0c             	shr    $0xc,%eax
f01079c4:	89 c1                	mov    %eax,%ecx
f01079c6:	89 c8                	mov    %ecx,%eax
f01079c8:	01 c0                	add    %eax,%eax
f01079ca:	01 c8                	add    %ecx,%eax
f01079cc:	c1 e0 03             	shl    $0x3,%eax
f01079cf:	01 d0                	add    %edx,%eax
}
f01079d1:	c9                   	leave  
f01079d2:	c3                   	ret    

f01079d3 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01079d3:	55                   	push   %ebp
f01079d4:	89 e5                	mov    %esp,%ebp
f01079d6:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01079d9:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f01079e0:	00 00 00 
f01079e3:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f01079ea:	00 00 00 
f01079ed:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f01079f4:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01079f7:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f01079fe:	00 00 00 
f0107a01:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f0107a08:	00 00 00 
f0107a0b:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f0107a12:	00 00 00 
	uint32 arr_size = 0;
f0107a15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107a1c:	c7 05 04 ed 88 f0 ff 	movl   $0x9fff,0xf088ed04
f0107a23:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107a26:	c7 05 d8 ec 88 f0 00 	movl   $0xf6000000,0xf088ecd8
f0107a2d:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107a30:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a37:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f0107a3c:	c1 e0 04             	shl    $0x4,%eax
f0107a3f:	89 c2                	mov    %eax,%edx
f0107a41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a44:	01 d0                	add    %edx,%eax
f0107a46:	48                   	dec    %eax
f0107a47:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a52:	f7 75 f0             	divl   -0x10(%ebp)
f0107a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a58:	29 d0                	sub    %edx,%eax
f0107a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107a5d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107a62:	6a 03                	push   $0x3
f0107a64:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a67:	68 00 00 00 f6       	push   $0xf6000000
f0107a6c:	50                   	push   %eax
f0107a6d:	e8 bd 13 00 00       	call   f0108e2f <allocate_chunk>
f0107a72:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107a75:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f0107a7a:	83 ec 0c             	sub    $0xc,%esp
f0107a7d:	50                   	push   %eax
f0107a7e:	e8 8a a6 02 00       	call   f013210d <initialize_MemBlocksList>
f0107a83:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f0107a86:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0107a8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a91:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107a97:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a9a:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107a9d:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107aa2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107aa5:	89 c2                	mov    %eax,%edx
f0107aa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aaa:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107aad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107ab1:	75 14                	jne    f0107ac7 <initialize_dyn_block_system+0xf4>
f0107ab3:	83 ec 04             	sub    $0x4,%esp
f0107ab6:	68 63 65 13 f0       	push   $0xf0136563
f0107abb:	6a 30                	push   $0x30
f0107abd:	68 81 65 13 f0       	push   $0xf0136581
f0107ac2:	e8 3e 87 ff ff       	call   f0100205 <_panic>
f0107ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aca:	8b 00                	mov    (%eax),%eax
f0107acc:	85 c0                	test   %eax,%eax
f0107ace:	74 10                	je     f0107ae0 <initialize_dyn_block_system+0x10d>
f0107ad0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ad3:	8b 00                	mov    (%eax),%eax
f0107ad5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107ad8:	8b 52 04             	mov    0x4(%edx),%edx
f0107adb:	89 50 04             	mov    %edx,0x4(%eax)
f0107ade:	eb 0b                	jmp    f0107aeb <initialize_dyn_block_system+0x118>
f0107ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ae3:	8b 40 04             	mov    0x4(%eax),%eax
f0107ae6:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0107aeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aee:	8b 40 04             	mov    0x4(%eax),%eax
f0107af1:	85 c0                	test   %eax,%eax
f0107af3:	74 0f                	je     f0107b04 <initialize_dyn_block_system+0x131>
f0107af5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107af8:	8b 40 04             	mov    0x4(%eax),%eax
f0107afb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107afe:	8b 12                	mov    (%edx),%edx
f0107b00:	89 10                	mov    %edx,(%eax)
f0107b02:	eb 0a                	jmp    f0107b0e <initialize_dyn_block_system+0x13b>
f0107b04:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b07:	8b 00                	mov    (%eax),%eax
f0107b09:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0107b0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107b17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b21:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0107b26:	48                   	dec    %eax
f0107b27:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107b2c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b30:	75 14                	jne    f0107b46 <initialize_dyn_block_system+0x173>
f0107b32:	83 ec 04             	sub    $0x4,%esp
f0107b35:	68 94 65 13 f0       	push   $0xf0136594
f0107b3a:	6a 32                	push   $0x32
f0107b3c:	68 81 65 13 f0       	push   $0xf0136581
f0107b41:	e8 bf 86 ff ff       	call   f0100205 <_panic>
f0107b46:	8b 15 64 ed 88 f0    	mov    0xf088ed64,%edx
f0107b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b4f:	89 10                	mov    %edx,(%eax)
f0107b51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b54:	8b 00                	mov    (%eax),%eax
f0107b56:	85 c0                	test   %eax,%eax
f0107b58:	74 0d                	je     f0107b67 <initialize_dyn_block_system+0x194>
f0107b5a:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0107b5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107b62:	89 50 04             	mov    %edx,0x4(%eax)
f0107b65:	eb 08                	jmp    f0107b6f <initialize_dyn_block_system+0x19c>
f0107b67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6a:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0107b6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b72:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0107b77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b7a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b81:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0107b86:	40                   	inc    %eax
f0107b87:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70

}
f0107b8c:	90                   	nop
f0107b8d:	c9                   	leave  
f0107b8e:	c3                   	ret    

f0107b8f <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107b8f:	55                   	push   %ebp
f0107b90:	89 e5                	mov    %esp,%ebp
f0107b92:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107b95:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107b9c:	8b 55 08             	mov    0x8(%ebp),%edx
f0107b9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ba2:	01 d0                	add    %edx,%eax
f0107ba4:	48                   	dec    %eax
f0107ba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bab:	ba 00 00 00 00       	mov    $0x0,%edx
f0107bb0:	f7 75 f0             	divl   -0x10(%ebp)
f0107bb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bb6:	29 d0                	sub    %edx,%eax
f0107bb8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107bbb:	e8 43 fd ff ff       	call   f0107903 <isKHeapPlacementStrategyFIRSTFIT>
f0107bc0:	84 c0                	test   %al,%al
f0107bc2:	74 13                	je     f0107bd7 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107bc4:	83 ec 0c             	sub    $0xc,%esp
f0107bc7:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bca:	e8 00 a9 02 00       	call   f01324cf <alloc_block_FF>
f0107bcf:	83 c4 10             	add    $0x10,%esp
f0107bd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bd5:	eb 36                	jmp    f0107c0d <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107bd7:	e8 3c fd ff ff       	call   f0107918 <isKHeapPlacementStrategyBESTFIT>
f0107bdc:	84 c0                	test   %al,%al
f0107bde:	74 13                	je     f0107bf3 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107be0:	83 ec 0c             	sub    $0xc,%esp
f0107be3:	ff 75 e8             	pushl  -0x18(%ebp)
f0107be6:	e8 b1 aa 02 00       	call   f013269c <alloc_block_BF>
f0107beb:	83 c4 10             	add    $0x10,%esp
f0107bee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bf1:	eb 1a                	jmp    f0107c0d <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107bf3:	e8 35 fd ff ff       	call   f010792d <isKHeapPlacementStrategyNEXTFIT>
f0107bf8:	84 c0                	test   %al,%al
f0107bfa:	74 11                	je     f0107c0d <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107bfc:	83 ec 0c             	sub    $0xc,%esp
f0107bff:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c02:	e8 a6 ac 02 00       	call   f01328ad <alloc_block_NF>
f0107c07:	83 c4 10             	add    $0x10,%esp
f0107c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107c0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107c11:	74 40                	je     f0107c53 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c16:	8b 50 08             	mov    0x8(%eax),%edx
f0107c19:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107c1e:	6a 03                	push   $0x3
f0107c20:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c23:	52                   	push   %edx
f0107c24:	50                   	push   %eax
f0107c25:	e8 05 12 00 00       	call   f0108e2f <allocate_chunk>
f0107c2a:	83 c4 10             	add    $0x10,%esp
f0107c2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107c30:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107c34:	75 16                	jne    f0107c4c <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f0107c36:	83 ec 0c             	sub    $0xc,%esp
f0107c39:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c3c:	e8 01 a6 02 00       	call   f0132242 <insert_sorted_allocList>
f0107c41:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f0107c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c47:	8b 40 08             	mov    0x8(%eax),%eax
f0107c4a:	eb 0c                	jmp    f0107c58 <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107c4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c51:	eb 05                	jmp    f0107c58 <kmalloc+0xc9>
	}
	return NULL;
f0107c53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107c58:	c9                   	leave  
f0107c59:	c3                   	ret    

f0107c5a <kfree>:
void kfree(void* virtual_address)
{
f0107c5a:	55                   	push   %ebp
f0107c5b:	89 e5                	mov    %esp,%ebp
f0107c5d:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107c60:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c63:	83 ec 08             	sub    $0x8,%esp
f0107c66:	50                   	push   %eax
f0107c67:	68 c8 ec 88 f0       	push   $0xf088ecc8
f0107c6c:	e8 79 a5 02 00       	call   f01321ea <find_block>
f0107c71:	83 c4 10             	add    $0x10,%esp
f0107c74:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f0107c77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c7b:	0f 84 fd 00 00 00    	je     f0107d7e <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107c81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c85:	75 14                	jne    f0107c9b <kfree+0x41>
f0107c87:	83 ec 04             	sub    $0x4,%esp
f0107c8a:	68 63 65 13 f0       	push   $0xf0136563
f0107c8f:	6a 5a                	push   $0x5a
f0107c91:	68 81 65 13 f0       	push   $0xf0136581
f0107c96:	e8 6a 85 ff ff       	call   f0100205 <_panic>
f0107c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c9e:	8b 00                	mov    (%eax),%eax
f0107ca0:	85 c0                	test   %eax,%eax
f0107ca2:	74 10                	je     f0107cb4 <kfree+0x5a>
f0107ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ca7:	8b 00                	mov    (%eax),%eax
f0107ca9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cac:	8b 52 04             	mov    0x4(%edx),%edx
f0107caf:	89 50 04             	mov    %edx,0x4(%eax)
f0107cb2:	eb 0b                	jmp    f0107cbf <kfree+0x65>
f0107cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb7:	8b 40 04             	mov    0x4(%eax),%eax
f0107cba:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f0107cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cc2:	8b 40 04             	mov    0x4(%eax),%eax
f0107cc5:	85 c0                	test   %eax,%eax
f0107cc7:	74 0f                	je     f0107cd8 <kfree+0x7e>
f0107cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ccc:	8b 40 04             	mov    0x4(%eax),%eax
f0107ccf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cd2:	8b 12                	mov    (%edx),%edx
f0107cd4:	89 10                	mov    %edx,(%eax)
f0107cd6:	eb 0a                	jmp    f0107ce2 <kfree+0x88>
f0107cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cdb:	8b 00                	mov    (%eax),%eax
f0107cdd:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f0107ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ce5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107ceb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107cf5:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0107cfa:	48                   	dec    %eax
f0107cfb:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107d00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d03:	8b 40 08             	mov    0x8(%eax),%eax
f0107d06:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d09:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107d11:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107d14:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107d1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d1e:	8b 50 08             	mov    0x8(%eax),%edx
f0107d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d24:	8b 40 0c             	mov    0xc(%eax),%eax
f0107d27:	01 c2                	add    %eax,%edx
f0107d29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d2c:	01 d0                	add    %edx,%eax
f0107d2e:	48                   	dec    %eax
f0107d2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107d32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d35:	ba 00 00 00 00       	mov    $0x0,%edx
f0107d3a:	f7 75 e4             	divl   -0x1c(%ebp)
f0107d3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d40:	29 d0                	sub    %edx,%eax
f0107d42:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d4b:	eb 1b                	jmp    f0107d68 <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107d4d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107d52:	83 ec 08             	sub    $0x8,%esp
f0107d55:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d58:	50                   	push   %eax
f0107d59:	e8 18 f1 ff ff       	call   f0106e76 <unmap_frame>
f0107d5e:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d61:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d6b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107d6e:	72 dd                	jb     f0107d4d <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107d70:	83 ec 0c             	sub    $0xc,%esp
f0107d73:	ff 75 f0             	pushl  -0x10(%ebp)
f0107d76:	e8 ff b0 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f0107d7b:	83 c4 10             	add    $0x10,%esp
	}
}
f0107d7e:	90                   	nop
f0107d7f:	c9                   	leave  
f0107d80:	c3                   	ret    

f0107d81 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107d81:	55                   	push   %ebp
f0107d82:	89 e5                	mov    %esp,%ebp
f0107d84:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107d87:	83 ec 0c             	sub    $0xc,%esp
f0107d8a:	ff 75 08             	pushl  0x8(%ebp)
f0107d8d:	e8 fb fb ff ff       	call   f010798d <to_frame_info>
f0107d92:	83 c4 10             	add    $0x10,%esp
f0107d95:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107d98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d9c:	74 08                	je     f0107da6 <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107da1:	8b 40 0c             	mov    0xc(%eax),%eax
f0107da4:	eb 05                	jmp    f0107dab <kheap_virtual_address+0x2a>
	else
		return 0;
f0107da6:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107dab:	c9                   	leave  
f0107dac:	c3                   	ret    

f0107dad <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107dad:	55                   	push   %ebp
f0107dae:	89 e5                	mov    %esp,%ebp
f0107db0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107db3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107dba:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107dbf:	83 ec 04             	sub    $0x4,%esp
f0107dc2:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107dc5:	52                   	push   %edx
f0107dc6:	ff 75 08             	pushl  0x8(%ebp)
f0107dc9:	50                   	push   %eax
f0107dca:	e8 37 f0 ff ff       	call   f0106e06 <get_frame_info>
f0107dcf:	83 c4 10             	add    $0x10,%esp
f0107dd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107dd5:	83 ec 0c             	sub    $0xc,%esp
f0107dd8:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddb:	e8 9a fb ff ff       	call   f010797a <to_physical_address>
f0107de0:	83 c4 10             	add    $0x10,%esp
f0107de3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107de6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107dea:	74 05                	je     f0107df1 <kheap_physical_address+0x44>
		return address_physical;
f0107dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107def:	eb 05                	jmp    f0107df6 <kheap_physical_address+0x49>
	return 0;
f0107df1:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107df6:	c9                   	leave  
f0107df7:	c3                   	ret    

f0107df8 <kfreeall>:


void kfreeall()
{
f0107df8:	55                   	push   %ebp
f0107df9:	89 e5                	mov    %esp,%ebp
f0107dfb:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107dfe:	83 ec 04             	sub    $0x4,%esp
f0107e01:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e06:	68 89 00 00 00       	push   $0x89
f0107e0b:	68 81 65 13 f0       	push   $0xf0136581
f0107e10:	e8 f0 83 ff ff       	call   f0100205 <_panic>

f0107e15 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107e15:	55                   	push   %ebp
f0107e16:	89 e5                	mov    %esp,%ebp
f0107e18:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e1b:	83 ec 04             	sub    $0x4,%esp
f0107e1e:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e23:	68 8f 00 00 00       	push   $0x8f
f0107e28:	68 81 65 13 f0       	push   $0xf0136581
f0107e2d:	e8 d3 83 ff ff       	call   f0100205 <_panic>

f0107e32 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107e32:	55                   	push   %ebp
f0107e33:	89 e5                	mov    %esp,%ebp
f0107e35:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e38:	83 ec 04             	sub    $0x4,%esp
f0107e3b:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e40:	68 94 00 00 00       	push   $0x94
f0107e45:	68 81 65 13 f0       	push   $0xf0136581
f0107e4a:	e8 b6 83 ff ff       	call   f0100205 <_panic>

f0107e4f <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107e4f:	55                   	push   %ebp
f0107e50:	89 e5                	mov    %esp,%ebp
f0107e52:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107e55:	83 ec 04             	sub    $0x4,%esp
f0107e58:	68 c8 65 13 f0       	push   $0xf01365c8
f0107e5d:	68 ab 00 00 00       	push   $0xab
f0107e62:	68 81 65 13 f0       	push   $0xf0136581
f0107e67:	e8 99 83 ff ff       	call   f0100205 <_panic>

f0107e6c <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107e6c:	55                   	push   %ebp
f0107e6d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e72:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0107e78:	29 d0                	sub    %edx,%eax
f0107e7a:	c1 f8 03             	sar    $0x3,%eax
f0107e7d:	89 c2                	mov    %eax,%edx
f0107e7f:	89 d0                	mov    %edx,%eax
f0107e81:	c1 e0 02             	shl    $0x2,%eax
f0107e84:	01 d0                	add    %edx,%eax
f0107e86:	c1 e0 02             	shl    $0x2,%eax
f0107e89:	01 d0                	add    %edx,%eax
f0107e8b:	c1 e0 02             	shl    $0x2,%eax
f0107e8e:	01 d0                	add    %edx,%eax
f0107e90:	89 c1                	mov    %eax,%ecx
f0107e92:	c1 e1 08             	shl    $0x8,%ecx
f0107e95:	01 c8                	add    %ecx,%eax
f0107e97:	89 c1                	mov    %eax,%ecx
f0107e99:	c1 e1 10             	shl    $0x10,%ecx
f0107e9c:	01 c8                	add    %ecx,%eax
f0107e9e:	01 c0                	add    %eax,%eax
f0107ea0:	01 d0                	add    %edx,%eax
}
f0107ea2:	5d                   	pop    %ebp
f0107ea3:	c3                   	ret    

f0107ea4 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107ea4:	55                   	push   %ebp
f0107ea5:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107ea7:	ff 75 08             	pushl  0x8(%ebp)
f0107eaa:	e8 bd ff ff ff       	call   f0107e6c <to_frame_number>
f0107eaf:	83 c4 04             	add    $0x4,%esp
f0107eb2:	c1 e0 0c             	shl    $0xc,%eax
}
f0107eb5:	c9                   	leave  
f0107eb6:	c3                   	ret    

f0107eb7 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107eb7:	55                   	push   %ebp
f0107eb8:	89 e5                	mov    %esp,%ebp
f0107eba:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107ebd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ec4:	83 ec 04             	sub    $0x4,%esp
f0107ec7:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107eca:	50                   	push   %eax
f0107ecb:	ff 75 0c             	pushl  0xc(%ebp)
f0107ece:	ff 75 08             	pushl  0x8(%ebp)
f0107ed1:	e8 db eb ff ff       	call   f0106ab1 <get_page_table>
f0107ed6:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107ed9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107edc:	85 c0                	test   %eax,%eax
f0107ede:	74 75                	je     f0107f55 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107ee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ee3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ee6:	c1 ea 0c             	shr    $0xc,%edx
f0107ee9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107eef:	c1 e2 02             	shl    $0x2,%edx
f0107ef2:	01 d0                	add    %edx,%eax
f0107ef4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ef7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107efa:	c1 e9 0c             	shr    $0xc,%ecx
f0107efd:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f03:	c1 e1 02             	shl    $0x2,%ecx
f0107f06:	01 ca                	add    %ecx,%edx
f0107f08:	8b 12                	mov    (%edx),%edx
f0107f0a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107f0d:	f7 d1                	not    %ecx
f0107f0f:	21 ca                	and    %ecx,%edx
f0107f11:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f16:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f19:	c1 ea 0c             	shr    $0xc,%edx
f0107f1c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f22:	c1 e2 02             	shl    $0x2,%edx
f0107f25:	01 c2                	add    %eax,%edx
f0107f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f2a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f2d:	c1 e9 0c             	shr    $0xc,%ecx
f0107f30:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f36:	c1 e1 02             	shl    $0x2,%ecx
f0107f39:	01 c8                	add    %ecx,%eax
f0107f3b:	8b 00                	mov    (%eax),%eax
f0107f3d:	0b 45 10             	or     0x10(%ebp),%eax
f0107f40:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f45:	83 ec 08             	sub    $0x8,%esp
f0107f48:	50                   	push   %eax
f0107f49:	6a 00                	push   $0x0
f0107f4b:	e8 be e5 ff ff       	call   f010650e <tlb_invalidate>
f0107f50:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107f53:	eb 14                	jmp    f0107f69 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107f55:	83 ec 04             	sub    $0x4,%esp
f0107f58:	68 ef 65 13 f0       	push   $0xf01365ef
f0107f5d:	6a 19                	push   $0x19
f0107f5f:	68 0c 66 13 f0       	push   $0xf013660c
f0107f64:	e8 9c 82 ff ff       	call   f0100205 <_panic>
	}
}
f0107f69:	c9                   	leave  
f0107f6a:	c3                   	ret    

f0107f6b <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107f6b:	55                   	push   %ebp
f0107f6c:	89 e5                	mov    %esp,%ebp
f0107f6e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107f71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107f78:	83 ec 04             	sub    $0x4,%esp
f0107f7b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107f7e:	50                   	push   %eax
f0107f7f:	ff 75 0c             	pushl  0xc(%ebp)
f0107f82:	ff 75 08             	pushl  0x8(%ebp)
f0107f85:	e8 27 eb ff ff       	call   f0106ab1 <get_page_table>
f0107f8a:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107f8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f90:	85 c0                	test   %eax,%eax
f0107f92:	74 2b                	je     f0107fbf <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107f94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9a:	c1 ea 0c             	shr    $0xc,%edx
f0107f9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107fa3:	c1 e2 02             	shl    $0x2,%edx
f0107fa6:	01 d0                	add    %edx,%eax
f0107fa8:	8b 00                	mov    (%eax),%eax
f0107faa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107fad:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb7:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107fba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107fbd:	eb 05                	jmp    f0107fc4 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107fbf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107fc4:	c9                   	leave  
f0107fc5:	c3                   	ret    

f0107fc6 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107fc6:	55                   	push   %ebp
f0107fc7:	89 e5                	mov    %esp,%ebp
f0107fc9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107fcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107fd3:	83 ec 04             	sub    $0x4,%esp
f0107fd6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107fd9:	50                   	push   %eax
f0107fda:	ff 75 0c             	pushl  0xc(%ebp)
f0107fdd:	ff 75 08             	pushl  0x8(%ebp)
f0107fe0:	e8 cc ea ff ff       	call   f0106ab1 <get_page_table>
f0107fe5:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107feb:	85 c0                	test   %eax,%eax
f0107fed:	74 2d                	je     f010801c <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ff2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ff5:	c1 ea 0c             	shr    $0xc,%edx
f0107ff8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ffe:	c1 e2 02             	shl    $0x2,%edx
f0108001:	01 d0                	add    %edx,%eax
f0108003:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108009:	8b 45 0c             	mov    0xc(%ebp),%eax
f010800c:	83 ec 08             	sub    $0x8,%esp
f010800f:	50                   	push   %eax
f0108010:	6a 00                	push   $0x0
f0108012:	e8 f7 e4 ff ff       	call   f010650e <tlb_invalidate>
f0108017:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f010801a:	eb 14                	jmp    f0108030 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f010801c:	83 ec 04             	sub    $0x4,%esp
f010801f:	68 ef 65 13 f0       	push   $0xf01365ef
f0108024:	6a 42                	push   $0x42
f0108026:	68 0c 66 13 f0       	push   $0xf013660c
f010802b:	e8 d5 81 ff ff       	call   f0100205 <_panic>
	}
}
f0108030:	c9                   	leave  
f0108031:	c3                   	ret    

f0108032 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0108032:	55                   	push   %ebp
f0108033:	89 e5                	mov    %esp,%ebp
f0108035:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0108038:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010803f:	83 ec 04             	sub    $0x4,%esp
f0108042:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108045:	50                   	push   %eax
f0108046:	ff 75 0c             	pushl  0xc(%ebp)
f0108049:	ff 75 08             	pushl  0x8(%ebp)
f010804c:	e8 60 ea ff ff       	call   f0106ab1 <get_page_table>
f0108051:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0108054:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108057:	85 c0                	test   %eax,%eax
f0108059:	74 28                	je     f0108083 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f010805b:	83 ec 04             	sub    $0x4,%esp
f010805e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108061:	50                   	push   %eax
f0108062:	ff 75 0c             	pushl  0xc(%ebp)
f0108065:	ff 75 08             	pushl  0x8(%ebp)
f0108068:	e8 99 ed ff ff       	call   f0106e06 <get_frame_info>
f010806d:	83 c4 10             	add    $0x10,%esp
f0108070:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0108073:	83 ec 0c             	sub    $0xc,%esp
f0108076:	ff 75 f4             	pushl  -0xc(%ebp)
f0108079:	e8 26 fe ff ff       	call   f0107ea4 <to_physical_address>
f010807e:	83 c4 10             	add    $0x10,%esp
f0108081:	eb 05                	jmp    f0108088 <virtual_to_physical+0x56>
	}
	return -1;
f0108083:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0108088:	c9                   	leave  
f0108089:	c3                   	ret    

f010808a <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f010808a:	55                   	push   %ebp
f010808b:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f010808d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108090:	c1 e8 16             	shr    $0x16,%eax
f0108093:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010809a:	8b 45 08             	mov    0x8(%ebp),%eax
f010809d:	01 d0                	add    %edx,%eax
f010809f:	8b 00                	mov    (%eax),%eax
f01080a1:	83 e0 20             	and    $0x20,%eax
f01080a4:	85 c0                	test   %eax,%eax
f01080a6:	0f 95 c0             	setne  %al
f01080a9:	0f b6 c0             	movzbl %al,%eax
}
f01080ac:	5d                   	pop    %ebp
f01080ad:	c3                   	ret    

f01080ae <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01080ae:	55                   	push   %ebp
f01080af:	89 e5                	mov    %esp,%ebp
f01080b1:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01080b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080b7:	c1 e8 16             	shr    $0x16,%eax
f01080ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01080c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c4:	01 d0                	add    %edx,%eax
f01080c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c9:	c1 ea 16             	shr    $0x16,%edx
f01080cc:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01080d3:	8b 55 08             	mov    0x8(%ebp),%edx
f01080d6:	01 ca                	add    %ecx,%edx
f01080d8:	8b 12                	mov    (%edx),%edx
f01080da:	83 e2 df             	and    $0xffffffdf,%edx
f01080dd:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080e2:	83 ec 08             	sub    $0x8,%esp
f01080e5:	50                   	push   %eax
f01080e6:	6a 00                	push   $0x0
f01080e8:	e8 21 e4 ff ff       	call   f010650e <tlb_invalidate>
f01080ed:	83 c4 10             	add    $0x10,%esp
}
f01080f0:	90                   	nop
f01080f1:	c9                   	leave  
f01080f2:	c3                   	ret    

f01080f3 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01080f3:	55                   	push   %ebp
f01080f4:	89 e5                	mov    %esp,%ebp
f01080f6:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01080f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080fc:	c1 e8 16             	shr    $0x16,%eax
f01080ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108106:	8b 45 08             	mov    0x8(%ebp),%eax
f0108109:	01 d0                	add    %edx,%eax
f010810b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108111:	0f 20 d8             	mov    %cr3,%eax
f0108114:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108117:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010811a:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010811d:	90                   	nop
f010811e:	c9                   	leave  
f010811f:	c3                   	ret    

f0108120 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108120:	55                   	push   %ebp
f0108121:	89 e5                	mov    %esp,%ebp
f0108123:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108126:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010812d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108134:	eb 21                	jmp    f0108157 <env_page_ws_get_size+0x37>
f0108136:	8b 45 08             	mov    0x8(%ebp),%eax
f0108139:	8b 48 78             	mov    0x78(%eax),%ecx
f010813c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010813f:	89 d0                	mov    %edx,%eax
f0108141:	01 c0                	add    %eax,%eax
f0108143:	01 d0                	add    %edx,%eax
f0108145:	c1 e0 03             	shl    $0x3,%eax
f0108148:	01 c8                	add    %ecx,%eax
f010814a:	8a 40 04             	mov    0x4(%eax),%al
f010814d:	84 c0                	test   %al,%al
f010814f:	75 03                	jne    f0108154 <env_page_ws_get_size+0x34>
f0108151:	ff 45 f8             	incl   -0x8(%ebp)
f0108154:	ff 45 fc             	incl   -0x4(%ebp)
f0108157:	8b 45 08             	mov    0x8(%ebp),%eax
f010815a:	8b 50 74             	mov    0x74(%eax),%edx
f010815d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108160:	39 c2                	cmp    %eax,%edx
f0108162:	77 d2                	ja     f0108136 <env_page_ws_get_size+0x16>
	return counter;
f0108164:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108167:	c9                   	leave  
f0108168:	c3                   	ret    

f0108169 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108169:	55                   	push   %ebp
f010816a:	89 e5                	mov    %esp,%ebp
f010816c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010816f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108176:	eb 4c                	jmp    f01081c4 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108178:	8b 45 08             	mov    0x8(%ebp),%eax
f010817b:	8b 48 78             	mov    0x78(%eax),%ecx
f010817e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108181:	89 d0                	mov    %edx,%eax
f0108183:	01 c0                	add    %eax,%eax
f0108185:	01 d0                	add    %edx,%eax
f0108187:	c1 e0 03             	shl    $0x3,%eax
f010818a:	01 c8                	add    %ecx,%eax
f010818c:	8b 00                	mov    (%eax),%eax
f010818e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108191:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108194:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108199:	89 c2                	mov    %eax,%edx
f010819b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010819e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01081a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01081a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01081a9:	39 c2                	cmp    %eax,%edx
f01081ab:	75 14                	jne    f01081c1 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01081ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081b0:	83 ec 08             	sub    $0x8,%esp
f01081b3:	50                   	push   %eax
f01081b4:	ff 75 08             	pushl  0x8(%ebp)
f01081b7:	e8 b9 00 00 00       	call   f0108275 <env_page_ws_clear_entry>
f01081bc:	83 c4 10             	add    $0x10,%esp
			break;
f01081bf:	eb 10                	jmp    f01081d1 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01081c1:	ff 45 f4             	incl   -0xc(%ebp)
f01081c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c7:	8b 50 74             	mov    0x74(%eax),%edx
f01081ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081cd:	39 c2                	cmp    %eax,%edx
f01081cf:	77 a7                	ja     f0108178 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01081d1:	90                   	nop
f01081d2:	c9                   	leave  
f01081d3:	c3                   	ret    

f01081d4 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01081d4:	55                   	push   %ebp
f01081d5:	89 e5                	mov    %esp,%ebp
f01081d7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01081da:	8b 45 08             	mov    0x8(%ebp),%eax
f01081dd:	8b 40 74             	mov    0x74(%eax),%eax
f01081e0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081e3:	77 16                	ja     f01081fb <env_page_ws_set_entry+0x27>
f01081e5:	68 28 66 13 f0       	push   $0xf0136628
f01081ea:	68 5e 66 13 f0       	push   $0xf013665e
f01081ef:	6a 26                	push   $0x26
f01081f1:	68 74 66 13 f0       	push   $0xf0136674
f01081f6:	e8 0a 80 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01081fb:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108202:	76 16                	jbe    f010821a <env_page_ws_set_entry+0x46>
f0108204:	68 94 66 13 f0       	push   $0xf0136694
f0108209:	68 5e 66 13 f0       	push   $0xf013665e
f010820e:	6a 27                	push   $0x27
f0108210:	68 74 66 13 f0       	push   $0xf0136674
f0108215:	e8 eb 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010821a:	8b 45 08             	mov    0x8(%ebp),%eax
f010821d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108220:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108223:	89 d0                	mov    %edx,%eax
f0108225:	01 c0                	add    %eax,%eax
f0108227:	01 d0                	add    %edx,%eax
f0108229:	c1 e0 03             	shl    $0x3,%eax
f010822c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010822f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108232:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108235:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108238:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010823d:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f010823f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108242:	8b 48 78             	mov    0x78(%eax),%ecx
f0108245:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108248:	89 d0                	mov    %edx,%eax
f010824a:	01 c0                	add    %eax,%eax
f010824c:	01 d0                	add    %edx,%eax
f010824e:	c1 e0 03             	shl    $0x3,%eax
f0108251:	01 c8                	add    %ecx,%eax
f0108253:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108257:	8b 45 08             	mov    0x8(%ebp),%eax
f010825a:	8b 48 78             	mov    0x78(%eax),%ecx
f010825d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108260:	89 d0                	mov    %edx,%eax
f0108262:	01 c0                	add    %eax,%eax
f0108264:	01 d0                	add    %edx,%eax
f0108266:	c1 e0 03             	shl    $0x3,%eax
f0108269:	01 c8                	add    %ecx,%eax
f010826b:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108272:	90                   	nop
}
f0108273:	c9                   	leave  
f0108274:	c3                   	ret    

f0108275 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108275:	55                   	push   %ebp
f0108276:	89 e5                	mov    %esp,%ebp
f0108278:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010827b:	8b 45 08             	mov    0x8(%ebp),%eax
f010827e:	8b 40 74             	mov    0x74(%eax),%eax
f0108281:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108284:	77 16                	ja     f010829c <env_page_ws_clear_entry+0x27>
f0108286:	68 c8 66 13 f0       	push   $0xf01366c8
f010828b:	68 5e 66 13 f0       	push   $0xf013665e
f0108290:	6a 32                	push   $0x32
f0108292:	68 74 66 13 f0       	push   $0xf0136674
f0108297:	e8 69 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 48 78             	mov    0x78(%eax),%ecx
f01082a2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082a5:	89 d0                	mov    %edx,%eax
f01082a7:	01 c0                	add    %eax,%eax
f01082a9:	01 d0                	add    %edx,%eax
f01082ab:	c1 e0 03             	shl    $0x3,%eax
f01082ae:	01 c8                	add    %ecx,%eax
f01082b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01082b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b9:	8b 48 78             	mov    0x78(%eax),%ecx
f01082bc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082bf:	89 d0                	mov    %edx,%eax
f01082c1:	01 c0                	add    %eax,%eax
f01082c3:	01 d0                	add    %edx,%eax
f01082c5:	c1 e0 03             	shl    $0x3,%eax
f01082c8:	01 c8                	add    %ecx,%eax
f01082ca:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01082ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d1:	8b 48 78             	mov    0x78(%eax),%ecx
f01082d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082d7:	89 d0                	mov    %edx,%eax
f01082d9:	01 c0                	add    %eax,%eax
f01082db:	01 d0                	add    %edx,%eax
f01082dd:	c1 e0 03             	shl    $0x3,%eax
f01082e0:	01 c8                	add    %ecx,%eax
f01082e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01082e9:	90                   	nop
f01082ea:	c9                   	leave  
f01082eb:	c3                   	ret    

f01082ec <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01082ec:	55                   	push   %ebp
f01082ed:	89 e5                	mov    %esp,%ebp
f01082ef:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01082f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f5:	8b 40 74             	mov    0x74(%eax),%eax
f01082f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01082fb:	77 16                	ja     f0108313 <env_page_ws_get_virtual_address+0x27>
f01082fd:	68 c8 66 13 f0       	push   $0xf01366c8
f0108302:	68 5e 66 13 f0       	push   $0xf013665e
f0108307:	6a 3a                	push   $0x3a
f0108309:	68 74 66 13 f0       	push   $0xf0136674
f010830e:	e8 f2 7e ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108313:	8b 45 08             	mov    0x8(%ebp),%eax
f0108316:	8b 48 78             	mov    0x78(%eax),%ecx
f0108319:	8b 55 0c             	mov    0xc(%ebp),%edx
f010831c:	89 d0                	mov    %edx,%eax
f010831e:	01 c0                	add    %eax,%eax
f0108320:	01 d0                	add    %edx,%eax
f0108322:	c1 e0 03             	shl    $0x3,%eax
f0108325:	01 c8                	add    %ecx,%eax
f0108327:	8b 00                	mov    (%eax),%eax
f0108329:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010832c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010832f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108334:	c9                   	leave  
f0108335:	c3                   	ret    

f0108336 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108336:	55                   	push   %ebp
f0108337:	89 e5                	mov    %esp,%ebp
f0108339:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010833c:	8b 45 08             	mov    0x8(%ebp),%eax
f010833f:	8b 40 74             	mov    0x74(%eax),%eax
f0108342:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108345:	77 16                	ja     f010835d <env_page_ws_get_time_stamp+0x27>
f0108347:	68 c8 66 13 f0       	push   $0xf01366c8
f010834c:	68 5e 66 13 f0       	push   $0xf013665e
f0108351:	6a 40                	push   $0x40
f0108353:	68 74 66 13 f0       	push   $0xf0136674
f0108358:	e8 a8 7e ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010835d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108360:	8b 48 78             	mov    0x78(%eax),%ecx
f0108363:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108366:	89 d0                	mov    %edx,%eax
f0108368:	01 c0                	add    %eax,%eax
f010836a:	01 d0                	add    %edx,%eax
f010836c:	c1 e0 03             	shl    $0x3,%eax
f010836f:	01 c8                	add    %ecx,%eax
f0108371:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108374:	c9                   	leave  
f0108375:	c3                   	ret    

f0108376 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108376:	55                   	push   %ebp
f0108377:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108379:	8b 45 08             	mov    0x8(%ebp),%eax
f010837c:	8b 48 78             	mov    0x78(%eax),%ecx
f010837f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108382:	89 d0                	mov    %edx,%eax
f0108384:	01 c0                	add    %eax,%eax
f0108386:	01 d0                	add    %edx,%eax
f0108388:	c1 e0 03             	shl    $0x3,%eax
f010838b:	01 c8                	add    %ecx,%eax
f010838d:	8a 40 04             	mov    0x4(%eax),%al
f0108390:	0f b6 c0             	movzbl %al,%eax
}
f0108393:	5d                   	pop    %ebp
f0108394:	c3                   	ret    

f0108395 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108395:	55                   	push   %ebp
f0108396:	89 e5                	mov    %esp,%ebp
f0108398:	53                   	push   %ebx
f0108399:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010839c:	83 ec 0c             	sub    $0xc,%esp
f010839f:	6a 02                	push   $0x2
f01083a1:	e8 a7 5c 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f01083a6:	83 c4 10             	add    $0x10,%esp
f01083a9:	85 c0                	test   %eax,%eax
f01083ab:	0f 84 fe 00 00 00    	je     f01084af <env_page_ws_print+0x11a>
	{
		int i = 0;
f01083b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01083b8:	83 ec 0c             	sub    $0xc,%esp
f01083bb:	68 00 67 13 f0       	push   $0xf0136700
f01083c0:	e8 49 89 ff ff       	call   f0100d0e <cprintf>
f01083c5:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01083cb:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01083d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01083d4:	eb 2c                	jmp    f0108402 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01083d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083d9:	8b 10                	mov    (%eax),%edx
f01083db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083de:	8d 48 01             	lea    0x1(%eax),%ecx
f01083e1:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01083e4:	83 ec 04             	sub    $0x4,%esp
f01083e7:	52                   	push   %edx
f01083e8:	50                   	push   %eax
f01083e9:	68 1a 67 13 f0       	push   $0xf013671a
f01083ee:	e8 1b 89 ff ff       	call   f0100d0e <cprintf>
f01083f3:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f9:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01083ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108402:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108406:	74 08                	je     f0108410 <env_page_ws_print+0x7b>
f0108408:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010840b:	8b 40 10             	mov    0x10(%eax),%eax
f010840e:	eb 05                	jmp    f0108415 <env_page_ws_print+0x80>
f0108410:	b8 00 00 00 00       	mov    $0x0,%eax
f0108415:	8b 55 08             	mov    0x8(%ebp),%edx
f0108418:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010841e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108421:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108427:	85 c0                	test   %eax,%eax
f0108429:	75 ab                	jne    f01083d6 <env_page_ws_print+0x41>
f010842b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010842f:	75 a5                	jne    f01083d6 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108431:	83 ec 0c             	sub    $0xc,%esp
f0108434:	68 22 67 13 f0       	push   $0xf0136722
f0108439:	e8 d0 88 ff ff       	call   f0100d0e <cprintf>
f010843e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108441:	8b 45 08             	mov    0x8(%ebp),%eax
f0108444:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010844a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010844d:	eb 2c                	jmp    f010847b <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010844f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108452:	8b 10                	mov    (%eax),%edx
f0108454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108457:	8d 48 01             	lea    0x1(%eax),%ecx
f010845a:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010845d:	83 ec 04             	sub    $0x4,%esp
f0108460:	52                   	push   %edx
f0108461:	50                   	push   %eax
f0108462:	68 1a 67 13 f0       	push   $0xf013671a
f0108467:	e8 a2 88 ff ff       	call   f0100d0e <cprintf>
f010846c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010846f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108472:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108478:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010847b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010847f:	74 08                	je     f0108489 <env_page_ws_print+0xf4>
f0108481:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108484:	8b 40 10             	mov    0x10(%eax),%eax
f0108487:	eb 05                	jmp    f010848e <env_page_ws_print+0xf9>
f0108489:	b8 00 00 00 00       	mov    $0x0,%eax
f010848e:	8b 55 08             	mov    0x8(%ebp),%edx
f0108491:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108497:	8b 45 08             	mov    0x8(%ebp),%eax
f010849a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01084a0:	85 c0                	test   %eax,%eax
f01084a2:	75 ab                	jne    f010844f <env_page_ws_print+0xba>
f01084a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01084a8:	75 a5                	jne    f010844f <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084aa:	e9 95 01 00 00       	jmp    f0108644 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01084af:	83 ec 0c             	sub    $0xc,%esp
f01084b2:	68 3d 67 13 f0       	push   $0xf013673d
f01084b7:	e8 52 88 ff ff       	call   f0100d0e <cprintf>
f01084bc:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01084bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01084c6:	e9 6a 01 00 00       	jmp    f0108635 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01084cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01084ce:	8b 48 78             	mov    0x78(%eax),%ecx
f01084d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084d4:	89 d0                	mov    %edx,%eax
f01084d6:	01 c0                	add    %eax,%eax
f01084d8:	01 d0                	add    %edx,%eax
f01084da:	c1 e0 03             	shl    $0x3,%eax
f01084dd:	01 c8                	add    %ecx,%eax
f01084df:	8a 40 04             	mov    0x4(%eax),%al
f01084e2:	84 c0                	test   %al,%al
f01084e4:	74 43                	je     f0108529 <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01084e6:	83 ec 0c             	sub    $0xc,%esp
f01084e9:	68 47 67 13 f0       	push   $0xf0136747
f01084ee:	e8 1b 88 ff ff       	call   f0100d0e <cprintf>
f01084f3:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01084f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01084f9:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084ff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108502:	75 10                	jne    f0108514 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108504:	83 ec 0c             	sub    $0xc,%esp
f0108507:	68 56 67 13 f0       	push   $0xf0136756
f010850c:	e8 fd 87 ff ff       	call   f0100d0e <cprintf>
f0108511:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108514:	83 ec 0c             	sub    $0xc,%esp
f0108517:	68 5c 67 13 f0       	push   $0xf013675c
f010851c:	e8 ed 87 ff ff       	call   f0100d0e <cprintf>
f0108521:	83 c4 10             	add    $0x10,%esp
				continue;
f0108524:	e9 09 01 00 00       	jmp    f0108632 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108529:	8b 45 08             	mov    0x8(%ebp),%eax
f010852c:	8b 48 78             	mov    0x78(%eax),%ecx
f010852f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108532:	89 d0                	mov    %edx,%eax
f0108534:	01 c0                	add    %eax,%eax
f0108536:	01 d0                	add    %edx,%eax
f0108538:	c1 e0 03             	shl    $0x3,%eax
f010853b:	01 c8                	add    %ecx,%eax
f010853d:	8b 00                	mov    (%eax),%eax
f010853f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108542:	8b 45 08             	mov    0x8(%ebp),%eax
f0108545:	8b 48 78             	mov    0x78(%eax),%ecx
f0108548:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010854b:	89 d0                	mov    %edx,%eax
f010854d:	01 c0                	add    %eax,%eax
f010854f:	01 d0                	add    %edx,%eax
f0108551:	c1 e0 03             	shl    $0x3,%eax
f0108554:	01 c8                	add    %ecx,%eax
f0108556:	8b 40 08             	mov    0x8(%eax),%eax
f0108559:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f010855c:	8b 45 08             	mov    0x8(%ebp),%eax
f010855f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108562:	83 ec 08             	sub    $0x8,%esp
f0108565:	ff 75 e8             	pushl  -0x18(%ebp)
f0108568:	50                   	push   %eax
f0108569:	e8 fd f9 ff ff       	call   f0107f6b <pt_get_page_permissions>
f010856e:	83 c4 10             	add    $0x10,%esp
f0108571:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108574:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108577:	83 e0 40             	and    $0x40,%eax
f010857a:	85 c0                	test   %eax,%eax
f010857c:	0f 95 c0             	setne  %al
f010857f:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108582:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108585:	83 e0 20             	and    $0x20,%eax
f0108588:	85 c0                	test   %eax,%eax
f010858a:	0f 95 c0             	setne  %al
f010858d:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108590:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108593:	25 00 02 00 00       	and    $0x200,%eax
f0108598:	85 c0                	test   %eax,%eax
f010859a:	0f 95 c0             	setne  %al
f010859d:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f01085a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a3:	8b 48 78             	mov    0x78(%eax),%ecx
f01085a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085a9:	89 d0                	mov    %edx,%eax
f01085ab:	01 c0                	add    %eax,%eax
f01085ad:	01 d0                	add    %edx,%eax
f01085af:	c1 e0 03             	shl    $0x3,%eax
f01085b2:	01 c8                	add    %ecx,%eax
f01085b4:	8b 00                	mov    (%eax),%eax
f01085b6:	83 ec 04             	sub    $0x4,%esp
f01085b9:	50                   	push   %eax
f01085ba:	ff 75 ec             	pushl  -0x14(%ebp)
f01085bd:	68 5e 67 13 f0       	push   $0xf013675e
f01085c2:	e8 47 87 ff ff       	call   f0100d0e <cprintf>
f01085c7:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01085ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01085cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01085d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d3:	89 d0                	mov    %edx,%eax
f01085d5:	01 c0                	add    %eax,%eax
f01085d7:	01 d0                	add    %edx,%eax
f01085d9:	c1 e0 03             	shl    $0x3,%eax
f01085dc:	01 c8                	add    %ecx,%eax
f01085de:	8b 58 0c             	mov    0xc(%eax),%ebx
f01085e1:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01085e5:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01085e9:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01085ed:	83 ec 08             	sub    $0x8,%esp
f01085f0:	53                   	push   %ebx
f01085f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085f4:	51                   	push   %ecx
f01085f5:	52                   	push   %edx
f01085f6:	50                   	push   %eax
f01085f7:	68 70 67 13 f0       	push   $0xf0136770
f01085fc:	e8 0d 87 ff ff       	call   f0100d0e <cprintf>
f0108601:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108604:	8b 45 08             	mov    0x8(%ebp),%eax
f0108607:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010860d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108610:	75 10                	jne    f0108622 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108612:	83 ec 0c             	sub    $0xc,%esp
f0108615:	68 b7 67 13 f0       	push   $0xf01367b7
f010861a:	e8 ef 86 ff ff       	call   f0100d0e <cprintf>
f010861f:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108622:	83 ec 0c             	sub    $0xc,%esp
f0108625:	68 5c 67 13 f0       	push   $0xf013675c
f010862a:	e8 df 86 ff ff       	call   f0100d0e <cprintf>
f010862f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108632:	ff 45 ec             	incl   -0x14(%ebp)
f0108635:	8b 45 08             	mov    0x8(%ebp),%eax
f0108638:	8b 40 74             	mov    0x74(%eax),%eax
f010863b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010863e:	0f 87 87 fe ff ff    	ja     f01084cb <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108644:	90                   	nop
f0108645:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108648:	c9                   	leave  
f0108649:	c3                   	ret    

f010864a <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f010864a:	55                   	push   %ebp
f010864b:	89 e5                	mov    %esp,%ebp
f010864d:	53                   	push   %ebx
f010864e:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108651:	83 ec 0c             	sub    $0xc,%esp
f0108654:	68 bc 67 13 f0       	push   $0xf01367bc
f0108659:	e8 b0 86 ff ff       	call   f0100d0e <cprintf>
f010865e:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108661:	83 ec 0c             	sub    $0xc,%esp
f0108664:	68 f1 67 13 f0       	push   $0xf01367f1
f0108669:	e8 a0 86 ff ff       	call   f0100d0e <cprintf>
f010866e:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108678:	e9 10 01 00 00       	jmp    f010878d <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f010867d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108680:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108683:	89 d0                	mov    %edx,%eax
f0108685:	01 c0                	add    %eax,%eax
f0108687:	01 d0                	add    %edx,%eax
f0108689:	c1 e0 03             	shl    $0x3,%eax
f010868c:	01 c8                	add    %ecx,%eax
f010868e:	83 e8 80             	sub    $0xffffff80,%eax
f0108691:	8a 00                	mov    (%eax),%al
f0108693:	84 c0                	test   %al,%al
f0108695:	74 43                	je     f01086da <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108697:	83 ec 0c             	sub    $0xc,%esp
f010869a:	68 47 67 13 f0       	push   $0xf0136747
f010869f:	e8 6a 86 ff ff       	call   f0100d0e <cprintf>
f01086a4:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01086a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01086aa:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01086b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01086b3:	75 10                	jne    f01086c5 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01086b5:	83 ec 0c             	sub    $0xc,%esp
f01086b8:	68 56 67 13 f0       	push   $0xf0136756
f01086bd:	e8 4c 86 ff ff       	call   f0100d0e <cprintf>
f01086c2:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01086c5:	83 ec 0c             	sub    $0xc,%esp
f01086c8:	68 5c 67 13 f0       	push   $0xf013675c
f01086cd:	e8 3c 86 ff ff       	call   f0100d0e <cprintf>
f01086d2:	83 c4 10             	add    $0x10,%esp
			continue;
f01086d5:	e9 b0 00 00 00       	jmp    f010878a <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01086da:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086e0:	89 d0                	mov    %edx,%eax
f01086e2:	01 c0                	add    %eax,%eax
f01086e4:	01 d0                	add    %edx,%eax
f01086e6:	c1 e0 03             	shl    $0x3,%eax
f01086e9:	01 c8                	add    %ecx,%eax
f01086eb:	83 c0 7c             	add    $0x7c,%eax
f01086ee:	8b 00                	mov    (%eax),%eax
f01086f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01086f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086f9:	89 d0                	mov    %edx,%eax
f01086fb:	01 c0                	add    %eax,%eax
f01086fd:	01 d0                	add    %edx,%eax
f01086ff:	c1 e0 03             	shl    $0x3,%eax
f0108702:	01 c8                	add    %ecx,%eax
f0108704:	83 c0 7c             	add    $0x7c,%eax
f0108707:	8b 00                	mov    (%eax),%eax
f0108709:	83 ec 04             	sub    $0x4,%esp
f010870c:	50                   	push   %eax
f010870d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108710:	68 fc 67 13 f0       	push   $0xf01367fc
f0108715:	e8 f4 85 ff ff       	call   f0100d0e <cprintf>
f010871a:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f010871d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108720:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108723:	89 d0                	mov    %edx,%eax
f0108725:	01 c0                	add    %eax,%eax
f0108727:	01 d0                	add    %edx,%eax
f0108729:	c1 e0 03             	shl    $0x3,%eax
f010872c:	01 c8                	add    %ecx,%eax
f010872e:	05 84 00 00 00       	add    $0x84,%eax
f0108733:	8b 18                	mov    (%eax),%ebx
f0108735:	8b 45 08             	mov    0x8(%ebp),%eax
f0108738:	8b 40 5c             	mov    0x5c(%eax),%eax
f010873b:	83 ec 08             	sub    $0x8,%esp
f010873e:	ff 75 f0             	pushl  -0x10(%ebp)
f0108741:	50                   	push   %eax
f0108742:	e8 43 f9 ff ff       	call   f010808a <pd_is_table_used>
f0108747:	83 c4 10             	add    $0x10,%esp
f010874a:	83 ec 04             	sub    $0x4,%esp
f010874d:	53                   	push   %ebx
f010874e:	50                   	push   %eax
f010874f:	68 14 68 13 f0       	push   $0xf0136814
f0108754:	e8 b5 85 ff ff       	call   f0100d0e <cprintf>
f0108759:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f010875c:	8b 45 08             	mov    0x8(%ebp),%eax
f010875f:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108765:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108768:	75 10                	jne    f010877a <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f010876a:	83 ec 0c             	sub    $0xc,%esp
f010876d:	68 b7 67 13 f0       	push   $0xf01367b7
f0108772:	e8 97 85 ff ff       	call   f0100d0e <cprintf>
f0108777:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010877a:	83 ec 0c             	sub    $0xc,%esp
f010877d:	68 5c 67 13 f0       	push   $0xf013675c
f0108782:	e8 87 85 ff ff       	call   f0100d0e <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010878a:	ff 45 f4             	incl   -0xc(%ebp)
f010878d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108791:	0f 86 e6 fe ff ff    	jbe    f010867d <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108797:	90                   	nop
f0108798:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010879b:	c9                   	leave  
f010879c:	c3                   	ret    

f010879d <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010879d:	55                   	push   %ebp
f010879e:	89 e5                	mov    %esp,%ebp
f01087a0:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01087a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01087aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01087b1:	eb 20                	jmp    f01087d3 <env_table_ws_get_size+0x36>
f01087b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087b6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01087b9:	89 d0                	mov    %edx,%eax
f01087bb:	01 c0                	add    %eax,%eax
f01087bd:	01 d0                	add    %edx,%eax
f01087bf:	c1 e0 03             	shl    $0x3,%eax
f01087c2:	01 c8                	add    %ecx,%eax
f01087c4:	83 e8 80             	sub    $0xffffff80,%eax
f01087c7:	8a 00                	mov    (%eax),%al
f01087c9:	84 c0                	test   %al,%al
f01087cb:	75 03                	jne    f01087d0 <env_table_ws_get_size+0x33>
f01087cd:	ff 45 f8             	incl   -0x8(%ebp)
f01087d0:	ff 45 fc             	incl   -0x4(%ebp)
f01087d3:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01087d7:	7e da                	jle    f01087b3 <env_table_ws_get_size+0x16>
	return counter;
f01087d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01087dc:	c9                   	leave  
f01087dd:	c3                   	ret    

f01087de <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01087de:	55                   	push   %ebp
f01087df:	89 e5                	mov    %esp,%ebp
f01087e1:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01087e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01087eb:	eb 4c                	jmp    f0108839 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01087ed:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f3:	89 d0                	mov    %edx,%eax
f01087f5:	01 c0                	add    %eax,%eax
f01087f7:	01 d0                	add    %edx,%eax
f01087f9:	c1 e0 03             	shl    $0x3,%eax
f01087fc:	01 c8                	add    %ecx,%eax
f01087fe:	83 c0 7c             	add    $0x7c,%eax
f0108801:	8b 00                	mov    (%eax),%eax
f0108803:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108806:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108809:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010880e:	89 c2                	mov    %eax,%edx
f0108810:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108813:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108816:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108819:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010881e:	39 c2                	cmp    %eax,%edx
f0108820:	75 14                	jne    f0108836 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108822:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108825:	83 ec 08             	sub    $0x8,%esp
f0108828:	50                   	push   %eax
f0108829:	ff 75 08             	pushl  0x8(%ebp)
f010882c:	e8 b8 00 00 00       	call   f01088e9 <env_table_ws_clear_entry>
f0108831:	83 c4 10             	add    $0x10,%esp
			break;
f0108834:	eb 09                	jmp    f010883f <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108836:	ff 45 f4             	incl   -0xc(%ebp)
f0108839:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010883d:	7e ae                	jle    f01087ed <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010883f:	90                   	nop
f0108840:	c9                   	leave  
f0108841:	c3                   	ret    

f0108842 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108842:	55                   	push   %ebp
f0108843:	89 e5                	mov    %esp,%ebp
f0108845:	53                   	push   %ebx
f0108846:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108849:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010884d:	76 19                	jbe    f0108868 <env_table_ws_set_entry+0x26>
f010884f:	68 38 68 13 f0       	push   $0xf0136838
f0108854:	68 5e 66 13 f0       	push   $0xf013665e
f0108859:	68 b6 00 00 00       	push   $0xb6
f010885e:	68 74 66 13 f0       	push   $0xf0136674
f0108863:	e8 9d 79 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108868:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010886f:	76 19                	jbe    f010888a <env_table_ws_set_entry+0x48>
f0108871:	68 94 66 13 f0       	push   $0xf0136694
f0108876:	68 5e 66 13 f0       	push   $0xf013665e
f010887b:	68 b7 00 00 00       	push   $0xb7
f0108880:	68 74 66 13 f0       	push   $0xf0136674
f0108885:	e8 7b 79 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010888a:	8b 45 10             	mov    0x10(%ebp),%eax
f010888d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108890:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108893:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108898:	89 c1                	mov    %eax,%ecx
f010889a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010889d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088a0:	89 d0                	mov    %edx,%eax
f01088a2:	01 c0                	add    %eax,%eax
f01088a4:	01 d0                	add    %edx,%eax
f01088a6:	c1 e0 03             	shl    $0x3,%eax
f01088a9:	01 d8                	add    %ebx,%eax
f01088ab:	83 c0 7c             	add    $0x7c,%eax
f01088ae:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01088b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088b3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088b6:	89 d0                	mov    %edx,%eax
f01088b8:	01 c0                	add    %eax,%eax
f01088ba:	01 d0                	add    %edx,%eax
f01088bc:	c1 e0 03             	shl    $0x3,%eax
f01088bf:	01 c8                	add    %ecx,%eax
f01088c1:	83 e8 80             	sub    $0xffffff80,%eax
f01088c4:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01088c7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088ca:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088cd:	89 d0                	mov    %edx,%eax
f01088cf:	01 c0                	add    %eax,%eax
f01088d1:	01 d0                	add    %edx,%eax
f01088d3:	c1 e0 03             	shl    $0x3,%eax
f01088d6:	01 c8                	add    %ecx,%eax
f01088d8:	05 84 00 00 00       	add    $0x84,%eax
f01088dd:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01088e3:	90                   	nop
}
f01088e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01088e7:	c9                   	leave  
f01088e8:	c3                   	ret    

f01088e9 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01088e9:	55                   	push   %ebp
f01088ea:	89 e5                	mov    %esp,%ebp
f01088ec:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01088ef:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01088f3:	76 19                	jbe    f010890e <env_table_ws_clear_entry+0x25>
f01088f5:	68 38 68 13 f0       	push   $0xf0136838
f01088fa:	68 5e 66 13 f0       	push   $0xf013665e
f01088ff:	68 c2 00 00 00       	push   $0xc2
f0108904:	68 74 66 13 f0       	push   $0xf0136674
f0108909:	e8 f7 78 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f010890e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108911:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108914:	89 d0                	mov    %edx,%eax
f0108916:	01 c0                	add    %eax,%eax
f0108918:	01 d0                	add    %edx,%eax
f010891a:	c1 e0 03             	shl    $0x3,%eax
f010891d:	01 c8                	add    %ecx,%eax
f010891f:	83 c0 7c             	add    $0x7c,%eax
f0108922:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108928:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010892b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010892e:	89 d0                	mov    %edx,%eax
f0108930:	01 c0                	add    %eax,%eax
f0108932:	01 d0                	add    %edx,%eax
f0108934:	c1 e0 03             	shl    $0x3,%eax
f0108937:	01 c8                	add    %ecx,%eax
f0108939:	83 e8 80             	sub    $0xffffff80,%eax
f010893c:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010893f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108942:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108945:	89 d0                	mov    %edx,%eax
f0108947:	01 c0                	add    %eax,%eax
f0108949:	01 d0                	add    %edx,%eax
f010894b:	c1 e0 03             	shl    $0x3,%eax
f010894e:	01 c8                	add    %ecx,%eax
f0108950:	05 84 00 00 00       	add    $0x84,%eax
f0108955:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010895b:	90                   	nop
f010895c:	c9                   	leave  
f010895d:	c3                   	ret    

f010895e <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010895e:	55                   	push   %ebp
f010895f:	89 e5                	mov    %esp,%ebp
f0108961:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108964:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108968:	76 19                	jbe    f0108983 <env_table_ws_get_virtual_address+0x25>
f010896a:	68 38 68 13 f0       	push   $0xf0136838
f010896f:	68 5e 66 13 f0       	push   $0xf013665e
f0108974:	68 ca 00 00 00       	push   $0xca
f0108979:	68 74 66 13 f0       	push   $0xf0136674
f010897e:	e8 82 78 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108983:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108986:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108989:	89 d0                	mov    %edx,%eax
f010898b:	01 c0                	add    %eax,%eax
f010898d:	01 d0                	add    %edx,%eax
f010898f:	c1 e0 03             	shl    $0x3,%eax
f0108992:	01 c8                	add    %ecx,%eax
f0108994:	83 c0 7c             	add    $0x7c,%eax
f0108997:	8b 00                	mov    (%eax),%eax
f0108999:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010899c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010899f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01089a4:	c9                   	leave  
f01089a5:	c3                   	ret    

f01089a6 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01089a6:	55                   	push   %ebp
f01089a7:	89 e5                	mov    %esp,%ebp
f01089a9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089ac:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089b0:	76 19                	jbe    f01089cb <env_table_ws_get_time_stamp+0x25>
f01089b2:	68 38 68 13 f0       	push   $0xf0136838
f01089b7:	68 5e 66 13 f0       	push   $0xf013665e
f01089bc:	68 d1 00 00 00       	push   $0xd1
f01089c1:	68 74 66 13 f0       	push   $0xf0136674
f01089c6:	e8 3a 78 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01089cb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089ce:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089d1:	89 d0                	mov    %edx,%eax
f01089d3:	01 c0                	add    %eax,%eax
f01089d5:	01 d0                	add    %edx,%eax
f01089d7:	c1 e0 03             	shl    $0x3,%eax
f01089da:	01 c8                	add    %ecx,%eax
f01089dc:	05 84 00 00 00       	add    $0x84,%eax
f01089e1:	8b 00                	mov    (%eax),%eax
}
f01089e3:	c9                   	leave  
f01089e4:	c3                   	ret    

f01089e5 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01089e5:	55                   	push   %ebp
f01089e6:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01089e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089eb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089ee:	89 d0                	mov    %edx,%eax
f01089f0:	01 c0                	add    %eax,%eax
f01089f2:	01 d0                	add    %edx,%eax
f01089f4:	c1 e0 03             	shl    $0x3,%eax
f01089f7:	01 c8                	add    %ecx,%eax
f01089f9:	83 e8 80             	sub    $0xffffff80,%eax
f01089fc:	8a 00                	mov    (%eax),%al
f01089fe:	0f b6 c0             	movzbl %al,%eax
}
f0108a01:	5d                   	pop    %ebp
f0108a02:	c3                   	ret    

f0108a03 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108a03:	55                   	push   %ebp
f0108a04:	89 e5                	mov    %esp,%ebp
f0108a06:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108a09:	83 ec 04             	sub    $0x4,%esp
f0108a0c:	68 6c 68 13 f0       	push   $0xf013686c
f0108a11:	68 e5 00 00 00       	push   $0xe5
f0108a16:	68 74 66 13 f0       	push   $0xf0136674
f0108a1b:	e8 e5 77 ff ff       	call   f0100205 <_panic>

f0108a20 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108a20:	55                   	push   %ebp
f0108a21:	89 e5                	mov    %esp,%ebp
f0108a23:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108a26:	83 ec 04             	sub    $0x4,%esp
f0108a29:	68 98 68 13 f0       	push   $0xf0136898
f0108a2e:	68 ec 00 00 00       	push   $0xec
f0108a33:	68 74 66 13 f0       	push   $0xf0136674
f0108a38:	e8 c8 77 ff ff       	call   f0100205 <_panic>

f0108a3d <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108a3d:	55                   	push   %ebp
f0108a3e:	89 e5                	mov    %esp,%ebp
f0108a40:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108a43:	83 ec 04             	sub    $0x4,%esp
f0108a46:	68 c8 68 13 f0       	push   $0xf01368c8
f0108a4b:	68 f3 00 00 00       	push   $0xf3
f0108a50:	68 74 66 13 f0       	push   $0xf0136674
f0108a55:	e8 ab 77 ff ff       	call   f0100205 <_panic>

f0108a5a <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108a5a:	55                   	push   %ebp
f0108a5b:	89 e5                	mov    %esp,%ebp
f0108a5d:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108a60:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f0108a66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a69:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108a6c:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a6f:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a74:	85 c0                	test   %eax,%eax
f0108a76:	74 11                	je     f0108a89 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a78:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a86:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f0108a89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a8c:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a91:	85 c0                	test   %eax,%eax
f0108a93:	74 11                	je     f0108aa6 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108a95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a98:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108a9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108a9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108aa3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f0108aa6:	8b 45 14             	mov    0x14(%ebp),%eax
f0108aa9:	c1 e0 0c             	shl    $0xc,%eax
f0108aac:	89 c2                	mov    %eax,%edx
f0108aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ab1:	01 d0                	add    %edx,%eax
f0108ab3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ab9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108abc:	eb 4b                	jmp    f0108b09 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108abe:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108ac5:	83 ec 04             	sub    $0x4,%esp
f0108ac8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108acb:	50                   	push   %eax
f0108acc:	ff 75 ec             	pushl  -0x14(%ebp)
f0108acf:	ff 75 08             	pushl  0x8(%ebp)
f0108ad2:	e8 da df ff ff       	call   f0106ab1 <get_page_table>
f0108ad7:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108ada:	83 ec 04             	sub    $0x4,%esp
f0108add:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ae0:	50                   	push   %eax
f0108ae1:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ae4:	ff 75 08             	pushl  0x8(%ebp)
f0108ae7:	e8 1a e3 ff ff       	call   f0106e06 <get_frame_info>
f0108aec:	83 c4 10             	add    $0x10,%esp
f0108aef:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108af2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108af6:	74 0a                	je     f0108b02 <cut_paste_pages+0xa8>
			return -1;
f0108af8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108afd:	e9 d4 00 00 00       	jmp    f0108bd6 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108b02:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108b09:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108b0c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108b0f:	72 ad                	jb     f0108abe <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108b17:	e9 a9 00 00 00       	jmp    f0108bc5 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108b1c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108b23:	83 ec 04             	sub    $0x4,%esp
f0108b26:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b29:	50                   	push   %eax
f0108b2a:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b2d:	ff 75 08             	pushl  0x8(%ebp)
f0108b30:	e8 7c df ff ff       	call   f0106ab1 <get_page_table>
f0108b35:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108b38:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b3b:	85 c0                	test   %eax,%eax
f0108b3d:	75 14                	jne    f0108b53 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108b3f:	83 ec 08             	sub    $0x8,%esp
f0108b42:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b45:	ff 75 08             	pushl  0x8(%ebp)
f0108b48:	e8 ba e0 ff ff       	call   f0106c07 <create_page_table>
f0108b4d:	83 c4 10             	add    $0x10,%esp
f0108b50:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108b53:	83 ec 04             	sub    $0x4,%esp
f0108b56:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b59:	50                   	push   %eax
f0108b5a:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b5d:	ff 75 08             	pushl  0x8(%ebp)
f0108b60:	e8 a1 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108b65:	83 c4 10             	add    $0x10,%esp
f0108b68:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108b6b:	83 ec 08             	sub    $0x8,%esp
f0108b6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b71:	ff 75 08             	pushl  0x8(%ebp)
f0108b74:	e8 f2 f3 ff ff       	call   f0107f6b <pt_get_page_permissions>
f0108b79:	83 c4 10             	add    $0x10,%esp
f0108b7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108b7f:	83 ec 08             	sub    $0x8,%esp
f0108b82:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b85:	ff 75 08             	pushl  0x8(%ebp)
f0108b88:	e8 e9 e2 ff ff       	call   f0106e76 <unmap_frame>
f0108b8d:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108b90:	83 ec 0c             	sub    $0xc,%esp
f0108b93:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108b96:	50                   	push   %eax
f0108b97:	e8 56 dd ff ff       	call   f01068f2 <allocate_frame>
f0108b9c:	83 c4 10             	add    $0x10,%esp
f0108b9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108ba2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ba8:	ff 75 e8             	pushl  -0x18(%ebp)
f0108bab:	50                   	push   %eax
f0108bac:	ff 75 08             	pushl  0x8(%ebp)
f0108baf:	e8 8d e1 ff ff       	call   f0106d41 <map_frame>
f0108bb4:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108bb7:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108bbe:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108bc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108bc8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108bcb:	0f 82 4b ff ff ff    	jb     f0108b1c <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108bd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bd6:	c9                   	leave  
f0108bd7:	c3                   	ret    

f0108bd8 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108bd8:	55                   	push   %ebp
f0108bd9:	89 e5                	mov    %esp,%ebp
f0108bdb:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108bde:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108be5:	8b 45 10             	mov    0x10(%ebp),%eax
f0108be8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108beb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108bf1:	8b 45 10             	mov    0x10(%ebp),%eax
f0108bf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bf7:	e9 d1 00 00 00       	jmp    f0108ccd <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108bfc:	83 ec 04             	sub    $0x4,%esp
f0108bff:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108c02:	50                   	push   %eax
f0108c03:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c06:	ff 75 08             	pushl  0x8(%ebp)
f0108c09:	e8 a3 de ff ff       	call   f0106ab1 <get_page_table>
f0108c0e:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108c11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c14:	85 c0                	test   %eax,%eax
f0108c16:	75 14                	jne    f0108c2c <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108c18:	83 ec 08             	sub    $0x8,%esp
f0108c1b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c1e:	ff 75 08             	pushl  0x8(%ebp)
f0108c21:	e8 e1 df ff ff       	call   f0106c07 <create_page_table>
f0108c26:	83 c4 10             	add    $0x10,%esp
f0108c29:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108c2c:	83 ec 04             	sub    $0x4,%esp
f0108c2f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108c32:	50                   	push   %eax
f0108c33:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c36:	ff 75 08             	pushl  0x8(%ebp)
f0108c39:	e8 c8 e1 ff ff       	call   f0106e06 <get_frame_info>
f0108c3e:	83 c4 10             	add    $0x10,%esp
f0108c41:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108c44:	83 ec 08             	sub    $0x8,%esp
f0108c47:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c4a:	ff 75 08             	pushl  0x8(%ebp)
f0108c4d:	e8 19 f3 ff ff       	call   f0107f6b <pt_get_page_permissions>
f0108c52:	83 c4 10             	add    $0x10,%esp
f0108c55:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f0108c58:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c5b:	85 c0                	test   %eax,%eax
f0108c5d:	74 14                	je     f0108c73 <copy_paste_chunk+0x9b>
f0108c5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c62:	83 e0 02             	and    $0x2,%eax
f0108c65:	85 c0                	test   %eax,%eax
f0108c67:	75 0a                	jne    f0108c73 <copy_paste_chunk+0x9b>
			return -1;
f0108c69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108c6e:	e9 a7 00 00 00       	jmp    f0108d1a <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108c73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c76:	85 c0                	test   %eax,%eax
f0108c78:	75 45                	jne    f0108cbf <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108c7a:	83 ec 08             	sub    $0x8,%esp
f0108c7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c80:	ff 75 08             	pushl  0x8(%ebp)
f0108c83:	e8 e3 f2 ff ff       	call   f0107f6b <pt_get_page_permissions>
f0108c88:	83 c4 10             	add    $0x10,%esp
f0108c8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108c8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c91:	83 e0 04             	and    $0x4,%eax
f0108c94:	83 c8 02             	or     $0x2,%eax
f0108c97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108c9a:	83 ec 0c             	sub    $0xc,%esp
f0108c9d:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ca0:	50                   	push   %eax
f0108ca1:	e8 4c dc ff ff       	call   f01068f2 <allocate_frame>
f0108ca6:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f0108ca9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108cac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108caf:	52                   	push   %edx
f0108cb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0108cb3:	50                   	push   %eax
f0108cb4:	ff 75 08             	pushl  0x8(%ebp)
f0108cb7:	e8 85 e0 ff ff       	call   f0106d41 <map_frame>
f0108cbc:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108cbf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108cc6:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108ccd:	8b 55 10             	mov    0x10(%ebp),%edx
f0108cd0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cd3:	01 d0                	add    %edx,%eax
f0108cd5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108cd8:	0f 87 1e ff ff ff    	ja     f0108bfc <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108cde:	8b 45 10             	mov    0x10(%ebp),%eax
f0108ce1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108ce4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ce7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ced:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108cf0:	eb 16                	jmp    f0108d08 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108cf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108cf5:	8b 10                	mov    (%eax),%edx
f0108cf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cfa:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108cfc:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108d00:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108d04:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108d08:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d0e:	01 d0                	add    %edx,%eax
f0108d10:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108d13:	77 dd                	ja     f0108cf2 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108d15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108d1a:	c9                   	leave  
f0108d1b:	c3                   	ret    

f0108d1c <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108d1c:	55                   	push   %ebp
f0108d1d:	89 e5                	mov    %esp,%ebp
f0108d1f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108d22:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108d29:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d37:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108d3a:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108d41:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d44:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d47:	01 c2                	add    %eax,%edx
f0108d49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d4c:	01 d0                	add    %edx,%eax
f0108d4e:	48                   	dec    %eax
f0108d4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d55:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d5a:	f7 75 e8             	divl   -0x18(%ebp)
f0108d5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d60:	29 d0                	sub    %edx,%eax
f0108d62:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108d65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d6b:	e9 ac 00 00 00       	jmp    f0108e1c <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108d70:	83 ec 04             	sub    $0x4,%esp
f0108d73:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108d76:	50                   	push   %eax
f0108d77:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d7a:	ff 75 08             	pushl  0x8(%ebp)
f0108d7d:	e8 2f dd ff ff       	call   f0106ab1 <get_page_table>
f0108d82:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108d85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d88:	85 c0                	test   %eax,%eax
f0108d8a:	75 14                	jne    f0108da0 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108d8c:	83 ec 08             	sub    $0x8,%esp
f0108d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d92:	ff 75 08             	pushl  0x8(%ebp)
f0108d95:	e8 6d de ff ff       	call   f0106c07 <create_page_table>
f0108d9a:	83 c4 10             	add    $0x10,%esp
f0108d9d:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108da0:	83 ec 04             	sub    $0x4,%esp
f0108da3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108da6:	50                   	push   %eax
f0108da7:	ff 75 f4             	pushl  -0xc(%ebp)
f0108daa:	ff 75 08             	pushl  0x8(%ebp)
f0108dad:	e8 54 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108db2:	83 c4 10             	add    $0x10,%esp
f0108db5:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108db8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108dbc:	74 07                	je     f0108dc5 <share_chunk+0xa9>
           return -1;
f0108dbe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108dc3:	eb 68                	jmp    f0108e2d <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108dc5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108dcc:	83 ec 04             	sub    $0x4,%esp
f0108dcf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108dd2:	50                   	push   %eax
f0108dd3:	ff 75 0c             	pushl  0xc(%ebp)
f0108dd6:	ff 75 08             	pushl  0x8(%ebp)
f0108dd9:	e8 d3 dc ff ff       	call   f0106ab1 <get_page_table>
f0108dde:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108de1:	83 ec 04             	sub    $0x4,%esp
f0108de4:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108de7:	50                   	push   %eax
f0108de8:	ff 75 0c             	pushl  0xc(%ebp)
f0108deb:	ff 75 08             	pushl  0x8(%ebp)
f0108dee:	e8 13 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108df3:	83 c4 10             	add    $0x10,%esp
f0108df6:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108df9:	8b 45 18             	mov    0x18(%ebp),%eax
f0108dfc:	50                   	push   %eax
f0108dfd:	ff 75 f4             	pushl  -0xc(%ebp)
f0108e00:	ff 75 d8             	pushl  -0x28(%ebp)
f0108e03:	ff 75 08             	pushl  0x8(%ebp)
f0108e06:	e8 36 df ff ff       	call   f0106d41 <map_frame>
f0108e0b:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108e0e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108e15:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e1f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108e22:	0f 82 48 ff ff ff    	jb     f0108d70 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108e28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e2d:	c9                   	leave  
f0108e2e:	c3                   	ret    

f0108e2f <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108e2f:	55                   	push   %ebp
f0108e30:	89 e5                	mov    %esp,%ebp
f0108e32:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108e35:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108e3c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e3f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e42:	01 d0                	add    %edx,%eax
f0108e44:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108e47:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108e4e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108e55:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108e5c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108e63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e66:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108e69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e6c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e71:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108e74:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108e7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108e7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e81:	01 d0                	add    %edx,%eax
f0108e83:	48                   	dec    %eax
f0108e84:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108e87:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e8f:	f7 75 dc             	divl   -0x24(%ebp)
f0108e92:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e95:	29 d0                	sub    %edx,%eax
f0108e97:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108e9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108ea0:	e9 9d 00 00 00       	jmp    f0108f42 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ea8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108eab:	83 ec 04             	sub    $0x4,%esp
f0108eae:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108eb1:	50                   	push   %eax
f0108eb2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108eb5:	ff 75 08             	pushl  0x8(%ebp)
f0108eb8:	e8 f4 db ff ff       	call   f0106ab1 <get_page_table>
f0108ebd:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108ec0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ec3:	85 c0                	test   %eax,%eax
f0108ec5:	75 14                	jne    f0108edb <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108ec7:	83 ec 08             	sub    $0x8,%esp
f0108eca:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ecd:	ff 75 08             	pushl  0x8(%ebp)
f0108ed0:	e8 32 dd ff ff       	call   f0106c07 <create_page_table>
f0108ed5:	83 c4 10             	add    $0x10,%esp
f0108ed8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108edb:	83 ec 04             	sub    $0x4,%esp
f0108ede:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ee1:	50                   	push   %eax
f0108ee2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ee5:	ff 75 08             	pushl  0x8(%ebp)
f0108ee8:	e8 19 df ff ff       	call   f0106e06 <get_frame_info>
f0108eed:	83 c4 10             	add    $0x10,%esp
f0108ef0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108ef3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ef6:	85 c0                	test   %eax,%eax
f0108ef8:	74 07                	je     f0108f01 <allocate_chunk+0xd2>
		{
			return -1;
f0108efa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108eff:	eb 52                	jmp    f0108f53 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108f01:	83 ec 0c             	sub    $0xc,%esp
f0108f04:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108f07:	50                   	push   %eax
f0108f08:	e8 e5 d9 ff ff       	call   f01068f2 <allocate_frame>
f0108f0d:	83 c4 10             	add    $0x10,%esp
f0108f10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108f13:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108f17:	74 22                	je     f0108f3b <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108f19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f1c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108f1f:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108f22:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f25:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f28:	52                   	push   %edx
f0108f29:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108f2c:	50                   	push   %eax
f0108f2d:	ff 75 08             	pushl  0x8(%ebp)
f0108f30:	e8 0c de ff ff       	call   f0106d41 <map_frame>
f0108f35:	83 c4 10             	add    $0x10,%esp
f0108f38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108f3b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f45:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108f48:	0f 82 57 ff ff ff    	jb     f0108ea5 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108f4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108f53:	c9                   	leave  
f0108f54:	c3                   	ret    

f0108f55 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108f55:	55                   	push   %ebp
f0108f56:	89 e5                	mov    %esp,%ebp
f0108f58:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108f61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f64:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108f69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108f7d:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108f84:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f8a:	01 d0                	add    %edx,%eax
f0108f8c:	48                   	dec    %eax
f0108f8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108f90:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f98:	f7 75 e0             	divl   -0x20(%ebp)
f0108f9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f9e:	29 d0                	sub    %edx,%eax
f0108fa0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108fa3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fa6:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108fa9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108fac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fb6:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108fbb:	85 c0                	test   %eax,%eax
f0108fbd:	75 37                	jne    f0108ff6 <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108fbf:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108fc6:	83 ec 04             	sub    $0x4,%esp
f0108fc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108fcc:	50                   	push   %eax
f0108fcd:	ff 75 f4             	pushl  -0xc(%ebp)
f0108fd0:	ff 75 08             	pushl  0x8(%ebp)
f0108fd3:	e8 d9 da ff ff       	call   f0106ab1 <get_page_table>
f0108fd8:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108fdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108fde:	85 c0                	test   %eax,%eax
f0108fe0:	74 14                	je     f0108ff6 <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108fe2:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fe5:	8b 00                	mov    (%eax),%eax
f0108fe7:	8d 50 01             	lea    0x1(%eax),%edx
f0108fea:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fed:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108fef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108ff6:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108ffa:	75 2d                	jne    f0109029 <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108ffc:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0109003:	83 ec 04             	sub    $0x4,%esp
f0109006:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0109009:	50                   	push   %eax
f010900a:	ff 75 f0             	pushl  -0x10(%ebp)
f010900d:	ff 75 08             	pushl  0x8(%ebp)
f0109010:	e8 f1 dd ff ff       	call   f0106e06 <get_frame_info>
f0109015:	83 c4 10             	add    $0x10,%esp
f0109018:	85 c0                	test   %eax,%eax
f010901a:	74 0d                	je     f0109029 <calculate_allocated_space+0xd4>
					(*num_pages)++;
f010901c:	8b 45 18             	mov    0x18(%ebp),%eax
f010901f:	8b 00                	mov    (%eax),%eax
f0109021:	8d 50 01             	lea    0x1(%eax),%edx
f0109024:	8b 45 18             	mov    0x18(%ebp),%eax
f0109027:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0109029:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0109030:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109033:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0109036:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109039:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010903c:	01 d0                	add    %edx,%eax
f010903e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109041:	0f 87 6c ff ff ff    	ja     f0108fb3 <calculate_allocated_space+0x5e>
}
f0109047:	90                   	nop
f0109048:	c9                   	leave  
f0109049:	c3                   	ret    

f010904a <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f010904a:	55                   	push   %ebp
f010904b:	89 e5                	mov    %esp,%ebp
f010904d:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0109050:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0109057:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f010905e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109061:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109064:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109067:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010906c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f010906f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109072:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109075:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109078:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010907d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0109080:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109083:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0109088:	85 c0                	test   %eax,%eax
f010908a:	75 26                	jne    f01090b2 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f010908c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0109093:	83 ec 04             	sub    $0x4,%esp
f0109096:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0109099:	50                   	push   %eax
f010909a:	ff 75 ec             	pushl  -0x14(%ebp)
f010909d:	ff 75 08             	pushl  0x8(%ebp)
f01090a0:	e8 0c da ff ff       	call   f0106ab1 <get_page_table>
f01090a5:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f01090a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01090ab:	85 c0                	test   %eax,%eax
f01090ad:	75 03                	jne    f01090b2 <calculate_required_frames+0x68>
				number_of_tables++;
f01090af:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f01090b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f01090b9:	83 ec 04             	sub    $0x4,%esp
f01090bc:	8d 45 dc             	lea    -0x24(%ebp),%eax
f01090bf:	50                   	push   %eax
f01090c0:	ff 75 e8             	pushl  -0x18(%ebp)
f01090c3:	ff 75 08             	pushl  0x8(%ebp)
f01090c6:	e8 3b dd ff ff       	call   f0106e06 <get_frame_info>
f01090cb:	83 c4 10             	add    $0x10,%esp
f01090ce:	85 c0                	test   %eax,%eax
f01090d0:	75 03                	jne    f01090d5 <calculate_required_frames+0x8b>
			number_of_pages++;
f01090d2:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f01090d5:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f01090dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f01090e2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01090e5:	8b 45 10             	mov    0x10(%ebp),%eax
f01090e8:	01 d0                	add    %edx,%eax
f01090ea:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01090ed:	77 91                	ja     f0109080 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f01090ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01090f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f5:	01 d0                	add    %edx,%eax
}
f01090f7:	c9                   	leave  
f01090f8:	c3                   	ret    

f01090f9 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090f9:	55                   	push   %ebp
f01090fa:	89 e5                	mov    %esp,%ebp
f01090fc:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01090ff:	83 ec 04             	sub    $0x4,%esp
f0109102:	68 f4 68 13 f0       	push   $0xf01368f4
f0109107:	68 25 01 00 00       	push   $0x125
f010910c:	68 24 69 13 f0       	push   $0xf0136924
f0109111:	e8 ef 70 ff ff       	call   f0100205 <_panic>

f0109116 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109116:	55                   	push   %ebp
f0109117:	89 e5                	mov    %esp,%ebp
f0109119:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f010911c:	83 ec 04             	sub    $0x4,%esp
f010911f:	68 40 69 13 f0       	push   $0xf0136940
f0109124:	68 2f 01 00 00       	push   $0x12f
f0109129:	68 24 69 13 f0       	push   $0xf0136924
f010912e:	e8 d2 70 ff ff       	call   f0100205 <_panic>

f0109133 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109133:	55                   	push   %ebp
f0109134:	89 e5                	mov    %esp,%ebp
f0109136:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109139:	83 ec 04             	sub    $0x4,%esp
f010913c:	68 6c 69 13 f0       	push   $0xf013696c
f0109141:	68 3d 01 00 00       	push   $0x13d
f0109146:	68 24 69 13 f0       	push   $0xf0136924
f010914b:	e8 b5 70 ff ff       	call   f0100205 <_panic>

f0109150 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109150:	55                   	push   %ebp
f0109151:	89 e5                	mov    %esp,%ebp
f0109153:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109156:	83 ec 04             	sub    $0x4,%esp
f0109159:	68 ac 69 13 f0       	push   $0xf01369ac
f010915e:	68 4d 01 00 00       	push   $0x14d
f0109163:	68 24 69 13 f0       	push   $0xf0136924
f0109168:	e8 98 70 ff ff       	call   f0100205 <_panic>

f010916d <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010916d:	55                   	push   %ebp
f010916e:	89 e5                	mov    %esp,%ebp
f0109170:	57                   	push   %edi
f0109171:	56                   	push   %esi
f0109172:	53                   	push   %ebx
f0109173:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109179:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109180:	83 ec 0c             	sub    $0xc,%esp
f0109183:	ff 75 08             	pushl  0x8(%ebp)
f0109186:	e8 0b 22 00 00       	call   f010b396 <get_user_program_info>
f010918b:	83 c4 10             	add    $0x10,%esp
f010918e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109191:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109195:	75 0a                	jne    f01091a1 <env_create+0x34>
f0109197:	b8 00 00 00 00       	mov    $0x0,%eax
f010919c:	e9 cd 0b 00 00       	jmp    f0109d6e <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01091a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091a4:	8b 40 08             	mov    0x8(%eax),%eax
f01091a7:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01091aa:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01091b1:	00 00 00 
	if(allocate_environment(&e) < 0)
f01091b4:	83 ec 0c             	sub    $0xc,%esp
f01091b7:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01091bd:	50                   	push   %eax
f01091be:	e8 d3 0e 00 00       	call   f010a096 <allocate_environment>
f01091c3:	83 c4 10             	add    $0x10,%esp
f01091c6:	85 c0                	test   %eax,%eax
f01091c8:	79 0a                	jns    f01091d4 <env_create+0x67>
	{
		return 0;
f01091ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01091cf:	e9 9a 0b 00 00       	jmp    f0109d6e <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01091d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091d7:	8b 00                	mov    (%eax),%eax
f01091d9:	83 ec 0c             	sub    $0xc,%esp
f01091dc:	50                   	push   %eax
f01091dd:	e8 c1 83 02 00       	call   f01315a3 <strlen>
f01091e2:	83 c4 10             	add    $0x10,%esp
f01091e5:	83 f8 3f             	cmp    $0x3f,%eax
f01091e8:	7f 20                	jg     f010920a <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01091ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091ed:	8b 00                	mov    (%eax),%eax
f01091ef:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091f5:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01091fb:	83 ec 08             	sub    $0x8,%esp
f01091fe:	50                   	push   %eax
f01091ff:	52                   	push   %edx
f0109200:	e8 ed 83 02 00       	call   f01315f2 <strcpy>
f0109205:	83 c4 10             	add    $0x10,%esp
f0109208:	eb 20                	jmp    f010922a <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f010920a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010920d:	8b 00                	mov    (%eax),%eax
f010920f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109215:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010921b:	83 ec 04             	sub    $0x4,%esp
f010921e:	6a 3f                	push   $0x3f
f0109220:	50                   	push   %eax
f0109221:	52                   	push   %edx
f0109222:	e8 f9 83 02 00       	call   f0131620 <strncpy>
f0109227:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f010922a:	e8 6d 0f 00 00       	call   f010a19c <create_user_directory>
f010922f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0109232:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109235:	83 ec 0c             	sub    $0xc,%esp
f0109238:	50                   	push   %eax
f0109239:	e8 6f eb ff ff       	call   f0107dad <kheap_physical_address>
f010923e:	83 c4 10             	add    $0x10,%esp
f0109241:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109244:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010924a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010924d:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109250:	83 ec 0c             	sub    $0xc,%esp
f0109253:	6a 02                	push   $0x2
f0109255:	e8 f3 4d 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f010925a:	83 c4 10             	add    $0x10,%esp
f010925d:	85 c0                	test   %eax,%eax
f010925f:	74 21                	je     f0109282 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0109261:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109267:	8b 55 10             	mov    0x10(%ebp),%edx
f010926a:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109270:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109276:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109279:	2b 55 10             	sub    0x10(%ebp),%edx
f010927c:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109282:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109286:	75 12                	jne    f010929a <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109288:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010928e:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109295:	00 00 00 
f0109298:	eb 0f                	jmp    f01092a9 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010929a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092a0:	8b 55 14             	mov    0x14(%ebp),%edx
f01092a3:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01092a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092af:	83 ec 04             	sub    $0x4,%esp
f01092b2:	ff 75 ac             	pushl  -0x54(%ebp)
f01092b5:	ff 75 b0             	pushl  -0x50(%ebp)
f01092b8:	50                   	push   %eax
f01092b9:	e8 fa 15 00 00       	call   f010a8b8 <initialize_environment>
f01092be:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01092c1:	0f 20 d8             	mov    %cr3,%eax
f01092c4:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01092c7:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01092ca:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01092cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d3:	8b 40 60             	mov    0x60(%eax),%eax
f01092d6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01092dc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01092e2:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01092e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01092ec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01092f3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092f9:	8b 40 74             	mov    0x74(%eax),%eax
f01092fc:	48                   	dec    %eax
f01092fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0109300:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0109307:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010930a:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109310:	83 ec 08             	sub    $0x8,%esp
f0109313:	ff 75 b8             	pushl  -0x48(%ebp)
f0109316:	50                   	push   %eax
f0109317:	e8 af 1d 00 00       	call   f010b0cb <PROGRAM_SEGMENT_FIRST>
f010931c:	83 c4 0c             	add    $0xc,%esp
f010931f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109325:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f010932b:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109330:	89 c7                	mov    %eax,%edi
f0109332:	89 d6                	mov    %edx,%esi
f0109334:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109336:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010933c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010933f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109342:	8b 40 10             	mov    0x10(%eax),%eax
f0109345:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109348:	75 07                	jne    f0109351 <env_create+0x1e4>
f010934a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109351:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109354:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109357:	e9 15 03 00 00       	jmp    f0109671 <env_create+0x504>
	{
		segment_counter++;
f010935c:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010935f:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109366:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109369:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010936f:	83 ec 0c             	sub    $0xc,%esp
f0109372:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109378:	52                   	push   %edx
f0109379:	ff 75 dc             	pushl  -0x24(%ebp)
f010937c:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109382:	52                   	push   %edx
f0109383:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109386:	50                   	push   %eax
f0109387:	e8 4b 0e 00 00       	call   f010a1d7 <program_segment_alloc_map_copy_workingset>
f010938c:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010938f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109395:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010939b:	8b 00                	mov    (%eax),%eax
f010939d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01093a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01093a6:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01093a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093ac:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01093af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01093b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01093b7:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01093ba:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01093c1:	8b 55 98             	mov    -0x68(%ebp),%edx
f01093c4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01093c7:	01 d0                	add    %edx,%eax
f01093c9:	48                   	dec    %eax
f01093ca:	89 45 88             	mov    %eax,-0x78(%ebp)
f01093cd:	8b 45 88             	mov    -0x78(%ebp),%eax
f01093d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01093d5:	f7 75 8c             	divl   -0x74(%ebp)
f01093d8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01093db:	29 d0                	sub    %edx,%eax
f01093dd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01093e0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093e3:	2b 45 90             	sub    -0x70(%ebp),%eax
f01093e6:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01093e9:	a1 84 ed 88 f0       	mov    0xf088ed84,%eax
f01093ee:	83 ec 04             	sub    $0x4,%esp
f01093f1:	68 00 10 00 00       	push   $0x1000
f01093f6:	6a 00                	push   $0x0
f01093f8:	50                   	push   %eax
f01093f9:	e8 93 83 02 00       	call   f0131791 <memset>
f01093fe:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109401:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109407:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f010940d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109410:	01 d0                	add    %edx,%eax
f0109412:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109415:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109418:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010941b:	eb 13                	jmp    f0109430 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f010941d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109420:	8a 10                	mov    (%eax),%dl
f0109422:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109425:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109427:	ff 45 cc             	incl   -0x34(%ebp)
f010942a:	ff 45 d4             	incl   -0x2c(%ebp)
f010942d:	ff 45 d0             	incl   -0x30(%ebp)
f0109430:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109433:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109436:	72 e5                	jb     f010941d <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109438:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f010943e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109444:	83 ec 04             	sub    $0x4,%esp
f0109447:	52                   	push   %edx
f0109448:	ff 75 90             	pushl  -0x70(%ebp)
f010944b:	50                   	push   %eax
f010944c:	e8 c4 a2 ff ff       	call   f0103715 <pf_add_env_page>
f0109451:	83 c4 10             	add    $0x10,%esp
f0109454:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109457:	75 17                	jne    f0109470 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109459:	83 ec 04             	sub    $0x4,%esp
f010945c:	68 d8 69 13 f0       	push   $0xf01369d8
f0109461:	68 e1 00 00 00       	push   $0xe1
f0109466:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010946b:	e8 95 6d ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109470:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109473:	8b 50 04             	mov    0x4(%eax),%edx
f0109476:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109479:	01 d0                	add    %edx,%eax
f010947b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109481:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109487:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010948c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109492:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109495:	8b 50 04             	mov    0x4(%eax),%edx
f0109498:	8b 45 98             	mov    -0x68(%ebp),%eax
f010949b:	01 d0                	add    %edx,%eax
f010949d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01094a3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01094a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01094a9:	eb 43                	jmp    f01094ee <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01094ab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01094ae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094b4:	83 ec 04             	sub    $0x4,%esp
f01094b7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01094ba:	52                   	push   %edx
f01094bb:	50                   	push   %eax
f01094bc:	e8 54 a2 ff ff       	call   f0103715 <pf_add_env_page>
f01094c1:	83 c4 10             	add    $0x10,%esp
f01094c4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01094c7:	75 17                	jne    f01094e0 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01094c9:	83 ec 04             	sub    $0x4,%esp
f01094cc:	68 d8 69 13 f0       	push   $0xf01369d8
f01094d1:	68 ee 00 00 00       	push   $0xee
f01094d6:	68 1d 6a 13 f0       	push   $0xf0136a1d
f01094db:	e8 25 6d ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01094e0:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01094e7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01094ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01094f1:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01094f7:	72 b2                	jb     f01094ab <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01094f9:	a1 84 ed 88 f0       	mov    0xf088ed84,%eax
f01094fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0109501:	83 ec 04             	sub    $0x4,%esp
f0109504:	68 00 10 00 00       	push   $0x1000
f0109509:	6a 00                	push   $0x0
f010950b:	ff 75 d0             	pushl  -0x30(%ebp)
f010950e:	e8 7e 82 02 00       	call   f0131791 <memset>
f0109513:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109516:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010951c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010951f:	eb 13                	jmp    f0109534 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109521:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109524:	8a 10                	mov    (%eax),%dl
f0109526:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109529:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010952b:	ff 45 cc             	incl   -0x34(%ebp)
f010952e:	ff 45 d4             	incl   -0x2c(%ebp)
f0109531:	ff 45 d0             	incl   -0x30(%ebp)
f0109534:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109537:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f010953d:	72 e2                	jb     f0109521 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010953f:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f0109545:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010954b:	83 ec 04             	sub    $0x4,%esp
f010954e:	52                   	push   %edx
f010954f:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109555:	50                   	push   %eax
f0109556:	e8 ba a1 ff ff       	call   f0103715 <pf_add_env_page>
f010955b:	83 c4 10             	add    $0x10,%esp
f010955e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109561:	75 17                	jne    f010957a <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109563:	83 ec 04             	sub    $0x4,%esp
f0109566:	68 d8 69 13 f0       	push   $0xf01369d8
f010956b:	68 fd 00 00 00       	push   $0xfd
f0109570:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109575:	e8 8b 6c ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010957a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109581:	10 00 00 
f0109584:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109587:	8b 50 04             	mov    0x4(%eax),%edx
f010958a:	8b 45 98             	mov    -0x68(%ebp),%eax
f010958d:	01 c2                	add    %eax,%edx
f010958f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109595:	01 d0                	add    %edx,%eax
f0109597:	48                   	dec    %eax
f0109598:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010959e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01095a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01095a9:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01095af:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01095b5:	29 d0                	sub    %edx,%eax
f01095b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01095ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01095bd:	8b 50 08             	mov    0x8(%eax),%edx
f01095c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01095c3:	01 d0                	add    %edx,%eax
f01095c5:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01095c8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01095ce:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01095d5:	eb 41                	jmp    f0109618 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01095d7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095dd:	83 ec 04             	sub    $0x4,%esp
f01095e0:	6a 01                	push   $0x1
f01095e2:	ff 75 c8             	pushl  -0x38(%ebp)
f01095e5:	50                   	push   %eax
f01095e6:	e8 f9 9f ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01095eb:	83 c4 10             	add    $0x10,%esp
f01095ee:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01095f1:	75 17                	jne    f010960a <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01095f3:	83 ec 04             	sub    $0x4,%esp
f01095f6:	68 d8 69 13 f0       	push   $0xf01369d8
f01095fb:	68 0a 01 00 00       	push   $0x10a
f0109600:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109605:	e8 fb 6b ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010960a:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109611:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109618:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010961f:	10 00 00 
f0109622:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109628:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010962e:	01 d0                	add    %edx,%eax
f0109630:	48                   	dec    %eax
f0109631:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109637:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010963d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109642:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109648:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010964e:	29 d0                	sub    %edx,%eax
f0109650:	89 c2                	mov    %eax,%edx
f0109652:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109655:	39 c2                	cmp    %eax,%edx
f0109657:	0f 87 7a ff ff ff    	ja     f01095d7 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010965d:	83 ec 08             	sub    $0x8,%esp
f0109660:	ff 75 b8             	pushl  -0x48(%ebp)
f0109663:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109666:	e8 55 19 00 00       	call   f010afc0 <PROGRAM_SEGMENT_NEXT>
f010966b:	83 c4 10             	add    $0x10,%esp
f010966e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109671:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109675:	0f 85 e1 fc ff ff    	jne    f010935c <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010967b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109682:	e9 9d 00 00 00       	jmp    f0109724 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109687:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010968d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109690:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109693:	89 d0                	mov    %edx,%eax
f0109695:	01 c0                	add    %eax,%eax
f0109697:	01 d0                	add    %edx,%eax
f0109699:	c1 e0 03             	shl    $0x3,%eax
f010969c:	01 c8                	add    %ecx,%eax
f010969e:	8a 40 04             	mov    0x4(%eax),%al
f01096a1:	84 c0                	test   %al,%al
f01096a3:	75 7c                	jne    f0109721 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01096a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096ab:	8b 48 78             	mov    0x78(%eax),%ecx
f01096ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01096b1:	89 d0                	mov    %edx,%eax
f01096b3:	01 c0                	add    %eax,%eax
f01096b5:	01 d0                	add    %edx,%eax
f01096b7:	c1 e0 03             	shl    $0x3,%eax
f01096ba:	01 c8                	add    %ecx,%eax
f01096bc:	8b 00                	mov    (%eax),%eax
f01096be:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01096c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096ca:	8b 40 5c             	mov    0x5c(%eax),%eax
f01096cd:	83 ec 04             	sub    $0x4,%esp
f01096d0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01096d6:	52                   	push   %edx
f01096d7:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01096dd:	50                   	push   %eax
f01096de:	e8 ce d3 ff ff       	call   f0106ab1 <get_page_table>
f01096e3:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01096e6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01096ec:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01096f2:	c1 ea 0c             	shr    $0xc,%edx
f01096f5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01096fb:	c1 e2 02             	shl    $0x2,%edx
f01096fe:	01 d0                	add    %edx,%eax
f0109700:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109706:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f010970c:	c1 e9 0c             	shr    $0xc,%ecx
f010970f:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109715:	c1 e1 02             	shl    $0x2,%ecx
f0109718:	01 ca                	add    %ecx,%edx
f010971a:	8b 12                	mov    (%edx),%edx
f010971c:	83 e2 bf             	and    $0xffffffbf,%edx
f010971f:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109721:	ff 45 c4             	incl   -0x3c(%ebp)
f0109724:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010972a:	8b 50 74             	mov    0x74(%eax),%edx
f010972d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109730:	39 c2                	cmp    %eax,%edx
f0109732:	0f 87 4f ff ff ff    	ja     f0109687 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109738:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010973b:	8b 50 08             	mov    0x8(%eax),%edx
f010973e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109744:	83 ec 08             	sub    $0x8,%esp
f0109747:	52                   	push   %edx
f0109748:	50                   	push   %eax
f0109749:	e8 bc 16 00 00       	call   f010ae0a <set_environment_entry_point>
f010974e:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109751:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109757:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f010975e:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109761:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109768:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010976b:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109772:	e9 53 05 00 00       	jmp    f0109cca <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109777:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010977e:	00 00 00 
		allocate_frame(&pp);
f0109781:	83 ec 0c             	sub    $0xc,%esp
f0109784:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010978a:	50                   	push   %eax
f010978b:	e8 62 d1 ff ff       	call   f01068f2 <allocate_frame>
f0109790:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109793:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109799:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010979f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01097a2:	6a 06                	push   $0x6
f01097a4:	ff 75 c0             	pushl  -0x40(%ebp)
f01097a7:	52                   	push   %edx
f01097a8:	50                   	push   %eax
f01097a9:	e8 4f d7 ff ff       	call   f0106efd <loadtime_map_frame>
f01097ae:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01097b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01097b4:	83 ec 04             	sub    $0x4,%esp
f01097b7:	68 00 10 00 00       	push   $0x1000
f01097bc:	6a 00                	push   $0x0
f01097be:	50                   	push   %eax
f01097bf:	e8 cd 7f 02 00       	call   f0131791 <memset>
f01097c4:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01097c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d9:	83 ec 04             	sub    $0x4,%esp
f01097dc:	ff 75 c0             	pushl  -0x40(%ebp)
f01097df:	52                   	push   %edx
f01097e0:	50                   	push   %eax
f01097e1:	e8 ee e9 ff ff       	call   f01081d4 <env_page_ws_set_entry>
f01097e6:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01097e9:	83 ec 0c             	sub    $0xc,%esp
f01097ec:	6a 02                	push   $0x2
f01097ee:	e8 5a 48 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f01097f3:	83 c4 10             	add    $0x10,%esp
f01097f6:	85 c0                	test   %eax,%eax
f01097f8:	0f 84 6b 04 00 00    	je     f0109c69 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01097fe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109804:	8b 48 78             	mov    0x78(%eax),%ecx
f0109807:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010980d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109813:	89 d0                	mov    %edx,%eax
f0109815:	01 c0                	add    %eax,%eax
f0109817:	01 d0                	add    %edx,%eax
f0109819:	c1 e0 03             	shl    $0x3,%eax
f010981c:	01 c8                	add    %ecx,%eax
f010981e:	85 c0                	test   %eax,%eax
f0109820:	75 17                	jne    f0109839 <env_create+0x6cc>
f0109822:	83 ec 04             	sub    $0x4,%esp
f0109825:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010982a:	68 41 01 00 00       	push   $0x141
f010982f:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109834:	e8 cc 69 ff ff       	call   f0100205 <_panic>
f0109839:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109842:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109848:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010984e:	89 d0                	mov    %edx,%eax
f0109850:	01 c0                	add    %eax,%eax
f0109852:	01 d0                	add    %edx,%eax
f0109854:	c1 e0 03             	shl    $0x3,%eax
f0109857:	01 c8                	add    %ecx,%eax
f0109859:	8b 40 10             	mov    0x10(%eax),%eax
f010985c:	85 c0                	test   %eax,%eax
f010985e:	74 4b                	je     f01098ab <env_create+0x73e>
f0109860:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109866:	8b 48 78             	mov    0x78(%eax),%ecx
f0109869:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109875:	89 d0                	mov    %edx,%eax
f0109877:	01 c0                	add    %eax,%eax
f0109879:	01 d0                	add    %edx,%eax
f010987b:	c1 e0 03             	shl    $0x3,%eax
f010987e:	01 c8                	add    %ecx,%eax
f0109880:	8b 50 10             	mov    0x10(%eax),%edx
f0109883:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109889:	8b 58 78             	mov    0x78(%eax),%ebx
f010988c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109892:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109898:	89 c8                	mov    %ecx,%eax
f010989a:	01 c0                	add    %eax,%eax
f010989c:	01 c8                	add    %ecx,%eax
f010989e:	c1 e0 03             	shl    $0x3,%eax
f01098a1:	01 d8                	add    %ebx,%eax
f01098a3:	8b 40 14             	mov    0x14(%eax),%eax
f01098a6:	89 42 14             	mov    %eax,0x14(%edx)
f01098a9:	eb 2f                	jmp    f01098da <env_create+0x76d>
f01098ab:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b7:	8b 58 78             	mov    0x78(%eax),%ebx
f01098ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098c0:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098c6:	89 c8                	mov    %ecx,%eax
f01098c8:	01 c0                	add    %eax,%eax
f01098ca:	01 c8                	add    %ecx,%eax
f01098cc:	c1 e0 03             	shl    $0x3,%eax
f01098cf:	01 d8                	add    %ebx,%eax
f01098d1:	8b 40 14             	mov    0x14(%eax),%eax
f01098d4:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01098da:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e0:	8b 48 78             	mov    0x78(%eax),%ecx
f01098e3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098ef:	89 d0                	mov    %edx,%eax
f01098f1:	01 c0                	add    %eax,%eax
f01098f3:	01 d0                	add    %edx,%eax
f01098f5:	c1 e0 03             	shl    $0x3,%eax
f01098f8:	01 c8                	add    %ecx,%eax
f01098fa:	8b 40 14             	mov    0x14(%eax),%eax
f01098fd:	85 c0                	test   %eax,%eax
f01098ff:	74 4b                	je     f010994c <env_create+0x7df>
f0109901:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109907:	8b 48 78             	mov    0x78(%eax),%ecx
f010990a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109910:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109916:	89 d0                	mov    %edx,%eax
f0109918:	01 c0                	add    %eax,%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	c1 e0 03             	shl    $0x3,%eax
f010991f:	01 c8                	add    %ecx,%eax
f0109921:	8b 50 14             	mov    0x14(%eax),%edx
f0109924:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992a:	8b 58 78             	mov    0x78(%eax),%ebx
f010992d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109933:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109939:	89 c8                	mov    %ecx,%eax
f010993b:	01 c0                	add    %eax,%eax
f010993d:	01 c8                	add    %ecx,%eax
f010993f:	c1 e0 03             	shl    $0x3,%eax
f0109942:	01 d8                	add    %ebx,%eax
f0109944:	8b 40 10             	mov    0x10(%eax),%eax
f0109947:	89 42 10             	mov    %eax,0x10(%edx)
f010994a:	eb 2f                	jmp    f010997b <env_create+0x80e>
f010994c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109952:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109958:	8b 58 78             	mov    0x78(%eax),%ebx
f010995b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109961:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109967:	89 c8                	mov    %ecx,%eax
f0109969:	01 c0                	add    %eax,%eax
f010996b:	01 c8                	add    %ecx,%eax
f010996d:	c1 e0 03             	shl    $0x3,%eax
f0109970:	01 d8                	add    %ebx,%eax
f0109972:	8b 40 10             	mov    0x10(%eax),%eax
f0109975:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f010997b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109981:	8b 48 78             	mov    0x78(%eax),%ecx
f0109984:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010998a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109990:	89 d0                	mov    %edx,%eax
f0109992:	01 c0                	add    %eax,%eax
f0109994:	01 d0                	add    %edx,%eax
f0109996:	c1 e0 03             	shl    $0x3,%eax
f0109999:	01 c8                	add    %ecx,%eax
f010999b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f01099a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01099ab:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099b1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099b7:	89 d0                	mov    %edx,%eax
f01099b9:	01 c0                	add    %eax,%eax
f01099bb:	01 d0                	add    %edx,%eax
f01099bd:	c1 e0 03             	shl    $0x3,%eax
f01099c0:	01 c8                	add    %ecx,%eax
f01099c2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01099c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099cf:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01099d5:	4a                   	dec    %edx
f01099d6:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01099dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099e2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01099e8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ee:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01099f4:	39 c2                	cmp    %eax,%edx
f01099f6:	0f 83 39 01 00 00    	jae    f0109b35 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01099fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a02:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a05:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a0b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a11:	89 d0                	mov    %edx,%eax
f0109a13:	01 c0                	add    %eax,%eax
f0109a15:	01 d0                	add    %edx,%eax
f0109a17:	c1 e0 03             	shl    $0x3,%eax
f0109a1a:	01 c8                	add    %ecx,%eax
f0109a1c:	85 c0                	test   %eax,%eax
f0109a1e:	75 17                	jne    f0109a37 <env_create+0x8ca>
f0109a20:	83 ec 04             	sub    $0x4,%esp
f0109a23:	68 58 6a 13 f0       	push   $0xf0136a58
f0109a28:	68 46 01 00 00       	push   $0x146
f0109a2d:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109a32:	e8 ce 67 ff ff       	call   f0100205 <_panic>
f0109a37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a3d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a46:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a4c:	89 d0                	mov    %edx,%eax
f0109a4e:	01 c0                	add    %eax,%eax
f0109a50:	01 d0                	add    %edx,%eax
f0109a52:	c1 e0 03             	shl    $0x3,%eax
f0109a55:	01 c8                	add    %ecx,%eax
f0109a57:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a5d:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109a63:	89 50 10             	mov    %edx,0x10(%eax)
f0109a66:	8b 40 10             	mov    0x10(%eax),%eax
f0109a69:	85 c0                	test   %eax,%eax
f0109a6b:	74 31                	je     f0109a9e <env_create+0x931>
f0109a6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a73:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109a79:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a7f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a82:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a88:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a8e:	89 c8                	mov    %ecx,%eax
f0109a90:	01 c0                	add    %eax,%eax
f0109a92:	01 c8                	add    %ecx,%eax
f0109a94:	c1 e0 03             	shl    $0x3,%eax
f0109a97:	01 d8                	add    %ebx,%eax
f0109a99:	89 42 14             	mov    %eax,0x14(%edx)
f0109a9c:	eb 2c                	jmp    f0109aca <env_create+0x95d>
f0109a9e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109aa4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aaa:	8b 58 78             	mov    0x78(%eax),%ebx
f0109aad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ab3:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ab9:	89 c8                	mov    %ecx,%eax
f0109abb:	01 c0                	add    %eax,%eax
f0109abd:	01 c8                	add    %ecx,%eax
f0109abf:	c1 e0 03             	shl    $0x3,%eax
f0109ac2:	01 d8                	add    %ebx,%eax
f0109ac4:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109aca:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ad0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ad6:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ad9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109adf:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ae5:	89 c8                	mov    %ecx,%eax
f0109ae7:	01 c0                	add    %eax,%eax
f0109ae9:	01 c8                	add    %ecx,%eax
f0109aeb:	c1 e0 03             	shl    $0x3,%eax
f0109aee:	01 d8                	add    %ebx,%eax
f0109af0:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109af6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109afc:	8b 48 78             	mov    0x78(%eax),%ecx
f0109aff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b05:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b0b:	89 d0                	mov    %edx,%eax
f0109b0d:	01 c0                	add    %eax,%eax
f0109b0f:	01 d0                	add    %edx,%eax
f0109b11:	c1 e0 03             	shl    $0x3,%eax
f0109b14:	01 c8                	add    %ecx,%eax
f0109b16:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b1d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b23:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109b29:	42                   	inc    %edx
f0109b2a:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109b30:	e9 34 01 00 00       	jmp    f0109c69 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b3b:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b3e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b44:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b4a:	89 d0                	mov    %edx,%eax
f0109b4c:	01 c0                	add    %eax,%eax
f0109b4e:	01 d0                	add    %edx,%eax
f0109b50:	c1 e0 03             	shl    $0x3,%eax
f0109b53:	01 c8                	add    %ecx,%eax
f0109b55:	85 c0                	test   %eax,%eax
f0109b57:	75 17                	jne    f0109b70 <env_create+0xa03>
f0109b59:	83 ec 04             	sub    $0x4,%esp
f0109b5c:	68 58 6a 13 f0       	push   $0xf0136a58
f0109b61:	68 4a 01 00 00       	push   $0x14a
f0109b66:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109b6b:	e8 95 66 ff ff       	call   f0100205 <_panic>
f0109b70:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b76:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b79:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b7f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b85:	89 d0                	mov    %edx,%eax
f0109b87:	01 c0                	add    %eax,%eax
f0109b89:	01 d0                	add    %edx,%eax
f0109b8b:	c1 e0 03             	shl    $0x3,%eax
f0109b8e:	01 c8                	add    %ecx,%eax
f0109b90:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b96:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109b9c:	89 50 10             	mov    %edx,0x10(%eax)
f0109b9f:	8b 40 10             	mov    0x10(%eax),%eax
f0109ba2:	85 c0                	test   %eax,%eax
f0109ba4:	74 31                	je     f0109bd7 <env_create+0xa6a>
f0109ba6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bac:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109bb2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb8:	8b 58 78             	mov    0x78(%eax),%ebx
f0109bbb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bc1:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bc7:	89 c8                	mov    %ecx,%eax
f0109bc9:	01 c0                	add    %eax,%eax
f0109bcb:	01 c8                	add    %ecx,%eax
f0109bcd:	c1 e0 03             	shl    $0x3,%eax
f0109bd0:	01 d8                	add    %ebx,%eax
f0109bd2:	89 42 14             	mov    %eax,0x14(%edx)
f0109bd5:	eb 2c                	jmp    f0109c03 <env_create+0xa96>
f0109bd7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bdd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be3:	8b 58 78             	mov    0x78(%eax),%ebx
f0109be6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bec:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bf2:	89 c8                	mov    %ecx,%eax
f0109bf4:	01 c0                	add    %eax,%eax
f0109bf6:	01 c8                	add    %ecx,%eax
f0109bf8:	c1 e0 03             	shl    $0x3,%eax
f0109bfb:	01 d8                	add    %ebx,%eax
f0109bfd:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109c03:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c0f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c12:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c18:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c1e:	89 c8                	mov    %ecx,%eax
f0109c20:	01 c0                	add    %eax,%eax
f0109c22:	01 c8                	add    %ecx,%eax
f0109c24:	c1 e0 03             	shl    $0x3,%eax
f0109c27:	01 d8                	add    %ebx,%eax
f0109c29:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109c2f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c35:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c38:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c3e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c44:	89 d0                	mov    %edx,%eax
f0109c46:	01 c0                	add    %eax,%eax
f0109c48:	01 d0                	add    %edx,%eax
f0109c4a:	c1 e0 03             	shl    $0x3,%eax
f0109c4d:	01 c8                	add    %ecx,%eax
f0109c4f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109c56:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c5c:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109c62:	42                   	inc    %edx
f0109c63:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109c69:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c6f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c75:	42                   	inc    %edx
f0109c76:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109c7c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109c82:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c88:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109c8e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c94:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109c97:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c9c:	f7 f3                	div    %ebx
f0109c9e:	89 d0                	mov    %edx,%eax
f0109ca0:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109ca6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cac:	83 ec 04             	sub    $0x4,%esp
f0109caf:	6a 01                	push   $0x1
f0109cb1:	ff 75 c0             	pushl  -0x40(%ebp)
f0109cb4:	50                   	push   %eax
f0109cb5:	e8 2a 99 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0109cba:	83 c4 10             	add    $0x10,%esp
f0109cbd:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109cc3:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109cca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109ccd:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109cd3:	0f 83 9e fa ff ff    	jae    f0109777 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109cd9:	83 ec 0c             	sub    $0xc,%esp
f0109cdc:	6a 02                	push   $0x2
f0109cde:	e8 6a 43 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f0109ce3:	83 c4 10             	add    $0x10,%esp
f0109ce6:	85 c0                	test   %eax,%eax
f0109ce8:	74 72                	je     f0109d5c <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109cea:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109cf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf7:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109cfd:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109d00:	eb 2b                	jmp    f0109d2d <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109d02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109d05:	8b 10                	mov    (%eax),%edx
f0109d07:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d0d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d10:	6a 01                	push   $0x1
f0109d12:	6a 00                	push   $0x0
f0109d14:	52                   	push   %edx
f0109d15:	50                   	push   %eax
f0109d16:	e8 9c e1 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f0109d1b:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109d1e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d24:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109d2a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109d2d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d33:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109d37:	74 08                	je     f0109d41 <env_create+0xbd4>
f0109d39:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109d3c:	8b 52 10             	mov    0x10(%edx),%edx
f0109d3f:	eb 05                	jmp    f0109d46 <env_create+0xbd9>
f0109d41:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d46:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109d4c:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109d52:	85 c0                	test   %eax,%eax
f0109d54:	75 ac                	jne    f0109d02 <env_create+0xb95>
f0109d56:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109d5a:	75 a6                	jne    f0109d02 <env_create+0xb95>
f0109d5c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109d5f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109d62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109d65:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109d68:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109d6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109d71:	5b                   	pop    %ebx
f0109d72:	5e                   	pop    %esi
f0109d73:	5f                   	pop    %edi
f0109d74:	5d                   	pop    %ebp
f0109d75:	c3                   	ret    

f0109d76 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109d76:	55                   	push   %ebp
f0109d77:	89 e5                	mov    %esp,%ebp
f0109d79:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109d7c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d81:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d84:	74 25                	je     f0109dab <env_run+0x35>
	{
		curenv = e ;
f0109d86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d89:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4
		curenv->env_runs++ ;
f0109d8e:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d93:	8b 50 58             	mov    0x58(%eax),%edx
f0109d96:	42                   	inc    %edx
f0109d97:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109d9a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d9f:	8b 40 60             	mov    0x60(%eax),%eax
f0109da2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109da8:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109dab:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109db0:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109db7:	e8 03 a4 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109dbc:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109dc1:	83 ec 0c             	sub    $0xc,%esp
f0109dc4:	50                   	push   %eax
f0109dc5:	e8 0f 01 00 00       	call   f0109ed9 <env_pop_tf>

f0109dca <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109dca:	55                   	push   %ebp
f0109dcb:	89 e5                	mov    %esp,%ebp
f0109dcd:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109dd0:	83 ec 0c             	sub    $0xc,%esp
f0109dd3:	ff 75 08             	pushl  0x8(%ebp)
f0109dd6:	e8 3e 11 00 00       	call   f010af19 <unshare_pws_at_user_space>
f0109ddb:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109dde:	83 ec 04             	sub    $0x4,%esp
f0109de1:	68 7c 6a 13 f0       	push   $0xf0136a7c
f0109de6:	68 9d 01 00 00       	push   $0x19d
f0109deb:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109df0:	e8 10 64 ff ff       	call   f0100205 <_panic>

f0109df5 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109df5:	55                   	push   %ebp
f0109df6:	89 e5                	mov    %esp,%ebp
f0109df8:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109dfb:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109e00:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e03:	83 ec 0c             	sub    $0xc,%esp
f0109e06:	50                   	push   %eax
f0109e07:	e8 96 b4 ff ff       	call   f01052a2 <sched_exit_env>
f0109e0c:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109e0f:	e8 12 a9 ff ff       	call   f0104726 <fos_scheduler>

f0109e14 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109e14:	55                   	push   %ebp
f0109e15:	89 e5                	mov    %esp,%ebp
f0109e17:	53                   	push   %ebx
f0109e18:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109e1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109e1f:	75 15                	jne    f0109e36 <envid2env+0x22>
		*env_store = curenv;
f0109e21:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f0109e27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e2a:	89 10                	mov    %edx,(%eax)
		return 0;
f0109e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109e31:	e9 9e 00 00 00       	jmp    f0109ed4 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109e36:	8b 1d f0 e3 88 f0    	mov    0xf088e3f0,%ebx
f0109e3c:	83 ec 0c             	sub    $0xc,%esp
f0109e3f:	68 b1 02 00 00       	push   $0x2b1
f0109e44:	e8 cc 64 02 00       	call   f0130315 <nearest_pow2_ceil>
f0109e49:	83 c4 10             	add    $0x10,%esp
f0109e4c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109e4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e52:	21 c2                	and    %eax,%edx
f0109e54:	89 d0                	mov    %edx,%eax
f0109e56:	c1 e0 03             	shl    $0x3,%eax
f0109e59:	01 d0                	add    %edx,%eax
f0109e5b:	01 c0                	add    %eax,%eax
f0109e5d:	01 d0                	add    %edx,%eax
f0109e5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e66:	01 d0                	add    %edx,%eax
f0109e68:	c1 e0 04             	shl    $0x4,%eax
f0109e6b:	01 d8                	add    %ebx,%eax
f0109e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e73:	8b 40 54             	mov    0x54(%eax),%eax
f0109e76:	85 c0                	test   %eax,%eax
f0109e78:	74 0b                	je     f0109e85 <envid2env+0x71>
f0109e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e7d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e80:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e83:	74 10                	je     f0109e95 <envid2env+0x81>
		*env_store = 0;
f0109e85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e88:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109e8e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109e93:	eb 3f                	jmp    f0109ed4 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109e95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109e99:	74 2c                	je     f0109ec7 <envid2env+0xb3>
f0109e9b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109ea0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109ea3:	74 22                	je     f0109ec7 <envid2env+0xb3>
f0109ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ea8:	8b 50 50             	mov    0x50(%eax),%edx
f0109eab:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109eb0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109eb3:	39 c2                	cmp    %eax,%edx
f0109eb5:	74 10                	je     f0109ec7 <envid2env+0xb3>
		*env_store = 0;
f0109eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109eba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109ec0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109ec5:	eb 0d                	jmp    f0109ed4 <envid2env+0xc0>
	}

	*env_store = e;
f0109ec7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109eca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ecd:	89 10                	mov    %edx,(%eax)
	return 0;
f0109ecf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109ed4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109ed7:	c9                   	leave  
f0109ed8:	c3                   	ret    

f0109ed9 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109ed9:	55                   	push   %ebp
f0109eda:	89 e5                	mov    %esp,%ebp
f0109edc:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109edf:	8b 65 08             	mov    0x8(%ebp),%esp
f0109ee2:	61                   	popa   
f0109ee3:	07                   	pop    %es
f0109ee4:	1f                   	pop    %ds
f0109ee5:	83 c4 08             	add    $0x8,%esp
f0109ee8:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109ee9:	83 ec 04             	sub    $0x4,%esp
f0109eec:	68 a3 6a 13 f0       	push   $0xf0136aa3
f0109ef1:	68 fd 01 00 00       	push   $0x1fd
f0109ef6:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109efb:	e8 05 63 ff ff       	call   f0100205 <_panic>

f0109f00 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109f00:	55                   	push   %ebp
f0109f01:	89 e5                	mov    %esp,%ebp
f0109f03:	53                   	push   %ebx
f0109f04:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109f07:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109f0e:	e9 73 01 00 00       	jmp    f010a086 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109f13:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f1c:	89 d0                	mov    %edx,%eax
f0109f1e:	c1 e0 03             	shl    $0x3,%eax
f0109f21:	01 d0                	add    %edx,%eax
f0109f23:	01 c0                	add    %eax,%eax
f0109f25:	01 d0                	add    %edx,%eax
f0109f27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f2e:	01 d0                	add    %edx,%eax
f0109f30:	c1 e0 04             	shl    $0x4,%eax
f0109f33:	01 c8                	add    %ecx,%eax
f0109f35:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109f3c:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f45:	89 d0                	mov    %edx,%eax
f0109f47:	c1 e0 03             	shl    $0x3,%eax
f0109f4a:	01 d0                	add    %edx,%eax
f0109f4c:	01 c0                	add    %eax,%eax
f0109f4e:	01 d0                	add    %edx,%eax
f0109f50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f57:	01 d0                	add    %edx,%eax
f0109f59:	c1 e0 04             	shl    $0x4,%eax
f0109f5c:	01 c8                	add    %ecx,%eax
f0109f5e:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109f65:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f6e:	89 d0                	mov    %edx,%eax
f0109f70:	c1 e0 03             	shl    $0x3,%eax
f0109f73:	01 d0                	add    %edx,%eax
f0109f75:	01 c0                	add    %eax,%eax
f0109f77:	01 d0                	add    %edx,%eax
f0109f79:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f80:	01 d0                	add    %edx,%eax
f0109f82:	c1 e0 04             	shl    $0x4,%eax
f0109f85:	01 c8                	add    %ecx,%eax
f0109f87:	85 c0                	test   %eax,%eax
f0109f89:	75 17                	jne    f0109fa2 <env_init+0xa2>
f0109f8b:	83 ec 04             	sub    $0x4,%esp
f0109f8e:	68 58 6a 13 f0       	push   $0xf0136a58
f0109f93:	68 19 02 00 00       	push   $0x219
f0109f98:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109f9d:	e8 63 62 ff ff       	call   f0100205 <_panic>
f0109fa2:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109fa8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fab:	89 d0                	mov    %edx,%eax
f0109fad:	c1 e0 03             	shl    $0x3,%eax
f0109fb0:	01 d0                	add    %edx,%eax
f0109fb2:	01 c0                	add    %eax,%eax
f0109fb4:	01 d0                	add    %edx,%eax
f0109fb6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109fbd:	01 d0                	add    %edx,%eax
f0109fbf:	c1 e0 04             	shl    $0x4,%eax
f0109fc2:	01 c8                	add    %ecx,%eax
f0109fc4:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f0109fca:	89 50 44             	mov    %edx,0x44(%eax)
f0109fcd:	8b 40 44             	mov    0x44(%eax),%eax
f0109fd0:	85 c0                	test   %eax,%eax
f0109fd2:	74 2d                	je     f010a001 <env_init+0x101>
f0109fd4:	8b 0d f8 e3 88 f0    	mov    0xf088e3f8,%ecx
f0109fda:	8b 1d f0 e3 88 f0    	mov    0xf088e3f0,%ebx
f0109fe0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fe3:	89 d0                	mov    %edx,%eax
f0109fe5:	c1 e0 03             	shl    $0x3,%eax
f0109fe8:	01 d0                	add    %edx,%eax
f0109fea:	01 c0                	add    %eax,%eax
f0109fec:	01 d0                	add    %edx,%eax
f0109fee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ff5:	01 d0                	add    %edx,%eax
f0109ff7:	c1 e0 04             	shl    $0x4,%eax
f0109ffa:	01 d8                	add    %ebx,%eax
f0109ffc:	89 41 48             	mov    %eax,0x48(%ecx)
f0109fff:	eb 27                	jmp    f010a028 <env_init+0x128>
f010a001:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a00a:	89 d0                	mov    %edx,%eax
f010a00c:	c1 e0 03             	shl    $0x3,%eax
f010a00f:	01 d0                	add    %edx,%eax
f010a011:	01 c0                	add    %eax,%eax
f010a013:	01 d0                	add    %edx,%eax
f010a015:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a01c:	01 d0                	add    %edx,%eax
f010a01e:	c1 e0 04             	shl    $0x4,%eax
f010a021:	01 c8                	add    %ecx,%eax
f010a023:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010a028:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a02e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a031:	89 d0                	mov    %edx,%eax
f010a033:	c1 e0 03             	shl    $0x3,%eax
f010a036:	01 d0                	add    %edx,%eax
f010a038:	01 c0                	add    %eax,%eax
f010a03a:	01 d0                	add    %edx,%eax
f010a03c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a043:	01 d0                	add    %edx,%eax
f010a045:	c1 e0 04             	shl    $0x4,%eax
f010a048:	01 c8                	add    %ecx,%eax
f010a04a:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010a04f:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a055:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a058:	89 d0                	mov    %edx,%eax
f010a05a:	c1 e0 03             	shl    $0x3,%eax
f010a05d:	01 d0                	add    %edx,%eax
f010a05f:	01 c0                	add    %eax,%eax
f010a061:	01 d0                	add    %edx,%eax
f010a063:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a06a:	01 d0                	add    %edx,%eax
f010a06c:	c1 e0 04             	shl    $0x4,%eax
f010a06f:	01 c8                	add    %ecx,%eax
f010a071:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a078:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010a07d:	40                   	inc    %eax
f010a07e:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a083:	ff 4d f4             	decl   -0xc(%ebp)
f010a086:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a08a:	0f 89 83 fe ff ff    	jns    f0109f13 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a090:	90                   	nop
f010a091:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a094:	c9                   	leave  
f010a095:	c3                   	ret    

f010a096 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a096:	55                   	push   %ebp
f010a097:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a099:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f010a09f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a2:	89 10                	mov    %edx,(%eax)
f010a0a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a7:	8b 00                	mov    (%eax),%eax
f010a0a9:	85 c0                	test   %eax,%eax
f010a0ab:	75 07                	jne    f010a0b4 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a0ad:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a0b2:	eb 11                	jmp    f010a0c5 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a0b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b7:	8b 00                	mov    (%eax),%eax
f010a0b9:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a0c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a0c5:	5d                   	pop    %ebp
f010a0c6:	c3                   	ret    

f010a0c7 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a0c7:	55                   	push   %ebp
f010a0c8:	89 e5                	mov    %esp,%ebp
f010a0ca:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a0cd:	83 ec 04             	sub    $0x4,%esp
f010a0d0:	68 f0 05 00 00       	push   $0x5f0
f010a0d5:	6a 00                	push   $0x0
f010a0d7:	ff 75 08             	pushl  0x8(%ebp)
f010a0da:	e8 b2 76 02 00       	call   f0131791 <memset>
f010a0df:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a0e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e5:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a0ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a0f0:	75 17                	jne    f010a109 <free_environment+0x42>
f010a0f2:	83 ec 04             	sub    $0x4,%esp
f010a0f5:	68 58 6a 13 f0       	push   $0xf0136a58
f010a0fa:	68 36 02 00 00       	push   $0x236
f010a0ff:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a104:	e8 fc 60 ff ff       	call   f0100205 <_panic>
f010a109:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f010a10f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a112:	89 50 44             	mov    %edx,0x44(%eax)
f010a115:	8b 45 08             	mov    0x8(%ebp),%eax
f010a118:	8b 40 44             	mov    0x44(%eax),%eax
f010a11b:	85 c0                	test   %eax,%eax
f010a11d:	74 0d                	je     f010a12c <free_environment+0x65>
f010a11f:	a1 f8 e3 88 f0       	mov    0xf088e3f8,%eax
f010a124:	8b 55 08             	mov    0x8(%ebp),%edx
f010a127:	89 50 48             	mov    %edx,0x48(%eax)
f010a12a:	eb 08                	jmp    f010a134 <free_environment+0x6d>
f010a12c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a12f:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010a134:	8b 45 08             	mov    0x8(%ebp),%eax
f010a137:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010a13c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a146:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010a14b:	40                   	inc    %eax
f010a14c:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
}
f010a151:	90                   	nop
f010a152:	c9                   	leave  
f010a153:	c3                   	ret    

f010a154 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a154:	55                   	push   %ebp
f010a155:	89 e5                	mov    %esp,%ebp
f010a157:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a15a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a15d:	89 d0                	mov    %edx,%eax
f010a15f:	01 c0                	add    %eax,%eax
f010a161:	01 d0                	add    %edx,%eax
f010a163:	c1 e0 03             	shl    $0x3,%eax
f010a166:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a169:	83 ec 0c             	sub    $0xc,%esp
f010a16c:	ff 75 f4             	pushl  -0xc(%ebp)
f010a16f:	e8 1b da ff ff       	call   f0107b8f <kmalloc>
f010a174:	83 c4 10             	add    $0x10,%esp
f010a177:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a17a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a17e:	75 17                	jne    f010a197 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a180:	83 ec 04             	sub    $0x4,%esp
f010a183:	68 af 6a 13 f0       	push   $0xf0136aaf
f010a188:	68 44 02 00 00       	push   $0x244
f010a18d:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a192:	e8 6e 60 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a197:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a19a:	c9                   	leave  
f010a19b:	c3                   	ret    

f010a19c <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a19c:	55                   	push   %ebp
f010a19d:	89 e5                	mov    %esp,%ebp
f010a19f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a1a2:	83 ec 0c             	sub    $0xc,%esp
f010a1a5:	68 00 10 00 00       	push   $0x1000
f010a1aa:	e8 e0 d9 ff ff       	call   f0107b8f <kmalloc>
f010a1af:	83 c4 10             	add    $0x10,%esp
f010a1b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a1b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1b9:	75 17                	jne    f010a1d2 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a1bb:	83 ec 04             	sub    $0x4,%esp
f010a1be:	68 af 6a 13 f0       	push   $0xf0136aaf
f010a1c3:	68 53 02 00 00       	push   $0x253
f010a1c8:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a1cd:	e8 33 60 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f010a1d5:	c9                   	leave  
f010a1d6:	c3                   	ret    

f010a1d7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a1d7:	55                   	push   %ebp
f010a1d8:	89 e5                	mov    %esp,%ebp
f010a1da:	53                   	push   %ebx
f010a1db:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a1de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1e1:	8b 40 0c             	mov    0xc(%eax),%eax
f010a1e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a1e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1ea:	8b 40 08             	mov    0x8(%eax),%eax
f010a1ed:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a1f0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a1f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a1fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a1fd:	01 c2                	add    %eax,%edx
f010a1ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a202:	01 d0                	add    %edx,%eax
f010a204:	48                   	dec    %eax
f010a205:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a208:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a20b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a210:	f7 75 dc             	divl   -0x24(%ebp)
f010a213:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a216:	29 d0                	sub    %edx,%eax
f010a218:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a21b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a21e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a221:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a224:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a22c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a233:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a23a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a23d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a243:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a24a:	0f 85 c8 05 00 00    	jne    f010a818 <program_segment_alloc_map_copy_workingset+0x641>
f010a250:	8b 45 08             	mov    0x8(%ebp),%eax
f010a253:	05 5c 05 00 00       	add    $0x55c,%eax
f010a258:	83 ec 08             	sub    $0x8,%esp
f010a25b:	68 cc 6a 13 f0       	push   $0xf0136acc
f010a260:	50                   	push   %eax
f010a261:	e8 49 74 02 00       	call   f01316af <strcmp>
f010a266:	83 c4 10             	add    $0x10,%esp
f010a269:	85 c0                	test   %eax,%eax
f010a26b:	0f 84 a7 05 00 00    	je     f010a818 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a271:	8b 45 14             	mov    0x14(%ebp),%eax
f010a274:	83 f8 06             	cmp    $0x6,%eax
f010a277:	76 05                	jbe    f010a27e <program_segment_alloc_map_copy_workingset+0xa7>
f010a279:	b8 06 00 00 00       	mov    $0x6,%eax
f010a27e:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a281:	e9 92 05 00 00       	jmp    f010a818 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a286:	83 ec 0c             	sub    $0xc,%esp
f010a289:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a28c:	50                   	push   %eax
f010a28d:	e8 60 c6 ff ff       	call   f01068f2 <allocate_frame>
f010a292:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a295:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a298:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a29e:	6a 06                	push   $0x6
f010a2a0:	ff 75 f4             	pushl  -0xc(%ebp)
f010a2a3:	52                   	push   %edx
f010a2a4:	50                   	push   %eax
f010a2a5:	e8 53 cc ff ff       	call   f0106efd <loadtime_map_frame>
f010a2aa:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a2ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2bc:	89 d0                	mov    %edx,%eax
f010a2be:	01 c0                	add    %eax,%eax
f010a2c0:	01 d0                	add    %edx,%eax
f010a2c2:	c1 e0 03             	shl    $0x3,%eax
f010a2c5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a2c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2cb:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2dc:	89 d0                	mov    %edx,%eax
f010a2de:	01 c0                	add    %eax,%eax
f010a2e0:	01 d0                	add    %edx,%eax
f010a2e2:	c1 e0 03             	shl    $0x3,%eax
f010a2e5:	01 c8                	add    %ecx,%eax
f010a2e7:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a2eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ee:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2fa:	89 d0                	mov    %edx,%eax
f010a2fc:	01 c0                	add    %eax,%eax
f010a2fe:	01 d0                	add    %edx,%eax
f010a300:	c1 e0 03             	shl    $0x3,%eax
f010a303:	01 c8                	add    %ecx,%eax
f010a305:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a30c:	83 ec 0c             	sub    $0xc,%esp
f010a30f:	6a 02                	push   $0x2
f010a311:	e8 37 3d 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f010a316:	83 c4 10             	add    $0x10,%esp
f010a319:	85 c0                	test   %eax,%eax
f010a31b:	0f 84 c8 03 00 00    	je     f010a6e9 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a321:	8b 45 08             	mov    0x8(%ebp),%eax
f010a324:	8b 48 78             	mov    0x78(%eax),%ecx
f010a327:	8b 45 08             	mov    0x8(%ebp),%eax
f010a32a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a330:	89 d0                	mov    %edx,%eax
f010a332:	01 c0                	add    %eax,%eax
f010a334:	01 d0                	add    %edx,%eax
f010a336:	c1 e0 03             	shl    $0x3,%eax
f010a339:	01 c8                	add    %ecx,%eax
f010a33b:	85 c0                	test   %eax,%eax
f010a33d:	75 17                	jne    f010a356 <program_segment_alloc_map_copy_workingset+0x17f>
f010a33f:	83 ec 04             	sub    $0x4,%esp
f010a342:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010a347:	68 85 02 00 00       	push   $0x285
f010a34c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a351:	e8 af 5e ff ff       	call   f0100205 <_panic>
f010a356:	8b 45 08             	mov    0x8(%ebp),%eax
f010a359:	8b 48 78             	mov    0x78(%eax),%ecx
f010a35c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a365:	89 d0                	mov    %edx,%eax
f010a367:	01 c0                	add    %eax,%eax
f010a369:	01 d0                	add    %edx,%eax
f010a36b:	c1 e0 03             	shl    $0x3,%eax
f010a36e:	01 c8                	add    %ecx,%eax
f010a370:	8b 40 10             	mov    0x10(%eax),%eax
f010a373:	85 c0                	test   %eax,%eax
f010a375:	74 3f                	je     f010a3b6 <program_segment_alloc_map_copy_workingset+0x1df>
f010a377:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a37d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a380:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a386:	89 d0                	mov    %edx,%eax
f010a388:	01 c0                	add    %eax,%eax
f010a38a:	01 d0                	add    %edx,%eax
f010a38c:	c1 e0 03             	shl    $0x3,%eax
f010a38f:	01 c8                	add    %ecx,%eax
f010a391:	8b 50 10             	mov    0x10(%eax),%edx
f010a394:	8b 45 08             	mov    0x8(%ebp),%eax
f010a397:	8b 58 78             	mov    0x78(%eax),%ebx
f010a39a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a3a3:	89 c8                	mov    %ecx,%eax
f010a3a5:	01 c0                	add    %eax,%eax
f010a3a7:	01 c8                	add    %ecx,%eax
f010a3a9:	c1 e0 03             	shl    $0x3,%eax
f010a3ac:	01 d8                	add    %ebx,%eax
f010a3ae:	8b 40 14             	mov    0x14(%eax),%eax
f010a3b1:	89 42 14             	mov    %eax,0x14(%edx)
f010a3b4:	eb 26                	jmp    f010a3dc <program_segment_alloc_map_copy_workingset+0x205>
f010a3b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3bf:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3c5:	89 d0                	mov    %edx,%eax
f010a3c7:	01 c0                	add    %eax,%eax
f010a3c9:	01 d0                	add    %edx,%eax
f010a3cb:	c1 e0 03             	shl    $0x3,%eax
f010a3ce:	01 c8                	add    %ecx,%eax
f010a3d0:	8b 50 14             	mov    0x14(%eax),%edx
f010a3d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d6:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a3dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3df:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3eb:	89 d0                	mov    %edx,%eax
f010a3ed:	01 c0                	add    %eax,%eax
f010a3ef:	01 d0                	add    %edx,%eax
f010a3f1:	c1 e0 03             	shl    $0x3,%eax
f010a3f4:	01 c8                	add    %ecx,%eax
f010a3f6:	8b 40 14             	mov    0x14(%eax),%eax
f010a3f9:	85 c0                	test   %eax,%eax
f010a3fb:	74 3f                	je     f010a43c <program_segment_alloc_map_copy_workingset+0x265>
f010a3fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a400:	8b 48 78             	mov    0x78(%eax),%ecx
f010a403:	8b 45 08             	mov    0x8(%ebp),%eax
f010a406:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a40c:	89 d0                	mov    %edx,%eax
f010a40e:	01 c0                	add    %eax,%eax
f010a410:	01 d0                	add    %edx,%eax
f010a412:	c1 e0 03             	shl    $0x3,%eax
f010a415:	01 c8                	add    %ecx,%eax
f010a417:	8b 50 14             	mov    0x14(%eax),%edx
f010a41a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a420:	8b 45 08             	mov    0x8(%ebp),%eax
f010a423:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a429:	89 c8                	mov    %ecx,%eax
f010a42b:	01 c0                	add    %eax,%eax
f010a42d:	01 c8                	add    %ecx,%eax
f010a42f:	c1 e0 03             	shl    $0x3,%eax
f010a432:	01 d8                	add    %ebx,%eax
f010a434:	8b 40 10             	mov    0x10(%eax),%eax
f010a437:	89 42 10             	mov    %eax,0x10(%edx)
f010a43a:	eb 26                	jmp    f010a462 <program_segment_alloc_map_copy_workingset+0x28b>
f010a43c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a442:	8b 45 08             	mov    0x8(%ebp),%eax
f010a445:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a44b:	89 d0                	mov    %edx,%eax
f010a44d:	01 c0                	add    %eax,%eax
f010a44f:	01 d0                	add    %edx,%eax
f010a451:	c1 e0 03             	shl    $0x3,%eax
f010a454:	01 c8                	add    %ecx,%eax
f010a456:	8b 50 10             	mov    0x10(%eax),%edx
f010a459:	8b 45 08             	mov    0x8(%ebp),%eax
f010a45c:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a462:	8b 45 08             	mov    0x8(%ebp),%eax
f010a465:	8b 48 78             	mov    0x78(%eax),%ecx
f010a468:	8b 45 08             	mov    0x8(%ebp),%eax
f010a46b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a471:	89 d0                	mov    %edx,%eax
f010a473:	01 c0                	add    %eax,%eax
f010a475:	01 d0                	add    %edx,%eax
f010a477:	c1 e0 03             	shl    $0x3,%eax
f010a47a:	01 c8                	add    %ecx,%eax
f010a47c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a483:	8b 45 08             	mov    0x8(%ebp),%eax
f010a486:	8b 48 78             	mov    0x78(%eax),%ecx
f010a489:	8b 45 08             	mov    0x8(%ebp),%eax
f010a48c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a492:	89 d0                	mov    %edx,%eax
f010a494:	01 c0                	add    %eax,%eax
f010a496:	01 d0                	add    %edx,%eax
f010a498:	c1 e0 03             	shl    $0x3,%eax
f010a49b:	01 c8                	add    %ecx,%eax
f010a49d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a7:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a4ad:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a4b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b3:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a4b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4bc:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a4c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c5:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a4cb:	48                   	dec    %eax
f010a4cc:	39 c2                	cmp    %eax,%edx
f010a4ce:	0f 83 0d 01 00 00    	jae    f010a5e1 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a4d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4e3:	89 d0                	mov    %edx,%eax
f010a4e5:	01 c0                	add    %eax,%eax
f010a4e7:	01 d0                	add    %edx,%eax
f010a4e9:	c1 e0 03             	shl    $0x3,%eax
f010a4ec:	01 c8                	add    %ecx,%eax
f010a4ee:	85 c0                	test   %eax,%eax
f010a4f0:	75 17                	jne    f010a509 <program_segment_alloc_map_copy_workingset+0x332>
f010a4f2:	83 ec 04             	sub    $0x4,%esp
f010a4f5:	68 58 6a 13 f0       	push   $0xf0136a58
f010a4fa:	68 89 02 00 00       	push   $0x289
f010a4ff:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a504:	e8 fc 5c ff ff       	call   f0100205 <_panic>
f010a509:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a50f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a512:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a518:	89 d0                	mov    %edx,%eax
f010a51a:	01 c0                	add    %eax,%eax
f010a51c:	01 d0                	add    %edx,%eax
f010a51e:	c1 e0 03             	shl    $0x3,%eax
f010a521:	01 c8                	add    %ecx,%eax
f010a523:	8b 55 08             	mov    0x8(%ebp),%edx
f010a526:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a52c:	89 50 10             	mov    %edx,0x10(%eax)
f010a52f:	8b 40 10             	mov    0x10(%eax),%eax
f010a532:	85 c0                	test   %eax,%eax
f010a534:	74 28                	je     f010a55e <program_segment_alloc_map_copy_workingset+0x387>
f010a536:	8b 45 08             	mov    0x8(%ebp),%eax
f010a539:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a53f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a542:	8b 58 78             	mov    0x78(%eax),%ebx
f010a545:	8b 45 08             	mov    0x8(%ebp),%eax
f010a548:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a54e:	89 c8                	mov    %ecx,%eax
f010a550:	01 c0                	add    %eax,%eax
f010a552:	01 c8                	add    %ecx,%eax
f010a554:	c1 e0 03             	shl    $0x3,%eax
f010a557:	01 d8                	add    %ebx,%eax
f010a559:	89 42 14             	mov    %eax,0x14(%edx)
f010a55c:	eb 24                	jmp    f010a582 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a55e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a561:	8b 48 78             	mov    0x78(%eax),%ecx
f010a564:	8b 45 08             	mov    0x8(%ebp),%eax
f010a567:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a56d:	89 d0                	mov    %edx,%eax
f010a56f:	01 c0                	add    %eax,%eax
f010a571:	01 d0                	add    %edx,%eax
f010a573:	c1 e0 03             	shl    $0x3,%eax
f010a576:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a579:	8b 45 08             	mov    0x8(%ebp),%eax
f010a57c:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a582:	8b 45 08             	mov    0x8(%ebp),%eax
f010a585:	8b 48 78             	mov    0x78(%eax),%ecx
f010a588:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a591:	89 d0                	mov    %edx,%eax
f010a593:	01 c0                	add    %eax,%eax
f010a595:	01 d0                	add    %edx,%eax
f010a597:	c1 e0 03             	shl    $0x3,%eax
f010a59a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a59d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a0:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a5a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5af:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5b5:	89 d0                	mov    %edx,%eax
f010a5b7:	01 c0                	add    %eax,%eax
f010a5b9:	01 d0                	add    %edx,%eax
f010a5bb:	c1 e0 03             	shl    $0x3,%eax
f010a5be:	01 c8                	add    %ecx,%eax
f010a5c0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a5c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ca:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a5d0:	8d 50 01             	lea    0x1(%eax),%edx
f010a5d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d6:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a5dc:	e9 08 01 00 00       	jmp    f010a6e9 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a5e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5f0:	89 d0                	mov    %edx,%eax
f010a5f2:	01 c0                	add    %eax,%eax
f010a5f4:	01 d0                	add    %edx,%eax
f010a5f6:	c1 e0 03             	shl    $0x3,%eax
f010a5f9:	01 c8                	add    %ecx,%eax
f010a5fb:	85 c0                	test   %eax,%eax
f010a5fd:	75 17                	jne    f010a616 <program_segment_alloc_map_copy_workingset+0x43f>
f010a5ff:	83 ec 04             	sub    $0x4,%esp
f010a602:	68 58 6a 13 f0       	push   $0xf0136a58
f010a607:	68 8e 02 00 00       	push   $0x28e
f010a60c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a611:	e8 ef 5b ff ff       	call   f0100205 <_panic>
f010a616:	8b 45 08             	mov    0x8(%ebp),%eax
f010a619:	8b 48 78             	mov    0x78(%eax),%ecx
f010a61c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a625:	89 d0                	mov    %edx,%eax
f010a627:	01 c0                	add    %eax,%eax
f010a629:	01 d0                	add    %edx,%eax
f010a62b:	c1 e0 03             	shl    $0x3,%eax
f010a62e:	01 c8                	add    %ecx,%eax
f010a630:	8b 55 08             	mov    0x8(%ebp),%edx
f010a633:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a639:	89 50 10             	mov    %edx,0x10(%eax)
f010a63c:	8b 40 10             	mov    0x10(%eax),%eax
f010a63f:	85 c0                	test   %eax,%eax
f010a641:	74 28                	je     f010a66b <program_segment_alloc_map_copy_workingset+0x494>
f010a643:	8b 45 08             	mov    0x8(%ebp),%eax
f010a646:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a64c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64f:	8b 58 78             	mov    0x78(%eax),%ebx
f010a652:	8b 45 08             	mov    0x8(%ebp),%eax
f010a655:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a65b:	89 c8                	mov    %ecx,%eax
f010a65d:	01 c0                	add    %eax,%eax
f010a65f:	01 c8                	add    %ecx,%eax
f010a661:	c1 e0 03             	shl    $0x3,%eax
f010a664:	01 d8                	add    %ebx,%eax
f010a666:	89 42 14             	mov    %eax,0x14(%edx)
f010a669:	eb 24                	jmp    f010a68f <program_segment_alloc_map_copy_workingset+0x4b8>
f010a66b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a67a:	89 d0                	mov    %edx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 d0                	add    %edx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a686:	8b 45 08             	mov    0x8(%ebp),%eax
f010a689:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a68f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a692:	8b 48 78             	mov    0x78(%eax),%ecx
f010a695:	8b 45 08             	mov    0x8(%ebp),%eax
f010a698:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a69e:	89 d0                	mov    %edx,%eax
f010a6a0:	01 c0                	add    %eax,%eax
f010a6a2:	01 d0                	add    %edx,%eax
f010a6a4:	c1 e0 03             	shl    $0x3,%eax
f010a6a7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ad:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a6b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6bc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6c2:	89 d0                	mov    %edx,%eax
f010a6c4:	01 c0                	add    %eax,%eax
f010a6c6:	01 d0                	add    %edx,%eax
f010a6c8:	c1 e0 03             	shl    $0x3,%eax
f010a6cb:	01 c8                	add    %ecx,%eax
f010a6cd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a6d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d7:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a6dd:	8d 50 01             	lea    0x1(%eax),%edx
f010a6e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e3:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a6f2:	8d 50 01             	lea    0x1(%eax),%edx
f010a6f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f8:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a701:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a707:	8b 55 08             	mov    0x8(%ebp),%edx
f010a70a:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a70d:	ba 00 00 00 00       	mov    $0x0,%edx
f010a712:	f7 f1                	div    %ecx
f010a714:	8b 45 08             	mov    0x8(%ebp),%eax
f010a717:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a71d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a720:	c1 e8 16             	shr    $0x16,%eax
f010a723:	89 c2                	mov    %eax,%edx
f010a725:	8b 45 18             	mov    0x18(%ebp),%eax
f010a728:	8b 00                	mov    (%eax),%eax
f010a72a:	39 c2                	cmp    %eax,%edx
f010a72c:	0f 84 cf 00 00 00    	je     f010a801 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a732:	8b 45 08             	mov    0x8(%ebp),%eax
f010a735:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a73b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a73e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a741:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a744:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a749:	89 c1                	mov    %eax,%ecx
f010a74b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a74e:	89 d0                	mov    %edx,%eax
f010a750:	01 c0                	add    %eax,%eax
f010a752:	01 d0                	add    %edx,%eax
f010a754:	c1 e0 03             	shl    $0x3,%eax
f010a757:	01 d8                	add    %ebx,%eax
f010a759:	83 c0 7c             	add    $0x7c,%eax
f010a75c:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a75e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a761:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a767:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a76a:	89 d0                	mov    %edx,%eax
f010a76c:	01 c0                	add    %eax,%eax
f010a76e:	01 d0                	add    %edx,%eax
f010a770:	c1 e0 03             	shl    $0x3,%eax
f010a773:	01 c8                	add    %ecx,%eax
f010a775:	83 e8 80             	sub    $0xffffff80,%eax
f010a778:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a77b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77e:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a784:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a787:	89 d0                	mov    %edx,%eax
f010a789:	01 c0                	add    %eax,%eax
f010a78b:	01 d0                	add    %edx,%eax
f010a78d:	c1 e0 03             	shl    $0x3,%eax
f010a790:	01 c8                	add    %ecx,%eax
f010a792:	05 84 00 00 00       	add    $0x84,%eax
f010a797:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a79d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7a6:	8d 50 01             	lea    0x1(%eax),%edx
f010a7a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ac:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a7b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7bb:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a7c0:	ba 00 00 00 00       	mov    $0x0,%edx
f010a7c5:	f7 f1                	div    %ecx
f010a7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ca:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a7d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d3:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7d9:	85 c0                	test   %eax,%eax
f010a7db:	75 17                	jne    f010a7f4 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a7dd:	83 ec 04             	sub    $0x4,%esp
f010a7e0:	68 d0 6a 13 f0       	push   $0xf0136ad0
f010a7e5:	68 9e 02 00 00       	push   $0x29e
f010a7ea:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a7ef:	e8 11 5a ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a7f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7f7:	c1 e8 16             	shr    $0x16,%eax
f010a7fa:	89 c2                	mov    %eax,%edx
f010a7fc:	8b 45 18             	mov    0x18(%ebp),%eax
f010a7ff:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a801:	8b 45 10             	mov    0x10(%ebp),%eax
f010a804:	8b 00                	mov    (%eax),%eax
f010a806:	8d 50 01             	lea    0x1(%eax),%edx
f010a809:	8b 45 10             	mov    0x10(%ebp),%eax
f010a80c:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a80e:	ff 45 f0             	incl   -0x10(%ebp)
f010a811:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a818:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a81b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a81e:	73 0c                	jae    f010a82c <program_segment_alloc_map_copy_workingset+0x655>
f010a820:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a823:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a826:	0f 82 5a fa ff ff    	jb     f010a286 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a82c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a82f:	8b 00                	mov    (%eax),%eax
f010a831:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a834:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a837:	8b 40 0c             	mov    0xc(%eax),%eax
f010a83a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a83d:	eb 10                	jmp    f010a84f <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a83f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a842:	8a 10                	mov    (%eax),%dl
f010a844:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a847:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a849:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a84c:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a84f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a852:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a855:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a858:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a85d:	89 c2                	mov    %eax,%edx
f010a85f:	8b 45 10             	mov    0x10(%ebp),%eax
f010a862:	8b 00                	mov    (%eax),%eax
f010a864:	c1 e0 0c             	shl    $0xc,%eax
f010a867:	01 c2                	add    %eax,%edx
f010a869:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a86c:	39 c2                	cmp    %eax,%edx
f010a86e:	76 1d                	jbe    f010a88d <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a870:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a873:	8b 50 04             	mov    0x4(%eax),%edx
f010a876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a879:	01 c2                	add    %eax,%edx
f010a87b:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a87e:	39 c2                	cmp    %eax,%edx
f010a880:	77 bd                	ja     f010a83f <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a882:	eb 09                	jmp    f010a88d <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a884:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a887:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a88a:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a88d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a890:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a893:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a896:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a89b:	89 c2                	mov    %eax,%edx
f010a89d:	8b 45 10             	mov    0x10(%ebp),%eax
f010a8a0:	8b 00                	mov    (%eax),%eax
f010a8a2:	c1 e0 0c             	shl    $0xc,%eax
f010a8a5:	01 c2                	add    %eax,%edx
f010a8a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a8aa:	39 c2                	cmp    %eax,%edx
f010a8ac:	77 d6                	ja     f010a884 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a8ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8b6:	c9                   	leave  
f010a8b7:	c3                   	ret    

f010a8b8 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a8b8:	55                   	push   %ebp
f010a8b9:	89 e5                	mov    %esp,%ebp
f010a8bb:	53                   	push   %ebx
f010a8bc:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a8bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a8c5:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a8c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8cb:	8b 55 10             	mov    0x10(%ebp),%edx
f010a8ce:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a8d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a8d8:	eb 17                	jmp    f010a8f1 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a8da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8dd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a8e3:	c1 e2 02             	shl    $0x2,%edx
f010a8e6:	01 d0                	add    %edx,%eax
f010a8e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a8ee:	ff 45 f4             	incl   -0xc(%ebp)
f010a8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8f4:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a8f9:	76 df                	jbe    f010a8da <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a8fb:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a902:	eb 22                	jmp    f010a926 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a904:	8b 45 08             	mov    0x8(%ebp),%eax
f010a907:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a90a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a90d:	c1 e2 02             	shl    $0x2,%edx
f010a910:	01 c2                	add    %eax,%edx
f010a912:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010a917:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a91a:	c1 e1 02             	shl    $0x2,%ecx
f010a91d:	01 c8                	add    %ecx,%eax
f010a91f:	8b 00                	mov    (%eax),%eax
f010a921:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a923:	ff 45 f4             	incl   -0xc(%ebp)
f010a926:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a92d:	7e d5                	jle    f010a904 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a92f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a932:	8b 40 74             	mov    0x74(%eax),%eax
f010a935:	83 ec 08             	sub    $0x8,%esp
f010a938:	50                   	push   %eax
f010a939:	ff 75 08             	pushl  0x8(%ebp)
f010a93c:	e8 13 f8 ff ff       	call   f010a154 <create_user_page_WS>
f010a941:	83 c4 10             	add    $0x10,%esp
f010a944:	89 c2                	mov    %eax,%edx
f010a946:	8b 45 08             	mov    0x8(%ebp),%eax
f010a949:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a94c:	83 ec 0c             	sub    $0xc,%esp
f010a94f:	ff 75 08             	pushl  0x8(%ebp)
f010a952:	e8 f3 04 00 00       	call   f010ae4a <share_pws_at_user_space>
f010a957:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a95a:	83 ec 0c             	sub    $0xc,%esp
f010a95d:	6a 02                	push   $0x2
f010a95f:	e8 e9 36 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f010a964:	83 c4 10             	add    $0x10,%esp
f010a967:	85 c0                	test   %eax,%eax
f010a969:	0f 84 04 01 00 00    	je     f010aa73 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a96f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a976:	e9 e7 00 00 00       	jmp    f010aa62 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a97b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a981:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a984:	89 d0                	mov    %edx,%eax
f010a986:	01 c0                	add    %eax,%eax
f010a988:	01 d0                	add    %edx,%eax
f010a98a:	c1 e0 03             	shl    $0x3,%eax
f010a98d:	01 c8                	add    %ecx,%eax
f010a98f:	85 c0                	test   %eax,%eax
f010a991:	75 17                	jne    f010a9aa <initialize_environment+0xf2>
f010a993:	83 ec 04             	sub    $0x4,%esp
f010a996:	68 58 6a 13 f0       	push   $0xf0136a58
f010a99b:	68 fc 02 00 00       	push   $0x2fc
f010a9a0:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a9a5:	e8 5b 58 ff ff       	call   f0100205 <_panic>
f010a9aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ad:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a9b3:	89 d0                	mov    %edx,%eax
f010a9b5:	01 c0                	add    %eax,%eax
f010a9b7:	01 d0                	add    %edx,%eax
f010a9b9:	c1 e0 03             	shl    $0x3,%eax
f010a9bc:	01 c8                	add    %ecx,%eax
f010a9be:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9c1:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a9c7:	89 50 10             	mov    %edx,0x10(%eax)
f010a9ca:	8b 40 10             	mov    0x10(%eax),%eax
f010a9cd:	85 c0                	test   %eax,%eax
f010a9cf:	74 22                	je     f010a9f3 <initialize_environment+0x13b>
f010a9d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d4:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a9da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9dd:	8b 58 78             	mov    0x78(%eax),%ebx
f010a9e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a9e3:	89 c8                	mov    %ecx,%eax
f010a9e5:	01 c0                	add    %eax,%eax
f010a9e7:	01 c8                	add    %ecx,%eax
f010a9e9:	c1 e0 03             	shl    $0x3,%eax
f010a9ec:	01 d8                	add    %ebx,%eax
f010a9ee:	89 42 14             	mov    %eax,0x14(%edx)
f010a9f1:	eb 1e                	jmp    f010aa11 <initialize_environment+0x159>
f010a9f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a9fc:	89 d0                	mov    %edx,%eax
f010a9fe:	01 c0                	add    %eax,%eax
f010aa00:	01 d0                	add    %edx,%eax
f010aa02:	c1 e0 03             	shl    $0x3,%eax
f010aa05:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010aa08:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0b:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010aa11:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa14:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa1a:	89 d0                	mov    %edx,%eax
f010aa1c:	01 c0                	add    %eax,%eax
f010aa1e:	01 d0                	add    %edx,%eax
f010aa20:	c1 e0 03             	shl    $0x3,%eax
f010aa23:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010aa26:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa29:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010aa2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa32:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa38:	89 d0                	mov    %edx,%eax
f010aa3a:	01 c0                	add    %eax,%eax
f010aa3c:	01 d0                	add    %edx,%eax
f010aa3e:	c1 e0 03             	shl    $0x3,%eax
f010aa41:	01 c8                	add    %ecx,%eax
f010aa43:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010aa4a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010aa53:	8d 50 01             	lea    0x1(%eax),%edx
f010aa56:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa59:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010aa5f:	ff 45 f0             	incl   -0x10(%ebp)
f010aa62:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa65:	8b 50 74             	mov    0x74(%eax),%edx
f010aa68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa6b:	39 c2                	cmp    %eax,%edx
f010aa6d:	0f 87 08 ff ff ff    	ja     f010a97b <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010aa73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa7a:	eb 50                	jmp    f010aacc <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010aa7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7f:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa85:	89 d0                	mov    %edx,%eax
f010aa87:	01 c0                	add    %eax,%eax
f010aa89:	01 d0                	add    %edx,%eax
f010aa8b:	c1 e0 03             	shl    $0x3,%eax
f010aa8e:	01 c8                	add    %ecx,%eax
f010aa90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010aa96:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa99:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa9f:	89 d0                	mov    %edx,%eax
f010aaa1:	01 c0                	add    %eax,%eax
f010aaa3:	01 d0                	add    %edx,%eax
f010aaa5:	c1 e0 03             	shl    $0x3,%eax
f010aaa8:	01 c8                	add    %ecx,%eax
f010aaaa:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010aaae:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab1:	8b 48 78             	mov    0x78(%eax),%ecx
f010aab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab7:	89 d0                	mov    %edx,%eax
f010aab9:	01 c0                	add    %eax,%eax
f010aabb:	01 d0                	add    %edx,%eax
f010aabd:	c1 e0 03             	shl    $0x3,%eax
f010aac0:	01 c8                	add    %ecx,%eax
f010aac2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010aac9:	ff 45 f4             	incl   -0xc(%ebp)
f010aacc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacf:	8b 50 74             	mov    0x74(%eax),%edx
f010aad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad5:	39 c2                	cmp    %eax,%edx
f010aad7:	77 a3                	ja     f010aa7c <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010aad9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadc:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010aae3:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010aae6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aaed:	eb 50                	jmp    f010ab3f <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010aaef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aaf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaf5:	89 d0                	mov    %edx,%eax
f010aaf7:	01 c0                	add    %eax,%eax
f010aaf9:	01 d0                	add    %edx,%eax
f010aafb:	c1 e0 03             	shl    $0x3,%eax
f010aafe:	01 c8                	add    %ecx,%eax
f010ab00:	83 c0 7c             	add    $0x7c,%eax
f010ab03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010ab09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab0f:	89 d0                	mov    %edx,%eax
f010ab11:	01 c0                	add    %eax,%eax
f010ab13:	01 d0                	add    %edx,%eax
f010ab15:	c1 e0 03             	shl    $0x3,%eax
f010ab18:	01 c8                	add    %ecx,%eax
f010ab1a:	83 e8 80             	sub    $0xffffff80,%eax
f010ab1d:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ab20:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab26:	89 d0                	mov    %edx,%eax
f010ab28:	01 c0                	add    %eax,%eax
f010ab2a:	01 d0                	add    %edx,%eax
f010ab2c:	c1 e0 03             	shl    $0x3,%eax
f010ab2f:	01 c8                	add    %ecx,%eax
f010ab31:	05 84 00 00 00       	add    $0x84,%eax
f010ab36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ab3c:	ff 45 f4             	incl   -0xc(%ebp)
f010ab3f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ab43:	7e aa                	jle    f010aaef <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ab45:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab48:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ab4f:	00 00 00 

	e->pageFaultsCounter=0;
f010ab52:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab55:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ab5c:	00 00 00 
	e->tableFaultsCounter=0;
f010ab5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab62:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ab69:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ab6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6f:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ab76:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ab79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7c:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ab83:	00 00 00 

	e->nModifiedPages=0;
f010ab86:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab89:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ab90:	00 00 00 
	e->nNotModifiedPages=0;
f010ab93:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab96:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ab9d:	00 00 00 
	e->nClocks = 0;
f010aba0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba3:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010abaa:	00 00 00 

	//2020
	e->nPageIn = 0;
f010abad:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb0:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010abb7:	00 00 00 
	e->nPageOut = 0;
f010abba:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbd:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010abc4:	00 00 00 
	e->nNewPageAdded = 0;
f010abc7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abca:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010abd1:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010abd4:	83 ec 0c             	sub    $0xc,%esp
f010abd7:	ff 75 08             	pushl  0x8(%ebp)
f010abda:	e8 09 00 00 00       	call   f010abe8 <complete_environment_initialization>
f010abdf:	83 c4 10             	add    $0x10,%esp
}
f010abe2:	90                   	nop
f010abe3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe6:	c9                   	leave  
f010abe7:	c3                   	ret    

f010abe8 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010abe8:	55                   	push   %ebp
f010abe9:	89 e5                	mov    %esp,%ebp
f010abeb:	53                   	push   %ebx
f010abec:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010abef:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abf5:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010abfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfe:	8b 40 60             	mov    0x60(%eax),%eax
f010ac01:	83 c8 03             	or     $0x3,%eax
f010ac04:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010ac06:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac09:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac0c:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010ac12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac15:	8b 40 60             	mov    0x60(%eax),%eax
f010ac18:	83 c8 05             	or     $0x5,%eax
f010ac1b:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010ac1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac20:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2a:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ac31:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac34:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010ac3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3e:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010ac45:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac48:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010ac4b:	83 ec 0c             	sub    $0xc,%esp
f010ac4e:	68 b1 02 00 00       	push   $0x2b1
f010ac53:	e8 f2 56 02 00       	call   f013034a <log2_ceil>
f010ac58:	83 c4 10             	add    $0x10,%esp
f010ac5b:	ba 01 00 00 00       	mov    $0x1,%edx
f010ac60:	88 c1                	mov    %al,%cl
f010ac62:	d3 e2                	shl    %cl,%edx
f010ac64:	89 d0                	mov    %edx,%eax
f010ac66:	01 d8                	add    %ebx,%eax
f010ac68:	89 c3                	mov    %eax,%ebx
f010ac6a:	83 ec 0c             	sub    $0xc,%esp
f010ac6d:	68 b1 02 00 00       	push   $0x2b1
f010ac72:	e8 9e 56 02 00       	call   f0130315 <nearest_pow2_ceil>
f010ac77:	83 c4 10             	add    $0x10,%esp
f010ac7a:	f7 d8                	neg    %eax
f010ac7c:	21 d8                	and    %ebx,%eax
f010ac7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ac81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ac85:	7f 1e                	jg     f010aca5 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ac87:	83 ec 0c             	sub    $0xc,%esp
f010ac8a:	68 b1 02 00 00       	push   $0x2b1
f010ac8f:	e8 b6 56 02 00       	call   f013034a <log2_ceil>
f010ac94:	83 c4 10             	add    $0x10,%esp
f010ac97:	ba 01 00 00 00       	mov    $0x1,%edx
f010ac9c:	88 c1                	mov    %al,%cl
f010ac9e:	d3 e2                	shl    %cl,%edx
f010aca0:	89 d0                	mov    %edx,%eax
f010aca2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010aca5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca8:	8b 15 f0 e3 88 f0    	mov    0xf088e3f0,%edx
f010acae:	29 d0                	sub    %edx,%eax
f010acb0:	c1 f8 04             	sar    $0x4,%eax
f010acb3:	89 c2                	mov    %eax,%edx
f010acb5:	89 d0                	mov    %edx,%eax
f010acb7:	c1 e0 03             	shl    $0x3,%eax
f010acba:	01 d0                	add    %edx,%eax
f010acbc:	01 c0                	add    %eax,%eax
f010acbe:	01 d0                	add    %edx,%eax
f010acc0:	c1 e0 03             	shl    $0x3,%eax
f010acc3:	01 d0                	add    %edx,%eax
f010acc5:	89 c1                	mov    %eax,%ecx
f010acc7:	c1 e1 08             	shl    $0x8,%ecx
f010acca:	01 c8                	add    %ecx,%eax
f010accc:	01 c0                	add    %eax,%eax
f010acce:	01 d0                	add    %edx,%eax
f010acd0:	01 c0                	add    %eax,%eax
f010acd2:	01 d0                	add    %edx,%eax
f010acd4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010acdb:	01 d0                	add    %edx,%eax
f010acdd:	89 c2                	mov    %eax,%edx
f010acdf:	c1 e2 09             	shl    $0x9,%edx
f010ace2:	29 c2                	sub    %eax,%edx
f010ace4:	89 d0                	mov    %edx,%eax
f010ace6:	f7 d8                	neg    %eax
f010ace8:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aceb:	89 c2                	mov    %eax,%edx
f010aced:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf0:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010acf3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010acf8:	85 c0                	test   %eax,%eax
f010acfa:	75 0c                	jne    f010ad08 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010acfc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acff:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010ad06:	eb 0e                	jmp    f010ad16 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010ad08:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ad0d:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ad10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad13:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010ad20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad23:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010ad2a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2d:	83 ec 04             	sub    $0x4,%esp
f010ad30:	6a 44                	push   $0x44
f010ad32:	6a 00                	push   $0x0
f010ad34:	50                   	push   %eax
f010ad35:	e8 57 6a 02 00       	call   f0131791 <memset>
f010ad3a:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ad3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad40:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ad46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad49:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ad4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad52:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ad58:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad5b:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ad62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad65:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010ad6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6e:	8b 40 38             	mov    0x38(%eax),%eax
f010ad71:	80 cc 02             	or     $0x2,%ah
f010ad74:	89 c2                	mov    %eax,%edx
f010ad76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad79:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ad7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ad80:	75 17                	jne    f010ad99 <complete_environment_initialization+0x1b1>
f010ad82:	83 ec 04             	sub    $0x4,%esp
f010ad85:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010ad8a:	68 60 03 00 00       	push   $0x360
f010ad8f:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010ad94:	e8 6c 54 ff ff       	call   f0100205 <_panic>
f010ad99:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9c:	8b 40 44             	mov    0x44(%eax),%eax
f010ad9f:	85 c0                	test   %eax,%eax
f010ada1:	74 11                	je     f010adb4 <complete_environment_initialization+0x1cc>
f010ada3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada6:	8b 40 44             	mov    0x44(%eax),%eax
f010ada9:	8b 55 08             	mov    0x8(%ebp),%edx
f010adac:	8b 52 48             	mov    0x48(%edx),%edx
f010adaf:	89 50 48             	mov    %edx,0x48(%eax)
f010adb2:	eb 0b                	jmp    f010adbf <complete_environment_initialization+0x1d7>
f010adb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb7:	8b 40 48             	mov    0x48(%eax),%eax
f010adba:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010adbf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc2:	8b 40 48             	mov    0x48(%eax),%eax
f010adc5:	85 c0                	test   %eax,%eax
f010adc7:	74 11                	je     f010adda <complete_environment_initialization+0x1f2>
f010adc9:	8b 45 08             	mov    0x8(%ebp),%eax
f010adcc:	8b 40 48             	mov    0x48(%eax),%eax
f010adcf:	8b 55 08             	mov    0x8(%ebp),%edx
f010add2:	8b 52 44             	mov    0x44(%edx),%edx
f010add5:	89 50 44             	mov    %edx,0x44(%eax)
f010add8:	eb 0b                	jmp    f010ade5 <complete_environment_initialization+0x1fd>
f010adda:	8b 45 08             	mov    0x8(%ebp),%eax
f010addd:	8b 40 44             	mov    0x44(%eax),%eax
f010ade0:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010ade5:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010adef:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010adf9:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010adfe:	48                   	dec    %eax
f010adff:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
	return ;
f010ae04:	90                   	nop
}
f010ae05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ae08:	c9                   	leave  
f010ae09:	c3                   	ret    

f010ae0a <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ae0a:	55                   	push   %ebp
f010ae0b:	89 e5                	mov    %esp,%ebp
f010ae0d:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ae10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae13:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ae16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae19:	8b 00                	mov    (%eax),%eax
f010ae1b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ae20:	74 17                	je     f010ae39 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ae22:	83 ec 04             	sub    $0x4,%esp
f010ae25:	68 73 6b 13 f0       	push   $0xf0136b73
f010ae2a:	68 6c 03 00 00       	push   $0x36c
f010ae2f:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010ae34:	e8 cc 53 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ae39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae3c:	8b 40 18             	mov    0x18(%eax),%eax
f010ae3f:	89 c2                	mov    %eax,%edx
f010ae41:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae44:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ae47:	90                   	nop
f010ae48:	c9                   	leave  
f010ae49:	c3                   	ret    

f010ae4a <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ae4a:	55                   	push   %ebp
f010ae4b:	89 e5                	mov    %esp,%ebp
f010ae4d:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ae50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae53:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ae5a:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ae5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae60:	8b 40 78             	mov    0x78(%eax),%eax
f010ae63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ae66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae69:	8b 50 74             	mov    0x74(%eax),%edx
f010ae6c:	89 d0                	mov    %edx,%eax
f010ae6e:	01 c0                	add    %eax,%eax
f010ae70:	01 d0                	add    %edx,%eax
f010ae72:	c1 e0 03             	shl    $0x3,%eax
f010ae75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ae78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae7b:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ae84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae87:	8b 40 78             	mov    0x78(%eax),%eax
f010ae8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae8d:	eb 71                	jmp    f010af00 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ae8f:	83 ec 0c             	sub    $0xc,%esp
f010ae92:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae95:	e8 13 cf ff ff       	call   f0107dad <kheap_physical_address>
f010ae9a:	83 c4 10             	add    $0x10,%esp
f010ae9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010aea0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aea6:	83 ec 04             	sub    $0x4,%esp
f010aea9:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aeac:	52                   	push   %edx
f010aead:	ff 75 f0             	pushl  -0x10(%ebp)
f010aeb0:	50                   	push   %eax
f010aeb1:	e8 fb bb ff ff       	call   f0106ab1 <get_page_table>
f010aeb6:	83 c4 10             	add    $0x10,%esp
f010aeb9:	83 f8 01             	cmp    $0x1,%eax
f010aebc:	75 18                	jne    f010aed6 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010aebe:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aec4:	83 ec 08             	sub    $0x8,%esp
f010aec7:	ff 75 f0             	pushl  -0x10(%ebp)
f010aeca:	50                   	push   %eax
f010aecb:	e8 37 bd ff ff       	call   f0106c07 <create_page_table>
f010aed0:	83 c4 10             	add    $0x10,%esp
f010aed3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010aed6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aed9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aedc:	c1 ea 0c             	shr    $0xc,%edx
f010aedf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010aee5:	c1 e2 02             	shl    $0x2,%edx
f010aee8:	01 d0                	add    %edx,%eax
f010aeea:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010aeed:	83 ca 05             	or     $0x5,%edx
f010aef0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010aef2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010aef9:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010af00:	8b 45 08             	mov    0x8(%ebp),%eax
f010af03:	8b 40 78             	mov    0x78(%eax),%eax
f010af06:	89 c2                	mov    %eax,%edx
f010af08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af0b:	01 d0                	add    %edx,%eax
f010af0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010af10:	0f 87 79 ff ff ff    	ja     f010ae8f <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010af16:	90                   	nop
f010af17:	c9                   	leave  
f010af18:	c3                   	ret    

f010af19 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010af19:	55                   	push   %ebp
f010af1a:	89 e5                	mov    %esp,%ebp
f010af1c:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010af1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af22:	8b 50 74             	mov    0x74(%eax),%edx
f010af25:	89 d0                	mov    %edx,%eax
f010af27:	01 c0                	add    %eax,%eax
f010af29:	01 d0                	add    %edx,%eax
f010af2b:	c1 e0 03             	shl    $0x3,%eax
f010af2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010af31:	8b 45 08             	mov    0x8(%ebp),%eax
f010af34:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010af3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010af3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af40:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010af46:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010af49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af4c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010af51:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010af54:	eb 46                	jmp    f010af9c <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010af56:	8b 45 08             	mov    0x8(%ebp),%eax
f010af59:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af5c:	83 ec 04             	sub    $0x4,%esp
f010af5f:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010af62:	52                   	push   %edx
f010af63:	ff 75 f4             	pushl  -0xc(%ebp)
f010af66:	50                   	push   %eax
f010af67:	e8 45 bb ff ff       	call   f0106ab1 <get_page_table>
f010af6c:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010af6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010af72:	83 ec 0c             	sub    $0xc,%esp
f010af75:	50                   	push   %eax
f010af76:	e8 df cc ff ff       	call   f0107c5a <kfree>
f010af7b:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010af7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010af81:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af87:	c1 ea 16             	shr    $0x16,%edx
f010af8a:	c1 e2 02             	shl    $0x2,%edx
f010af8d:	01 d0                	add    %edx,%eax
f010af8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010af95:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010af9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9f:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010afa5:	89 c2                	mov    %eax,%edx
f010afa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010afaa:	01 d0                	add    %edx,%eax
f010afac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010afaf:	77 a5                	ja     f010af56 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010afb1:	0f 20 d8             	mov    %cr3,%eax
f010afb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010afb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010afba:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010afbd:	90                   	nop
f010afbe:	c9                   	leave  
f010afbf:	c3                   	ret    

f010afc0 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010afc0:	55                   	push   %ebp
f010afc1:	89 e5                	mov    %esp,%ebp
f010afc3:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010afc6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc9:	8b 40 10             	mov    0x10(%eax),%eax
f010afcc:	8d 48 01             	lea    0x1(%eax),%ecx
f010afcf:	8b 55 08             	mov    0x8(%ebp),%edx
f010afd2:	89 4a 10             	mov    %ecx,0x10(%edx)
f010afd5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010afe1:	8b 00                	mov    (%eax),%eax
f010afe3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afe8:	74 17                	je     f010b001 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010afea:	83 ec 04             	sub    $0x4,%esp
f010afed:	68 73 6b 13 f0       	push   $0xf0136b73
f010aff2:	68 b6 03 00 00       	push   $0x3b6
f010aff7:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010affc:	e8 04 52 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b001:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b004:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b007:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b00a:	01 d0                	add    %edx,%eax
f010b00c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b00f:	eb 0f                	jmp    f010b020 <PROGRAM_SEGMENT_NEXT+0x60>
f010b011:	8b 45 08             	mov    0x8(%ebp),%eax
f010b014:	8b 40 10             	mov    0x10(%eax),%eax
f010b017:	8d 50 01             	lea    0x1(%eax),%edx
f010b01a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01d:	89 50 10             	mov    %edx,0x10(%eax)
f010b020:	8b 45 08             	mov    0x8(%ebp),%eax
f010b023:	8b 40 10             	mov    0x10(%eax),%eax
f010b026:	c1 e0 05             	shl    $0x5,%eax
f010b029:	89 c2                	mov    %eax,%edx
f010b02b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b02e:	01 d0                	add    %edx,%eax
f010b030:	8b 00                	mov    (%eax),%eax
f010b032:	83 f8 01             	cmp    $0x1,%eax
f010b035:	74 13                	je     f010b04a <PROGRAM_SEGMENT_NEXT+0x8a>
f010b037:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03a:	8b 50 10             	mov    0x10(%eax),%edx
f010b03d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b040:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b043:	0f b7 c0             	movzwl %ax,%eax
f010b046:	39 c2                	cmp    %eax,%edx
f010b048:	72 c7                	jb     f010b011 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b04a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04d:	8b 40 10             	mov    0x10(%eax),%eax
f010b050:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b053:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b056:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b059:	0f b7 c0             	movzwl %ax,%eax
f010b05c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b05f:	7e 63                	jle    f010b0c4 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b064:	c1 e0 05             	shl    $0x5,%eax
f010b067:	89 c2                	mov    %eax,%edx
f010b069:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b06c:	01 d0                	add    %edx,%eax
f010b06e:	8b 50 04             	mov    0x4(%eax),%edx
f010b071:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b074:	01 c2                	add    %eax,%edx
f010b076:	8b 45 08             	mov    0x8(%ebp),%eax
f010b079:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b07b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b07e:	c1 e0 05             	shl    $0x5,%eax
f010b081:	89 c2                	mov    %eax,%edx
f010b083:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b086:	01 d0                	add    %edx,%eax
f010b088:	8b 50 14             	mov    0x14(%eax),%edx
f010b08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08e:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b091:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b094:	c1 e0 05             	shl    $0x5,%eax
f010b097:	89 c2                	mov    %eax,%edx
f010b099:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b09c:	01 d0                	add    %edx,%eax
f010b09e:	8b 50 10             	mov    0x10(%eax),%edx
f010b0a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a4:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b0a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0aa:	c1 e0 05             	shl    $0x5,%eax
f010b0ad:	89 c2                	mov    %eax,%edx
f010b0af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0b2:	01 d0                	add    %edx,%eax
f010b0b4:	8b 40 08             	mov    0x8(%eax),%eax
f010b0b7:	89 c2                	mov    %eax,%edx
f010b0b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0bc:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b0bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0c2:	eb 05                	jmp    f010b0c9 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b0c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b0c9:	c9                   	leave  
f010b0ca:	c3                   	ret    

f010b0cb <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b0cb:	55                   	push   %ebp
f010b0cc:	89 e5                	mov    %esp,%ebp
f010b0ce:	57                   	push   %edi
f010b0cf:	56                   	push   %esi
f010b0d0:	53                   	push   %ebx
f010b0d1:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b0d4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b0db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b0e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b0e4:	8b 00                	mov    (%eax),%eax
f010b0e6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b0eb:	74 17                	je     f010b104 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b0ed:	83 ec 04             	sub    $0x4,%esp
f010b0f0:	68 73 6b 13 f0       	push   $0xf0136b73
f010b0f5:	68 d2 03 00 00       	push   $0x3d2
f010b0fa:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010b0ff:	e8 01 51 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b104:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b107:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b10a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b10d:	01 d0                	add    %edx,%eax
f010b10f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b112:	eb 07                	jmp    f010b11b <PROGRAM_SEGMENT_FIRST+0x50>
f010b114:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b117:	40                   	inc    %eax
f010b118:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b11b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b11e:	c1 e0 05             	shl    $0x5,%eax
f010b121:	89 c2                	mov    %eax,%edx
f010b123:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b126:	01 d0                	add    %edx,%eax
f010b128:	8b 00                	mov    (%eax),%eax
f010b12a:	83 f8 01             	cmp    $0x1,%eax
f010b12d:	74 10                	je     f010b13f <PROGRAM_SEGMENT_FIRST+0x74>
f010b12f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b132:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b135:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b138:	0f b7 c0             	movzwl %ax,%eax
f010b13b:	39 c2                	cmp    %eax,%edx
f010b13d:	72 d5                	jb     f010b114 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b13f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b142:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b145:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b148:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b14b:	0f b7 c0             	movzwl %ax,%eax
f010b14e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b151:	7e 68                	jle    f010b1bb <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b153:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b156:	c1 e0 05             	shl    $0x5,%eax
f010b159:	89 c2                	mov    %eax,%edx
f010b15b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b15e:	01 d0                	add    %edx,%eax
f010b160:	8b 50 04             	mov    0x4(%eax),%edx
f010b163:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b166:	01 d0                	add    %edx,%eax
f010b168:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b16b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b16e:	c1 e0 05             	shl    $0x5,%eax
f010b171:	89 c2                	mov    %eax,%edx
f010b173:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b176:	01 d0                	add    %edx,%eax
f010b178:	8b 40 14             	mov    0x14(%eax),%eax
f010b17b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b17e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b181:	c1 e0 05             	shl    $0x5,%eax
f010b184:	89 c2                	mov    %eax,%edx
f010b186:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b189:	01 d0                	add    %edx,%eax
f010b18b:	8b 40 10             	mov    0x10(%eax),%eax
f010b18e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b191:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b194:	c1 e0 05             	shl    $0x5,%eax
f010b197:	89 c2                	mov    %eax,%edx
f010b199:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b19c:	01 d0                	add    %edx,%eax
f010b19e:	8b 40 08             	mov    0x8(%eax),%eax
f010b1a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b1a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1a7:	89 c3                	mov    %eax,%ebx
f010b1a9:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1ac:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1b1:	89 df                	mov    %ebx,%edi
f010b1b3:	89 c6                	mov    %eax,%esi
f010b1b5:	89 d1                	mov    %edx,%ecx
f010b1b7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b1b9:	eb 1c                	jmp    f010b1d7 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b1bb:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b1c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c5:	89 c3                	mov    %eax,%ebx
f010b1c7:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1ca:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1cf:	89 df                	mov    %ebx,%edi
f010b1d1:	89 c6                	mov    %eax,%esi
f010b1d3:	89 d1                	mov    %edx,%ecx
f010b1d5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1da:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b1dd:	5b                   	pop    %ebx
f010b1de:	5e                   	pop    %esi
f010b1df:	5f                   	pop    %edi
f010b1e0:	5d                   	pop    %ebp
f010b1e1:	c2 04 00             	ret    $0x4

f010b1e4 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b1e4:	55                   	push   %ebp
f010b1e5:	89 e5                	mov    %esp,%ebp
f010b1e7:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b1ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b1f1:	a1 b8 ec 88 f0       	mov    0xf088ecb8,%eax
f010b1f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b1f9:	e9 c3 00 00 00       	jmp    f010b2c1 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b1fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b201:	8b 40 10             	mov    0x10(%eax),%eax
f010b204:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b207:	0f 85 ac 00 00 00    	jne    f010b2b9 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b210:	8b 50 0c             	mov    0xc(%eax),%edx
f010b213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b216:	8b 40 10             	mov    0x10(%eax),%eax
f010b219:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b21c:	83 ec 08             	sub    $0x8,%esp
f010b21f:	52                   	push   %edx
f010b220:	50                   	push   %eax
f010b221:	e8 a0 cd ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f010b226:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b229:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b22d:	75 17                	jne    f010b246 <cleanup_buffers+0x62>
f010b22f:	83 ec 04             	sub    $0x4,%esp
f010b232:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010b237:	68 f9 03 00 00       	push   $0x3f9
f010b23c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010b241:	e8 bf 4f ff ff       	call   f0100205 <_panic>
f010b246:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b249:	8b 00                	mov    (%eax),%eax
f010b24b:	85 c0                	test   %eax,%eax
f010b24d:	74 10                	je     f010b25f <cleanup_buffers+0x7b>
f010b24f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b252:	8b 00                	mov    (%eax),%eax
f010b254:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b257:	8b 52 04             	mov    0x4(%edx),%edx
f010b25a:	89 50 04             	mov    %edx,0x4(%eax)
f010b25d:	eb 0b                	jmp    f010b26a <cleanup_buffers+0x86>
f010b25f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b262:	8b 40 04             	mov    0x4(%eax),%eax
f010b265:	a3 bc ec 88 f0       	mov    %eax,0xf088ecbc
f010b26a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b26d:	8b 40 04             	mov    0x4(%eax),%eax
f010b270:	85 c0                	test   %eax,%eax
f010b272:	74 0f                	je     f010b283 <cleanup_buffers+0x9f>
f010b274:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b277:	8b 40 04             	mov    0x4(%eax),%eax
f010b27a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b27d:	8b 12                	mov    (%edx),%edx
f010b27f:	89 10                	mov    %edx,(%eax)
f010b281:	eb 0a                	jmp    f010b28d <cleanup_buffers+0xa9>
f010b283:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b286:	8b 00                	mov    (%eax),%eax
f010b288:	a3 b8 ec 88 f0       	mov    %eax,0xf088ecb8
f010b28d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b290:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b299:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b2a0:	a1 c4 ec 88 f0       	mov    0xf088ecc4,%eax
f010b2a5:	48                   	dec    %eax
f010b2a6:	a3 c4 ec 88 f0       	mov    %eax,0xf088ecc4

			free_frame(ptr_fi);
f010b2ab:	83 ec 0c             	sub    $0xc,%esp
f010b2ae:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2b1:	e8 51 b7 ff ff       	call   f0106a07 <free_frame>
f010b2b6:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b2b9:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f010b2be:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b2c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2c5:	74 07                	je     f010b2ce <cleanup_buffers+0xea>
f010b2c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2ca:	8b 00                	mov    (%eax),%eax
f010b2cc:	eb 05                	jmp    f010b2d3 <cleanup_buffers+0xef>
f010b2ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2d3:	a3 c0 ec 88 f0       	mov    %eax,0xf088ecc0
f010b2d8:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f010b2dd:	85 c0                	test   %eax,%eax
f010b2df:	0f 85 19 ff ff ff    	jne    f010b1fe <cleanup_buffers+0x1a>
f010b2e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2e9:	0f 85 0f ff ff ff    	jne    f010b1fe <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b2ef:	90                   	nop
f010b2f0:	c9                   	leave  
f010b2f1:	c3                   	ret    

f010b2f2 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b2f2:	55                   	push   %ebp
f010b2f3:	89 e5                	mov    %esp,%ebp
f010b2f5:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b2f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b2fc:	7e 06                	jle    f010b304 <set_program_priority+0x12>
f010b2fe:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b302:	7e 14                	jle    f010b318 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b304:	83 ec 04             	sub    $0x4,%esp
f010b307:	68 8c 6b 13 f0       	push   $0xf0136b8c
f010b30c:	6a 10                	push   $0x10
f010b30e:	68 b0 6b 13 f0       	push   $0xf0136bb0
f010b313:	e8 ed 4e ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b318:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b31c:	74 75                	je     f010b393 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b31e:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b322:	77 56                	ja     f010b37a <set_program_priority+0x88>
f010b324:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b327:	c1 e0 02             	shl    $0x2,%eax
f010b32a:	05 ec 6b 13 f0       	add    $0xf0136bec,%eax
f010b32f:	8b 00                	mov    (%eax),%eax
f010b331:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b333:	83 ec 08             	sub    $0x8,%esp
f010b336:	6a 01                	push   $0x1
f010b338:	ff 75 08             	pushl  0x8(%ebp)
f010b33b:	e8 fd d6 ff ff       	call   f0108a3d <half_WS_Size>
f010b340:	83 c4 10             	add    $0x10,%esp
			break;
f010b343:	eb 35                	jmp    f010b37a <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b345:	83 ec 08             	sub    $0x8,%esp
f010b348:	6a 00                	push   $0x0
f010b34a:	ff 75 08             	pushl  0x8(%ebp)
f010b34d:	e8 eb d6 ff ff       	call   f0108a3d <half_WS_Size>
f010b352:	83 c4 10             	add    $0x10,%esp
			break;
f010b355:	eb 23                	jmp    f010b37a <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b357:	83 ec 08             	sub    $0x8,%esp
f010b35a:	6a 01                	push   $0x1
f010b35c:	ff 75 08             	pushl  0x8(%ebp)
f010b35f:	e8 bc d6 ff ff       	call   f0108a20 <double_WS_Size>
f010b364:	83 c4 10             	add    $0x10,%esp
			break;
f010b367:	eb 11                	jmp    f010b37a <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b369:	83 ec 08             	sub    $0x8,%esp
f010b36c:	6a 00                	push   $0x0
f010b36e:	ff 75 08             	pushl  0x8(%ebp)
f010b371:	e8 aa d6 ff ff       	call   f0108a20 <double_WS_Size>
f010b376:	83 c4 10             	add    $0x10,%esp
			break;
f010b379:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b37a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b37d:	8b 40 74             	mov    0x74(%eax),%eax
f010b380:	83 ec 08             	sub    $0x8,%esp
f010b383:	50                   	push   %eax
f010b384:	68 cd 6b 13 f0       	push   $0xf0136bcd
f010b389:	e8 80 59 ff ff       	call   f0100d0e <cprintf>
f010b38e:	83 c4 10             	add    $0x10,%esp
f010b391:	eb 01                	jmp    f010b394 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b393:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b394:	c9                   	leave  
f010b395:	c3                   	ret    

f010b396 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b396:	55                   	push   %ebp
f010b397:	89 e5                	mov    %esp,%ebp
f010b399:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b39c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b3a3:	eb 29                	jmp    f010b3ce <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b3a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3a8:	89 d0                	mov    %edx,%eax
f010b3aa:	01 c0                	add    %eax,%eax
f010b3ac:	01 d0                	add    %edx,%eax
f010b3ae:	c1 e0 02             	shl    $0x2,%eax
f010b3b1:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b3b6:	8b 00                	mov    (%eax),%eax
f010b3b8:	83 ec 08             	sub    $0x8,%esp
f010b3bb:	50                   	push   %eax
f010b3bc:	ff 75 08             	pushl  0x8(%ebp)
f010b3bf:	e8 eb 62 02 00       	call   f01316af <strcmp>
f010b3c4:	83 c4 10             	add    $0x10,%esp
f010b3c7:	85 c0                	test   %eax,%eax
f010b3c9:	74 0f                	je     f010b3da <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b3cb:	ff 45 f4             	incl   -0xc(%ebp)
f010b3ce:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b3d3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3d6:	7c cd                	jl     f010b3a5 <get_user_program_info+0xf>
f010b3d8:	eb 01                	jmp    f010b3db <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b3da:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b3db:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b3e0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3e3:	75 1a                	jne    f010b3ff <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b3e5:	83 ec 08             	sub    $0x8,%esp
f010b3e8:	ff 75 08             	pushl  0x8(%ebp)
f010b3eb:	68 81 77 13 f0       	push   $0xf0137781
f010b3f0:	e8 19 59 ff ff       	call   f0100d0e <cprintf>
f010b3f5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3f8:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3fd:	eb 11                	jmp    f010b410 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b3ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b402:	89 d0                	mov    %edx,%eax
f010b404:	01 c0                	add    %eax,%eax
f010b406:	01 d0                	add    %edx,%eax
f010b408:	c1 e0 02             	shl    $0x2,%eax
f010b40b:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b410:	c9                   	leave  
f010b411:	c3                   	ret    

f010b412 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b412:	55                   	push   %ebp
f010b413:	89 e5                	mov    %esp,%ebp
f010b415:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b41f:	eb 30                	jmp    f010b451 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b421:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b424:	89 d0                	mov    %edx,%eax
f010b426:	01 c0                	add    %eax,%eax
f010b428:	01 d0                	add    %edx,%eax
f010b42a:	c1 e0 02             	shl    $0x2,%eax
f010b42d:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b432:	8b 00                	mov    (%eax),%eax
f010b434:	8b 55 08             	mov    0x8(%ebp),%edx
f010b437:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b43d:	83 ec 08             	sub    $0x8,%esp
f010b440:	50                   	push   %eax
f010b441:	52                   	push   %edx
f010b442:	e8 68 62 02 00       	call   f01316af <strcmp>
f010b447:	83 c4 10             	add    $0x10,%esp
f010b44a:	85 c0                	test   %eax,%eax
f010b44c:	74 0f                	je     f010b45d <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b44e:	ff 45 f4             	incl   -0xc(%ebp)
f010b451:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b456:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b459:	7c c6                	jl     f010b421 <get_user_program_info_by_env+0xf>
f010b45b:	eb 01                	jmp    f010b45e <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b45d:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b45e:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b463:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b466:	75 17                	jne    f010b47f <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b468:	83 ec 0c             	sub    $0xc,%esp
f010b46b:	68 9c 77 13 f0       	push   $0xf013779c
f010b470:	e8 99 58 ff ff       	call   f0100d0e <cprintf>
f010b475:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b478:	b8 00 00 00 00       	mov    $0x0,%eax
f010b47d:	eb 11                	jmp    f010b490 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b47f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b482:	89 d0                	mov    %edx,%eax
f010b484:	01 c0                	add    %eax,%eax
f010b486:	01 d0                	add    %edx,%eax
f010b488:	c1 e0 02             	shl    $0x2,%eax
f010b48b:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b490:	c9                   	leave  
f010b491:	c3                   	ret    

f010b492 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b492:	55                   	push   %ebp
f010b493:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b495:	8b 45 08             	mov    0x8(%ebp),%eax
f010b498:	83 f8 13             	cmp    $0x13,%eax
f010b49b:	77 0c                	ja     f010b4a9 <trapname+0x17>
		return excnames[trapno];
f010b49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4a0:	8b 04 85 e0 7b 13 f0 	mov    -0xfec8420(,%eax,4),%eax
f010b4a7:	eb 12                	jmp    f010b4bb <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b4a9:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b4ad:	75 07                	jne    f010b4b6 <trapname+0x24>
		return "System call";
f010b4af:	b8 c0 77 13 f0       	mov    $0xf01377c0,%eax
f010b4b4:	eb 05                	jmp    f010b4bb <trapname+0x29>
	return "(unknown trap)";
f010b4b6:	b8 cc 77 13 f0       	mov    $0xf01377cc,%eax
}
f010b4bb:	5d                   	pop    %ebp
f010b4bc:	c3                   	ret    

f010b4bd <idt_init>:


void
idt_init(void)
{
f010b4bd:	55                   	push   %ebp
f010b4be:	89 e5                	mov    %esp,%ebp
f010b4c0:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b4c3:	b8 52 cb 10 f0       	mov    $0xf010cb52,%eax
f010b4c8:	66 a3 90 e4 88 f0    	mov    %ax,0xf088e490
f010b4ce:	66 c7 05 92 e4 88 f0 	movw   $0x8,0xf088e492
f010b4d5:	08 00 
f010b4d7:	a0 94 e4 88 f0       	mov    0xf088e494,%al
f010b4dc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4df:	a2 94 e4 88 f0       	mov    %al,0xf088e494
f010b4e4:	a0 94 e4 88 f0       	mov    0xf088e494,%al
f010b4e9:	83 e0 1f             	and    $0x1f,%eax
f010b4ec:	a2 94 e4 88 f0       	mov    %al,0xf088e494
f010b4f1:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b4f6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4f9:	83 c8 0e             	or     $0xe,%eax
f010b4fc:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b501:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b506:	83 e0 ef             	and    $0xffffffef,%eax
f010b509:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b50e:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b513:	83 e0 9f             	and    $0xffffff9f,%eax
f010b516:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b51b:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b520:	83 c8 80             	or     $0xffffff80,%eax
f010b523:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b528:	b8 52 cb 10 f0       	mov    $0xf010cb52,%eax
f010b52d:	c1 e8 10             	shr    $0x10,%eax
f010b530:	66 a3 96 e4 88 f0    	mov    %ax,0xf088e496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b536:	b8 5a cb 10 f0       	mov    $0xf010cb5a,%eax
f010b53b:	66 a3 a0 e5 88 f0    	mov    %ax,0xf088e5a0
f010b541:	66 c7 05 a2 e5 88 f0 	movw   $0x8,0xf088e5a2
f010b548:	08 00 
f010b54a:	a0 a4 e5 88 f0       	mov    0xf088e5a4,%al
f010b54f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b552:	a2 a4 e5 88 f0       	mov    %al,0xf088e5a4
f010b557:	a0 a4 e5 88 f0       	mov    0xf088e5a4,%al
f010b55c:	83 e0 1f             	and    $0x1f,%eax
f010b55f:	a2 a4 e5 88 f0       	mov    %al,0xf088e5a4
f010b564:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b569:	83 e0 f0             	and    $0xfffffff0,%eax
f010b56c:	83 c8 0e             	or     $0xe,%eax
f010b56f:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b574:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b579:	83 e0 ef             	and    $0xffffffef,%eax
f010b57c:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b581:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b586:	83 c8 60             	or     $0x60,%eax
f010b589:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b58e:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b593:	83 c8 80             	or     $0xffffff80,%eax
f010b596:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b59b:	b8 5a cb 10 f0       	mov    $0xf010cb5a,%eax
f010b5a0:	c1 e8 10             	shr    $0x10,%eax
f010b5a3:	66 a3 a6 e5 88 f0    	mov    %ax,0xf088e5a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b5a9:	b8 64 cb 10 f0       	mov    $0xf010cb64,%eax
f010b5ae:	66 a3 60 e4 88 f0    	mov    %ax,0xf088e460
f010b5b4:	66 c7 05 62 e4 88 f0 	movw   $0x8,0xf088e462
f010b5bb:	08 00 
f010b5bd:	a0 64 e4 88 f0       	mov    0xf088e464,%al
f010b5c2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5c5:	a2 64 e4 88 f0       	mov    %al,0xf088e464
f010b5ca:	a0 64 e4 88 f0       	mov    0xf088e464,%al
f010b5cf:	83 e0 1f             	and    $0x1f,%eax
f010b5d2:	a2 64 e4 88 f0       	mov    %al,0xf088e464
f010b5d7:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5dc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5df:	83 c8 0e             	or     $0xe,%eax
f010b5e2:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b5e7:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5ec:	83 e0 ef             	and    $0xffffffef,%eax
f010b5ef:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b5f4:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5f9:	83 e0 9f             	and    $0xffffff9f,%eax
f010b5fc:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b601:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b606:	83 c8 80             	or     $0xffffff80,%eax
f010b609:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b60e:	b8 64 cb 10 f0       	mov    $0xf010cb64,%eax
f010b613:	c1 e8 10             	shr    $0x10,%eax
f010b616:	66 a3 66 e4 88 f0    	mov    %ax,0xf088e466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b61c:	b8 6c cb 10 f0       	mov    $0xf010cb6c,%eax
f010b621:	66 a3 20 e4 88 f0    	mov    %ax,0xf088e420
f010b627:	66 c7 05 22 e4 88 f0 	movw   $0x8,0xf088e422
f010b62e:	08 00 
f010b630:	a0 24 e4 88 f0       	mov    0xf088e424,%al
f010b635:	83 e0 e0             	and    $0xffffffe0,%eax
f010b638:	a2 24 e4 88 f0       	mov    %al,0xf088e424
f010b63d:	a0 24 e4 88 f0       	mov    0xf088e424,%al
f010b642:	83 e0 1f             	and    $0x1f,%eax
f010b645:	a2 24 e4 88 f0       	mov    %al,0xf088e424
f010b64a:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b64f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b652:	83 c8 0e             	or     $0xe,%eax
f010b655:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b65a:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b65f:	83 e0 ef             	and    $0xffffffef,%eax
f010b662:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b667:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b66c:	83 c8 60             	or     $0x60,%eax
f010b66f:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b674:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b679:	83 c8 80             	or     $0xffffff80,%eax
f010b67c:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b681:	b8 6c cb 10 f0       	mov    $0xf010cb6c,%eax
f010b686:	c1 e8 10             	shr    $0x10,%eax
f010b689:	66 a3 26 e4 88 f0    	mov    %ax,0xf088e426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b68f:	b8 76 cb 10 f0       	mov    $0xf010cb76,%eax
f010b694:	66 a3 28 e4 88 f0    	mov    %ax,0xf088e428
f010b69a:	66 c7 05 2a e4 88 f0 	movw   $0x8,0xf088e42a
f010b6a1:	08 00 
f010b6a3:	a0 2c e4 88 f0       	mov    0xf088e42c,%al
f010b6a8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6ab:	a2 2c e4 88 f0       	mov    %al,0xf088e42c
f010b6b0:	a0 2c e4 88 f0       	mov    0xf088e42c,%al
f010b6b5:	83 e0 1f             	and    $0x1f,%eax
f010b6b8:	a2 2c e4 88 f0       	mov    %al,0xf088e42c
f010b6bd:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6c2:	83 c8 0f             	or     $0xf,%eax
f010b6c5:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6ca:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6cf:	83 e0 ef             	and    $0xffffffef,%eax
f010b6d2:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6d7:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6dc:	83 c8 60             	or     $0x60,%eax
f010b6df:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6e4:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6e9:	83 c8 80             	or     $0xffffff80,%eax
f010b6ec:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6f1:	b8 76 cb 10 f0       	mov    $0xf010cb76,%eax
f010b6f6:	c1 e8 10             	shr    $0x10,%eax
f010b6f9:	66 a3 2e e4 88 f0    	mov    %ax,0xf088e42e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b6ff:	b8 80 cb 10 f0       	mov    $0xf010cb80,%eax
f010b704:	66 a3 30 e4 88 f0    	mov    %ax,0xf088e430
f010b70a:	66 c7 05 32 e4 88 f0 	movw   $0x8,0xf088e432
f010b711:	08 00 
f010b713:	a0 34 e4 88 f0       	mov    0xf088e434,%al
f010b718:	83 e0 e0             	and    $0xffffffe0,%eax
f010b71b:	a2 34 e4 88 f0       	mov    %al,0xf088e434
f010b720:	a0 34 e4 88 f0       	mov    0xf088e434,%al
f010b725:	83 e0 1f             	and    $0x1f,%eax
f010b728:	a2 34 e4 88 f0       	mov    %al,0xf088e434
f010b72d:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b732:	83 e0 f0             	and    $0xfffffff0,%eax
f010b735:	83 c8 0e             	or     $0xe,%eax
f010b738:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b73d:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b742:	83 e0 ef             	and    $0xffffffef,%eax
f010b745:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b74a:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b74f:	83 c8 60             	or     $0x60,%eax
f010b752:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b757:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b75c:	83 c8 80             	or     $0xffffff80,%eax
f010b75f:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b764:	b8 80 cb 10 f0       	mov    $0xf010cb80,%eax
f010b769:	c1 e8 10             	shr    $0x10,%eax
f010b76c:	66 a3 36 e4 88 f0    	mov    %ax,0xf088e436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b772:	b8 8a cb 10 f0       	mov    $0xf010cb8a,%eax
f010b777:	66 a3 38 e4 88 f0    	mov    %ax,0xf088e438
f010b77d:	66 c7 05 3a e4 88 f0 	movw   $0x8,0xf088e43a
f010b784:	08 00 
f010b786:	a0 3c e4 88 f0       	mov    0xf088e43c,%al
f010b78b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b78e:	a2 3c e4 88 f0       	mov    %al,0xf088e43c
f010b793:	a0 3c e4 88 f0       	mov    0xf088e43c,%al
f010b798:	83 e0 1f             	and    $0x1f,%eax
f010b79b:	a2 3c e4 88 f0       	mov    %al,0xf088e43c
f010b7a0:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7a5:	83 c8 0f             	or     $0xf,%eax
f010b7a8:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7ad:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7b2:	83 e0 ef             	and    $0xffffffef,%eax
f010b7b5:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7ba:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7bf:	83 c8 60             	or     $0x60,%eax
f010b7c2:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7c7:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7cc:	83 c8 80             	or     $0xffffff80,%eax
f010b7cf:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7d4:	b8 8a cb 10 f0       	mov    $0xf010cb8a,%eax
f010b7d9:	c1 e8 10             	shr    $0x10,%eax
f010b7dc:	66 a3 3e e4 88 f0    	mov    %ax,0xf088e43e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b7e2:	b8 94 cb 10 f0       	mov    $0xf010cb94,%eax
f010b7e7:	66 a3 40 e4 88 f0    	mov    %ax,0xf088e440
f010b7ed:	66 c7 05 42 e4 88 f0 	movw   $0x8,0xf088e442
f010b7f4:	08 00 
f010b7f6:	a0 44 e4 88 f0       	mov    0xf088e444,%al
f010b7fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7fe:	a2 44 e4 88 f0       	mov    %al,0xf088e444
f010b803:	a0 44 e4 88 f0       	mov    0xf088e444,%al
f010b808:	83 e0 1f             	and    $0x1f,%eax
f010b80b:	a2 44 e4 88 f0       	mov    %al,0xf088e444
f010b810:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b815:	83 c8 0f             	or     $0xf,%eax
f010b818:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b81d:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b822:	83 e0 ef             	and    $0xffffffef,%eax
f010b825:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b82a:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b82f:	83 c8 60             	or     $0x60,%eax
f010b832:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b837:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b83c:	83 c8 80             	or     $0xffffff80,%eax
f010b83f:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b844:	b8 94 cb 10 f0       	mov    $0xf010cb94,%eax
f010b849:	c1 e8 10             	shr    $0x10,%eax
f010b84c:	66 a3 46 e4 88 f0    	mov    %ax,0xf088e446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b852:	b8 9e cb 10 f0       	mov    $0xf010cb9e,%eax
f010b857:	66 a3 48 e4 88 f0    	mov    %ax,0xf088e448
f010b85d:	66 c7 05 4a e4 88 f0 	movw   $0x8,0xf088e44a
f010b864:	08 00 
f010b866:	a0 4c e4 88 f0       	mov    0xf088e44c,%al
f010b86b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b86e:	a2 4c e4 88 f0       	mov    %al,0xf088e44c
f010b873:	a0 4c e4 88 f0       	mov    0xf088e44c,%al
f010b878:	83 e0 1f             	and    $0x1f,%eax
f010b87b:	a2 4c e4 88 f0       	mov    %al,0xf088e44c
f010b880:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b885:	83 e0 f0             	and    $0xfffffff0,%eax
f010b888:	83 c8 0e             	or     $0xe,%eax
f010b88b:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b890:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b895:	83 e0 ef             	and    $0xffffffef,%eax
f010b898:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b89d:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b8a2:	83 c8 60             	or     $0x60,%eax
f010b8a5:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b8aa:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b8af:	83 c8 80             	or     $0xffffff80,%eax
f010b8b2:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b8b7:	b8 9e cb 10 f0       	mov    $0xf010cb9e,%eax
f010b8bc:	c1 e8 10             	shr    $0x10,%eax
f010b8bf:	66 a3 4e e4 88 f0    	mov    %ax,0xf088e44e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b8c5:	b8 a8 cb 10 f0       	mov    $0xf010cba8,%eax
f010b8ca:	66 a3 50 e4 88 f0    	mov    %ax,0xf088e450
f010b8d0:	66 c7 05 52 e4 88 f0 	movw   $0x8,0xf088e452
f010b8d7:	08 00 
f010b8d9:	a0 54 e4 88 f0       	mov    0xf088e454,%al
f010b8de:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8e1:	a2 54 e4 88 f0       	mov    %al,0xf088e454
f010b8e6:	a0 54 e4 88 f0       	mov    0xf088e454,%al
f010b8eb:	83 e0 1f             	and    $0x1f,%eax
f010b8ee:	a2 54 e4 88 f0       	mov    %al,0xf088e454
f010b8f3:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b8f8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8fb:	83 c8 0e             	or     $0xe,%eax
f010b8fe:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b903:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b908:	83 e0 ef             	and    $0xffffffef,%eax
f010b90b:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b910:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b915:	83 c8 60             	or     $0x60,%eax
f010b918:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b91d:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b922:	83 c8 80             	or     $0xffffff80,%eax
f010b925:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b92a:	b8 a8 cb 10 f0       	mov    $0xf010cba8,%eax
f010b92f:	c1 e8 10             	shr    $0x10,%eax
f010b932:	66 a3 56 e4 88 f0    	mov    %ax,0xf088e456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b938:	b8 b2 cb 10 f0       	mov    $0xf010cbb2,%eax
f010b93d:	66 a3 58 e4 88 f0    	mov    %ax,0xf088e458
f010b943:	66 c7 05 5a e4 88 f0 	movw   $0x8,0xf088e45a
f010b94a:	08 00 
f010b94c:	a0 5c e4 88 f0       	mov    0xf088e45c,%al
f010b951:	83 e0 e0             	and    $0xffffffe0,%eax
f010b954:	a2 5c e4 88 f0       	mov    %al,0xf088e45c
f010b959:	a0 5c e4 88 f0       	mov    0xf088e45c,%al
f010b95e:	83 e0 1f             	and    $0x1f,%eax
f010b961:	a2 5c e4 88 f0       	mov    %al,0xf088e45c
f010b966:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b96b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b96e:	83 c8 0e             	or     $0xe,%eax
f010b971:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b976:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b97b:	83 e0 ef             	and    $0xffffffef,%eax
f010b97e:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b983:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b988:	83 c8 60             	or     $0x60,%eax
f010b98b:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b990:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b995:	83 c8 80             	or     $0xffffff80,%eax
f010b998:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b99d:	b8 b2 cb 10 f0       	mov    $0xf010cbb2,%eax
f010b9a2:	c1 e8 10             	shr    $0x10,%eax
f010b9a5:	66 a3 5e e4 88 f0    	mov    %ax,0xf088e45e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b9ab:	b8 bc cb 10 f0       	mov    $0xf010cbbc,%eax
f010b9b0:	66 a3 70 e4 88 f0    	mov    %ax,0xf088e470
f010b9b6:	66 c7 05 72 e4 88 f0 	movw   $0x8,0xf088e472
f010b9bd:	08 00 
f010b9bf:	a0 74 e4 88 f0       	mov    0xf088e474,%al
f010b9c4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9c7:	a2 74 e4 88 f0       	mov    %al,0xf088e474
f010b9cc:	a0 74 e4 88 f0       	mov    0xf088e474,%al
f010b9d1:	83 e0 1f             	and    $0x1f,%eax
f010b9d4:	a2 74 e4 88 f0       	mov    %al,0xf088e474
f010b9d9:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9de:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9e1:	83 c8 0e             	or     $0xe,%eax
f010b9e4:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010b9e9:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9ee:	83 e0 ef             	and    $0xffffffef,%eax
f010b9f1:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010b9f6:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9fb:	83 c8 60             	or     $0x60,%eax
f010b9fe:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010ba03:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010ba08:	83 c8 80             	or     $0xffffff80,%eax
f010ba0b:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010ba10:	b8 bc cb 10 f0       	mov    $0xf010cbbc,%eax
f010ba15:	c1 e8 10             	shr    $0x10,%eax
f010ba18:	66 a3 76 e4 88 f0    	mov    %ax,0xf088e476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010ba1e:	b8 c4 cb 10 f0       	mov    $0xf010cbc4,%eax
f010ba23:	66 a3 78 e4 88 f0    	mov    %ax,0xf088e478
f010ba29:	66 c7 05 7a e4 88 f0 	movw   $0x8,0xf088e47a
f010ba30:	08 00 
f010ba32:	a0 7c e4 88 f0       	mov    0xf088e47c,%al
f010ba37:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba3a:	a2 7c e4 88 f0       	mov    %al,0xf088e47c
f010ba3f:	a0 7c e4 88 f0       	mov    0xf088e47c,%al
f010ba44:	83 e0 1f             	and    $0x1f,%eax
f010ba47:	a2 7c e4 88 f0       	mov    %al,0xf088e47c
f010ba4c:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba51:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba54:	83 c8 0e             	or     $0xe,%eax
f010ba57:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba5c:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba61:	83 e0 ef             	and    $0xffffffef,%eax
f010ba64:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba69:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba6e:	83 c8 60             	or     $0x60,%eax
f010ba71:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba76:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba7b:	83 c8 80             	or     $0xffffff80,%eax
f010ba7e:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba83:	b8 c4 cb 10 f0       	mov    $0xf010cbc4,%eax
f010ba88:	c1 e8 10             	shr    $0x10,%eax
f010ba8b:	66 a3 7e e4 88 f0    	mov    %ax,0xf088e47e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010ba91:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010ba96:	66 a3 80 e4 88 f0    	mov    %ax,0xf088e480
f010ba9c:	66 c7 05 82 e4 88 f0 	movw   $0x8,0xf088e482
f010baa3:	08 00 
f010baa5:	a0 84 e4 88 f0       	mov    0xf088e484,%al
f010baaa:	83 e0 e0             	and    $0xffffffe0,%eax
f010baad:	a2 84 e4 88 f0       	mov    %al,0xf088e484
f010bab2:	a0 84 e4 88 f0       	mov    0xf088e484,%al
f010bab7:	83 e0 1f             	and    $0x1f,%eax
f010baba:	a2 84 e4 88 f0       	mov    %al,0xf088e484
f010babf:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bac4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bac7:	83 c8 0e             	or     $0xe,%eax
f010baca:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010bacf:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bad4:	83 e0 ef             	and    $0xffffffef,%eax
f010bad7:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010badc:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bae1:	83 c8 60             	or     $0x60,%eax
f010bae4:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010bae9:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010baee:	83 c8 80             	or     $0xffffff80,%eax
f010baf1:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010baf6:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010bafb:	c1 e8 10             	shr    $0x10,%eax
f010bafe:	66 a3 86 e4 88 f0    	mov    %ax,0xf088e486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bb04:	b8 cc cb 10 f0       	mov    $0xf010cbcc,%eax
f010bb09:	66 a3 88 e4 88 f0    	mov    %ax,0xf088e488
f010bb0f:	66 c7 05 8a e4 88 f0 	movw   $0x8,0xf088e48a
f010bb16:	08 00 
f010bb18:	a0 8c e4 88 f0       	mov    0xf088e48c,%al
f010bb1d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb20:	a2 8c e4 88 f0       	mov    %al,0xf088e48c
f010bb25:	a0 8c e4 88 f0       	mov    0xf088e48c,%al
f010bb2a:	83 e0 1f             	and    $0x1f,%eax
f010bb2d:	a2 8c e4 88 f0       	mov    %al,0xf088e48c
f010bb32:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb37:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb3a:	83 c8 0e             	or     $0xe,%eax
f010bb3d:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb42:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb47:	83 e0 ef             	and    $0xffffffef,%eax
f010bb4a:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb4f:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb54:	83 c8 60             	or     $0x60,%eax
f010bb57:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb5c:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb61:	83 c8 80             	or     $0xffffff80,%eax
f010bb64:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb69:	b8 cc cb 10 f0       	mov    $0xf010cbcc,%eax
f010bb6e:	c1 e8 10             	shr    $0x10,%eax
f010bb71:	66 a3 8e e4 88 f0    	mov    %ax,0xf088e48e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bb77:	b8 d0 cb 10 f0       	mov    $0xf010cbd0,%eax
f010bb7c:	66 a3 a0 e4 88 f0    	mov    %ax,0xf088e4a0
f010bb82:	66 c7 05 a2 e4 88 f0 	movw   $0x8,0xf088e4a2
f010bb89:	08 00 
f010bb8b:	a0 a4 e4 88 f0       	mov    0xf088e4a4,%al
f010bb90:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb93:	a2 a4 e4 88 f0       	mov    %al,0xf088e4a4
f010bb98:	a0 a4 e4 88 f0       	mov    0xf088e4a4,%al
f010bb9d:	83 e0 1f             	and    $0x1f,%eax
f010bba0:	a2 a4 e4 88 f0       	mov    %al,0xf088e4a4
f010bba5:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbaa:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbad:	83 c8 0e             	or     $0xe,%eax
f010bbb0:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbb5:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbba:	83 e0 ef             	and    $0xffffffef,%eax
f010bbbd:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbc2:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbc7:	83 c8 60             	or     $0x60,%eax
f010bbca:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbcf:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbd4:	83 c8 80             	or     $0xffffff80,%eax
f010bbd7:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbdc:	b8 d0 cb 10 f0       	mov    $0xf010cbd0,%eax
f010bbe1:	c1 e8 10             	shr    $0x10,%eax
f010bbe4:	66 a3 a6 e4 88 f0    	mov    %ax,0xf088e4a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bbea:	b8 d6 cb 10 f0       	mov    $0xf010cbd6,%eax
f010bbef:	66 a3 a8 e4 88 f0    	mov    %ax,0xf088e4a8
f010bbf5:	66 c7 05 aa e4 88 f0 	movw   $0x8,0xf088e4aa
f010bbfc:	08 00 
f010bbfe:	a0 ac e4 88 f0       	mov    0xf088e4ac,%al
f010bc03:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc06:	a2 ac e4 88 f0       	mov    %al,0xf088e4ac
f010bc0b:	a0 ac e4 88 f0       	mov    0xf088e4ac,%al
f010bc10:	83 e0 1f             	and    $0x1f,%eax
f010bc13:	a2 ac e4 88 f0       	mov    %al,0xf088e4ac
f010bc18:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc1d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc20:	83 c8 0e             	or     $0xe,%eax
f010bc23:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc28:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc2d:	83 e0 ef             	and    $0xffffffef,%eax
f010bc30:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc35:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc3a:	83 c8 60             	or     $0x60,%eax
f010bc3d:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc42:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc47:	83 c8 80             	or     $0xffffff80,%eax
f010bc4a:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc4f:	b8 d6 cb 10 f0       	mov    $0xf010cbd6,%eax
f010bc54:	c1 e8 10             	shr    $0x10,%eax
f010bc57:	66 a3 ae e4 88 f0    	mov    %ax,0xf088e4ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bc5d:	b8 da cb 10 f0       	mov    $0xf010cbda,%eax
f010bc62:	66 a3 b0 e4 88 f0    	mov    %ax,0xf088e4b0
f010bc68:	66 c7 05 b2 e4 88 f0 	movw   $0x8,0xf088e4b2
f010bc6f:	08 00 
f010bc71:	a0 b4 e4 88 f0       	mov    0xf088e4b4,%al
f010bc76:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc79:	a2 b4 e4 88 f0       	mov    %al,0xf088e4b4
f010bc7e:	a0 b4 e4 88 f0       	mov    0xf088e4b4,%al
f010bc83:	83 e0 1f             	and    $0x1f,%eax
f010bc86:	a2 b4 e4 88 f0       	mov    %al,0xf088e4b4
f010bc8b:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bc90:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc93:	83 c8 0e             	or     $0xe,%eax
f010bc96:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bc9b:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bca0:	83 e0 ef             	and    $0xffffffef,%eax
f010bca3:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bca8:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bcad:	83 c8 60             	or     $0x60,%eax
f010bcb0:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bcb5:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bcba:	83 c8 80             	or     $0xffffff80,%eax
f010bcbd:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bcc2:	b8 da cb 10 f0       	mov    $0xf010cbda,%eax
f010bcc7:	c1 e8 10             	shr    $0x10,%eax
f010bcca:	66 a3 b6 e4 88 f0    	mov    %ax,0xf088e4b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bcd0:	b8 e0 cb 10 f0       	mov    $0xf010cbe0,%eax
f010bcd5:	66 a3 b8 e4 88 f0    	mov    %ax,0xf088e4b8
f010bcdb:	66 c7 05 ba e4 88 f0 	movw   $0x8,0xf088e4ba
f010bce2:	08 00 
f010bce4:	a0 bc e4 88 f0       	mov    0xf088e4bc,%al
f010bce9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcec:	a2 bc e4 88 f0       	mov    %al,0xf088e4bc
f010bcf1:	a0 bc e4 88 f0       	mov    0xf088e4bc,%al
f010bcf6:	83 e0 1f             	and    $0x1f,%eax
f010bcf9:	a2 bc e4 88 f0       	mov    %al,0xf088e4bc
f010bcfe:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd03:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd06:	83 c8 0e             	or     $0xe,%eax
f010bd09:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd0e:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd13:	83 e0 ef             	and    $0xffffffef,%eax
f010bd16:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd1b:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd20:	83 c8 60             	or     $0x60,%eax
f010bd23:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd28:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd2d:	83 c8 80             	or     $0xffffff80,%eax
f010bd30:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd35:	b8 e0 cb 10 f0       	mov    $0xf010cbe0,%eax
f010bd3a:	c1 e8 10             	shr    $0x10,%eax
f010bd3d:	66 a3 be e4 88 f0    	mov    %ax,0xf088e4be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bd43:	b8 e6 cb 10 f0       	mov    $0xf010cbe6,%eax
f010bd48:	66 a3 20 e5 88 f0    	mov    %ax,0xf088e520
f010bd4e:	66 c7 05 22 e5 88 f0 	movw   $0x8,0xf088e522
f010bd55:	08 00 
f010bd57:	a0 24 e5 88 f0       	mov    0xf088e524,%al
f010bd5c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd5f:	a2 24 e5 88 f0       	mov    %al,0xf088e524
f010bd64:	a0 24 e5 88 f0       	mov    0xf088e524,%al
f010bd69:	83 e0 1f             	and    $0x1f,%eax
f010bd6c:	a2 24 e5 88 f0       	mov    %al,0xf088e524
f010bd71:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd76:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd79:	83 c8 0e             	or     $0xe,%eax
f010bd7c:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd81:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd86:	83 e0 ef             	and    $0xffffffef,%eax
f010bd89:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd8e:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd93:	83 c8 60             	or     $0x60,%eax
f010bd96:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd9b:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bda0:	83 c8 80             	or     $0xffffff80,%eax
f010bda3:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bda8:	b8 e6 cb 10 f0       	mov    $0xf010cbe6,%eax
f010bdad:	c1 e8 10             	shr    $0x10,%eax
f010bdb0:	66 a3 26 e5 88 f0    	mov    %ax,0xf088e526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bdb6:	b8 ec cb 10 f0       	mov    $0xf010cbec,%eax
f010bdbb:	66 a3 28 e5 88 f0    	mov    %ax,0xf088e528
f010bdc1:	66 c7 05 2a e5 88 f0 	movw   $0x8,0xf088e52a
f010bdc8:	08 00 
f010bdca:	a0 2c e5 88 f0       	mov    0xf088e52c,%al
f010bdcf:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdd2:	a2 2c e5 88 f0       	mov    %al,0xf088e52c
f010bdd7:	a0 2c e5 88 f0       	mov    0xf088e52c,%al
f010bddc:	83 e0 1f             	and    $0x1f,%eax
f010bddf:	a2 2c e5 88 f0       	mov    %al,0xf088e52c
f010bde4:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010bde9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdec:	83 c8 0e             	or     $0xe,%eax
f010bdef:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010bdf4:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010bdf9:	83 e0 ef             	and    $0xffffffef,%eax
f010bdfc:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010be01:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010be06:	83 c8 60             	or     $0x60,%eax
f010be09:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010be0e:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010be13:	83 c8 80             	or     $0xffffff80,%eax
f010be16:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010be1b:	b8 ec cb 10 f0       	mov    $0xf010cbec,%eax
f010be20:	c1 e8 10             	shr    $0x10,%eax
f010be23:	66 a3 2e e5 88 f0    	mov    %ax,0xf088e52e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010be29:	b8 f2 cb 10 f0       	mov    $0xf010cbf2,%eax
f010be2e:	66 a3 30 e5 88 f0    	mov    %ax,0xf088e530
f010be34:	66 c7 05 32 e5 88 f0 	movw   $0x8,0xf088e532
f010be3b:	08 00 
f010be3d:	a0 34 e5 88 f0       	mov    0xf088e534,%al
f010be42:	83 e0 e0             	and    $0xffffffe0,%eax
f010be45:	a2 34 e5 88 f0       	mov    %al,0xf088e534
f010be4a:	a0 34 e5 88 f0       	mov    0xf088e534,%al
f010be4f:	83 e0 1f             	and    $0x1f,%eax
f010be52:	a2 34 e5 88 f0       	mov    %al,0xf088e534
f010be57:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be5c:	83 e0 f0             	and    $0xfffffff0,%eax
f010be5f:	83 c8 0e             	or     $0xe,%eax
f010be62:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be67:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be6c:	83 e0 ef             	and    $0xffffffef,%eax
f010be6f:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be74:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be79:	83 c8 60             	or     $0x60,%eax
f010be7c:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be81:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be86:	83 c8 80             	or     $0xffffff80,%eax
f010be89:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be8e:	b8 f2 cb 10 f0       	mov    $0xf010cbf2,%eax
f010be93:	c1 e8 10             	shr    $0x10,%eax
f010be96:	66 a3 36 e5 88 f0    	mov    %ax,0xf088e536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010be9c:	b8 f8 cb 10 f0       	mov    $0xf010cbf8,%eax
f010bea1:	66 a3 38 e5 88 f0    	mov    %ax,0xf088e538
f010bea7:	66 c7 05 3a e5 88 f0 	movw   $0x8,0xf088e53a
f010beae:	08 00 
f010beb0:	a0 3c e5 88 f0       	mov    0xf088e53c,%al
f010beb5:	83 e0 e0             	and    $0xffffffe0,%eax
f010beb8:	a2 3c e5 88 f0       	mov    %al,0xf088e53c
f010bebd:	a0 3c e5 88 f0       	mov    0xf088e53c,%al
f010bec2:	83 e0 1f             	and    $0x1f,%eax
f010bec5:	a2 3c e5 88 f0       	mov    %al,0xf088e53c
f010beca:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010becf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bed2:	83 c8 0e             	or     $0xe,%eax
f010bed5:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010beda:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010bedf:	83 e0 ef             	and    $0xffffffef,%eax
f010bee2:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bee7:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010beec:	83 c8 60             	or     $0x60,%eax
f010beef:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bef4:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010bef9:	83 c8 80             	or     $0xffffff80,%eax
f010befc:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bf01:	b8 f8 cb 10 f0       	mov    $0xf010cbf8,%eax
f010bf06:	c1 e8 10             	shr    $0x10,%eax
f010bf09:	66 a3 3e e5 88 f0    	mov    %ax,0xf088e53e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bf0f:	b8 fe cb 10 f0       	mov    $0xf010cbfe,%eax
f010bf14:	66 a3 40 e5 88 f0    	mov    %ax,0xf088e540
f010bf1a:	66 c7 05 42 e5 88 f0 	movw   $0x8,0xf088e542
f010bf21:	08 00 
f010bf23:	a0 44 e5 88 f0       	mov    0xf088e544,%al
f010bf28:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf2b:	a2 44 e5 88 f0       	mov    %al,0xf088e544
f010bf30:	a0 44 e5 88 f0       	mov    0xf088e544,%al
f010bf35:	83 e0 1f             	and    $0x1f,%eax
f010bf38:	a2 44 e5 88 f0       	mov    %al,0xf088e544
f010bf3d:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf42:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf45:	83 c8 0e             	or     $0xe,%eax
f010bf48:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf4d:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf52:	83 e0 ef             	and    $0xffffffef,%eax
f010bf55:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf5a:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf5f:	83 c8 60             	or     $0x60,%eax
f010bf62:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf67:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf6c:	83 c8 80             	or     $0xffffff80,%eax
f010bf6f:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf74:	b8 fe cb 10 f0       	mov    $0xf010cbfe,%eax
f010bf79:	c1 e8 10             	shr    $0x10,%eax
f010bf7c:	66 a3 46 e5 88 f0    	mov    %ax,0xf088e546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bf82:	b8 04 cc 10 f0       	mov    $0xf010cc04,%eax
f010bf87:	66 a3 48 e5 88 f0    	mov    %ax,0xf088e548
f010bf8d:	66 c7 05 4a e5 88 f0 	movw   $0x8,0xf088e54a
f010bf94:	08 00 
f010bf96:	a0 4c e5 88 f0       	mov    0xf088e54c,%al
f010bf9b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf9e:	a2 4c e5 88 f0       	mov    %al,0xf088e54c
f010bfa3:	a0 4c e5 88 f0       	mov    0xf088e54c,%al
f010bfa8:	83 e0 1f             	and    $0x1f,%eax
f010bfab:	a2 4c e5 88 f0       	mov    %al,0xf088e54c
f010bfb0:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfb5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfb8:	83 c8 0e             	or     $0xe,%eax
f010bfbb:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfc0:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfc5:	83 e0 ef             	and    $0xffffffef,%eax
f010bfc8:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfcd:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfd2:	83 c8 60             	or     $0x60,%eax
f010bfd5:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfda:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfdf:	83 c8 80             	or     $0xffffff80,%eax
f010bfe2:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfe7:	b8 04 cc 10 f0       	mov    $0xf010cc04,%eax
f010bfec:	c1 e8 10             	shr    $0x10,%eax
f010bfef:	66 a3 4e e5 88 f0    	mov    %ax,0xf088e54e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bff5:	b8 0a cc 10 f0       	mov    $0xf010cc0a,%eax
f010bffa:	66 a3 50 e5 88 f0    	mov    %ax,0xf088e550
f010c000:	66 c7 05 52 e5 88 f0 	movw   $0x8,0xf088e552
f010c007:	08 00 
f010c009:	a0 54 e5 88 f0       	mov    0xf088e554,%al
f010c00e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c011:	a2 54 e5 88 f0       	mov    %al,0xf088e554
f010c016:	a0 54 e5 88 f0       	mov    0xf088e554,%al
f010c01b:	83 e0 1f             	and    $0x1f,%eax
f010c01e:	a2 54 e5 88 f0       	mov    %al,0xf088e554
f010c023:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c028:	83 e0 f0             	and    $0xfffffff0,%eax
f010c02b:	83 c8 0e             	or     $0xe,%eax
f010c02e:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c033:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c038:	83 e0 ef             	and    $0xffffffef,%eax
f010c03b:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c040:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c045:	83 c8 60             	or     $0x60,%eax
f010c048:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c04d:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c052:	83 c8 80             	or     $0xffffff80,%eax
f010c055:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c05a:	b8 0a cc 10 f0       	mov    $0xf010cc0a,%eax
f010c05f:	c1 e8 10             	shr    $0x10,%eax
f010c062:	66 a3 56 e5 88 f0    	mov    %ax,0xf088e556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c068:	b8 10 cc 10 f0       	mov    $0xf010cc10,%eax
f010c06d:	66 a3 58 e5 88 f0    	mov    %ax,0xf088e558
f010c073:	66 c7 05 5a e5 88 f0 	movw   $0x8,0xf088e55a
f010c07a:	08 00 
f010c07c:	a0 5c e5 88 f0       	mov    0xf088e55c,%al
f010c081:	83 e0 e0             	and    $0xffffffe0,%eax
f010c084:	a2 5c e5 88 f0       	mov    %al,0xf088e55c
f010c089:	a0 5c e5 88 f0       	mov    0xf088e55c,%al
f010c08e:	83 e0 1f             	and    $0x1f,%eax
f010c091:	a2 5c e5 88 f0       	mov    %al,0xf088e55c
f010c096:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c09b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c09e:	83 c8 0e             	or     $0xe,%eax
f010c0a1:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0a6:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0ab:	83 e0 ef             	and    $0xffffffef,%eax
f010c0ae:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0b3:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0b8:	83 c8 60             	or     $0x60,%eax
f010c0bb:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0c0:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0c5:	83 c8 80             	or     $0xffffff80,%eax
f010c0c8:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0cd:	b8 10 cc 10 f0       	mov    $0xf010cc10,%eax
f010c0d2:	c1 e8 10             	shr    $0x10,%eax
f010c0d5:	66 a3 5e e5 88 f0    	mov    %ax,0xf088e55e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c0db:	b8 16 cc 10 f0       	mov    $0xf010cc16,%eax
f010c0e0:	66 a3 60 e5 88 f0    	mov    %ax,0xf088e560
f010c0e6:	66 c7 05 62 e5 88 f0 	movw   $0x8,0xf088e562
f010c0ed:	08 00 
f010c0ef:	a0 64 e5 88 f0       	mov    0xf088e564,%al
f010c0f4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0f7:	a2 64 e5 88 f0       	mov    %al,0xf088e564
f010c0fc:	a0 64 e5 88 f0       	mov    0xf088e564,%al
f010c101:	83 e0 1f             	and    $0x1f,%eax
f010c104:	a2 64 e5 88 f0       	mov    %al,0xf088e564
f010c109:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c10e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c111:	83 c8 0e             	or     $0xe,%eax
f010c114:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c119:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c11e:	83 e0 ef             	and    $0xffffffef,%eax
f010c121:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c126:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c12b:	83 c8 60             	or     $0x60,%eax
f010c12e:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c133:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c138:	83 c8 80             	or     $0xffffff80,%eax
f010c13b:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c140:	b8 16 cc 10 f0       	mov    $0xf010cc16,%eax
f010c145:	c1 e8 10             	shr    $0x10,%eax
f010c148:	66 a3 66 e5 88 f0    	mov    %ax,0xf088e566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c14e:	b8 1c cc 10 f0       	mov    $0xf010cc1c,%eax
f010c153:	66 a3 68 e5 88 f0    	mov    %ax,0xf088e568
f010c159:	66 c7 05 6a e5 88 f0 	movw   $0x8,0xf088e56a
f010c160:	08 00 
f010c162:	a0 6c e5 88 f0       	mov    0xf088e56c,%al
f010c167:	83 e0 e0             	and    $0xffffffe0,%eax
f010c16a:	a2 6c e5 88 f0       	mov    %al,0xf088e56c
f010c16f:	a0 6c e5 88 f0       	mov    0xf088e56c,%al
f010c174:	83 e0 1f             	and    $0x1f,%eax
f010c177:	a2 6c e5 88 f0       	mov    %al,0xf088e56c
f010c17c:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c181:	83 e0 f0             	and    $0xfffffff0,%eax
f010c184:	83 c8 0e             	or     $0xe,%eax
f010c187:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c18c:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c191:	83 e0 ef             	and    $0xffffffef,%eax
f010c194:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c199:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c19e:	83 c8 60             	or     $0x60,%eax
f010c1a1:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c1a6:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c1ab:	83 c8 80             	or     $0xffffff80,%eax
f010c1ae:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c1b3:	b8 1c cc 10 f0       	mov    $0xf010cc1c,%eax
f010c1b8:	c1 e8 10             	shr    $0x10,%eax
f010c1bb:	66 a3 6e e5 88 f0    	mov    %ax,0xf088e56e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c1c1:	b8 22 cc 10 f0       	mov    $0xf010cc22,%eax
f010c1c6:	66 a3 70 e5 88 f0    	mov    %ax,0xf088e570
f010c1cc:	66 c7 05 72 e5 88 f0 	movw   $0x8,0xf088e572
f010c1d3:	08 00 
f010c1d5:	a0 74 e5 88 f0       	mov    0xf088e574,%al
f010c1da:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1dd:	a2 74 e5 88 f0       	mov    %al,0xf088e574
f010c1e2:	a0 74 e5 88 f0       	mov    0xf088e574,%al
f010c1e7:	83 e0 1f             	and    $0x1f,%eax
f010c1ea:	a2 74 e5 88 f0       	mov    %al,0xf088e574
f010c1ef:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c1f4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1f7:	83 c8 0e             	or     $0xe,%eax
f010c1fa:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c1ff:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c204:	83 e0 ef             	and    $0xffffffef,%eax
f010c207:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c20c:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c211:	83 c8 60             	or     $0x60,%eax
f010c214:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c219:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c21e:	83 c8 80             	or     $0xffffff80,%eax
f010c221:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c226:	b8 22 cc 10 f0       	mov    $0xf010cc22,%eax
f010c22b:	c1 e8 10             	shr    $0x10,%eax
f010c22e:	66 a3 76 e5 88 f0    	mov    %ax,0xf088e576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c234:	b8 28 cc 10 f0       	mov    $0xf010cc28,%eax
f010c239:	66 a3 78 e5 88 f0    	mov    %ax,0xf088e578
f010c23f:	66 c7 05 7a e5 88 f0 	movw   $0x8,0xf088e57a
f010c246:	08 00 
f010c248:	a0 7c e5 88 f0       	mov    0xf088e57c,%al
f010c24d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c250:	a2 7c e5 88 f0       	mov    %al,0xf088e57c
f010c255:	a0 7c e5 88 f0       	mov    0xf088e57c,%al
f010c25a:	83 e0 1f             	and    $0x1f,%eax
f010c25d:	a2 7c e5 88 f0       	mov    %al,0xf088e57c
f010c262:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c267:	83 e0 f0             	and    $0xfffffff0,%eax
f010c26a:	83 c8 0e             	or     $0xe,%eax
f010c26d:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c272:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c277:	83 e0 ef             	and    $0xffffffef,%eax
f010c27a:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c27f:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c284:	83 c8 60             	or     $0x60,%eax
f010c287:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c28c:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c291:	83 c8 80             	or     $0xffffff80,%eax
f010c294:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c299:	b8 28 cc 10 f0       	mov    $0xf010cc28,%eax
f010c29e:	c1 e8 10             	shr    $0x10,%eax
f010c2a1:	66 a3 7e e5 88 f0    	mov    %ax,0xf088e57e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c2a7:	b8 2e cc 10 f0       	mov    $0xf010cc2e,%eax
f010c2ac:	66 a3 80 e5 88 f0    	mov    %ax,0xf088e580
f010c2b2:	66 c7 05 82 e5 88 f0 	movw   $0x8,0xf088e582
f010c2b9:	08 00 
f010c2bb:	a0 84 e5 88 f0       	mov    0xf088e584,%al
f010c2c0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2c3:	a2 84 e5 88 f0       	mov    %al,0xf088e584
f010c2c8:	a0 84 e5 88 f0       	mov    0xf088e584,%al
f010c2cd:	83 e0 1f             	and    $0x1f,%eax
f010c2d0:	a2 84 e5 88 f0       	mov    %al,0xf088e584
f010c2d5:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2da:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2dd:	83 c8 0e             	or     $0xe,%eax
f010c2e0:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2e5:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2ea:	83 e0 ef             	and    $0xffffffef,%eax
f010c2ed:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2f2:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2f7:	83 c8 60             	or     $0x60,%eax
f010c2fa:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2ff:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c304:	83 c8 80             	or     $0xffffff80,%eax
f010c307:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c30c:	b8 2e cc 10 f0       	mov    $0xf010cc2e,%eax
f010c311:	c1 e8 10             	shr    $0x10,%eax
f010c314:	66 a3 86 e5 88 f0    	mov    %ax,0xf088e586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c31a:	b8 34 cc 10 f0       	mov    $0xf010cc34,%eax
f010c31f:	66 a3 88 e5 88 f0    	mov    %ax,0xf088e588
f010c325:	66 c7 05 8a e5 88 f0 	movw   $0x8,0xf088e58a
f010c32c:	08 00 
f010c32e:	a0 8c e5 88 f0       	mov    0xf088e58c,%al
f010c333:	83 e0 e0             	and    $0xffffffe0,%eax
f010c336:	a2 8c e5 88 f0       	mov    %al,0xf088e58c
f010c33b:	a0 8c e5 88 f0       	mov    0xf088e58c,%al
f010c340:	83 e0 1f             	and    $0x1f,%eax
f010c343:	a2 8c e5 88 f0       	mov    %al,0xf088e58c
f010c348:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c34d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c350:	83 c8 0e             	or     $0xe,%eax
f010c353:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c358:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c35d:	83 e0 ef             	and    $0xffffffef,%eax
f010c360:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c365:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c36a:	83 c8 60             	or     $0x60,%eax
f010c36d:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c372:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c377:	83 c8 80             	or     $0xffffff80,%eax
f010c37a:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c37f:	b8 34 cc 10 f0       	mov    $0xf010cc34,%eax
f010c384:	c1 e8 10             	shr    $0x10,%eax
f010c387:	66 a3 8e e5 88 f0    	mov    %ax,0xf088e58e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c38d:	b8 3a cc 10 f0       	mov    $0xf010cc3a,%eax
f010c392:	66 a3 90 e5 88 f0    	mov    %ax,0xf088e590
f010c398:	66 c7 05 92 e5 88 f0 	movw   $0x8,0xf088e592
f010c39f:	08 00 
f010c3a1:	a0 94 e5 88 f0       	mov    0xf088e594,%al
f010c3a6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3a9:	a2 94 e5 88 f0       	mov    %al,0xf088e594
f010c3ae:	a0 94 e5 88 f0       	mov    0xf088e594,%al
f010c3b3:	83 e0 1f             	and    $0x1f,%eax
f010c3b6:	a2 94 e5 88 f0       	mov    %al,0xf088e594
f010c3bb:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3c0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3c3:	83 c8 0e             	or     $0xe,%eax
f010c3c6:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3cb:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3d0:	83 e0 ef             	and    $0xffffffef,%eax
f010c3d3:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3d8:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3dd:	83 c8 60             	or     $0x60,%eax
f010c3e0:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3e5:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3ea:	83 c8 80             	or     $0xffffff80,%eax
f010c3ed:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3f2:	b8 3a cc 10 f0       	mov    $0xf010cc3a,%eax
f010c3f7:	c1 e8 10             	shr    $0x10,%eax
f010c3fa:	66 a3 96 e5 88 f0    	mov    %ax,0xf088e596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c400:	b8 40 cc 10 f0       	mov    $0xf010cc40,%eax
f010c405:	66 a3 98 e5 88 f0    	mov    %ax,0xf088e598
f010c40b:	66 c7 05 9a e5 88 f0 	movw   $0x8,0xf088e59a
f010c412:	08 00 
f010c414:	a0 9c e5 88 f0       	mov    0xf088e59c,%al
f010c419:	83 e0 e0             	and    $0xffffffe0,%eax
f010c41c:	a2 9c e5 88 f0       	mov    %al,0xf088e59c
f010c421:	a0 9c e5 88 f0       	mov    0xf088e59c,%al
f010c426:	83 e0 1f             	and    $0x1f,%eax
f010c429:	a2 9c e5 88 f0       	mov    %al,0xf088e59c
f010c42e:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c433:	83 e0 f0             	and    $0xfffffff0,%eax
f010c436:	83 c8 0e             	or     $0xe,%eax
f010c439:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c43e:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c443:	83 e0 ef             	and    $0xffffffef,%eax
f010c446:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c44b:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c450:	83 c8 60             	or     $0x60,%eax
f010c453:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c458:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c45d:	83 c8 80             	or     $0xffffff80,%eax
f010c460:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c465:	b8 40 cc 10 f0       	mov    $0xf010cc40,%eax
f010c46a:	c1 e8 10             	shr    $0x10,%eax
f010c46d:	66 a3 9e e5 88 f0    	mov    %ax,0xf088e59e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c473:	c7 05 44 ec 88 f0 00 	movl   $0xefc00000,0xf088ec44
f010c47a:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c47d:	66 c7 05 48 ec 88 f0 	movw   $0x10,0xf088ec48
f010c484:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c486:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c48d:	68 00 
f010c48f:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c494:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c49a:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c49f:	c1 e8 10             	shr    $0x10,%eax
f010c4a2:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c4a7:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4ac:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4af:	83 c8 09             	or     $0x9,%eax
f010c4b2:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4b7:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4bc:	83 c8 10             	or     $0x10,%eax
f010c4bf:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4c4:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4c9:	83 e0 9f             	and    $0xffffff9f,%eax
f010c4cc:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4d1:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4d6:	83 c8 80             	or     $0xffffff80,%eax
f010c4d9:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4de:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4e3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4e6:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c4eb:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4f0:	83 e0 ef             	and    $0xffffffef,%eax
f010c4f3:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c4f8:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4fd:	83 e0 df             	and    $0xffffffdf,%eax
f010c500:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c505:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c50a:	83 c8 40             	or     $0x40,%eax
f010c50d:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c512:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c517:	83 e0 7f             	and    $0x7f,%eax
f010c51a:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c51f:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c524:	c1 e8 18             	shr    $0x18,%eax
f010c527:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c52c:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c531:	83 e0 ef             	and    $0xffffffef,%eax
f010c534:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c539:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c53f:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c543:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c546:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c54d:	90                   	nop
f010c54e:	c9                   	leave  
f010c54f:	c3                   	ret    

f010c550 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c550:	55                   	push   %ebp
f010c551:	89 e5                	mov    %esp,%ebp
f010c553:	53                   	push   %ebx
f010c554:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c557:	83 ec 08             	sub    $0x8,%esp
f010c55a:	ff 75 08             	pushl  0x8(%ebp)
f010c55d:	68 db 77 13 f0       	push   $0xf01377db
f010c562:	e8 a7 47 ff ff       	call   f0100d0e <cprintf>
f010c567:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c56a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c56d:	83 ec 0c             	sub    $0xc,%esp
f010c570:	50                   	push   %eax
f010c571:	e8 fd 00 00 00       	call   f010c673 <print_regs>
f010c576:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c579:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57c:	8b 40 20             	mov    0x20(%eax),%eax
f010c57f:	0f b7 c0             	movzwl %ax,%eax
f010c582:	83 ec 08             	sub    $0x8,%esp
f010c585:	50                   	push   %eax
f010c586:	68 ed 77 13 f0       	push   $0xf01377ed
f010c58b:	e8 7e 47 ff ff       	call   f0100d0e <cprintf>
f010c590:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c593:	8b 45 08             	mov    0x8(%ebp),%eax
f010c596:	8b 40 24             	mov    0x24(%eax),%eax
f010c599:	0f b7 c0             	movzwl %ax,%eax
f010c59c:	83 ec 08             	sub    $0x8,%esp
f010c59f:	50                   	push   %eax
f010c5a0:	68 00 78 13 f0       	push   $0xf0137800
f010c5a5:	e8 64 47 ff ff       	call   f0100d0e <cprintf>
f010c5aa:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5b0:	8b 58 28             	mov    0x28(%eax),%ebx
f010c5b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5b6:	8b 40 28             	mov    0x28(%eax),%eax
f010c5b9:	83 ec 0c             	sub    $0xc,%esp
f010c5bc:	50                   	push   %eax
f010c5bd:	e8 d0 ee ff ff       	call   f010b492 <trapname>
f010c5c2:	83 c4 10             	add    $0x10,%esp
f010c5c5:	89 c2                	mov    %eax,%edx
f010c5c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ca:	8b 40 28             	mov    0x28(%eax),%eax
f010c5cd:	53                   	push   %ebx
f010c5ce:	52                   	push   %edx
f010c5cf:	50                   	push   %eax
f010c5d0:	68 13 78 13 f0       	push   $0xf0137813
f010c5d5:	e8 34 47 ff ff       	call   f0100d0e <cprintf>
f010c5da:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c5dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e0:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c5e3:	83 ec 08             	sub    $0x8,%esp
f010c5e6:	50                   	push   %eax
f010c5e7:	68 2a 78 13 f0       	push   $0xf013782a
f010c5ec:	e8 1d 47 ff ff       	call   f0100d0e <cprintf>
f010c5f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c5f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5f7:	8b 40 30             	mov    0x30(%eax),%eax
f010c5fa:	83 ec 08             	sub    $0x8,%esp
f010c5fd:	50                   	push   %eax
f010c5fe:	68 39 78 13 f0       	push   $0xf0137839
f010c603:	e8 06 47 ff ff       	call   f0100d0e <cprintf>
f010c608:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c60b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c60e:	8b 40 34             	mov    0x34(%eax),%eax
f010c611:	0f b7 c0             	movzwl %ax,%eax
f010c614:	83 ec 08             	sub    $0x8,%esp
f010c617:	50                   	push   %eax
f010c618:	68 48 78 13 f0       	push   $0xf0137848
f010c61d:	e8 ec 46 ff ff       	call   f0100d0e <cprintf>
f010c622:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c625:	8b 45 08             	mov    0x8(%ebp),%eax
f010c628:	8b 40 38             	mov    0x38(%eax),%eax
f010c62b:	83 ec 08             	sub    $0x8,%esp
f010c62e:	50                   	push   %eax
f010c62f:	68 5b 78 13 f0       	push   $0xf013785b
f010c634:	e8 d5 46 ff ff       	call   f0100d0e <cprintf>
f010c639:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c63f:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c642:	83 ec 08             	sub    $0x8,%esp
f010c645:	50                   	push   %eax
f010c646:	68 6a 78 13 f0       	push   $0xf013786a
f010c64b:	e8 be 46 ff ff       	call   f0100d0e <cprintf>
f010c650:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c653:	8b 45 08             	mov    0x8(%ebp),%eax
f010c656:	8b 40 40             	mov    0x40(%eax),%eax
f010c659:	0f b7 c0             	movzwl %ax,%eax
f010c65c:	83 ec 08             	sub    $0x8,%esp
f010c65f:	50                   	push   %eax
f010c660:	68 79 78 13 f0       	push   $0xf0137879
f010c665:	e8 a4 46 ff ff       	call   f0100d0e <cprintf>
f010c66a:	83 c4 10             	add    $0x10,%esp
}
f010c66d:	90                   	nop
f010c66e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c671:	c9                   	leave  
f010c672:	c3                   	ret    

f010c673 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c673:	55                   	push   %ebp
f010c674:	89 e5                	mov    %esp,%ebp
f010c676:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c679:	8b 45 08             	mov    0x8(%ebp),%eax
f010c67c:	8b 00                	mov    (%eax),%eax
f010c67e:	83 ec 08             	sub    $0x8,%esp
f010c681:	50                   	push   %eax
f010c682:	68 8c 78 13 f0       	push   $0xf013788c
f010c687:	e8 82 46 ff ff       	call   f0100d0e <cprintf>
f010c68c:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c68f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c692:	8b 40 04             	mov    0x4(%eax),%eax
f010c695:	83 ec 08             	sub    $0x8,%esp
f010c698:	50                   	push   %eax
f010c699:	68 9b 78 13 f0       	push   $0xf013789b
f010c69e:	e8 6b 46 ff ff       	call   f0100d0e <cprintf>
f010c6a3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c6a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6a9:	8b 40 08             	mov    0x8(%eax),%eax
f010c6ac:	83 ec 08             	sub    $0x8,%esp
f010c6af:	50                   	push   %eax
f010c6b0:	68 aa 78 13 f0       	push   $0xf01378aa
f010c6b5:	e8 54 46 ff ff       	call   f0100d0e <cprintf>
f010c6ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c6bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6c0:	8b 40 0c             	mov    0xc(%eax),%eax
f010c6c3:	83 ec 08             	sub    $0x8,%esp
f010c6c6:	50                   	push   %eax
f010c6c7:	68 b9 78 13 f0       	push   $0xf01378b9
f010c6cc:	e8 3d 46 ff ff       	call   f0100d0e <cprintf>
f010c6d1:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c6d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d7:	8b 40 10             	mov    0x10(%eax),%eax
f010c6da:	83 ec 08             	sub    $0x8,%esp
f010c6dd:	50                   	push   %eax
f010c6de:	68 c8 78 13 f0       	push   $0xf01378c8
f010c6e3:	e8 26 46 ff ff       	call   f0100d0e <cprintf>
f010c6e8:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c6eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6ee:	8b 40 14             	mov    0x14(%eax),%eax
f010c6f1:	83 ec 08             	sub    $0x8,%esp
f010c6f4:	50                   	push   %eax
f010c6f5:	68 d7 78 13 f0       	push   $0xf01378d7
f010c6fa:	e8 0f 46 ff ff       	call   f0100d0e <cprintf>
f010c6ff:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c702:	8b 45 08             	mov    0x8(%ebp),%eax
f010c705:	8b 40 18             	mov    0x18(%eax),%eax
f010c708:	83 ec 08             	sub    $0x8,%esp
f010c70b:	50                   	push   %eax
f010c70c:	68 e6 78 13 f0       	push   $0xf01378e6
f010c711:	e8 f8 45 ff ff       	call   f0100d0e <cprintf>
f010c716:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c719:	8b 45 08             	mov    0x8(%ebp),%eax
f010c71c:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c71f:	83 ec 08             	sub    $0x8,%esp
f010c722:	50                   	push   %eax
f010c723:	68 f5 78 13 f0       	push   $0xf01378f5
f010c728:	e8 e1 45 ff ff       	call   f0100d0e <cprintf>
f010c72d:	83 c4 10             	add    $0x10,%esp
}
f010c730:	90                   	nop
f010c731:	c9                   	leave  
f010c732:	c3                   	ret    

f010c733 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c733:	55                   	push   %ebp
f010c734:	89 e5                	mov    %esp,%ebp
f010c736:	57                   	push   %edi
f010c737:	56                   	push   %esi
f010c738:	53                   	push   %ebx
f010c739:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c73c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c73f:	8b 40 28             	mov    0x28(%eax),%eax
f010c742:	83 f8 0e             	cmp    $0xe,%eax
f010c745:	75 29                	jne    f010c770 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c747:	83 ec 0c             	sub    $0xc,%esp
f010c74a:	6a 01                	push   $0x1
f010c74c:	e8 fc 18 00 00       	call   f010e04d <isPageReplacmentAlgorithmLRU>
f010c751:	83 c4 10             	add    $0x10,%esp
f010c754:	85 c0                	test   %eax,%eax
f010c756:	74 05                	je     f010c75d <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c758:	e8 cf 92 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c75d:	83 ec 0c             	sub    $0xc,%esp
f010c760:	ff 75 08             	pushl  0x8(%ebp)
f010c763:	e8 51 02 00 00       	call   f010c9b9 <fault_handler>
f010c768:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c76b:	e9 bb 00 00 00       	jmp    f010c82b <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c770:	8b 45 08             	mov    0x8(%ebp),%eax
f010c773:	8b 40 28             	mov    0x28(%eax),%eax
f010c776:	83 f8 30             	cmp    $0x30,%eax
f010c779:	75 42                	jne    f010c7bd <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c77b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c77e:	8b 78 04             	mov    0x4(%eax),%edi
f010c781:	8b 45 08             	mov    0x8(%ebp),%eax
f010c784:	8b 30                	mov    (%eax),%esi
f010c786:	8b 45 08             	mov    0x8(%ebp),%eax
f010c789:	8b 58 10             	mov    0x10(%eax),%ebx
f010c78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c78f:	8b 48 18             	mov    0x18(%eax),%ecx
f010c792:	8b 45 08             	mov    0x8(%ebp),%eax
f010c795:	8b 50 14             	mov    0x14(%eax),%edx
f010c798:	8b 45 08             	mov    0x8(%ebp),%eax
f010c79b:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c79e:	83 ec 08             	sub    $0x8,%esp
f010c7a1:	57                   	push   %edi
f010c7a2:	56                   	push   %esi
f010c7a3:	53                   	push   %ebx
f010c7a4:	51                   	push   %ecx
f010c7a5:	52                   	push   %edx
f010c7a6:	50                   	push   %eax
f010c7a7:	e8 ec 0f 00 00       	call   f010d798 <syscall>
f010c7ac:	83 c4 20             	add    $0x20,%esp
f010c7af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c7b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c7b8:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c7bb:	eb 6e                	jmp    f010c82b <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c7bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c7c3:	83 f8 08             	cmp    $0x8,%eax
f010c7c6:	75 17                	jne    f010c7df <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c7c8:	83 ec 04             	sub    $0x4,%esp
f010c7cb:	68 04 79 13 f0       	push   $0xf0137904
f010c7d0:	68 e7 00 00 00       	push   $0xe7
f010c7d5:	68 13 79 13 f0       	push   $0xf0137913
f010c7da:	e8 26 3a ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c7df:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7e2:	8b 40 28             	mov    0x28(%eax),%eax
f010c7e5:	83 f8 20             	cmp    $0x20,%eax
f010c7e8:	75 07                	jne    f010c7f1 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c7ea:	e8 1c 92 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c7ef:	eb 3a                	jmp    f010c82b <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c7f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f4:	8b 40 34             	mov    0x34(%eax),%eax
f010c7f7:	66 83 f8 08          	cmp    $0x8,%ax
f010c7fb:	75 17                	jne    f010c814 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c7fd:	83 ec 04             	sub    $0x4,%esp
f010c800:	68 24 79 13 f0       	push   $0xf0137924
f010c805:	68 f4 00 00 00       	push   $0xf4
f010c80a:	68 13 79 13 f0       	push   $0xf0137913
f010c80f:	e8 f1 39 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c814:	83 ec 04             	sub    $0x4,%esp
f010c817:	68 40 79 13 f0       	push   $0xf0137940
f010c81c:	68 f8 00 00 00       	push   $0xf8
f010c821:	68 13 79 13 f0       	push   $0xf0137913
f010c826:	e8 da 39 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c82b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c82e:	5b                   	pop    %ebx
f010c82f:	5e                   	pop    %esi
f010c830:	5f                   	pop    %edi
f010c831:	5d                   	pop    %ebp
f010c832:	c3                   	ret    

f010c833 <trap>:

void trap(struct Trapframe *tf)
{
f010c833:	55                   	push   %ebp
f010c834:	89 e5                	mov    %esp,%ebp
f010c836:	57                   	push   %edi
f010c837:	56                   	push   %esi
f010c838:	53                   	push   %ebx
f010c839:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c83c:	e8 53 79 ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c841:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c848:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84b:	8b 40 34             	mov    0x34(%eax),%eax
f010c84e:	0f b7 c0             	movzwl %ax,%eax
f010c851:	83 e0 03             	and    $0x3,%eax
f010c854:	83 f8 03             	cmp    $0x3,%eax
f010c857:	75 49                	jne    f010c8a2 <trap+0x6f>
		assert(curenv);
f010c859:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c85e:	85 c0                	test   %eax,%eax
f010c860:	75 19                	jne    f010c87b <trap+0x48>
f010c862:	68 5f 79 13 f0       	push   $0xf013795f
f010c867:	68 66 79 13 f0       	push   $0xf0137966
f010c86c:	68 06 01 00 00       	push   $0x106
f010c871:	68 13 79 13 f0       	push   $0xf0137913
f010c876:	e8 8a 39 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c87b:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010c881:	8b 45 08             	mov    0x8(%ebp),%eax
f010c884:	89 c3                	mov    %eax,%ebx
f010c886:	b8 11 00 00 00       	mov    $0x11,%eax
f010c88b:	89 d7                	mov    %edx,%edi
f010c88d:	89 de                	mov    %ebx,%esi
f010c88f:	89 c1                	mov    %eax,%ecx
f010c891:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c893:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c898:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c89b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c8a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a5:	8b 40 28             	mov    0x28(%eax),%eax
f010c8a8:	83 f8 20             	cmp    $0x20,%eax
f010c8ab:	75 40                	jne    f010c8ed <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c8ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c8b1:	0f 84 a6 00 00 00    	je     f010c95d <trap+0x12a>
		{
			assert(curenv);
f010c8b7:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c8bc:	85 c0                	test   %eax,%eax
f010c8be:	75 19                	jne    f010c8d9 <trap+0xa6>
f010c8c0:	68 5f 79 13 f0       	push   $0xf013795f
f010c8c5:	68 66 79 13 f0       	push   $0xf0137966
f010c8ca:	68 12 01 00 00       	push   $0x112
f010c8cf:	68 13 79 13 f0       	push   $0xf0137913
f010c8d4:	e8 2c 39 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c8d9:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c8de:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c8e4:	42                   	inc    %edx
f010c8e5:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c8eb:	eb 70                	jmp    f010c95d <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c8ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f0:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f3:	83 f8 0e             	cmp    $0xe,%eax
f010c8f6:	75 65                	jne    f010c95d <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c8f8:	a0 a8 ec 88 f0       	mov    0xf088eca8,%al
f010c8fd:	84 c0                	test   %al,%al
f010c8ff:	74 5c                	je     f010c95d <trap+0x12a>
			if (userTrap){
f010c901:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c905:	74 2c                	je     f010c933 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c907:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c90c:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010c912:	8b 52 30             	mov    0x30(%edx),%edx
f010c915:	89 d1                	mov    %edx,%ecx
f010c917:	8a 15 a8 ec 88 f0    	mov    0xf088eca8,%dl
f010c91d:	0f b6 d2             	movzbl %dl,%edx
f010c920:	01 ca                	add    %ecx,%edx
f010c922:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c925:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c92a:	83 ec 0c             	sub    $0xc,%esp
f010c92d:	50                   	push   %eax
f010c92e:	e8 43 d4 ff ff       	call   f0109d76 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c933:	8b 45 08             	mov    0x8(%ebp),%eax
f010c936:	8b 40 30             	mov    0x30(%eax),%eax
f010c939:	89 c2                	mov    %eax,%edx
f010c93b:	a0 a8 ec 88 f0       	mov    0xf088eca8,%al
f010c940:	0f b6 c0             	movzbl %al,%eax
f010c943:	01 d0                	add    %edx,%eax
f010c945:	89 c2                	mov    %eax,%edx
f010c947:	8b 45 08             	mov    0x8(%ebp),%eax
f010c94a:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c94d:	e8 6d 78 ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c952:	83 ec 0c             	sub    $0xc,%esp
f010c955:	ff 75 08             	pushl  0x8(%ebp)
f010c958:	e8 7c d5 ff ff       	call   f0109ed9 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c95d:	83 ec 0c             	sub    $0xc,%esp
f010c960:	ff 75 08             	pushl  0x8(%ebp)
f010c963:	e8 cb fd ff ff       	call   f010c733 <trap_dispatch>
f010c968:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c96b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c96f:	74 3d                	je     f010c9ae <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c971:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c976:	85 c0                	test   %eax,%eax
f010c978:	74 0d                	je     f010c987 <trap+0x154>
f010c97a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c97f:	8b 40 54             	mov    0x54(%eax),%eax
f010c982:	83 f8 02             	cmp    $0x2,%eax
f010c985:	74 19                	je     f010c9a0 <trap+0x16d>
f010c987:	68 7c 79 13 f0       	push   $0xf013797c
f010c98c:	68 66 79 13 f0       	push   $0xf0137966
f010c991:	68 27 01 00 00       	push   $0x127
f010c996:	68 13 79 13 f0       	push   $0xf0137913
f010c99b:	e8 65 38 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c9a0:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c9a5:	83 ec 0c             	sub    $0xc,%esp
f010c9a8:	50                   	push   %eax
f010c9a9:	e8 c8 d3 ff ff       	call   f0109d76 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c9ae:	83 ec 0c             	sub    $0xc,%esp
f010c9b1:	ff 75 08             	pushl  0x8(%ebp)
f010c9b4:	e8 20 d5 ff ff       	call   f0109ed9 <env_pop_tf>

f010c9b9 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c9b9:	55                   	push   %ebp
f010c9ba:	89 e5                	mov    %esp,%ebp
f010c9bc:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c9bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c9c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9c9:	8b 40 34             	mov    0x34(%eax),%eax
f010c9cc:	0f b7 c0             	movzwl %ax,%eax
f010c9cf:	83 e0 03             	and    $0x3,%eax
f010c9d2:	83 f8 03             	cmp    $0x3,%eax
f010c9d5:	75 07                	jne    f010c9de <fault_handler+0x25>
		userTrap = 1;
f010c9d7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c9de:	0f 20 d0             	mov    %cr2,%eax
f010c9e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c9e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c9e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c9ea:	a1 20 ec 88 f0       	mov    0xf088ec20,%eax
f010c9ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c9f2:	75 2b                	jne    f010ca1f <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c9f4:	a0 24 ec 88 f0       	mov    0xf088ec24,%al
f010c9f9:	40                   	inc    %eax
f010c9fa:	a2 24 ec 88 f0       	mov    %al,0xf088ec24
		if (num_repeated_fault == 3)
f010c9ff:	a0 24 ec 88 f0       	mov    0xf088ec24,%al
f010ca04:	3c 03                	cmp    $0x3,%al
f010ca06:	75 1e                	jne    f010ca26 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010ca08:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca0b:	68 ac 79 13 f0       	push   $0xf01379ac
f010ca10:	68 47 01 00 00       	push   $0x147
f010ca15:	68 13 79 13 f0       	push   $0xf0137913
f010ca1a:	e8 e6 37 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010ca1f:	c6 05 24 ec 88 f0 00 	movb   $0x0,0xf088ec24
	}
	last_fault_va = fault_va ;
f010ca26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ca29:	a3 20 ec 88 f0       	mov    %eax,0xf088ec20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010ca2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca32:	75 29                	jne    f010ca5d <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010ca34:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010ca3b:	77 40                	ja     f010ca7d <fault_handler+0xc4>
f010ca3d:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010ca44:	76 37                	jbe    f010ca7d <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010ca46:	83 ec 04             	sub    $0x4,%esp
f010ca49:	68 f8 79 13 f0       	push   $0xf01379f8
f010ca4e:	68 53 01 00 00       	push   $0x153
f010ca53:	68 13 79 13 f0       	push   $0xf0137913
f010ca58:	e8 a8 37 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010ca5d:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010ca64:	76 17                	jbe    f010ca7d <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010ca66:	83 ec 04             	sub    $0x4,%esp
f010ca69:	68 1c 7a 13 f0       	push   $0xf0137a1c
f010ca6e:	68 59 01 00 00       	push   $0x159
f010ca73:	68 13 79 13 f0       	push   $0xf0137913
f010ca78:	e8 88 37 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010ca7d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ca82:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010ca85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca88:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ca8b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ca8e:	c1 ea 16             	shr    $0x16,%edx
f010ca91:	c1 e2 02             	shl    $0x2,%edx
f010ca94:	01 d0                	add    %edx,%eax
f010ca96:	8b 00                	mov    (%eax),%eax
f010ca98:	83 e0 01             	and    $0x1,%eax
f010ca9b:	85 c0                	test   %eax,%eax
f010ca9d:	75 28                	jne    f010cac7 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010ca9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caa2:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010caa8:	8d 50 01             	lea    0x1(%eax),%edx
f010caab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caae:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cab4:	83 ec 08             	sub    $0x8,%esp
f010cab7:	ff 75 ec             	pushl  -0x14(%ebp)
f010caba:	ff 75 e8             	pushl  -0x18(%ebp)
f010cabd:	e8 70 16 00 00       	call   f010e132 <table_fault_handler>
f010cac2:	83 c4 10             	add    $0x10,%esp
f010cac5:	eb 7b                	jmp    f010cb42 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caca:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cacd:	83 ec 08             	sub    $0x8,%esp
f010cad0:	ff 75 ec             	pushl  -0x14(%ebp)
f010cad3:	50                   	push   %eax
f010cad4:	e8 92 b4 ff ff       	call   f0107f6b <pt_get_page_permissions>
f010cad9:	83 c4 10             	add    $0x10,%esp
f010cadc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cadf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cae2:	83 e0 01             	and    $0x1,%eax
f010cae5:	85 c0                	test   %eax,%eax
f010cae7:	74 17                	je     f010cb00 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cae9:	ff 75 ec             	pushl  -0x14(%ebp)
f010caec:	68 40 7a 13 f0       	push   $0xf0137a40
f010caf1:	68 6e 01 00 00       	push   $0x16e
f010caf6:	68 13 79 13 f0       	push   $0xf0137913
f010cafb:	e8 05 37 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cb00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb03:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010cb09:	8d 50 01             	lea    0x1(%eax),%edx
f010cb0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb0f:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cb15:	e8 f6 15 00 00       	call   f010e110 <isBufferingEnabled>
f010cb1a:	84 c0                	test   %al,%al
f010cb1c:	74 13                	je     f010cb31 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010cb1e:	83 ec 08             	sub    $0x8,%esp
f010cb21:	ff 75 ec             	pushl  -0x14(%ebp)
f010cb24:	ff 75 e8             	pushl  -0x18(%ebp)
f010cb27:	e8 8c 18 00 00       	call   f010e3b8 <__page_fault_handler_with_buffering>
f010cb2c:	83 c4 10             	add    $0x10,%esp
f010cb2f:	eb 11                	jmp    f010cb42 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cb31:	83 ec 08             	sub    $0x8,%esp
f010cb34:	ff 75 ec             	pushl  -0x14(%ebp)
f010cb37:	ff 75 e8             	pushl  -0x18(%ebp)
f010cb3a:	e8 14 16 00 00       	call   f010e153 <page_fault_handler>
f010cb3f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010cb42:	0f 20 d8             	mov    %cr3,%eax
f010cb45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010cb48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb4b:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cb4e:	90                   	nop
f010cb4f:	c9                   	leave  
f010cb50:	c3                   	ret    
f010cb51:	90                   	nop

f010cb52 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cb52:	6a 0e                	push   $0xe
f010cb54:	e9 ed 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb59:	90                   	nop

f010cb5a <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cb5a:	6a 00                	push   $0x0
f010cb5c:	6a 30                	push   $0x30
f010cb5e:	e9 e3 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb63:	90                   	nop

f010cb64 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cb64:	6a 08                	push   $0x8
f010cb66:	e9 db 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb6b:	90                   	nop

f010cb6c <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cb6c:	6a 00                	push   $0x0
f010cb6e:	6a 00                	push   $0x0
f010cb70:	e9 d1 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb75:	90                   	nop

f010cb76 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cb76:	6a 00                	push   $0x0
f010cb78:	6a 01                	push   $0x1
f010cb7a:	e9 c7 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb7f:	90                   	nop

f010cb80 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cb80:	6a 00                	push   $0x0
f010cb82:	6a 02                	push   $0x2
f010cb84:	e9 bd 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb89:	90                   	nop

f010cb8a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cb8a:	6a 00                	push   $0x0
f010cb8c:	6a 03                	push   $0x3
f010cb8e:	e9 b3 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb93:	90                   	nop

f010cb94 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cb94:	6a 00                	push   $0x0
f010cb96:	6a 04                	push   $0x4
f010cb98:	e9 a9 00 00 00       	jmp    f010cc46 <_alltraps>
f010cb9d:	90                   	nop

f010cb9e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cb9e:	6a 00                	push   $0x0
f010cba0:	6a 05                	push   $0x5
f010cba2:	e9 9f 00 00 00       	jmp    f010cc46 <_alltraps>
f010cba7:	90                   	nop

f010cba8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cba8:	6a 00                	push   $0x0
f010cbaa:	6a 06                	push   $0x6
f010cbac:	e9 95 00 00 00       	jmp    f010cc46 <_alltraps>
f010cbb1:	90                   	nop

f010cbb2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cbb2:	6a 00                	push   $0x0
f010cbb4:	6a 07                	push   $0x7
f010cbb6:	e9 8b 00 00 00       	jmp    f010cc46 <_alltraps>
f010cbbb:	90                   	nop

f010cbbc <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cbbc:	6a 0a                	push   $0xa
f010cbbe:	e9 83 00 00 00       	jmp    f010cc46 <_alltraps>
f010cbc3:	90                   	nop

f010cbc4 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cbc4:	6a 0b                	push   $0xb
f010cbc6:	eb 7e                	jmp    f010cc46 <_alltraps>

f010cbc8 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cbc8:	6a 0c                	push   $0xc
f010cbca:	eb 7a                	jmp    f010cc46 <_alltraps>

f010cbcc <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cbcc:	6a 0d                	push   $0xd
f010cbce:	eb 76                	jmp    f010cc46 <_alltraps>

f010cbd0 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cbd0:	6a 00                	push   $0x0
f010cbd2:	6a 10                	push   $0x10
f010cbd4:	eb 70                	jmp    f010cc46 <_alltraps>

f010cbd6 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cbd6:	6a 11                	push   $0x11
f010cbd8:	eb 6c                	jmp    f010cc46 <_alltraps>

f010cbda <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cbda:	6a 00                	push   $0x0
f010cbdc:	6a 12                	push   $0x12
f010cbde:	eb 66                	jmp    f010cc46 <_alltraps>

f010cbe0 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cbe0:	6a 00                	push   $0x0
f010cbe2:	6a 13                	push   $0x13
f010cbe4:	eb 60                	jmp    f010cc46 <_alltraps>

f010cbe6 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cbe6:	6a 00                	push   $0x0
f010cbe8:	6a 20                	push   $0x20
f010cbea:	eb 5a                	jmp    f010cc46 <_alltraps>

f010cbec <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cbec:	6a 00                	push   $0x0
f010cbee:	6a 21                	push   $0x21
f010cbf0:	eb 54                	jmp    f010cc46 <_alltraps>

f010cbf2 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cbf2:	6a 00                	push   $0x0
f010cbf4:	6a 22                	push   $0x22
f010cbf6:	eb 4e                	jmp    f010cc46 <_alltraps>

f010cbf8 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cbf8:	6a 00                	push   $0x0
f010cbfa:	6a 23                	push   $0x23
f010cbfc:	eb 48                	jmp    f010cc46 <_alltraps>

f010cbfe <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cbfe:	6a 00                	push   $0x0
f010cc00:	6a 24                	push   $0x24
f010cc02:	eb 42                	jmp    f010cc46 <_alltraps>

f010cc04 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cc04:	6a 00                	push   $0x0
f010cc06:	6a 25                	push   $0x25
f010cc08:	eb 3c                	jmp    f010cc46 <_alltraps>

f010cc0a <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cc0a:	6a 00                	push   $0x0
f010cc0c:	6a 26                	push   $0x26
f010cc0e:	eb 36                	jmp    f010cc46 <_alltraps>

f010cc10 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cc10:	6a 00                	push   $0x0
f010cc12:	6a 27                	push   $0x27
f010cc14:	eb 30                	jmp    f010cc46 <_alltraps>

f010cc16 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cc16:	6a 00                	push   $0x0
f010cc18:	6a 28                	push   $0x28
f010cc1a:	eb 2a                	jmp    f010cc46 <_alltraps>

f010cc1c <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cc1c:	6a 00                	push   $0x0
f010cc1e:	6a 29                	push   $0x29
f010cc20:	eb 24                	jmp    f010cc46 <_alltraps>

f010cc22 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cc22:	6a 00                	push   $0x0
f010cc24:	6a 2a                	push   $0x2a
f010cc26:	eb 1e                	jmp    f010cc46 <_alltraps>

f010cc28 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cc28:	6a 00                	push   $0x0
f010cc2a:	6a 2b                	push   $0x2b
f010cc2c:	eb 18                	jmp    f010cc46 <_alltraps>

f010cc2e <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cc2e:	6a 00                	push   $0x0
f010cc30:	6a 2c                	push   $0x2c
f010cc32:	eb 12                	jmp    f010cc46 <_alltraps>

f010cc34 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cc34:	6a 00                	push   $0x0
f010cc36:	6a 2d                	push   $0x2d
f010cc38:	eb 0c                	jmp    f010cc46 <_alltraps>

f010cc3a <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cc3a:	6a 00                	push   $0x0
f010cc3c:	6a 2e                	push   $0x2e
f010cc3e:	eb 06                	jmp    f010cc46 <_alltraps>

f010cc40 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cc40:	6a 00                	push   $0x0
f010cc42:	6a 2f                	push   $0x2f
f010cc44:	eb 00                	jmp    f010cc46 <_alltraps>

f010cc46 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cc46:	1e                   	push   %ds
push %es
f010cc47:	06                   	push   %es
pushal
f010cc48:	60                   	pusha  

mov $(GD_KD), %ax
f010cc49:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cc4d:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cc4f:	8e c0                	mov    %eax,%es

push %esp
f010cc51:	54                   	push   %esp

call trap
f010cc52:	e8 dc fb ff ff       	call   f010c833 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cc57:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cc58:	61                   	popa   
pop %es
f010cc59:	07                   	pop    %es
pop %ds
f010cc5a:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cc5b:	83 c4 08             	add    $0x8,%esp

iret
f010cc5e:	cf                   	iret   

f010cc5f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cc5f:	55                   	push   %ebp
f010cc60:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cc62:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc65:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f010cc6b:	29 d0                	sub    %edx,%eax
f010cc6d:	c1 f8 03             	sar    $0x3,%eax
f010cc70:	89 c2                	mov    %eax,%edx
f010cc72:	89 d0                	mov    %edx,%eax
f010cc74:	c1 e0 02             	shl    $0x2,%eax
f010cc77:	01 d0                	add    %edx,%eax
f010cc79:	c1 e0 02             	shl    $0x2,%eax
f010cc7c:	01 d0                	add    %edx,%eax
f010cc7e:	c1 e0 02             	shl    $0x2,%eax
f010cc81:	01 d0                	add    %edx,%eax
f010cc83:	89 c1                	mov    %eax,%ecx
f010cc85:	c1 e1 08             	shl    $0x8,%ecx
f010cc88:	01 c8                	add    %ecx,%eax
f010cc8a:	89 c1                	mov    %eax,%ecx
f010cc8c:	c1 e1 10             	shl    $0x10,%ecx
f010cc8f:	01 c8                	add    %ecx,%eax
f010cc91:	01 c0                	add    %eax,%eax
f010cc93:	01 d0                	add    %edx,%eax
}
f010cc95:	5d                   	pop    %ebp
f010cc96:	c3                   	ret    

f010cc97 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cc97:	55                   	push   %ebp
f010cc98:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cc9a:	ff 75 08             	pushl  0x8(%ebp)
f010cc9d:	e8 bd ff ff ff       	call   f010cc5f <to_frame_number>
f010cca2:	83 c4 04             	add    $0x4,%esp
f010cca5:	c1 e0 0c             	shl    $0xc,%eax
}
f010cca8:	c9                   	leave  
f010cca9:	c3                   	ret    

f010ccaa <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010ccaa:	55                   	push   %ebp
f010ccab:	89 e5                	mov    %esp,%ebp
f010ccad:	83 ec 18             	sub    $0x18,%esp
f010ccb0:	8b 45 10             	mov    0x10(%ebp),%eax
f010ccb3:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010ccb6:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010ccba:	74 26                	je     f010cce2 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010ccbc:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ccc1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ccc4:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010ccca:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010ccd0:	83 ec 04             	sub    $0x4,%esp
f010ccd3:	50                   	push   %eax
f010ccd4:	52                   	push   %edx
f010ccd5:	68 30 7c 13 f0       	push   $0xf0137c30
f010ccda:	e8 2f 40 ff ff       	call   f0100d0e <cprintf>
f010ccdf:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cce2:	83 ec 04             	sub    $0x4,%esp
f010cce5:	ff 75 08             	pushl  0x8(%ebp)
f010cce8:	ff 75 0c             	pushl  0xc(%ebp)
f010cceb:	68 39 7c 13 f0       	push   $0xf0137c39
f010ccf0:	e8 19 40 ff ff       	call   f0100d0e <cprintf>
f010ccf5:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010ccf8:	90                   	nop
f010ccf9:	c9                   	leave  
f010ccfa:	c3                   	ret    

f010ccfb <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010ccfb:	55                   	push   %ebp
f010ccfc:	89 e5                	mov    %esp,%ebp
f010ccfe:	83 ec 18             	sub    $0x18,%esp
f010cd01:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd04:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cd07:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cd0b:	83 ec 08             	sub    $0x8,%esp
f010cd0e:	50                   	push   %eax
f010cd0f:	68 3e 7c 13 f0       	push   $0xf0137c3e
f010cd14:	e8 f5 3f ff ff       	call   f0100d0e <cprintf>
f010cd19:	83 c4 10             	add    $0x10,%esp
}
f010cd1c:	90                   	nop
f010cd1d:	c9                   	leave  
f010cd1e:	c3                   	ret    

f010cd1f <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010cd1f:	55                   	push   %ebp
f010cd20:	89 e5                	mov    %esp,%ebp
f010cd22:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cd25:	e8 1e 3e ff ff       	call   f0100b48 <cons_getc2>
f010cd2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cd2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cd30:	c9                   	leave  
f010cd31:	c3                   	ret    

f010cd32 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cd32:	55                   	push   %ebp
f010cd33:	89 e5                	mov    %esp,%ebp
f010cd35:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cd38:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cd3d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cd40:	83 ec 0c             	sub    $0xc,%esp
f010cd43:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cd46:	50                   	push   %eax
f010cd47:	e8 a6 9b ff ff       	call   f01068f2 <allocate_frame>
f010cd4c:	83 c4 10             	add    $0x10,%esp
f010cd4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cd52:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cd56:	75 08                	jne    f010cd60 <__sys_allocate_page+0x2e>
		return r ;
f010cd58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd5b:	e9 e9 00 00 00       	jmp    f010ce49 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cd60:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd63:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cd68:	77 0c                	ja     f010cd76 <__sys_allocate_page+0x44>
f010cd6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd6d:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cd72:	85 c0                	test   %eax,%eax
f010cd74:	74 0a                	je     f010cd80 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cd76:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd7b:	e9 c9 00 00 00       	jmp    f010ce49 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cd80:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd83:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cd88:	83 f8 04             	cmp    $0x4,%eax
f010cd8b:	74 0a                	je     f010cd97 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cd8d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd92:	e9 b2 00 00 00       	jmp    f010ce49 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cd97:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd9a:	83 ec 0c             	sub    $0xc,%esp
f010cd9d:	50                   	push   %eax
f010cd9e:	e8 f4 fe ff ff       	call   f010cc97 <to_physical_address>
f010cda3:	83 c4 10             	add    $0x10,%esp
f010cda6:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cda9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cdac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdaf:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdb2:	6a 02                	push   $0x2
f010cdb4:	68 00 00 80 ef       	push   $0xef800000
f010cdb9:	52                   	push   %edx
f010cdba:	50                   	push   %eax
f010cdbb:	e8 81 9f ff ff       	call   f0106d41 <map_frame>
f010cdc0:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cdc3:	83 ec 04             	sub    $0x4,%esp
f010cdc6:	68 00 10 00 00       	push   $0x1000
f010cdcb:	6a 00                	push   $0x0
f010cdcd:	68 00 00 80 ef       	push   $0xef800000
f010cdd2:	e8 ba 49 02 00       	call   f0131791 <memset>
f010cdd7:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cdda:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cddd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cde0:	8b 40 08             	mov    0x8(%eax),%eax
f010cde3:	40                   	inc    %eax
f010cde4:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cde8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdee:	83 ec 08             	sub    $0x8,%esp
f010cdf1:	68 00 00 80 ef       	push   $0xef800000
f010cdf6:	50                   	push   %eax
f010cdf7:	e8 7a a0 ff ff       	call   f0106e76 <unmap_frame>
f010cdfc:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cdff:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ce02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce05:	8b 40 08             	mov    0x8(%eax),%eax
f010ce08:	48                   	dec    %eax
f010ce09:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010ce0d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce10:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ce13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce16:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ce19:	ff 75 0c             	pushl  0xc(%ebp)
f010ce1c:	51                   	push   %ecx
f010ce1d:	52                   	push   %edx
f010ce1e:	50                   	push   %eax
f010ce1f:	e8 1d 9f ff ff       	call   f0106d41 <map_frame>
f010ce24:	83 c4 10             	add    $0x10,%esp
f010ce27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ce2a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ce2e:	75 14                	jne    f010ce44 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010ce30:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce33:	83 ec 0c             	sub    $0xc,%esp
f010ce36:	50                   	push   %eax
f010ce37:	e8 45 9c ff ff       	call   f0106a81 <decrement_references>
f010ce3c:	83 c4 10             	add    $0x10,%esp
		return r;
f010ce3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce42:	eb 05                	jmp    f010ce49 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010ce44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ce49:	c9                   	leave  
f010ce4a:	c3                   	ret    

f010ce4b <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010ce4b:	55                   	push   %ebp
f010ce4c:	89 e5                	mov    %esp,%ebp
f010ce4e:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010ce51:	83 ec 04             	sub    $0x4,%esp
f010ce54:	68 41 7c 13 f0       	push   $0xf0137c41
f010ce59:	68 b3 00 00 00       	push   $0xb3
f010ce5e:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010ce63:	e8 9d 33 ff ff       	call   f0100205 <_panic>

f010ce68 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010ce68:	55                   	push   %ebp
f010ce69:	89 e5                	mov    %esp,%ebp
f010ce6b:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010ce6e:	83 ec 04             	sub    $0x4,%esp
f010ce71:	68 74 7c 13 f0       	push   $0xf0137c74
f010ce76:	68 c3 00 00 00       	push   $0xc3
f010ce7b:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010ce80:	e8 80 33 ff ff       	call   f0100205 <_panic>

f010ce85 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010ce85:	55                   	push   %ebp
f010ce86:	89 e5                	mov    %esp,%ebp
f010ce88:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010ce8b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ce90:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ce93:	83 ec 04             	sub    $0x4,%esp
f010ce96:	ff 75 0c             	pushl  0xc(%ebp)
f010ce99:	ff 75 08             	pushl  0x8(%ebp)
f010ce9c:	50                   	push   %eax
f010ce9d:	e8 a8 c1 ff ff       	call   f010904a <calculate_required_frames>
f010cea2:	83 c4 10             	add    $0x10,%esp
}
f010cea5:	c9                   	leave  
f010cea6:	c3                   	ret    

f010cea7 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cea7:	55                   	push   %ebp
f010cea8:	89 e5                	mov    %esp,%ebp
f010ceaa:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cead:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ceb0:	83 ec 0c             	sub    $0xc,%esp
f010ceb3:	50                   	push   %eax
f010ceb4:	e8 22 a1 ff ff       	call   f0106fdb <calculate_available_frames>
f010ceb9:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cebc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cec2:	01 d0                	add    %edx,%eax
}
f010cec4:	c9                   	leave  
f010cec5:	c3                   	ret    

f010cec6 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cec6:	55                   	push   %ebp
f010cec7:	89 e5                	mov    %esp,%ebp
f010cec9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cecc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cecf:	83 ec 0c             	sub    $0xc,%esp
f010ced2:	50                   	push   %eax
f010ced3:	e8 03 a1 ff ff       	call   f0106fdb <calculate_available_frames>
f010ced8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cede:	c9                   	leave  
f010cedf:	c3                   	ret    

f010cee0 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cee0:	55                   	push   %ebp
f010cee1:	89 e5                	mov    %esp,%ebp
f010cee3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cee6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cee9:	83 ec 0c             	sub    $0xc,%esp
f010ceec:	50                   	push   %eax
f010ceed:	e8 e9 a0 ff ff       	call   f0106fdb <calculate_available_frames>
f010cef2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cef8:	c9                   	leave  
f010cef9:	c3                   	ret    

f010cefa <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cefa:	55                   	push   %ebp
f010cefb:	89 e5                	mov    %esp,%ebp
f010cefd:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cf00:	83 ec 0c             	sub    $0xc,%esp
f010cf03:	ff 75 08             	pushl  0x8(%ebp)
f010cf06:	e8 a3 35 02 00       	call   f01304ae <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cf0b:	83 c4 10             	add    $0x10,%esp
}
f010cf0e:	c9                   	leave  
f010cf0f:	c3                   	ret    

f010cf10 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cf10:	55                   	push   %ebp
f010cf11:	89 e5                	mov    %esp,%ebp
f010cf13:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cf16:	e8 eb 34 02 00       	call   f0130406 <scarce_memory>
}
f010cf1b:	90                   	nop
f010cf1c:	c9                   	leave  
f010cf1d:	c3                   	ret    

f010cf1e <sys_clearFFL>:

void sys_clearFFL()
{
f010cf1e:	55                   	push   %ebp
f010cf1f:	89 e5                	mov    %esp,%ebp
f010cf21:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cf24:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f010cf29:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cf2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cf33:	eb 12                	jmp    f010cf47 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cf35:	83 ec 0c             	sub    $0xc,%esp
f010cf38:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cf3b:	50                   	push   %eax
f010cf3c:	e8 b1 99 ff ff       	call   f01068f2 <allocate_frame>
f010cf41:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cf44:	ff 45 f4             	incl   -0xc(%ebp)
f010cf47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf4a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cf4d:	7c e6                	jl     f010cf35 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cf4f:	90                   	nop
f010cf50:	c9                   	leave  
f010cf51:	c3                   	ret    

f010cf52 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cf52:	55                   	push   %ebp
f010cf53:	89 e5                	mov    %esp,%ebp
f010cf55:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cf58:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf5d:	83 ec 0c             	sub    $0xc,%esp
f010cf60:	50                   	push   %eax
f010cf61:	e8 c2 6d ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cf66:	83 c4 10             	add    $0x10,%esp
}
f010cf69:	c9                   	leave  
f010cf6a:	c3                   	ret    

f010cf6b <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cf6b:	55                   	push   %ebp
f010cf6c:	89 e5                	mov    %esp,%ebp
f010cf6e:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cf71:	e8 9a 11 00 00       	call   f010e110 <isBufferingEnabled>
f010cf76:	84 c0                	test   %al,%al
f010cf78:	74 19                	je     f010cf93 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cf7a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf7f:	83 ec 04             	sub    $0x4,%esp
f010cf82:	ff 75 0c             	pushl  0xc(%ebp)
f010cf85:	ff 75 08             	pushl  0x8(%ebp)
f010cf88:	50                   	push   %eax
f010cf89:	e8 a5 c1 ff ff       	call   f0109133 <__free_user_mem_with_buffering>
f010cf8e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cf91:	eb 18                	jmp    f010cfab <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cf93:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf98:	83 ec 04             	sub    $0x4,%esp
f010cf9b:	ff 75 0c             	pushl  0xc(%ebp)
f010cf9e:	ff 75 08             	pushl  0x8(%ebp)
f010cfa1:	50                   	push   %eax
f010cfa2:	e8 6f c1 ff ff       	call   f0109116 <free_user_mem>
f010cfa7:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cfaa:	90                   	nop
}
f010cfab:	c9                   	leave  
f010cfac:	c3                   	ret    

f010cfad <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cfad:	55                   	push   %ebp
f010cfae:	89 e5                	mov    %esp,%ebp
f010cfb0:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cfb3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cfb8:	83 ec 04             	sub    $0x4,%esp
f010cfbb:	ff 75 0c             	pushl  0xc(%ebp)
f010cfbe:	ff 75 08             	pushl  0x8(%ebp)
f010cfc1:	50                   	push   %eax
f010cfc2:	e8 32 c1 ff ff       	call   f01090f9 <allocate_user_mem>
f010cfc7:	83 c4 10             	add    $0x10,%esp
	return;
f010cfca:	90                   	nop
}
f010cfcb:	c9                   	leave  
f010cfcc:	c3                   	ret    

f010cfcd <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cfcd:	55                   	push   %ebp
f010cfce:	89 e5                	mov    %esp,%ebp
f010cfd0:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cfd3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cfd8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfdb:	ff 75 10             	pushl  0x10(%ebp)
f010cfde:	ff 75 0c             	pushl  0xc(%ebp)
f010cfe1:	ff 75 08             	pushl  0x8(%ebp)
f010cfe4:	50                   	push   %eax
f010cfe5:	e8 45 be ff ff       	call   f0108e2f <allocate_chunk>
f010cfea:	83 c4 10             	add    $0x10,%esp
	return;
f010cfed:	90                   	nop
}
f010cfee:	c9                   	leave  
f010cfef:	c3                   	ret    

f010cff0 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cff0:	55                   	push   %ebp
f010cff1:	89 e5                	mov    %esp,%ebp
f010cff3:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cff6:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cffb:	ff 75 10             	pushl  0x10(%ebp)
f010cffe:	ff 75 0c             	pushl  0xc(%ebp)
f010d001:	ff 75 08             	pushl  0x8(%ebp)
f010d004:	50                   	push   %eax
f010d005:	e8 46 c1 ff ff       	call   f0109150 <move_user_mem>
f010d00a:	83 c4 10             	add    $0x10,%esp
	return;
f010d00d:	90                   	nop
}
f010d00e:	c9                   	leave  
f010d00f:	c3                   	ret    

f010d010 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d010:	55                   	push   %ebp
f010d011:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d013:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
}
f010d018:	5d                   	pop    %ebp
f010d019:	c3                   	ret    

f010d01a <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d01a:	55                   	push   %ebp
f010d01b:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d020:	a3 30 ed 88 f0       	mov    %eax,0xf088ed30
}
f010d025:	90                   	nop
f010d026:	5d                   	pop    %ebp
f010d027:	c3                   	ret    

f010d028 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d028:	55                   	push   %ebp
f010d029:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d02b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d030:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010d036:	8b 52 38             	mov    0x38(%edx),%edx
f010d039:	80 e6 fd             	and    $0xfd,%dh
f010d03c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d03f:	90                   	nop
f010d040:	5d                   	pop    %ebp
f010d041:	c3                   	ret    

f010d042 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d042:	55                   	push   %ebp
f010d043:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d045:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d04a:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010d050:	8b 52 38             	mov    0x38(%edx),%edx
f010d053:	80 ce 02             	or     $0x2,%dh
f010d056:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d059:	90                   	nop
f010d05a:	5d                   	pop    %ebp
f010d05b:	c3                   	ret    

f010d05c <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d05c:	55                   	push   %ebp
f010d05d:	89 e5                	mov    %esp,%ebp
f010d05f:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d062:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d067:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d06a:	83 ec 04             	sub    $0x4,%esp
f010d06d:	ff 75 0c             	pushl  0xc(%ebp)
f010d070:	ff 75 08             	pushl  0x8(%ebp)
f010d073:	50                   	push   %eax
f010d074:	e8 fe 16 00 00       	call   f010e777 <createSemaphore>
f010d079:	83 c4 10             	add    $0x10,%esp
}
f010d07c:	c9                   	leave  
f010d07d:	c3                   	ret    

f010d07e <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d07e:	55                   	push   %ebp
f010d07f:	89 e5                	mov    %esp,%ebp
f010d081:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d084:	83 ec 08             	sub    $0x8,%esp
f010d087:	ff 75 0c             	pushl  0xc(%ebp)
f010d08a:	ff 75 08             	pushl  0x8(%ebp)
f010d08d:	e8 5d 17 00 00       	call   f010e7ef <waitSemaphore>
f010d092:	83 c4 10             	add    $0x10,%esp
}
f010d095:	90                   	nop
f010d096:	c9                   	leave  
f010d097:	c3                   	ret    

f010d098 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d098:	55                   	push   %ebp
f010d099:	89 e5                	mov    %esp,%ebp
f010d09b:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d09e:	83 ec 08             	sub    $0x8,%esp
f010d0a1:	ff 75 0c             	pushl  0xc(%ebp)
f010d0a4:	ff 75 08             	pushl  0x8(%ebp)
f010d0a7:	e8 f5 17 00 00       	call   f010e8a1 <signalSemaphore>
f010d0ac:	83 c4 10             	add    $0x10,%esp
}
f010d0af:	90                   	nop
f010d0b0:	c9                   	leave  
f010d0b1:	c3                   	ret    

f010d0b2 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d0b2:	55                   	push   %ebp
f010d0b3:	89 e5                	mov    %esp,%ebp
f010d0b5:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d0b8:	83 ec 08             	sub    $0x8,%esp
f010d0bb:	ff 75 0c             	pushl  0xc(%ebp)
f010d0be:	ff 75 08             	pushl  0x8(%ebp)
f010d0c1:	e8 29 15 00 00       	call   f010e5ef <get_semaphore_object_ID>
f010d0c6:	83 c4 10             	add    $0x10,%esp
f010d0c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d0cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d0d0:	78 0c                	js     f010d0de <sys_getSemaphoreValue+0x2c>
f010d0d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0d5:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010d0da:	39 c2                	cmp    %eax,%edx
f010d0dc:	72 19                	jb     f010d0f7 <sys_getSemaphoreValue+0x45>
f010d0de:	68 94 7c 13 f0       	push   $0xf0137c94
f010d0e3:	68 b9 7c 13 f0       	push   $0xf0137cb9
f010d0e8:	68 4a 01 00 00       	push   $0x14a
f010d0ed:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d0f2:	e8 0e 31 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d0f7:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010d0fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d100:	89 d0                	mov    %edx,%eax
f010d102:	c1 e0 02             	shl    $0x2,%eax
f010d105:	01 d0                	add    %edx,%eax
f010d107:	01 c0                	add    %eax,%eax
f010d109:	01 d0                	add    %edx,%eax
f010d10b:	01 c0                	add    %eax,%eax
f010d10d:	01 d0                	add    %edx,%eax
f010d10f:	c1 e0 02             	shl    $0x2,%eax
f010d112:	01 c8                	add    %ecx,%eax
f010d114:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d117:	c9                   	leave  
f010d118:	c3                   	ret    

f010d119 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d119:	55                   	push   %ebp
f010d11a:	89 e5                	mov    %esp,%ebp
f010d11c:	83 ec 18             	sub    $0x18,%esp
f010d11f:	8b 45 10             	mov    0x10(%ebp),%eax
f010d122:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d125:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d129:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d12e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d131:	83 ec 0c             	sub    $0xc,%esp
f010d134:	ff 75 14             	pushl  0x14(%ebp)
f010d137:	52                   	push   %edx
f010d138:	ff 75 0c             	pushl  0xc(%ebp)
f010d13b:	ff 75 08             	pushl  0x8(%ebp)
f010d13e:	50                   	push   %eax
f010d13f:	e8 58 a4 ff ff       	call   f010759c <createSharedObject>
f010d144:	83 c4 20             	add    $0x20,%esp
}
f010d147:	c9                   	leave  
f010d148:	c3                   	ret    

f010d149 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d149:	55                   	push   %ebp
f010d14a:	89 e5                	mov    %esp,%ebp
f010d14c:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d14f:	83 ec 08             	sub    $0x8,%esp
f010d152:	ff 75 0c             	pushl  0xc(%ebp)
f010d155:	ff 75 08             	pushl  0x8(%ebp)
f010d158:	e8 f9 a3 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010d15d:	83 c4 10             	add    $0x10,%esp
}
f010d160:	c9                   	leave  
f010d161:	c3                   	ret    

f010d162 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d162:	55                   	push   %ebp
f010d163:	89 e5                	mov    %esp,%ebp
f010d165:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d168:	83 ec 04             	sub    $0x4,%esp
f010d16b:	ff 75 10             	pushl  0x10(%ebp)
f010d16e:	ff 75 0c             	pushl  0xc(%ebp)
f010d171:	ff 75 08             	pushl  0x8(%ebp)
f010d174:	e8 3b a6 ff ff       	call   f01077b4 <getSharedObject>
f010d179:	83 c4 10             	add    $0x10,%esp
}
f010d17c:	c9                   	leave  
f010d17d:	c3                   	ret    

f010d17e <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d17e:	55                   	push   %ebp
f010d17f:	89 e5                	mov    %esp,%ebp
f010d181:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d184:	83 ec 08             	sub    $0x8,%esp
f010d187:	ff 75 0c             	pushl  0xc(%ebp)
f010d18a:	ff 75 08             	pushl  0x8(%ebp)
f010d18d:	e8 54 a7 ff ff       	call   f01078e6 <freeSharedObject>
f010d192:	83 c4 10             	add    $0x10,%esp
}
f010d195:	c9                   	leave  
f010d196:	c3                   	ret    

f010d197 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d197:	55                   	push   %ebp
f010d198:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d19a:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
}
f010d19f:	5d                   	pop    %ebp
f010d1a0:	c3                   	ret    

f010d1a1 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d1a1:	55                   	push   %ebp
f010d1a2:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d1a4:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d1a9:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d1ac:	5d                   	pop    %ebp
f010d1ad:	c3                   	ret    

f010d1ae <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d1ae:	55                   	push   %ebp
f010d1af:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d1b1:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d1b6:	89 c2                	mov    %eax,%edx
f010d1b8:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f010d1bd:	29 c2                	sub    %eax,%edx
f010d1bf:	89 d0                	mov    %edx,%eax
f010d1c1:	c1 f8 04             	sar    $0x4,%eax
f010d1c4:	89 c2                	mov    %eax,%edx
f010d1c6:	89 d0                	mov    %edx,%eax
f010d1c8:	c1 e0 03             	shl    $0x3,%eax
f010d1cb:	01 d0                	add    %edx,%eax
f010d1cd:	01 c0                	add    %eax,%eax
f010d1cf:	01 d0                	add    %edx,%eax
f010d1d1:	c1 e0 03             	shl    $0x3,%eax
f010d1d4:	01 d0                	add    %edx,%eax
f010d1d6:	89 c1                	mov    %eax,%ecx
f010d1d8:	c1 e1 08             	shl    $0x8,%ecx
f010d1db:	01 c8                	add    %ecx,%eax
f010d1dd:	01 c0                	add    %eax,%eax
f010d1df:	01 d0                	add    %edx,%eax
f010d1e1:	01 c0                	add    %eax,%eax
f010d1e3:	01 d0                	add    %edx,%eax
f010d1e5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d1ec:	01 d0                	add    %edx,%eax
f010d1ee:	89 c2                	mov    %eax,%edx
f010d1f0:	c1 e2 09             	shl    $0x9,%edx
f010d1f3:	29 c2                	sub    %eax,%edx
f010d1f5:	89 d0                	mov    %edx,%eax
f010d1f7:	f7 d8                	neg    %eax
}
f010d1f9:	5d                   	pop    %ebp
f010d1fa:	c3                   	ret    

f010d1fb <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d1fb:	55                   	push   %ebp
f010d1fc:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d1fe:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d203:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d206:	5d                   	pop    %ebp
f010d207:	c3                   	ret    

f010d208 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d208:	55                   	push   %ebp
f010d209:	89 e5                	mov    %esp,%ebp
f010d20b:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d20e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d212:	75 0a                	jne    f010d21e <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d214:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d219:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d21c:	eb 22                	jmp    f010d240 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d21e:	83 ec 04             	sub    $0x4,%esp
f010d221:	6a 00                	push   $0x0
f010d223:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d226:	50                   	push   %eax
f010d227:	ff 75 08             	pushl  0x8(%ebp)
f010d22a:	e8 e5 cb ff ff       	call   f0109e14 <envid2env>
f010d22f:	83 c4 10             	add    $0x10,%esp
f010d232:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d235:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d239:	79 05                	jns    f010d240 <sys_destroy_env+0x38>
	{
		return r;
f010d23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d23e:	eb 5e                	jmp    f010d29e <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d240:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d243:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d248:	39 c2                	cmp    %eax,%edx
f010d24a:	75 1b                	jne    f010d267 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d24c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d251:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d254:	83 ec 08             	sub    $0x8,%esp
f010d257:	50                   	push   %eax
f010d258:	68 ce 7c 13 f0       	push   $0xf0137cce
f010d25d:	e8 ac 3a ff ff       	call   f0100d0e <cprintf>
f010d262:	83 c4 10             	add    $0x10,%esp
f010d265:	eb 20                	jmp    f010d287 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d267:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d26a:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d26d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d272:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d275:	83 ec 04             	sub    $0x4,%esp
f010d278:	52                   	push   %edx
f010d279:	50                   	push   %eax
f010d27a:	68 e9 7c 13 f0       	push   $0xf0137ce9
f010d27f:	e8 8a 3a ff ff       	call   f0100d0e <cprintf>
f010d284:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d287:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d28a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d28d:	83 ec 0c             	sub    $0xc,%esp
f010d290:	50                   	push   %eax
f010d291:	e8 a9 83 ff ff       	call   f010563f <sched_kill_env>
f010d296:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d299:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d29e:	c9                   	leave  
f010d29f:	c3                   	ret    

f010d2a0 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d2a0:	55                   	push   %ebp
f010d2a1:	89 e5                	mov    %esp,%ebp
f010d2a3:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d2a6:	e8 4a cb ff ff       	call   f0109df5 <env_exit>
	//env_run_cmd_prmpt();
}
f010d2ab:	90                   	nop
f010d2ac:	c9                   	leave  
f010d2ad:	c3                   	ret    

f010d2ae <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d2ae:	55                   	push   %ebp
f010d2af:	89 e5                	mov    %esp,%ebp
f010d2b1:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d2b4:	ff 75 14             	pushl  0x14(%ebp)
f010d2b7:	ff 75 10             	pushl  0x10(%ebp)
f010d2ba:	ff 75 0c             	pushl  0xc(%ebp)
f010d2bd:	ff 75 08             	pushl  0x8(%ebp)
f010d2c0:	e8 a8 be ff ff       	call   f010916d <env_create>
f010d2c5:	83 c4 10             	add    $0x10,%esp
f010d2c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d2cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2cf:	75 07                	jne    f010d2d8 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d2d1:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d2d6:	eb 14                	jmp    f010d2ec <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d2d8:	83 ec 0c             	sub    $0xc,%esp
f010d2db:	ff 75 f4             	pushl  -0xc(%ebp)
f010d2de:	e8 21 7f ff ff       	call   f0105204 <sched_new_env>
f010d2e3:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d2e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2e9:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d2ec:	c9                   	leave  
f010d2ed:	c3                   	ret    

f010d2ee <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d2ee:	55                   	push   %ebp
f010d2ef:	89 e5                	mov    %esp,%ebp
f010d2f1:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f7:	83 ec 0c             	sub    $0xc,%esp
f010d2fa:	50                   	push   %eax
f010d2fb:	e8 21 7f ff ff       	call   f0105221 <sched_run_env>
f010d300:	83 c4 10             	add    $0x10,%esp
}
f010d303:	90                   	nop
f010d304:	c9                   	leave  
f010d305:	c3                   	ret    

f010d306 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d306:	55                   	push   %ebp
f010d307:	89 e5                	mov    %esp,%ebp
f010d309:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d30c:	0f 31                	rdtsc  
f010d30e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d311:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d317:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d31a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d31d:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d320:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d323:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d326:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d329:	89 01                	mov    %eax,(%ecx)
f010d32b:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d32e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d331:	c9                   	leave  
f010d332:	c2 04 00             	ret    $0x4

f010d335 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d335:	55                   	push   %ebp
f010d336:	89 e5                	mov    %esp,%ebp
f010d338:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d33b:	0f 20 d0             	mov    %cr2,%eax
f010d33e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d341:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d344:	90                   	nop
}
f010d345:	c9                   	leave  
f010d346:	c3                   	ret    

f010d347 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d347:	55                   	push   %ebp
f010d348:	89 e5                	mov    %esp,%ebp
f010d34a:	83 ec 04             	sub    $0x4,%esp
f010d34d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d350:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d353:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d356:	a2 a8 ec 88 f0       	mov    %al,0xf088eca8
}
f010d35b:	90                   	nop
f010d35c:	c9                   	leave  
f010d35d:	c3                   	ret    

f010d35e <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d35e:	55                   	push   %ebp
f010d35f:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d361:	c7 05 b0 ee 88 f0 00 	movl   $0x0,0xf088eeb0
f010d368:	00 00 00 
}
f010d36b:	90                   	nop
f010d36c:	5d                   	pop    %ebp
f010d36d:	c3                   	ret    

f010d36e <inctst>:
void inctst()
{
f010d36e:	55                   	push   %ebp
f010d36f:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d371:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d376:	40                   	inc    %eax
f010d377:	a3 b0 ee 88 f0       	mov    %eax,0xf088eeb0
}
f010d37c:	90                   	nop
f010d37d:	5d                   	pop    %ebp
f010d37e:	c3                   	ret    

f010d37f <gettst>:
uint32 gettst()
{
f010d37f:	55                   	push   %ebp
f010d380:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d382:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
}
f010d387:	5d                   	pop    %ebp
f010d388:	c3                   	ret    

f010d389 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d389:	55                   	push   %ebp
f010d38a:	89 e5                	mov    %esp,%ebp
f010d38c:	83 ec 28             	sub    $0x28,%esp
f010d38f:	8b 45 14             	mov    0x14(%ebp),%eax
f010d392:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d395:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d39c:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d3a0:	83 f8 65             	cmp    $0x65,%eax
f010d3a3:	74 5d                	je     f010d402 <tst+0x79>
f010d3a5:	83 f8 65             	cmp    $0x65,%eax
f010d3a8:	7f 0a                	jg     f010d3b4 <tst+0x2b>
f010d3aa:	83 f8 62             	cmp    $0x62,%eax
f010d3ad:	74 73                	je     f010d422 <tst+0x99>
f010d3af:	e9 91 00 00 00       	jmp    f010d445 <tst+0xbc>
f010d3b4:	83 f8 67             	cmp    $0x67,%eax
f010d3b7:	74 29                	je     f010d3e2 <tst+0x59>
f010d3b9:	83 f8 6c             	cmp    $0x6c,%eax
f010d3bc:	0f 85 83 00 00 00    	jne    f010d445 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d3c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d3c8:	73 09                	jae    f010d3d3 <tst+0x4a>
			chk = 1;
f010d3ca:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d3d1:	eb 68                	jmp    f010d43b <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d3d3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d3d7:	74 62                	je     f010d43b <tst+0xb2>
			chk = 1;
f010d3d9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d3e0:	eb 59                	jmp    f010d43b <tst+0xb2>
	case 'g':
		if (n > v1)
f010d3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3e5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d3e8:	76 09                	jbe    f010d3f3 <tst+0x6a>
			chk = 1;
f010d3ea:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d3f1:	eb 4b                	jmp    f010d43e <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d3f3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d3f7:	74 45                	je     f010d43e <tst+0xb5>
			chk = 1;
f010d3f9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d400:	eb 3c                	jmp    f010d43e <tst+0xb5>
	case 'e':
		if (n == v1)
f010d402:	8b 45 08             	mov    0x8(%ebp),%eax
f010d405:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d408:	75 09                	jne    f010d413 <tst+0x8a>
			chk = 1;
f010d40a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d411:	eb 2e                	jmp    f010d441 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d413:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d417:	74 28                	je     f010d441 <tst+0xb8>
			chk = 1;
f010d419:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d420:	eb 1f                	jmp    f010d441 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d422:	8b 45 08             	mov    0x8(%ebp),%eax
f010d425:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d428:	72 1a                	jb     f010d444 <tst+0xbb>
f010d42a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d42d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d430:	77 12                	ja     f010d444 <tst+0xbb>
			chk = 1;
f010d432:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d439:	eb 09                	jmp    f010d444 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d43b:	90                   	nop
f010d43c:	eb 07                	jmp    f010d445 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d43e:	90                   	nop
f010d43f:	eb 04                	jmp    f010d445 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d441:	90                   	nop
f010d442:	eb 01                	jmp    f010d445 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d444:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d449:	75 17                	jne    f010d462 <tst+0xd9>
f010d44b:	83 ec 04             	sub    $0x4,%esp
f010d44e:	68 01 7d 13 f0       	push   $0xf0137d01
f010d453:	68 00 02 00 00       	push   $0x200
f010d458:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d45d:	e8 a3 2d ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d462:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d467:	40                   	inc    %eax
f010d468:	a3 b0 ee 88 f0       	mov    %eax,0xf088eeb0
	return;
f010d46d:	90                   	nop
}
f010d46e:	c9                   	leave  
f010d46f:	c3                   	ret    

f010d470 <chktst>:

void chktst(uint32 n)
{
f010d470:	55                   	push   %ebp
f010d471:	89 e5                	mov    %esp,%ebp
f010d473:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d476:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d47b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d47e:	75 12                	jne    f010d492 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d480:	83 ec 0c             	sub    $0xc,%esp
f010d483:	68 14 7d 13 f0       	push   $0xf0137d14
f010d488:	e8 81 38 ff ff       	call   f0100d0e <cprintf>
f010d48d:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d490:	eb 17                	jmp    f010d4a9 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d492:	83 ec 04             	sub    $0x4,%esp
f010d495:	68 40 7d 13 f0       	push   $0xf0137d40
f010d49a:	68 0a 02 00 00       	push   $0x20a
f010d49f:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d4a4:	e8 5c 2d ff ff       	call   f0100205 <_panic>
}
f010d4a9:	c9                   	leave  
f010d4aa:	c3                   	ret    

f010d4ab <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d4ab:	55                   	push   %ebp
f010d4ac:	89 e5                	mov    %esp,%ebp
f010d4ae:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d4b1:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d4b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d4b9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d4c0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d4c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d4cb:	0f 84 a5 00 00 00    	je     f010d576 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d4d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d4d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4db:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d4e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4e4:	eb 4a                	jmp    f010d530 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d4e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4e9:	8b 00                	mov    (%eax),%eax
f010d4eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d4ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d4f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d4f6:	89 c2                	mov    %eax,%edx
f010d4f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4fb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d502:	8b 45 08             	mov    0x8(%ebp),%eax
f010d505:	01 c8                	add    %ecx,%eax
f010d507:	8b 00                	mov    (%eax),%eax
f010d509:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d50c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d50f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d514:	39 c2                	cmp    %eax,%edx
f010d516:	74 09                	je     f010d521 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d518:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d51f:	eb 3e                	jmp    f010d55f <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d521:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d524:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d527:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d52d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d530:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d534:	74 08                	je     f010d53e <sys_check_LRU_lists+0x93>
f010d536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d539:	8b 40 10             	mov    0x10(%eax),%eax
f010d53c:	eb 05                	jmp    f010d543 <sys_check_LRU_lists+0x98>
f010d53e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d543:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d546:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d54c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d54f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d555:	85 c0                	test   %eax,%eax
f010d557:	75 8d                	jne    f010d4e6 <sys_check_LRU_lists+0x3b>
f010d559:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d55d:	75 87                	jne    f010d4e6 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d562:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d568:	8b 45 10             	mov    0x10(%ebp),%eax
f010d56b:	39 c2                	cmp    %eax,%edx
f010d56d:	74 07                	je     f010d576 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d56f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d576:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d57a:	0f 84 a5 00 00 00    	je     f010d625 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d580:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d587:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d58a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d590:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d593:	eb 4a                	jmp    f010d5df <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d595:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d598:	8b 00                	mov    (%eax),%eax
f010d59a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d59d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d5a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5a5:	89 c2                	mov    %eax,%edx
f010d5a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5aa:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d5b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b4:	01 c8                	add    %ecx,%eax
f010d5b6:	8b 00                	mov    (%eax),%eax
f010d5b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d5bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5c3:	39 c2                	cmp    %eax,%edx
f010d5c5:	74 09                	je     f010d5d0 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d5c7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d5ce:	eb 3e                	jmp    f010d60e <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d5d0:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d5d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5d6:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d5dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d5df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5e3:	74 08                	je     f010d5ed <sys_check_LRU_lists+0x142>
f010d5e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5e8:	8b 40 10             	mov    0x10(%eax),%eax
f010d5eb:	eb 05                	jmp    f010d5f2 <sys_check_LRU_lists+0x147>
f010d5ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d5f5:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d5fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5fe:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d604:	85 c0                	test   %eax,%eax
f010d606:	75 8d                	jne    f010d595 <sys_check_LRU_lists+0xea>
f010d608:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d60c:	75 87                	jne    f010d595 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d60e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d611:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d617:	8b 45 14             	mov    0x14(%ebp),%eax
f010d61a:	39 c2                	cmp    %eax,%edx
f010d61c:	74 07                	je     f010d625 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d61e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d625:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d628:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d62b:	c9                   	leave  
f010d62c:	c3                   	ret    

f010d62d <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d62d:	55                   	push   %ebp
f010d62e:	89 e5                	mov    %esp,%ebp
f010d630:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d633:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d638:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d63b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d642:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d645:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d64b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d64e:	eb 65                	jmp    f010d6b5 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d650:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d657:	eb 3a                	jmp    f010d693 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d659:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d65c:	8b 00                	mov    (%eax),%eax
f010d65e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d661:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d664:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d669:	89 c2                	mov    %eax,%edx
f010d66b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d66e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d675:	8b 45 08             	mov    0x8(%ebp),%eax
f010d678:	01 c8                	add    %ecx,%eax
f010d67a:	8b 00                	mov    (%eax),%eax
f010d67c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d67f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d682:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d687:	39 c2                	cmp    %eax,%edx
f010d689:	75 05                	jne    f010d690 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d68b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d68e:	eb 0b                	jmp    f010d69b <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d690:	ff 45 f4             	incl   -0xc(%ebp)
f010d693:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d696:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d699:	7c be                	jl     f010d659 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d69b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d69f:	7e 08                	jle    f010d6a9 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d6a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d6a4:	e9 ed 00 00 00       	jmp    f010d796 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d6a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6ac:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6b5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d6b9:	74 08                	je     f010d6c3 <sys_check_LRU_lists_free+0x96>
f010d6bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d6be:	8b 40 10             	mov    0x10(%eax),%eax
f010d6c1:	eb 05                	jmp    f010d6c8 <sys_check_LRU_lists_free+0x9b>
f010d6c3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d6cb:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d6d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6d4:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6da:	85 c0                	test   %eax,%eax
f010d6dc:	0f 85 6e ff ff ff    	jne    f010d650 <sys_check_LRU_lists_free+0x23>
f010d6e2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d6e6:	0f 85 64 ff ff ff    	jne    f010d650 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d6ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6ef:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d6f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6f8:	eb 62                	jmp    f010d75c <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d6fa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d701:	eb 3a                	jmp    f010d73d <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d703:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d706:	8b 00                	mov    (%eax),%eax
f010d708:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d70b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d70e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d713:	89 c2                	mov    %eax,%edx
f010d715:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d718:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d71f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d722:	01 c8                	add    %ecx,%eax
f010d724:	8b 00                	mov    (%eax),%eax
f010d726:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d729:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d72c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d731:	39 c2                	cmp    %eax,%edx
f010d733:	75 05                	jne    f010d73a <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d735:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d738:	eb 0b                	jmp    f010d745 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d73a:	ff 45 f0             	incl   -0x10(%ebp)
f010d73d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d740:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d743:	7c be                	jl     f010d703 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d745:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d749:	7e 05                	jle    f010d750 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d74b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d74e:	eb 46                	jmp    f010d796 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d750:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d753:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d759:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d75c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d760:	74 08                	je     f010d76a <sys_check_LRU_lists_free+0x13d>
f010d762:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d765:	8b 40 10             	mov    0x10(%eax),%eax
f010d768:	eb 05                	jmp    f010d76f <sys_check_LRU_lists_free+0x142>
f010d76a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d76f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d772:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d778:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d77b:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d781:	85 c0                	test   %eax,%eax
f010d783:	0f 85 71 ff ff ff    	jne    f010d6fa <sys_check_LRU_lists_free+0xcd>
f010d789:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d78d:	0f 85 67 ff ff ff    	jne    f010d6fa <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d793:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d796:	c9                   	leave  
f010d797:	c3                   	ret    

f010d798 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d798:	55                   	push   %ebp
f010d799:	89 e5                	mov    %esp,%ebp
f010d79b:	56                   	push   %esi
f010d79c:	53                   	push   %ebx
f010d79d:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d7a0:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d7a4:	0f 87 0e 04 00 00    	ja     f010dbb8 <syscall+0x420>
f010d7aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7ad:	c1 e0 02             	shl    $0x2,%eax
f010d7b0:	05 5c 7d 13 f0       	add    $0xf0137d5c,%eax
f010d7b5:	8b 00                	mov    (%eax),%eax
f010d7b7:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d7b9:	8b 45 14             	mov    0x14(%ebp),%eax
f010d7bc:	0f b6 d0             	movzbl %al,%edx
f010d7bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7c2:	83 ec 04             	sub    $0x4,%esp
f010d7c5:	52                   	push   %edx
f010d7c6:	ff 75 10             	pushl  0x10(%ebp)
f010d7c9:	50                   	push   %eax
f010d7ca:	e8 db f4 ff ff       	call   f010ccaa <sys_cputs>
f010d7cf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d7:	e9 e1 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d7dc:	e8 3e f5 ff ff       	call   f010cd1f <sys_cgetc>
f010d7e1:	e9 d7 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d7e6:	83 ec 08             	sub    $0x8,%esp
f010d7e9:	ff 75 10             	pushl  0x10(%ebp)
f010d7ec:	ff 75 0c             	pushl  0xc(%ebp)
f010d7ef:	e8 91 f6 ff ff       	call   f010ce85 <sys_calculate_required_frames>
f010d7f4:	83 c4 10             	add    $0x10,%esp
f010d7f7:	e9 c1 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d7fc:	e8 a6 f6 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f010d801:	e9 b7 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d806:	e8 bb f6 ff ff       	call   f010cec6 <sys_calculate_modified_frames>
f010d80b:	e9 ad 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d810:	e8 cb f6 ff ff       	call   f010cee0 <sys_calculate_notmod_frames>
f010d815:	e9 a3 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d81a:	e8 33 f7 ff ff       	call   f010cf52 <sys_pf_calculate_allocated_pages>
f010d81f:	e9 99 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d824:	83 ec 0c             	sub    $0xc,%esp
f010d827:	ff 75 0c             	pushl  0xc(%ebp)
f010d82a:	e8 cb f6 ff ff       	call   f010cefa <sys_calculate_pages_tobe_removed_ready_exit>
f010d82f:	83 c4 10             	add    $0x10,%esp
f010d832:	e9 86 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d837:	e8 d4 f6 ff ff       	call   f010cf10 <sys_scarce_memory>
		return 0;
f010d83c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d841:	e9 77 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d846:	83 ec 08             	sub    $0x8,%esp
f010d849:	ff 75 10             	pushl  0x10(%ebp)
f010d84c:	ff 75 0c             	pushl  0xc(%ebp)
f010d84f:	e8 17 f7 ff ff       	call   f010cf6b <sys_free_user_mem>
f010d854:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d857:	b8 00 00 00 00       	mov    $0x0,%eax
f010d85c:	e9 5c 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d861:	8b 55 10             	mov    0x10(%ebp),%edx
f010d864:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d867:	83 ec 08             	sub    $0x8,%esp
f010d86a:	52                   	push   %edx
f010d86b:	50                   	push   %eax
f010d86c:	e8 c1 f4 ff ff       	call   f010cd32 <__sys_allocate_page>
f010d871:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d874:	b8 00 00 00 00       	mov    $0x0,%eax
f010d879:	e9 3f 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d87e:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d881:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d884:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d887:	8b 55 10             	mov    0x10(%ebp),%edx
f010d88a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d88d:	83 ec 0c             	sub    $0xc,%esp
f010d890:	56                   	push   %esi
f010d891:	53                   	push   %ebx
f010d892:	51                   	push   %ecx
f010d893:	52                   	push   %edx
f010d894:	50                   	push   %eax
f010d895:	e8 b1 f5 ff ff       	call   f010ce4b <__sys_map_frame>
f010d89a:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d89d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8a2:	e9 16 03 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d8a7:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8ad:	83 ec 08             	sub    $0x8,%esp
f010d8b0:	52                   	push   %edx
f010d8b1:	50                   	push   %eax
f010d8b2:	e8 b1 f5 ff ff       	call   f010ce68 <__sys_unmap_frame>
f010d8b7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8bf:	e9 f9 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d8c4:	83 ec 04             	sub    $0x4,%esp
f010d8c7:	ff 75 14             	pushl  0x14(%ebp)
f010d8ca:	ff 75 10             	pushl  0x10(%ebp)
f010d8cd:	ff 75 0c             	pushl  0xc(%ebp)
f010d8d0:	e8 f8 f6 ff ff       	call   f010cfcd <sys_allocate_chunk>
f010d8d5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8d8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8dd:	e9 db 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d8e2:	e8 41 f7 ff ff       	call   f010d028 <sys_disable_interrupt>
		return 0;
f010d8e7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8ec:	e9 cc 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d8f1:	e8 4c f7 ff ff       	call   f010d042 <sys_enable_interrupt>
		return 0;
f010d8f6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8fb:	e9 bd 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d900:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d903:	0f be c0             	movsbl %al,%eax
f010d906:	83 ec 0c             	sub    $0xc,%esp
f010d909:	50                   	push   %eax
f010d90a:	e8 ec f3 ff ff       	call   f010ccfb <sys_cputc>
f010d90f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d912:	b8 00 00 00 00       	mov    $0x0,%eax
f010d917:	e9 a1 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d91c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d91f:	0f be c0             	movsbl %al,%eax
f010d922:	83 ec 0c             	sub    $0xc,%esp
f010d925:	50                   	push   %eax
f010d926:	e8 f3 f5 ff ff       	call   f010cf1e <sys_clearFFL>
f010d92b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d92e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d933:	e9 85 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d938:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d93b:	83 ec 08             	sub    $0x8,%esp
f010d93e:	ff 75 10             	pushl  0x10(%ebp)
f010d941:	50                   	push   %eax
f010d942:	e8 15 f7 ff ff       	call   f010d05c <sys_createSemaphore>
f010d947:	83 c4 10             	add    $0x10,%esp
f010d94a:	e9 6e 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d94f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d952:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d955:	83 ec 08             	sub    $0x8,%esp
f010d958:	52                   	push   %edx
f010d959:	50                   	push   %eax
f010d95a:	e8 1f f7 ff ff       	call   f010d07e <sys_waitSemaphore>
f010d95f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d962:	b8 00 00 00 00       	mov    $0x0,%eax
f010d967:	e9 51 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d96c:	8b 55 10             	mov    0x10(%ebp),%edx
f010d96f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d972:	83 ec 08             	sub    $0x8,%esp
f010d975:	52                   	push   %edx
f010d976:	50                   	push   %eax
f010d977:	e8 1c f7 ff ff       	call   f010d098 <sys_signalSemaphore>
f010d97c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d97f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d984:	e9 34 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d989:	8b 55 10             	mov    0x10(%ebp),%edx
f010d98c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d98f:	83 ec 08             	sub    $0x8,%esp
f010d992:	52                   	push   %edx
f010d993:	50                   	push   %eax
f010d994:	e8 19 f7 ff ff       	call   f010d0b2 <sys_getSemaphoreValue>
f010d999:	83 c4 10             	add    $0x10,%esp
f010d99c:	e9 1c 02 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d9a1:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d9a4:	8b 45 14             	mov    0x14(%ebp),%eax
f010d9a7:	0f b6 d0             	movzbl %al,%edx
f010d9aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9ad:	51                   	push   %ecx
f010d9ae:	52                   	push   %edx
f010d9af:	ff 75 10             	pushl  0x10(%ebp)
f010d9b2:	50                   	push   %eax
f010d9b3:	e8 61 f7 ff ff       	call   f010d119 <sys_createSharedObject>
f010d9b8:	83 c4 10             	add    $0x10,%esp
f010d9bb:	e9 fd 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d9c0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d9c3:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9c9:	83 ec 04             	sub    $0x4,%esp
f010d9cc:	51                   	push   %ecx
f010d9cd:	52                   	push   %edx
f010d9ce:	50                   	push   %eax
f010d9cf:	e8 8e f7 ff ff       	call   f010d162 <sys_getSharedObject>
f010d9d4:	83 c4 10             	add    $0x10,%esp
f010d9d7:	e9 e1 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d9dc:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9e2:	83 ec 08             	sub    $0x8,%esp
f010d9e5:	52                   	push   %edx
f010d9e6:	50                   	push   %eax
f010d9e7:	e8 92 f7 ff ff       	call   f010d17e <sys_freeSharedObject>
f010d9ec:	83 c4 10             	add    $0x10,%esp
f010d9ef:	e9 c9 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d9f4:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9fa:	83 ec 08             	sub    $0x8,%esp
f010d9fd:	52                   	push   %edx
f010d9fe:	50                   	push   %eax
f010d9ff:	e8 45 f7 ff ff       	call   f010d149 <sys_getSizeOfSharedObject>
f010da04:	83 c4 10             	add    $0x10,%esp
f010da07:	e9 b1 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010da0c:	e8 86 f7 ff ff       	call   f010d197 <sys_getMaxShares>
f010da11:	e9 a7 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	ff 75 18             	pushl  0x18(%ebp)
f010da1c:	ff 75 14             	pushl  0x14(%ebp)
f010da1f:	ff 75 10             	pushl  0x10(%ebp)
f010da22:	50                   	push   %eax
f010da23:	e8 86 f8 ff ff       	call   f010d2ae <sys_create_env>
f010da28:	83 c4 10             	add    $0x10,%esp
f010da2b:	e9 8d 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010da30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da33:	83 ec 0c             	sub    $0xc,%esp
f010da36:	50                   	push   %eax
f010da37:	e8 b2 f8 ff ff       	call   f010d2ee <sys_run_env>
f010da3c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da3f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da44:	e9 74 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010da49:	e8 60 f7 ff ff       	call   f010d1ae <sys_getenvindex>
f010da4e:	e9 6a 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010da53:	e8 49 f7 ff ff       	call   f010d1a1 <sys_getenvid>
f010da58:	e9 60 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010da5d:	e8 99 f7 ff ff       	call   f010d1fb <sys_getparentenvid>
f010da62:	e9 56 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010da67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da6a:	83 ec 0c             	sub    $0xc,%esp
f010da6d:	50                   	push   %eax
f010da6e:	e8 95 f7 ff ff       	call   f010d208 <sys_destroy_env>
f010da73:	83 c4 10             	add    $0x10,%esp
f010da76:	e9 42 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010da7b:	e8 20 f8 ff ff       	call   f010d2a0 <sys_exit_env>
		return 0;
f010da80:	b8 00 00 00 00       	mov    $0x0,%eax
f010da85:	e9 33 01 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010da8a:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010da8d:	83 ec 0c             	sub    $0xc,%esp
f010da90:	50                   	push   %eax
f010da91:	e8 70 f8 ff ff       	call   f010d306 <sys_get_virtual_time>
f010da96:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010da99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010da9f:	8b 45 10             	mov    0x10(%ebp),%eax
f010daa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010daa5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010daa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010daab:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010daad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dab0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dab3:	89 10                	mov    %edx,(%eax)
		return 0;
f010dab5:	b8 00 00 00 00       	mov    $0x0,%eax
f010daba:	e9 fe 00 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dabf:	83 ec 04             	sub    $0x4,%esp
f010dac2:	ff 75 14             	pushl  0x14(%ebp)
f010dac5:	ff 75 10             	pushl  0x10(%ebp)
f010dac8:	ff 75 0c             	pushl  0xc(%ebp)
f010dacb:	e8 20 f5 ff ff       	call   f010cff0 <sys_move_user_mem>
f010dad0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dad3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dad8:	e9 e0 00 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dadd:	e8 53 f8 ff ff       	call   f010d335 <sys_rcr2>
f010dae2:	e9 d6 00 00 00       	jmp    f010dbbd <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dae7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daea:	0f b6 c0             	movzbl %al,%eax
f010daed:	83 ec 0c             	sub    $0xc,%esp
f010daf0:	50                   	push   %eax
f010daf1:	e8 51 f8 ff ff       	call   f010d347 <sys_bypassPageFault>
f010daf6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010daf9:	b8 00 00 00 00       	mov    $0x0,%eax
f010dafe:	e9 ba 00 00 00       	jmp    f010dbbd <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010db03:	e8 56 f8 ff ff       	call   f010d35e <rsttst>
		return 0;
f010db08:	b8 00 00 00 00       	mov    $0x0,%eax
f010db0d:	e9 ab 00 00 00       	jmp    f010dbbd <syscall+0x425>
	case SYS_inctst:
		inctst();
f010db12:	e8 57 f8 ff ff       	call   f010d36e <inctst>
		return 0;
f010db17:	b8 00 00 00 00       	mov    $0x0,%eax
f010db1c:	e9 9c 00 00 00       	jmp    f010dbbd <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010db21:	83 ec 0c             	sub    $0xc,%esp
f010db24:	ff 75 0c             	pushl  0xc(%ebp)
f010db27:	e8 44 f9 ff ff       	call   f010d470 <chktst>
f010db2c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db2f:	b8 00 00 00 00       	mov    $0x0,%eax
f010db34:	e9 84 00 00 00       	jmp    f010dbbd <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010db39:	e8 41 f8 ff ff       	call   f010d37f <gettst>
f010db3e:	eb 7d                	jmp    f010dbbd <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010db40:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010db43:	8b 45 18             	mov    0x18(%ebp),%eax
f010db46:	0f be c0             	movsbl %al,%eax
f010db49:	83 ec 0c             	sub    $0xc,%esp
f010db4c:	52                   	push   %edx
f010db4d:	50                   	push   %eax
f010db4e:	ff 75 14             	pushl  0x14(%ebp)
f010db51:	ff 75 10             	pushl  0x10(%ebp)
f010db54:	ff 75 0c             	pushl  0xc(%ebp)
f010db57:	e8 2d f8 ff ff       	call   f010d389 <tst>
f010db5c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010db5f:	b8 00 00 00 00       	mov    $0x0,%eax
f010db64:	eb 57                	jmp    f010dbbd <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010db66:	e8 a5 f4 ff ff       	call   f010d010 <sys_get_heap_strategy>
f010db6b:	eb 50                	jmp    f010dbbd <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010db6d:	83 ec 0c             	sub    $0xc,%esp
f010db70:	ff 75 0c             	pushl  0xc(%ebp)
f010db73:	e8 a2 f4 ff ff       	call   f010d01a <sys_set_uheap_strategy>
f010db78:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010db80:	eb 3b                	jmp    f010dbbd <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010db82:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010db85:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db88:	8b 55 10             	mov    0x10(%ebp),%edx
f010db8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db8e:	53                   	push   %ebx
f010db8f:	51                   	push   %ecx
f010db90:	52                   	push   %edx
f010db91:	50                   	push   %eax
f010db92:	e8 14 f9 ff ff       	call   f010d4ab <sys_check_LRU_lists>
f010db97:	83 c4 10             	add    $0x10,%esp
f010db9a:	eb 21                	jmp    f010dbbd <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010db9c:	8b 55 10             	mov    0x10(%ebp),%edx
f010db9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dba2:	83 ec 08             	sub    $0x8,%esp
f010dba5:	52                   	push   %edx
f010dba6:	50                   	push   %eax
f010dba7:	e8 81 fa ff ff       	call   f010d62d <sys_check_LRU_lists_free>
f010dbac:	83 c4 10             	add    $0x10,%esp
f010dbaf:	eb 0c                	jmp    f010dbbd <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dbb1:	b8 03 00 00 00       	mov    $0x3,%eax
f010dbb6:	eb 05                	jmp    f010dbbd <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dbb8:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dbbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dbc0:	5b                   	pop    %ebx
f010dbc1:	5e                   	pop    %esi
f010dbc2:	5d                   	pop    %ebp
f010dbc3:	c3                   	ret    

f010dbc4 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dbc4:	55                   	push   %ebp
f010dbc5:	89 e5                	mov    %esp,%ebp
f010dbc7:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dbca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbcd:	8b 00                	mov    (%eax),%eax
f010dbcf:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dbd2:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbd5:	8b 00                	mov    (%eax),%eax
f010dbd7:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dbda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dbe1:	e9 ca 00 00 00       	jmp    f010dcb0 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dbe6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dbe9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dbec:	01 d0                	add    %edx,%eax
f010dbee:	89 c2                	mov    %eax,%edx
f010dbf0:	c1 ea 1f             	shr    $0x1f,%edx
f010dbf3:	01 d0                	add    %edx,%eax
f010dbf5:	d1 f8                	sar    %eax
f010dbf7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dbfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dbfd:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dc00:	eb 03                	jmp    f010dc05 <stab_binsearch+0x41>
			m--;
f010dc02:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dc05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc08:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dc0b:	7c 1e                	jl     f010dc2b <stab_binsearch+0x67>
f010dc0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc10:	89 d0                	mov    %edx,%eax
f010dc12:	01 c0                	add    %eax,%eax
f010dc14:	01 d0                	add    %edx,%eax
f010dc16:	c1 e0 02             	shl    $0x2,%eax
f010dc19:	89 c2                	mov    %eax,%edx
f010dc1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc1e:	01 d0                	add    %edx,%eax
f010dc20:	8a 40 04             	mov    0x4(%eax),%al
f010dc23:	0f b6 c0             	movzbl %al,%eax
f010dc26:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dc29:	75 d7                	jne    f010dc02 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010dc2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc2e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dc31:	7d 09                	jge    f010dc3c <stab_binsearch+0x78>
			l = true_m + 1;
f010dc33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dc36:	40                   	inc    %eax
f010dc37:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010dc3a:	eb 74                	jmp    f010dcb0 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010dc3c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010dc43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc46:	89 d0                	mov    %edx,%eax
f010dc48:	01 c0                	add    %eax,%eax
f010dc4a:	01 d0                	add    %edx,%eax
f010dc4c:	c1 e0 02             	shl    $0x2,%eax
f010dc4f:	89 c2                	mov    %eax,%edx
f010dc51:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc54:	01 d0                	add    %edx,%eax
f010dc56:	8b 40 08             	mov    0x8(%eax),%eax
f010dc59:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dc5c:	73 11                	jae    f010dc6f <stab_binsearch+0xab>
			*region_left = m;
f010dc5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc64:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010dc66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dc69:	40                   	inc    %eax
f010dc6a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dc6d:	eb 41                	jmp    f010dcb0 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010dc6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc72:	89 d0                	mov    %edx,%eax
f010dc74:	01 c0                	add    %eax,%eax
f010dc76:	01 d0                	add    %edx,%eax
f010dc78:	c1 e0 02             	shl    $0x2,%eax
f010dc7b:	89 c2                	mov    %eax,%edx
f010dc7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	8b 40 08             	mov    0x8(%eax),%eax
f010dc85:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dc88:	76 14                	jbe    f010dc9e <stab_binsearch+0xda>
			*region_right = m - 1;
f010dc8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc8d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dc90:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc93:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010dc95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc98:	48                   	dec    %eax
f010dc99:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dc9c:	eb 12                	jmp    f010dcb0 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010dc9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dca1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dca4:	89 10                	mov    %edx,(%eax)
			l = m;
f010dca6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dca9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010dcac:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010dcb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010dcb3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dcb6:	0f 8e 2a ff ff ff    	jle    f010dbe6 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dcbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dcc0:	75 0f                	jne    f010dcd1 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dcc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcc5:	8b 00                	mov    (%eax),%eax
f010dcc7:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dcca:	8b 45 10             	mov    0x10(%ebp),%eax
f010dccd:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dccf:	eb 3d                	jmp    f010dd0e <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dcd1:	8b 45 10             	mov    0x10(%ebp),%eax
f010dcd4:	8b 00                	mov    (%eax),%eax
f010dcd6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dcd9:	eb 03                	jmp    f010dcde <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dcdb:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dcde:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dce1:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dce3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dce6:	7d 1e                	jge    f010dd06 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dce8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dceb:	89 d0                	mov    %edx,%eax
f010dced:	01 c0                	add    %eax,%eax
f010dcef:	01 d0                	add    %edx,%eax
f010dcf1:	c1 e0 02             	shl    $0x2,%eax
f010dcf4:	89 c2                	mov    %eax,%edx
f010dcf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcf9:	01 d0                	add    %edx,%eax
f010dcfb:	8a 40 04             	mov    0x4(%eax),%al
f010dcfe:	0f b6 c0             	movzbl %al,%eax
f010dd01:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dd04:	75 d5                	jne    f010dcdb <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dd06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd09:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dd0c:	89 10                	mov    %edx,(%eax)
	}
}
f010dd0e:	90                   	nop
f010dd0f:	c9                   	leave  
f010dd10:	c3                   	ret    

f010dd11 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dd11:	55                   	push   %ebp
f010dd12:	89 e5                	mov    %esp,%ebp
f010dd14:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dd17:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd1a:	c7 00 20 7e 13 f0    	movl   $0xf0137e20,(%eax)
	info->eip_line = 0;
f010dd20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd23:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dd2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd2d:	c7 40 08 20 7e 13 f0 	movl   $0xf0137e20,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dd34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd37:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010dd3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd41:	8b 55 08             	mov    0x8(%ebp),%edx
f010dd44:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010dd47:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd4a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010dd51:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd54:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010dd59:	76 1e                	jbe    f010dd79 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010dd5b:	c7 45 f4 d0 d9 13 f0 	movl   $0xf013d9d0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010dd62:	c7 45 f0 34 d8 17 f0 	movl   $0xf017d834,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010dd69:	c7 45 ec 35 d8 17 f0 	movl   $0xf017d835,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010dd70:	c7 45 e8 2a a5 18 f0 	movl   $0xf018a52a,-0x18(%ebp)
f010dd77:	eb 2a                	jmp    f010dda3 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010dd79:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010dd80:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd83:	8b 00                	mov    (%eax),%eax
f010dd85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010dd88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd8b:	8b 40 04             	mov    0x4(%eax),%eax
f010dd8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010dd91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd94:	8b 40 08             	mov    0x8(%eax),%eax
f010dd97:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dd9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd9d:	8b 40 0c             	mov    0xc(%eax),%eax
f010dda0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010dda3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dda6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dda9:	76 0a                	jbe    f010ddb5 <debuginfo_eip+0xa4>
f010ddab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ddae:	48                   	dec    %eax
f010ddaf:	8a 00                	mov    (%eax),%al
f010ddb1:	84 c0                	test   %al,%al
f010ddb3:	74 0a                	je     f010ddbf <debuginfo_eip+0xae>
		return -1;
f010ddb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010ddba:	e9 01 02 00 00       	jmp    f010dfc0 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010ddbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ddc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddcc:	29 c2                	sub    %eax,%edx
f010ddce:	89 d0                	mov    %edx,%eax
f010ddd0:	c1 f8 02             	sar    $0x2,%eax
f010ddd3:	89 c2                	mov    %eax,%edx
f010ddd5:	89 d0                	mov    %edx,%eax
f010ddd7:	c1 e0 02             	shl    $0x2,%eax
f010ddda:	01 d0                	add    %edx,%eax
f010dddc:	c1 e0 02             	shl    $0x2,%eax
f010dddf:	01 d0                	add    %edx,%eax
f010dde1:	c1 e0 02             	shl    $0x2,%eax
f010dde4:	01 d0                	add    %edx,%eax
f010dde6:	89 c1                	mov    %eax,%ecx
f010dde8:	c1 e1 08             	shl    $0x8,%ecx
f010ddeb:	01 c8                	add    %ecx,%eax
f010dded:	89 c1                	mov    %eax,%ecx
f010ddef:	c1 e1 10             	shl    $0x10,%ecx
f010ddf2:	01 c8                	add    %ecx,%eax
f010ddf4:	01 c0                	add    %eax,%eax
f010ddf6:	01 d0                	add    %edx,%eax
f010ddf8:	48                   	dec    %eax
f010ddf9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010ddfc:	ff 75 08             	pushl  0x8(%ebp)
f010ddff:	6a 64                	push   $0x64
f010de01:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010de04:	50                   	push   %eax
f010de05:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010de08:	50                   	push   %eax
f010de09:	ff 75 f4             	pushl  -0xc(%ebp)
f010de0c:	e8 b3 fd ff ff       	call   f010dbc4 <stab_binsearch>
f010de11:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010de14:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de17:	85 c0                	test   %eax,%eax
f010de19:	75 0a                	jne    f010de25 <debuginfo_eip+0x114>
		return -1;
f010de1b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010de20:	e9 9b 01 00 00       	jmp    f010dfc0 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010de25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de28:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010de2b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010de2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010de31:	ff 75 08             	pushl  0x8(%ebp)
f010de34:	6a 24                	push   $0x24
f010de36:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010de39:	50                   	push   %eax
f010de3a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010de3d:	50                   	push   %eax
f010de3e:	ff 75 f4             	pushl  -0xc(%ebp)
f010de41:	e8 7e fd ff ff       	call   f010dbc4 <stab_binsearch>
f010de46:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010de49:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010de4c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010de4f:	39 c2                	cmp    %eax,%edx
f010de51:	0f 8f 86 00 00 00    	jg     f010dedd <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010de57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de5a:	89 c2                	mov    %eax,%edx
f010de5c:	89 d0                	mov    %edx,%eax
f010de5e:	01 c0                	add    %eax,%eax
f010de60:	01 d0                	add    %edx,%eax
f010de62:	c1 e0 02             	shl    $0x2,%eax
f010de65:	89 c2                	mov    %eax,%edx
f010de67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de6a:	01 d0                	add    %edx,%eax
f010de6c:	8b 00                	mov    (%eax),%eax
f010de6e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010de71:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de74:	29 d1                	sub    %edx,%ecx
f010de76:	89 ca                	mov    %ecx,%edx
f010de78:	39 d0                	cmp    %edx,%eax
f010de7a:	73 22                	jae    f010de9e <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010de7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de7f:	89 c2                	mov    %eax,%edx
f010de81:	89 d0                	mov    %edx,%eax
f010de83:	01 c0                	add    %eax,%eax
f010de85:	01 d0                	add    %edx,%eax
f010de87:	c1 e0 02             	shl    $0x2,%eax
f010de8a:	89 c2                	mov    %eax,%edx
f010de8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de8f:	01 d0                	add    %edx,%eax
f010de91:	8b 10                	mov    (%eax),%edx
f010de93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de96:	01 c2                	add    %eax,%edx
f010de98:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de9b:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010de9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dea1:	89 c2                	mov    %eax,%edx
f010dea3:	89 d0                	mov    %edx,%eax
f010dea5:	01 c0                	add    %eax,%eax
f010dea7:	01 d0                	add    %edx,%eax
f010dea9:	c1 e0 02             	shl    $0x2,%eax
f010deac:	89 c2                	mov    %eax,%edx
f010deae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010deb1:	01 d0                	add    %edx,%eax
f010deb3:	8b 50 08             	mov    0x8(%eax),%edx
f010deb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deb9:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010debc:	8b 55 08             	mov    0x8(%ebp),%edx
f010debf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec2:	8b 40 10             	mov    0x10(%eax),%eax
f010dec5:	29 c2                	sub    %eax,%edx
f010dec7:	89 d0                	mov    %edx,%eax
f010dec9:	c1 f8 02             	sar    $0x2,%eax
f010decc:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010decf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ded2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010ded5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ded8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dedb:	eb 15                	jmp    f010def2 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dedd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dee0:	8b 55 08             	mov    0x8(%ebp),%edx
f010dee3:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dee6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dee9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010deec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010deef:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010def2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def5:	8b 40 08             	mov    0x8(%eax),%eax
f010def8:	83 ec 08             	sub    $0x8,%esp
f010defb:	6a 3a                	push   $0x3a
f010defd:	50                   	push   %eax
f010defe:	e8 62 38 02 00       	call   f0131765 <strfind>
f010df03:	83 c4 10             	add    $0x10,%esp
f010df06:	89 c2                	mov    %eax,%edx
f010df08:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df0b:	8b 40 08             	mov    0x8(%eax),%eax
f010df0e:	29 c2                	sub    %eax,%edx
f010df10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df13:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010df16:	eb 03                	jmp    f010df1b <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010df18:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010df1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df1e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010df21:	7c 4e                	jl     f010df71 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010df23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df26:	89 d0                	mov    %edx,%eax
f010df28:	01 c0                	add    %eax,%eax
f010df2a:	01 d0                	add    %edx,%eax
f010df2c:	c1 e0 02             	shl    $0x2,%eax
f010df2f:	89 c2                	mov    %eax,%edx
f010df31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df34:	01 d0                	add    %edx,%eax
f010df36:	8a 40 04             	mov    0x4(%eax),%al
f010df39:	3c 84                	cmp    $0x84,%al
f010df3b:	74 34                	je     f010df71 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010df3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df40:	89 d0                	mov    %edx,%eax
f010df42:	01 c0                	add    %eax,%eax
f010df44:	01 d0                	add    %edx,%eax
f010df46:	c1 e0 02             	shl    $0x2,%eax
f010df49:	89 c2                	mov    %eax,%edx
f010df4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df4e:	01 d0                	add    %edx,%eax
f010df50:	8a 40 04             	mov    0x4(%eax),%al
f010df53:	3c 64                	cmp    $0x64,%al
f010df55:	75 c1                	jne    f010df18 <debuginfo_eip+0x207>
f010df57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df5a:	89 d0                	mov    %edx,%eax
f010df5c:	01 c0                	add    %eax,%eax
f010df5e:	01 d0                	add    %edx,%eax
f010df60:	c1 e0 02             	shl    $0x2,%eax
f010df63:	89 c2                	mov    %eax,%edx
f010df65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df68:	01 d0                	add    %edx,%eax
f010df6a:	8b 40 08             	mov    0x8(%eax),%eax
f010df6d:	85 c0                	test   %eax,%eax
f010df6f:	74 a7                	je     f010df18 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010df71:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df74:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010df77:	7c 42                	jl     f010dfbb <debuginfo_eip+0x2aa>
f010df79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df7c:	89 d0                	mov    %edx,%eax
f010df7e:	01 c0                	add    %eax,%eax
f010df80:	01 d0                	add    %edx,%eax
f010df82:	c1 e0 02             	shl    $0x2,%eax
f010df85:	89 c2                	mov    %eax,%edx
f010df87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df8a:	01 d0                	add    %edx,%eax
f010df8c:	8b 00                	mov    (%eax),%eax
f010df8e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010df91:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010df94:	29 d1                	sub    %edx,%ecx
f010df96:	89 ca                	mov    %ecx,%edx
f010df98:	39 d0                	cmp    %edx,%eax
f010df9a:	73 1f                	jae    f010dfbb <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010df9c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df9f:	89 d0                	mov    %edx,%eax
f010dfa1:	01 c0                	add    %eax,%eax
f010dfa3:	01 d0                	add    %edx,%eax
f010dfa5:	c1 e0 02             	shl    $0x2,%eax
f010dfa8:	89 c2                	mov    %eax,%edx
f010dfaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dfad:	01 d0                	add    %edx,%eax
f010dfaf:	8b 10                	mov    (%eax),%edx
f010dfb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dfb4:	01 c2                	add    %eax,%edx
f010dfb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfb9:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dfbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfc0:	c9                   	leave  
f010dfc1:	c3                   	ret    

f010dfc2 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dfc2:	55                   	push   %ebp
f010dfc3:	89 e5                	mov    %esp,%ebp
f010dfc5:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dfc8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dfcc:	74 1c                	je     f010dfea <setPageReplacmentAlgorithmLRU+0x28>
f010dfce:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dfd2:	74 16                	je     f010dfea <setPageReplacmentAlgorithmLRU+0x28>
f010dfd4:	68 2c 7e 13 f0       	push   $0xf0137e2c
f010dfd9:	68 76 7e 13 f0       	push   $0xf0137e76
f010dfde:	6a 18                	push   $0x18
f010dfe0:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010dfe5:	e8 1b 22 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dfea:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfed:	a3 88 ed 88 f0       	mov    %eax,0xf088ed88
}
f010dff2:	90                   	nop
f010dff3:	c9                   	leave  
f010dff4:	c3                   	ret    

f010dff5 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dff5:	55                   	push   %ebp
f010dff6:	89 e5                	mov    %esp,%ebp
f010dff8:	c7 05 88 ed 88 f0 03 	movl   $0x3,0xf088ed88
f010dfff:	00 00 00 
f010e002:	90                   	nop
f010e003:	5d                   	pop    %ebp
f010e004:	c3                   	ret    

f010e005 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e005:	55                   	push   %ebp
f010e006:	89 e5                	mov    %esp,%ebp
f010e008:	c7 05 88 ed 88 f0 04 	movl   $0x4,0xf088ed88
f010e00f:	00 00 00 
f010e012:	90                   	nop
f010e013:	5d                   	pop    %ebp
f010e014:	c3                   	ret    

f010e015 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e015:	55                   	push   %ebp
f010e016:	89 e5                	mov    %esp,%ebp
f010e018:	c7 05 88 ed 88 f0 05 	movl   $0x5,0xf088ed88
f010e01f:	00 00 00 
f010e022:	90                   	nop
f010e023:	5d                   	pop    %ebp
f010e024:	c3                   	ret    

f010e025 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e025:	55                   	push   %ebp
f010e026:	89 e5                	mov    %esp,%ebp
f010e028:	c7 05 88 ed 88 f0 07 	movl   $0x7,0xf088ed88
f010e02f:	00 00 00 
f010e032:	90                   	nop
f010e033:	5d                   	pop    %ebp
f010e034:	c3                   	ret    

f010e035 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e035:	55                   	push   %ebp
f010e036:	89 e5                	mov    %esp,%ebp
f010e038:	c7 05 88 ed 88 f0 06 	movl   $0x6,0xf088ed88
f010e03f:	00 00 00 
f010e042:	8b 45 08             	mov    0x8(%ebp),%eax
f010e045:	a3 e4 ec 88 f0       	mov    %eax,0xf088ece4
f010e04a:	90                   	nop
f010e04b:	5d                   	pop    %ebp
f010e04c:	c3                   	ret    

f010e04d <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e04d:	55                   	push   %ebp
f010e04e:	89 e5                	mov    %esp,%ebp
f010e050:	8b 15 88 ed 88 f0    	mov    0xf088ed88,%edx
f010e056:	8b 45 08             	mov    0x8(%ebp),%eax
f010e059:	39 c2                	cmp    %eax,%edx
f010e05b:	0f 94 c0             	sete   %al
f010e05e:	0f b6 c0             	movzbl %al,%eax
f010e061:	5d                   	pop    %ebp
f010e062:	c3                   	ret    

f010e063 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e063:	55                   	push   %ebp
f010e064:	89 e5                	mov    %esp,%ebp
f010e066:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e06b:	83 f8 03             	cmp    $0x3,%eax
f010e06e:	75 07                	jne    f010e077 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e070:	b8 01 00 00 00       	mov    $0x1,%eax
f010e075:	eb 05                	jmp    f010e07c <isPageReplacmentAlgorithmCLOCK+0x19>
f010e077:	b8 00 00 00 00       	mov    $0x0,%eax
f010e07c:	5d                   	pop    %ebp
f010e07d:	c3                   	ret    

f010e07e <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e07e:	55                   	push   %ebp
f010e07f:	89 e5                	mov    %esp,%ebp
f010e081:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e086:	83 f8 04             	cmp    $0x4,%eax
f010e089:	75 07                	jne    f010e092 <isPageReplacmentAlgorithmFIFO+0x14>
f010e08b:	b8 01 00 00 00       	mov    $0x1,%eax
f010e090:	eb 05                	jmp    f010e097 <isPageReplacmentAlgorithmFIFO+0x19>
f010e092:	b8 00 00 00 00       	mov    $0x0,%eax
f010e097:	5d                   	pop    %ebp
f010e098:	c3                   	ret    

f010e099 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e099:	55                   	push   %ebp
f010e09a:	89 e5                	mov    %esp,%ebp
f010e09c:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e0a1:	83 f8 05             	cmp    $0x5,%eax
f010e0a4:	75 07                	jne    f010e0ad <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e0a6:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0ab:	eb 05                	jmp    f010e0b2 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e0ad:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0b2:	5d                   	pop    %ebp
f010e0b3:	c3                   	ret    

f010e0b4 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e0b4:	55                   	push   %ebp
f010e0b5:	89 e5                	mov    %esp,%ebp
f010e0b7:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e0bc:	83 f8 07             	cmp    $0x7,%eax
f010e0bf:	75 07                	jne    f010e0c8 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e0c1:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0c6:	eb 05                	jmp    f010e0cd <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e0c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0cd:	5d                   	pop    %ebp
f010e0ce:	c3                   	ret    

f010e0cf <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e0cf:	55                   	push   %ebp
f010e0d0:	89 e5                	mov    %esp,%ebp
f010e0d2:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e0d7:	83 f8 06             	cmp    $0x6,%eax
f010e0da:	75 07                	jne    f010e0e3 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e0dc:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0e1:	eb 05                	jmp    f010e0e8 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e0e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0e8:	5d                   	pop    %ebp
f010e0e9:	c3                   	ret    

f010e0ea <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e0ea:	55                   	push   %ebp
f010e0eb:	89 e5                	mov    %esp,%ebp
f010e0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0f0:	a3 50 ed 88 f0       	mov    %eax,0xf088ed50
f010e0f5:	90                   	nop
f010e0f6:	5d                   	pop    %ebp
f010e0f7:	c3                   	ret    

f010e0f8 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e0f8:	55                   	push   %ebp
f010e0f9:	89 e5                	mov    %esp,%ebp
f010e0fb:	a1 50 ed 88 f0       	mov    0xf088ed50,%eax
f010e100:	5d                   	pop    %ebp
f010e101:	c3                   	ret    

f010e102 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e102:	55                   	push   %ebp
f010e103:	89 e5                	mov    %esp,%ebp
f010e105:	8b 45 08             	mov    0x8(%ebp),%eax
f010e108:	a3 90 ed 88 f0       	mov    %eax,0xf088ed90
f010e10d:	90                   	nop
f010e10e:	5d                   	pop    %ebp
f010e10f:	c3                   	ret    

f010e110 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e110:	55                   	push   %ebp
f010e111:	89 e5                	mov    %esp,%ebp
f010e113:	a1 90 ed 88 f0       	mov    0xf088ed90,%eax
f010e118:	5d                   	pop    %ebp
f010e119:	c3                   	ret    

f010e11a <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e11a:	55                   	push   %ebp
f010e11b:	89 e5                	mov    %esp,%ebp
f010e11d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e120:	a3 b0 ed 88 f0       	mov    %eax,0xf088edb0
f010e125:	90                   	nop
f010e126:	5d                   	pop    %ebp
f010e127:	c3                   	ret    

f010e128 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e128:	55                   	push   %ebp
f010e129:	89 e5                	mov    %esp,%ebp
f010e12b:	a1 b0 ed 88 f0       	mov    0xf088edb0,%eax
f010e130:	5d                   	pop    %ebp
f010e131:	c3                   	ret    

f010e132 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e132:	55                   	push   %ebp
f010e133:	89 e5                	mov    %esp,%ebp
f010e135:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e138:	8b 45 08             	mov    0x8(%ebp),%eax
f010e13b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e13e:	83 ec 08             	sub    $0x8,%esp
f010e141:	ff 75 0c             	pushl  0xc(%ebp)
f010e144:	50                   	push   %eax
f010e145:	e8 bd 8a ff ff       	call   f0106c07 <create_page_table>
f010e14a:	83 c4 10             	add    $0x10,%esp
f010e14d:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e150:	90                   	nop
f010e151:	c9                   	leave  
f010e152:	c3                   	ret    

f010e153 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e153:	55                   	push   %ebp
f010e154:	89 e5                	mov    %esp,%ebp
f010e156:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010e159:	83 ec 0c             	sub    $0xc,%esp
f010e15c:	ff 75 08             	pushl  0x8(%ebp)
f010e15f:	e8 bc 9f ff ff       	call   f0108120 <env_page_ws_get_size>
f010e164:	83 c4 10             	add    $0x10,%esp
f010e167:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010e16a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e16d:	8b 40 74             	mov    0x74(%eax),%eax
f010e170:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e173:	0f 85 56 01 00 00    	jne    f010e2cf <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010e179:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010e180:	8b 45 08             	mov    0x8(%ebp),%eax
f010e183:	8b 48 78             	mov    0x78(%eax),%ecx
f010e186:	8b 45 08             	mov    0x8(%ebp),%eax
f010e189:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e18f:	89 d0                	mov    %edx,%eax
f010e191:	01 c0                	add    %eax,%eax
f010e193:	01 d0                	add    %edx,%eax
f010e195:	c1 e0 03             	shl    $0x3,%eax
f010e198:	01 c8                	add    %ecx,%eax
f010e19a:	8b 10                	mov    (%eax),%edx
f010e19c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e19f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1a2:	83 ec 08             	sub    $0x8,%esp
f010e1a5:	52                   	push   %edx
f010e1a6:	50                   	push   %eax
f010e1a7:	e8 bf 9d ff ff       	call   f0107f6b <pt_get_page_permissions>
f010e1ac:	83 c4 10             	add    $0x10,%esp
f010e1af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010e1b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e1b5:	83 e0 20             	and    $0x20,%eax
f010e1b8:	85 c0                	test   %eax,%eax
f010e1ba:	74 46                	je     f010e202 <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010e1bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1bf:	8b 48 78             	mov    0x78(%eax),%ecx
f010e1c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1c5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e1cb:	89 d0                	mov    %edx,%eax
f010e1cd:	01 c0                	add    %eax,%eax
f010e1cf:	01 d0                	add    %edx,%eax
f010e1d1:	c1 e0 03             	shl    $0x3,%eax
f010e1d4:	01 c8                	add    %ecx,%eax
f010e1d6:	8b 10                	mov    (%eax),%edx
f010e1d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1db:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1de:	6a 20                	push   $0x20
f010e1e0:	6a 00                	push   $0x0
f010e1e2:	52                   	push   %edx
f010e1e3:	50                   	push   %eax
f010e1e4:	e8 ce 9c ff ff       	call   f0107eb7 <pt_set_page_permissions>
f010e1e9:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e1ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1ef:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e1f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1f8:	8b 40 74             	mov    0x74(%eax),%eax
f010e1fb:	48                   	dec    %eax
f010e1fc:	39 c2                	cmp    %eax,%edx
f010e1fe:	75 7b                	jne    f010e27b <page_fault_handler+0x128>
f010e200:	eb 67                	jmp    f010e269 <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e202:	8b 45 08             	mov    0x8(%ebp),%eax
f010e205:	8b 48 78             	mov    0x78(%eax),%ecx
f010e208:	8b 45 08             	mov    0x8(%ebp),%eax
f010e20b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e211:	89 d0                	mov    %edx,%eax
f010e213:	01 c0                	add    %eax,%eax
f010e215:	01 d0                	add    %edx,%eax
f010e217:	c1 e0 03             	shl    $0x3,%eax
f010e21a:	01 c8                	add    %ecx,%eax
f010e21c:	8b 00                	mov    (%eax),%eax
f010e21e:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010e221:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e222:	8b 45 08             	mov    0x8(%ebp),%eax
f010e225:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e228:	83 ec 08             	sub    $0x8,%esp
f010e22b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e22e:	50                   	push   %eax
f010e22f:	e8 37 9d ff ff       	call   f0107f6b <pt_get_page_permissions>
f010e234:	83 c4 10             	add    $0x10,%esp
f010e237:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010e23a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e241:	8b 45 08             	mov    0x8(%ebp),%eax
f010e244:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e247:	83 ec 04             	sub    $0x4,%esp
f010e24a:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010e24d:	52                   	push   %edx
f010e24e:	ff 75 f0             	pushl  -0x10(%ebp)
f010e251:	50                   	push   %eax
f010e252:	e8 af 8b ff ff       	call   f0106e06 <get_frame_info>
f010e257:	83 c4 10             	add    $0x10,%esp
f010e25a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e25d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e260:	83 e0 40             	and    $0x40,%eax
f010e263:	85 c0                	test   %eax,%eax
f010e265:	74 42                	je     f010e2a9 <page_fault_handler+0x156>
f010e267:	eb 2c                	jmp    f010e295 <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e269:	8b 45 08             	mov    0x8(%ebp),%eax
f010e26c:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e273:	00 00 00 
f010e276:	e9 05 ff ff ff       	jmp    f010e180 <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010e27b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e27e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e284:	8d 50 01             	lea    0x1(%eax),%edx
f010e287:	8b 45 08             	mov    0x8(%ebp),%eax
f010e28a:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e290:	e9 eb fe ff ff       	jmp    f010e180 <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e295:	83 ec 04             	sub    $0x4,%esp
f010e298:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e29b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e29e:	ff 75 08             	pushl  0x8(%ebp)
f010e2a1:	e8 32 55 ff ff       	call   f01037d8 <pf_update_env_page>
f010e2a6:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010e2a9:	83 ec 08             	sub    $0x8,%esp
f010e2ac:	ff 75 f0             	pushl  -0x10(%ebp)
f010e2af:	ff 75 08             	pushl  0x8(%ebp)
f010e2b2:	e8 b2 9e ff ff       	call   f0108169 <env_page_ws_invalidate>
f010e2b7:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010e2ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2bd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2c0:	83 ec 08             	sub    $0x8,%esp
f010e2c3:	ff 75 f0             	pushl  -0x10(%ebp)
f010e2c6:	50                   	push   %eax
f010e2c7:	e8 aa 8b ff ff       	call   f0106e76 <unmap_frame>
f010e2cc:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010e2cf:	83 ec 0c             	sub    $0xc,%esp
f010e2d2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e2d5:	50                   	push   %eax
f010e2d6:	e8 17 86 ff ff       	call   f01068f2 <allocate_frame>
f010e2db:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010e2de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010e2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2e4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2e7:	6a 06                	push   $0x6
f010e2e9:	ff 75 0c             	pushl  0xc(%ebp)
f010e2ec:	52                   	push   %edx
f010e2ed:	50                   	push   %eax
f010e2ee:	e8 4e 8a ff ff       	call   f0106d41 <map_frame>
f010e2f3:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010e2f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2f9:	83 ec 08             	sub    $0x8,%esp
f010e2fc:	50                   	push   %eax
f010e2fd:	ff 75 08             	pushl  0x8(%ebp)
f010e300:	e8 35 57 ff ff       	call   f0103a3a <pf_read_env_page>
f010e305:	83 c4 10             	add    $0x10,%esp
f010e308:	89 45 e0             	mov    %eax,-0x20(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e30b:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e30f:	75 54                	jne    f010e365 <page_fault_handler+0x212>
		{
			if(
f010e311:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e318:	77 27                	ja     f010e341 <page_fault_handler+0x1ee>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e31a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e321:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e324:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e329:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e32c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e32f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e334:	f7 75 dc             	divl   -0x24(%ebp)
f010e337:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e33a:	29 d0                	sub    %edx,%eax
f010e33c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e33f:	76 24                	jbe    f010e365 <page_fault_handler+0x212>
f010e341:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e348:	77 07                	ja     f010e351 <page_fault_handler+0x1fe>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e34a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e34d:	85 c0                	test   %eax,%eax
f010e34f:	78 14                	js     f010e365 <page_fault_handler+0x212>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e351:	83 ec 04             	sub    $0x4,%esp
f010e354:	68 a5 7e 13 f0       	push   $0xf0137ea5
f010e359:	6a 7c                	push   $0x7c
f010e35b:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010e360:	e8 a0 1e ff ff       	call   f0100205 <_panic>
		}
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e365:	8b 45 08             	mov    0x8(%ebp),%eax
f010e368:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e36e:	83 ec 04             	sub    $0x4,%esp
f010e371:	ff 75 0c             	pushl  0xc(%ebp)
f010e374:	50                   	push   %eax
f010e375:	ff 75 08             	pushl  0x8(%ebp)
f010e378:	e8 57 9e ff ff       	call   f01081d4 <env_page_ws_set_entry>
f010e37d:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e380:	8b 45 08             	mov    0x8(%ebp),%eax
f010e383:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e389:	8d 50 01             	lea    0x1(%eax),%edx
f010e38c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e38f:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e395:	8b 45 08             	mov    0x8(%ebp),%eax
f010e398:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e39e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3a1:	8b 40 74             	mov    0x74(%eax),%eax
f010e3a4:	39 c2                	cmp    %eax,%edx
f010e3a6:	75 0d                	jne    f010e3b5 <page_fault_handler+0x262>
			curenv->page_last_WS_index = 0;
f010e3a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ab:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e3b2:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e3b5:	90                   	nop
f010e3b6:	c9                   	leave  
f010e3b7:	c3                   	ret    

f010e3b8 <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e3b8:	55                   	push   %ebp
f010e3b9:	89 e5                	mov    %esp,%ebp
f010e3bb:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e3be:	83 ec 04             	sub    $0x4,%esp
f010e3c1:	68 bc 7e 13 f0       	push   $0xf0137ebc
f010e3c6:	68 88 00 00 00       	push   $0x88
f010e3cb:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010e3d0:	e8 30 1e ff ff       	call   f0100205 <_panic>

f010e3d5 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e3d5:	55                   	push   %ebp
f010e3d6:	89 e5                	mov    %esp,%ebp
f010e3d8:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e3db:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3de:	a3 b4 ec 88 f0       	mov    %eax,0xf088ecb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e3e3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3e6:	89 d0                	mov    %edx,%eax
f010e3e8:	c1 e0 02             	shl    $0x2,%eax
f010e3eb:	01 d0                	add    %edx,%eax
f010e3ed:	01 c0                	add    %eax,%eax
f010e3ef:	01 d0                	add    %edx,%eax
f010e3f1:	01 c0                	add    %eax,%eax
f010e3f3:	01 d0                	add    %edx,%eax
f010e3f5:	c1 e0 02             	shl    $0x2,%eax
f010e3f8:	83 ec 0c             	sub    $0xc,%esp
f010e3fb:	50                   	push   %eax
f010e3fc:	e8 8e 97 ff ff       	call   f0107b8f <kmalloc>
f010e401:	83 c4 10             	add    $0x10,%esp
f010e404:	a3 0c ed 88 f0       	mov    %eax,0xf088ed0c
	if (semaphores == NULL)
f010e409:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e40e:	85 c0                	test   %eax,%eax
f010e410:	75 14                	jne    f010e426 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e412:	83 ec 04             	sub    $0x4,%esp
f010e415:	68 00 7f 13 f0       	push   $0xf0137f00
f010e41a:	6a 1e                	push   $0x1e
f010e41c:	68 40 7f 13 f0       	push   $0xf0137f40
f010e421:	e8 df 1d ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e426:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e42d:	e9 bd 00 00 00       	jmp    f010e4ef <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e432:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e438:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e43b:	89 d0                	mov    %edx,%eax
f010e43d:	c1 e0 02             	shl    $0x2,%eax
f010e440:	01 d0                	add    %edx,%eax
f010e442:	01 c0                	add    %eax,%eax
f010e444:	01 d0                	add    %edx,%eax
f010e446:	01 c0                	add    %eax,%eax
f010e448:	01 d0                	add    %edx,%eax
f010e44a:	c1 e0 02             	shl    $0x2,%eax
f010e44d:	01 c8                	add    %ecx,%eax
f010e44f:	83 ec 04             	sub    $0x4,%esp
f010e452:	6a 5c                	push   $0x5c
f010e454:	6a 00                	push   $0x0
f010e456:	50                   	push   %eax
f010e457:	e8 35 33 02 00       	call   f0131791 <memset>
f010e45c:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e45f:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e465:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e468:	89 d0                	mov    %edx,%eax
f010e46a:	c1 e0 02             	shl    $0x2,%eax
f010e46d:	01 d0                	add    %edx,%eax
f010e46f:	01 c0                	add    %eax,%eax
f010e471:	01 d0                	add    %edx,%eax
f010e473:	01 c0                	add    %eax,%eax
f010e475:	01 d0                	add    %edx,%eax
f010e477:	c1 e0 02             	shl    $0x2,%eax
f010e47a:	01 c8                	add    %ecx,%eax
f010e47c:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e480:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e486:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e489:	89 d0                	mov    %edx,%eax
f010e48b:	c1 e0 02             	shl    $0x2,%eax
f010e48e:	01 d0                	add    %edx,%eax
f010e490:	01 c0                	add    %eax,%eax
f010e492:	01 d0                	add    %edx,%eax
f010e494:	01 c0                	add    %eax,%eax
f010e496:	01 d0                	add    %edx,%eax
f010e498:	c1 e0 02             	shl    $0x2,%eax
f010e49b:	01 c8                	add    %ecx,%eax
f010e49d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e4a4:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e4aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4ad:	89 d0                	mov    %edx,%eax
f010e4af:	c1 e0 02             	shl    $0x2,%eax
f010e4b2:	01 d0                	add    %edx,%eax
f010e4b4:	01 c0                	add    %eax,%eax
f010e4b6:	01 d0                	add    %edx,%eax
f010e4b8:	01 c0                	add    %eax,%eax
f010e4ba:	01 d0                	add    %edx,%eax
f010e4bc:	c1 e0 02             	shl    $0x2,%eax
f010e4bf:	01 c8                	add    %ecx,%eax
f010e4c1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e4c8:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e4ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4d1:	89 d0                	mov    %edx,%eax
f010e4d3:	c1 e0 02             	shl    $0x2,%eax
f010e4d6:	01 d0                	add    %edx,%eax
f010e4d8:	01 c0                	add    %eax,%eax
f010e4da:	01 d0                	add    %edx,%eax
f010e4dc:	01 c0                	add    %eax,%eax
f010e4de:	01 d0                	add    %edx,%eax
f010e4e0:	c1 e0 02             	shl    $0x2,%eax
f010e4e3:	01 c8                	add    %ecx,%eax
f010e4e5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e4ec:	ff 45 f4             	incl   -0xc(%ebp)
f010e4ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4f2:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e4f7:	39 c2                	cmp    %eax,%edx
f010e4f9:	0f 82 33 ff ff ff    	jb     f010e432 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e4ff:	90                   	nop
f010e500:	c9                   	leave  
f010e501:	c3                   	ret    

f010e502 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e502:	55                   	push   %ebp
f010e503:	89 e5                	mov    %esp,%ebp
f010e505:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e508:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e50f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e516:	eb 2f                	jmp    f010e547 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e518:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e51e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e521:	89 d0                	mov    %edx,%eax
f010e523:	c1 e0 02             	shl    $0x2,%eax
f010e526:	01 d0                	add    %edx,%eax
f010e528:	01 c0                	add    %eax,%eax
f010e52a:	01 d0                	add    %edx,%eax
f010e52c:	01 c0                	add    %eax,%eax
f010e52e:	01 d0                	add    %edx,%eax
f010e530:	c1 e0 02             	shl    $0x2,%eax
f010e533:	01 c8                	add    %ecx,%eax
f010e535:	8a 40 58             	mov    0x58(%eax),%al
f010e538:	84 c0                	test   %al,%al
f010e53a:	74 08                	je     f010e544 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e53c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e53f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e542:	eb 0f                	jmp    f010e553 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e544:	ff 45 f0             	incl   -0x10(%ebp)
f010e547:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e54a:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e54f:	39 c2                	cmp    %eax,%edx
f010e551:	72 c5                	jb     f010e518 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e553:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e557:	75 4d                	jne    f010e5a6 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e559:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e55e:	01 c0                	add    %eax,%eax
f010e560:	89 c2                	mov    %eax,%edx
f010e562:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e567:	83 ec 08             	sub    $0x8,%esp
f010e56a:	52                   	push   %edx
f010e56b:	50                   	push   %eax
f010e56c:	e8 de 98 ff ff       	call   f0107e4f <krealloc>
f010e571:	83 c4 10             	add    $0x10,%esp
f010e574:	a3 0c ed 88 f0       	mov    %eax,0xf088ed0c
			if (semaphores == NULL)
f010e579:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e57e:	85 c0                	test   %eax,%eax
f010e580:	75 10                	jne    f010e592 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e582:	8b 45 08             	mov    0x8(%ebp),%eax
f010e585:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e58b:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e590:	eb 5b                	jmp    f010e5ed <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e592:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e597:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e59a:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e59f:	01 c0                	add    %eax,%eax
f010e5a1:	a3 b4 ec 88 f0       	mov    %eax,0xf088ecb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e5a6:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e5ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5af:	89 d0                	mov    %edx,%eax
f010e5b1:	c1 e0 02             	shl    $0x2,%eax
f010e5b4:	01 d0                	add    %edx,%eax
f010e5b6:	01 c0                	add    %eax,%eax
f010e5b8:	01 d0                	add    %edx,%eax
f010e5ba:	01 c0                	add    %eax,%eax
f010e5bc:	01 d0                	add    %edx,%eax
f010e5be:	c1 e0 02             	shl    $0x2,%eax
f010e5c1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e5c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5c7:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e5c9:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e5cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5d2:	89 d0                	mov    %edx,%eax
f010e5d4:	c1 e0 02             	shl    $0x2,%eax
f010e5d7:	01 d0                	add    %edx,%eax
f010e5d9:	01 c0                	add    %eax,%eax
f010e5db:	01 d0                	add    %edx,%eax
f010e5dd:	01 c0                	add    %eax,%eax
f010e5df:	01 d0                	add    %edx,%eax
f010e5e1:	c1 e0 02             	shl    $0x2,%eax
f010e5e4:	01 c8                	add    %ecx,%eax
f010e5e6:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e5ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e5ed:	c9                   	leave  
f010e5ee:	c3                   	ret    

f010e5ef <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e5ef:	55                   	push   %ebp
f010e5f0:	89 e5                	mov    %esp,%ebp
f010e5f2:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e5f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e5fc:	e9 84 00 00 00       	jmp    f010e685 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e601:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e607:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e60a:	89 d0                	mov    %edx,%eax
f010e60c:	c1 e0 02             	shl    $0x2,%eax
f010e60f:	01 d0                	add    %edx,%eax
f010e611:	01 c0                	add    %eax,%eax
f010e613:	01 d0                	add    %edx,%eax
f010e615:	01 c0                	add    %eax,%eax
f010e617:	01 d0                	add    %edx,%eax
f010e619:	c1 e0 02             	shl    $0x2,%eax
f010e61c:	01 c8                	add    %ecx,%eax
f010e61e:	8a 40 58             	mov    0x58(%eax),%al
f010e621:	84 c0                	test   %al,%al
f010e623:	75 5c                	jne    f010e681 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e625:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e62b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e62e:	89 d0                	mov    %edx,%eax
f010e630:	c1 e0 02             	shl    $0x2,%eax
f010e633:	01 d0                	add    %edx,%eax
f010e635:	01 c0                	add    %eax,%eax
f010e637:	01 d0                	add    %edx,%eax
f010e639:	01 c0                	add    %eax,%eax
f010e63b:	01 d0                	add    %edx,%eax
f010e63d:	c1 e0 02             	shl    $0x2,%eax
f010e640:	01 c8                	add    %ecx,%eax
f010e642:	8b 00                	mov    (%eax),%eax
f010e644:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e647:	75 39                	jne    f010e682 <get_semaphore_object_ID+0x93>
f010e649:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e64f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e652:	89 d0                	mov    %edx,%eax
f010e654:	c1 e0 02             	shl    $0x2,%eax
f010e657:	01 d0                	add    %edx,%eax
f010e659:	01 c0                	add    %eax,%eax
f010e65b:	01 d0                	add    %edx,%eax
f010e65d:	01 c0                	add    %eax,%eax
f010e65f:	01 d0                	add    %edx,%eax
f010e661:	c1 e0 02             	shl    $0x2,%eax
f010e664:	01 c8                	add    %ecx,%eax
f010e666:	83 c0 04             	add    $0x4,%eax
f010e669:	83 ec 08             	sub    $0x8,%esp
f010e66c:	50                   	push   %eax
f010e66d:	ff 75 0c             	pushl  0xc(%ebp)
f010e670:	e8 3a 30 02 00       	call   f01316af <strcmp>
f010e675:	83 c4 10             	add    $0x10,%esp
f010e678:	85 c0                	test   %eax,%eax
f010e67a:	75 06                	jne    f010e682 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e67c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e67f:	eb 19                	jmp    f010e69a <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e681:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e682:	ff 45 f4             	incl   -0xc(%ebp)
f010e685:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e688:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e68d:	39 c2                	cmp    %eax,%edx
f010e68f:	0f 82 6c ff ff ff    	jb     f010e601 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e695:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e69a:	c9                   	leave  
f010e69b:	c3                   	ret    

f010e69c <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e69c:	55                   	push   %ebp
f010e69d:	89 e5                	mov    %esp,%ebp
f010e69f:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e6a2:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e6a7:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e6aa:	72 0a                	jb     f010e6b6 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e6ac:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e6b1:	e9 bf 00 00 00       	jmp    f010e775 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e6b6:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e6bc:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6bf:	89 d0                	mov    %edx,%eax
f010e6c1:	c1 e0 02             	shl    $0x2,%eax
f010e6c4:	01 d0                	add    %edx,%eax
f010e6c6:	01 c0                	add    %eax,%eax
f010e6c8:	01 d0                	add    %edx,%eax
f010e6ca:	01 c0                	add    %eax,%eax
f010e6cc:	01 d0                	add    %edx,%eax
f010e6ce:	c1 e0 02             	shl    $0x2,%eax
f010e6d1:	01 c8                	add    %ecx,%eax
f010e6d3:	83 ec 04             	sub    $0x4,%esp
f010e6d6:	6a 5c                	push   $0x5c
f010e6d8:	6a 00                	push   $0x0
f010e6da:	50                   	push   %eax
f010e6db:	e8 b1 30 02 00       	call   f0131791 <memset>
f010e6e0:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e6e3:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e6e9:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6ec:	89 d0                	mov    %edx,%eax
f010e6ee:	c1 e0 02             	shl    $0x2,%eax
f010e6f1:	01 d0                	add    %edx,%eax
f010e6f3:	01 c0                	add    %eax,%eax
f010e6f5:	01 d0                	add    %edx,%eax
f010e6f7:	01 c0                	add    %eax,%eax
f010e6f9:	01 d0                	add    %edx,%eax
f010e6fb:	c1 e0 02             	shl    $0x2,%eax
f010e6fe:	01 c8                	add    %ecx,%eax
f010e700:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e704:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e70a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e70d:	89 d0                	mov    %edx,%eax
f010e70f:	c1 e0 02             	shl    $0x2,%eax
f010e712:	01 d0                	add    %edx,%eax
f010e714:	01 c0                	add    %eax,%eax
f010e716:	01 d0                	add    %edx,%eax
f010e718:	01 c0                	add    %eax,%eax
f010e71a:	01 d0                	add    %edx,%eax
f010e71c:	c1 e0 02             	shl    $0x2,%eax
f010e71f:	01 c8                	add    %ecx,%eax
f010e721:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e728:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e72e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e731:	89 d0                	mov    %edx,%eax
f010e733:	c1 e0 02             	shl    $0x2,%eax
f010e736:	01 d0                	add    %edx,%eax
f010e738:	01 c0                	add    %eax,%eax
f010e73a:	01 d0                	add    %edx,%eax
f010e73c:	01 c0                	add    %eax,%eax
f010e73e:	01 d0                	add    %edx,%eax
f010e740:	c1 e0 02             	shl    $0x2,%eax
f010e743:	01 c8                	add    %ecx,%eax
f010e745:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e74c:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e752:	8b 55 08             	mov    0x8(%ebp),%edx
f010e755:	89 d0                	mov    %edx,%eax
f010e757:	c1 e0 02             	shl    $0x2,%eax
f010e75a:	01 d0                	add    %edx,%eax
f010e75c:	01 c0                	add    %eax,%eax
f010e75e:	01 d0                	add    %edx,%eax
f010e760:	01 c0                	add    %eax,%eax
f010e762:	01 d0                	add    %edx,%eax
f010e764:	c1 e0 02             	shl    $0x2,%eax
f010e767:	01 c8                	add    %ecx,%eax
f010e769:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e770:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e775:	c9                   	leave  
f010e776:	c3                   	ret    

f010e777 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e777:	55                   	push   %ebp
f010e778:	89 e5                	mov    %esp,%ebp
f010e77a:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010e77d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e784:	83 ec 08             	sub    $0x8,%esp
f010e787:	ff 75 0c             	pushl  0xc(%ebp)
f010e78a:	ff 75 08             	pushl  0x8(%ebp)
f010e78d:	e8 5d fe ff ff       	call   f010e5ef <get_semaphore_object_ID>
f010e792:	83 c4 10             	add    $0x10,%esp
f010e795:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010e798:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010e79c:	75 43                	jne    f010e7e1 <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010e79e:	83 ec 0c             	sub    $0xc,%esp
f010e7a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e7a4:	50                   	push   %eax
f010e7a5:	e8 58 fd ff ff       	call   f010e502 <allocate_semaphore_object>
f010e7aa:	83 c4 10             	add    $0x10,%esp
f010e7ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010e7b0:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e7b4:	74 32                	je     f010e7e8 <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010e7b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7b9:	83 c0 04             	add    $0x4,%eax
f010e7bc:	83 ec 08             	sub    $0x8,%esp
f010e7bf:	ff 75 0c             	pushl  0xc(%ebp)
f010e7c2:	50                   	push   %eax
f010e7c3:	e8 2a 2e 02 00       	call   f01315f2 <strcpy>
f010e7c8:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010e7cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7ce:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7d1:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010e7d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7d6:	8b 55 10             	mov    0x10(%ebp),%edx
f010e7d9:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010e7dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e7df:	eb 0c                	jmp    f010e7ed <createSemaphore+0x76>
			}

		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010e7e1:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e7e6:	eb 05                	jmp    f010e7ed <createSemaphore+0x76>
		}

		return E_NO_SEMAPHORE;
f010e7e8:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010e7ed:	c9                   	leave  
f010e7ee:	c3                   	ret    

f010e7ef <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e7ef:	55                   	push   %ebp
f010e7f0:	89 e5                	mov    %esp,%ebp
f010e7f2:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e7f5:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010e7fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e7fd:	83 ec 08             	sub    $0x8,%esp
f010e800:	ff 75 0c             	pushl  0xc(%ebp)
f010e803:	ff 75 08             	pushl  0x8(%ebp)
f010e806:	e8 e4 fd ff ff       	call   f010e5ef <get_semaphore_object_ID>
f010e80b:	83 c4 10             	add    $0x10,%esp
f010e80e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		semaphores[return_of_get].value--;
f010e811:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e817:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e81a:	89 d0                	mov    %edx,%eax
f010e81c:	c1 e0 02             	shl    $0x2,%eax
f010e81f:	01 d0                	add    %edx,%eax
f010e821:	01 c0                	add    %eax,%eax
f010e823:	01 d0                	add    %edx,%eax
f010e825:	01 c0                	add    %eax,%eax
f010e827:	01 d0                	add    %edx,%eax
f010e829:	c1 e0 02             	shl    $0x2,%eax
f010e82c:	01 c8                	add    %ecx,%eax
f010e82e:	8b 50 54             	mov    0x54(%eax),%edx
f010e831:	4a                   	dec    %edx
f010e832:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<0)
f010e835:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e83b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e83e:	89 d0                	mov    %edx,%eax
f010e840:	c1 e0 02             	shl    $0x2,%eax
f010e843:	01 d0                	add    %edx,%eax
f010e845:	01 c0                	add    %eax,%eax
f010e847:	01 d0                	add    %edx,%eax
f010e849:	01 c0                	add    %eax,%eax
f010e84b:	01 d0                	add    %edx,%eax
f010e84d:	c1 e0 02             	shl    $0x2,%eax
f010e850:	01 c8                	add    %ecx,%eax
f010e852:	8b 40 54             	mov    0x54(%eax),%eax
f010e855:	85 c0                	test   %eax,%eax
f010e857:	79 43                	jns    f010e89c <waitSemaphore+0xad>
		{
			enqueue(&semaphores[return_of_get].env_queue,myenv);
f010e859:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e85f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e862:	89 d0                	mov    %edx,%eax
f010e864:	c1 e0 02             	shl    $0x2,%eax
f010e867:	01 d0                	add    %edx,%eax
f010e869:	01 c0                	add    %eax,%eax
f010e86b:	01 d0                	add    %edx,%eax
f010e86d:	01 c0                	add    %eax,%eax
f010e86f:	01 d0                	add    %edx,%eax
f010e871:	c1 e0 02             	shl    $0x2,%eax
f010e874:	01 c8                	add    %ecx,%eax
f010e876:	83 c0 44             	add    $0x44,%eax
f010e879:	83 ec 08             	sub    $0x8,%esp
f010e87c:	ff 75 f4             	pushl  -0xc(%ebp)
f010e87f:	50                   	push   %eax
f010e880:	e8 18 5c ff ff       	call   f010449d <enqueue>
f010e885:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010e888:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e88b:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			//curenv->env_status=ENV_BLOCKED;
			curenv=NULL;
f010e892:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f010e899:	00 00 00 
		}
		fos_scheduler();
f010e89c:	e8 85 5e ff ff       	call   f0104726 <fos_scheduler>

f010e8a1 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e8a1:	55                   	push   %ebp
f010e8a2:	89 e5                	mov    %esp,%ebp
f010e8a4:	83 ec 18             	sub    $0x18,%esp
	//		c) changing its status to ENV_READY


	    //uint32 val=0;
		struct Env* env;
		int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e8a7:	83 ec 08             	sub    $0x8,%esp
f010e8aa:	ff 75 0c             	pushl  0xc(%ebp)
f010e8ad:	ff 75 08             	pushl  0x8(%ebp)
f010e8b0:	e8 3a fd ff ff       	call   f010e5ef <get_semaphore_object_ID>
f010e8b5:	83 c4 10             	add    $0x10,%esp
f010e8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		semaphores[return_of_get].value++;
f010e8bb:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e8c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8c4:	89 d0                	mov    %edx,%eax
f010e8c6:	c1 e0 02             	shl    $0x2,%eax
f010e8c9:	01 d0                	add    %edx,%eax
f010e8cb:	01 c0                	add    %eax,%eax
f010e8cd:	01 d0                	add    %edx,%eax
f010e8cf:	01 c0                	add    %eax,%eax
f010e8d1:	01 d0                	add    %edx,%eax
f010e8d3:	c1 e0 02             	shl    $0x2,%eax
f010e8d6:	01 c8                	add    %ecx,%eax
f010e8d8:	8b 50 54             	mov    0x54(%eax),%edx
f010e8db:	42                   	inc    %edx
f010e8dc:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<=0)
f010e8df:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e8e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8e8:	89 d0                	mov    %edx,%eax
f010e8ea:	c1 e0 02             	shl    $0x2,%eax
f010e8ed:	01 d0                	add    %edx,%eax
f010e8ef:	01 c0                	add    %eax,%eax
f010e8f1:	01 d0                	add    %edx,%eax
f010e8f3:	01 c0                	add    %eax,%eax
f010e8f5:	01 d0                	add    %edx,%eax
f010e8f7:	c1 e0 02             	shl    $0x2,%eax
f010e8fa:	01 c8                	add    %ecx,%eax
f010e8fc:	8b 40 54             	mov    0x54(%eax),%eax
f010e8ff:	85 c0                	test   %eax,%eax
f010e901:	7f 47                	jg     f010e94a <signalSemaphore+0xa9>
		{
			env=dequeue(&semaphores[return_of_get].env_queue);
f010e903:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e90c:	89 d0                	mov    %edx,%eax
f010e90e:	c1 e0 02             	shl    $0x2,%eax
f010e911:	01 d0                	add    %edx,%eax
f010e913:	01 c0                	add    %eax,%eax
f010e915:	01 d0                	add    %edx,%eax
f010e917:	01 c0                	add    %eax,%eax
f010e919:	01 d0                	add    %edx,%eax
f010e91b:	c1 e0 02             	shl    $0x2,%eax
f010e91e:	01 c8                	add    %ecx,%eax
f010e920:	83 c0 44             	add    $0x44,%eax
f010e923:	83 ec 0c             	sub    $0xc,%esp
f010e926:	50                   	push   %eax
f010e927:	e8 02 5c ff ff       	call   f010452e <dequeue>
f010e92c:	83 c4 10             	add    $0x10,%esp
f010e92f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			sched_insert_ready(env);
f010e932:	83 ec 0c             	sub    $0xc,%esp
f010e935:	ff 75 f0             	pushl  -0x10(%ebp)
f010e938:	e8 0f 60 ff ff       	call   f010494c <sched_insert_ready>
f010e93d:	83 c4 10             	add    $0x10,%esp
			env->env_status=ENV_READY;
f010e940:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e943:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)





}
f010e94a:	90                   	nop
f010e94b:	c9                   	leave  
f010e94c:	c3                   	ret    

f010e94d <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e94d:	55                   	push   %ebp
f010e94e:	89 e5                	mov    %esp,%ebp
f010e950:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e953:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e95a:	83 ec 0c             	sub    $0xc,%esp
f010e95d:	ff 75 ec             	pushl  -0x14(%ebp)
f010e960:	e8 a8 37 02 00       	call   f013210d <initialize_MemBlocksList>
f010e965:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e968:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010e96d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e970:	74 17                	je     f010e989 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e972:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010e977:	50                   	push   %eax
f010e978:	68 60 7f 13 f0       	push   $0xf0137f60
f010e97d:	6a 1f                	push   $0x1f
f010e97f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010e984:	e8 7c 18 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e989:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010e98e:	85 c0                	test   %eax,%eax
f010e990:	74 17                	je     f010e9a9 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e992:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010e997:	50                   	push   %eax
f010e998:	68 d8 7f 13 f0       	push   $0xf0137fd8
f010e99d:	6a 26                	push   $0x26
f010e99f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010e9a4:	e8 5c 18 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e9a9:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010e9ae:	85 c0                	test   %eax,%eax
f010e9b0:	74 17                	je     f010e9c9 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e9b2:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010e9b7:	50                   	push   %eax
f010e9b8:	68 28 80 13 f0       	push   $0xf0138028
f010e9bd:	6a 2c                	push   $0x2c
f010e9bf:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010e9c4:	e8 3c 18 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e9c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e9d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e9d7:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f010e9dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e9df:	eb 29                	jmp    f010ea0a <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e9e1:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e9e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9e7:	8b 50 0c             	mov    0xc(%eax),%edx
f010e9ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9ed:	8b 40 08             	mov    0x8(%eax),%eax
f010e9f0:	83 ec 04             	sub    $0x4,%esp
f010e9f3:	52                   	push   %edx
f010e9f4:	50                   	push   %eax
f010e9f5:	68 78 80 13 f0       	push   $0xf0138078
f010e9fa:	e8 0f 23 ff ff       	call   f0100d0e <cprintf>
f010e9ff:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ea02:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f010ea07:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ea0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea0e:	74 07                	je     f010ea17 <test_initialize_MemBlocksList+0xca>
f010ea10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea13:	8b 00                	mov    (%eax),%eax
f010ea15:	eb 05                	jmp    f010ea1c <test_initialize_MemBlocksList+0xcf>
f010ea17:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea1c:	a3 a0 ed 88 f0       	mov    %eax,0xf088eda0
f010ea21:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f010ea26:	85 c0                	test   %eax,%eax
f010ea28:	75 b7                	jne    f010e9e1 <test_initialize_MemBlocksList+0x94>
f010ea2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea2e:	75 b1                	jne    f010e9e1 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ea30:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ea35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea38:	74 14                	je     f010ea4e <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ea3a:	83 ec 04             	sub    $0x4,%esp
f010ea3d:	68 98 80 13 f0       	push   $0xf0138098
f010ea42:	6a 38                	push   $0x38
f010ea44:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ea49:	e8 b7 17 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ea4e:	83 ec 0c             	sub    $0xc,%esp
f010ea51:	68 f0 80 13 f0       	push   $0xf01380f0
f010ea56:	e8 b3 22 ff ff       	call   f0100d0e <cprintf>
f010ea5b:	83 c4 10             	add    $0x10,%esp
}
f010ea5e:	90                   	nop
f010ea5f:	c9                   	leave  
f010ea60:	c3                   	ret    

f010ea61 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010ea61:	55                   	push   %ebp
f010ea62:	89 e5                	mov    %esp,%ebp
f010ea64:	57                   	push   %edi
f010ea65:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010ea6b:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ea72:	83 ec 0c             	sub    $0xc,%esp
f010ea75:	ff 75 f4             	pushl  -0xc(%ebp)
f010ea78:	e8 90 36 02 00       	call   f013210d <initialize_MemBlocksList>
f010ea7d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ea80:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010ea87:	00 00 00 
f010ea8a:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010ea91:	00 00 00 
f010ea94:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010ea9b:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010ea9e:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010eaa5:	00 00 00 
f010eaa8:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010eaaf:	00 00 00 
f010eab2:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010eab9:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010eabc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010eabf:	b9 05 00 00 00       	mov    $0x5,%ecx
f010eac4:	b8 00 00 00 00       	mov    $0x0,%eax
f010eac9:	89 d7                	mov    %edx,%edi
f010eacb:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010eacd:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ead0:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ead5:	b8 00 00 00 00       	mov    $0x0,%eax
f010eada:	89 d7                	mov    %edx,%edi
f010eadc:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010eade:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010eae5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010eaec:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010eaf3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010eafa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eafd:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010eb00:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb03:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010eb06:	83 ec 0c             	sub    $0xc,%esp
f010eb09:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb0c:	50                   	push   %eax
f010eb0d:	e8 30 37 02 00       	call   f0132242 <insert_sorted_allocList>
f010eb12:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010eb15:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eb1c:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010eb21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb24:	74 14                	je     f010eb3a <test_insert_sorted_allocList+0xd9>
f010eb26:	83 ec 04             	sub    $0x4,%esp
f010eb29:	68 3c 81 13 f0       	push   $0xf013813c
f010eb2e:	6a 56                	push   $0x56
f010eb30:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010eb35:	e8 cb 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eb3a:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010eb3f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eb42:	74 14                	je     f010eb58 <test_insert_sorted_allocList+0xf7>
f010eb44:	83 ec 04             	sub    $0x4,%esp
f010eb47:	68 88 81 13 f0       	push   $0xf0138188
f010eb4c:	6a 59                	push   $0x59
f010eb4e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010eb53:	e8 ad 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eb58:	83 ec 0c             	sub    $0xc,%esp
f010eb5b:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb5e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eb61:	50                   	push   %eax
f010eb62:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eb65:	50                   	push   %eax
f010eb66:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eb69:	50                   	push   %eax
f010eb6a:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010eb6f:	e8 7d 26 00 00       	call   f01111f1 <check_list_data>
f010eb74:	83 c4 20             	add    $0x20,%esp
f010eb77:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eb7a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eb7e:	74 14                	je     f010eb94 <test_insert_sorted_allocList+0x133>
f010eb80:	83 ec 04             	sub    $0x4,%esp
f010eb83:	68 d8 81 13 f0       	push   $0xf01381d8
f010eb88:	6a 5d                	push   $0x5d
f010eb8a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010eb8f:	e8 71 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eb94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb9a:	74 14                	je     f010ebb0 <test_insert_sorted_allocList+0x14f>
f010eb9c:	83 ec 04             	sub    $0x4,%esp
f010eb9f:	68 28 82 13 f0       	push   $0xf0138228
f010eba4:	6a 5e                	push   $0x5e
f010eba6:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ebab:	e8 55 16 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010ebb0:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010ebb7:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010ebbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ebc1:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010ebc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ebc7:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ebca:	83 ec 0c             	sub    $0xc,%esp
f010ebcd:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ebd0:	50                   	push   %eax
f010ebd1:	e8 6c 36 02 00       	call   f0132242 <insert_sorted_allocList>
f010ebd6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ebd9:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ebe0:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ebe5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ebe8:	74 14                	je     f010ebfe <test_insert_sorted_allocList+0x19d>
f010ebea:	83 ec 04             	sub    $0x4,%esp
f010ebed:	68 3c 81 13 f0       	push   $0xf013813c
f010ebf2:	6a 6d                	push   $0x6d
f010ebf4:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ebf9:	e8 07 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ebfe:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ec03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec06:	74 14                	je     f010ec1c <test_insert_sorted_allocList+0x1bb>
f010ec08:	83 ec 04             	sub    $0x4,%esp
f010ec0b:	68 88 81 13 f0       	push   $0xf0138188
f010ec10:	6a 70                	push   $0x70
f010ec12:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ec17:	e8 e9 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ec1c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ec23:	83 ec 0c             	sub    $0xc,%esp
f010ec26:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec29:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ec2c:	50                   	push   %eax
f010ec2d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ec30:	50                   	push   %eax
f010ec31:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ec34:	50                   	push   %eax
f010ec35:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010ec3a:	e8 b2 25 00 00       	call   f01111f1 <check_list_data>
f010ec3f:	83 c4 20             	add    $0x20,%esp
f010ec42:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ec45:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ec49:	74 14                	je     f010ec5f <test_insert_sorted_allocList+0x1fe>
f010ec4b:	83 ec 04             	sub    $0x4,%esp
f010ec4e:	68 d8 81 13 f0       	push   $0xf01381d8
f010ec53:	6a 75                	push   $0x75
f010ec55:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ec5a:	e8 a6 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ec5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ec62:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec65:	74 14                	je     f010ec7b <test_insert_sorted_allocList+0x21a>
f010ec67:	83 ec 04             	sub    $0x4,%esp
f010ec6a:	68 28 82 13 f0       	push   $0xf0138228
f010ec6f:	6a 76                	push   $0x76
f010ec71:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ec76:	e8 8a 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010ec7b:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010ec82:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010ec89:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ec8c:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010ec8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ec92:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010ec95:	83 ec 0c             	sub    $0xc,%esp
f010ec98:	8d 45 90             	lea    -0x70(%ebp),%eax
f010ec9b:	50                   	push   %eax
f010ec9c:	e8 a1 35 02 00       	call   f0132242 <insert_sorted_allocList>
f010eca1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010eca4:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ecab:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ecb0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecb3:	74 17                	je     f010eccc <test_insert_sorted_allocList+0x26b>
f010ecb5:	83 ec 04             	sub    $0x4,%esp
f010ecb8:	68 3c 81 13 f0       	push   $0xf013813c
f010ecbd:	68 85 00 00 00       	push   $0x85
f010ecc2:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ecc7:	e8 39 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010eccc:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ecd1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ecd4:	74 17                	je     f010eced <test_insert_sorted_allocList+0x28c>
f010ecd6:	83 ec 04             	sub    $0x4,%esp
f010ecd9:	68 74 82 13 f0       	push   $0xf0138274
f010ecde:	68 88 00 00 00       	push   $0x88
f010ece3:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ece8:	e8 18 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eced:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ecf4:	83 ec 0c             	sub    $0xc,%esp
f010ecf7:	ff 75 f0             	pushl  -0x10(%ebp)
f010ecfa:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ecfd:	50                   	push   %eax
f010ecfe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ed01:	50                   	push   %eax
f010ed02:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ed05:	50                   	push   %eax
f010ed06:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010ed0b:	e8 e1 24 00 00       	call   f01111f1 <check_list_data>
f010ed10:	83 c4 20             	add    $0x20,%esp
f010ed13:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ed16:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ed1a:	74 17                	je     f010ed33 <test_insert_sorted_allocList+0x2d2>
f010ed1c:	83 ec 04             	sub    $0x4,%esp
f010ed1f:	68 d8 81 13 f0       	push   $0xf01381d8
f010ed24:	68 8d 00 00 00       	push   $0x8d
f010ed29:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ed2e:	e8 d2 14 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ed33:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ed36:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed39:	74 17                	je     f010ed52 <test_insert_sorted_allocList+0x2f1>
f010ed3b:	83 ec 04             	sub    $0x4,%esp
f010ed3e:	68 28 82 13 f0       	push   $0xf0138228
f010ed43:	68 8e 00 00 00       	push   $0x8e
f010ed48:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ed4d:	e8 b3 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ed52:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ed59:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ed60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ed63:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ed66:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed69:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010ed6c:	83 ec 0c             	sub    $0xc,%esp
f010ed6f:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ed72:	50                   	push   %eax
f010ed73:	e8 ca 34 02 00       	call   f0132242 <insert_sorted_allocList>
f010ed78:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ed7b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ed82:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ed87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed8a:	74 17                	je     f010eda3 <test_insert_sorted_allocList+0x342>
f010ed8c:	83 ec 04             	sub    $0x4,%esp
f010ed8f:	68 3c 81 13 f0       	push   $0xf013813c
f010ed94:	68 9c 00 00 00       	push   $0x9c
f010ed99:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ed9e:	e8 62 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eda3:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010eda8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010edab:	74 17                	je     f010edc4 <test_insert_sorted_allocList+0x363>
f010edad:	83 ec 04             	sub    $0x4,%esp
f010edb0:	68 88 81 13 f0       	push   $0xf0138188
f010edb5:	68 9f 00 00 00       	push   $0x9f
f010edba:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010edbf:	e8 41 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010edc4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010edcb:	83 ec 0c             	sub    $0xc,%esp
f010edce:	ff 75 f0             	pushl  -0x10(%ebp)
f010edd1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010edd4:	50                   	push   %eax
f010edd5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010edd8:	50                   	push   %eax
f010edd9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eddc:	50                   	push   %eax
f010eddd:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010ede2:	e8 0a 24 00 00       	call   f01111f1 <check_list_data>
f010ede7:	83 c4 20             	add    $0x20,%esp
f010edea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eded:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010edf1:	74 17                	je     f010ee0a <test_insert_sorted_allocList+0x3a9>
f010edf3:	83 ec 04             	sub    $0x4,%esp
f010edf6:	68 d8 81 13 f0       	push   $0xf01381d8
f010edfb:	68 a4 00 00 00       	push   $0xa4
f010ee00:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ee05:	e8 fb 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ee0a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ee0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee10:	74 17                	je     f010ee29 <test_insert_sorted_allocList+0x3c8>
f010ee12:	83 ec 04             	sub    $0x4,%esp
f010ee15:	68 28 82 13 f0       	push   $0xf0138228
f010ee1a:	68 a5 00 00 00       	push   $0xa5
f010ee1f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ee24:	e8 dc 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ee29:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ee30:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ee37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee3a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010ee40:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ee43:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010ee49:	83 ec 0c             	sub    $0xc,%esp
f010ee4c:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010ee52:	50                   	push   %eax
f010ee53:	e8 ea 33 02 00       	call   f0132242 <insert_sorted_allocList>
f010ee58:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010ee5b:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ee62:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ee67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee6a:	74 17                	je     f010ee83 <test_insert_sorted_allocList+0x422>
f010ee6c:	83 ec 04             	sub    $0x4,%esp
f010ee6f:	68 3c 81 13 f0       	push   $0xf013813c
f010ee74:	68 b3 00 00 00       	push   $0xb3
f010ee79:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ee7e:	e8 82 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ee83:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ee88:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ee8b:	74 17                	je     f010eea4 <test_insert_sorted_allocList+0x443>
f010ee8d:	83 ec 04             	sub    $0x4,%esp
f010ee90:	68 88 81 13 f0       	push   $0xf0138188
f010ee95:	68 b6 00 00 00       	push   $0xb6
f010ee9a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ee9f:	e8 61 13 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eea4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eeab:	83 ec 0c             	sub    $0xc,%esp
f010eeae:	ff 75 f0             	pushl  -0x10(%ebp)
f010eeb1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eeb4:	50                   	push   %eax
f010eeb5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eeb8:	50                   	push   %eax
f010eeb9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eebc:	50                   	push   %eax
f010eebd:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010eec2:	e8 2a 23 00 00       	call   f01111f1 <check_list_data>
f010eec7:	83 c4 20             	add    $0x20,%esp
f010eeca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eecd:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eed1:	74 17                	je     f010eeea <test_insert_sorted_allocList+0x489>
f010eed3:	83 ec 04             	sub    $0x4,%esp
f010eed6:	68 d8 81 13 f0       	push   $0xf01381d8
f010eedb:	68 bb 00 00 00       	push   $0xbb
f010eee0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010eee5:	e8 1b 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eeea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eeed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eef0:	74 17                	je     f010ef09 <test_insert_sorted_allocList+0x4a8>
f010eef2:	83 ec 04             	sub    $0x4,%esp
f010eef5:	68 28 82 13 f0       	push   $0xf0138228
f010eefa:	68 bc 00 00 00       	push   $0xbc
f010eeff:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ef04:	e8 fc 12 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010ef09:	83 ec 0c             	sub    $0xc,%esp
f010ef0c:	68 c4 82 13 f0       	push   $0xf01382c4
f010ef11:	e8 f8 1d ff ff       	call   f0100d0e <cprintf>
f010ef16:	83 c4 10             	add    $0x10,%esp
}
f010ef19:	90                   	nop
f010ef1a:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ef1d:	c9                   	leave  
f010ef1e:	c3                   	ret    

f010ef1f <test_find_block>:

void test_find_block()
{
f010ef1f:	55                   	push   %ebp
f010ef20:	89 e5                	mov    %esp,%ebp
f010ef22:	57                   	push   %edi
f010ef23:	56                   	push   %esi
f010ef24:	53                   	push   %ebx
f010ef25:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010ef2b:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef32:	83 ec 0c             	sub    $0xc,%esp
f010ef35:	ff 75 e0             	pushl  -0x20(%ebp)
f010ef38:	e8 d0 31 02 00       	call   f013210d <initialize_MemBlocksList>
f010ef3d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010ef40:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010ef47:	00 00 00 
f010ef4a:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010ef51:	00 00 00 
f010ef54:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010ef5b:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ef5e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ef61:	bb 3c 84 13 f0       	mov    $0xf013843c,%ebx
f010ef66:	ba 06 00 00 00       	mov    $0x6,%edx
f010ef6b:	89 c7                	mov    %eax,%edi
f010ef6d:	89 de                	mov    %ebx,%esi
f010ef6f:	89 d1                	mov    %edx,%ecx
f010ef71:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010ef73:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010ef76:	bb 54 84 13 f0       	mov    $0xf0138454,%ebx
f010ef7b:	ba 06 00 00 00       	mov    $0x6,%edx
f010ef80:	89 c7                	mov    %eax,%edi
f010ef82:	89 de                	mov    %ebx,%esi
f010ef84:	89 d1                	mov    %edx,%ecx
f010ef86:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010ef88:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010ef8f:	00 00 00 
f010ef92:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010ef99:	00 00 00 
f010ef9c:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010efa3:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010efa6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010efad:	e9 5f 01 00 00       	jmp    f010f111 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010efb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efb5:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010efb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efbc:	c1 e2 04             	shl    $0x4,%edx
f010efbf:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010efc2:	01 da                	add    %ebx,%edx
f010efc4:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010efca:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010efcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efcf:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010efd3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efd6:	c1 e2 04             	shl    $0x4,%edx
f010efd9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efdc:	01 f2                	add    %esi,%edx
f010efde:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010efe4:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010efe6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010efea:	0f 85 92 00 00 00    	jne    f010f082 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010eff0:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f010eff5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eff8:	c1 e2 04             	shl    $0x4,%edx
f010effb:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010effe:	01 fa                	add    %edi,%edx
f010f000:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f006:	89 02                	mov    %eax,(%edx)
f010f008:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f00b:	c1 e0 04             	shl    $0x4,%eax
f010f00e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f011:	01 d8                	add    %ebx,%eax
f010f013:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f018:	8b 00                	mov    (%eax),%eax
f010f01a:	85 c0                	test   %eax,%eax
f010f01c:	74 18                	je     f010f036 <test_find_block+0x117>
f010f01e:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f010f023:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f029:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f02c:	c1 e1 04             	shl    $0x4,%ecx
f010f02f:	01 ca                	add    %ecx,%edx
f010f031:	89 50 04             	mov    %edx,0x4(%eax)
f010f034:	eb 13                	jmp    f010f049 <test_find_block+0x12a>
f010f036:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f03c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f03f:	c1 e2 04             	shl    $0x4,%edx
f010f042:	01 d0                	add    %edx,%eax
f010f044:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f010f049:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f04f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f052:	c1 e2 04             	shl    $0x4,%edx
f010f055:	01 d0                	add    %edx,%eax
f010f057:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f010f05c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f05f:	c1 e0 04             	shl    $0x4,%eax
f010f062:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f065:	01 f0                	add    %esi,%eax
f010f067:	2d 98 00 00 00       	sub    $0x98,%eax
f010f06c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f072:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f077:	40                   	inc    %eax
f010f078:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
f010f07d:	e9 8c 00 00 00       	jmp    f010f10e <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f082:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f010f087:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f08a:	c1 e2 04             	shl    $0x4,%edx
f010f08d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f090:	01 fa                	add    %edi,%edx
f010f092:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f098:	89 02                	mov    %eax,(%edx)
f010f09a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f09d:	c1 e0 04             	shl    $0x4,%eax
f010f0a0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0a3:	01 d8                	add    %ebx,%eax
f010f0a5:	2d 98 00 00 00       	sub    $0x98,%eax
f010f0aa:	8b 00                	mov    (%eax),%eax
f010f0ac:	85 c0                	test   %eax,%eax
f010f0ae:	74 17                	je     f010f0c7 <test_find_block+0x1a8>
f010f0b0:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f010f0b5:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f0bb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f0be:	c1 e1 04             	shl    $0x4,%ecx
f010f0c1:	01 ca                	add    %ecx,%edx
f010f0c3:	89 10                	mov    %edx,(%eax)
f010f0c5:	eb 13                	jmp    f010f0da <test_find_block+0x1bb>
f010f0c7:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0d0:	c1 e2 04             	shl    $0x4,%edx
f010f0d3:	01 d0                	add    %edx,%eax
f010f0d5:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f010f0da:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0e3:	c1 e2 04             	shl    $0x4,%edx
f010f0e6:	01 d0                	add    %edx,%eax
f010f0e8:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f010f0ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0f0:	c1 e0 04             	shl    $0x4,%eax
f010f0f3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0f6:	01 f0                	add    %esi,%eax
f010f0f8:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f0fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f103:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f108:	40                   	inc    %eax
f010f109:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f10e:	ff 45 e4             	incl   -0x1c(%ebp)
f010f111:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f115:	0f 8e 97 fe ff ff    	jle    f010efb2 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f11b:	83 ec 08             	sub    $0x8,%esp
f010f11e:	68 00 10 00 00       	push   $0x1000
f010f123:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f128:	e8 bd 30 02 00       	call   f01321ea <find_block>
f010f12d:	83 c4 10             	add    $0x10,%esp
f010f130:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f133:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f137:	74 17                	je     f010f150 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f139:	83 ec 04             	sub    $0x4,%esp
f010f13c:	68 04 83 13 f0       	push   $0xf0138304
f010f141:	68 de 00 00 00       	push   $0xde
f010f146:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f14b:	e8 b5 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f150:	83 ec 08             	sub    $0x8,%esp
f010f153:	6a 00                	push   $0x0
f010f155:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f15a:	e8 8b 30 02 00       	call   f01321ea <find_block>
f010f15f:	83 c4 10             	add    $0x10,%esp
f010f162:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f165:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f169:	74 17                	je     f010f182 <test_find_block+0x263>
f010f16b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f16e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f171:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f176:	75 0a                	jne    f010f182 <test_find_block+0x263>
f010f178:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f17b:	8b 40 08             	mov    0x8(%eax),%eax
f010f17e:	85 c0                	test   %eax,%eax
f010f180:	74 17                	je     f010f199 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f182:	83 ec 04             	sub    $0x4,%esp
f010f185:	68 68 83 13 f0       	push   $0xf0138368
f010f18a:	68 e3 00 00 00       	push   $0xe3
f010f18f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f194:	e8 6c 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f199:	83 ec 08             	sub    $0x8,%esp
f010f19c:	68 00 70 00 00       	push   $0x7000
f010f1a1:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f1a6:	e8 3f 30 02 00       	call   f01321ea <find_block>
f010f1ab:	83 c4 10             	add    $0x10,%esp
f010f1ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f1b1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1b5:	74 1a                	je     f010f1d1 <test_find_block+0x2b2>
f010f1b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1ba:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1bd:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f1c2:	75 0d                	jne    f010f1d1 <test_find_block+0x2b2>
f010f1c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1c7:	8b 40 08             	mov    0x8(%eax),%eax
f010f1ca:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f1cf:	74 17                	je     f010f1e8 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f1d1:	83 ec 04             	sub    $0x4,%esp
f010f1d4:	68 68 83 13 f0       	push   $0xf0138368
f010f1d9:	68 e8 00 00 00       	push   $0xe8
f010f1de:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f1e3:	e8 1d 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f1e8:	83 ec 08             	sub    $0x8,%esp
f010f1eb:	68 00 a4 01 00       	push   $0x1a400
f010f1f0:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f1f5:	e8 f0 2f 02 00       	call   f01321ea <find_block>
f010f1fa:	83 c4 10             	add    $0x10,%esp
f010f1fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f200:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f204:	74 1a                	je     f010f220 <test_find_block+0x301>
f010f206:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f209:	8b 40 0c             	mov    0xc(%eax),%eax
f010f20c:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f211:	75 0d                	jne    f010f220 <test_find_block+0x301>
f010f213:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f216:	8b 40 08             	mov    0x8(%eax),%eax
f010f219:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f21e:	74 17                	je     f010f237 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f220:	83 ec 04             	sub    $0x4,%esp
f010f223:	68 68 83 13 f0       	push   $0xf0138368
f010f228:	68 ed 00 00 00       	push   $0xed
f010f22d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f232:	e8 ce 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f237:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f23c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f23f:	75 09                	jne    f010f24a <test_find_block+0x32b>
f010f241:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f246:	85 c0                	test   %eax,%eax
f010f248:	74 17                	je     f010f261 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f24a:	83 ec 04             	sub    $0x4,%esp
f010f24d:	68 9c 83 13 f0       	push   $0xf013839c
f010f252:	68 f2 00 00 00       	push   $0xf2
f010f257:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f25c:	e8 a4 0f ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f261:	83 ec 0c             	sub    $0xc,%esp
f010f264:	68 00 84 13 f0       	push   $0xf0138400
f010f269:	e8 a0 1a ff ff       	call   f0100d0e <cprintf>
f010f26e:	83 c4 10             	add    $0x10,%esp
}
f010f271:	90                   	nop
f010f272:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f275:	5b                   	pop    %ebx
f010f276:	5e                   	pop    %esi
f010f277:	5f                   	pop    %edi
f010f278:	5d                   	pop    %ebp
f010f279:	c3                   	ret    

f010f27a <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f27a:	55                   	push   %ebp
f010f27b:	89 e5                	mov    %esp,%ebp
f010f27d:	57                   	push   %edi
f010f27e:	56                   	push   %esi
f010f27f:	53                   	push   %ebx
f010f280:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f286:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f28d:	83 ec 0c             	sub    $0xc,%esp
f010f290:	ff 75 e0             	pushl  -0x20(%ebp)
f010f293:	e8 75 2e 02 00       	call   f013210d <initialize_MemBlocksList>
f010f298:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f29b:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010f2a2:	00 00 00 
f010f2a5:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010f2ac:	00 00 00 
f010f2af:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010f2b6:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f2b9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f2bc:	bb e0 86 13 f0       	mov    $0xf01386e0,%ebx
f010f2c1:	ba 08 00 00 00       	mov    $0x8,%edx
f010f2c6:	89 c7                	mov    %eax,%edi
f010f2c8:	89 de                	mov    %ebx,%esi
f010f2ca:	89 d1                	mov    %edx,%ecx
f010f2cc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f2ce:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f2d1:	bb 00 87 13 f0       	mov    $0xf0138700,%ebx
f010f2d6:	ba 08 00 00 00       	mov    $0x8,%edx
f010f2db:	89 c7                	mov    %eax,%edi
f010f2dd:	89 de                	mov    %ebx,%esi
f010f2df:	89 d1                	mov    %edx,%ecx
f010f2e1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f2e3:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010f2ea:	00 00 00 
f010f2ed:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010f2f4:	00 00 00 
f010f2f7:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010f2fe:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f301:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f308:	e9 5f 01 00 00       	jmp    f010f46c <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f30d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f310:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f314:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f317:	c1 e2 04             	shl    $0x4,%edx
f010f31a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f31d:	01 da                	add    %ebx,%edx
f010f31f:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f325:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f327:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f32a:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f32e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f331:	c1 e2 04             	shl    $0x4,%edx
f010f334:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f337:	01 f2                	add    %esi,%edx
f010f339:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f33f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f341:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f345:	0f 85 92 00 00 00    	jne    f010f3dd <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f34b:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f350:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f353:	c1 e2 04             	shl    $0x4,%edx
f010f356:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f359:	01 fa                	add    %edi,%edx
f010f35b:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f361:	89 02                	mov    %eax,(%edx)
f010f363:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f366:	c1 e0 04             	shl    $0x4,%eax
f010f369:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f36c:	01 d8                	add    %ebx,%eax
f010f36e:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f373:	8b 00                	mov    (%eax),%eax
f010f375:	85 c0                	test   %eax,%eax
f010f377:	74 18                	je     f010f391 <test_alloc_block_FF+0x117>
f010f379:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f37e:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f384:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f387:	c1 e1 04             	shl    $0x4,%ecx
f010f38a:	01 ca                	add    %ecx,%edx
f010f38c:	89 50 04             	mov    %edx,0x4(%eax)
f010f38f:	eb 13                	jmp    f010f3a4 <test_alloc_block_FF+0x12a>
f010f391:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f397:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f39a:	c1 e2 04             	shl    $0x4,%edx
f010f39d:	01 d0                	add    %edx,%eax
f010f39f:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f3a4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f3aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3ad:	c1 e2 04             	shl    $0x4,%edx
f010f3b0:	01 d0                	add    %edx,%eax
f010f3b2:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f3b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3ba:	c1 e0 04             	shl    $0x4,%eax
f010f3bd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f3c0:	01 f0                	add    %esi,%eax
f010f3c2:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f3c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f3cd:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f3d2:	40                   	inc    %eax
f010f3d3:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010f3d8:	e9 8c 00 00 00       	jmp    f010f469 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f3dd:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f3e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3e5:	c1 e2 04             	shl    $0x4,%edx
f010f3e8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f3eb:	01 fa                	add    %edi,%edx
f010f3ed:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f3f3:	89 02                	mov    %eax,(%edx)
f010f3f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3f8:	c1 e0 04             	shl    $0x4,%eax
f010f3fb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3fe:	01 d8                	add    %ebx,%eax
f010f400:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f405:	8b 00                	mov    (%eax),%eax
f010f407:	85 c0                	test   %eax,%eax
f010f409:	74 17                	je     f010f422 <test_alloc_block_FF+0x1a8>
f010f40b:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f410:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f416:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f419:	c1 e1 04             	shl    $0x4,%ecx
f010f41c:	01 ca                	add    %ecx,%edx
f010f41e:	89 10                	mov    %edx,(%eax)
f010f420:	eb 13                	jmp    f010f435 <test_alloc_block_FF+0x1bb>
f010f422:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f428:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f42b:	c1 e2 04             	shl    $0x4,%edx
f010f42e:	01 d0                	add    %edx,%eax
f010f430:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f435:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f43b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f43e:	c1 e2 04             	shl    $0x4,%edx
f010f441:	01 d0                	add    %edx,%eax
f010f443:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f448:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f44b:	c1 e0 04             	shl    $0x4,%eax
f010f44e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f451:	01 f0                	add    %esi,%eax
f010f453:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f458:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f45e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f463:	40                   	inc    %eax
f010f464:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f469:	ff 45 e4             	incl   -0x1c(%ebp)
f010f46c:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f470:	0f 8e 97 fe ff ff    	jle    f010f30d <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f476:	83 ec 0c             	sub    $0xc,%esp
f010f479:	68 00 00 30 00       	push   $0x300000
f010f47e:	e8 4c 30 02 00       	call   f01324cf <alloc_block_FF>
f010f483:	83 c4 10             	add    $0x10,%esp
f010f486:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f489:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f48d:	74 17                	je     f010f4a6 <test_alloc_block_FF+0x22c>
f010f48f:	83 ec 04             	sub    $0x4,%esp
f010f492:	68 6c 84 13 f0       	push   $0xf013846c
f010f497:	68 15 01 00 00       	push   $0x115
f010f49c:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f4a1:	e8 5f 0d ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f4a6:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f4ab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f4ae:	75 13                	jne    f010f4c3 <test_alloc_block_FF+0x249>
f010f4b0:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f4b5:	83 f8 08             	cmp    $0x8,%eax
f010f4b8:	75 09                	jne    f010f4c3 <test_alloc_block_FF+0x249>
f010f4ba:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f4bf:	85 c0                	test   %eax,%eax
f010f4c1:	74 17                	je     f010f4da <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f4c3:	83 ec 04             	sub    $0x4,%esp
f010f4c6:	68 e0 84 13 f0       	push   $0xf01384e0
f010f4cb:	68 19 01 00 00       	push   $0x119
f010f4d0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f4d5:	e8 2b 0d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f4da:	83 ec 0c             	sub    $0xc,%esp
f010f4dd:	68 00 24 00 00       	push   $0x2400
f010f4e2:	e8 e8 2f 02 00       	call   f01324cf <alloc_block_FF>
f010f4e7:	83 c4 10             	add    $0x10,%esp
f010f4ea:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f4ed:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4f1:	74 1a                	je     f010f50d <test_alloc_block_FF+0x293>
f010f4f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4f6:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4f9:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f4fe:	75 0d                	jne    f010f50d <test_alloc_block_FF+0x293>
f010f500:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f503:	8b 40 08             	mov    0x8(%eax),%eax
f010f506:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f50b:	74 17                	je     f010f524 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f50d:	83 ec 04             	sub    $0x4,%esp
f010f510:	68 58 85 13 f0       	push   $0xf0138558
f010f515:	68 21 01 00 00       	push   $0x121
f010f51a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f51f:	e8 e1 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f524:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f529:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f52c:	75 13                	jne    f010f541 <test_alloc_block_FF+0x2c7>
f010f52e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f533:	83 f8 07             	cmp    $0x7,%eax
f010f536:	75 09                	jne    f010f541 <test_alloc_block_FF+0x2c7>
f010f538:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f53d:	85 c0                	test   %eax,%eax
f010f53f:	74 17                	je     f010f558 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f541:	83 ec 04             	sub    $0x4,%esp
f010f544:	68 9c 85 13 f0       	push   $0xf013859c
f010f549:	68 25 01 00 00       	push   $0x125
f010f54e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f553:	e8 ad 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f558:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f55f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f562:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f569:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f570:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f577:	83 ec 0c             	sub    $0xc,%esp
f010f57a:	ff 75 d8             	pushl  -0x28(%ebp)
f010f57d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f583:	50                   	push   %eax
f010f584:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f587:	50                   	push   %eax
f010f588:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f58b:	50                   	push   %eax
f010f58c:	68 64 ed 88 f0       	push   $0xf088ed64
f010f591:	e8 5b 1c 00 00       	call   f01111f1 <check_list_data>
f010f596:	83 c4 20             	add    $0x20,%esp
f010f599:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f59c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f5a0:	74 17                	je     f010f5b9 <test_alloc_block_FF+0x33f>
f010f5a2:	83 ec 04             	sub    $0x4,%esp
f010f5a5:	68 00 86 13 f0       	push   $0xf0138600
f010f5aa:	68 2d 01 00 00       	push   $0x12d
f010f5af:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f5b4:	e8 4c 0c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f5b9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f5bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f5c2:	74 17                	je     f010f5db <test_alloc_block_FF+0x361>
f010f5c4:	83 ec 04             	sub    $0x4,%esp
f010f5c7:	68 4c 86 13 f0       	push   $0xf013864c
f010f5cc:	68 2e 01 00 00       	push   $0x12e
f010f5d1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f5d6:	e8 2a 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f5db:	83 ec 0c             	sub    $0xc,%esp
f010f5de:	68 00 00 10 00       	push   $0x100000
f010f5e3:	e8 e7 2e 02 00       	call   f01324cf <alloc_block_FF>
f010f5e8:	83 c4 10             	add    $0x10,%esp
f010f5eb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f5ee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5f2:	74 1a                	je     f010f60e <test_alloc_block_FF+0x394>
f010f5f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5f7:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5fa:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f5ff:	75 0d                	jne    f010f60e <test_alloc_block_FF+0x394>
f010f601:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f604:	8b 40 08             	mov    0x8(%eax),%eax
f010f607:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f60c:	74 17                	je     f010f625 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f60e:	83 ec 04             	sub    $0x4,%esp
f010f611:	68 58 85 13 f0       	push   $0xf0138558
f010f616:	68 36 01 00 00       	push   $0x136
f010f61b:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f620:	e8 e0 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f625:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f62a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f62d:	4a                   	dec    %edx
f010f62e:	39 d0                	cmp    %edx,%eax
f010f630:	75 13                	jne    f010f645 <test_alloc_block_FF+0x3cb>
f010f632:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f637:	83 f8 07             	cmp    $0x7,%eax
f010f63a:	75 09                	jne    f010f645 <test_alloc_block_FF+0x3cb>
f010f63c:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f641:	85 c0                	test   %eax,%eax
f010f643:	74 17                	je     f010f65c <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f645:	83 ec 04             	sub    $0x4,%esp
f010f648:	68 9c 85 13 f0       	push   $0xf013859c
f010f64d:	68 3a 01 00 00       	push   $0x13a
f010f652:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f657:	e8 a9 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f65c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f663:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f666:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f66d:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f674:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f67b:	83 ec 0c             	sub    $0xc,%esp
f010f67e:	ff 75 d8             	pushl  -0x28(%ebp)
f010f681:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f687:	50                   	push   %eax
f010f688:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f68b:	50                   	push   %eax
f010f68c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f68f:	50                   	push   %eax
f010f690:	68 64 ed 88 f0       	push   $0xf088ed64
f010f695:	e8 57 1b 00 00       	call   f01111f1 <check_list_data>
f010f69a:	83 c4 20             	add    $0x20,%esp
f010f69d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f6a0:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f6a4:	74 17                	je     f010f6bd <test_alloc_block_FF+0x443>
f010f6a6:	83 ec 04             	sub    $0x4,%esp
f010f6a9:	68 00 86 13 f0       	push   $0xf0138600
f010f6ae:	68 42 01 00 00       	push   $0x142
f010f6b3:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f6b8:	e8 48 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f6bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f6c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f6c6:	74 17                	je     f010f6df <test_alloc_block_FF+0x465>
f010f6c8:	83 ec 04             	sub    $0x4,%esp
f010f6cb:	68 4c 86 13 f0       	push   $0xf013864c
f010f6d0:	68 43 01 00 00       	push   $0x143
f010f6d5:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f6da:	e8 26 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f6df:	83 ec 0c             	sub    $0xc,%esp
f010f6e2:	68 98 86 13 f0       	push   $0xf0138698
f010f6e7:	e8 22 16 ff ff       	call   f0100d0e <cprintf>
f010f6ec:	83 c4 10             	add    $0x10,%esp
}
f010f6ef:	90                   	nop
f010f6f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6f3:	5b                   	pop    %ebx
f010f6f4:	5e                   	pop    %esi
f010f6f5:	5f                   	pop    %edi
f010f6f6:	5d                   	pop    %ebp
f010f6f7:	c3                   	ret    

f010f6f8 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f6f8:	55                   	push   %ebp
f010f6f9:	89 e5                	mov    %esp,%ebp
f010f6fb:	57                   	push   %edi
f010f6fc:	56                   	push   %esi
f010f6fd:	53                   	push   %ebx
f010f6fe:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f704:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f70b:	83 ec 0c             	sub    $0xc,%esp
f010f70e:	ff 75 e0             	pushl  -0x20(%ebp)
f010f711:	e8 f7 29 02 00       	call   f013210d <initialize_MemBlocksList>
f010f716:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f719:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010f720:	00 00 00 
f010f723:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010f72a:	00 00 00 
f010f72d:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010f734:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f737:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f73a:	bb 14 89 13 f0       	mov    $0xf0138914,%ebx
f010f73f:	ba 07 00 00 00       	mov    $0x7,%edx
f010f744:	89 c7                	mov    %eax,%edi
f010f746:	89 de                	mov    %ebx,%esi
f010f748:	89 d1                	mov    %edx,%ecx
f010f74a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f74c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f74f:	bb 30 89 13 f0       	mov    $0xf0138930,%ebx
f010f754:	ba 07 00 00 00       	mov    $0x7,%edx
f010f759:	89 c7                	mov    %eax,%edi
f010f75b:	89 de                	mov    %ebx,%esi
f010f75d:	89 d1                	mov    %edx,%ecx
f010f75f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f761:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010f768:	00 00 00 
f010f76b:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010f772:	00 00 00 
f010f775:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010f77c:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f77f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f786:	e9 5f 01 00 00       	jmp    f010f8ea <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f78b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f78e:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f792:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f795:	c1 e2 04             	shl    $0x4,%edx
f010f798:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f79b:	01 da                	add    %ebx,%edx
f010f79d:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f7a3:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f7a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7a8:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f7ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7af:	c1 e2 04             	shl    $0x4,%edx
f010f7b2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7b5:	01 f2                	add    %esi,%edx
f010f7b7:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f7bd:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f7bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f7c3:	0f 85 92 00 00 00    	jne    f010f85b <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f7c9:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f7ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7d1:	c1 e2 04             	shl    $0x4,%edx
f010f7d4:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f7d7:	01 fa                	add    %edi,%edx
f010f7d9:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f7df:	89 02                	mov    %eax,(%edx)
f010f7e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7e4:	c1 e0 04             	shl    $0x4,%eax
f010f7e7:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7ea:	01 d8                	add    %ebx,%eax
f010f7ec:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f7f1:	8b 00                	mov    (%eax),%eax
f010f7f3:	85 c0                	test   %eax,%eax
f010f7f5:	74 18                	je     f010f80f <test_alloc_block_BF+0x117>
f010f7f7:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f7fc:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f802:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f805:	c1 e1 04             	shl    $0x4,%ecx
f010f808:	01 ca                	add    %ecx,%edx
f010f80a:	89 50 04             	mov    %edx,0x4(%eax)
f010f80d:	eb 13                	jmp    f010f822 <test_alloc_block_BF+0x12a>
f010f80f:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f815:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f818:	c1 e2 04             	shl    $0x4,%edx
f010f81b:	01 d0                	add    %edx,%eax
f010f81d:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f822:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f828:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f82b:	c1 e2 04             	shl    $0x4,%edx
f010f82e:	01 d0                	add    %edx,%eax
f010f830:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f838:	c1 e0 04             	shl    $0x4,%eax
f010f83b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f83e:	01 f0                	add    %esi,%eax
f010f840:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f845:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f84b:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f850:	40                   	inc    %eax
f010f851:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010f856:	e9 8c 00 00 00       	jmp    f010f8e7 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f85b:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f860:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f863:	c1 e2 04             	shl    $0x4,%edx
f010f866:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f869:	01 fa                	add    %edi,%edx
f010f86b:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f871:	89 02                	mov    %eax,(%edx)
f010f873:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f876:	c1 e0 04             	shl    $0x4,%eax
f010f879:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f87c:	01 d8                	add    %ebx,%eax
f010f87e:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f883:	8b 00                	mov    (%eax),%eax
f010f885:	85 c0                	test   %eax,%eax
f010f887:	74 17                	je     f010f8a0 <test_alloc_block_BF+0x1a8>
f010f889:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f88e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f894:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f897:	c1 e1 04             	shl    $0x4,%ecx
f010f89a:	01 ca                	add    %ecx,%edx
f010f89c:	89 10                	mov    %edx,(%eax)
f010f89e:	eb 13                	jmp    f010f8b3 <test_alloc_block_BF+0x1bb>
f010f8a0:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f8a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8a9:	c1 e2 04             	shl    $0x4,%edx
f010f8ac:	01 d0                	add    %edx,%eax
f010f8ae:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f8b3:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f8b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8bc:	c1 e2 04             	shl    $0x4,%edx
f010f8bf:	01 d0                	add    %edx,%eax
f010f8c1:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f8c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8c9:	c1 e0 04             	shl    $0x4,%eax
f010f8cc:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f8cf:	01 f0                	add    %esi,%eax
f010f8d1:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f8d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f8dc:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f8e1:	40                   	inc    %eax
f010f8e2:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f8e7:	ff 45 e4             	incl   -0x1c(%ebp)
f010f8ea:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f8ee:	0f 8e 97 fe ff ff    	jle    f010f78b <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f8f4:	83 ec 0c             	sub    $0xc,%esp
f010f8f7:	68 00 00 40 00       	push   $0x400000
f010f8fc:	e8 9b 2d 02 00       	call   f013269c <alloc_block_BF>
f010f901:	83 c4 10             	add    $0x10,%esp
f010f904:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f907:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f90b:	74 17                	je     f010f924 <test_alloc_block_BF+0x22c>
f010f90d:	83 ec 04             	sub    $0x4,%esp
f010f910:	68 20 87 13 f0       	push   $0xf0138720
f010f915:	68 66 01 00 00       	push   $0x166
f010f91a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f91f:	e8 e1 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f924:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f929:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f92c:	75 13                	jne    f010f941 <test_alloc_block_BF+0x249>
f010f92e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f933:	83 f8 07             	cmp    $0x7,%eax
f010f936:	75 09                	jne    f010f941 <test_alloc_block_BF+0x249>
f010f938:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f93d:	85 c0                	test   %eax,%eax
f010f93f:	74 17                	je     f010f958 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f941:	83 ec 04             	sub    $0x4,%esp
f010f944:	68 e0 84 13 f0       	push   $0xf01384e0
f010f949:	68 6a 01 00 00       	push   $0x16a
f010f94e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f953:	e8 ad 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f958:	83 ec 0c             	sub    $0xc,%esp
f010f95b:	68 00 00 10 00       	push   $0x100000
f010f960:	e8 37 2d 02 00       	call   f013269c <alloc_block_BF>
f010f965:	83 c4 10             	add    $0x10,%esp
f010f968:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f96b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f96f:	74 1a                	je     f010f98b <test_alloc_block_BF+0x293>
f010f971:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f974:	8b 40 0c             	mov    0xc(%eax),%eax
f010f977:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f97c:	75 0d                	jne    f010f98b <test_alloc_block_BF+0x293>
f010f97e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f981:	8b 40 08             	mov    0x8(%eax),%eax
f010f984:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f989:	74 17                	je     f010f9a2 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f98b:	83 ec 04             	sub    $0x4,%esp
f010f98e:	68 94 87 13 f0       	push   $0xf0138794
f010f993:	68 72 01 00 00       	push   $0x172
f010f998:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f99d:	e8 63 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f9a2:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f9a7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f9aa:	75 13                	jne    f010f9bf <test_alloc_block_BF+0x2c7>
f010f9ac:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f9b1:	83 f8 06             	cmp    $0x6,%eax
f010f9b4:	75 09                	jne    f010f9bf <test_alloc_block_BF+0x2c7>
f010f9b6:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f9bb:	85 c0                	test   %eax,%eax
f010f9bd:	74 17                	je     f010f9d6 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9bf:	83 ec 04             	sub    $0x4,%esp
f010f9c2:	68 d8 87 13 f0       	push   $0xf01387d8
f010f9c7:	68 76 01 00 00       	push   $0x176
f010f9cc:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010f9d1:	e8 2f 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f9d6:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f9dd:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f9e0:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f9e7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f9ee:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9f5:	83 ec 0c             	sub    $0xc,%esp
f010f9f8:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9fb:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fa01:	50                   	push   %eax
f010fa02:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fa05:	50                   	push   %eax
f010fa06:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fa09:	50                   	push   %eax
f010fa0a:	68 64 ed 88 f0       	push   $0xf088ed64
f010fa0f:	e8 dd 17 00 00       	call   f01111f1 <check_list_data>
f010fa14:	83 c4 20             	add    $0x20,%esp
f010fa17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa1a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa1e:	74 17                	je     f010fa37 <test_alloc_block_BF+0x33f>
f010fa20:	83 ec 04             	sub    $0x4,%esp
f010fa23:	68 3c 88 13 f0       	push   $0xf013883c
f010fa28:	68 7e 01 00 00       	push   $0x17e
f010fa2d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fa32:	e8 ce 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa37:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fa3d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa40:	74 17                	je     f010fa59 <test_alloc_block_BF+0x361>
f010fa42:	83 ec 04             	sub    $0x4,%esp
f010fa45:	68 88 88 13 f0       	push   $0xf0138888
f010fa4a:	68 7f 01 00 00       	push   $0x17f
f010fa4f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fa54:	e8 ac 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fa59:	83 ec 0c             	sub    $0xc,%esp
f010fa5c:	68 00 00 10 00       	push   $0x100000
f010fa61:	e8 36 2c 02 00       	call   f013269c <alloc_block_BF>
f010fa66:	83 c4 10             	add    $0x10,%esp
f010fa69:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fa6c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa70:	74 1a                	je     f010fa8c <test_alloc_block_BF+0x394>
f010fa72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa75:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa78:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa7d:	75 0d                	jne    f010fa8c <test_alloc_block_BF+0x394>
f010fa7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa82:	8b 40 08             	mov    0x8(%eax),%eax
f010fa85:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa8a:	74 17                	je     f010faa3 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fa8c:	83 ec 04             	sub    $0x4,%esp
f010fa8f:	68 94 87 13 f0       	push   $0xf0138794
f010fa94:	68 87 01 00 00       	push   $0x187
f010fa99:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fa9e:	e8 62 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010faa3:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010faa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010faab:	4a                   	dec    %edx
f010faac:	39 d0                	cmp    %edx,%eax
f010faae:	75 13                	jne    f010fac3 <test_alloc_block_BF+0x3cb>
f010fab0:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fab5:	83 f8 06             	cmp    $0x6,%eax
f010fab8:	75 09                	jne    f010fac3 <test_alloc_block_BF+0x3cb>
f010faba:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010fabf:	85 c0                	test   %eax,%eax
f010fac1:	74 17                	je     f010fada <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fac3:	83 ec 04             	sub    $0x4,%esp
f010fac6:	68 d8 87 13 f0       	push   $0xf01387d8
f010facb:	68 8b 01 00 00       	push   $0x18b
f010fad0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fad5:	e8 2b 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fada:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fae1:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fae4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010faeb:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010faf2:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010faf9:	83 ec 0c             	sub    $0xc,%esp
f010fafc:	ff 75 d8             	pushl  -0x28(%ebp)
f010faff:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fb05:	50                   	push   %eax
f010fb06:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb09:	50                   	push   %eax
f010fb0a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb0d:	50                   	push   %eax
f010fb0e:	68 64 ed 88 f0       	push   $0xf088ed64
f010fb13:	e8 d9 16 00 00       	call   f01111f1 <check_list_data>
f010fb18:	83 c4 20             	add    $0x20,%esp
f010fb1b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb1e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb22:	74 17                	je     f010fb3b <test_alloc_block_BF+0x443>
f010fb24:	83 ec 04             	sub    $0x4,%esp
f010fb27:	68 3c 88 13 f0       	push   $0xf013883c
f010fb2c:	68 93 01 00 00       	push   $0x193
f010fb31:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fb36:	e8 ca 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb3b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fb41:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb44:	74 17                	je     f010fb5d <test_alloc_block_BF+0x465>
f010fb46:	83 ec 04             	sub    $0x4,%esp
f010fb49:	68 88 88 13 f0       	push   $0xf0138888
f010fb4e:	68 94 01 00 00       	push   $0x194
f010fb53:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fb58:	e8 a8 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fb5d:	83 ec 0c             	sub    $0xc,%esp
f010fb60:	68 00 0c 00 00       	push   $0xc00
f010fb65:	e8 32 2b 02 00       	call   f013269c <alloc_block_BF>
f010fb6a:	83 c4 10             	add    $0x10,%esp
f010fb6d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010fb70:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb74:	74 1a                	je     f010fb90 <test_alloc_block_BF+0x498>
f010fb76:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb79:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb7c:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fb81:	75 0d                	jne    f010fb90 <test_alloc_block_BF+0x498>
f010fb83:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb86:	8b 40 08             	mov    0x8(%eax),%eax
f010fb89:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fb8e:	74 17                	je     f010fba7 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fb90:	83 ec 04             	sub    $0x4,%esp
f010fb93:	68 94 87 13 f0       	push   $0xf0138794
f010fb98:	68 9c 01 00 00       	push   $0x19c
f010fb9d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fba2:	e8 5e 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fba7:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010fbac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fbaf:	83 ea 02             	sub    $0x2,%edx
f010fbb2:	39 d0                	cmp    %edx,%eax
f010fbb4:	75 13                	jne    f010fbc9 <test_alloc_block_BF+0x4d1>
f010fbb6:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fbbb:	83 f8 06             	cmp    $0x6,%eax
f010fbbe:	75 09                	jne    f010fbc9 <test_alloc_block_BF+0x4d1>
f010fbc0:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010fbc5:	85 c0                	test   %eax,%eax
f010fbc7:	74 17                	je     f010fbe0 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbc9:	83 ec 04             	sub    $0x4,%esp
f010fbcc:	68 d8 87 13 f0       	push   $0xf01387d8
f010fbd1:	68 a0 01 00 00       	push   $0x1a0
f010fbd6:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fbdb:	e8 25 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbe0:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fbe7:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fbea:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010fbf1:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010fbf8:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbff:	83 ec 0c             	sub    $0xc,%esp
f010fc02:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc05:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fc0b:	50                   	push   %eax
f010fc0c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fc0f:	50                   	push   %eax
f010fc10:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fc13:	50                   	push   %eax
f010fc14:	68 64 ed 88 f0       	push   $0xf088ed64
f010fc19:	e8 d3 15 00 00       	call   f01111f1 <check_list_data>
f010fc1e:	83 c4 20             	add    $0x20,%esp
f010fc21:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc24:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc28:	74 17                	je     f010fc41 <test_alloc_block_BF+0x549>
f010fc2a:	83 ec 04             	sub    $0x4,%esp
f010fc2d:	68 3c 88 13 f0       	push   $0xf013883c
f010fc32:	68 a8 01 00 00       	push   $0x1a8
f010fc37:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fc3c:	e8 c4 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc41:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fc47:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc4a:	74 17                	je     f010fc63 <test_alloc_block_BF+0x56b>
f010fc4c:	83 ec 04             	sub    $0x4,%esp
f010fc4f:	68 88 88 13 f0       	push   $0xf0138888
f010fc54:	68 a9 01 00 00       	push   $0x1a9
f010fc59:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fc5e:	e8 a2 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010fc63:	83 ec 0c             	sub    $0xc,%esp
f010fc66:	68 00 08 00 00       	push   $0x800
f010fc6b:	e8 2c 2a 02 00       	call   f013269c <alloc_block_BF>
f010fc70:	83 c4 10             	add    $0x10,%esp
f010fc73:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010fc76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc7a:	74 17                	je     f010fc93 <test_alloc_block_BF+0x59b>
f010fc7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc7f:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc82:	3d 00 08 00 00       	cmp    $0x800,%eax
f010fc87:	75 0a                	jne    f010fc93 <test_alloc_block_BF+0x59b>
f010fc89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc8c:	8b 40 08             	mov    0x8(%eax),%eax
f010fc8f:	85 c0                	test   %eax,%eax
f010fc91:	74 17                	je     f010fcaa <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fc93:	83 ec 04             	sub    $0x4,%esp
f010fc96:	68 94 87 13 f0       	push   $0xf0138794
f010fc9b:	68 b1 01 00 00       	push   $0x1b1
f010fca0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fca5:	e8 5b 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fcaa:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010fcaf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fcb2:	83 ea 02             	sub    $0x2,%edx
f010fcb5:	39 d0                	cmp    %edx,%eax
f010fcb7:	75 13                	jne    f010fccc <test_alloc_block_BF+0x5d4>
f010fcb9:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fcbe:	83 f8 05             	cmp    $0x5,%eax
f010fcc1:	75 09                	jne    f010fccc <test_alloc_block_BF+0x5d4>
f010fcc3:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010fcc8:	85 c0                	test   %eax,%eax
f010fcca:	74 17                	je     f010fce3 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fccc:	83 ec 04             	sub    $0x4,%esp
f010fccf:	68 d8 87 13 f0       	push   $0xf01387d8
f010fcd4:	68 b5 01 00 00       	push   $0x1b5
f010fcd9:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fcde:	e8 22 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fce3:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fcea:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010fced:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010fcf4:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010fcfb:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd02:	83 ec 0c             	sub    $0xc,%esp
f010fd05:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd08:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fd0e:	50                   	push   %eax
f010fd0f:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fd12:	50                   	push   %eax
f010fd13:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fd16:	50                   	push   %eax
f010fd17:	68 64 ed 88 f0       	push   $0xf088ed64
f010fd1c:	e8 d0 14 00 00       	call   f01111f1 <check_list_data>
f010fd21:	83 c4 20             	add    $0x20,%esp
f010fd24:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd27:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd2b:	74 17                	je     f010fd44 <test_alloc_block_BF+0x64c>
f010fd2d:	83 ec 04             	sub    $0x4,%esp
f010fd30:	68 3c 88 13 f0       	push   $0xf013883c
f010fd35:	68 bd 01 00 00       	push   $0x1bd
f010fd3a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fd3f:	e8 c1 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd4a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd4d:	74 17                	je     f010fd66 <test_alloc_block_BF+0x66e>
f010fd4f:	83 ec 04             	sub    $0x4,%esp
f010fd52:	68 88 88 13 f0       	push   $0xf0138888
f010fd57:	68 be 01 00 00       	push   $0x1be
f010fd5c:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010fd61:	e8 9f 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fd66:	83 ec 0c             	sub    $0xc,%esp
f010fd69:	68 d4 88 13 f0       	push   $0xf01388d4
f010fd6e:	e8 9b 0f ff ff       	call   f0100d0e <cprintf>
f010fd73:	83 c4 10             	add    $0x10,%esp
}
f010fd76:	90                   	nop
f010fd77:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fd7a:	5b                   	pop    %ebx
f010fd7b:	5e                   	pop    %esi
f010fd7c:	5f                   	pop    %edi
f010fd7d:	5d                   	pop    %ebp
f010fd7e:	c3                   	ret    

f010fd7f <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fd7f:	55                   	push   %ebp
f010fd80:	89 e5                	mov    %esp,%ebp
f010fd82:	57                   	push   %edi
f010fd83:	56                   	push   %esi
f010fd84:	53                   	push   %ebx
f010fd85:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fd8b:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fd92:	83 ec 0c             	sub    $0xc,%esp
f010fd95:	ff 75 e0             	pushl  -0x20(%ebp)
f010fd98:	e8 70 23 02 00       	call   f013210d <initialize_MemBlocksList>
f010fd9d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fda0:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010fda7:	00 00 00 
f010fdaa:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010fdb1:	00 00 00 
f010fdb4:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010fdbb:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fdbe:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fdc1:	bb e0 86 13 f0       	mov    $0xf01386e0,%ebx
f010fdc6:	ba 08 00 00 00       	mov    $0x8,%edx
f010fdcb:	89 c7                	mov    %eax,%edi
f010fdcd:	89 de                	mov    %ebx,%esi
f010fdcf:	89 d1                	mov    %edx,%ecx
f010fdd1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fdd3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fdd6:	bb 40 8b 13 f0       	mov    $0xf0138b40,%ebx
f010fddb:	ba 08 00 00 00       	mov    $0x8,%edx
f010fde0:	89 c7                	mov    %eax,%edi
f010fde2:	89 de                	mov    %ebx,%esi
f010fde4:	89 d1                	mov    %edx,%ecx
f010fde6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fde8:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010fdef:	00 00 00 
f010fdf2:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010fdf9:	00 00 00 
f010fdfc:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010fe03:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fe06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fe0d:	e9 5f 01 00 00       	jmp    f010ff71 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fe12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe15:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fe19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe1c:	c1 e2 04             	shl    $0x4,%edx
f010fe1f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fe22:	01 da                	add    %ebx,%edx
f010fe24:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fe2a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fe2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe2f:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fe33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe36:	c1 e2 04             	shl    $0x4,%edx
f010fe39:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fe3c:	01 f2                	add    %esi,%edx
f010fe3e:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fe44:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fe46:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fe4a:	0f 85 92 00 00 00    	jne    f010fee2 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fe50:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010fe55:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe58:	c1 e2 04             	shl    $0x4,%edx
f010fe5b:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fe5e:	01 fa                	add    %edi,%edx
f010fe60:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fe66:	89 02                	mov    %eax,(%edx)
f010fe68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe6b:	c1 e0 04             	shl    $0x4,%eax
f010fe6e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fe71:	01 d8                	add    %ebx,%eax
f010fe73:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fe78:	8b 00                	mov    (%eax),%eax
f010fe7a:	85 c0                	test   %eax,%eax
f010fe7c:	74 18                	je     f010fe96 <test_alloc_block_NF+0x117>
f010fe7e:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010fe83:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fe89:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fe8c:	c1 e1 04             	shl    $0x4,%ecx
f010fe8f:	01 ca                	add    %ecx,%edx
f010fe91:	89 50 04             	mov    %edx,0x4(%eax)
f010fe94:	eb 13                	jmp    f010fea9 <test_alloc_block_NF+0x12a>
f010fe96:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fe9c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe9f:	c1 e2 04             	shl    $0x4,%edx
f010fea2:	01 d0                	add    %edx,%eax
f010fea4:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010fea9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010feaf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010feb2:	c1 e2 04             	shl    $0x4,%edx
f010feb5:	01 d0                	add    %edx,%eax
f010feb7:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010febc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010febf:	c1 e0 04             	shl    $0x4,%eax
f010fec2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fec5:	01 f0                	add    %esi,%eax
f010fec7:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fecc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fed2:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fed7:	40                   	inc    %eax
f010fed8:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010fedd:	e9 8c 00 00 00       	jmp    f010ff6e <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fee2:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010fee7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010feea:	c1 e2 04             	shl    $0x4,%edx
f010feed:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fef0:	01 fa                	add    %edi,%edx
f010fef2:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010fef8:	89 02                	mov    %eax,(%edx)
f010fefa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fefd:	c1 e0 04             	shl    $0x4,%eax
f010ff00:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ff03:	01 d8                	add    %ebx,%eax
f010ff05:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ff0a:	8b 00                	mov    (%eax),%eax
f010ff0c:	85 c0                	test   %eax,%eax
f010ff0e:	74 17                	je     f010ff27 <test_alloc_block_NF+0x1a8>
f010ff10:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010ff15:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ff1b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ff1e:	c1 e1 04             	shl    $0x4,%ecx
f010ff21:	01 ca                	add    %ecx,%edx
f010ff23:	89 10                	mov    %edx,(%eax)
f010ff25:	eb 13                	jmp    f010ff3a <test_alloc_block_NF+0x1bb>
f010ff27:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff30:	c1 e2 04             	shl    $0x4,%edx
f010ff33:	01 d0                	add    %edx,%eax
f010ff35:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010ff3a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff43:	c1 e2 04             	shl    $0x4,%edx
f010ff46:	01 d0                	add    %edx,%eax
f010ff48:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010ff4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff50:	c1 e0 04             	shl    $0x4,%eax
f010ff53:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ff56:	01 f0                	add    %esi,%eax
f010ff58:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ff5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ff63:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010ff68:	40                   	inc    %eax
f010ff69:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ff6e:	ff 45 e4             	incl   -0x1c(%ebp)
f010ff71:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ff75:	0f 8e 97 fe ff ff    	jle    f010fe12 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010ff7b:	83 ec 0c             	sub    $0xc,%esp
f010ff7e:	68 00 00 a0 00       	push   $0xa00000
f010ff83:	e8 25 29 02 00       	call   f01328ad <alloc_block_NF>
f010ff88:	83 c4 10             	add    $0x10,%esp
f010ff8b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010ff8e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ff92:	74 17                	je     f010ffab <test_alloc_block_NF+0x22c>
f010ff94:	83 ec 04             	sub    $0x4,%esp
f010ff97:	68 4c 89 13 f0       	push   $0xf013894c
f010ff9c:	68 e1 01 00 00       	push   $0x1e1
f010ffa1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ffa6:	e8 5a 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ffab:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ffb0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ffb3:	75 13                	jne    f010ffc8 <test_alloc_block_NF+0x249>
f010ffb5:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010ffba:	83 f8 08             	cmp    $0x8,%eax
f010ffbd:	75 09                	jne    f010ffc8 <test_alloc_block_NF+0x249>
f010ffbf:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ffc4:	85 c0                	test   %eax,%eax
f010ffc6:	74 17                	je     f010ffdf <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ffc8:	83 ec 04             	sub    $0x4,%esp
f010ffcb:	68 e0 84 13 f0       	push   $0xf01384e0
f010ffd0:	68 e5 01 00 00       	push   $0x1e5
f010ffd5:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010ffda:	e8 26 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ffdf:	83 ec 0c             	sub    $0xc,%esp
f010ffe2:	68 00 28 00 00       	push   $0x2800
f010ffe7:	e8 c1 28 02 00       	call   f01328ad <alloc_block_NF>
f010ffec:	83 c4 10             	add    $0x10,%esp
f010ffef:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fff2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fff6:	74 1a                	je     f0110012 <test_alloc_block_NF+0x293>
f010fff8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fffb:	8b 40 0c             	mov    0xc(%eax),%eax
f010fffe:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110003:	75 0d                	jne    f0110012 <test_alloc_block_NF+0x293>
f0110005:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110008:	8b 40 08             	mov    0x8(%eax),%eax
f011000b:	3d 00 70 00 00       	cmp    $0x7000,%eax
f0110010:	74 17                	je     f0110029 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110012:	83 ec 04             	sub    $0x4,%esp
f0110015:	68 c0 89 13 f0       	push   $0xf01389c0
f011001a:	68 ed 01 00 00       	push   $0x1ed
f011001f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110024:	e8 dc 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110029:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011002e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110031:	75 13                	jne    f0110046 <test_alloc_block_NF+0x2c7>
f0110033:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110038:	83 f8 07             	cmp    $0x7,%eax
f011003b:	75 09                	jne    f0110046 <test_alloc_block_NF+0x2c7>
f011003d:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110042:	85 c0                	test   %eax,%eax
f0110044:	74 17                	je     f011005d <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110046:	83 ec 04             	sub    $0x4,%esp
f0110049:	68 04 8a 13 f0       	push   $0xf0138a04
f011004e:	68 f1 01 00 00       	push   $0x1f1
f0110053:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110058:	e8 a8 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f011005d:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110064:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f0110067:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f011006e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f0110075:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011007c:	83 ec 0c             	sub    $0xc,%esp
f011007f:	ff 75 d8             	pushl  -0x28(%ebp)
f0110082:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110088:	50                   	push   %eax
f0110089:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011008c:	50                   	push   %eax
f011008d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110090:	50                   	push   %eax
f0110091:	68 64 ed 88 f0       	push   $0xf088ed64
f0110096:	e8 56 11 00 00       	call   f01111f1 <check_list_data>
f011009b:	83 c4 20             	add    $0x20,%esp
f011009e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01100a1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01100a5:	74 17                	je     f01100be <test_alloc_block_NF+0x33f>
f01100a7:	83 ec 04             	sub    $0x4,%esp
f01100aa:	68 68 8a 13 f0       	push   $0xf0138a68
f01100af:	68 f9 01 00 00       	push   $0x1f9
f01100b4:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01100b9:	e8 47 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01100be:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01100c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100c7:	74 17                	je     f01100e0 <test_alloc_block_NF+0x361>
f01100c9:	83 ec 04             	sub    $0x4,%esp
f01100cc:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01100d1:	68 fa 01 00 00       	push   $0x1fa
f01100d6:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01100db:	e8 25 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f01100e0:	83 ec 0c             	sub    $0xc,%esp
f01100e3:	68 00 00 20 00       	push   $0x200000
f01100e8:	e8 c0 27 02 00       	call   f01328ad <alloc_block_NF>
f01100ed:	83 c4 10             	add    $0x10,%esp
f01100f0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f01100f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100f7:	74 1a                	je     f0110113 <test_alloc_block_NF+0x394>
f01100f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01100ff:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110104:	75 0d                	jne    f0110113 <test_alloc_block_NF+0x394>
f0110106:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110109:	8b 40 08             	mov    0x8(%eax),%eax
f011010c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f0110111:	74 17                	je     f011012a <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110113:	83 ec 04             	sub    $0x4,%esp
f0110116:	68 c0 89 13 f0       	push   $0xf01389c0
f011011b:	68 03 02 00 00       	push   $0x203
f0110120:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110125:	e8 db 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011012a:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011012f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110132:	75 13                	jne    f0110147 <test_alloc_block_NF+0x3c8>
f0110134:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110139:	83 f8 06             	cmp    $0x6,%eax
f011013c:	75 09                	jne    f0110147 <test_alloc_block_NF+0x3c8>
f011013e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110143:	85 c0                	test   %eax,%eax
f0110145:	74 17                	je     f011015e <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110147:	83 ec 04             	sub    $0x4,%esp
f011014a:	68 04 8a 13 f0       	push   $0xf0138a04
f011014f:	68 07 02 00 00       	push   $0x207
f0110154:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110159:	e8 a7 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011015e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110165:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110168:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f011016f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f0110176:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011017d:	83 ec 0c             	sub    $0xc,%esp
f0110180:	ff 75 d8             	pushl  -0x28(%ebp)
f0110183:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110189:	50                   	push   %eax
f011018a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011018d:	50                   	push   %eax
f011018e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110191:	50                   	push   %eax
f0110192:	68 64 ed 88 f0       	push   $0xf088ed64
f0110197:	e8 55 10 00 00       	call   f01111f1 <check_list_data>
f011019c:	83 c4 20             	add    $0x20,%esp
f011019f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01101a2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01101a6:	74 17                	je     f01101bf <test_alloc_block_NF+0x440>
f01101a8:	83 ec 04             	sub    $0x4,%esp
f01101ab:	68 68 8a 13 f0       	push   $0xf0138a68
f01101b0:	68 0f 02 00 00       	push   $0x20f
f01101b5:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01101ba:	e8 46 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01101bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01101c5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101c8:	74 17                	je     f01101e1 <test_alloc_block_NF+0x462>
f01101ca:	83 ec 04             	sub    $0x4,%esp
f01101cd:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01101d2:	68 10 02 00 00       	push   $0x210
f01101d7:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01101dc:	e8 24 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f01101e1:	83 ec 0c             	sub    $0xc,%esp
f01101e4:	68 00 00 08 00       	push   $0x80000
f01101e9:	e8 bf 26 02 00       	call   f01328ad <alloc_block_NF>
f01101ee:	83 c4 10             	add    $0x10,%esp
f01101f1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f01101f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01101f8:	74 1a                	je     f0110214 <test_alloc_block_NF+0x495>
f01101fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01101fd:	8b 40 0c             	mov    0xc(%eax),%eax
f0110200:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110205:	75 0d                	jne    f0110214 <test_alloc_block_NF+0x495>
f0110207:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011020a:	8b 40 08             	mov    0x8(%eax),%eax
f011020d:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f0110212:	74 17                	je     f011022b <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110214:	83 ec 04             	sub    $0x4,%esp
f0110217:	68 c0 89 13 f0       	push   $0xf01389c0
f011021c:	68 19 02 00 00       	push   $0x219
f0110221:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110226:	e8 da ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011022b:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110230:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110233:	4a                   	dec    %edx
f0110234:	39 d0                	cmp    %edx,%eax
f0110236:	75 13                	jne    f011024b <test_alloc_block_NF+0x4cc>
f0110238:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f011023d:	83 f8 06             	cmp    $0x6,%eax
f0110240:	75 09                	jne    f011024b <test_alloc_block_NF+0x4cc>
f0110242:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110247:	85 c0                	test   %eax,%eax
f0110249:	74 17                	je     f0110262 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011024b:	83 ec 04             	sub    $0x4,%esp
f011024e:	68 04 8a 13 f0       	push   $0xf0138a04
f0110253:	68 1d 02 00 00       	push   $0x21d
f0110258:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011025d:	e8 a3 ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110262:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110269:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011026c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f0110273:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f011027a:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110281:	83 ec 0c             	sub    $0xc,%esp
f0110284:	ff 75 d8             	pushl  -0x28(%ebp)
f0110287:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011028d:	50                   	push   %eax
f011028e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110291:	50                   	push   %eax
f0110292:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110295:	50                   	push   %eax
f0110296:	68 64 ed 88 f0       	push   $0xf088ed64
f011029b:	e8 51 0f 00 00       	call   f01111f1 <check_list_data>
f01102a0:	83 c4 20             	add    $0x20,%esp
f01102a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01102a6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01102aa:	74 17                	je     f01102c3 <test_alloc_block_NF+0x544>
f01102ac:	83 ec 04             	sub    $0x4,%esp
f01102af:	68 68 8a 13 f0       	push   $0xf0138a68
f01102b4:	68 25 02 00 00       	push   $0x225
f01102b9:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01102be:	e8 42 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01102c3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01102c9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01102cc:	74 17                	je     f01102e5 <test_alloc_block_NF+0x566>
f01102ce:	83 ec 04             	sub    $0x4,%esp
f01102d1:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01102d6:	68 26 02 00 00       	push   $0x226
f01102db:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01102e0:	e8 20 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f01102e5:	83 ec 0c             	sub    $0xc,%esp
f01102e8:	68 00 fc 07 00       	push   $0x7fc00
f01102ed:	e8 bb 25 02 00       	call   f01328ad <alloc_block_NF>
f01102f2:	83 c4 10             	add    $0x10,%esp
f01102f5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f01102f8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01102fc:	74 1a                	je     f0110318 <test_alloc_block_NF+0x599>
f01102fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110301:	8b 40 0c             	mov    0xc(%eax),%eax
f0110304:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f0110309:	75 0d                	jne    f0110318 <test_alloc_block_NF+0x599>
f011030b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011030e:	8b 40 08             	mov    0x8(%eax),%eax
f0110311:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110316:	74 17                	je     f011032f <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110318:	83 ec 04             	sub    $0x4,%esp
f011031b:	68 c0 89 13 f0       	push   $0xf01389c0
f0110320:	68 2f 02 00 00       	push   $0x22f
f0110325:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011032a:	e8 d6 fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011032f:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110334:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110337:	83 ea 02             	sub    $0x2,%edx
f011033a:	39 d0                	cmp    %edx,%eax
f011033c:	75 13                	jne    f0110351 <test_alloc_block_NF+0x5d2>
f011033e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110343:	83 f8 06             	cmp    $0x6,%eax
f0110346:	75 09                	jne    f0110351 <test_alloc_block_NF+0x5d2>
f0110348:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f011034d:	85 c0                	test   %eax,%eax
f011034f:	74 17                	je     f0110368 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110351:	83 ec 04             	sub    $0x4,%esp
f0110354:	68 04 8a 13 f0       	push   $0xf0138a04
f0110359:	68 33 02 00 00       	push   $0x233
f011035e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110363:	e8 9d fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110368:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011036f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110372:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f0110379:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f0110380:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110387:	83 ec 0c             	sub    $0xc,%esp
f011038a:	ff 75 d8             	pushl  -0x28(%ebp)
f011038d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110393:	50                   	push   %eax
f0110394:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110397:	50                   	push   %eax
f0110398:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011039b:	50                   	push   %eax
f011039c:	68 64 ed 88 f0       	push   $0xf088ed64
f01103a1:	e8 4b 0e 00 00       	call   f01111f1 <check_list_data>
f01103a6:	83 c4 20             	add    $0x20,%esp
f01103a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01103ac:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01103b0:	74 17                	je     f01103c9 <test_alloc_block_NF+0x64a>
f01103b2:	83 ec 04             	sub    $0x4,%esp
f01103b5:	68 68 8a 13 f0       	push   $0xf0138a68
f01103ba:	68 3b 02 00 00       	push   $0x23b
f01103bf:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01103c4:	e8 3c fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01103c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01103cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01103d2:	74 17                	je     f01103eb <test_alloc_block_NF+0x66c>
f01103d4:	83 ec 04             	sub    $0x4,%esp
f01103d7:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01103dc:	68 3c 02 00 00       	push   $0x23c
f01103e1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01103e6:	e8 1a fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01103eb:	83 ec 0c             	sub    $0xc,%esp
f01103ee:	68 00 0c 00 00       	push   $0xc00
f01103f3:	e8 b5 24 02 00       	call   f01328ad <alloc_block_NF>
f01103f8:	83 c4 10             	add    $0x10,%esp
f01103fb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f01103fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110402:	74 17                	je     f011041b <test_alloc_block_NF+0x69c>
f0110404:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110407:	8b 40 0c             	mov    0xc(%eax),%eax
f011040a:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f011040f:	75 0a                	jne    f011041b <test_alloc_block_NF+0x69c>
f0110411:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110414:	8b 40 08             	mov    0x8(%eax),%eax
f0110417:	85 c0                	test   %eax,%eax
f0110419:	74 17                	je     f0110432 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011041b:	83 ec 04             	sub    $0x4,%esp
f011041e:	68 c0 89 13 f0       	push   $0xf01389c0
f0110423:	68 45 02 00 00       	push   $0x245
f0110428:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011042d:	e8 d3 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110432:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110437:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011043a:	83 ea 02             	sub    $0x2,%edx
f011043d:	39 d0                	cmp    %edx,%eax
f011043f:	75 13                	jne    f0110454 <test_alloc_block_NF+0x6d5>
f0110441:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110446:	83 f8 05             	cmp    $0x5,%eax
f0110449:	75 09                	jne    f0110454 <test_alloc_block_NF+0x6d5>
f011044b:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110450:	85 c0                	test   %eax,%eax
f0110452:	74 17                	je     f011046b <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110454:	83 ec 04             	sub    $0x4,%esp
f0110457:	68 04 8a 13 f0       	push   $0xf0138a04
f011045c:	68 49 02 00 00       	push   $0x249
f0110461:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110466:	e8 9a fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011046b:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110472:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110475:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f011047c:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f0110483:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011048a:	83 ec 0c             	sub    $0xc,%esp
f011048d:	ff 75 d8             	pushl  -0x28(%ebp)
f0110490:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110496:	50                   	push   %eax
f0110497:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011049a:	50                   	push   %eax
f011049b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011049e:	50                   	push   %eax
f011049f:	68 64 ed 88 f0       	push   $0xf088ed64
f01104a4:	e8 48 0d 00 00       	call   f01111f1 <check_list_data>
f01104a9:	83 c4 20             	add    $0x20,%esp
f01104ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104af:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104b3:	74 17                	je     f01104cc <test_alloc_block_NF+0x74d>
f01104b5:	83 ec 04             	sub    $0x4,%esp
f01104b8:	68 68 8a 13 f0       	push   $0xf0138a68
f01104bd:	68 51 02 00 00       	push   $0x251
f01104c2:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01104c7:	e8 39 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104cc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01104d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01104d5:	74 17                	je     f01104ee <test_alloc_block_NF+0x76f>
f01104d7:	83 ec 04             	sub    $0x4,%esp
f01104da:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01104df:	68 52 02 00 00       	push   $0x252
f01104e4:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01104e9:	e8 17 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01104ee:	83 ec 0c             	sub    $0xc,%esp
f01104f1:	68 00 04 00 00       	push   $0x400
f01104f6:	e8 b2 23 02 00       	call   f01328ad <alloc_block_NF>
f01104fb:	83 c4 10             	add    $0x10,%esp
f01104fe:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110501:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110505:	74 1a                	je     f0110521 <test_alloc_block_NF+0x7a2>
f0110507:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011050a:	8b 40 0c             	mov    0xc(%eax),%eax
f011050d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110512:	75 0d                	jne    f0110521 <test_alloc_block_NF+0x7a2>
f0110514:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110517:	8b 40 08             	mov    0x8(%eax),%eax
f011051a:	3d 00 20 00 00       	cmp    $0x2000,%eax
f011051f:	74 17                	je     f0110538 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110521:	83 ec 04             	sub    $0x4,%esp
f0110524:	68 c0 89 13 f0       	push   $0xf01389c0
f0110529:	68 5b 02 00 00       	push   $0x25b
f011052e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110533:	e8 cd fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110538:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011053d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110540:	83 ea 03             	sub    $0x3,%edx
f0110543:	39 d0                	cmp    %edx,%eax
f0110545:	75 13                	jne    f011055a <test_alloc_block_NF+0x7db>
f0110547:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f011054c:	83 f8 05             	cmp    $0x5,%eax
f011054f:	75 09                	jne    f011055a <test_alloc_block_NF+0x7db>
f0110551:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110556:	85 c0                	test   %eax,%eax
f0110558:	74 17                	je     f0110571 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011055a:	83 ec 04             	sub    $0x4,%esp
f011055d:	68 04 8a 13 f0       	push   $0xf0138a04
f0110562:	68 5f 02 00 00       	push   $0x25f
f0110567:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011056c:	e8 94 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110571:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110578:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f011057b:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f0110582:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110589:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110590:	83 ec 0c             	sub    $0xc,%esp
f0110593:	ff 75 d8             	pushl  -0x28(%ebp)
f0110596:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011059c:	50                   	push   %eax
f011059d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105a0:	50                   	push   %eax
f01105a1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105a4:	50                   	push   %eax
f01105a5:	68 64 ed 88 f0       	push   $0xf088ed64
f01105aa:	e8 42 0c 00 00       	call   f01111f1 <check_list_data>
f01105af:	83 c4 20             	add    $0x20,%esp
f01105b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105b5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105b9:	74 17                	je     f01105d2 <test_alloc_block_NF+0x853>
f01105bb:	83 ec 04             	sub    $0x4,%esp
f01105be:	68 68 8a 13 f0       	push   $0xf0138a68
f01105c3:	68 67 02 00 00       	push   $0x267
f01105c8:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01105cd:	e8 33 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01105d2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01105d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105db:	74 17                	je     f01105f4 <test_alloc_block_NF+0x875>
f01105dd:	83 ec 04             	sub    $0x4,%esp
f01105e0:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01105e5:	68 68 02 00 00       	push   $0x268
f01105ea:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01105ef:	e8 11 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f01105f4:	83 ec 0c             	sub    $0xc,%esp
f01105f7:	68 00 8b 13 f0       	push   $0xf0138b00
f01105fc:	e8 0d 07 ff ff       	call   f0100d0e <cprintf>
f0110601:	83 c4 10             	add    $0x10,%esp

}
f0110604:	90                   	nop
f0110605:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110608:	5b                   	pop    %ebx
f0110609:	5e                   	pop    %esi
f011060a:	5f                   	pop    %edi
f011060b:	5d                   	pop    %ebp
f011060c:	c3                   	ret    

f011060d <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f011060d:	55                   	push   %ebp
f011060e:	89 e5                	mov    %esp,%ebp
f0110610:	57                   	push   %edi
f0110611:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110617:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f011061e:	83 ec 0c             	sub    $0xc,%esp
f0110621:	ff 75 f4             	pushl  -0xc(%ebp)
f0110624:	e8 e4 1a 02 00       	call   f013210d <initialize_MemBlocksList>
f0110629:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f011062c:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f0110633:	00 00 00 
f0110636:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f011063d:	00 00 00 
f0110640:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f0110647:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f011064a:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f0110651:	00 00 00 
f0110654:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f011065b:	00 00 00 
f011065e:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f0110665:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110668:	8d 55 c0             	lea    -0x40(%ebp),%edx
f011066b:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110670:	b8 00 00 00 00       	mov    $0x0,%eax
f0110675:	89 d7                	mov    %edx,%edi
f0110677:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110679:	8d 55 98             	lea    -0x68(%ebp),%edx
f011067c:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110681:	b8 00 00 00 00       	mov    $0x0,%eax
f0110686:	89 d7                	mov    %edx,%edi
f0110688:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f011068a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110691:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110698:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f011069f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106a2:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f01106a9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01106aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ad:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01106b4:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01106b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106b8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106bc:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01106bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106c2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106c6:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f01106c9:	83 ec 0c             	sub    $0xc,%esp
f01106cc:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01106cf:	50                   	push   %eax
f01106d0:	e8 a5 27 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f01106d5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01106d8:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01106dd:	85 c0                	test   %eax,%eax
f01106df:	75 14                	jne    f01106f5 <test_insert_sorted_with_merge_freeList+0xe8>
f01106e1:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01106e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01106e9:	75 0a                	jne    f01106f5 <test_insert_sorted_with_merge_freeList+0xe8>
f01106eb:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01106f0:	83 f8 01             	cmp    $0x1,%eax
f01106f3:	74 17                	je     f011070c <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106f5:	83 ec 04             	sub    $0x4,%esp
f01106f8:	68 60 8b 13 f0       	push   $0xf0138b60
f01106fd:	68 88 02 00 00       	push   $0x288
f0110702:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110707:	e8 f9 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f011070c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110713:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011071a:	83 ec 0c             	sub    $0xc,%esp
f011071d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110720:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110723:	50                   	push   %eax
f0110724:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110727:	50                   	push   %eax
f0110728:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011072b:	50                   	push   %eax
f011072c:	68 64 ed 88 f0       	push   $0xf088ed64
f0110731:	e8 bb 0a 00 00       	call   f01111f1 <check_list_data>
f0110736:	83 c4 20             	add    $0x20,%esp
f0110739:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011073c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110740:	74 17                	je     f0110759 <test_insert_sorted_with_merge_freeList+0x14c>
f0110742:	83 ec 04             	sub    $0x4,%esp
f0110745:	68 cc 8b 13 f0       	push   $0xf0138bcc
f011074a:	68 8e 02 00 00       	push   $0x28e
f011074f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110754:	e8 ac fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110759:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011075c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011075f:	74 17                	je     f0110778 <test_insert_sorted_with_merge_freeList+0x16b>
f0110761:	83 ec 04             	sub    $0x4,%esp
f0110764:	68 20 8c 13 f0       	push   $0xf0138c20
f0110769:	68 8f 02 00 00       	push   $0x28f
f011076e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110773:	e8 8d fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110778:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f011077f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110782:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110789:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f011078a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011078d:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110794:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110795:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110798:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011079c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f01107a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107a5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107a9:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01107ac:	83 ec 0c             	sub    $0xc,%esp
f01107af:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01107b5:	50                   	push   %eax
f01107b6:	e8 bf 26 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f01107bb:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01107be:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01107c3:	85 c0                	test   %eax,%eax
f01107c5:	75 14                	jne    f01107db <test_insert_sorted_with_merge_freeList+0x1ce>
f01107c7:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01107cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01107cf:	75 0a                	jne    f01107db <test_insert_sorted_with_merge_freeList+0x1ce>
f01107d1:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01107d6:	83 f8 02             	cmp    $0x2,%eax
f01107d9:	74 17                	je     f01107f2 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01107db:	83 ec 04             	sub    $0x4,%esp
f01107de:	68 60 8b 13 f0       	push   $0xf0138b60
f01107e3:	68 9e 02 00 00       	push   $0x29e
f01107e8:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01107ed:	e8 13 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01107f2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f01107f9:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110800:	83 ec 0c             	sub    $0xc,%esp
f0110803:	ff 75 f0             	pushl  -0x10(%ebp)
f0110806:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110809:	50                   	push   %eax
f011080a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011080d:	50                   	push   %eax
f011080e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110811:	50                   	push   %eax
f0110812:	68 64 ed 88 f0       	push   $0xf088ed64
f0110817:	e8 d5 09 00 00       	call   f01111f1 <check_list_data>
f011081c:	83 c4 20             	add    $0x20,%esp
f011081f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110822:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110826:	74 17                	je     f011083f <test_insert_sorted_with_merge_freeList+0x232>
f0110828:	83 ec 04             	sub    $0x4,%esp
f011082b:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110830:	68 a4 02 00 00       	push   $0x2a4
f0110835:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011083a:	e8 c6 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011083f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110842:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110845:	74 17                	je     f011085e <test_insert_sorted_with_merge_freeList+0x251>
f0110847:	83 ec 04             	sub    $0x4,%esp
f011084a:	68 20 8c 13 f0       	push   $0xf0138c20
f011084f:	68 a5 02 00 00       	push   $0x2a5
f0110854:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110859:	e8 a7 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f011085e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110865:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110868:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f011086f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110870:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110873:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011087a:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011087b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011087e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110882:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110888:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011088b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011088f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110895:	83 ec 0c             	sub    $0xc,%esp
f0110898:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f011089e:	50                   	push   %eax
f011089f:	e8 d6 25 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f01108a4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01108a7:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01108ac:	85 c0                	test   %eax,%eax
f01108ae:	75 14                	jne    f01108c4 <test_insert_sorted_with_merge_freeList+0x2b7>
f01108b0:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01108b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01108b8:	75 0a                	jne    f01108c4 <test_insert_sorted_with_merge_freeList+0x2b7>
f01108ba:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01108bf:	83 f8 03             	cmp    $0x3,%eax
f01108c2:	74 17                	je     f01108db <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01108c4:	83 ec 04             	sub    $0x4,%esp
f01108c7:	68 60 8b 13 f0       	push   $0xf0138b60
f01108cc:	68 b4 02 00 00       	push   $0x2b4
f01108d1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01108d6:	e8 2a f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01108db:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01108e2:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01108e9:	83 ec 0c             	sub    $0xc,%esp
f01108ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01108ef:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108f2:	50                   	push   %eax
f01108f3:	8d 45 98             	lea    -0x68(%ebp),%eax
f01108f6:	50                   	push   %eax
f01108f7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01108fa:	50                   	push   %eax
f01108fb:	68 64 ed 88 f0       	push   $0xf088ed64
f0110900:	e8 ec 08 00 00       	call   f01111f1 <check_list_data>
f0110905:	83 c4 20             	add    $0x20,%esp
f0110908:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011090b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011090f:	74 17                	je     f0110928 <test_insert_sorted_with_merge_freeList+0x31b>
f0110911:	83 ec 04             	sub    $0x4,%esp
f0110914:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110919:	68 ba 02 00 00       	push   $0x2ba
f011091e:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110923:	e8 dd f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110928:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011092b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011092e:	74 17                	je     f0110947 <test_insert_sorted_with_merge_freeList+0x33a>
f0110930:	83 ec 04             	sub    $0x4,%esp
f0110933:	68 20 8c 13 f0       	push   $0xf0138c20
f0110938:	68 bb 02 00 00       	push   $0x2bb
f011093d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110942:	e8 be f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110947:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f011094e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110951:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110958:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110959:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011095c:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110963:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110964:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110967:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011096b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110971:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110974:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110978:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f011097e:	83 ec 0c             	sub    $0xc,%esp
f0110981:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110987:	50                   	push   %eax
f0110988:	e8 ed 24 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f011098d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110990:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110995:	85 c0                	test   %eax,%eax
f0110997:	75 14                	jne    f01109ad <test_insert_sorted_with_merge_freeList+0x3a0>
f0110999:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011099e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01109a1:	75 0a                	jne    f01109ad <test_insert_sorted_with_merge_freeList+0x3a0>
f01109a3:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01109a8:	83 f8 04             	cmp    $0x4,%eax
f01109ab:	74 17                	je     f01109c4 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109ad:	83 ec 04             	sub    $0x4,%esp
f01109b0:	68 60 8b 13 f0       	push   $0xf0138b60
f01109b5:	68 ca 02 00 00       	push   $0x2ca
f01109ba:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01109bf:	e8 41 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01109c4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01109cb:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01109d2:	83 ec 0c             	sub    $0xc,%esp
f01109d5:	ff 75 f0             	pushl  -0x10(%ebp)
f01109d8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109db:	50                   	push   %eax
f01109dc:	8d 45 98             	lea    -0x68(%ebp),%eax
f01109df:	50                   	push   %eax
f01109e0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01109e3:	50                   	push   %eax
f01109e4:	68 64 ed 88 f0       	push   $0xf088ed64
f01109e9:	e8 03 08 00 00       	call   f01111f1 <check_list_data>
f01109ee:	83 c4 20             	add    $0x20,%esp
f01109f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01109f4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01109f8:	74 17                	je     f0110a11 <test_insert_sorted_with_merge_freeList+0x404>
f01109fa:	83 ec 04             	sub    $0x4,%esp
f01109fd:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110a02:	68 d0 02 00 00       	push   $0x2d0
f0110a07:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110a0c:	e8 f4 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a11:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a17:	74 17                	je     f0110a30 <test_insert_sorted_with_merge_freeList+0x423>
f0110a19:	83 ec 04             	sub    $0x4,%esp
f0110a1c:	68 20 8c 13 f0       	push   $0xf0138c20
f0110a21:	68 d1 02 00 00       	push   $0x2d1
f0110a26:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110a2b:	e8 d5 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110a30:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110a37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a3a:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110a41:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a45:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110a4c:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110a4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a50:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a54:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110a5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a5d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a61:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110a67:	83 ec 0c             	sub    $0xc,%esp
f0110a6a:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110a70:	50                   	push   %eax
f0110a71:	e8 04 24 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f0110a76:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110a79:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110a7e:	85 c0                	test   %eax,%eax
f0110a80:	75 17                	jne    f0110a99 <test_insert_sorted_with_merge_freeList+0x48c>
f0110a82:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110a87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110a8a:	42                   	inc    %edx
f0110a8b:	39 d0                	cmp    %edx,%eax
f0110a8d:	75 0a                	jne    f0110a99 <test_insert_sorted_with_merge_freeList+0x48c>
f0110a8f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110a94:	83 f8 04             	cmp    $0x4,%eax
f0110a97:	74 17                	je     f0110ab0 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a99:	83 ec 04             	sub    $0x4,%esp
f0110a9c:	68 60 8b 13 f0       	push   $0xf0138b60
f0110aa1:	68 e3 02 00 00       	push   $0x2e3
f0110aa6:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110aab:	e8 55 f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110ab0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110ab7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110abe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110ac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac7:	48                   	dec    %eax
f0110ac8:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110acc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110acf:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ad3:	01 c8                	add    %ecx,%eax
f0110ad5:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110adc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110ae3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ae7:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110aee:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110aef:	83 ec 0c             	sub    $0xc,%esp
f0110af2:	ff 75 f0             	pushl  -0x10(%ebp)
f0110af5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110af8:	50                   	push   %eax
f0110af9:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110afc:	50                   	push   %eax
f0110afd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b00:	50                   	push   %eax
f0110b01:	68 64 ed 88 f0       	push   $0xf088ed64
f0110b06:	e8 e6 06 00 00       	call   f01111f1 <check_list_data>
f0110b0b:	83 c4 20             	add    $0x20,%esp
f0110b0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b11:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b15:	74 17                	je     f0110b2e <test_insert_sorted_with_merge_freeList+0x521>
f0110b17:	83 ec 04             	sub    $0x4,%esp
f0110b1a:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110b1f:	68 ec 02 00 00       	push   $0x2ec
f0110b24:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110b29:	e8 d7 f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b31:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b34:	74 17                	je     f0110b4d <test_insert_sorted_with_merge_freeList+0x540>
f0110b36:	83 ec 04             	sub    $0x4,%esp
f0110b39:	68 20 8c 13 f0       	push   $0xf0138c20
f0110b3e:	68 ed 02 00 00       	push   $0x2ed
f0110b43:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110b48:	e8 b8 f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110b4d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110b54:	83 ec 0c             	sub    $0xc,%esp
f0110b57:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b5a:	50                   	push   %eax
f0110b5b:	e8 5d 07 00 00       	call   f01112bd <check_avaliable_list_data>
f0110b60:	83 c4 10             	add    $0x10,%esp
f0110b63:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b69:	8d 50 01             	lea    0x1(%eax),%edx
f0110b6c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b6f:	39 c2                	cmp    %eax,%edx
f0110b71:	74 17                	je     f0110b8a <test_insert_sorted_with_merge_freeList+0x57d>
f0110b73:	83 ec 04             	sub    $0x4,%esp
f0110b76:	68 74 8c 13 f0       	push   $0xf0138c74
f0110b7b:	68 f2 02 00 00       	push   $0x2f2
f0110b80:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110b85:	e8 7b f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110b8a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b8e:	74 17                	je     f0110ba7 <test_insert_sorted_with_merge_freeList+0x59a>
f0110b90:	83 ec 04             	sub    $0x4,%esp
f0110b93:	68 cc 8c 13 f0       	push   $0xf0138ccc
f0110b98:	68 f3 02 00 00       	push   $0x2f3
f0110b9d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110ba2:	e8 5e f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110ba7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb1:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110bb8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110bb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bbc:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110bc3:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bc7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bcb:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bd8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110bde:	83 ec 0c             	sub    $0xc,%esp
f0110be1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110be7:	50                   	push   %eax
f0110be8:	e8 8d 22 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f0110bed:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110bf0:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110bf5:	85 c0                	test   %eax,%eax
f0110bf7:	75 19                	jne    f0110c12 <test_insert_sorted_with_merge_freeList+0x605>
f0110bf9:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110bfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c01:	83 c2 02             	add    $0x2,%edx
f0110c04:	39 d0                	cmp    %edx,%eax
f0110c06:	75 0a                	jne    f0110c12 <test_insert_sorted_with_merge_freeList+0x605>
f0110c08:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110c0d:	83 f8 04             	cmp    $0x4,%eax
f0110c10:	74 17                	je     f0110c29 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c12:	83 ec 04             	sub    $0x4,%esp
f0110c15:	68 60 8b 13 f0       	push   $0xf0138b60
f0110c1a:	68 05 03 00 00       	push   $0x305
f0110c1f:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110c24:	e8 dc f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c29:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110c30:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110c37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c3a:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c40:	48                   	dec    %eax
f0110c41:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c48:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c4c:	01 c8                	add    %ecx,%eax
f0110c4e:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c55:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c5c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110c5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c60:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110c67:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c68:	83 ec 0c             	sub    $0xc,%esp
f0110c6b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c6e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c71:	50                   	push   %eax
f0110c72:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c75:	50                   	push   %eax
f0110c76:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c79:	50                   	push   %eax
f0110c7a:	68 64 ed 88 f0       	push   $0xf088ed64
f0110c7f:	e8 6d 05 00 00       	call   f01111f1 <check_list_data>
f0110c84:	83 c4 20             	add    $0x20,%esp
f0110c87:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c8a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c8e:	74 17                	je     f0110ca7 <test_insert_sorted_with_merge_freeList+0x69a>
f0110c90:	83 ec 04             	sub    $0x4,%esp
f0110c93:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110c98:	68 0e 03 00 00       	push   $0x30e
f0110c9d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110ca2:	e8 5e f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ca7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110caa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110cad:	74 17                	je     f0110cc6 <test_insert_sorted_with_merge_freeList+0x6b9>
f0110caf:	83 ec 04             	sub    $0x4,%esp
f0110cb2:	68 20 8c 13 f0       	push   $0xf0138c20
f0110cb7:	68 0f 03 00 00       	push   $0x30f
f0110cbc:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110cc1:	e8 3f f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110cc6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110ccd:	83 ec 0c             	sub    $0xc,%esp
f0110cd0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110cd3:	50                   	push   %eax
f0110cd4:	e8 e4 05 00 00       	call   f01112bd <check_avaliable_list_data>
f0110cd9:	83 c4 10             	add    $0x10,%esp
f0110cdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ce2:	8d 50 02             	lea    0x2(%eax),%edx
f0110ce5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ce8:	39 c2                	cmp    %eax,%edx
f0110cea:	74 17                	je     f0110d03 <test_insert_sorted_with_merge_freeList+0x6f6>
f0110cec:	83 ec 04             	sub    $0x4,%esp
f0110cef:	68 74 8c 13 f0       	push   $0xf0138c74
f0110cf4:	68 14 03 00 00       	push   $0x314
f0110cf9:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110cfe:	e8 02 f5 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d03:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d07:	74 17                	je     f0110d20 <test_insert_sorted_with_merge_freeList+0x713>
f0110d09:	83 ec 04             	sub    $0x4,%esp
f0110d0c:	68 cc 8c 13 f0       	push   $0xf0138ccc
f0110d11:	68 15 03 00 00       	push   $0x315
f0110d16:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110d1b:	e8 e5 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110d20:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110d27:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d2a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d31:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d35:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110d3c:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d40:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d44:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110d4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d4d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d51:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110d57:	83 ec 0c             	sub    $0xc,%esp
f0110d5a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110d60:	50                   	push   %eax
f0110d61:	e8 14 21 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f0110d66:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110d69:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110d6e:	85 c0                	test   %eax,%eax
f0110d70:	75 19                	jne    f0110d8b <test_insert_sorted_with_merge_freeList+0x77e>
f0110d72:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110d77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110d7a:	83 c2 03             	add    $0x3,%edx
f0110d7d:	39 d0                	cmp    %edx,%eax
f0110d7f:	75 0a                	jne    f0110d8b <test_insert_sorted_with_merge_freeList+0x77e>
f0110d81:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110d86:	83 f8 04             	cmp    $0x4,%eax
f0110d89:	74 17                	je     f0110da2 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d8b:	83 ec 04             	sub    $0x4,%esp
f0110d8e:	68 60 8b 13 f0       	push   $0xf0138b60
f0110d93:	68 28 03 00 00       	push   $0x328
f0110d98:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110d9d:	e8 63 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110da2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110da9:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db3:	8d 50 01             	lea    0x1(%eax),%edx
f0110db6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110dbd:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110dc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc4:	8d 50 01             	lea    0x1(%eax),%edx
f0110dc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dca:	40                   	inc    %eax
f0110dcb:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dd2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110dd6:	01 c8                	add    %ecx,%eax
f0110dd8:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110ddc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ddf:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110de6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110de7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dea:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110df1:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110df2:	83 ec 0c             	sub    $0xc,%esp
f0110df5:	ff 75 f0             	pushl  -0x10(%ebp)
f0110df8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110dfb:	50                   	push   %eax
f0110dfc:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110dff:	50                   	push   %eax
f0110e00:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e03:	50                   	push   %eax
f0110e04:	68 64 ed 88 f0       	push   $0xf088ed64
f0110e09:	e8 e3 03 00 00       	call   f01111f1 <check_list_data>
f0110e0e:	83 c4 20             	add    $0x20,%esp
f0110e11:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e14:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e18:	74 17                	je     f0110e31 <test_insert_sorted_with_merge_freeList+0x824>
f0110e1a:	83 ec 04             	sub    $0x4,%esp
f0110e1d:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110e22:	68 32 03 00 00       	push   $0x332
f0110e27:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110e2c:	e8 d4 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e31:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e37:	74 17                	je     f0110e50 <test_insert_sorted_with_merge_freeList+0x843>
f0110e39:	83 ec 04             	sub    $0x4,%esp
f0110e3c:	68 20 8c 13 f0       	push   $0xf0138c20
f0110e41:	68 33 03 00 00       	push   $0x333
f0110e46:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110e4b:	e8 b5 f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110e50:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110e57:	83 ec 0c             	sub    $0xc,%esp
f0110e5a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e5d:	50                   	push   %eax
f0110e5e:	e8 5a 04 00 00       	call   f01112bd <check_avaliable_list_data>
f0110e63:	83 c4 10             	add    $0x10,%esp
f0110e66:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110e6c:	8d 50 03             	lea    0x3(%eax),%edx
f0110e6f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e72:	39 c2                	cmp    %eax,%edx
f0110e74:	74 17                	je     f0110e8d <test_insert_sorted_with_merge_freeList+0x880>
f0110e76:	83 ec 04             	sub    $0x4,%esp
f0110e79:	68 74 8c 13 f0       	push   $0xf0138c74
f0110e7e:	68 38 03 00 00       	push   $0x338
f0110e83:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110e88:	e8 78 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110e8d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e91:	74 17                	je     f0110eaa <test_insert_sorted_with_merge_freeList+0x89d>
f0110e93:	83 ec 04             	sub    $0x4,%esp
f0110e96:	68 cc 8c 13 f0       	push   $0xf0138ccc
f0110e9b:	68 39 03 00 00       	push   $0x339
f0110ea0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110ea5:	e8 5b f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110eaa:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110eb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110eb4:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110ebb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110ebc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ebf:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110ec6:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110eca:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ece:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ed7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110edb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110ee1:	83 ec 0c             	sub    $0xc,%esp
f0110ee4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110eea:	50                   	push   %eax
f0110eeb:	e8 8a 1f 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f0110ef0:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ef3:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110ef8:	85 c0                	test   %eax,%eax
f0110efa:	75 19                	jne    f0110f15 <test_insert_sorted_with_merge_freeList+0x908>
f0110efc:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110f01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f04:	83 c2 04             	add    $0x4,%edx
f0110f07:	39 d0                	cmp    %edx,%eax
f0110f09:	75 0a                	jne    f0110f15 <test_insert_sorted_with_merge_freeList+0x908>
f0110f0b:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110f10:	83 f8 04             	cmp    $0x4,%eax
f0110f13:	74 17                	je     f0110f2c <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f15:	83 ec 04             	sub    $0x4,%esp
f0110f18:	68 60 8b 13 f0       	push   $0xf0138b60
f0110f1d:	68 4c 03 00 00       	push   $0x34c
f0110f22:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110f27:	e8 d9 f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f2c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f33:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110f3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f3d:	8d 50 01             	lea    0x1(%eax),%edx
f0110f40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f43:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f47:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f4e:	8d 50 01             	lea    0x1(%eax),%edx
f0110f51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f54:	40                   	inc    %eax
f0110f55:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f5c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f60:	01 c8                	add    %ecx,%eax
f0110f62:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f69:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f70:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f71:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f74:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110f7b:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110f7c:	83 ec 0c             	sub    $0xc,%esp
f0110f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f82:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f85:	50                   	push   %eax
f0110f86:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f89:	50                   	push   %eax
f0110f8a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f8d:	50                   	push   %eax
f0110f8e:	68 64 ed 88 f0       	push   $0xf088ed64
f0110f93:	e8 59 02 00 00       	call   f01111f1 <check_list_data>
f0110f98:	83 c4 20             	add    $0x20,%esp
f0110f9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110f9e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fa2:	74 17                	je     f0110fbb <test_insert_sorted_with_merge_freeList+0x9ae>
f0110fa4:	83 ec 04             	sub    $0x4,%esp
f0110fa7:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0110fac:	68 56 03 00 00       	push   $0x356
f0110fb1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110fb6:	e8 4a f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110fbb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fbe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110fc1:	74 17                	je     f0110fda <test_insert_sorted_with_merge_freeList+0x9cd>
f0110fc3:	83 ec 04             	sub    $0x4,%esp
f0110fc6:	68 20 8c 13 f0       	push   $0xf0138c20
f0110fcb:	68 57 03 00 00       	push   $0x357
f0110fd0:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0110fd5:	e8 2b f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110fda:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110fe1:	83 ec 0c             	sub    $0xc,%esp
f0110fe4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fe7:	50                   	push   %eax
f0110fe8:	e8 d0 02 00 00       	call   f01112bd <check_avaliable_list_data>
f0110fed:	83 c4 10             	add    $0x10,%esp
f0110ff0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ff6:	8d 50 04             	lea    0x4(%eax),%edx
f0110ff9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ffc:	39 c2                	cmp    %eax,%edx
f0110ffe:	74 17                	je     f0111017 <test_insert_sorted_with_merge_freeList+0xa0a>
f0111000:	83 ec 04             	sub    $0x4,%esp
f0111003:	68 74 8c 13 f0       	push   $0xf0138c74
f0111008:	68 5c 03 00 00       	push   $0x35c
f011100d:	68 b4 7f 13 f0       	push   $0xf0137fb4
f0111012:	e8 ee f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111017:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011101b:	74 17                	je     f0111034 <test_insert_sorted_with_merge_freeList+0xa27>
f011101d:	83 ec 04             	sub    $0x4,%esp
f0111020:	68 cc 8c 13 f0       	push   $0xf0138ccc
f0111025:	68 5d 03 00 00       	push   $0x35d
f011102a:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011102f:	e8 d1 f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111034:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f011103b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011103e:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111045:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111046:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111049:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0111050:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111051:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111054:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111058:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f011105e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111061:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111065:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f011106b:	83 ec 0c             	sub    $0xc,%esp
f011106e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111074:	50                   	push   %eax
f0111075:	e8 00 1e 02 00       	call   f0132e7a <insert_sorted_with_merge_freeList>
f011107a:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011107d:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0111082:	85 c0                	test   %eax,%eax
f0111084:	75 19                	jne    f011109f <test_insert_sorted_with_merge_freeList+0xa92>
f0111086:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011108b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011108e:	83 c2 06             	add    $0x6,%edx
f0111091:	39 d0                	cmp    %edx,%eax
f0111093:	75 0a                	jne    f011109f <test_insert_sorted_with_merge_freeList+0xa92>
f0111095:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f011109a:	83 f8 03             	cmp    $0x3,%eax
f011109d:	74 17                	je     f01110b6 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011109f:	83 ec 04             	sub    $0x4,%esp
f01110a2:	68 60 8b 13 f0       	push   $0xf0138b60
f01110a7:	68 70 03 00 00       	push   $0x370
f01110ac:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01110b1:	e8 4f f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01110b6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01110bd:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01110c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110c7:	48                   	dec    %eax
f01110c8:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01110cf:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01110d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110d3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01110d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110d9:	48                   	dec    %eax
f01110da:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01110de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110e1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110e5:	01 c1                	add    %eax,%ecx
f01110e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110ea:	40                   	inc    %eax
f01110eb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110ef:	01 c8                	add    %ecx,%eax
f01110f1:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01110f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110f8:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01110ff:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111100:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111103:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011110a:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f011110b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011110e:	40                   	inc    %eax
f011110f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111116:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111117:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011111a:	40                   	inc    %eax
f011111b:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111122:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111123:	83 ec 0c             	sub    $0xc,%esp
f0111126:	ff 75 f0             	pushl  -0x10(%ebp)
f0111129:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011112c:	50                   	push   %eax
f011112d:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111130:	50                   	push   %eax
f0111131:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111134:	50                   	push   %eax
f0111135:	68 64 ed 88 f0       	push   $0xf088ed64
f011113a:	e8 b2 00 00 00       	call   f01111f1 <check_list_data>
f011113f:	83 c4 20             	add    $0x20,%esp
f0111142:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111145:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111149:	74 17                	je     f0111162 <test_insert_sorted_with_merge_freeList+0xb55>
f011114b:	83 ec 04             	sub    $0x4,%esp
f011114e:	68 cc 8b 13 f0       	push   $0xf0138bcc
f0111153:	68 7c 03 00 00       	push   $0x37c
f0111158:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011115d:	e8 a3 f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111162:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111165:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111168:	74 17                	je     f0111181 <test_insert_sorted_with_merge_freeList+0xb74>
f011116a:	83 ec 04             	sub    $0x4,%esp
f011116d:	68 20 8c 13 f0       	push   $0xf0138c20
f0111172:	68 7d 03 00 00       	push   $0x37d
f0111177:	68 b4 7f 13 f0       	push   $0xf0137fb4
f011117c:	e8 84 f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111181:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111188:	83 ec 0c             	sub    $0xc,%esp
f011118b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011118e:	50                   	push   %eax
f011118f:	e8 29 01 00 00       	call   f01112bd <check_avaliable_list_data>
f0111194:	83 c4 10             	add    $0x10,%esp
f0111197:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011119a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011119d:	8d 50 06             	lea    0x6(%eax),%edx
f01111a0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01111a3:	39 c2                	cmp    %eax,%edx
f01111a5:	74 17                	je     f01111be <test_insert_sorted_with_merge_freeList+0xbb1>
f01111a7:	83 ec 04             	sub    $0x4,%esp
f01111aa:	68 74 8c 13 f0       	push   $0xf0138c74
f01111af:	68 82 03 00 00       	push   $0x382
f01111b4:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01111b9:	e8 47 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01111be:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111c2:	74 17                	je     f01111db <test_insert_sorted_with_merge_freeList+0xbce>
f01111c4:	83 ec 04             	sub    $0x4,%esp
f01111c7:	68 cc 8c 13 f0       	push   $0xf0138ccc
f01111cc:	68 83 03 00 00       	push   $0x383
f01111d1:	68 b4 7f 13 f0       	push   $0xf0137fb4
f01111d6:	e8 2a f0 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01111db:	83 ec 0c             	sub    $0xc,%esp
f01111de:	68 28 8d 13 f0       	push   $0xf0138d28
f01111e3:	e8 26 fb fe ff       	call   f0100d0e <cprintf>
f01111e8:	83 c4 10             	add    $0x10,%esp

}
f01111eb:	90                   	nop
f01111ec:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01111ef:	c9                   	leave  
f01111f0:	c3                   	ret    

f01111f1 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01111f1:	55                   	push   %ebp
f01111f2:	89 e5                	mov    %esp,%ebp
f01111f4:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01111f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01111fe:	8b 45 14             	mov    0x14(%ebp),%eax
f0111201:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111207:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f011120e:	8b 45 08             	mov    0x8(%ebp),%eax
f0111211:	8b 00                	mov    (%eax),%eax
f0111213:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111216:	eb 6e                	jmp    f0111286 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111218:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f011121b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011121e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111225:	8b 45 10             	mov    0x10(%ebp),%eax
f0111228:	01 d0                	add    %edx,%eax
f011122a:	8b 00                	mov    (%eax),%eax
f011122c:	85 c0                	test   %eax,%eax
f011122e:	74 e8                	je     f0111218 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0111230:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111233:	8b 50 08             	mov    0x8(%eax),%edx
f0111236:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111239:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111240:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111243:	01 c8                	add    %ecx,%eax
f0111245:	8b 00                	mov    (%eax),%eax
f0111247:	39 c2                	cmp    %eax,%edx
f0111249:	75 1b                	jne    f0111266 <check_list_data+0x75>
f011124b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011124e:	8b 50 0c             	mov    0xc(%eax),%edx
f0111251:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111254:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011125b:	8b 45 10             	mov    0x10(%ebp),%eax
f011125e:	01 c8                	add    %ecx,%eax
f0111260:	8b 00                	mov    (%eax),%eax
f0111262:	39 c2                	cmp    %eax,%edx
f0111264:	74 07                	je     f011126d <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0111266:	b8 00 00 00 00       	mov    $0x0,%eax
f011126b:	eb 4e                	jmp    f01112bb <check_list_data+0xca>
		}
		(*size)++;
f011126d:	8b 45 14             	mov    0x14(%ebp),%eax
f0111270:	8b 00                	mov    (%eax),%eax
f0111272:	8d 50 01             	lea    0x1(%eax),%edx
f0111275:	8b 45 14             	mov    0x14(%ebp),%eax
f0111278:	89 10                	mov    %edx,(%eax)
		i++;
f011127a:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f011127d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111280:	8b 40 08             	mov    0x8(%eax),%eax
f0111283:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111286:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011128a:	74 07                	je     f0111293 <check_list_data+0xa2>
f011128c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011128f:	8b 00                	mov    (%eax),%eax
f0111291:	eb 05                	jmp    f0111298 <check_list_data+0xa7>
f0111293:	b8 00 00 00 00       	mov    $0x0,%eax
f0111298:	8b 55 08             	mov    0x8(%ebp),%edx
f011129b:	89 42 08             	mov    %eax,0x8(%edx)
f011129e:	8b 45 08             	mov    0x8(%ebp),%eax
f01112a1:	8b 40 08             	mov    0x8(%eax),%eax
f01112a4:	85 c0                	test   %eax,%eax
f01112a6:	0f 85 6f ff ff ff    	jne    f011121b <check_list_data+0x2a>
f01112ac:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01112b0:	0f 85 65 ff ff ff    	jne    f011121b <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01112b6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01112bb:	c9                   	leave  
f01112bc:	c3                   	ret    

f01112bd <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01112bd:	55                   	push   %ebp
f01112be:	89 e5                	mov    %esp,%ebp
f01112c0:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01112c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01112ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01112cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01112d3:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01112d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01112db:	eb 30                	jmp    f011130d <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01112dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112e0:	8b 40 08             	mov    0x8(%eax),%eax
f01112e3:	85 c0                	test   %eax,%eax
f01112e5:	75 0a                	jne    f01112f1 <check_avaliable_list_data+0x34>
f01112e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112ea:	8b 40 0c             	mov    0xc(%eax),%eax
f01112ed:	85 c0                	test   %eax,%eax
f01112ef:	74 07                	je     f01112f8 <check_avaliable_list_data+0x3b>
		{
			return 0;
f01112f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01112f6:	eb 40                	jmp    f0111338 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f01112f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01112fb:	8b 00                	mov    (%eax),%eax
f01112fd:	8d 50 01             	lea    0x1(%eax),%edx
f0111300:	8b 45 08             	mov    0x8(%ebp),%eax
f0111303:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111305:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f011130a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011130d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111311:	74 07                	je     f011131a <check_avaliable_list_data+0x5d>
f0111313:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111316:	8b 00                	mov    (%eax),%eax
f0111318:	eb 05                	jmp    f011131f <check_avaliable_list_data+0x62>
f011131a:	b8 00 00 00 00       	mov    $0x0,%eax
f011131f:	a3 a0 ed 88 f0       	mov    %eax,0xf088eda0
f0111324:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f0111329:	85 c0                	test   %eax,%eax
f011132b:	75 b0                	jne    f01112dd <check_avaliable_list_data+0x20>
f011132d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111331:	75 aa                	jne    f01112dd <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111333:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111338:	c9                   	leave  
f0111339:	c3                   	ret    

f011133a <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011133a:	55                   	push   %ebp
f011133b:	89 e5                	mov    %esp,%ebp
f011133d:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0111340:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111347:	8b 45 08             	mov    0x8(%ebp),%eax
f011134a:	8b 00                	mov    (%eax),%eax
f011134c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011134f:	eb 27                	jmp    f0111378 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0111351:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111354:	8b 50 0c             	mov    0xc(%eax),%edx
f0111357:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011135a:	8b 40 08             	mov    0x8(%eax),%eax
f011135d:	83 ec 04             	sub    $0x4,%esp
f0111360:	52                   	push   %edx
f0111361:	50                   	push   %eax
f0111362:	68 78 80 13 f0       	push   $0xf0138078
f0111367:	e8 a2 f9 fe ff       	call   f0100d0e <cprintf>
f011136c:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f011136f:	8b 45 08             	mov    0x8(%ebp),%eax
f0111372:	8b 40 08             	mov    0x8(%eax),%eax
f0111375:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111378:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011137c:	74 07                	je     f0111385 <show_list_content+0x4b>
f011137e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111381:	8b 00                	mov    (%eax),%eax
f0111383:	eb 05                	jmp    f011138a <show_list_content+0x50>
f0111385:	b8 00 00 00 00       	mov    $0x0,%eax
f011138a:	8b 55 08             	mov    0x8(%ebp),%edx
f011138d:	89 42 08             	mov    %eax,0x8(%edx)
f0111390:	8b 45 08             	mov    0x8(%ebp),%eax
f0111393:	8b 40 08             	mov    0x8(%eax),%eax
f0111396:	85 c0                	test   %eax,%eax
f0111398:	75 b7                	jne    f0111351 <show_list_content+0x17>
f011139a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011139e:	75 b1                	jne    f0111351 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01113a0:	90                   	nop
f01113a1:	c9                   	leave  
f01113a2:	c3                   	ret    

f01113a3 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01113a3:	55                   	push   %ebp
f01113a4:	89 e5                	mov    %esp,%ebp
f01113a6:	57                   	push   %edi
f01113a7:	56                   	push   %esi
f01113a8:	53                   	push   %ebx
f01113a9:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01113af:	83 ec 0c             	sub    $0xc,%esp
f01113b2:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01113b7:	e8 52 f9 fe ff       	call   f0100d0e <cprintf>
f01113bc:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01113bf:	83 ec 0c             	sub    $0xc,%esp
f01113c2:	68 a0 8d 13 f0       	push   $0xf0138da0
f01113c7:	e8 42 f9 fe ff       	call   f0100d0e <cprintf>
f01113cc:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01113cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01113d6:	83 ec 0c             	sub    $0xc,%esp
f01113d9:	68 bc 8d 13 f0       	push   $0xf0138dbc
f01113de:	e8 2b f9 fe ff       	call   f0100d0e <cprintf>
f01113e3:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01113e6:	8d 45 80             	lea    -0x80(%ebp),%eax
f01113e9:	bb 76 8e 13 f0       	mov    $0xf0138e76,%ebx
f01113ee:	ba 03 00 00 00       	mov    $0x3,%edx
f01113f3:	89 c7                	mov    %eax,%edi
f01113f5:	89 de                	mov    %ebx,%esi
f01113f7:	89 d1                	mov    %edx,%ecx
f01113f9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01113fb:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01113fe:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111403:	b8 00 00 00 00       	mov    $0x0,%eax
f0111408:	89 d7                	mov    %edx,%edi
f011140a:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f011140c:	83 ec 0c             	sub    $0xc,%esp
f011140f:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111412:	50                   	push   %eax
f0111413:	e8 58 f9 fe ff       	call   f0100d70 <execute_command>
f0111418:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011141b:	83 ec 0c             	sub    $0xc,%esp
f011141e:	68 ea 8d 13 f0       	push   $0xf0138dea
f0111423:	e8 e6 f8 fe ff       	call   f0100d0e <cprintf>
f0111428:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f011142b:	83 ec 0c             	sub    $0xc,%esp
f011142e:	68 00 8e 13 f0       	push   $0xf0138e00
f0111433:	e8 d6 f8 fe ff       	call   f0100d0e <cprintf>
f0111438:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f011143b:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111442:	65 00 00 
f0111445:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011144b:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111450:	b8 00 00 00 00       	mov    $0x0,%eax
f0111455:	89 d7                	mov    %edx,%edi
f0111457:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111459:	83 ec 0c             	sub    $0xc,%esp
f011145c:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111462:	50                   	push   %eax
f0111463:	e8 08 f9 fe ff       	call   f0100d70 <execute_command>
f0111468:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011146b:	83 ec 0c             	sub    $0xc,%esp
f011146e:	68 ea 8d 13 f0       	push   $0xf0138dea
f0111473:	e8 96 f8 fe ff       	call   f0100d0e <cprintf>
f0111478:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011147b:	83 ec 0c             	sub    $0xc,%esp
f011147e:	68 28 8e 13 f0       	push   $0xf0138e28
f0111483:	e8 86 f8 fe ff       	call   f0100d0e <cprintf>
f0111488:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f011148b:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111492:	75 00 00 
f0111495:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011149b:	b9 18 00 00 00       	mov    $0x18,%ecx
f01114a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01114a5:	89 d7                	mov    %edx,%edi
f01114a7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01114a9:	83 ec 0c             	sub    $0xc,%esp
f01114ac:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01114b2:	50                   	push   %eax
f01114b3:	e8 b8 f8 fe ff       	call   f0100d70 <execute_command>
f01114b8:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01114bb:	83 ec 0c             	sub    $0xc,%esp
f01114be:	68 ea 8d 13 f0       	push   $0xf0138dea
f01114c3:	e8 46 f8 fe ff       	call   f0100d0e <cprintf>
f01114c8:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01114cb:	83 ec 0c             	sub    $0xc,%esp
f01114ce:	68 50 8e 13 f0       	push   $0xf0138e50
f01114d3:	e8 36 f8 fe ff       	call   f0100d0e <cprintf>
f01114d8:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01114db:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01114e2:	6d 6d 00 
f01114e5:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01114eb:	b9 18 00 00 00       	mov    $0x18,%ecx
f01114f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01114f5:	89 d7                	mov    %edx,%edi
f01114f7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01114f9:	83 ec 0c             	sub    $0xc,%esp
f01114fc:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111502:	50                   	push   %eax
f0111503:	e8 68 f8 fe ff       	call   f0100d70 <execute_command>
f0111508:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011150b:	83 ec 0c             	sub    $0xc,%esp
f011150e:	68 ea 8d 13 f0       	push   $0xf0138dea
f0111513:	e8 f6 f7 fe ff       	call   f0100d0e <cprintf>
f0111518:	83 c4 10             	add    $0x10,%esp
	return 0;
f011151b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111520:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111523:	5b                   	pop    %ebx
f0111524:	5e                   	pop    %esi
f0111525:	5f                   	pop    %edi
f0111526:	5d                   	pop    %ebp
f0111527:	c3                   	ret    

f0111528 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111528:	55                   	push   %ebp
f0111529:	89 e5                	mov    %esp,%ebp
f011152b:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011152e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111535:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011153c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111543:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111548:	ff 75 ec             	pushl  -0x14(%ebp)
f011154b:	ff 75 f0             	pushl  -0x10(%ebp)
f011154e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111551:	50                   	push   %eax
f0111552:	e8 60 69 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f0111557:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011155a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011155f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111562:	ff 75 f0             	pushl  -0x10(%ebp)
f0111565:	ff 75 f4             	pushl  -0xc(%ebp)
f0111568:	50                   	push   %eax
f0111569:	e8 9e 4e 00 00       	call   f011640c <CP>
f011156e:	83 c4 10             	add    $0x10,%esp
f0111571:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111574:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111578:	74 14                	je     f011158e <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f011157a:	83 ec 04             	sub    $0x4,%esp
f011157d:	68 dc 8e 13 f0       	push   $0xf0138edc
f0111582:	6a 5a                	push   $0x5a
f0111584:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111589:	e8 77 ec fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f011158e:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111595:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f011159c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115a3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01115a8:	ff 75 ec             	pushl  -0x14(%ebp)
f01115ab:	ff 75 f0             	pushl  -0x10(%ebp)
f01115ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01115b1:	50                   	push   %eax
f01115b2:	e8 00 69 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f01115b7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115ba:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01115bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01115c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01115c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01115c8:	50                   	push   %eax
f01115c9:	e8 3e 4e 00 00       	call   f011640c <CP>
f01115ce:	83 c4 10             	add    $0x10,%esp
f01115d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01115d4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115d8:	74 14                	je     f01115ee <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01115da:	83 ec 04             	sub    $0x4,%esp
f01115dd:	68 1c 8f 13 f0       	push   $0xf0138f1c
f01115e2:	6a 66                	push   $0x66
f01115e4:	68 fe 8e 13 f0       	push   $0xf0138efe
f01115e9:	e8 17 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01115ee:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f01115f5:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f01115fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111603:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111608:	ff 75 ec             	pushl  -0x14(%ebp)
f011160b:	ff 75 f0             	pushl  -0x10(%ebp)
f011160e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111611:	50                   	push   %eax
f0111612:	e8 a0 68 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f0111617:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011161a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011161f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111622:	ff 75 f0             	pushl  -0x10(%ebp)
f0111625:	ff 75 f4             	pushl  -0xc(%ebp)
f0111628:	50                   	push   %eax
f0111629:	e8 de 4d 00 00       	call   f011640c <CP>
f011162e:	83 c4 10             	add    $0x10,%esp
f0111631:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111634:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111638:	74 14                	je     f011164e <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f011163a:	83 ec 04             	sub    $0x4,%esp
f011163d:	68 40 8f 13 f0       	push   $0xf0138f40
f0111642:	6a 71                	push   $0x71
f0111644:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111649:	e8 b7 eb fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f011164e:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111655:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f011165c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111663:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111668:	ff 75 ec             	pushl  -0x14(%ebp)
f011166b:	ff 75 f0             	pushl  -0x10(%ebp)
f011166e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111671:	50                   	push   %eax
f0111672:	e8 40 68 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f0111677:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011167a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011167f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111682:	ff 75 f0             	pushl  -0x10(%ebp)
f0111685:	ff 75 f4             	pushl  -0xc(%ebp)
f0111688:	50                   	push   %eax
f0111689:	e8 7e 4d 00 00       	call   f011640c <CP>
f011168e:	83 c4 10             	add    $0x10,%esp
f0111691:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111694:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111698:	74 14                	je     f01116ae <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f011169a:	83 ec 04             	sub    $0x4,%esp
f011169d:	68 64 8f 13 f0       	push   $0xf0138f64
f01116a2:	6a 7d                	push   $0x7d
f01116a4:	68 fe 8e 13 f0       	push   $0xf0138efe
f01116a9:	e8 57 eb fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01116ae:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01116b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01116bc:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116c3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01116c8:	ff 75 ec             	pushl  -0x14(%ebp)
f01116cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01116ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d1:	50                   	push   %eax
f01116d2:	e8 e0 67 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f01116d7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116da:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01116df:	ff 75 ec             	pushl  -0x14(%ebp)
f01116e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01116e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01116e8:	50                   	push   %eax
f01116e9:	e8 1e 4d 00 00       	call   f011640c <CP>
f01116ee:	83 c4 10             	add    $0x10,%esp
f01116f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01116f4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01116f8:	74 17                	je     f0111711 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f01116fa:	83 ec 04             	sub    $0x4,%esp
f01116fd:	68 88 8f 13 f0       	push   $0xf0138f88
f0111702:	68 89 00 00 00       	push   $0x89
f0111707:	68 fe 8e 13 f0       	push   $0xf0138efe
f011170c:	e8 f4 ea fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111711:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111718:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f011171f:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111726:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011172b:	ff 75 ec             	pushl  -0x14(%ebp)
f011172e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111731:	ff 75 f4             	pushl  -0xc(%ebp)
f0111734:	50                   	push   %eax
f0111735:	e8 7d 67 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f011173a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011173d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111742:	ff 75 ec             	pushl  -0x14(%ebp)
f0111745:	ff 75 f0             	pushl  -0x10(%ebp)
f0111748:	ff 75 f4             	pushl  -0xc(%ebp)
f011174b:	50                   	push   %eax
f011174c:	e8 bb 4c 00 00       	call   f011640c <CP>
f0111751:	83 c4 10             	add    $0x10,%esp
f0111754:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111757:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011175b:	74 17                	je     f0111774 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f011175d:	83 ec 04             	sub    $0x4,%esp
f0111760:	68 ac 8f 13 f0       	push   $0xf0138fac
f0111765:	68 95 00 00 00       	push   $0x95
f011176a:	68 fe 8e 13 f0       	push   $0xf0138efe
f011176f:	e8 91 ea fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111774:	83 ec 0c             	sub    $0xc,%esp
f0111777:	68 d8 8f 13 f0       	push   $0xf0138fd8
f011177c:	e8 8d f5 fe ff       	call   f0100d0e <cprintf>
f0111781:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111784:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111789:	c9                   	leave  
f011178a:	c3                   	ret    

f011178b <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f011178b:	55                   	push   %ebp
f011178c:	89 e5                	mov    %esp,%ebp
f011178e:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111791:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111798:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011179f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01117a6:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01117ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01117ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01117b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01117b4:	50                   	push   %eax
f01117b5:	e8 fd 66 ff ff       	call   f0107eb7 <pt_set_page_permissions>
f01117ba:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01117bd:	83 ec 04             	sub    $0x4,%esp
f01117c0:	68 28 90 13 f0       	push   $0xf0139028
f01117c5:	68 a2 00 00 00       	push   $0xa2
f01117ca:	68 fe 8e 13 f0       	push   $0xf0138efe
f01117cf:	e8 31 ea fe ff       	call   f0100205 <_panic>

f01117d4 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01117d4:	55                   	push   %ebp
f01117d5:	89 e5                	mov    %esp,%ebp
f01117d7:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01117da:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01117e1:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01117e6:	83 ec 08             	sub    $0x8,%esp
f01117e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01117ec:	50                   	push   %eax
f01117ed:	e8 79 67 ff ff       	call   f0107f6b <pt_get_page_permissions>
f01117f2:	83 c4 10             	add    $0x10,%esp
f01117f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01117f8:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01117fc:	74 17                	je     f0111815 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01117fe:	83 ec 04             	sub    $0x4,%esp
f0111801:	68 c4 90 13 f0       	push   $0xf01390c4
f0111806:	68 b0 00 00 00       	push   $0xb0
f011180b:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111810:	e8 f0 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111815:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011181c:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111821:	83 ec 08             	sub    $0x8,%esp
f0111824:	ff 75 f4             	pushl  -0xc(%ebp)
f0111827:	50                   	push   %eax
f0111828:	e8 3e 67 ff ff       	call   f0107f6b <pt_get_page_permissions>
f011182d:	83 c4 10             	add    $0x10,%esp
f0111830:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111833:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111837:	74 17                	je     f0111850 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111839:	83 ec 04             	sub    $0x4,%esp
f011183c:	68 e8 90 13 f0       	push   $0xf01390e8
f0111841:	68 b8 00 00 00       	push   $0xb8
f0111846:	68 fe 8e 13 f0       	push   $0xf0138efe
f011184b:	e8 b5 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111850:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111857:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011185c:	83 ec 08             	sub    $0x8,%esp
f011185f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111862:	50                   	push   %eax
f0111863:	e8 03 67 ff ff       	call   f0107f6b <pt_get_page_permissions>
f0111868:	83 c4 10             	add    $0x10,%esp
f011186b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011186e:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111872:	74 17                	je     f011188b <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111874:	83 ec 04             	sub    $0x4,%esp
f0111877:	68 0c 91 13 f0       	push   $0xf013910c
f011187c:	68 c0 00 00 00       	push   $0xc0
f0111881:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111886:	e8 7a e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f011188b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111892:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111897:	83 ec 08             	sub    $0x8,%esp
f011189a:	ff 75 f4             	pushl  -0xc(%ebp)
f011189d:	50                   	push   %eax
f011189e:	e8 c8 66 ff ff       	call   f0107f6b <pt_get_page_permissions>
f01118a3:	83 c4 10             	add    $0x10,%esp
f01118a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01118a9:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01118ad:	74 17                	je     f01118c6 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01118af:	83 ec 04             	sub    $0x4,%esp
f01118b2:	68 30 91 13 f0       	push   $0xf0139130
f01118b7:	68 c7 00 00 00       	push   $0xc7
f01118bc:	68 fe 8e 13 f0       	push   $0xf0138efe
f01118c1:	e8 3f e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01118c6:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01118cd:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01118d2:	83 ec 08             	sub    $0x8,%esp
f01118d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01118d8:	50                   	push   %eax
f01118d9:	e8 8d 66 ff ff       	call   f0107f6b <pt_get_page_permissions>
f01118de:	83 c4 10             	add    $0x10,%esp
f01118e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01118e4:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01118e8:	74 17                	je     f0111901 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01118ea:	83 ec 04             	sub    $0x4,%esp
f01118ed:	68 54 91 13 f0       	push   $0xf0139154
f01118f2:	68 ce 00 00 00       	push   $0xce
f01118f7:	68 fe 8e 13 f0       	push   $0xf0138efe
f01118fc:	e8 04 e9 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111901:	83 ec 0c             	sub    $0xc,%esp
f0111904:	68 78 91 13 f0       	push   $0xf0139178
f0111909:	e8 00 f4 fe ff       	call   f0100d0e <cprintf>
f011190e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111911:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111916:	c9                   	leave  
f0111917:	c3                   	ret    

f0111918 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111918:	55                   	push   %ebp
f0111919:	89 e5                	mov    %esp,%ebp
f011191b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011191e:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111925:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011192a:	83 ec 08             	sub    $0x8,%esp
f011192d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111930:	50                   	push   %eax
f0111931:	e8 90 66 ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f0111936:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111939:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011193e:	83 ec 08             	sub    $0x8,%esp
f0111941:	ff 75 f4             	pushl  -0xc(%ebp)
f0111944:	50                   	push   %eax
f0111945:	e8 1e 4a 00 00       	call   f0116368 <CE>
f011194a:	83 c4 10             	add    $0x10,%esp
f011194d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111950:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111954:	74 17                	je     f011196d <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111956:	83 ec 04             	sub    $0x4,%esp
f0111959:	68 c0 91 13 f0       	push   $0xf01391c0
f011195e:	68 de 00 00 00       	push   $0xde
f0111963:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111968:	e8 98 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f011196d:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111974:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111979:	83 ec 08             	sub    $0x8,%esp
f011197c:	ff 75 f4             	pushl  -0xc(%ebp)
f011197f:	50                   	push   %eax
f0111980:	e8 41 66 ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f0111985:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111988:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011198d:	83 ec 08             	sub    $0x8,%esp
f0111990:	ff 75 f4             	pushl  -0xc(%ebp)
f0111993:	50                   	push   %eax
f0111994:	e8 cf 49 00 00       	call   f0116368 <CE>
f0111999:	83 c4 10             	add    $0x10,%esp
f011199c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011199f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01119a3:	74 17                	je     f01119bc <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01119a5:	83 ec 04             	sub    $0x4,%esp
f01119a8:	68 ec 91 13 f0       	push   $0xf01391ec
f01119ad:	68 e6 00 00 00       	push   $0xe6
f01119b2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01119b7:	e8 49 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01119bc:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01119c3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01119c8:	83 ec 08             	sub    $0x8,%esp
f01119cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01119ce:	50                   	push   %eax
f01119cf:	e8 f2 65 ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f01119d4:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01119d7:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01119dc:	83 ec 08             	sub    $0x8,%esp
f01119df:	ff 75 f4             	pushl  -0xc(%ebp)
f01119e2:	50                   	push   %eax
f01119e3:	e8 80 49 00 00       	call   f0116368 <CE>
f01119e8:	83 c4 10             	add    $0x10,%esp
f01119eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01119ee:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01119f2:	74 17                	je     f0111a0b <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01119f4:	83 ec 04             	sub    $0x4,%esp
f01119f7:	68 18 92 13 f0       	push   $0xf0139218
f01119fc:	68 ee 00 00 00       	push   $0xee
f0111a01:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111a06:	e8 fa e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111a0b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a12:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a17:	83 ec 08             	sub    $0x8,%esp
f0111a1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a1d:	50                   	push   %eax
f0111a1e:	e8 a3 65 ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f0111a23:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111a26:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a2b:	83 ec 08             	sub    $0x8,%esp
f0111a2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a31:	50                   	push   %eax
f0111a32:	e8 31 49 00 00       	call   f0116368 <CE>
f0111a37:	83 c4 10             	add    $0x10,%esp
f0111a3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111a3d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111a41:	74 17                	je     f0111a5a <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111a43:	83 ec 04             	sub    $0x4,%esp
f0111a46:	68 44 92 13 f0       	push   $0xf0139244
f0111a4b:	68 f6 00 00 00       	push   $0xf6
f0111a50:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111a55:	e8 ab e7 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111a5a:	83 ec 0c             	sub    $0xc,%esp
f0111a5d:	68 70 92 13 f0       	push   $0xf0139270
f0111a62:	e8 a7 f2 fe ff       	call   f0100d0e <cprintf>
f0111a67:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111a6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a6f:	c9                   	leave  
f0111a70:	c3                   	ret    

f0111a71 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111a71:	55                   	push   %ebp
f0111a72:	89 e5                	mov    %esp,%ebp
f0111a74:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111a77:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a7e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a83:	83 ec 08             	sub    $0x8,%esp
f0111a86:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a89:	50                   	push   %eax
f0111a8a:	e8 37 65 ff ff       	call   f0107fc6 <pt_clear_page_table_entry>
f0111a8f:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111a92:	83 ec 04             	sub    $0x4,%esp
f0111a95:	68 bc 92 13 f0       	push   $0xf01392bc
f0111a9a:	68 01 01 00 00       	push   $0x101
f0111a9f:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111aa4:	e8 5c e7 fe ff       	call   f0100205 <_panic>

f0111aa9 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111aa9:	55                   	push   %ebp
f0111aaa:	89 e5                	mov    %esp,%ebp
f0111aac:	57                   	push   %edi
f0111aad:	56                   	push   %esi
f0111aae:	53                   	push   %ebx
f0111aaf:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111ab5:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111abc:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111ac3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111ac8:	83 ec 0c             	sub    $0xc,%esp
f0111acb:	50                   	push   %eax
f0111acc:	e8 79 49 00 00       	call   f011644a <ClearUserSpace>
f0111ad1:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111ad4:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111adb:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111ae0:	83 ec 08             	sub    $0x8,%esp
f0111ae3:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ae6:	50                   	push   %eax
f0111ae7:	e8 46 65 ff ff       	call   f0108032 <virtual_to_physical>
f0111aec:	83 c4 10             	add    $0x10,%esp
f0111aef:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111af2:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111af6:	74 17                	je     f0111b0f <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111af8:	83 ec 04             	sub    $0x4,%esp
f0111afb:	68 54 93 13 f0       	push   $0xf0139354
f0111b00:	68 16 01 00 00       	push   $0x116
f0111b05:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111b0a:	e8 f6 e6 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111b0f:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b16:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111b1b:	83 ec 08             	sub    $0x8,%esp
f0111b1e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b21:	50                   	push   %eax
f0111b22:	e8 0b 65 ff ff       	call   f0108032 <virtual_to_physical>
f0111b27:	83 c4 10             	add    $0x10,%esp
f0111b2a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111b2d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111b32:	83 ec 08             	sub    $0x8,%esp
f0111b35:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b38:	50                   	push   %eax
f0111b39:	e8 0b 48 00 00       	call   f0116349 <CA>
f0111b3e:	83 c4 10             	add    $0x10,%esp
f0111b41:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111b44:	74 17                	je     f0111b5d <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111b46:	83 ec 04             	sub    $0x4,%esp
f0111b49:	68 8c 93 13 f0       	push   $0xf013938c
f0111b4e:	68 1f 01 00 00       	push   $0x11f
f0111b53:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111b58:	e8 a8 e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111b5d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111b63:	bb 58 95 13 f0       	mov    $0xf0139558,%ebx
f0111b68:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111b6d:	89 c7                	mov    %eax,%edi
f0111b6f:	89 de                	mov    %ebx,%esi
f0111b71:	89 d1                	mov    %edx,%ecx
f0111b73:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b75:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111b78:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111b7d:	b0 00                	mov    $0x0,%al
f0111b7f:	89 d7                	mov    %edx,%edi
f0111b81:	f3 aa                	rep stos %al,%es:(%edi)
f0111b83:	83 ec 0c             	sub    $0xc,%esp
f0111b86:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111b8c:	50                   	push   %eax
f0111b8d:	e8 de f1 fe ff       	call   f0100d70 <execute_command>
f0111b92:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111b95:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b9c:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111ba1:	83 ec 08             	sub    $0x8,%esp
f0111ba4:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ba7:	50                   	push   %eax
f0111ba8:	e8 85 64 ff ff       	call   f0108032 <virtual_to_physical>
f0111bad:	83 c4 10             	add    $0x10,%esp
f0111bb0:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111bb3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111bb8:	83 ec 08             	sub    $0x8,%esp
f0111bbb:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bbe:	50                   	push   %eax
f0111bbf:	e8 85 47 00 00       	call   f0116349 <CA>
f0111bc4:	83 c4 10             	add    $0x10,%esp
f0111bc7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111bca:	74 17                	je     f0111be3 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111bcc:	83 ec 04             	sub    $0x4,%esp
f0111bcf:	68 c4 93 13 f0       	push   $0xf01393c4
f0111bd4:	68 28 01 00 00       	push   $0x128
f0111bd9:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111bde:	e8 22 e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111be3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111be9:	bb bc 95 13 f0       	mov    $0xf01395bc,%ebx
f0111bee:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111bf3:	89 c7                	mov    %eax,%edi
f0111bf5:	89 de                	mov    %ebx,%esi
f0111bf7:	89 d1                	mov    %edx,%ecx
f0111bf9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111bfb:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111c01:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c06:	b0 00                	mov    $0x0,%al
f0111c08:	89 d7                	mov    %edx,%edi
f0111c0a:	f3 aa                	rep stos %al,%es:(%edi)
f0111c0c:	83 ec 0c             	sub    $0xc,%esp
f0111c0f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111c15:	50                   	push   %eax
f0111c16:	e8 55 f1 fe ff       	call   f0100d70 <execute_command>
f0111c1b:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111c1e:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c25:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111c2a:	83 ec 08             	sub    $0x8,%esp
f0111c2d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c30:	50                   	push   %eax
f0111c31:	e8 fc 63 ff ff       	call   f0108032 <virtual_to_physical>
f0111c36:	83 c4 10             	add    $0x10,%esp
f0111c39:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111c3c:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111c41:	83 ec 08             	sub    $0x8,%esp
f0111c44:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c47:	50                   	push   %eax
f0111c48:	e8 fc 46 00 00       	call   f0116349 <CA>
f0111c4d:	83 c4 10             	add    $0x10,%esp
f0111c50:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c53:	74 17                	je     f0111c6c <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111c55:	83 ec 04             	sub    $0x4,%esp
f0111c58:	68 fc 93 13 f0       	push   $0xf01393fc
f0111c5d:	68 31 01 00 00       	push   $0x131
f0111c62:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111c67:	e8 99 e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111c6c:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111c72:	bb 20 96 13 f0       	mov    $0xf0139620,%ebx
f0111c77:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111c7c:	89 c7                	mov    %eax,%edi
f0111c7e:	89 de                	mov    %ebx,%esi
f0111c80:	89 d1                	mov    %edx,%ecx
f0111c82:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c84:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111c8a:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c8f:	b0 00                	mov    $0x0,%al
f0111c91:	89 d7                	mov    %edx,%edi
f0111c93:	f3 aa                	rep stos %al,%es:(%edi)
f0111c95:	83 ec 0c             	sub    $0xc,%esp
f0111c98:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111c9e:	50                   	push   %eax
f0111c9f:	e8 cc f0 fe ff       	call   f0100d70 <execute_command>
f0111ca4:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111ca7:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111cae:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111cb3:	83 ec 08             	sub    $0x8,%esp
f0111cb6:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cb9:	50                   	push   %eax
f0111cba:	e8 73 63 ff ff       	call   f0108032 <virtual_to_physical>
f0111cbf:	83 c4 10             	add    $0x10,%esp
f0111cc2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111cc5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111cca:	83 ec 08             	sub    $0x8,%esp
f0111ccd:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cd0:	50                   	push   %eax
f0111cd1:	e8 73 46 00 00       	call   f0116349 <CA>
f0111cd6:	83 c4 10             	add    $0x10,%esp
f0111cd9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111cdc:	74 17                	je     f0111cf5 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111cde:	83 ec 04             	sub    $0x4,%esp
f0111ce1:	68 34 94 13 f0       	push   $0xf0139434
f0111ce6:	68 3a 01 00 00       	push   $0x13a
f0111ceb:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111cf0:	e8 10 e5 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111cf5:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111cfc:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d01:	83 ec 08             	sub    $0x8,%esp
f0111d04:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d07:	50                   	push   %eax
f0111d08:	e8 25 63 ff ff       	call   f0108032 <virtual_to_physical>
f0111d0d:	83 c4 10             	add    $0x10,%esp
f0111d10:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d13:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d18:	83 ec 08             	sub    $0x8,%esp
f0111d1b:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d1e:	50                   	push   %eax
f0111d1f:	e8 25 46 00 00       	call   f0116349 <CA>
f0111d24:	83 c4 10             	add    $0x10,%esp
f0111d27:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d2a:	74 17                	je     f0111d43 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111d2c:	83 ec 04             	sub    $0x4,%esp
f0111d2f:	68 6c 94 13 f0       	push   $0xf013946c
f0111d34:	68 42 01 00 00       	push   $0x142
f0111d39:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111d3e:	e8 c2 e4 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111d43:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d4a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d4f:	83 ec 08             	sub    $0x8,%esp
f0111d52:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d55:	50                   	push   %eax
f0111d56:	e8 d7 62 ff ff       	call   f0108032 <virtual_to_physical>
f0111d5b:	83 c4 10             	add    $0x10,%esp
f0111d5e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d61:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d66:	83 ec 08             	sub    $0x8,%esp
f0111d69:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d6c:	50                   	push   %eax
f0111d6d:	e8 d7 45 00 00       	call   f0116349 <CA>
f0111d72:	83 c4 10             	add    $0x10,%esp
f0111d75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d78:	74 17                	je     f0111d91 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111d7a:	83 ec 04             	sub    $0x4,%esp
f0111d7d:	68 a4 94 13 f0       	push   $0xf01394a4
f0111d82:	68 4a 01 00 00       	push   $0x14a
f0111d87:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111d8c:	e8 74 e4 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111d91:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111d97:	bb 84 96 13 f0       	mov    $0xf0139684,%ebx
f0111d9c:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111da1:	89 c7                	mov    %eax,%edi
f0111da3:	89 de                	mov    %ebx,%esi
f0111da5:	89 d1                	mov    %edx,%ecx
f0111da7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111da9:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111daf:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111db4:	b0 00                	mov    $0x0,%al
f0111db6:	89 d7                	mov    %edx,%edi
f0111db8:	f3 aa                	rep stos %al,%es:(%edi)
f0111dba:	83 ec 0c             	sub    $0xc,%esp
f0111dbd:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111dc3:	50                   	push   %eax
f0111dc4:	e8 a7 ef fe ff       	call   f0100d70 <execute_command>
f0111dc9:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111dcc:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111dd3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111dd8:	83 ec 08             	sub    $0x8,%esp
f0111ddb:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dde:	50                   	push   %eax
f0111ddf:	e8 4e 62 ff ff       	call   f0108032 <virtual_to_physical>
f0111de4:	83 c4 10             	add    $0x10,%esp
f0111de7:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111dea:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111def:	83 ec 08             	sub    $0x8,%esp
f0111df2:	ff 75 dc             	pushl  -0x24(%ebp)
f0111df5:	50                   	push   %eax
f0111df6:	e8 4e 45 00 00       	call   f0116349 <CA>
f0111dfb:	83 c4 10             	add    $0x10,%esp
f0111dfe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e01:	74 17                	je     f0111e1a <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111e03:	83 ec 04             	sub    $0x4,%esp
f0111e06:	68 dc 94 13 f0       	push   $0xf01394dc
f0111e0b:	68 53 01 00 00       	push   $0x153
f0111e10:	68 fe 8e 13 f0       	push   $0xf0138efe
f0111e15:	e8 eb e3 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111e1a:	83 ec 0c             	sub    $0xc,%esp
f0111e1d:	68 14 95 13 f0       	push   $0xf0139514
f0111e22:	e8 e7 ee fe ff       	call   f0100d0e <cprintf>
f0111e27:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111e2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111e2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111e32:	5b                   	pop    %ebx
f0111e33:	5e                   	pop    %esi
f0111e34:	5f                   	pop    %edi
f0111e35:	5d                   	pop    %ebp
f0111e36:	c3                   	ret    

f0111e37 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111e37:	55                   	push   %ebp
f0111e38:	89 e5                	mov    %esp,%ebp
f0111e3a:	57                   	push   %edi
f0111e3b:	56                   	push   %esi
f0111e3c:	53                   	push   %ebx
f0111e3d:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111e43:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111e49:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f0111e4e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e53:	89 c7                	mov    %eax,%edi
f0111e55:	89 de                	mov    %ebx,%esi
f0111e57:	89 d1                	mov    %edx,%ecx
f0111e59:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e5b:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111e61:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111e66:	b0 00                	mov    $0x0,%al
f0111e68:	89 d7                	mov    %edx,%edi
f0111e6a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111e6c:	6a 00                	push   $0x0
f0111e6e:	6a 0a                	push   $0xa
f0111e70:	6a 14                	push   $0x14
f0111e72:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111e78:	50                   	push   %eax
f0111e79:	e8 ef 72 ff ff       	call   f010916d <env_create>
f0111e7e:	83 c4 10             	add    $0x10,%esp
f0111e81:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111e84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e87:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111e8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111e8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e90:	8b 40 60             	mov    0x60(%eax),%eax
f0111e93:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111e96:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111e99:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111e9c:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111ea3:	75 70 20 
f0111ea6:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111ead:	00 00 00 
f0111eb0:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111eb6:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111ebb:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ec0:	89 d7                	mov    %edx,%edi
f0111ec2:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111ec4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111ec7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111eca:	83 ec 08             	sub    $0x8,%esp
f0111ecd:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111ed3:	52                   	push   %edx
f0111ed4:	50                   	push   %eax
f0111ed5:	e8 6f fb 01 00       	call   f0131a49 <ltostr>
f0111eda:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111edd:	83 ec 04             	sub    $0x4,%esp
f0111ee0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ee6:	50                   	push   %eax
f0111ee7:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111eed:	50                   	push   %eax
f0111eee:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111ef4:	50                   	push   %eax
f0111ef5:	e8 47 fc 01 00       	call   f0131b41 <strcconcat>
f0111efa:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111efd:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111f04:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111f0b:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111f12:	83 ec 0c             	sub    $0xc,%esp
f0111f15:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f18:	e8 2d 45 00 00       	call   f011644a <ClearUserSpace>
f0111f1d:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111f20:	83 ec 04             	sub    $0x4,%esp
f0111f23:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111f29:	50                   	push   %eax
f0111f2a:	68 e8 96 13 f0       	push   $0xf01396e8
f0111f2f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f35:	50                   	push   %eax
f0111f36:	e8 06 fc 01 00       	call   f0131b41 <strcconcat>
f0111f3b:	83 c4 10             	add    $0x10,%esp
f0111f3e:	83 ec 0c             	sub    $0xc,%esp
f0111f41:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111f47:	50                   	push   %eax
f0111f48:	e8 23 ee fe ff       	call   f0100d70 <execute_command>
f0111f4d:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111f50:	83 ec 04             	sub    $0x4,%esp
f0111f53:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111f59:	50                   	push   %eax
f0111f5a:	68 f3 96 13 f0       	push   $0xf01396f3
f0111f5f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f65:	50                   	push   %eax
f0111f66:	e8 d6 fb 01 00       	call   f0131b41 <strcconcat>
f0111f6b:	83 c4 10             	add    $0x10,%esp
f0111f6e:	83 ec 0c             	sub    $0xc,%esp
f0111f71:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111f77:	50                   	push   %eax
f0111f78:	e8 f3 ed fe ff       	call   f0100d70 <execute_command>
f0111f7d:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111f80:	83 ec 04             	sub    $0x4,%esp
f0111f83:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111f89:	50                   	push   %eax
f0111f8a:	68 fe 96 13 f0       	push   $0xf01396fe
f0111f8f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f95:	50                   	push   %eax
f0111f96:	e8 a6 fb 01 00       	call   f0131b41 <strcconcat>
f0111f9b:	83 c4 10             	add    $0x10,%esp
f0111f9e:	83 ec 0c             	sub    $0xc,%esp
f0111fa1:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111fa7:	50                   	push   %eax
f0111fa8:	e8 c3 ed fe ff       	call   f0100d70 <execute_command>
f0111fad:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111fb0:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111fb7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fba:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111fbd:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111fc4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fc7:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111fca:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111fd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fd4:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111fd7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fda:	83 ec 08             	sub    $0x8,%esp
f0111fdd:	50                   	push   %eax
f0111fde:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fe1:	e8 45 44 00 00       	call   f011642b <GP>
f0111fe6:	83 c4 10             	add    $0x10,%esp
f0111fe9:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111fec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111ff3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111ffa:	e8 a8 ae ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0111fff:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112002:	83 ec 0c             	sub    $0xc,%esp
f0112005:	68 0c 97 13 f0       	push   $0xf013970c
f011200a:	e8 ff ec fe ff       	call   f0100d0e <cprintf>
f011200f:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112012:	6a 03                	push   $0x3
f0112014:	68 00 00 90 02       	push   $0x2900000
f0112019:	68 00 00 80 02       	push   $0x2800000
f011201e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112021:	e8 34 6a ff ff       	call   f0108a5a <cut_paste_pages>
f0112026:	83 c4 10             	add    $0x10,%esp
f0112029:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011202c:	e8 76 ae ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0112031:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112034:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011203b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011203f:	75 08                	jne    f0112049 <test_cut_paste_pages+0x212>
f0112041:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112044:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112047:	74 2b                	je     f0112074 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112049:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011204c:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011204f:	83 ec 0c             	sub    $0xc,%esp
f0112052:	50                   	push   %eax
f0112053:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112056:	68 3c 97 13 f0       	push   $0xf013973c
f011205b:	68 91 01 00 00       	push   $0x191
f0112060:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112065:	e8 a9 e3 fe ff       	call   f0100413 <_warn>
f011206a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011206d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112074:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112078:	74 04                	je     f011207e <test_cut_paste_pages+0x247>
f011207a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011207e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112085:	83 ec 08             	sub    $0x8,%esp
f0112088:	6a 00                	push   $0x0
f011208a:	6a 01                	push   $0x1
f011208c:	6a 00                	push   $0x0
f011208e:	68 ff 0f 00 00       	push   $0xfff
f0112093:	ff 75 bc             	pushl  -0x44(%ebp)
f0112096:	6a 01                	push   $0x1
f0112098:	68 00 30 00 00       	push   $0x3000
f011209d:	68 00 00 90 02       	push   $0x2900000
f01120a2:	68 00 00 80 02       	push   $0x2800000
f01120a7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120aa:	e8 cf 43 00 00       	call   f011647e <CCP>
f01120af:	83 c4 30             	add    $0x30,%esp
f01120b2:	83 f8 01             	cmp    $0x1,%eax
f01120b5:	74 21                	je     f01120d8 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01120b7:	83 ec 04             	sub    $0x4,%esp
f01120ba:	68 90 97 13 f0       	push   $0xf0139790
f01120bf:	68 99 01 00 00       	push   $0x199
f01120c4:	68 fe 8e 13 f0       	push   $0xf0138efe
f01120c9:	e8 45 e3 fe ff       	call   f0100413 <_warn>
f01120ce:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01120d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01120d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120dc:	74 04                	je     f01120e2 <test_cut_paste_pages+0x2ab>
f01120de:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01120e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01120e9:	83 ec 04             	sub    $0x4,%esp
f01120ec:	6a 00                	push   $0x0
f01120ee:	68 00 00 90 02       	push   $0x2900000
f01120f3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120f6:	e8 5f 41 00 00       	call   f011625a <CB>
f01120fb:	83 c4 10             	add    $0x10,%esp
f01120fe:	85 c0                	test   %eax,%eax
f0112100:	0f 84 f6 00 00 00    	je     f01121fc <test_cut_paste_pages+0x3c5>
f0112106:	83 ec 04             	sub    $0x4,%esp
f0112109:	6a 00                	push   $0x0
f011210b:	68 00 10 90 02       	push   $0x2901000
f0112110:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112113:	e8 42 41 00 00       	call   f011625a <CB>
f0112118:	83 c4 10             	add    $0x10,%esp
f011211b:	85 c0                	test   %eax,%eax
f011211d:	0f 84 d9 00 00 00    	je     f01121fc <test_cut_paste_pages+0x3c5>
f0112123:	83 ec 04             	sub    $0x4,%esp
f0112126:	6a 00                	push   $0x0
f0112128:	68 00 20 90 02       	push   $0x2902000
f011212d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112130:	e8 25 41 00 00       	call   f011625a <CB>
f0112135:	83 c4 10             	add    $0x10,%esp
f0112138:	85 c0                	test   %eax,%eax
f011213a:	0f 84 bc 00 00 00    	je     f01121fc <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0112140:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112147:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f011214e:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112155:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112158:	8a 00                	mov    (%eax),%al
f011215a:	3c 61                	cmp    $0x61,%al
f011215c:	75 12                	jne    f0112170 <test_cut_paste_pages+0x339>
f011215e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112161:	8a 00                	mov    (%eax),%al
f0112163:	3c 62                	cmp    $0x62,%al
f0112165:	75 09                	jne    f0112170 <test_cut_paste_pages+0x339>
f0112167:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011216a:	8a 00                	mov    (%eax),%al
f011216c:	3c 63                	cmp    $0x63,%al
f011216e:	74 21                	je     f0112191 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112170:	83 ec 04             	sub    $0x4,%esp
f0112173:	68 dc 97 13 f0       	push   $0xf01397dc
f0112178:	68 a6 01 00 00       	push   $0x1a6
f011217d:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112182:	e8 8c e2 fe ff       	call   f0100413 <_warn>
f0112187:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011218a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112191:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112195:	74 04                	je     f011219b <test_cut_paste_pages+0x364>
f0112197:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011219b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01121a2:	83 ec 04             	sub    $0x4,%esp
f01121a5:	6a 01                	push   $0x1
f01121a7:	68 00 10 90 02       	push   $0x2901000
f01121ac:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121af:	e8 a6 40 00 00       	call   f011625a <CB>
f01121b4:	83 c4 10             	add    $0x10,%esp
f01121b7:	85 c0                	test   %eax,%eax
f01121b9:	74 41                	je     f01121fc <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01121bb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121be:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01121c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121c4:	8a 00                	mov    (%eax),%al
f01121c6:	3c 79                	cmp    $0x79,%al
f01121c8:	74 21                	je     f01121eb <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01121ca:	83 ec 04             	sub    $0x4,%esp
f01121cd:	68 dc 97 13 f0       	push   $0xf01397dc
f01121d2:	68 b1 01 00 00       	push   $0x1b1
f01121d7:	68 fe 8e 13 f0       	push   $0xf0138efe
f01121dc:	e8 32 e2 fe ff       	call   f0100413 <_warn>
f01121e1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01121e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01121eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121ef:	74 04                	je     f01121f5 <test_cut_paste_pages+0x3be>
f01121f1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01121f5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01121fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01121ff:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112202:	6a 02                	push   $0x2
f0112204:	68 00 f0 bf 02       	push   $0x2bff000
f0112209:	68 00 10 90 02       	push   $0x2901000
f011220e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112211:	e8 44 68 ff ff       	call   f0108a5a <cut_paste_pages>
f0112216:	83 c4 10             	add    $0x10,%esp
f0112219:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011221c:	e8 86 ac ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0112221:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112224:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112228:	75 0b                	jne    f0112235 <test_cut_paste_pages+0x3fe>
f011222a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011222d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112230:	83 f8 01             	cmp    $0x1,%eax
f0112233:	74 2b                	je     f0112260 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112235:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112238:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011223b:	83 ec 0c             	sub    $0xc,%esp
f011223e:	50                   	push   %eax
f011223f:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112242:	68 3c 97 13 f0       	push   $0xf013973c
f0112247:	68 c2 01 00 00       	push   $0x1c2
f011224c:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112251:	e8 bd e1 fe ff       	call   f0100413 <_warn>
f0112256:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112259:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112260:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112264:	74 04                	je     f011226a <test_cut_paste_pages+0x433>
f0112266:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011226a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112271:	83 ec 08             	sub    $0x8,%esp
f0112274:	6a 00                	push   $0x0
f0112276:	6a 01                	push   $0x1
f0112278:	6a 00                	push   $0x0
f011227a:	68 ff 0f 00 00       	push   $0xfff
f011227f:	ff 75 bc             	pushl  -0x44(%ebp)
f0112282:	6a 01                	push   $0x1
f0112284:	68 00 20 00 00       	push   $0x2000
f0112289:	68 00 f0 bf 02       	push   $0x2bff000
f011228e:	68 00 10 90 02       	push   $0x2901000
f0112293:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112296:	e8 e3 41 00 00       	call   f011647e <CCP>
f011229b:	83 c4 30             	add    $0x30,%esp
f011229e:	83 f8 01             	cmp    $0x1,%eax
f01122a1:	74 21                	je     f01122c4 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01122a3:	83 ec 04             	sub    $0x4,%esp
f01122a6:	68 90 97 13 f0       	push   $0xf0139790
f01122ab:	68 ca 01 00 00       	push   $0x1ca
f01122b0:	68 fe 8e 13 f0       	push   $0xf0138efe
f01122b5:	e8 59 e1 fe ff       	call   f0100413 <_warn>
f01122ba:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01122bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01122c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122c8:	74 04                	je     f01122ce <test_cut_paste_pages+0x497>
f01122ca:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01122ce:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01122d5:	83 ec 04             	sub    $0x4,%esp
f01122d8:	6a 00                	push   $0x0
f01122da:	68 ff f7 bf 02       	push   $0x2bff7ff
f01122df:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122e2:	e8 73 3f 00 00       	call   f011625a <CB>
f01122e7:	83 c4 10             	add    $0x10,%esp
f01122ea:	85 c0                	test   %eax,%eax
f01122ec:	74 6b                	je     f0112359 <test_cut_paste_pages+0x522>
f01122ee:	83 ec 04             	sub    $0x4,%esp
f01122f1:	6a 00                	push   $0x0
f01122f3:	68 ff 0f c0 02       	push   $0x2c00fff
f01122f8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122fb:	e8 5a 3f 00 00       	call   f011625a <CB>
f0112300:	83 c4 10             	add    $0x10,%esp
f0112303:	85 c0                	test   %eax,%eax
f0112305:	74 52                	je     f0112359 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112307:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f011230e:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112315:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112318:	8a 00                	mov    (%eax),%al
f011231a:	3c 79                	cmp    $0x79,%al
f011231c:	75 09                	jne    f0112327 <test_cut_paste_pages+0x4f0>
f011231e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112321:	8a 00                	mov    (%eax),%al
f0112323:	3c 63                	cmp    $0x63,%al
f0112325:	74 21                	je     f0112348 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112327:	83 ec 04             	sub    $0x4,%esp
f011232a:	68 dc 97 13 f0       	push   $0xf01397dc
f011232f:	68 d6 01 00 00       	push   $0x1d6
f0112334:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112339:	e8 d5 e0 fe ff       	call   f0100413 <_warn>
f011233e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112341:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112348:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011234c:	74 04                	je     f0112352 <test_cut_paste_pages+0x51b>
f011234e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112352:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112359:	83 ec 0c             	sub    $0xc,%esp
f011235c:	68 15 98 13 f0       	push   $0xf0139815
f0112361:	e8 a8 e9 fe ff       	call   f0100d0e <cprintf>
f0112366:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112369:	83 ec 0c             	sub    $0xc,%esp
f011236c:	68 24 98 13 f0       	push   $0xf0139824
f0112371:	e8 98 e9 fe ff       	call   f0100d0e <cprintf>
f0112376:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112379:	83 ec 04             	sub    $0x4,%esp
f011237c:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112382:	50                   	push   %eax
f0112383:	68 4d 98 13 f0       	push   $0xf013984d
f0112388:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011238e:	50                   	push   %eax
f011238f:	e8 ad f7 01 00       	call   f0131b41 <strcconcat>
f0112394:	83 c4 10             	add    $0x10,%esp
f0112397:	83 ec 0c             	sub    $0xc,%esp
f011239a:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01123a0:	50                   	push   %eax
f01123a1:	e8 ca e9 fe ff       	call   f0100d70 <execute_command>
f01123a6:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01123a9:	83 ec 04             	sub    $0x4,%esp
f01123ac:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01123b2:	50                   	push   %eax
f01123b3:	68 58 98 13 f0       	push   $0xf0139858
f01123b8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123be:	50                   	push   %eax
f01123bf:	e8 7d f7 01 00       	call   f0131b41 <strcconcat>
f01123c4:	83 c4 10             	add    $0x10,%esp
f01123c7:	83 ec 0c             	sub    $0xc,%esp
f01123ca:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01123d0:	50                   	push   %eax
f01123d1:	e8 9a e9 fe ff       	call   f0100d70 <execute_command>
f01123d6:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01123d9:	83 ec 04             	sub    $0x4,%esp
f01123dc:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01123e2:	50                   	push   %eax
f01123e3:	68 63 98 13 f0       	push   $0xf0139863
f01123e8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123ee:	50                   	push   %eax
f01123ef:	e8 4d f7 01 00       	call   f0131b41 <strcconcat>
f01123f4:	83 c4 10             	add    $0x10,%esp
f01123f7:	83 ec 0c             	sub    $0xc,%esp
f01123fa:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112400:	50                   	push   %eax
f0112401:	e8 6a e9 fe ff       	call   f0100d70 <execute_command>
f0112406:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112409:	83 ec 04             	sub    $0x4,%esp
f011240c:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112412:	50                   	push   %eax
f0112413:	68 6e 98 13 f0       	push   $0xf013986e
f0112418:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011241e:	50                   	push   %eax
f011241f:	e8 1d f7 01 00       	call   f0131b41 <strcconcat>
f0112424:	83 c4 10             	add    $0x10,%esp
f0112427:	83 ec 0c             	sub    $0xc,%esp
f011242a:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112430:	50                   	push   %eax
f0112431:	e8 3a e9 fe ff       	call   f0100d70 <execute_command>
f0112436:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112439:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112440:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112443:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112446:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011244d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112450:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112453:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011245a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011245d:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112460:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112467:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011246a:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f011246d:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112474:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112477:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011247a:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112481:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112484:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112487:	83 ec 08             	sub    $0x8,%esp
f011248a:	68 00 00 c0 01       	push   $0x1c00000
f011248f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112492:	e8 94 3f 00 00       	call   f011642b <GP>
f0112497:	83 c4 10             	add    $0x10,%esp
f011249a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f011249d:	83 ec 08             	sub    $0x8,%esp
f01124a0:	68 00 00 40 01       	push   $0x1400000
f01124a5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124a8:	e8 7e 3f 00 00       	call   f011642b <GP>
f01124ad:	83 c4 10             	add    $0x10,%esp
f01124b0:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01124b3:	e8 ef a9 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01124b8:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01124bb:	6a 01                	push   $0x1
f01124bd:	68 00 00 40 01       	push   $0x1400000
f01124c2:	68 00 00 c0 01       	push   $0x1c00000
f01124c7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124ca:	e8 8b 65 ff ff       	call   f0108a5a <cut_paste_pages>
f01124cf:	83 c4 10             	add    $0x10,%esp
f01124d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01124d5:	e8 cd a9 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01124da:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01124dd:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01124e1:	75 08                	jne    f01124eb <test_cut_paste_pages+0x6b4>
f01124e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124e6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01124e9:	74 2b                	je     f0112516 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01124eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124ee:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01124f1:	83 ec 0c             	sub    $0xc,%esp
f01124f4:	50                   	push   %eax
f01124f5:	ff 75 b4             	pushl  -0x4c(%ebp)
f01124f8:	68 7c 98 13 f0       	push   $0xf013987c
f01124fd:	68 f9 01 00 00       	push   $0x1f9
f0112502:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112507:	e8 07 df fe ff       	call   f0100413 <_warn>
f011250c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011250f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112516:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011251a:	74 04                	je     f0112520 <test_cut_paste_pages+0x6e9>
f011251c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112520:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112527:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011252e:	83 ec 08             	sub    $0x8,%esp
f0112531:	6a 00                	push   $0x0
f0112533:	68 ff 0f 00 00       	push   $0xfff
f0112538:	ff 75 a4             	pushl  -0x5c(%ebp)
f011253b:	68 ff 0f 00 00       	push   $0xfff
f0112540:	ff 75 a0             	pushl  -0x60(%ebp)
f0112543:	6a 01                	push   $0x1
f0112545:	68 00 10 00 00       	push   $0x1000
f011254a:	68 00 00 40 01       	push   $0x1400000
f011254f:	68 00 00 c0 01       	push   $0x1c00000
f0112554:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112557:	e8 22 3f 00 00       	call   f011647e <CCP>
f011255c:	83 c4 30             	add    $0x30,%esp
f011255f:	83 f8 01             	cmp    $0x1,%eax
f0112562:	74 28                	je     f011258c <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112564:	83 ec 04             	sub    $0x4,%esp
f0112567:	68 90 97 13 f0       	push   $0xf0139790
f011256c:	68 02 02 00 00       	push   $0x202
f0112571:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112576:	e8 98 de fe ff       	call   f0100413 <_warn>
f011257b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011257e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112585:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011258c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112590:	74 04                	je     f0112596 <test_cut_paste_pages+0x75f>
f0112592:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112596:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011259d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01125a1:	0f 84 92 00 00 00    	je     f0112639 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01125a7:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01125ae:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01125b5:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01125bc:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01125c3:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01125ca:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01125d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125d4:	8a 00                	mov    (%eax),%al
f01125d6:	3c 61                	cmp    $0x61,%al
f01125d8:	75 2d                	jne    f0112607 <test_cut_paste_pages+0x7d0>
f01125da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125dd:	8a 00                	mov    (%eax),%al
f01125df:	3c 78                	cmp    $0x78,%al
f01125e1:	75 24                	jne    f0112607 <test_cut_paste_pages+0x7d0>
f01125e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01125e6:	8a 00                	mov    (%eax),%al
f01125e8:	3c 62                	cmp    $0x62,%al
f01125ea:	75 1b                	jne    f0112607 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01125ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01125ef:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01125f1:	3c 79                	cmp    $0x79,%al
f01125f3:	75 12                	jne    f0112607 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01125f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01125f8:	8a 00                	mov    (%eax),%al
f01125fa:	3c 63                	cmp    $0x63,%al
f01125fc:	75 09                	jne    f0112607 <test_cut_paste_pages+0x7d0>
f01125fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112601:	8a 00                	mov    (%eax),%al
f0112603:	3c 7a                	cmp    $0x7a,%al
f0112605:	74 21                	je     f0112628 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112607:	83 ec 04             	sub    $0x4,%esp
f011260a:	68 dc 97 13 f0       	push   $0xf01397dc
f011260f:	68 14 02 00 00       	push   $0x214
f0112614:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112619:	e8 f5 dd fe ff       	call   f0100413 <_warn>
f011261e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112621:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112628:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011262c:	74 04                	je     f0112632 <test_cut_paste_pages+0x7fb>
f011262e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112632:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112639:	e8 69 a8 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011263e:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112641:	6a 03                	push   $0x3
f0112643:	68 00 f0 bf 01       	push   $0x1bff000
f0112648:	68 00 00 40 01       	push   $0x1400000
f011264d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112650:	e8 05 64 ff ff       	call   f0108a5a <cut_paste_pages>
f0112655:	83 c4 10             	add    $0x10,%esp
f0112658:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011265b:	e8 47 a8 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0112660:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112663:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112667:	75 08                	jne    f0112671 <test_cut_paste_pages+0x83a>
f0112669:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011266c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011266f:	74 2b                	je     f011269c <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112671:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112674:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112677:	83 ec 0c             	sub    $0xc,%esp
f011267a:	50                   	push   %eax
f011267b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011267e:	68 7c 98 13 f0       	push   $0xf013987c
f0112683:	68 23 02 00 00       	push   $0x223
f0112688:	68 fe 8e 13 f0       	push   $0xf0138efe
f011268d:	e8 81 dd fe ff       	call   f0100413 <_warn>
f0112692:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112695:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011269c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126a0:	74 04                	je     f01126a6 <test_cut_paste_pages+0x86f>
f01126a2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01126a6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01126ad:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01126b4:	83 ec 04             	sub    $0x4,%esp
f01126b7:	6a 00                	push   $0x0
f01126b9:	68 00 00 40 01       	push   $0x1400000
f01126be:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126c1:	e8 94 3b 00 00       	call   f011625a <CB>
f01126c6:	83 c4 10             	add    $0x10,%esp
f01126c9:	83 f8 01             	cmp    $0x1,%eax
f01126cc:	0f 85 80 00 00 00    	jne    f0112752 <test_cut_paste_pages+0x91b>
f01126d2:	83 ec 04             	sub    $0x4,%esp
f01126d5:	6a 00                	push   $0x0
f01126d7:	68 00 10 40 01       	push   $0x1401000
f01126dc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126df:	e8 76 3b 00 00       	call   f011625a <CB>
f01126e4:	83 c4 10             	add    $0x10,%esp
f01126e7:	83 f8 01             	cmp    $0x1,%eax
f01126ea:	75 66                	jne    f0112752 <test_cut_paste_pages+0x91b>
f01126ec:	83 ec 04             	sub    $0x4,%esp
f01126ef:	6a 00                	push   $0x0
f01126f1:	68 00 20 40 01       	push   $0x1402000
f01126f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126f9:	e8 5c 3b 00 00       	call   f011625a <CB>
f01126fe:	83 c4 10             	add    $0x10,%esp
f0112701:	83 f8 01             	cmp    $0x1,%eax
f0112704:	75 4c                	jne    f0112752 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112706:	83 ec 04             	sub    $0x4,%esp
f0112709:	6a 00                	push   $0x0
f011270b:	68 00 f0 bf 01       	push   $0x1bff000
f0112710:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112713:	e8 42 3b 00 00       	call   f011625a <CB>
f0112718:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011271b:	85 c0                	test   %eax,%eax
f011271d:	75 33                	jne    f0112752 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011271f:	83 ec 04             	sub    $0x4,%esp
f0112722:	6a 00                	push   $0x0
f0112724:	68 00 00 c0 01       	push   $0x1c00000
f0112729:	ff 75 d4             	pushl  -0x2c(%ebp)
f011272c:	e8 29 3b 00 00       	call   f011625a <CB>
f0112731:	83 c4 10             	add    $0x10,%esp
f0112734:	83 f8 01             	cmp    $0x1,%eax
f0112737:	75 19                	jne    f0112752 <test_cut_paste_pages+0x91b>
f0112739:	83 ec 04             	sub    $0x4,%esp
f011273c:	6a 00                	push   $0x0
f011273e:	68 00 10 c0 01       	push   $0x1c01000
f0112743:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112746:	e8 0f 3b 00 00       	call   f011625a <CB>
f011274b:	83 c4 10             	add    $0x10,%esp
f011274e:	85 c0                	test   %eax,%eax
f0112750:	74 28                	je     f011277a <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112752:	83 ec 04             	sub    $0x4,%esp
f0112755:	68 dc 98 13 f0       	push   $0xf01398dc
f011275a:	68 2c 02 00 00       	push   $0x22c
f011275f:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112764:	e8 aa dc fe ff       	call   f0100413 <_warn>
f0112769:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011276c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112773:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011277a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011277e:	74 04                	je     f0112784 <test_cut_paste_pages+0x94d>
f0112780:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112784:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011278b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011278f:	0f 84 99 00 00 00    	je     f011282e <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112795:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011279c:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01127a3:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01127aa:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01127b1:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01127b8:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01127bf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127c2:	8a 00                	mov    (%eax),%al
f01127c4:	3c 61                	cmp    $0x61,%al
f01127c6:	75 2d                	jne    f01127f5 <test_cut_paste_pages+0x9be>
f01127c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127cb:	8a 00                	mov    (%eax),%al
f01127cd:	3c 78                	cmp    $0x78,%al
f01127cf:	75 24                	jne    f01127f5 <test_cut_paste_pages+0x9be>
f01127d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127d4:	8a 00                	mov    (%eax),%al
f01127d6:	3c 62                	cmp    $0x62,%al
f01127d8:	75 1b                	jne    f01127f5 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01127da:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01127dd:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01127df:	3c 79                	cmp    $0x79,%al
f01127e1:	75 12                	jne    f01127f5 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01127e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01127e6:	8a 00                	mov    (%eax),%al
f01127e8:	3c 63                	cmp    $0x63,%al
f01127ea:	75 09                	jne    f01127f5 <test_cut_paste_pages+0x9be>
f01127ec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01127ef:	8a 00                	mov    (%eax),%al
f01127f1:	3c 7a                	cmp    $0x7a,%al
f01127f3:	74 28                	je     f011281d <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01127f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f01127fc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112803:	83 ec 04             	sub    $0x4,%esp
f0112806:	68 dc 97 13 f0       	push   $0xf01397dc
f011280b:	68 40 02 00 00       	push   $0x240
f0112810:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112815:	e8 f9 db fe ff       	call   f0100413 <_warn>
f011281a:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f011281d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112821:	74 04                	je     f0112827 <test_cut_paste_pages+0x9f0>
f0112823:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112827:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011282e:	83 ec 0c             	sub    $0xc,%esp
f0112831:	68 15 99 13 f0       	push   $0xf0139915
f0112836:	e8 d3 e4 fe ff       	call   f0100d0e <cprintf>
f011283b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f011283e:	83 ec 08             	sub    $0x8,%esp
f0112841:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112844:	68 24 99 13 f0       	push   $0xf0139924
f0112849:	e8 c0 e4 fe ff       	call   f0100d0e <cprintf>
f011284e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112851:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112855:	75 10                	jne    f0112867 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112857:	83 ec 0c             	sub    $0xc,%esp
f011285a:	68 58 99 13 f0       	push   $0xf0139958
f011285f:	e8 aa e4 fe ff       	call   f0100d0e <cprintf>
f0112864:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112867:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f011286c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011286f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112872:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112875:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011287a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011287d:	5b                   	pop    %ebx
f011287e:	5e                   	pop    %esi
f011287f:	5f                   	pop    %edi
f0112880:	5d                   	pop    %ebp
f0112881:	c3                   	ret    

f0112882 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112882:	55                   	push   %ebp
f0112883:	89 e5                	mov    %esp,%ebp
f0112885:	57                   	push   %edi
f0112886:	56                   	push   %esi
f0112887:	53                   	push   %ebx
f0112888:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011288e:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112894:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f0112899:	ba 0f 00 00 00       	mov    $0xf,%edx
f011289e:	89 c7                	mov    %eax,%edi
f01128a0:	89 de                	mov    %ebx,%esi
f01128a2:	89 d1                	mov    %edx,%ecx
f01128a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128a6:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01128ac:	b9 23 00 00 00       	mov    $0x23,%ecx
f01128b1:	b0 00                	mov    $0x0,%al
f01128b3:	89 d7                	mov    %edx,%edi
f01128b5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01128b7:	6a 00                	push   $0x0
f01128b9:	6a 0a                	push   $0xa
f01128bb:	6a 14                	push   $0x14
f01128bd:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01128c3:	50                   	push   %eax
f01128c4:	e8 a4 68 ff ff       	call   f010916d <env_create>
f01128c9:	83 c4 10             	add    $0x10,%esp
f01128cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01128cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01128d2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01128d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01128d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01128db:	8b 40 60             	mov    0x60(%eax),%eax
f01128de:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01128e4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01128ea:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01128ed:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01128f4:	75 70 20 
f01128f7:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f01128fe:	00 00 00 
f0112901:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112907:	b9 03 00 00 00       	mov    $0x3,%ecx
f011290c:	b8 00 00 00 00       	mov    $0x0,%eax
f0112911:	89 d7                	mov    %edx,%edi
f0112913:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112915:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112918:	8b 40 4c             	mov    0x4c(%eax),%eax
f011291b:	83 ec 08             	sub    $0x8,%esp
f011291e:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112924:	52                   	push   %edx
f0112925:	50                   	push   %eax
f0112926:	e8 1e f1 01 00       	call   f0131a49 <ltostr>
f011292b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011292e:	83 ec 04             	sub    $0x4,%esp
f0112931:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112937:	50                   	push   %eax
f0112938:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f011293e:	50                   	push   %eax
f011293f:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112945:	50                   	push   %eax
f0112946:	e8 f6 f1 01 00       	call   f0131b41 <strcconcat>
f011294b:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f011294e:	83 ec 0c             	sub    $0xc,%esp
f0112951:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112954:	e8 f1 3a 00 00       	call   f011644a <ClearUserSpace>
f0112959:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f011295c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112963:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f011296a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112971:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112978:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011297f:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112986:	83 ec 0c             	sub    $0xc,%esp
f0112989:	68 cc 99 13 f0       	push   $0xf01399cc
f011298e:	e8 7b e3 fe ff       	call   f0100d0e <cprintf>
f0112993:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112996:	83 ec 04             	sub    $0x4,%esp
f0112999:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011299f:	50                   	push   %eax
f01129a0:	68 02 9a 13 f0       	push   $0xf0139a02
f01129a5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129ab:	50                   	push   %eax
f01129ac:	e8 90 f1 01 00       	call   f0131b41 <strcconcat>
f01129b1:	83 c4 10             	add    $0x10,%esp
f01129b4:	83 ec 0c             	sub    $0xc,%esp
f01129b7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129bd:	50                   	push   %eax
f01129be:	e8 ad e3 fe ff       	call   f0100d70 <execute_command>
f01129c3:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01129c6:	83 ec 04             	sub    $0x4,%esp
f01129c9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129cf:	50                   	push   %eax
f01129d0:	68 07 9a 13 f0       	push   $0xf0139a07
f01129d5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129db:	50                   	push   %eax
f01129dc:	e8 60 f1 01 00       	call   f0131b41 <strcconcat>
f01129e1:	83 c4 10             	add    $0x10,%esp
f01129e4:	83 ec 0c             	sub    $0xc,%esp
f01129e7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129ed:	50                   	push   %eax
f01129ee:	e8 7d e3 fe ff       	call   f0100d70 <execute_command>
f01129f3:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01129f6:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01129fc:	bb 0d 9d 13 f0       	mov    $0xf0139d0d,%ebx
f0112a01:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a06:	89 c7                	mov    %eax,%edi
f0112a08:	89 de                	mov    %ebx,%esi
f0112a0a:	89 d1                	mov    %edx,%ecx
f0112a0c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a0e:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112a14:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a19:	b0 00                	mov    $0x0,%al
f0112a1b:	89 d7                	mov    %edx,%edi
f0112a1d:	f3 aa                	rep stos %al,%es:(%edi)
f0112a1f:	83 ec 0c             	sub    $0xc,%esp
f0112a22:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a28:	50                   	push   %eax
f0112a29:	e8 42 e3 fe ff       	call   f0100d70 <execute_command>
f0112a2e:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112a31:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a37:	bb 71 9d 13 f0       	mov    $0xf0139d71,%ebx
f0112a3c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a41:	89 c7                	mov    %eax,%edi
f0112a43:	89 de                	mov    %ebx,%esi
f0112a45:	89 d1                	mov    %edx,%ecx
f0112a47:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a49:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112a4f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a54:	b0 00                	mov    $0x0,%al
f0112a56:	89 d7                	mov    %edx,%edi
f0112a58:	f3 aa                	rep stos %al,%es:(%edi)
f0112a5a:	83 ec 0c             	sub    $0xc,%esp
f0112a5d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a63:	50                   	push   %eax
f0112a64:	e8 07 e3 fe ff       	call   f0100d70 <execute_command>
f0112a69:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112a6c:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112a72:	bb d5 9d 13 f0       	mov    $0xf0139dd5,%ebx
f0112a77:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a7c:	89 c7                	mov    %eax,%edi
f0112a7e:	89 de                	mov    %ebx,%esi
f0112a80:	89 d1                	mov    %edx,%ecx
f0112a82:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a84:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112a8a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a8f:	b0 00                	mov    $0x0,%al
f0112a91:	89 d7                	mov    %edx,%edi
f0112a93:	f3 aa                	rep stos %al,%es:(%edi)
f0112a95:	83 ec 0c             	sub    $0xc,%esp
f0112a98:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112a9e:	50                   	push   %eax
f0112a9f:	e8 cc e2 fe ff       	call   f0100d70 <execute_command>
f0112aa4:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112aa7:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112aad:	bb 39 9e 13 f0       	mov    $0xf0139e39,%ebx
f0112ab2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ab7:	89 c7                	mov    %eax,%edi
f0112ab9:	89 de                	mov    %ebx,%esi
f0112abb:	89 d1                	mov    %edx,%ecx
f0112abd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112abf:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112ac5:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112aca:	b0 00                	mov    $0x0,%al
f0112acc:	89 d7                	mov    %edx,%edi
f0112ace:	f3 aa                	rep stos %al,%es:(%edi)
f0112ad0:	83 ec 0c             	sub    $0xc,%esp
f0112ad3:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112ad9:	50                   	push   %eax
f0112ada:	e8 91 e2 fe ff       	call   f0100d70 <execute_command>
f0112adf:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112ae2:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112ae8:	bb 9d 9e 13 f0       	mov    $0xf0139e9d,%ebx
f0112aed:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112af2:	89 c7                	mov    %eax,%edi
f0112af4:	89 de                	mov    %ebx,%esi
f0112af6:	89 d1                	mov    %edx,%ecx
f0112af8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112afa:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112b00:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b05:	b0 00                	mov    $0x0,%al
f0112b07:	89 d7                	mov    %edx,%edi
f0112b09:	f3 aa                	rep stos %al,%es:(%edi)
f0112b0b:	83 ec 0c             	sub    $0xc,%esp
f0112b0e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112b14:	50                   	push   %eax
f0112b15:	e8 56 e2 fe ff       	call   f0100d70 <execute_command>
f0112b1a:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112b1d:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b23:	bb 01 9f 13 f0       	mov    $0xf0139f01,%ebx
f0112b28:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b2d:	89 c7                	mov    %eax,%edi
f0112b2f:	89 de                	mov    %ebx,%esi
f0112b31:	89 d1                	mov    %edx,%ecx
f0112b33:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b35:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112b3b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b40:	b0 00                	mov    $0x0,%al
f0112b42:	89 d7                	mov    %edx,%edi
f0112b44:	f3 aa                	rep stos %al,%es:(%edi)
f0112b46:	83 ec 0c             	sub    $0xc,%esp
f0112b49:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b4f:	50                   	push   %eax
f0112b50:	e8 1b e2 fe ff       	call   f0100d70 <execute_command>
f0112b55:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112b58:	83 ec 04             	sub    $0x4,%esp
f0112b5b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b61:	50                   	push   %eax
f0112b62:	68 0f 9a 13 f0       	push   $0xf0139a0f
f0112b67:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b6d:	50                   	push   %eax
f0112b6e:	e8 ce ef 01 00       	call   f0131b41 <strcconcat>
f0112b73:	83 c4 10             	add    $0x10,%esp
f0112b76:	83 ec 0c             	sub    $0xc,%esp
f0112b79:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b7f:	50                   	push   %eax
f0112b80:	e8 eb e1 fe ff       	call   f0100d70 <execute_command>
f0112b85:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112b88:	83 ec 04             	sub    $0x4,%esp
f0112b8b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b91:	50                   	push   %eax
f0112b92:	68 19 9a 13 f0       	push   $0xf0139a19
f0112b97:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b9d:	50                   	push   %eax
f0112b9e:	e8 9e ef 01 00       	call   f0131b41 <strcconcat>
f0112ba3:	83 c4 10             	add    $0x10,%esp
f0112ba6:	83 ec 0c             	sub    $0xc,%esp
f0112ba9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112baf:	50                   	push   %eax
f0112bb0:	e8 bb e1 fe ff       	call   f0100d70 <execute_command>
f0112bb5:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112bb8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bbe:	bb 65 9f 13 f0       	mov    $0xf0139f65,%ebx
f0112bc3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bc8:	89 c7                	mov    %eax,%edi
f0112bca:	89 de                	mov    %ebx,%esi
f0112bcc:	89 d1                	mov    %edx,%ecx
f0112bce:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bd0:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112bd6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bdb:	b0 00                	mov    $0x0,%al
f0112bdd:	89 d7                	mov    %edx,%edi
f0112bdf:	f3 aa                	rep stos %al,%es:(%edi)
f0112be1:	83 ec 0c             	sub    $0xc,%esp
f0112be4:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bea:	50                   	push   %eax
f0112beb:	e8 80 e1 fe ff       	call   f0100d70 <execute_command>
f0112bf0:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112bf3:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112bf9:	bb c9 9f 13 f0       	mov    $0xf0139fc9,%ebx
f0112bfe:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c03:	89 c7                	mov    %eax,%edi
f0112c05:	89 de                	mov    %ebx,%esi
f0112c07:	89 d1                	mov    %edx,%ecx
f0112c09:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c0b:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112c11:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c16:	b0 00                	mov    $0x0,%al
f0112c18:	89 d7                	mov    %edx,%edi
f0112c1a:	f3 aa                	rep stos %al,%es:(%edi)
f0112c1c:	83 ec 0c             	sub    $0xc,%esp
f0112c1f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c25:	50                   	push   %eax
f0112c26:	e8 45 e1 fe ff       	call   f0100d70 <execute_command>
f0112c2b:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112c2e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c34:	bb 2d a0 13 f0       	mov    $0xf013a02d,%ebx
f0112c39:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c3e:	89 c7                	mov    %eax,%edi
f0112c40:	89 de                	mov    %ebx,%esi
f0112c42:	89 d1                	mov    %edx,%ecx
f0112c44:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c46:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112c4c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c51:	b0 00                	mov    $0x0,%al
f0112c53:	89 d7                	mov    %edx,%edi
f0112c55:	f3 aa                	rep stos %al,%es:(%edi)
f0112c57:	83 ec 0c             	sub    $0xc,%esp
f0112c5a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c60:	50                   	push   %eax
f0112c61:	e8 0a e1 fe ff       	call   f0100d70 <execute_command>
f0112c66:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112c69:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112c70:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112c77:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112c7e:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112c85:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112c8c:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112c93:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112c9a:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112ca1:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112ca8:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112caf:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112cb6:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112cbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112cc0:	8a 00                	mov    (%eax),%al
f0112cc2:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112cc8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ccb:	8a 00                	mov    (%eax),%al
f0112ccd:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112cd3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112cd6:	8a 00                	mov    (%eax),%al
f0112cd8:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112cde:	e8 c4 a1 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0112ce3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112ce6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ce9:	89 d0                	mov    %edx,%eax
f0112ceb:	01 c0                	add    %eax,%eax
f0112ced:	01 d0                	add    %edx,%eax
f0112cef:	01 c0                	add    %eax,%eax
f0112cf1:	50                   	push   %eax
f0112cf2:	68 00 00 10 00       	push   $0x100000
f0112cf7:	6a 00                	push   $0x0
f0112cf9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112cfc:	e8 d7 5e ff ff       	call   f0108bd8 <copy_paste_chunk>
f0112d01:	83 c4 10             	add    $0x10,%esp
f0112d04:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d07:	e8 9b a1 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0112d0c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112d0f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112d16:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112d1a:	75 08                	jne    f0112d24 <test_copy_paste_chunk+0x4a2>
f0112d1c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d1f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112d22:	74 2b                	je     f0112d4f <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d27:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d2a:	83 ec 0c             	sub    $0xc,%esp
f0112d2d:	50                   	push   %eax
f0112d2e:	ff 75 88             	pushl  -0x78(%ebp)
f0112d31:	68 28 9a 13 f0       	push   $0xf0139a28
f0112d36:	68 93 02 00 00       	push   $0x293
f0112d3b:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112d40:	e8 ce d6 fe ff       	call   f0100413 <_warn>
f0112d45:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112d48:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112d4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d53:	74 04                	je     f0112d59 <test_copy_paste_chunk+0x4d7>
f0112d55:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112d59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112d60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d63:	8a 00                	mov    (%eax),%al
f0112d65:	3c 61                	cmp    $0x61,%al
f0112d67:	75 75                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d69:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d6c:	8a 00                	mov    (%eax),%al
f0112d6e:	3c 78                	cmp    $0x78,%al
f0112d70:	75 6c                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d72:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d75:	8a 00                	mov    (%eax),%al
f0112d77:	3c 62                	cmp    $0x62,%al
f0112d79:	75 63                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d7b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112d7e:	8a 00                	mov    (%eax),%al
f0112d80:	3c 79                	cmp    $0x79,%al
f0112d82:	75 5a                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d84:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d87:	8a 00                	mov    (%eax),%al
f0112d89:	3c 63                	cmp    $0x63,%al
f0112d8b:	75 51                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d90:	8a 00                	mov    (%eax),%al
f0112d92:	3c 7a                	cmp    $0x7a,%al
f0112d94:	75 48                	jne    f0112dde <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112d96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112d99:	8a 00                	mov    (%eax),%al
f0112d9b:	3c 64                	cmp    $0x64,%al
f0112d9d:	75 3f                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112d9f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112da2:	8a 10                	mov    (%eax),%dl
f0112da4:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112daa:	38 c2                	cmp    %al,%dl
f0112dac:	75 30                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112dae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112db1:	8a 00                	mov    (%eax),%al
f0112db3:	3c 65                	cmp    $0x65,%al
f0112db5:	75 27                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112db7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dba:	8a 10                	mov    (%eax),%dl
f0112dbc:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112dc2:	38 c2                	cmp    %al,%dl
f0112dc4:	75 18                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112dc6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112dc9:	8a 00                	mov    (%eax),%al
f0112dcb:	3c 66                	cmp    $0x66,%al
f0112dcd:	75 0f                	jne    f0112dde <test_copy_paste_chunk+0x55c>
f0112dcf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112dd2:	8a 10                	mov    (%eax),%dl
f0112dd4:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112dda:	38 c2                	cmp    %al,%dl
f0112ddc:	74 21                	je     f0112dff <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112dde:	83 ec 04             	sub    $0x4,%esp
f0112de1:	68 8c 9a 13 f0       	push   $0xf0139a8c
f0112de6:	68 9c 02 00 00       	push   $0x29c
f0112deb:	68 fe 8e 13 f0       	push   $0xf0138efe
f0112df0:	e8 1e d6 fe ff       	call   f0100413 <_warn>
f0112df5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112df8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112dff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e03:	74 04                	je     f0112e09 <test_copy_paste_chunk+0x587>
f0112e05:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e09:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112e10:	83 ec 0c             	sub    $0xc,%esp
f0112e13:	68 c6 9a 13 f0       	push   $0xf0139ac6
f0112e18:	e8 f1 de fe ff       	call   f0100d0e <cprintf>
f0112e1d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112e20:	83 ec 0c             	sub    $0xc,%esp
f0112e23:	68 d8 9a 13 f0       	push   $0xf0139ad8
f0112e28:	e8 e1 de fe ff       	call   f0100d0e <cprintf>
f0112e2d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112e30:	83 ec 04             	sub    $0x4,%esp
f0112e33:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e39:	50                   	push   %eax
f0112e3a:	68 0e 9b 13 f0       	push   $0xf0139b0e
f0112e3f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e45:	50                   	push   %eax
f0112e46:	e8 f6 ec 01 00       	call   f0131b41 <strcconcat>
f0112e4b:	83 c4 10             	add    $0x10,%esp
f0112e4e:	83 ec 0c             	sub    $0xc,%esp
f0112e51:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e57:	50                   	push   %eax
f0112e58:	e8 13 df fe ff       	call   f0100d70 <execute_command>
f0112e5d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112e60:	83 ec 04             	sub    $0x4,%esp
f0112e63:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e69:	50                   	push   %eax
f0112e6a:	68 18 9b 13 f0       	push   $0xf0139b18
f0112e6f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e75:	50                   	push   %eax
f0112e76:	e8 c6 ec 01 00       	call   f0131b41 <strcconcat>
f0112e7b:	83 c4 10             	add    $0x10,%esp
f0112e7e:	83 ec 0c             	sub    $0xc,%esp
f0112e81:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e87:	50                   	push   %eax
f0112e88:	e8 e3 de fe ff       	call   f0100d70 <execute_command>
f0112e8d:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112e90:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e96:	bb 91 a0 13 f0       	mov    $0xf013a091,%ebx
f0112e9b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ea0:	89 c7                	mov    %eax,%edi
f0112ea2:	89 de                	mov    %ebx,%esi
f0112ea4:	89 d1                	mov    %edx,%ecx
f0112ea6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ea8:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112eae:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112eb3:	b0 00                	mov    $0x0,%al
f0112eb5:	89 d7                	mov    %edx,%edi
f0112eb7:	f3 aa                	rep stos %al,%es:(%edi)
f0112eb9:	83 ec 0c             	sub    $0xc,%esp
f0112ebc:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ec2:	50                   	push   %eax
f0112ec3:	e8 a8 de fe ff       	call   f0100d70 <execute_command>
f0112ec8:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112ecb:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112ed1:	bb f5 a0 13 f0       	mov    $0xf013a0f5,%ebx
f0112ed6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112edb:	89 c7                	mov    %eax,%edi
f0112edd:	89 de                	mov    %ebx,%esi
f0112edf:	89 d1                	mov    %edx,%ecx
f0112ee1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ee3:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112ee9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112eee:	b0 00                	mov    $0x0,%al
f0112ef0:	89 d7                	mov    %edx,%edi
f0112ef2:	f3 aa                	rep stos %al,%es:(%edi)
f0112ef4:	83 ec 0c             	sub    $0xc,%esp
f0112ef7:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112efd:	50                   	push   %eax
f0112efe:	e8 6d de fe ff       	call   f0100d70 <execute_command>
f0112f03:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112f06:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f0c:	bb 59 a1 13 f0       	mov    $0xf013a159,%ebx
f0112f11:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f16:	89 c7                	mov    %eax,%edi
f0112f18:	89 de                	mov    %ebx,%esi
f0112f1a:	89 d1                	mov    %edx,%ecx
f0112f1c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f1e:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f24:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f29:	b0 00                	mov    $0x0,%al
f0112f2b:	89 d7                	mov    %edx,%edi
f0112f2d:	f3 aa                	rep stos %al,%es:(%edi)
f0112f2f:	83 ec 0c             	sub    $0xc,%esp
f0112f32:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f38:	50                   	push   %eax
f0112f39:	e8 32 de fe ff       	call   f0100d70 <execute_command>
f0112f3e:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112f41:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f47:	bb bd a1 13 f0       	mov    $0xf013a1bd,%ebx
f0112f4c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f51:	89 c7                	mov    %eax,%edi
f0112f53:	89 de                	mov    %ebx,%esi
f0112f55:	89 d1                	mov    %edx,%ecx
f0112f57:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f59:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f5f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f64:	b0 00                	mov    $0x0,%al
f0112f66:	89 d7                	mov    %edx,%edi
f0112f68:	f3 aa                	rep stos %al,%es:(%edi)
f0112f6a:	83 ec 0c             	sub    $0xc,%esp
f0112f6d:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f73:	50                   	push   %eax
f0112f74:	e8 f7 dd fe ff       	call   f0100d70 <execute_command>
f0112f79:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112f7c:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f82:	bb 21 a2 13 f0       	mov    $0xf013a221,%ebx
f0112f87:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f8c:	89 c7                	mov    %eax,%edi
f0112f8e:	89 de                	mov    %ebx,%esi
f0112f90:	89 d1                	mov    %edx,%ecx
f0112f92:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f94:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112f9a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f9f:	b0 00                	mov    $0x0,%al
f0112fa1:	89 d7                	mov    %edx,%edi
f0112fa3:	f3 aa                	rep stos %al,%es:(%edi)
f0112fa5:	83 ec 0c             	sub    $0xc,%esp
f0112fa8:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fae:	50                   	push   %eax
f0112faf:	e8 bc dd fe ff       	call   f0100d70 <execute_command>
f0112fb4:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112fb7:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fbd:	bb 85 a2 13 f0       	mov    $0xf013a285,%ebx
f0112fc2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fc7:	89 c7                	mov    %eax,%edi
f0112fc9:	89 de                	mov    %ebx,%esi
f0112fcb:	89 d1                	mov    %edx,%ecx
f0112fcd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fcf:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112fd5:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fda:	b0 00                	mov    $0x0,%al
f0112fdc:	89 d7                	mov    %edx,%edi
f0112fde:	f3 aa                	rep stos %al,%es:(%edi)
f0112fe0:	83 ec 0c             	sub    $0xc,%esp
f0112fe3:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fe9:	50                   	push   %eax
f0112fea:	e8 81 dd fe ff       	call   f0100d70 <execute_command>
f0112fef:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112ff2:	83 ec 04             	sub    $0x4,%esp
f0112ff5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ffb:	50                   	push   %eax
f0112ffc:	68 22 9b 13 f0       	push   $0xf0139b22
f0113001:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113007:	50                   	push   %eax
f0113008:	e8 34 eb 01 00       	call   f0131b41 <strcconcat>
f011300d:	83 c4 10             	add    $0x10,%esp
f0113010:	83 ec 0c             	sub    $0xc,%esp
f0113013:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113019:	50                   	push   %eax
f011301a:	e8 51 dd fe ff       	call   f0100d70 <execute_command>
f011301f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113022:	83 ec 04             	sub    $0x4,%esp
f0113025:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011302b:	50                   	push   %eax
f011302c:	68 2c 9b 13 f0       	push   $0xf0139b2c
f0113031:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113037:	50                   	push   %eax
f0113038:	e8 04 eb 01 00       	call   f0131b41 <strcconcat>
f011303d:	83 c4 10             	add    $0x10,%esp
f0113040:	83 ec 0c             	sub    $0xc,%esp
f0113043:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113049:	50                   	push   %eax
f011304a:	e8 21 dd fe ff       	call   f0100d70 <execute_command>
f011304f:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0113052:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113058:	bb e9 a2 13 f0       	mov    $0xf013a2e9,%ebx
f011305d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113062:	89 c7                	mov    %eax,%edi
f0113064:	89 de                	mov    %ebx,%esi
f0113066:	89 d1                	mov    %edx,%ecx
f0113068:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011306a:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113070:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113075:	b0 00                	mov    $0x0,%al
f0113077:	89 d7                	mov    %edx,%edi
f0113079:	f3 aa                	rep stos %al,%es:(%edi)
f011307b:	83 ec 0c             	sub    $0xc,%esp
f011307e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113084:	50                   	push   %eax
f0113085:	e8 e6 dc fe ff       	call   f0100d70 <execute_command>
f011308a:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f011308d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113093:	bb 4d a3 13 f0       	mov    $0xf013a34d,%ebx
f0113098:	ba 0f 00 00 00       	mov    $0xf,%edx
f011309d:	89 c7                	mov    %eax,%edi
f011309f:	89 de                	mov    %ebx,%esi
f01130a1:	89 d1                	mov    %edx,%ecx
f01130a3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130a5:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01130ab:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130b0:	b0 00                	mov    $0x0,%al
f01130b2:	89 d7                	mov    %edx,%edi
f01130b4:	f3 aa                	rep stos %al,%es:(%edi)
f01130b6:	83 ec 0c             	sub    $0xc,%esp
f01130b9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130bf:	50                   	push   %eax
f01130c0:	e8 ab dc fe ff       	call   f0100d70 <execute_command>
f01130c5:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01130c8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130ce:	bb b1 a3 13 f0       	mov    $0xf013a3b1,%ebx
f01130d3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130d8:	89 c7                	mov    %eax,%edi
f01130da:	89 de                	mov    %ebx,%esi
f01130dc:	89 d1                	mov    %edx,%ecx
f01130de:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130e0:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01130e6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130eb:	b0 00                	mov    $0x0,%al
f01130ed:	89 d7                	mov    %edx,%edi
f01130ef:	f3 aa                	rep stos %al,%es:(%edi)
f01130f1:	83 ec 0c             	sub    $0xc,%esp
f01130f4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130fa:	50                   	push   %eax
f01130fb:	e8 70 dc fe ff       	call   f0100d70 <execute_command>
f0113100:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113103:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011310a:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113111:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113118:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011311f:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113126:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011312d:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113134:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011313b:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0113142:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113149:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113150:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113157:	8b 45 90             	mov    -0x70(%ebp),%eax
f011315a:	8a 00                	mov    (%eax),%al
f011315c:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113162:	e8 40 9d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113167:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f011316a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011316d:	89 d0                	mov    %edx,%eax
f011316f:	01 c0                	add    %eax,%eax
f0113171:	01 d0                	add    %edx,%eax
f0113173:	01 c0                	add    %eax,%eax
f0113175:	50                   	push   %eax
f0113176:	68 00 00 40 00       	push   $0x400000
f011317b:	68 00 00 20 00       	push   $0x200000
f0113180:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113183:	e8 50 5a ff ff       	call   f0108bd8 <copy_paste_chunk>
f0113188:	83 c4 10             	add    $0x10,%esp
f011318b:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011318e:	e8 14 9d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113193:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113196:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011319d:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01131a1:	75 08                	jne    f01131ab <test_copy_paste_chunk+0x929>
f01131a3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131a6:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01131a9:	74 2b                	je     f01131d6 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131ab:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131ae:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131b1:	83 ec 0c             	sub    $0xc,%esp
f01131b4:	50                   	push   %eax
f01131b5:	ff 75 80             	pushl  -0x80(%ebp)
f01131b8:	68 38 9b 13 f0       	push   $0xf0139b38
f01131bd:	68 cc 02 00 00       	push   $0x2cc
f01131c2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01131c7:	e8 47 d2 fe ff       	call   f0100413 <_warn>
f01131cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131cf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01131d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131da:	74 04                	je     f01131e0 <test_copy_paste_chunk+0x95e>
f01131dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01131e7:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01131ee:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01131f1:	83 ec 08             	sub    $0x8,%esp
f01131f4:	6a 01                	push   $0x1
f01131f6:	6a 07                	push   $0x7
f01131f8:	6a 07                	push   $0x7
f01131fa:	6a 07                	push   $0x7
f01131fc:	6a 07                	push   $0x7
f01131fe:	6a 01                	push   $0x1
f0113200:	68 00 20 00 00       	push   $0x2000
f0113205:	68 00 00 40 00       	push   $0x400000
f011320a:	68 00 00 20 00       	push   $0x200000
f011320f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113212:	e8 67 32 00 00       	call   f011647e <CCP>
f0113217:	83 c4 30             	add    $0x30,%esp
f011321a:	83 f8 01             	cmp    $0x1,%eax
f011321d:	74 2b                	je     f011324a <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011321f:	83 ec 04             	sub    $0x4,%esp
f0113222:	68 8c 9b 13 f0       	push   $0xf0139b8c
f0113227:	68 d5 02 00 00       	push   $0x2d5
f011322c:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113231:	e8 dd d1 fe ff       	call   f0100413 <_warn>
f0113236:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113239:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113240:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113247:	00 00 00 
		}
		if (correct) eval += 5 ;
f011324a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011324e:	74 04                	je     f0113254 <test_copy_paste_chunk+0x9d2>
f0113250:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113254:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f011325b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011325e:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0113261:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113264:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113267:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011326a:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f011326d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113270:	8a 00                	mov    (%eax),%al
f0113272:	3c 61                	cmp    $0x61,%al
f0113274:	75 69                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f0113276:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113279:	8a 00                	mov    (%eax),%al
f011327b:	3c 61                	cmp    $0x61,%al
f011327d:	75 60                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f011327f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113282:	8a 00                	mov    (%eax),%al
f0113284:	3c 79                	cmp    $0x79,%al
f0113286:	75 57                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f0113288:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011328b:	8a 00                	mov    (%eax),%al
f011328d:	3c 62                	cmp    $0x62,%al
f011328f:	75 4e                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f0113291:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113294:	8a 00                	mov    (%eax),%al
f0113296:	3c 63                	cmp    $0x63,%al
f0113298:	75 45                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f011329a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011329d:	8a 00                	mov    (%eax),%al
f011329f:	3c 7a                	cmp    $0x7a,%al
f01132a1:	75 3c                	jne    f01132df <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01132a3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01132a6:	8a 00                	mov    (%eax),%al
f01132a8:	3c 77                	cmp    $0x77,%al
f01132aa:	75 33                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f01132ac:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01132af:	8a 00                	mov    (%eax),%al
f01132b1:	3c 64                	cmp    $0x64,%al
f01132b3:	75 2a                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f01132b5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01132b8:	8a 00                	mov    (%eax),%al
f01132ba:	3c 65                	cmp    $0x65,%al
f01132bc:	75 21                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f01132be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132c1:	8a 00                	mov    (%eax),%al
f01132c3:	3c 65                	cmp    $0x65,%al
f01132c5:	75 18                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f01132c7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01132ca:	8a 00                	mov    (%eax),%al
f01132cc:	3c 66                	cmp    $0x66,%al
f01132ce:	75 0f                	jne    f01132df <test_copy_paste_chunk+0xa5d>
f01132d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01132d3:	8a 10                	mov    (%eax),%dl
f01132d5:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01132db:	38 c2                	cmp    %al,%dl
f01132dd:	74 21                	je     f0113300 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132df:	83 ec 04             	sub    $0x4,%esp
f01132e2:	68 8c 9a 13 f0       	push   $0xf0139a8c
f01132e7:	68 e3 02 00 00       	push   $0x2e3
f01132ec:	68 fe 8e 13 f0       	push   $0xf0138efe
f01132f1:	e8 1d d1 fe ff       	call   f0100413 <_warn>
f01132f6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113300:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113304:	74 04                	je     f011330a <test_copy_paste_chunk+0xa88>
f0113306:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011330a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113311:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113314:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113317:	e8 8b 9b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011331c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011331f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113322:	89 c2                	mov    %eax,%edx
f0113324:	01 d2                	add    %edx,%edx
f0113326:	01 d0                	add    %edx,%eax
f0113328:	50                   	push   %eax
f0113329:	68 00 08 20 00       	push   $0x200800
f011332e:	68 00 08 40 00       	push   $0x400800
f0113333:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113336:	e8 9d 58 ff ff       	call   f0108bd8 <copy_paste_chunk>
f011333b:	83 c4 10             	add    $0x10,%esp
f011333e:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113341:	e8 61 9b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113346:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113349:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011334d:	75 08                	jne    f0113357 <test_copy_paste_chunk+0xad5>
f011334f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113352:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113355:	74 2b                	je     f0113382 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113357:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011335a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011335d:	83 ec 0c             	sub    $0xc,%esp
f0113360:	50                   	push   %eax
f0113361:	ff 75 80             	pushl  -0x80(%ebp)
f0113364:	68 38 9b 13 f0       	push   $0xf0139b38
f0113369:	68 f3 02 00 00       	push   $0x2f3
f011336e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113373:	e8 9b d0 fe ff       	call   f0100413 <_warn>
f0113378:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011337b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113382:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113386:	74 04                	je     f011338c <test_copy_paste_chunk+0xb0a>
f0113388:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011338c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113393:	83 ec 08             	sub    $0x8,%esp
f0113396:	6a 01                	push   $0x1
f0113398:	6a 07                	push   $0x7
f011339a:	6a 07                	push   $0x7
f011339c:	6a 07                	push   $0x7
f011339e:	6a 07                	push   $0x7
f01133a0:	6a 01                	push   $0x1
f01133a2:	68 00 20 00 00       	push   $0x2000
f01133a7:	68 00 00 20 00       	push   $0x200000
f01133ac:	68 00 00 40 00       	push   $0x400000
f01133b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133b4:	e8 c5 30 00 00       	call   f011647e <CCP>
f01133b9:	83 c4 30             	add    $0x30,%esp
f01133bc:	83 f8 01             	cmp    $0x1,%eax
f01133bf:	74 21                	je     f01133e2 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01133c1:	83 ec 04             	sub    $0x4,%esp
f01133c4:	68 d8 9b 13 f0       	push   $0xf0139bd8
f01133c9:	68 fb 02 00 00       	push   $0x2fb
f01133ce:	68 fe 8e 13 f0       	push   $0xf0138efe
f01133d3:	e8 3b d0 fe ff       	call   f0100413 <_warn>
f01133d8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133db:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01133e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133e6:	74 04                	je     f01133ec <test_copy_paste_chunk+0xb6a>
f01133e8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133ec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01133f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133f6:	8a 00                	mov    (%eax),%al
f01133f8:	3c 61                	cmp    $0x61,%al
f01133fa:	75 69                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f01133fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01133ff:	8a 00                	mov    (%eax),%al
f0113401:	3c 61                	cmp    $0x61,%al
f0113403:	75 60                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f0113405:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113408:	8a 00                	mov    (%eax),%al
f011340a:	3c 79                	cmp    $0x79,%al
f011340c:	75 57                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f011340e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113411:	8a 00                	mov    (%eax),%al
f0113413:	3c 62                	cmp    $0x62,%al
f0113415:	75 4e                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f0113417:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011341a:	8a 00                	mov    (%eax),%al
f011341c:	3c 7a                	cmp    $0x7a,%al
f011341e:	75 45                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f0113420:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113423:	8a 00                	mov    (%eax),%al
f0113425:	3c 7a                	cmp    $0x7a,%al
f0113427:	75 3c                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113429:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011342c:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011342e:	3c 64                	cmp    $0x64,%al
f0113430:	75 33                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113432:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113435:	8a 00                	mov    (%eax),%al
f0113437:	3c 64                	cmp    $0x64,%al
f0113439:	75 2a                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f011343b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011343e:	8a 00                	mov    (%eax),%al
f0113440:	3c 65                	cmp    $0x65,%al
f0113442:	75 21                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f0113444:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113447:	8a 00                	mov    (%eax),%al
f0113449:	3c 78                	cmp    $0x78,%al
f011344b:	75 18                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f011344d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113450:	8a 00                	mov    (%eax),%al
f0113452:	3c 66                	cmp    $0x66,%al
f0113454:	75 0f                	jne    f0113465 <test_copy_paste_chunk+0xbe3>
f0113456:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113459:	8a 10                	mov    (%eax),%dl
f011345b:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113461:	38 c2                	cmp    %al,%dl
f0113463:	74 21                	je     f0113486 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113465:	83 ec 04             	sub    $0x4,%esp
f0113468:	68 8c 9a 13 f0       	push   $0xf0139a8c
f011346d:	68 04 03 00 00       	push   $0x304
f0113472:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113477:	e8 97 cf fe ff       	call   f0100413 <_warn>
f011347c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011347f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113486:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011348a:	74 04                	je     f0113490 <test_copy_paste_chunk+0xc0e>
f011348c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113490:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113497:	83 ec 0c             	sub    $0xc,%esp
f011349a:	68 23 9c 13 f0       	push   $0xf0139c23
f011349f:	e8 6a d8 fe ff       	call   f0100d0e <cprintf>
f01134a4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01134a7:	83 ec 0c             	sub    $0xc,%esp
f01134aa:	68 34 9c 13 f0       	push   $0xf0139c34
f01134af:	e8 5a d8 fe ff       	call   f0100d0e <cprintf>
f01134b4:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01134b7:	83 ec 04             	sub    $0x4,%esp
f01134ba:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134c0:	50                   	push   %eax
f01134c1:	68 68 9c 13 f0       	push   $0xf0139c68
f01134c6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134cc:	50                   	push   %eax
f01134cd:	e8 6f e6 01 00       	call   f0131b41 <strcconcat>
f01134d2:	83 c4 10             	add    $0x10,%esp
f01134d5:	83 ec 0c             	sub    $0xc,%esp
f01134d8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134de:	50                   	push   %eax
f01134df:	e8 8c d8 fe ff       	call   f0100d70 <execute_command>
f01134e4:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01134e7:	83 ec 04             	sub    $0x4,%esp
f01134ea:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134f0:	50                   	push   %eax
f01134f1:	68 72 9c 13 f0       	push   $0xf0139c72
f01134f6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134fc:	50                   	push   %eax
f01134fd:	e8 3f e6 01 00       	call   f0131b41 <strcconcat>
f0113502:	83 c4 10             	add    $0x10,%esp
f0113505:	83 ec 0c             	sub    $0xc,%esp
f0113508:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011350e:	50                   	push   %eax
f011350f:	e8 5c d8 fe ff       	call   f0100d70 <execute_command>
f0113514:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113517:	83 ec 04             	sub    $0x4,%esp
f011351a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113520:	50                   	push   %eax
f0113521:	68 7c 9c 13 f0       	push   $0xf0139c7c
f0113526:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011352c:	50                   	push   %eax
f011352d:	e8 0f e6 01 00       	call   f0131b41 <strcconcat>
f0113532:	83 c4 10             	add    $0x10,%esp
f0113535:	83 ec 0c             	sub    $0xc,%esp
f0113538:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011353e:	50                   	push   %eax
f011353f:	e8 2c d8 fe ff       	call   f0100d70 <execute_command>
f0113544:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113547:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011354d:	bb 15 a4 13 f0       	mov    $0xf013a415,%ebx
f0113552:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113557:	89 c7                	mov    %eax,%edi
f0113559:	89 de                	mov    %ebx,%esi
f011355b:	89 d1                	mov    %edx,%ecx
f011355d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011355f:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113565:	b9 55 00 00 00       	mov    $0x55,%ecx
f011356a:	b0 00                	mov    $0x0,%al
f011356c:	89 d7                	mov    %edx,%edi
f011356e:	f3 aa                	rep stos %al,%es:(%edi)
f0113570:	83 ec 0c             	sub    $0xc,%esp
f0113573:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113579:	50                   	push   %eax
f011357a:	e8 f1 d7 fe ff       	call   f0100d70 <execute_command>
f011357f:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113582:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113588:	bb 79 a4 13 f0       	mov    $0xf013a479,%ebx
f011358d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113592:	89 c7                	mov    %eax,%edi
f0113594:	89 de                	mov    %ebx,%esi
f0113596:	89 d1                	mov    %edx,%ecx
f0113598:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011359a:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01135a0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135a5:	b0 00                	mov    $0x0,%al
f01135a7:	89 d7                	mov    %edx,%edi
f01135a9:	f3 aa                	rep stos %al,%es:(%edi)
f01135ab:	83 ec 0c             	sub    $0xc,%esp
f01135ae:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135b4:	50                   	push   %eax
f01135b5:	e8 b6 d7 fe ff       	call   f0100d70 <execute_command>
f01135ba:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01135bd:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135c3:	bb dd a4 13 f0       	mov    $0xf013a4dd,%ebx
f01135c8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135cd:	89 c7                	mov    %eax,%edi
f01135cf:	89 de                	mov    %ebx,%esi
f01135d1:	89 d1                	mov    %edx,%ecx
f01135d3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135d5:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01135db:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135e0:	b0 00                	mov    $0x0,%al
f01135e2:	89 d7                	mov    %edx,%edi
f01135e4:	f3 aa                	rep stos %al,%es:(%edi)
f01135e6:	83 ec 0c             	sub    $0xc,%esp
f01135e9:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135ef:	50                   	push   %eax
f01135f0:	e8 7b d7 fe ff       	call   f0100d70 <execute_command>
f01135f5:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01135f8:	e8 aa 98 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01135fd:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113600:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113603:	89 d0                	mov    %edx,%eax
f0113605:	01 c0                	add    %eax,%eax
f0113607:	01 d0                	add    %edx,%eax
f0113609:	c1 e0 02             	shl    $0x2,%eax
f011360c:	50                   	push   %eax
f011360d:	68 00 00 90 00       	push   $0x900000
f0113612:	68 00 00 80 00       	push   $0x800000
f0113617:	ff 75 d4             	pushl  -0x2c(%ebp)
f011361a:	e8 b9 55 ff ff       	call   f0108bd8 <copy_paste_chunk>
f011361f:	83 c4 10             	add    $0x10,%esp
f0113622:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113628:	e8 7a 98 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011362d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113630:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113637:	75 0b                	jne    f0113644 <test_copy_paste_chunk+0xdc2>
f0113639:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011363c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011363f:	83 f8 03             	cmp    $0x3,%eax
f0113642:	74 2e                	je     f0113672 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113644:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113647:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011364a:	83 ec 0c             	sub    $0xc,%esp
f011364d:	50                   	push   %eax
f011364e:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113654:	68 38 9b 13 f0       	push   $0xf0139b38
f0113659:	68 22 03 00 00       	push   $0x322
f011365e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113663:	e8 ab cd fe ff       	call   f0100413 <_warn>
f0113668:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011366b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113672:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113676:	74 04                	je     f011367c <test_copy_paste_chunk+0xdfa>
f0113678:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011367c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113683:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011368a:	83 ec 08             	sub    $0x8,%esp
f011368d:	6a 01                	push   $0x1
f011368f:	6a 07                	push   $0x7
f0113691:	6a 07                	push   $0x7
f0113693:	6a 07                	push   $0x7
f0113695:	6a 07                	push   $0x7
f0113697:	6a 01                	push   $0x1
f0113699:	68 00 30 00 00       	push   $0x3000
f011369e:	68 00 00 90 00       	push   $0x900000
f01136a3:	68 00 00 80 00       	push   $0x800000
f01136a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136ab:	e8 ce 2d 00 00       	call   f011647e <CCP>
f01136b0:	83 c4 30             	add    $0x30,%esp
f01136b3:	83 f8 01             	cmp    $0x1,%eax
f01136b6:	74 28                	je     f01136e0 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01136b8:	83 ec 04             	sub    $0x4,%esp
f01136bb:	68 d8 9b 13 f0       	push   $0xf0139bd8
f01136c0:	68 2b 03 00 00       	push   $0x32b
f01136c5:	68 fe 8e 13 f0       	push   $0xf0138efe
f01136ca:	e8 44 cd fe ff       	call   f0100413 <_warn>
f01136cf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01136d9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01136e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136e4:	74 04                	je     f01136ea <test_copy_paste_chunk+0xe68>
f01136e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136ea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01136f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01136f5:	0f 84 9e 00 00 00    	je     f0113799 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f01136fb:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113702:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113709:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113710:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113717:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011371e:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113725:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113728:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f011372b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011372e:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113731:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113734:	8a 00                	mov    (%eax),%al
f0113736:	3c 61                	cmp    $0x61,%al
f0113738:	75 2d                	jne    f0113767 <test_copy_paste_chunk+0xee5>
f011373a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011373d:	8a 00                	mov    (%eax),%al
f011373f:	3c 61                	cmp    $0x61,%al
f0113741:	75 24                	jne    f0113767 <test_copy_paste_chunk+0xee5>
f0113743:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113746:	8a 00                	mov    (%eax),%al
f0113748:	3c 79                	cmp    $0x79,%al
f011374a:	75 1b                	jne    f0113767 <test_copy_paste_chunk+0xee5>
f011374c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011374f:	8a 00                	mov    (%eax),%al
f0113751:	3c 62                	cmp    $0x62,%al
f0113753:	75 12                	jne    f0113767 <test_copy_paste_chunk+0xee5>
f0113755:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113758:	8a 00                	mov    (%eax),%al
f011375a:	3c 63                	cmp    $0x63,%al
f011375c:	75 09                	jne    f0113767 <test_copy_paste_chunk+0xee5>
f011375e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113761:	8a 00                	mov    (%eax),%al
f0113763:	3c 7a                	cmp    $0x7a,%al
f0113765:	74 21                	je     f0113788 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113767:	83 ec 04             	sub    $0x4,%esp
f011376a:	68 8c 9a 13 f0       	push   $0xf0139a8c
f011376f:	68 3d 03 00 00       	push   $0x33d
f0113774:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113779:	e8 95 cc fe ff       	call   f0100413 <_warn>
f011377e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113781:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113788:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011378c:	74 04                	je     f0113792 <test_copy_paste_chunk+0xf10>
f011378e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113792:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113799:	e8 09 97 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011379e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01137a1:	6a 00                	push   $0x0
f01137a3:	6a 02                	push   $0x2
f01137a5:	68 00 10 90 00       	push   $0x901000
f01137aa:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137ad:	e8 59 2b 00 00       	call   f011630b <SB>
f01137b2:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01137b5:	6a 00                	push   $0x0
f01137b7:	6a 02                	push   $0x2
f01137b9:	68 00 20 90 00       	push   $0x902000
f01137be:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137c1:	e8 45 2b 00 00       	call   f011630b <SB>
f01137c6:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01137c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137cc:	c1 e0 03             	shl    $0x3,%eax
f01137cf:	50                   	push   %eax
f01137d0:	68 00 f0 bf 00       	push   $0xbff000
f01137d5:	68 00 10 90 00       	push   $0x901000
f01137da:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137dd:	e8 f6 53 ff ff       	call   f0108bd8 <copy_paste_chunk>
f01137e2:	83 c4 10             	add    $0x10,%esp
f01137e5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137eb:	e8 b7 96 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01137f0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01137f3:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01137fa:	75 0b                	jne    f0113807 <test_copy_paste_chunk+0xf85>
f01137fc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137ff:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113802:	83 f8 03             	cmp    $0x3,%eax
f0113805:	74 2e                	je     f0113835 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113807:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011380a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011380d:	83 ec 0c             	sub    $0xc,%esp
f0113810:	50                   	push   %eax
f0113811:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113817:	68 38 9b 13 f0       	push   $0xf0139b38
f011381c:	68 4d 03 00 00       	push   $0x34d
f0113821:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113826:	e8 e8 cb fe ff       	call   f0100413 <_warn>
f011382b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011382e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113835:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113839:	74 04                	je     f011383f <test_copy_paste_chunk+0xfbd>
f011383b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011383f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113846:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f011384d:	83 ec 08             	sub    $0x8,%esp
f0113850:	6a 01                	push   $0x1
f0113852:	6a 07                	push   $0x7
f0113854:	6a 03                	push   $0x3
f0113856:	6a 07                	push   $0x7
f0113858:	6a 03                	push   $0x3
f011385a:	6a 01                	push   $0x1
f011385c:	68 00 20 00 00       	push   $0x2000
f0113861:	68 00 f0 bf 00       	push   $0xbff000
f0113866:	68 00 10 90 00       	push   $0x901000
f011386b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011386e:	e8 0b 2c 00 00       	call   f011647e <CCP>
f0113873:	83 c4 30             	add    $0x30,%esp
f0113876:	83 f8 01             	cmp    $0x1,%eax
f0113879:	74 28                	je     f01138a3 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011387b:	83 ec 04             	sub    $0x4,%esp
f011387e:	68 d8 9b 13 f0       	push   $0xf0139bd8
f0113883:	68 56 03 00 00       	push   $0x356
f0113888:	68 fe 8e 13 f0       	push   $0xf0138efe
f011388d:	e8 81 cb fe ff       	call   f0100413 <_warn>
f0113892:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113895:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011389c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01138a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138a7:	74 04                	je     f01138ad <test_copy_paste_chunk+0x102b>
f01138a9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138ad:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01138b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01138b8:	74 72                	je     f011392c <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01138ba:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01138c1:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01138c8:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01138cf:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01138d6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138d9:	8a 00                	mov    (%eax),%al
f01138db:	3c 62                	cmp    $0x62,%al
f01138dd:	75 1b                	jne    f01138fa <test_copy_paste_chunk+0x1078>
f01138df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138e2:	8a 00                	mov    (%eax),%al
f01138e4:	3c 62                	cmp    $0x62,%al
f01138e6:	75 12                	jne    f01138fa <test_copy_paste_chunk+0x1078>
f01138e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138eb:	8a 00                	mov    (%eax),%al
f01138ed:	3c 7a                	cmp    $0x7a,%al
f01138ef:	75 09                	jne    f01138fa <test_copy_paste_chunk+0x1078>
f01138f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138f4:	8a 00                	mov    (%eax),%al
f01138f6:	3c 7a                	cmp    $0x7a,%al
f01138f8:	74 21                	je     f011391b <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01138fa:	83 ec 04             	sub    $0x4,%esp
f01138fd:	68 8c 9a 13 f0       	push   $0xf0139a8c
f0113902:	68 62 03 00 00       	push   $0x362
f0113907:	68 fe 8e 13 f0       	push   $0xf0138efe
f011390c:	e8 02 cb fe ff       	call   f0100413 <_warn>
f0113911:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113914:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011391b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011391f:	74 04                	je     f0113925 <test_copy_paste_chunk+0x10a3>
f0113921:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113925:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011392c:	83 ec 0c             	sub    $0xc,%esp
f011392f:	68 86 9c 13 f0       	push   $0xf0139c86
f0113934:	e8 d5 d3 fe ff       	call   f0100d0e <cprintf>
f0113939:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f011393c:	83 ec 08             	sub    $0x8,%esp
f011393f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113942:	68 98 9c 13 f0       	push   $0xf0139c98
f0113947:	e8 c2 d3 fe ff       	call   f0100d0e <cprintf>
f011394c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011394f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113953:	75 10                	jne    f0113965 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113955:	83 ec 0c             	sub    $0xc,%esp
f0113958:	68 cc 9c 13 f0       	push   $0xf0139ccc
f011395d:	e8 ac d3 fe ff       	call   f0100d0e <cprintf>
f0113962:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113965:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f011396a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011396d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113970:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113973:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113978:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011397b:	5b                   	pop    %ebx
f011397c:	5e                   	pop    %esi
f011397d:	5f                   	pop    %edi
f011397e:	5d                   	pop    %ebp
f011397f:	c3                   	ret    

f0113980 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113980:	55                   	push   %ebp
f0113981:	89 e5                	mov    %esp,%ebp
f0113983:	57                   	push   %edi
f0113984:	56                   	push   %esi
f0113985:	53                   	push   %ebx
f0113986:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011398c:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113992:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f0113997:	ba 0f 00 00 00       	mov    $0xf,%edx
f011399c:	89 c7                	mov    %eax,%edi
f011399e:	89 de                	mov    %ebx,%esi
f01139a0:	89 d1                	mov    %edx,%ecx
f01139a2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139a4:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01139aa:	b9 23 00 00 00       	mov    $0x23,%ecx
f01139af:	b0 00                	mov    $0x0,%al
f01139b1:	89 d7                	mov    %edx,%edi
f01139b3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01139b5:	6a 00                	push   $0x0
f01139b7:	6a 0a                	push   $0xa
f01139b9:	6a 14                	push   $0x14
f01139bb:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01139c1:	50                   	push   %eax
f01139c2:	e8 a6 57 ff ff       	call   f010916d <env_create>
f01139c7:	83 c4 10             	add    $0x10,%esp
f01139ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01139cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01139d0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01139d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01139d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01139d9:	8b 40 60             	mov    0x60(%eax),%eax
f01139dc:	89 45 80             	mov    %eax,-0x80(%ebp)
f01139df:	8b 45 80             	mov    -0x80(%ebp),%eax
f01139e2:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01139e5:	83 ec 0c             	sub    $0xc,%esp
f01139e8:	ff 75 cc             	pushl  -0x34(%ebp)
f01139eb:	e8 5a 2a 00 00       	call   f011644a <ClearUserSpace>
f01139f0:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01139f3:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01139fa:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113a01:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113a08:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113a0c:	83 ec 0c             	sub    $0xc,%esp
f0113a0f:	68 44 a5 13 f0       	push   $0xf013a544
f0113a14:	e8 f5 d2 fe ff       	call   f0100d0e <cprintf>
f0113a19:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113a1c:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113a23:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113a2a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a2d:	8a 00                	mov    (%eax),%al
f0113a2f:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113a35:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a38:	8a 00                	mov    (%eax),%al
f0113a3a:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a40:	e8 62 94 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113a45:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113a48:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a4b:	89 d0                	mov    %edx,%eax
f0113a4d:	01 c0                	add    %eax,%eax
f0113a4f:	01 d0                	add    %edx,%eax
f0113a51:	01 c0                	add    %eax,%eax
f0113a53:	83 ec 0c             	sub    $0xc,%esp
f0113a56:	6a 02                	push   $0x2
f0113a58:	50                   	push   %eax
f0113a59:	68 00 40 10 f0       	push   $0xf0104000
f0113a5e:	68 00 00 10 f0       	push   $0xf0100000
f0113a63:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a66:	e8 b1 52 ff ff       	call   f0108d1c <share_chunk>
f0113a6b:	83 c4 20             	add    $0x20,%esp
f0113a6e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a71:	e8 31 94 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113a76:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113a79:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113a7d:	75 08                	jne    f0113a87 <test_share_chunk+0x107>
f0113a7f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a82:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113a85:	74 28                	je     f0113aaf <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113a87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a8a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a8d:	83 ec 0c             	sub    $0xc,%esp
f0113a90:	50                   	push   %eax
f0113a91:	ff 75 b0             	pushl  -0x50(%ebp)
f0113a94:	68 70 a5 13 f0       	push   $0xf013a570
f0113a99:	68 9e 03 00 00       	push   $0x39e
f0113a9e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113aa3:	e8 6b c9 fe ff       	call   f0100413 <_warn>
f0113aa8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113aab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113aaf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ab3:	74 04                	je     f0113ab9 <test_share_chunk+0x139>
f0113ab5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ab9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113abd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ac0:	c1 e0 03             	shl    $0x3,%eax
f0113ac3:	83 ec 08             	sub    $0x8,%esp
f0113ac6:	68 fd 00 00 00       	push   $0xfd
f0113acb:	6a 07                	push   $0x7
f0113acd:	6a 03                	push   $0x3
f0113acf:	6a 07                	push   $0x7
f0113ad1:	6a 03                	push   $0x3
f0113ad3:	6a 01                	push   $0x1
f0113ad5:	50                   	push   %eax
f0113ad6:	68 00 40 10 f0       	push   $0xf0104000
f0113adb:	68 00 00 10 f0       	push   $0xf0100000
f0113ae0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ae3:	e8 96 29 00 00       	call   f011647e <CCP>
f0113ae8:	83 c4 30             	add    $0x30,%esp
f0113aeb:	85 c0                	test   %eax,%eax
f0113aed:	75 1e                	jne    f0113b0d <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113aef:	83 ec 04             	sub    $0x4,%esp
f0113af2:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113af7:	68 a6 03 00 00       	push   $0x3a6
f0113afc:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113b01:	e8 0d c9 fe ff       	call   f0100413 <_warn>
f0113b06:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b11:	74 04                	je     f0113b17 <test_share_chunk+0x197>
f0113b13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113b17:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b1a:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113b1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b20:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113b23:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b26:	8a 00                	mov    (%eax),%al
f0113b28:	3c 41                	cmp    $0x41,%al
f0113b2a:	75 09                	jne    f0113b35 <test_share_chunk+0x1b5>
f0113b2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b2f:	8a 00                	mov    (%eax),%al
f0113b31:	3c 42                	cmp    $0x42,%al
f0113b33:	74 1e                	je     f0113b53 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113b35:	83 ec 04             	sub    $0x4,%esp
f0113b38:	68 14 a6 13 f0       	push   $0xf013a614
f0113b3d:	68 b0 03 00 00       	push   $0x3b0
f0113b42:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113b47:	e8 c7 c8 fe ff       	call   f0100413 <_warn>
f0113b4c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b4f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b53:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b57:	74 04                	je     f0113b5d <test_share_chunk+0x1dd>
f0113b59:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b5d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113b61:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113b67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b6a:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113b6c:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113b72:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b75:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113b77:	83 ec 0c             	sub    $0xc,%esp
f0113b7a:	68 49 a6 13 f0       	push   $0xf013a649
f0113b7f:	e8 8a d1 fe ff       	call   f0100d0e <cprintf>
f0113b84:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113b87:	83 ec 0c             	sub    $0xc,%esp
f0113b8a:	68 58 a6 13 f0       	push   $0xf013a658
f0113b8f:	e8 7a d1 fe ff       	call   f0100d0e <cprintf>
f0113b94:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b97:	e8 0b 93 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113b9c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113b9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ba2:	c1 e0 05             	shl    $0x5,%eax
f0113ba5:	83 ec 0c             	sub    $0xc,%esp
f0113ba8:	68 02 0e 00 00       	push   $0xe02
f0113bad:	50                   	push   %eax
f0113bae:	68 00 00 00 40       	push   $0x40000000
f0113bb3:	68 00 00 00 f0       	push   $0xf0000000
f0113bb8:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bbb:	e8 5c 51 ff ff       	call   f0108d1c <share_chunk>
f0113bc0:	83 c4 20             	add    $0x20,%esp
f0113bc3:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113bc6:	e8 dc 92 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113bcb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113bce:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113bd2:	75 1f                	jne    f0113bf3 <test_share_chunk+0x273>
f0113bd4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bd7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113bda:	89 c1                	mov    %eax,%ecx
f0113bdc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113bdf:	c1 e0 05             	shl    $0x5,%eax
f0113be2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113be5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113bec:	99                   	cltd   
f0113bed:	f7 fb                	idiv   %ebx
f0113bef:	39 c1                	cmp    %eax,%ecx
f0113bf1:	74 28                	je     f0113c1b <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113bf3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bf6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113bf9:	83 ec 0c             	sub    $0xc,%esp
f0113bfc:	50                   	push   %eax
f0113bfd:	ff 75 a8             	pushl  -0x58(%ebp)
f0113c00:	68 94 a6 13 f0       	push   $0xf013a694
f0113c05:	68 c8 03 00 00       	push   $0x3c8
f0113c0a:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113c0f:	e8 ff c7 fe ff       	call   f0100413 <_warn>
f0113c14:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c17:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c1b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c1f:	74 04                	je     f0113c25 <test_share_chunk+0x2a5>
f0113c21:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c25:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113c29:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113c30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c33:	c1 e0 05             	shl    $0x5,%eax
f0113c36:	83 ec 08             	sub    $0x8,%esp
f0113c39:	6a 02                	push   $0x2
f0113c3b:	6a 07                	push   $0x7
f0113c3d:	6a 03                	push   $0x3
f0113c3f:	68 07 0e 00 00       	push   $0xe07
f0113c44:	68 03 0e 00 00       	push   $0xe03
f0113c49:	6a ff                	push   $0xffffffff
f0113c4b:	50                   	push   %eax
f0113c4c:	68 00 00 00 40       	push   $0x40000000
f0113c51:	68 00 00 00 f0       	push   $0xf0000000
f0113c56:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c59:	e8 20 28 00 00       	call   f011647e <CCP>
f0113c5e:	83 c4 30             	add    $0x30,%esp
f0113c61:	85 c0                	test   %eax,%eax
f0113c63:	75 25                	jne    f0113c8a <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c65:	83 ec 04             	sub    $0x4,%esp
f0113c68:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113c6d:	68 d1 03 00 00       	push   $0x3d1
f0113c72:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113c77:	e8 97 c7 fe ff       	call   f0100413 <_warn>
f0113c7c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113c83:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113c8a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c8d:	89 d0                	mov    %edx,%eax
f0113c8f:	01 c0                	add    %eax,%eax
f0113c91:	01 d0                	add    %edx,%eax
f0113c93:	c1 e0 02             	shl    $0x2,%eax
f0113c96:	83 ec 08             	sub    $0x8,%esp
f0113c99:	6a 02                	push   $0x2
f0113c9b:	6a 07                	push   $0x7
f0113c9d:	6a 03                	push   $0x3
f0113c9f:	68 07 0e 00 00       	push   $0xe07
f0113ca4:	68 03 0e 00 00       	push   $0xe03
f0113ca9:	6a 02                	push   $0x2
f0113cab:	50                   	push   %eax
f0113cac:	68 00 00 00 40       	push   $0x40000000
f0113cb1:	68 00 00 00 f0       	push   $0xf0000000
f0113cb6:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cb9:	e8 c0 27 00 00       	call   f011647e <CCP>
f0113cbe:	83 c4 30             	add    $0x30,%esp
f0113cc1:	85 c0                	test   %eax,%eax
f0113cc3:	75 1e                	jne    f0113ce3 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113cc5:	83 ec 04             	sub    $0x4,%esp
f0113cc8:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113ccd:	68 d8 03 00 00       	push   $0x3d8
f0113cd2:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113cd7:	e8 37 c7 fe ff       	call   f0100413 <_warn>
f0113cdc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113cdf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ce3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ce7:	74 04                	je     f0113ced <test_share_chunk+0x36d>
f0113ce9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ced:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113cf1:	b8 bc ee 88 f0       	mov    $0xf088eebc,%eax
f0113cf6:	05 00 00 00 10       	add    $0x10000000,%eax
f0113cfb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113cfe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113d01:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113d06:	83 ec 08             	sub    $0x8,%esp
f0113d09:	6a 02                	push   $0x2
f0113d0b:	6a 07                	push   $0x7
f0113d0d:	6a 03                	push   $0x3
f0113d0f:	68 07 0e 00 00       	push   $0xe07
f0113d14:	68 03 0e 00 00       	push   $0xe03
f0113d19:	6a 02                	push   $0x2
f0113d1b:	50                   	push   %eax
f0113d1c:	68 00 00 0a 40       	push   $0x400a0000
f0113d21:	68 00 00 0a f0       	push   $0xf00a0000
f0113d26:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d29:	e8 50 27 00 00       	call   f011647e <CCP>
f0113d2e:	83 c4 30             	add    $0x30,%esp
f0113d31:	85 c0                	test   %eax,%eax
f0113d33:	75 1e                	jne    f0113d53 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d35:	83 ec 04             	sub    $0x4,%esp
f0113d38:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113d3d:	68 e2 03 00 00       	push   $0x3e2
f0113d42:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113d47:	e8 c7 c6 fe ff       	call   f0100413 <_warn>
f0113d4c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d4f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d53:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d57:	74 04                	je     f0113d5d <test_share_chunk+0x3dd>
f0113d59:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d5d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113d61:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d65:	0f 84 a4 00 00 00    	je     f0113e0f <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113d6b:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113d72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d75:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113d78:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113d7f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d82:	8a 00                	mov    (%eax),%al
f0113d84:	3c 41                	cmp    $0x41,%al
f0113d86:	75 09                	jne    f0113d91 <test_share_chunk+0x411>
f0113d88:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d8b:	8a 00                	mov    (%eax),%al
f0113d8d:	3c 41                	cmp    $0x41,%al
f0113d8f:	74 1e                	je     f0113daf <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113d91:	83 ec 04             	sub    $0x4,%esp
f0113d94:	68 14 a6 13 f0       	push   $0xf013a614
f0113d99:	68 ef 03 00 00       	push   $0x3ef
f0113d9e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113da3:	e8 6b c6 fe ff       	call   f0100413 <_warn>
f0113da8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113dab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113daf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113db3:	74 04                	je     f0113db9 <test_share_chunk+0x439>
f0113db5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113db9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113dbd:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113dc4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dc7:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113dca:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113dd1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dd4:	8a 00                	mov    (%eax),%al
f0113dd6:	3c 43                	cmp    $0x43,%al
f0113dd8:	75 09                	jne    f0113de3 <test_share_chunk+0x463>
f0113dda:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ddd:	8a 00                	mov    (%eax),%al
f0113ddf:	3c 43                	cmp    $0x43,%al
f0113de1:	74 1e                	je     f0113e01 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113de3:	83 ec 04             	sub    $0x4,%esp
f0113de6:	68 14 a6 13 f0       	push   $0xf013a614
f0113deb:	68 fa 03 00 00       	push   $0x3fa
f0113df0:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113df5:	e8 19 c6 fe ff       	call   f0100413 <_warn>
f0113dfa:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113dfd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e01:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e05:	74 04                	je     f0113e0b <test_share_chunk+0x48b>
f0113e07:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e0b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113e0f:	83 ec 0c             	sub    $0xc,%esp
f0113e12:	68 23 9c 13 f0       	push   $0xf0139c23
f0113e17:	e8 f2 ce fe ff       	call   f0100d0e <cprintf>
f0113e1c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113e1f:	83 ec 0c             	sub    $0xc,%esp
f0113e22:	68 e4 a6 13 f0       	push   $0xf013a6e4
f0113e27:	e8 e2 ce fe ff       	call   f0100d0e <cprintf>
f0113e2c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e2f:	e8 73 90 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113e34:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113e37:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e3a:	89 d0                	mov    %edx,%eax
f0113e3c:	c1 e0 03             	shl    $0x3,%eax
f0113e3f:	01 d0                	add    %edx,%eax
f0113e41:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113e48:	01 d0                	add    %edx,%eax
f0113e4a:	c1 e0 03             	shl    $0x3,%eax
f0113e4d:	83 ec 0c             	sub    $0xc,%esp
f0113e50:	6a 06                	push   $0x6
f0113e52:	50                   	push   %eax
f0113e53:	6a 00                	push   $0x0
f0113e55:	68 00 00 00 40       	push   $0x40000000
f0113e5a:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e5d:	e8 ba 4e ff ff       	call   f0108d1c <share_chunk>
f0113e62:	83 c4 20             	add    $0x20,%esp
f0113e65:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e68:	e8 3a 90 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0113e6d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113e70:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113e74:	75 0b                	jne    f0113e81 <test_share_chunk+0x501>
f0113e76:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e79:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e7c:	83 f8 01             	cmp    $0x1,%eax
f0113e7f:	74 28                	je     f0113ea9 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113e81:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e84:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e87:	83 ec 0c             	sub    $0xc,%esp
f0113e8a:	50                   	push   %eax
f0113e8b:	ff 75 a0             	pushl  -0x60(%ebp)
f0113e8e:	68 94 a6 13 f0       	push   $0xf013a694
f0113e93:	68 10 04 00 00       	push   $0x410
f0113e98:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113e9d:	e8 71 c5 fe ff       	call   f0100413 <_warn>
f0113ea2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ea5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ea9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ead:	74 04                	je     f0113eb3 <test_share_chunk+0x533>
f0113eaf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113eb3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113eb7:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113ebe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ec1:	05 00 80 02 00       	add    $0x28000,%eax
f0113ec6:	c1 e0 02             	shl    $0x2,%eax
f0113ec9:	83 ec 08             	sub    $0x8,%esp
f0113ecc:	6a 02                	push   $0x2
f0113ece:	6a 07                	push   $0x7
f0113ed0:	6a 03                	push   $0x3
f0113ed2:	6a 07                	push   $0x7
f0113ed4:	6a 07                	push   $0x7
f0113ed6:	6a ff                	push   $0xffffffff
f0113ed8:	50                   	push   %eax
f0113ed9:	6a 00                	push   $0x0
f0113edb:	68 00 00 00 40       	push   $0x40000000
f0113ee0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ee3:	e8 96 25 00 00       	call   f011647e <CCP>
f0113ee8:	83 c4 30             	add    $0x30,%esp
f0113eeb:	85 c0                	test   %eax,%eax
f0113eed:	75 25                	jne    f0113f14 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113eef:	83 ec 04             	sub    $0x4,%esp
f0113ef2:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113ef7:	68 19 04 00 00       	push   $0x419
f0113efc:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113f01:	e8 0d c5 fe ff       	call   f0100413 <_warn>
f0113f06:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f0d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f14:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f17:	89 d0                	mov    %edx,%eax
f0113f19:	01 c0                	add    %eax,%eax
f0113f1b:	01 d0                	add    %edx,%eax
f0113f1d:	c1 e0 02             	shl    $0x2,%eax
f0113f20:	83 ec 08             	sub    $0x8,%esp
f0113f23:	6a 02                	push   $0x2
f0113f25:	6a 07                	push   $0x7
f0113f27:	6a 03                	push   $0x3
f0113f29:	6a 07                	push   $0x7
f0113f2b:	6a 07                	push   $0x7
f0113f2d:	6a 03                	push   $0x3
f0113f2f:	50                   	push   %eax
f0113f30:	6a 00                	push   $0x0
f0113f32:	68 00 00 00 40       	push   $0x40000000
f0113f37:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f3a:	e8 3f 25 00 00       	call   f011647e <CCP>
f0113f3f:	83 c4 30             	add    $0x30,%esp
f0113f42:	85 c0                	test   %eax,%eax
f0113f44:	75 1e                	jne    f0113f64 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f46:	83 ec 04             	sub    $0x4,%esp
f0113f49:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113f4e:	68 20 04 00 00       	push   $0x420
f0113f53:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113f58:	e8 b6 c4 fe ff       	call   f0100413 <_warn>
f0113f5d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f60:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f64:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f68:	74 04                	je     f0113f6e <test_share_chunk+0x5ee>
f0113f6a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f6e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f72:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f75:	89 d0                	mov    %edx,%eax
f0113f77:	01 c0                	add    %eax,%eax
f0113f79:	01 d0                	add    %edx,%eax
f0113f7b:	c1 e0 02             	shl    $0x2,%eax
f0113f7e:	f7 d8                	neg    %eax
f0113f80:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113f85:	83 ec 08             	sub    $0x8,%esp
f0113f88:	6a 02                	push   $0x2
f0113f8a:	6a 07                	push   $0x7
f0113f8c:	6a 03                	push   $0x3
f0113f8e:	6a 07                	push   $0x7
f0113f90:	6a 07                	push   $0x7
f0113f92:	6a 02                	push   $0x2
f0113f94:	50                   	push   %eax
f0113f95:	68 00 30 00 00       	push   $0x3000
f0113f9a:	68 00 30 00 40       	push   $0x40003000
f0113f9f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fa2:	e8 d7 24 00 00       	call   f011647e <CCP>
f0113fa7:	83 c4 30             	add    $0x30,%esp
f0113faa:	85 c0                	test   %eax,%eax
f0113fac:	75 1e                	jne    f0113fcc <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fae:	83 ec 04             	sub    $0x4,%esp
f0113fb1:	68 cc a5 13 f0       	push   $0xf013a5cc
f0113fb6:	68 28 04 00 00       	push   $0x428
f0113fbb:	68 fe 8e 13 f0       	push   $0xf0138efe
f0113fc0:	e8 4e c4 fe ff       	call   f0100413 <_warn>
f0113fc5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fc8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fcc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fd0:	74 04                	je     f0113fd6 <test_share_chunk+0x656>
f0113fd2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fd6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113fda:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fdd:	c1 e0 02             	shl    $0x2,%eax
f0113fe0:	83 ec 08             	sub    $0x8,%esp
f0113fe3:	6a 02                	push   $0x2
f0113fe5:	6a 07                	push   $0x7
f0113fe7:	6a 03                	push   $0x3
f0113fe9:	6a 07                	push   $0x7
f0113feb:	6a 07                	push   $0x7
f0113fed:	6a 03                	push   $0x3
f0113fef:	50                   	push   %eax
f0113ff0:	68 00 00 0a 00       	push   $0xa0000
f0113ff5:	68 00 00 0a 40       	push   $0x400a0000
f0113ffa:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ffd:	e8 7c 24 00 00       	call   f011647e <CCP>
f0114002:	83 c4 30             	add    $0x30,%esp
f0114005:	85 c0                	test   %eax,%eax
f0114007:	75 1e                	jne    f0114027 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114009:	83 ec 04             	sub    $0x4,%esp
f011400c:	68 cc a5 13 f0       	push   $0xf013a5cc
f0114011:	68 30 04 00 00       	push   $0x430
f0114016:	68 fe 8e 13 f0       	push   $0xf0138efe
f011401b:	e8 f3 c3 fe ff       	call   f0100413 <_warn>
f0114020:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114023:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114027:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011402b:	74 04                	je     f0114031 <test_share_chunk+0x6b1>
f011402d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114031:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114035:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114039:	0f 84 92 00 00 00    	je     f01140d1 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011403f:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114046:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011404d:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114054:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011405b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011405e:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114061:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114068:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011406f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114072:	8a 00                	mov    (%eax),%al
f0114074:	3c 41                	cmp    $0x41,%al
f0114076:	75 2d                	jne    f01140a5 <test_share_chunk+0x725>
f0114078:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011407b:	8a 00                	mov    (%eax),%al
f011407d:	3c 41                	cmp    $0x41,%al
f011407f:	75 24                	jne    f01140a5 <test_share_chunk+0x725>
f0114081:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114084:	8a 00                	mov    (%eax),%al
f0114086:	3c 41                	cmp    $0x41,%al
f0114088:	75 1b                	jne    f01140a5 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011408a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011408d:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011408f:	3c 44                	cmp    $0x44,%al
f0114091:	75 12                	jne    f01140a5 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114093:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114096:	8a 00                	mov    (%eax),%al
f0114098:	3c 44                	cmp    $0x44,%al
f011409a:	75 09                	jne    f01140a5 <test_share_chunk+0x725>
f011409c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011409f:	8a 00                	mov    (%eax),%al
f01140a1:	3c 44                	cmp    $0x44,%al
f01140a3:	74 1e                	je     f01140c3 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01140a5:	83 ec 04             	sub    $0x4,%esp
f01140a8:	68 14 a6 13 f0       	push   $0xf013a614
f01140ad:	68 42 04 00 00       	push   $0x442
f01140b2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01140b7:	e8 57 c3 fe ff       	call   f0100413 <_warn>
f01140bc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01140bf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01140c3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140c7:	74 04                	je     f01140cd <test_share_chunk+0x74d>
f01140c9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01140cd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01140d1:	83 ec 0c             	sub    $0xc,%esp
f01140d4:	68 86 9c 13 f0       	push   $0xf0139c86
f01140d9:	e8 30 cc fe ff       	call   f0100d0e <cprintf>
f01140de:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01140e1:	83 ec 0c             	sub    $0xc,%esp
f01140e4:	68 20 a7 13 f0       	push   $0xf013a720
f01140e9:	e8 20 cc fe ff       	call   f0100d0e <cprintf>
f01140ee:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140f1:	e8 b1 8d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01140f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01140f9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140fc:	89 d0                	mov    %edx,%eax
f01140fe:	01 c0                	add    %eax,%eax
f0114100:	01 d0                	add    %edx,%eax
f0114102:	01 c0                	add    %eax,%eax
f0114104:	01 d0                	add    %edx,%eax
f0114106:	83 ec 0c             	sub    $0xc,%esp
f0114109:	6a 04                	push   $0x4
f011410b:	50                   	push   %eax
f011410c:	68 00 fc 3f 00       	push   $0x3ffc00
f0114111:	68 00 fc 09 00       	push   $0x9fc00
f0114116:	ff 75 cc             	pushl  -0x34(%ebp)
f0114119:	e8 fe 4b ff ff       	call   f0108d1c <share_chunk>
f011411e:	83 c4 20             	add    $0x20,%esp
f0114121:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114124:	e8 7e 8d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114129:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011412c:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114130:	75 0b                	jne    f011413d <test_share_chunk+0x7bd>
f0114132:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114135:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114138:	83 f8 01             	cmp    $0x1,%eax
f011413b:	74 28                	je     f0114165 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011413d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114140:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114143:	83 ec 0c             	sub    $0xc,%esp
f0114146:	50                   	push   %eax
f0114147:	ff 75 8c             	pushl  -0x74(%ebp)
f011414a:	68 94 a6 13 f0       	push   $0xf013a694
f011414f:	68 58 04 00 00       	push   $0x458
f0114154:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114159:	e8 b5 c2 fe ff       	call   f0100413 <_warn>
f011415e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114161:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114165:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114169:	74 04                	je     f011416f <test_share_chunk+0x7ef>
f011416b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011416f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114173:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011417a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011417d:	89 d0                	mov    %edx,%eax
f011417f:	01 c0                	add    %eax,%eax
f0114181:	01 d0                	add    %edx,%eax
f0114183:	c1 e0 02             	shl    $0x2,%eax
f0114186:	83 ec 08             	sub    $0x8,%esp
f0114189:	6a 02                	push   $0x2
f011418b:	6a 07                	push   $0x7
f011418d:	6a 07                	push   $0x7
f011418f:	6a 07                	push   $0x7
f0114191:	6a 05                	push   $0x5
f0114193:	6a ff                	push   $0xffffffff
f0114195:	50                   	push   %eax
f0114196:	68 00 f0 3f 00       	push   $0x3ff000
f011419b:	68 00 f0 09 00       	push   $0x9f000
f01141a0:	ff 75 cc             	pushl  -0x34(%ebp)
f01141a3:	e8 d6 22 00 00       	call   f011647e <CCP>
f01141a8:	83 c4 30             	add    $0x30,%esp
f01141ab:	85 c0                	test   %eax,%eax
f01141ad:	75 25                	jne    f01141d4 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141af:	83 ec 04             	sub    $0x4,%esp
f01141b2:	68 cc a5 13 f0       	push   $0xf013a5cc
f01141b7:	68 61 04 00 00       	push   $0x461
f01141bc:	68 fe 8e 13 f0       	push   $0xf0138efe
f01141c1:	e8 4d c2 fe ff       	call   f0100413 <_warn>
f01141c6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01141cd:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01141d4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d8:	74 04                	je     f01141de <test_share_chunk+0x85e>
f01141da:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141de:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01141e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141e5:	c1 e0 02             	shl    $0x2,%eax
f01141e8:	83 ec 08             	sub    $0x8,%esp
f01141eb:	6a 02                	push   $0x2
f01141ed:	6a 07                	push   $0x7
f01141ef:	6a 07                	push   $0x7
f01141f1:	6a 07                	push   $0x7
f01141f3:	6a 05                	push   $0x5
f01141f5:	6a 03                	push   $0x3
f01141f7:	50                   	push   %eax
f01141f8:	68 00 f0 3f 00       	push   $0x3ff000
f01141fd:	68 00 f0 09 00       	push   $0x9f000
f0114202:	ff 75 cc             	pushl  -0x34(%ebp)
f0114205:	e8 74 22 00 00       	call   f011647e <CCP>
f011420a:	83 c4 30             	add    $0x30,%esp
f011420d:	85 c0                	test   %eax,%eax
f011420f:	75 1e                	jne    f011422f <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114211:	83 ec 04             	sub    $0x4,%esp
f0114214:	68 cc a5 13 f0       	push   $0xf013a5cc
f0114219:	68 6a 04 00 00       	push   $0x46a
f011421e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114223:	e8 eb c1 fe ff       	call   f0100413 <_warn>
f0114228:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011422b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011422f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114233:	74 04                	je     f0114239 <test_share_chunk+0x8b9>
f0114235:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114239:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011423d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114240:	c1 e0 03             	shl    $0x3,%eax
f0114243:	83 ec 08             	sub    $0x8,%esp
f0114246:	6a 02                	push   $0x2
f0114248:	6a 07                	push   $0x7
f011424a:	6a 07                	push   $0x7
f011424c:	6a 07                	push   $0x7
f011424e:	6a 05                	push   $0x5
f0114250:	6a 04                	push   $0x4
f0114252:	50                   	push   %eax
f0114253:	68 00 00 40 00       	push   $0x400000
f0114258:	68 00 00 0a 00       	push   $0xa0000
f011425d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114260:	e8 19 22 00 00       	call   f011647e <CCP>
f0114265:	83 c4 30             	add    $0x30,%esp
f0114268:	85 c0                	test   %eax,%eax
f011426a:	75 1e                	jne    f011428a <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011426c:	83 ec 04             	sub    $0x4,%esp
f011426f:	68 cc a5 13 f0       	push   $0xf013a5cc
f0114274:	68 72 04 00 00       	push   $0x472
f0114279:	68 fe 8e 13 f0       	push   $0xf0138efe
f011427e:	e8 90 c1 fe ff       	call   f0100413 <_warn>
f0114283:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114286:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011428a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011428e:	74 04                	je     f0114294 <test_share_chunk+0x914>
f0114290:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114294:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114298:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011429c:	0f 84 b2 00 00 00    	je     f0114354 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01142a2:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01142a9:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01142b0:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01142b7:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01142be:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01142c5:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01142cc:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01142d3:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01142da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142dd:	8a 00                	mov    (%eax),%al
f01142df:	3c 44                	cmp    $0x44,%al
f01142e1:	75 45                	jne    f0114328 <test_share_chunk+0x9a8>
f01142e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142e6:	8a 00                	mov    (%eax),%al
f01142e8:	3c 44                	cmp    $0x44,%al
f01142ea:	75 3c                	jne    f0114328 <test_share_chunk+0x9a8>
f01142ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01142ef:	8a 00                	mov    (%eax),%al
f01142f1:	3c 44                	cmp    $0x44,%al
f01142f3:	75 33                	jne    f0114328 <test_share_chunk+0x9a8>
f01142f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01142f8:	8a 00                	mov    (%eax),%al
f01142fa:	3c 44                	cmp    $0x44,%al
f01142fc:	75 2a                	jne    f0114328 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01142fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114301:	8a 10                	mov    (%eax),%dl
f0114303:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114306:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114308:	38 c2                	cmp    %al,%dl
f011430a:	75 1c                	jne    f0114328 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011430c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011430f:	8a 10                	mov    (%eax),%dl
f0114311:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114314:	8a 00                	mov    (%eax),%al
f0114316:	38 c2                	cmp    %al,%dl
f0114318:	75 0e                	jne    f0114328 <test_share_chunk+0x9a8>
f011431a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011431d:	8a 10                	mov    (%eax),%dl
f011431f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114322:	8a 00                	mov    (%eax),%al
f0114324:	38 c2                	cmp    %al,%dl
f0114326:	74 1e                	je     f0114346 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114328:	83 ec 04             	sub    $0x4,%esp
f011432b:	68 14 a6 13 f0       	push   $0xf013a614
f0114330:	68 87 04 00 00       	push   $0x487
f0114335:	68 fe 8e 13 f0       	push   $0xf0138efe
f011433a:	e8 d4 c0 fe ff       	call   f0100413 <_warn>
f011433f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114342:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114346:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011434a:	74 04                	je     f0114350 <test_share_chunk+0x9d0>
f011434c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114350:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114354:	83 ec 0c             	sub    $0xc,%esp
f0114357:	68 58 a7 13 f0       	push   $0xf013a758
f011435c:	e8 ad c9 fe ff       	call   f0100d0e <cprintf>
f0114361:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114364:	83 ec 08             	sub    $0x8,%esp
f0114367:	ff 75 e4             	pushl  -0x1c(%ebp)
f011436a:	68 68 a7 13 f0       	push   $0xf013a768
f011436f:	e8 9a c9 fe ff       	call   f0100d0e <cprintf>
f0114374:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114377:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011437b:	75 10                	jne    f011438d <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011437d:	83 ec 0c             	sub    $0xc,%esp
f0114380:	68 98 a7 13 f0       	push   $0xf013a798
f0114385:	e8 84 c9 fe ff       	call   f0100d0e <cprintf>
f011438a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011438d:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0114392:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114395:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114398:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011439b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01143a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01143a3:	5b                   	pop    %ebx
f01143a4:	5e                   	pop    %esi
f01143a5:	5f                   	pop    %edi
f01143a6:	5d                   	pop    %ebp
f01143a7:	c3                   	ret    

f01143a8 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01143a8:	55                   	push   %ebp
f01143a9:	89 e5                	mov    %esp,%ebp
f01143ab:	57                   	push   %edi
f01143ac:	56                   	push   %esi
f01143ad:	53                   	push   %ebx
f01143ae:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01143b4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01143ba:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f01143bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01143c4:	89 c7                	mov    %eax,%edi
f01143c6:	89 de                	mov    %ebx,%esi
f01143c8:	89 d1                	mov    %edx,%ecx
f01143ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01143cc:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01143d2:	b9 23 00 00 00       	mov    $0x23,%ecx
f01143d7:	b0 00                	mov    $0x0,%al
f01143d9:	89 d7                	mov    %edx,%edi
f01143db:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01143dd:	6a 00                	push   $0x0
f01143df:	6a 0a                	push   $0xa
f01143e1:	6a 14                	push   $0x14
f01143e3:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01143e9:	50                   	push   %eax
f01143ea:	e8 7e 4d ff ff       	call   f010916d <env_create>
f01143ef:	83 c4 10             	add    $0x10,%esp
f01143f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01143f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01143f8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01143fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f01143fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114401:	8b 40 60             	mov    0x60(%eax),%eax
f0114404:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114407:	8b 45 90             	mov    -0x70(%ebp),%eax
f011440a:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011440d:	83 ec 0c             	sub    $0xc,%esp
f0114410:	ff 75 d0             	pushl  -0x30(%ebp)
f0114413:	e8 32 20 00 00       	call   f011644a <ClearUserSpace>
f0114418:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011441b:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114422:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114429:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114430:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114434:	83 ec 0c             	sub    $0xc,%esp
f0114437:	68 d4 a7 13 f0       	push   $0xf013a7d4
f011443c:	e8 cd c8 fe ff       	call   f0100d0e <cprintf>
f0114441:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114444:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011444b:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0114452:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114455:	8a 00                	mov    (%eax),%al
f0114457:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011445d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114460:	8a 00                	mov    (%eax),%al
f0114462:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114468:	83 ec 08             	sub    $0x8,%esp
f011446b:	68 00 f0 bf ef       	push   $0xefbff000
f0114470:	ff 75 d0             	pushl  -0x30(%ebp)
f0114473:	e8 b3 1f 00 00       	call   f011642b <GP>
f0114478:	83 c4 10             	add    $0x10,%esp
f011447b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011447e:	e8 24 8a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114483:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114486:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114489:	c1 e0 02             	shl    $0x2,%eax
f011448c:	6a 02                	push   $0x2
f011448e:	50                   	push   %eax
f011448f:	68 00 f0 bf ef       	push   $0xefbff000
f0114494:	ff 75 d0             	pushl  -0x30(%ebp)
f0114497:	e8 93 49 ff ff       	call   f0108e2f <allocate_chunk>
f011449c:	83 c4 10             	add    $0x10,%esp
f011449f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01144a2:	e8 00 8a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01144a7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01144aa:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01144ae:	75 08                	jne    f01144b8 <test_allocate_chunk+0x110>
f01144b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144b3:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01144b6:	74 2a                	je     f01144e2 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01144b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144bb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144be:	83 ec 08             	sub    $0x8,%esp
f01144c1:	6a 00                	push   $0x0
f01144c3:	50                   	push   %eax
f01144c4:	ff 75 b0             	pushl  -0x50(%ebp)
f01144c7:	68 00 a8 13 f0       	push   $0xf013a800
f01144cc:	68 c3 04 00 00       	push   $0x4c3
f01144d1:	68 fe 8e 13 f0       	push   $0xf0138efe
f01144d6:	e8 38 bf fe ff       	call   f0100413 <_warn>
f01144db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144de:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144e2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144e6:	74 04                	je     f01144ec <test_allocate_chunk+0x144>
f01144e8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144ec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01144f0:	e8 b2 89 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01144f5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01144f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01144fb:	01 c0                	add    %eax,%eax
f01144fd:	89 c1                	mov    %eax,%ecx
f01144ff:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114502:	89 d0                	mov    %edx,%eax
f0114504:	c1 e0 02             	shl    $0x2,%eax
f0114507:	01 d0                	add    %edx,%eax
f0114509:	f7 d8                	neg    %eax
f011450b:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114510:	6a 02                	push   $0x2
f0114512:	51                   	push   %ecx
f0114513:	50                   	push   %eax
f0114514:	ff 75 d0             	pushl  -0x30(%ebp)
f0114517:	e8 13 49 ff ff       	call   f0108e2f <allocate_chunk>
f011451c:	83 c4 10             	add    $0x10,%esp
f011451f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114522:	e8 80 89 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114527:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011452a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011452e:	75 08                	jne    f0114538 <test_allocate_chunk+0x190>
f0114530:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114533:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114536:	74 2a                	je     f0114562 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114538:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011453b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011453e:	83 ec 08             	sub    $0x8,%esp
f0114541:	6a 00                	push   $0x0
f0114543:	50                   	push   %eax
f0114544:	ff 75 b0             	pushl  -0x50(%ebp)
f0114547:	68 00 a8 13 f0       	push   $0xf013a800
f011454c:	68 d1 04 00 00       	push   $0x4d1
f0114551:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114556:	e8 b8 be fe ff       	call   f0100413 <_warn>
f011455b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011455e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114562:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114566:	74 04                	je     f011456c <test_allocate_chunk+0x1c4>
f0114568:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011456c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114570:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114573:	c1 e0 02             	shl    $0x2,%eax
f0114576:	83 ec 08             	sub    $0x8,%esp
f0114579:	6a 03                	push   $0x3
f011457b:	6a 00                	push   $0x0
f011457d:	6a 00                	push   $0x0
f011457f:	68 ff 0f 00 00       	push   $0xfff
f0114584:	ff 75 b8             	pushl  -0x48(%ebp)
f0114587:	6a 01                	push   $0x1
f0114589:	50                   	push   %eax
f011458a:	68 00 f0 bf ef       	push   $0xefbff000
f011458f:	6a 00                	push   $0x0
f0114591:	ff 75 d0             	pushl  -0x30(%ebp)
f0114594:	e8 e5 1e 00 00       	call   f011647e <CCP>
f0114599:	83 c4 30             	add    $0x30,%esp
f011459c:	85 c0                	test   %eax,%eax
f011459e:	75 1e                	jne    f01145be <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01145a0:	83 ec 04             	sub    $0x4,%esp
f01145a3:	68 68 a8 13 f0       	push   $0xf013a868
f01145a8:	68 d9 04 00 00       	push   $0x4d9
f01145ad:	68 fe 8e 13 f0       	push   $0xf0138efe
f01145b2:	e8 5c be fe ff       	call   f0100413 <_warn>
f01145b7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145c2:	74 04                	je     f01145c8 <test_allocate_chunk+0x220>
f01145c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01145cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01145cf:	8a 10                	mov    (%eax),%dl
f01145d1:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01145d7:	38 c2                	cmp    %al,%dl
f01145d9:	75 0f                	jne    f01145ea <test_allocate_chunk+0x242>
f01145db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145de:	8a 10                	mov    (%eax),%dl
f01145e0:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01145e6:	38 c2                	cmp    %al,%dl
f01145e8:	74 1e                	je     f0114608 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01145ea:	83 ec 04             	sub    $0x4,%esp
f01145ed:	68 b4 a8 13 f0       	push   $0xf013a8b4
f01145f2:	68 e1 04 00 00       	push   $0x4e1
f01145f7:	68 fe 8e 13 f0       	push   $0xf0138efe
f01145fc:	e8 12 be fe ff       	call   f0100413 <_warn>
f0114601:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114604:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114608:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011460c:	74 04                	je     f0114612 <test_allocate_chunk+0x26a>
f011460e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114612:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114616:	83 ec 0c             	sub    $0xc,%esp
f0114619:	68 49 a6 13 f0       	push   $0xf013a649
f011461e:	e8 eb c6 fe ff       	call   f0100d0e <cprintf>
f0114623:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114626:	83 ec 0c             	sub    $0xc,%esp
f0114629:	68 ec a8 13 f0       	push   $0xf013a8ec
f011462e:	e8 db c6 fe ff       	call   f0100d0e <cprintf>
f0114633:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114636:	e8 6c 88 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011463b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011463e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114641:	c1 e0 05             	shl    $0x5,%eax
f0114644:	68 02 0e 00 00       	push   $0xe02
f0114649:	50                   	push   %eax
f011464a:	6a 00                	push   $0x0
f011464c:	ff 75 d0             	pushl  -0x30(%ebp)
f011464f:	e8 db 47 ff ff       	call   f0108e2f <allocate_chunk>
f0114654:	83 c4 10             	add    $0x10,%esp
f0114657:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011465a:	e8 48 88 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011465f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114662:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114666:	75 36                	jne    f011469e <test_allocate_chunk+0x2f6>
f0114668:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011466b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011466e:	89 c1                	mov    %eax,%ecx
f0114670:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114673:	c1 e0 05             	shl    $0x5,%eax
f0114676:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114679:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114680:	99                   	cltd   
f0114681:	f7 fe                	idiv   %esi
f0114683:	89 c3                	mov    %eax,%ebx
f0114685:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114688:	c1 e0 05             	shl    $0x5,%eax
f011468b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011468e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114695:	99                   	cltd   
f0114696:	f7 fe                	idiv   %esi
f0114698:	01 d8                	add    %ebx,%eax
f011469a:	39 c1                	cmp    %eax,%ecx
f011469c:	74 54                	je     f01146f2 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f011469e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146a1:	c1 e0 05             	shl    $0x5,%eax
f01146a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146a7:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01146ae:	99                   	cltd   
f01146af:	f7 ff                	idiv   %edi
f01146b1:	89 c1                	mov    %eax,%ecx
f01146b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146b6:	c1 e0 05             	shl    $0x5,%eax
f01146b9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01146bc:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01146c3:	99                   	cltd   
f01146c4:	f7 fe                	idiv   %esi
f01146c6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01146c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146cc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146cf:	83 ec 08             	sub    $0x8,%esp
f01146d2:	52                   	push   %edx
f01146d3:	50                   	push   %eax
f01146d4:	ff 75 a8             	pushl  -0x58(%ebp)
f01146d7:	68 2c a9 13 f0       	push   $0xf013a92c
f01146dc:	68 f6 04 00 00       	push   $0x4f6
f01146e1:	68 fe 8e 13 f0       	push   $0xf0138efe
f01146e6:	e8 28 bd fe ff       	call   f0100413 <_warn>
f01146eb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146f6:	74 04                	je     f01146fc <test_allocate_chunk+0x354>
f01146f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114700:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114707:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011470a:	c1 e0 05             	shl    $0x5,%eax
f011470d:	83 ec 08             	sub    $0x8,%esp
f0114710:	6a 03                	push   $0x3
f0114712:	6a 00                	push   $0x0
f0114714:	6a 00                	push   $0x0
f0114716:	68 07 0e 00 00       	push   $0xe07
f011471b:	68 03 0e 00 00       	push   $0xe03
f0114720:	6a 01                	push   $0x1
f0114722:	50                   	push   %eax
f0114723:	6a 00                	push   $0x0
f0114725:	6a 00                	push   $0x0
f0114727:	ff 75 d0             	pushl  -0x30(%ebp)
f011472a:	e8 4f 1d 00 00       	call   f011647e <CCP>
f011472f:	83 c4 30             	add    $0x30,%esp
f0114732:	85 c0                	test   %eax,%eax
f0114734:	75 25                	jne    f011475b <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114736:	83 ec 04             	sub    $0x4,%esp
f0114739:	68 68 a8 13 f0       	push   $0xf013a868
f011473e:	68 ff 04 00 00       	push   $0x4ff
f0114743:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114748:	e8 c6 bc fe ff       	call   f0100413 <_warn>
f011474d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114750:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114754:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011475b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011475f:	74 04                	je     f0114765 <test_allocate_chunk+0x3bd>
f0114761:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114765:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114769:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011476d:	74 5a                	je     f01147c9 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f011476f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114772:	01 c0                	add    %eax,%eax
f0114774:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114777:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011477a:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f011477d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114780:	01 c0                	add    %eax,%eax
f0114782:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114785:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114788:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011478b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011478e:	8a 00                	mov    (%eax),%al
f0114790:	3c 4b                	cmp    $0x4b,%al
f0114792:	75 09                	jne    f011479d <test_allocate_chunk+0x3f5>
f0114794:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114797:	8a 00                	mov    (%eax),%al
f0114799:	3c 4d                	cmp    $0x4d,%al
f011479b:	74 1e                	je     f01147bb <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011479d:	83 ec 04             	sub    $0x4,%esp
f01147a0:	68 b4 a8 13 f0       	push   $0xf013a8b4
f01147a5:	68 0d 05 00 00       	push   $0x50d
f01147aa:	68 fe 8e 13 f0       	push   $0xf0138efe
f01147af:	e8 5f bc fe ff       	call   f0100413 <_warn>
f01147b4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147b7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147bb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147bf:	74 04                	je     f01147c5 <test_allocate_chunk+0x41d>
f01147c1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01147c5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01147c9:	83 ec 0c             	sub    $0xc,%esp
f01147cc:	68 23 9c 13 f0       	push   $0xf0139c23
f01147d1:	e8 38 c5 fe ff       	call   f0100d0e <cprintf>
f01147d6:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01147d9:	83 ec 0c             	sub    $0xc,%esp
f01147dc:	68 8c a9 13 f0       	push   $0xf013a98c
f01147e1:	e8 28 c5 fe ff       	call   f0100d0e <cprintf>
f01147e6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01147e9:	e8 b9 86 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01147ee:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01147f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147f4:	c1 e0 06             	shl    $0x6,%eax
f01147f7:	89 c2                	mov    %eax,%edx
f01147f9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147fc:	c1 e0 05             	shl    $0x5,%eax
f01147ff:	6a 00                	push   $0x0
f0114801:	52                   	push   %edx
f0114802:	50                   	push   %eax
f0114803:	ff 75 d0             	pushl  -0x30(%ebp)
f0114806:	e8 24 46 ff ff       	call   f0108e2f <allocate_chunk>
f011480b:	83 c4 10             	add    $0x10,%esp
f011480e:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114811:	e8 91 86 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114816:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114819:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f011481d:	75 36                	jne    f0114855 <test_allocate_chunk+0x4ad>
f011481f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114822:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114825:	89 c1                	mov    %eax,%ecx
f0114827:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011482a:	c1 e0 06             	shl    $0x6,%eax
f011482d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114830:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114837:	99                   	cltd   
f0114838:	f7 ff                	idiv   %edi
f011483a:	89 c3                	mov    %eax,%ebx
f011483c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011483f:	c1 e0 06             	shl    $0x6,%eax
f0114842:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114845:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011484c:	99                   	cltd   
f011484d:	f7 fe                	idiv   %esi
f011484f:	01 d8                	add    %ebx,%eax
f0114851:	39 c1                	cmp    %eax,%ecx
f0114853:	74 54                	je     f01148a9 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114855:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114858:	c1 e0 06             	shl    $0x6,%eax
f011485b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011485e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114865:	99                   	cltd   
f0114866:	f7 fb                	idiv   %ebx
f0114868:	89 c1                	mov    %eax,%ecx
f011486a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011486d:	c1 e0 06             	shl    $0x6,%eax
f0114870:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114873:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011487a:	99                   	cltd   
f011487b:	f7 ff                	idiv   %edi
f011487d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114880:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114883:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114886:	83 ec 08             	sub    $0x8,%esp
f0114889:	52                   	push   %edx
f011488a:	50                   	push   %eax
f011488b:	ff 75 a4             	pushl  -0x5c(%ebp)
f011488e:	68 2c a9 13 f0       	push   $0xf013a92c
f0114893:	68 23 05 00 00       	push   $0x523
f0114898:	68 fe 8e 13 f0       	push   $0xf0138efe
f011489d:	e8 71 bb fe ff       	call   f0100413 <_warn>
f01148a2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148ad:	74 04                	je     f01148b3 <test_allocate_chunk+0x50b>
f01148af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01148b7:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01148be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148c1:	c1 e0 06             	shl    $0x6,%eax
f01148c4:	89 c2                	mov    %eax,%edx
f01148c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148c9:	c1 e0 05             	shl    $0x5,%eax
f01148cc:	83 ec 08             	sub    $0x8,%esp
f01148cf:	6a 03                	push   $0x3
f01148d1:	6a 00                	push   $0x0
f01148d3:	6a 00                	push   $0x0
f01148d5:	68 07 0e 00 00       	push   $0xe07
f01148da:	6a 01                	push   $0x1
f01148dc:	6a 01                	push   $0x1
f01148de:	52                   	push   %edx
f01148df:	50                   	push   %eax
f01148e0:	6a 00                	push   $0x0
f01148e2:	ff 75 d0             	pushl  -0x30(%ebp)
f01148e5:	e8 94 1b 00 00       	call   f011647e <CCP>
f01148ea:	83 c4 30             	add    $0x30,%esp
f01148ed:	85 c0                	test   %eax,%eax
f01148ef:	75 25                	jne    f0114916 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01148f1:	83 ec 04             	sub    $0x4,%esp
f01148f4:	68 68 a8 13 f0       	push   $0xf013a868
f01148f9:	68 2c 05 00 00       	push   $0x52c
f01148fe:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114903:	e8 0b bb fe ff       	call   f0100413 <_warn>
f0114908:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011490b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011490f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114916:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011491a:	74 04                	je     f0114920 <test_allocate_chunk+0x578>
f011491c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114920:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114924:	83 ec 0c             	sub    $0xc,%esp
f0114927:	68 86 9c 13 f0       	push   $0xf0139c86
f011492c:	e8 dd c3 fe ff       	call   f0100d0e <cprintf>
f0114931:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114934:	83 ec 0c             	sub    $0xc,%esp
f0114937:	68 cc a9 13 f0       	push   $0xf013a9cc
f011493c:	e8 cd c3 fe ff       	call   f0100d0e <cprintf>
f0114941:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114944:	e8 5e 85 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114949:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f011494c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011494f:	c1 e0 06             	shl    $0x6,%eax
f0114952:	68 06 0e 00 00       	push   $0xe06
f0114957:	50                   	push   %eax
f0114958:	68 00 00 00 80       	push   $0x80000000
f011495d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114960:	e8 ca 44 ff ff       	call   f0108e2f <allocate_chunk>
f0114965:	83 c4 10             	add    $0x10,%esp
f0114968:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011496b:	e8 37 85 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114970:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114973:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114977:	75 36                	jne    f01149af <test_allocate_chunk+0x607>
f0114979:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011497c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011497f:	89 c1                	mov    %eax,%ecx
f0114981:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114984:	c1 e0 06             	shl    $0x6,%eax
f0114987:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011498a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114991:	99                   	cltd   
f0114992:	f7 fb                	idiv   %ebx
f0114994:	89 c3                	mov    %eax,%ebx
f0114996:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114999:	c1 e0 06             	shl    $0x6,%eax
f011499c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011499f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149a6:	99                   	cltd   
f01149a7:	f7 fe                	idiv   %esi
f01149a9:	01 d8                	add    %ebx,%eax
f01149ab:	39 c1                	cmp    %eax,%ecx
f01149ad:	74 54                	je     f0114a03 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01149af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149b2:	c1 e0 06             	shl    $0x6,%eax
f01149b5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149b8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01149bf:	99                   	cltd   
f01149c0:	f7 ff                	idiv   %edi
f01149c2:	89 c1                	mov    %eax,%ecx
f01149c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149c7:	c1 e0 06             	shl    $0x6,%eax
f01149ca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149cd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01149d4:	99                   	cltd   
f01149d5:	f7 fb                	idiv   %ebx
f01149d7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01149da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149dd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149e0:	83 ec 08             	sub    $0x8,%esp
f01149e3:	52                   	push   %edx
f01149e4:	50                   	push   %eax
f01149e5:	ff 75 9c             	pushl  -0x64(%ebp)
f01149e8:	68 2c a9 13 f0       	push   $0xf013a92c
f01149ed:	68 42 05 00 00       	push   $0x542
f01149f2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01149f7:	e8 17 ba fe ff       	call   f0100413 <_warn>
f01149fc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a03:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a07:	74 04                	je     f0114a0d <test_allocate_chunk+0x665>
f0114a09:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a0d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a11:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a18:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a1b:	c1 e0 06             	shl    $0x6,%eax
f0114a1e:	83 ec 08             	sub    $0x8,%esp
f0114a21:	6a 03                	push   $0x3
f0114a23:	6a 00                	push   $0x0
f0114a25:	6a 00                	push   $0x0
f0114a27:	68 07 0e 00 00       	push   $0xe07
f0114a2c:	68 07 0e 00 00       	push   $0xe07
f0114a31:	6a 01                	push   $0x1
f0114a33:	50                   	push   %eax
f0114a34:	68 00 00 00 80       	push   $0x80000000
f0114a39:	6a 00                	push   $0x0
f0114a3b:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a3e:	e8 3b 1a 00 00       	call   f011647e <CCP>
f0114a43:	83 c4 30             	add    $0x30,%esp
f0114a46:	85 c0                	test   %eax,%eax
f0114a48:	75 25                	jne    f0114a6f <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a4a:	83 ec 04             	sub    $0x4,%esp
f0114a4d:	68 68 a8 13 f0       	push   $0xf013a868
f0114a52:	68 4b 05 00 00       	push   $0x54b
f0114a57:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114a5c:	e8 b2 b9 fe ff       	call   f0100413 <_warn>
f0114a61:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114a68:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114a6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a73:	74 04                	je     f0114a79 <test_allocate_chunk+0x6d1>
f0114a75:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114a7d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114a81:	74 6f                	je     f0114af2 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114a83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a86:	01 c0                	add    %eax,%eax
f0114a88:	05 00 00 00 80       	add    $0x80000000,%eax
f0114a8d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114a90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a93:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114a96:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a99:	89 d0                	mov    %edx,%eax
f0114a9b:	c1 e0 02             	shl    $0x2,%eax
f0114a9e:	01 d0                	add    %edx,%eax
f0114aa0:	01 c0                	add    %eax,%eax
f0114aa2:	01 d0                	add    %edx,%eax
f0114aa4:	01 c0                	add    %eax,%eax
f0114aa6:	05 00 00 00 80       	add    $0x80000000,%eax
f0114aab:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114aae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ab1:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114ab4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ab7:	8a 00                	mov    (%eax),%al
f0114ab9:	3c 4b                	cmp    $0x4b,%al
f0114abb:	75 09                	jne    f0114ac6 <test_allocate_chunk+0x71e>
f0114abd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ac0:	8a 00                	mov    (%eax),%al
f0114ac2:	3c 4d                	cmp    $0x4d,%al
f0114ac4:	74 1e                	je     f0114ae4 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114ac6:	83 ec 04             	sub    $0x4,%esp
f0114ac9:	68 b4 a8 13 f0       	push   $0xf013a8b4
f0114ace:	68 59 05 00 00       	push   $0x559
f0114ad3:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114ad8:	e8 36 b9 fe ff       	call   f0100413 <_warn>
f0114add:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114ae0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114ae4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ae8:	74 04                	je     f0114aee <test_allocate_chunk+0x746>
f0114aea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114aee:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114af2:	83 ec 0c             	sub    $0xc,%esp
f0114af5:	68 58 a7 13 f0       	push   $0xf013a758
f0114afa:	e8 0f c2 fe ff       	call   f0100d0e <cprintf>
f0114aff:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114b02:	83 ec 0c             	sub    $0xc,%esp
f0114b05:	68 08 aa 13 f0       	push   $0xf013aa08
f0114b0a:	e8 ff c1 fe ff       	call   f0100d0e <cprintf>
f0114b0f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b12:	e8 90 83 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114b17:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114b1a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b1d:	89 d0                	mov    %edx,%eax
f0114b1f:	01 c0                	add    %eax,%eax
f0114b21:	01 d0                	add    %edx,%eax
f0114b23:	01 c0                	add    %eax,%eax
f0114b25:	01 d0                	add    %edx,%eax
f0114b27:	68 04 0e 00 00       	push   $0xe04
f0114b2c:	50                   	push   %eax
f0114b2d:	68 00 fc 3f 40       	push   $0x403ffc00
f0114b32:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b35:	e8 f5 42 ff ff       	call   f0108e2f <allocate_chunk>
f0114b3a:	83 c4 10             	add    $0x10,%esp
f0114b3d:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b40:	e8 62 83 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0114b45:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114b48:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114b4c:	75 0b                	jne    f0114b59 <test_allocate_chunk+0x7b1>
f0114b4e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b51:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b54:	83 f8 05             	cmp    $0x5,%eax
f0114b57:	74 2a                	je     f0114b83 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114b59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b5c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b5f:	83 ec 08             	sub    $0x8,%esp
f0114b62:	6a 05                	push   $0x5
f0114b64:	50                   	push   %eax
f0114b65:	ff 75 98             	pushl  -0x68(%ebp)
f0114b68:	68 2c a9 13 f0       	push   $0xf013a92c
f0114b6d:	68 70 05 00 00       	push   $0x570
f0114b72:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114b77:	e8 97 b8 fe ff       	call   f0100413 <_warn>
f0114b7c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b83:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b87:	74 04                	je     f0114b8d <test_allocate_chunk+0x7e5>
f0114b89:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b8d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b91:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114b98:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b9b:	89 d0                	mov    %edx,%eax
f0114b9d:	01 c0                	add    %eax,%eax
f0114b9f:	01 d0                	add    %edx,%eax
f0114ba1:	c1 e0 02             	shl    $0x2,%eax
f0114ba4:	83 ec 08             	sub    $0x8,%esp
f0114ba7:	6a 03                	push   $0x3
f0114ba9:	6a 00                	push   $0x0
f0114bab:	6a 00                	push   $0x0
f0114bad:	68 07 0e 00 00       	push   $0xe07
f0114bb2:	68 05 0e 00 00       	push   $0xe05
f0114bb7:	6a 01                	push   $0x1
f0114bb9:	50                   	push   %eax
f0114bba:	68 00 f0 3f 40       	push   $0x403ff000
f0114bbf:	6a 00                	push   $0x0
f0114bc1:	ff 75 d0             	pushl  -0x30(%ebp)
f0114bc4:	e8 b5 18 00 00       	call   f011647e <CCP>
f0114bc9:	83 c4 30             	add    $0x30,%esp
f0114bcc:	85 c0                	test   %eax,%eax
f0114bce:	75 25                	jne    f0114bf5 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114bd0:	83 ec 04             	sub    $0x4,%esp
f0114bd3:	68 68 a8 13 f0       	push   $0xf013a868
f0114bd8:	68 79 05 00 00       	push   $0x579
f0114bdd:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114be2:	e8 2c b8 fe ff       	call   f0100413 <_warn>
f0114be7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114bea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114bee:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114bf5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bf9:	74 04                	je     f0114bff <test_allocate_chunk+0x857>
f0114bfb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114bff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114c03:	83 ec 0c             	sub    $0xc,%esp
f0114c06:	68 3f aa 13 f0       	push   $0xf013aa3f
f0114c0b:	e8 fe c0 fe ff       	call   f0100d0e <cprintf>
f0114c10:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114c13:	83 ec 08             	sub    $0x8,%esp
f0114c16:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114c19:	68 50 aa 13 f0       	push   $0xf013aa50
f0114c1e:	e8 eb c0 fe ff       	call   f0100d0e <cprintf>
f0114c23:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114c26:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114c2a:	75 10                	jne    f0114c3c <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114c2c:	83 ec 0c             	sub    $0xc,%esp
f0114c2f:	68 84 aa 13 f0       	push   $0xf013aa84
f0114c34:	e8 d5 c0 fe ff       	call   f0100d0e <cprintf>
f0114c39:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114c3c:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0114c41:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114c44:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114c47:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114c4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114c4f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114c52:	5b                   	pop    %ebx
f0114c53:	5e                   	pop    %esi
f0114c54:	5f                   	pop    %edi
f0114c55:	5d                   	pop    %ebp
f0114c56:	c3                   	ret    

f0114c57 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114c57:	55                   	push   %ebp
f0114c58:	89 e5                	mov    %esp,%ebp
f0114c5a:	57                   	push   %edi
f0114c5b:	56                   	push   %esi
f0114c5c:	53                   	push   %ebx
f0114c5d:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114c63:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114c66:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f0114c6b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c70:	89 c7                	mov    %eax,%edi
f0114c72:	89 de                	mov    %ebx,%esi
f0114c74:	89 d1                	mov    %edx,%ecx
f0114c76:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c78:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114c7b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114c80:	b0 00                	mov    $0x0,%al
f0114c82:	89 d7                	mov    %edx,%edi
f0114c84:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114c86:	6a 00                	push   $0x0
f0114c88:	6a 0a                	push   $0xa
f0114c8a:	6a 14                	push   $0x14
f0114c8c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114c8f:	50                   	push   %eax
f0114c90:	e8 d8 44 ff ff       	call   f010916d <env_create>
f0114c95:	83 c4 10             	add    $0x10,%esp
f0114c98:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114c9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114c9e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114ca1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114ca4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114ca7:	8b 40 60             	mov    0x60(%eax),%eax
f0114caa:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114cad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114cb0:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114cb3:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114cba:	75 70 20 
f0114cbd:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114cc4:	00 00 00 
f0114cc7:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114cca:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114ccf:	b8 00 00 00 00       	mov    $0x0,%eax
f0114cd4:	89 d7                	mov    %edx,%edi
f0114cd6:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114cd8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114cdb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114cde:	83 ec 08             	sub    $0x8,%esp
f0114ce1:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114ce7:	52                   	push   %edx
f0114ce8:	50                   	push   %eax
f0114ce9:	e8 5b cd 01 00       	call   f0131a49 <ltostr>
f0114cee:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114cf1:	83 ec 04             	sub    $0x4,%esp
f0114cf4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114cfa:	50                   	push   %eax
f0114cfb:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114d01:	50                   	push   %eax
f0114d02:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114d08:	50                   	push   %eax
f0114d09:	e8 33 ce 01 00       	call   f0131b41 <strcconcat>
f0114d0e:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114d11:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114d18:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114d1f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114d26:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114d2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114d31:	83 ec 0c             	sub    $0xc,%esp
f0114d34:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d37:	e8 0e 17 00 00       	call   f011644a <ClearUserSpace>
f0114d3c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114d3f:	83 ec 0c             	sub    $0xc,%esp
f0114d42:	68 c4 aa 13 f0       	push   $0xf013aac4
f0114d47:	e8 c2 bf fe ff       	call   f0100d0e <cprintf>
f0114d4c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114d4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114d52:	c1 e0 03             	shl    $0x3,%eax
f0114d55:	83 ec 04             	sub    $0x4,%esp
f0114d58:	50                   	push   %eax
f0114d59:	6a 00                	push   $0x0
f0114d5b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d5e:	e8 e7 42 ff ff       	call   f010904a <calculate_required_frames>
f0114d63:	83 c4 10             	add    $0x10,%esp
f0114d66:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114d69:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114d6d:	74 23                	je     f0114d92 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114d6f:	83 ec 0c             	sub    $0xc,%esp
f0114d72:	6a 03                	push   $0x3
f0114d74:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d77:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114d7c:	68 b2 05 00 00       	push   $0x5b2
f0114d81:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114d86:	e8 88 b6 fe ff       	call   f0100413 <_warn>
f0114d8b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d8e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d92:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d96:	74 04                	je     f0114d9c <test_calculate_required_frames+0x145>
f0114d98:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d9c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114da0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114da3:	c1 e0 02             	shl    $0x2,%eax
f0114da6:	83 ec 04             	sub    $0x4,%esp
f0114da9:	50                   	push   %eax
f0114daa:	6a 00                	push   $0x0
f0114dac:	ff 75 d8             	pushl  -0x28(%ebp)
f0114daf:	e8 96 42 ff ff       	call   f010904a <calculate_required_frames>
f0114db4:	83 c4 10             	add    $0x10,%esp
f0114db7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114dba:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114dc1:	74 26                	je     f0114de9 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114dc3:	83 ec 0c             	sub    $0xc,%esp
f0114dc6:	68 01 04 00 00       	push   $0x401
f0114dcb:	ff 75 c8             	pushl  -0x38(%ebp)
f0114dce:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114dd3:	68 bc 05 00 00       	push   $0x5bc
f0114dd8:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114ddd:	e8 31 b6 fe ff       	call   f0100413 <_warn>
f0114de2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114de5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114de9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ded:	74 04                	je     f0114df3 <test_calculate_required_frames+0x19c>
f0114def:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114df3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114df7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114dfa:	c1 e0 0a             	shl    $0xa,%eax
f0114dfd:	83 ec 04             	sub    $0x4,%esp
f0114e00:	50                   	push   %eax
f0114e01:	6a 00                	push   $0x0
f0114e03:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e06:	e8 3f 42 ff ff       	call   f010904a <calculate_required_frames>
f0114e0b:	83 c4 10             	add    $0x10,%esp
f0114e0e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114e11:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e14:	c1 e0 0a             	shl    $0xa,%eax
f0114e17:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e1a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e21:	99                   	cltd   
f0114e22:	f7 fb                	idiv   %ebx
f0114e24:	89 c1                	mov    %eax,%ecx
f0114e26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e29:	c1 e0 0a             	shl    $0xa,%eax
f0114e2c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e2f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e36:	99                   	cltd   
f0114e37:	f7 fe                	idiv   %esi
f0114e39:	01 c8                	add    %ecx,%eax
f0114e3b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114e3e:	74 4c                	je     f0114e8c <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114e40:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e43:	c1 e0 0a             	shl    $0xa,%eax
f0114e46:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e49:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e50:	99                   	cltd   
f0114e51:	f7 fb                	idiv   %ebx
f0114e53:	89 c1                	mov    %eax,%ecx
f0114e55:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e58:	c1 e0 0a             	shl    $0xa,%eax
f0114e5b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e5e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e65:	99                   	cltd   
f0114e66:	f7 fe                	idiv   %esi
f0114e68:	01 c8                	add    %ecx,%eax
f0114e6a:	83 ec 0c             	sub    $0xc,%esp
f0114e6d:	50                   	push   %eax
f0114e6e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e71:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114e76:	68 c6 05 00 00       	push   $0x5c6
f0114e7b:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114e80:	e8 8e b5 fe ff       	call   f0100413 <_warn>
f0114e85:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e88:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e8c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e90:	74 04                	je     f0114e96 <test_calculate_required_frames+0x23f>
f0114e92:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e96:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114e9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e9d:	89 d0                	mov    %edx,%eax
f0114e9f:	01 c0                	add    %eax,%eax
f0114ea1:	01 d0                	add    %edx,%eax
f0114ea3:	01 c0                	add    %eax,%eax
f0114ea5:	83 ec 04             	sub    $0x4,%esp
f0114ea8:	50                   	push   %eax
f0114ea9:	68 00 10 00 00       	push   $0x1000
f0114eae:	ff 75 d8             	pushl  -0x28(%ebp)
f0114eb1:	e8 94 41 ff ff       	call   f010904a <calculate_required_frames>
f0114eb6:	83 c4 10             	add    $0x10,%esp
f0114eb9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114ebc:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114ec0:	74 23                	je     f0114ee5 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114ec2:	83 ec 0c             	sub    $0xc,%esp
f0114ec5:	6a 03                	push   $0x3
f0114ec7:	ff 75 c8             	pushl  -0x38(%ebp)
f0114eca:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114ecf:	68 d2 05 00 00       	push   $0x5d2
f0114ed4:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114ed9:	e8 35 b5 fe ff       	call   f0100413 <_warn>
f0114ede:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ee1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ee5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ee9:	74 04                	je     f0114eef <test_calculate_required_frames+0x298>
f0114eeb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114eef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114ef3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ef6:	89 c2                	mov    %eax,%edx
f0114ef8:	01 d2                	add    %edx,%edx
f0114efa:	01 d0                	add    %edx,%eax
f0114efc:	83 ec 04             	sub    $0x4,%esp
f0114eff:	50                   	push   %eax
f0114f00:	68 00 18 00 00       	push   $0x1800
f0114f05:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f08:	e8 3d 41 ff ff       	call   f010904a <calculate_required_frames>
f0114f0d:	83 c4 10             	add    $0x10,%esp
f0114f10:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f13:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f17:	74 23                	je     f0114f3c <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f19:	83 ec 0c             	sub    $0xc,%esp
f0114f1c:	6a 03                	push   $0x3
f0114f1e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f21:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114f26:	68 dc 05 00 00       	push   $0x5dc
f0114f2b:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114f30:	e8 de b4 fe ff       	call   f0100413 <_warn>
f0114f35:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f38:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f3c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f40:	74 04                	je     f0114f46 <test_calculate_required_frames+0x2ef>
f0114f42:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f46:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114f4a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f4d:	89 d0                	mov    %edx,%eax
f0114f4f:	c1 e0 02             	shl    $0x2,%eax
f0114f52:	01 d0                	add    %edx,%eax
f0114f54:	01 c0                	add    %eax,%eax
f0114f56:	83 ec 04             	sub    $0x4,%esp
f0114f59:	50                   	push   %eax
f0114f5a:	68 00 00 40 00       	push   $0x400000
f0114f5f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f62:	e8 e3 40 ff ff       	call   f010904a <calculate_required_frames>
f0114f67:	83 c4 10             	add    $0x10,%esp
f0114f6a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114f6d:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114f74:	74 26                	je     f0114f9c <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114f76:	83 ec 0c             	sub    $0xc,%esp
f0114f79:	68 03 0a 00 00       	push   $0xa03
f0114f7e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f81:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114f86:	68 e6 05 00 00       	push   $0x5e6
f0114f8b:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114f90:	e8 7e b4 fe ff       	call   f0100413 <_warn>
f0114f95:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fa0:	74 04                	je     f0114fa6 <test_calculate_required_frames+0x34f>
f0114fa2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fa6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114faa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fad:	01 c0                	add    %eax,%eax
f0114faf:	83 ec 04             	sub    $0x4,%esp
f0114fb2:	50                   	push   %eax
f0114fb3:	68 00 00 70 00       	push   $0x700000
f0114fb8:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fbb:	e8 8a 40 ff ff       	call   f010904a <calculate_required_frames>
f0114fc0:	83 c4 10             	add    $0x10,%esp
f0114fc3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114fc6:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114fcd:	74 26                	je     f0114ff5 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114fcf:	83 ec 0c             	sub    $0xc,%esp
f0114fd2:	68 02 02 00 00       	push   $0x202
f0114fd7:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fda:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0114fdf:	68 f2 05 00 00       	push   $0x5f2
f0114fe4:	68 fe 8e 13 f0       	push   $0xf0138efe
f0114fe9:	e8 25 b4 fe ff       	call   f0100413 <_warn>
f0114fee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ff1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ff5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ff9:	74 04                	je     f0114fff <test_calculate_required_frames+0x3a8>
f0114ffb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115003:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115006:	83 ec 04             	sub    $0x4,%esp
f0115009:	50                   	push   %eax
f011500a:	68 ff ff 3f 00       	push   $0x3fffff
f011500f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115012:	e8 33 40 ff ff       	call   f010904a <calculate_required_frames>
f0115017:	83 c4 10             	add    $0x10,%esp
f011501a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011501d:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115021:	74 23                	je     f0115046 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115023:	83 ec 0c             	sub    $0xc,%esp
f0115026:	6a 04                	push   $0x4
f0115028:	ff 75 c8             	pushl  -0x38(%ebp)
f011502b:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0115030:	68 fc 05 00 00       	push   $0x5fc
f0115035:	68 fe 8e 13 f0       	push   $0xf0138efe
f011503a:	e8 d4 b3 fe ff       	call   f0100413 <_warn>
f011503f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115042:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115046:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011504a:	74 04                	je     f0115050 <test_calculate_required_frames+0x3f9>
f011504c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115050:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115054:	83 ec 0c             	sub    $0xc,%esp
f0115057:	68 49 a6 13 f0       	push   $0xf013a649
f011505c:	e8 ad bc fe ff       	call   f0100d0e <cprintf>
f0115061:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115064:	83 ec 0c             	sub    $0xc,%esp
f0115067:	68 50 ab 13 f0       	push   $0xf013ab50
f011506c:	e8 9d bc fe ff       	call   f0100d0e <cprintf>
f0115071:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115074:	83 ec 04             	sub    $0x4,%esp
f0115077:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011507d:	50                   	push   %eax
f011507e:	68 02 9a 13 f0       	push   $0xf0139a02
f0115083:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115089:	50                   	push   %eax
f011508a:	e8 b2 ca 01 00       	call   f0131b41 <strcconcat>
f011508f:	83 c4 10             	add    $0x10,%esp
f0115092:	83 ec 0c             	sub    $0xc,%esp
f0115095:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011509b:	50                   	push   %eax
f011509c:	e8 cf bc fe ff       	call   f0100d70 <execute_command>
f01150a1:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01150a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01150a7:	c1 e0 03             	shl    $0x3,%eax
f01150aa:	83 ec 04             	sub    $0x4,%esp
f01150ad:	50                   	push   %eax
f01150ae:	6a 00                	push   $0x0
f01150b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01150b3:	e8 92 3f ff ff       	call   f010904a <calculate_required_frames>
f01150b8:	83 c4 10             	add    $0x10,%esp
f01150bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01150be:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01150c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01150c8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01150cb:	74 24                	je     f01150f1 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01150cd:	83 ec 0c             	sub    $0xc,%esp
f01150d0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01150d3:	ff 75 c8             	pushl  -0x38(%ebp)
f01150d6:	68 f8 aa 13 f0       	push   $0xf013aaf8
f01150db:	68 10 06 00 00       	push   $0x610
f01150e0:	68 fe 8e 13 f0       	push   $0xf0138efe
f01150e5:	e8 29 b3 fe ff       	call   f0100413 <_warn>
f01150ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150f5:	74 04                	je     f01150fb <test_calculate_required_frames+0x4a4>
f01150f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01150ff:	83 ec 04             	sub    $0x4,%esp
f0115102:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115108:	50                   	push   %eax
f0115109:	68 0f 9a 13 f0       	push   $0xf0139a0f
f011510e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115114:	50                   	push   %eax
f0115115:	e8 27 ca 01 00       	call   f0131b41 <strcconcat>
f011511a:	83 c4 10             	add    $0x10,%esp
f011511d:	83 ec 0c             	sub    $0xc,%esp
f0115120:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115126:	50                   	push   %eax
f0115127:	e8 44 bc fe ff       	call   f0100d70 <execute_command>
f011512c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011512f:	83 ec 04             	sub    $0x4,%esp
f0115132:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115138:	50                   	push   %eax
f0115139:	68 84 ab 13 f0       	push   $0xf013ab84
f011513e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115144:	50                   	push   %eax
f0115145:	e8 f7 c9 01 00       	call   f0131b41 <strcconcat>
f011514a:	83 c4 10             	add    $0x10,%esp
f011514d:	83 ec 0c             	sub    $0xc,%esp
f0115150:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115156:	50                   	push   %eax
f0115157:	e8 14 bc fe ff       	call   f0100d70 <execute_command>
f011515c:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011515f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115162:	c1 e0 03             	shl    $0x3,%eax
f0115165:	83 ec 04             	sub    $0x4,%esp
f0115168:	50                   	push   %eax
f0115169:	6a 00                	push   $0x0
f011516b:	ff 75 d8             	pushl  -0x28(%ebp)
f011516e:	e8 d7 3e ff ff       	call   f010904a <calculate_required_frames>
f0115173:	83 c4 10             	add    $0x10,%esp
f0115176:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115179:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115180:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115183:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115186:	74 24                	je     f01151ac <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115188:	83 ec 0c             	sub    $0xc,%esp
f011518b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011518e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115191:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0115196:	68 1e 06 00 00       	push   $0x61e
f011519b:	68 fe 8e 13 f0       	push   $0xf0138efe
f01151a0:	e8 6e b2 fe ff       	call   f0100413 <_warn>
f01151a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151ac:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151b0:	74 04                	je     f01151b6 <test_calculate_required_frames+0x55f>
f01151b2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151b6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01151ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151bd:	c1 e0 0a             	shl    $0xa,%eax
f01151c0:	83 ec 04             	sub    $0x4,%esp
f01151c3:	50                   	push   %eax
f01151c4:	6a 00                	push   $0x0
f01151c6:	ff 75 d8             	pushl  -0x28(%ebp)
f01151c9:	e8 7c 3e ff ff       	call   f010904a <calculate_required_frames>
f01151ce:	83 c4 10             	add    $0x10,%esp
f01151d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01151d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151d7:	c1 e0 0a             	shl    $0xa,%eax
f01151da:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01151dd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01151e4:	99                   	cltd   
f01151e5:	f7 fb                	idiv   %ebx
f01151e7:	89 c1                	mov    %eax,%ecx
f01151e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151ec:	c1 e0 0a             	shl    $0xa,%eax
f01151ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01151f2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01151f9:	99                   	cltd   
f01151fa:	f7 fe                	idiv   %esi
f01151fc:	01 c8                	add    %ecx,%eax
f01151fe:	83 e8 05             	sub    $0x5,%eax
f0115201:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115204:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115207:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011520a:	74 24                	je     f0115230 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011520c:	83 ec 0c             	sub    $0xc,%esp
f011520f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115212:	ff 75 c8             	pushl  -0x38(%ebp)
f0115215:	68 f8 aa 13 f0       	push   $0xf013aaf8
f011521a:	68 29 06 00 00       	push   $0x629
f011521f:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115224:	e8 ea b1 fe ff       	call   f0100413 <_warn>
f0115229:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011522c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115230:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115234:	74 04                	je     f011523a <test_calculate_required_frames+0x5e3>
f0115236:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011523a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011523e:	83 ec 04             	sub    $0x4,%esp
f0115241:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115247:	50                   	push   %eax
f0115248:	68 90 ab 13 f0       	push   $0xf013ab90
f011524d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115253:	50                   	push   %eax
f0115254:	e8 e8 c8 01 00       	call   f0131b41 <strcconcat>
f0115259:	83 c4 10             	add    $0x10,%esp
f011525c:	83 ec 0c             	sub    $0xc,%esp
f011525f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115265:	50                   	push   %eax
f0115266:	e8 05 bb fe ff       	call   f0100d70 <execute_command>
f011526b:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011526e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115271:	89 c2                	mov    %eax,%edx
f0115273:	01 d2                	add    %edx,%edx
f0115275:	01 d0                	add    %edx,%eax
f0115277:	83 ec 04             	sub    $0x4,%esp
f011527a:	50                   	push   %eax
f011527b:	68 00 18 00 00       	push   $0x1800
f0115280:	ff 75 d8             	pushl  -0x28(%ebp)
f0115283:	e8 c2 3d ff ff       	call   f010904a <calculate_required_frames>
f0115288:	83 c4 10             	add    $0x10,%esp
f011528b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011528e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115295:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115298:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011529b:	74 24                	je     f01152c1 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011529d:	83 ec 0c             	sub    $0xc,%esp
f01152a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01152a3:	ff 75 c8             	pushl  -0x38(%ebp)
f01152a6:	68 f8 aa 13 f0       	push   $0xf013aaf8
f01152ab:	68 38 06 00 00       	push   $0x638
f01152b0:	68 fe 8e 13 f0       	push   $0xf0138efe
f01152b5:	e8 59 b1 fe ff       	call   f0100413 <_warn>
f01152ba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152c1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152c5:	74 04                	je     f01152cb <test_calculate_required_frames+0x674>
f01152c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152cb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01152cf:	83 ec 04             	sub    $0x4,%esp
f01152d2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152d8:	50                   	push   %eax
f01152d9:	68 68 9c 13 f0       	push   $0xf0139c68
f01152de:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152e4:	50                   	push   %eax
f01152e5:	e8 57 c8 01 00       	call   f0131b41 <strcconcat>
f01152ea:	83 c4 10             	add    $0x10,%esp
f01152ed:	83 ec 0c             	sub    $0xc,%esp
f01152f0:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152f6:	50                   	push   %eax
f01152f7:	e8 74 ba fe ff       	call   f0100d70 <execute_command>
f01152fc:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01152ff:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115302:	89 d0                	mov    %edx,%eax
f0115304:	c1 e0 02             	shl    $0x2,%eax
f0115307:	01 d0                	add    %edx,%eax
f0115309:	01 c0                	add    %eax,%eax
f011530b:	83 ec 04             	sub    $0x4,%esp
f011530e:	50                   	push   %eax
f011530f:	68 00 00 40 00       	push   $0x400000
f0115314:	ff 75 d8             	pushl  -0x28(%ebp)
f0115317:	e8 2e 3d ff ff       	call   f010904a <calculate_required_frames>
f011531c:	83 c4 10             	add    $0x10,%esp
f011531f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115322:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115329:	74 26                	je     f0115351 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011532b:	83 ec 0c             	sub    $0xc,%esp
f011532e:	68 03 0a 00 00       	push   $0xa03
f0115333:	ff 75 c8             	pushl  -0x38(%ebp)
f0115336:	68 f8 aa 13 f0       	push   $0xf013aaf8
f011533b:	68 44 06 00 00       	push   $0x644
f0115340:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115345:	e8 c9 b0 fe ff       	call   f0100413 <_warn>
f011534a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115351:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115355:	74 04                	je     f011535b <test_calculate_required_frames+0x704>
f0115357:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011535b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011535f:	83 ec 04             	sub    $0x4,%esp
f0115362:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115368:	50                   	push   %eax
f0115369:	68 72 9c 13 f0       	push   $0xf0139c72
f011536e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115374:	50                   	push   %eax
f0115375:	e8 c7 c7 01 00       	call   f0131b41 <strcconcat>
f011537a:	83 c4 10             	add    $0x10,%esp
f011537d:	83 ec 0c             	sub    $0xc,%esp
f0115380:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115386:	50                   	push   %eax
f0115387:	e8 e4 b9 fe ff       	call   f0100d70 <execute_command>
f011538c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011538f:	83 ec 04             	sub    $0x4,%esp
f0115392:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115398:	50                   	push   %eax
f0115399:	68 98 ab 13 f0       	push   $0xf013ab98
f011539e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153a4:	50                   	push   %eax
f01153a5:	e8 97 c7 01 00       	call   f0131b41 <strcconcat>
f01153aa:	83 c4 10             	add    $0x10,%esp
f01153ad:	83 ec 0c             	sub    $0xc,%esp
f01153b0:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01153b6:	50                   	push   %eax
f01153b7:	e8 b4 b9 fe ff       	call   f0100d70 <execute_command>
f01153bc:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01153bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153c2:	01 c0                	add    %eax,%eax
f01153c4:	83 ec 04             	sub    $0x4,%esp
f01153c7:	50                   	push   %eax
f01153c8:	68 00 00 70 00       	push   $0x700000
f01153cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01153d0:	e8 75 3c ff ff       	call   f010904a <calculate_required_frames>
f01153d5:	83 c4 10             	add    $0x10,%esp
f01153d8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01153db:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01153e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153e5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153e8:	74 24                	je     f011540e <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01153ea:	83 ec 0c             	sub    $0xc,%esp
f01153ed:	ff 75 c4             	pushl  -0x3c(%ebp)
f01153f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01153f3:	68 f8 aa 13 f0       	push   $0xf013aaf8
f01153f8:	68 54 06 00 00       	push   $0x654
f01153fd:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115402:	e8 0c b0 fe ff       	call   f0100413 <_warn>
f0115407:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011540a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011540e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115412:	74 04                	je     f0115418 <test_calculate_required_frames+0x7c1>
f0115414:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115418:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011541c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011541f:	83 ec 04             	sub    $0x4,%esp
f0115422:	50                   	push   %eax
f0115423:	68 ff ff 3f 00       	push   $0x3fffff
f0115428:	ff 75 d8             	pushl  -0x28(%ebp)
f011542b:	e8 1a 3c ff ff       	call   f010904a <calculate_required_frames>
f0115430:	83 c4 10             	add    $0x10,%esp
f0115433:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115436:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011543d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115440:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115443:	74 24                	je     f0115469 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115445:	83 ec 0c             	sub    $0xc,%esp
f0115448:	ff 75 c4             	pushl  -0x3c(%ebp)
f011544b:	ff 75 c8             	pushl  -0x38(%ebp)
f011544e:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0115453:	68 5f 06 00 00       	push   $0x65f
f0115458:	68 fe 8e 13 f0       	push   $0xf0138efe
f011545d:	e8 b1 af fe ff       	call   f0100413 <_warn>
f0115462:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115465:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115469:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011546d:	74 04                	je     f0115473 <test_calculate_required_frames+0x81c>
f011546f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115473:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115477:	83 ec 0c             	sub    $0xc,%esp
f011547a:	68 23 9c 13 f0       	push   $0xf0139c23
f011547f:	e8 8a b8 fe ff       	call   f0100d0e <cprintf>
f0115484:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115487:	83 ec 08             	sub    $0x8,%esp
f011548a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011548d:	68 a4 ab 13 f0       	push   $0xf013aba4
f0115492:	e8 77 b8 fe ff       	call   f0100d0e <cprintf>
f0115497:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011549a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011549e:	75 10                	jne    f01154b0 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01154a0:	83 ec 0c             	sub    $0xc,%esp
f01154a3:	68 e4 ab 13 f0       	push   $0xf013abe4
f01154a8:	e8 61 b8 fe ff       	call   f0100d0e <cprintf>
f01154ad:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01154b0:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01154b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01154b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01154bb:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01154be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01154c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01154c6:	5b                   	pop    %ebx
f01154c7:	5e                   	pop    %esi
f01154c8:	5f                   	pop    %edi
f01154c9:	5d                   	pop    %ebp
f01154ca:	c3                   	ret    

f01154cb <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01154cb:	55                   	push   %ebp
f01154cc:	89 e5                	mov    %esp,%ebp
f01154ce:	57                   	push   %edi
f01154cf:	56                   	push   %esi
f01154d0:	53                   	push   %ebx
f01154d1:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01154d7:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01154da:	bb 98 99 13 f0       	mov    $0xf0139998,%ebx
f01154df:	ba 0f 00 00 00       	mov    $0xf,%edx
f01154e4:	89 c7                	mov    %eax,%edi
f01154e6:	89 de                	mov    %ebx,%esi
f01154e8:	89 d1                	mov    %edx,%ecx
f01154ea:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01154ec:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01154ef:	b9 23 00 00 00       	mov    $0x23,%ecx
f01154f4:	b0 00                	mov    $0x0,%al
f01154f6:	89 d7                	mov    %edx,%edi
f01154f8:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01154fa:	6a 00                	push   $0x0
f01154fc:	6a 0a                	push   $0xa
f01154fe:	6a 14                	push   $0x14
f0115500:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115503:	50                   	push   %eax
f0115504:	e8 64 3c ff ff       	call   f010916d <env_create>
f0115509:	83 c4 10             	add    $0x10,%esp
f011550c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011550f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115512:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115515:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115518:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011551b:	8b 40 60             	mov    0x60(%eax),%eax
f011551e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115521:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115524:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115527:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011552e:	75 70 20 
f0115531:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115538:	00 00 00 
f011553b:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011553e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115543:	b8 00 00 00 00       	mov    $0x0,%eax
f0115548:	89 d7                	mov    %edx,%edi
f011554a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011554c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011554f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115552:	83 ec 08             	sub    $0x8,%esp
f0115555:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011555b:	52                   	push   %edx
f011555c:	50                   	push   %eax
f011555d:	e8 e7 c4 01 00       	call   f0131a49 <ltostr>
f0115562:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115565:	83 ec 04             	sub    $0x4,%esp
f0115568:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011556e:	50                   	push   %eax
f011556f:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115575:	50                   	push   %eax
f0115576:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011557c:	50                   	push   %eax
f011557d:	e8 bf c5 01 00       	call   f0131b41 <strcconcat>
f0115582:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115585:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011558c:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115593:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f011559a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f011559e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01155a5:	00 00 00 
	uint32 num_tables = 0;
f01155a8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01155af:	00 00 00 
	ClearUserSpace(proc_directory);
f01155b2:	83 ec 0c             	sub    $0xc,%esp
f01155b5:	ff 75 d8             	pushl  -0x28(%ebp)
f01155b8:	e8 8d 0e 00 00       	call   f011644a <ClearUserSpace>
f01155bd:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01155c0:	83 ec 0c             	sub    $0xc,%esp
f01155c3:	68 c4 aa 13 f0       	push   $0xf013aac4
f01155c8:	e8 41 b7 fe ff       	call   f0100d0e <cprintf>
f01155cd:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01155d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155d3:	c1 e0 03             	shl    $0x3,%eax
f01155d6:	89 c2                	mov    %eax,%edx
f01155d8:	83 ec 0c             	sub    $0xc,%esp
f01155db:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01155e1:	50                   	push   %eax
f01155e2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01155e8:	50                   	push   %eax
f01155e9:	52                   	push   %edx
f01155ea:	6a 00                	push   $0x0
f01155ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01155ef:	e8 61 39 ff ff       	call   f0108f55 <calculate_allocated_space>
f01155f4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01155f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155fd:	85 c0                	test   %eax,%eax
f01155ff:	74 27                	je     f0115628 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115601:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115607:	83 ec 0c             	sub    $0xc,%esp
f011560a:	6a 00                	push   $0x0
f011560c:	50                   	push   %eax
f011560d:	68 30 ac 13 f0       	push   $0xf013ac30
f0115612:	68 94 06 00 00       	push   $0x694
f0115617:	68 fe 8e 13 f0       	push   $0xf0138efe
f011561c:	e8 f2 ad fe ff       	call   f0100413 <_warn>
f0115621:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115624:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115628:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011562e:	85 c0                	test   %eax,%eax
f0115630:	74 27                	je     f0115659 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115632:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115638:	83 ec 0c             	sub    $0xc,%esp
f011563b:	6a 00                	push   $0x0
f011563d:	50                   	push   %eax
f011563e:	68 90 ac 13 f0       	push   $0xf013ac90
f0115643:	68 99 06 00 00       	push   $0x699
f0115648:	68 fe 8e 13 f0       	push   $0xf0138efe
f011564d:	e8 c1 ad fe ff       	call   f0100413 <_warn>
f0115652:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115655:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115659:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011565d:	74 04                	je     f0115663 <test_calculate_allocated_space+0x198>
f011565f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115663:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115667:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011566e:	00 00 00 
		num_pages = 0;
f0115671:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115678:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f011567b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011567e:	c1 e0 02             	shl    $0x2,%eax
f0115681:	89 c2                	mov    %eax,%edx
f0115683:	83 ec 0c             	sub    $0xc,%esp
f0115686:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011568c:	50                   	push   %eax
f011568d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115693:	50                   	push   %eax
f0115694:	52                   	push   %edx
f0115695:	6a 00                	push   $0x0
f0115697:	ff 75 d8             	pushl  -0x28(%ebp)
f011569a:	e8 b6 38 ff ff       	call   f0108f55 <calculate_allocated_space>
f011569f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01156a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156a8:	85 c0                	test   %eax,%eax
f01156aa:	74 27                	je     f01156d3 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01156ac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156b2:	83 ec 0c             	sub    $0xc,%esp
f01156b5:	6a 00                	push   $0x0
f01156b7:	50                   	push   %eax
f01156b8:	68 30 ac 13 f0       	push   $0xf013ac30
f01156bd:	68 a5 06 00 00       	push   $0x6a5
f01156c2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01156c7:	e8 47 ad fe ff       	call   f0100413 <_warn>
f01156cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156cf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01156d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156d9:	85 c0                	test   %eax,%eax
f01156db:	74 27                	je     f0115704 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01156dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156e3:	83 ec 0c             	sub    $0xc,%esp
f01156e6:	6a 00                	push   $0x0
f01156e8:	50                   	push   %eax
f01156e9:	68 90 ac 13 f0       	push   $0xf013ac90
f01156ee:	68 aa 06 00 00       	push   $0x6aa
f01156f3:	68 fe 8e 13 f0       	push   $0xf0138efe
f01156f8:	e8 16 ad fe ff       	call   f0100413 <_warn>
f01156fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115700:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115704:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115708:	74 04                	je     f011570e <test_calculate_allocated_space+0x243>
f011570a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011570e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115712:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115719:	00 00 00 
		num_pages = 0;
f011571c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115723:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115726:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115729:	c1 e0 0a             	shl    $0xa,%eax
f011572c:	89 c2                	mov    %eax,%edx
f011572e:	83 ec 0c             	sub    $0xc,%esp
f0115731:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115737:	50                   	push   %eax
f0115738:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011573e:	50                   	push   %eax
f011573f:	52                   	push   %edx
f0115740:	6a 00                	push   $0x0
f0115742:	ff 75 d8             	pushl  -0x28(%ebp)
f0115745:	e8 0b 38 ff ff       	call   f0108f55 <calculate_allocated_space>
f011574a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011574d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115753:	85 c0                	test   %eax,%eax
f0115755:	74 27                	je     f011577e <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115757:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011575d:	83 ec 0c             	sub    $0xc,%esp
f0115760:	6a 00                	push   $0x0
f0115762:	50                   	push   %eax
f0115763:	68 30 ac 13 f0       	push   $0xf013ac30
f0115768:	68 b6 06 00 00       	push   $0x6b6
f011576d:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115772:	e8 9c ac fe ff       	call   f0100413 <_warn>
f0115777:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011577a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011577e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115784:	85 c0                	test   %eax,%eax
f0115786:	74 27                	je     f01157af <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115788:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011578e:	83 ec 0c             	sub    $0xc,%esp
f0115791:	6a 00                	push   $0x0
f0115793:	50                   	push   %eax
f0115794:	68 90 ac 13 f0       	push   $0xf013ac90
f0115799:	68 bb 06 00 00       	push   $0x6bb
f011579e:	68 fe 8e 13 f0       	push   $0xf0138efe
f01157a3:	e8 6b ac fe ff       	call   f0100413 <_warn>
f01157a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157b3:	74 04                	je     f01157b9 <test_calculate_allocated_space+0x2ee>
f01157b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01157bd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01157c4:	00 00 00 
		num_pages = 0;
f01157c7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01157ce:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01157d1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01157d4:	89 d0                	mov    %edx,%eax
f01157d6:	01 c0                	add    %eax,%eax
f01157d8:	01 d0                	add    %edx,%eax
f01157da:	01 c0                	add    %eax,%eax
f01157dc:	05 00 10 00 00       	add    $0x1000,%eax
f01157e1:	89 c2                	mov    %eax,%edx
f01157e3:	83 ec 0c             	sub    $0xc,%esp
f01157e6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157ec:	50                   	push   %eax
f01157ed:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157f3:	50                   	push   %eax
f01157f4:	52                   	push   %edx
f01157f5:	68 00 10 00 00       	push   $0x1000
f01157fa:	ff 75 d8             	pushl  -0x28(%ebp)
f01157fd:	e8 53 37 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115802:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115805:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011580b:	85 c0                	test   %eax,%eax
f011580d:	74 27                	je     f0115836 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011580f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115815:	83 ec 0c             	sub    $0xc,%esp
f0115818:	6a 00                	push   $0x0
f011581a:	50                   	push   %eax
f011581b:	68 30 ac 13 f0       	push   $0xf013ac30
f0115820:	68 c8 06 00 00       	push   $0x6c8
f0115825:	68 fe 8e 13 f0       	push   $0xf0138efe
f011582a:	e8 e4 ab fe ff       	call   f0100413 <_warn>
f011582f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115832:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115836:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011583c:	85 c0                	test   %eax,%eax
f011583e:	74 27                	je     f0115867 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115840:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115846:	83 ec 0c             	sub    $0xc,%esp
f0115849:	6a 00                	push   $0x0
f011584b:	50                   	push   %eax
f011584c:	68 90 ac 13 f0       	push   $0xf013ac90
f0115851:	68 cd 06 00 00       	push   $0x6cd
f0115856:	68 fe 8e 13 f0       	push   $0xf0138efe
f011585b:	e8 b3 ab fe ff       	call   f0100413 <_warn>
f0115860:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115863:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115867:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011586b:	74 04                	je     f0115871 <test_calculate_allocated_space+0x3a6>
f011586d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115871:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115875:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011587c:	00 00 00 
		num_pages = 0;
f011587f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115886:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115889:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011588c:	89 c2                	mov    %eax,%edx
f011588e:	01 d2                	add    %edx,%edx
f0115890:	01 d0                	add    %edx,%eax
f0115892:	05 00 18 00 00       	add    $0x1800,%eax
f0115897:	89 c2                	mov    %eax,%edx
f0115899:	83 ec 0c             	sub    $0xc,%esp
f011589c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158a2:	50                   	push   %eax
f01158a3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158a9:	50                   	push   %eax
f01158aa:	52                   	push   %edx
f01158ab:	68 00 18 00 00       	push   $0x1800
f01158b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01158b3:	e8 9d 36 ff ff       	call   f0108f55 <calculate_allocated_space>
f01158b8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01158bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158c1:	85 c0                	test   %eax,%eax
f01158c3:	74 27                	je     f01158ec <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01158c5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158cb:	83 ec 0c             	sub    $0xc,%esp
f01158ce:	6a 00                	push   $0x0
f01158d0:	50                   	push   %eax
f01158d1:	68 30 ac 13 f0       	push   $0xf013ac30
f01158d6:	68 d9 06 00 00       	push   $0x6d9
f01158db:	68 fe 8e 13 f0       	push   $0xf0138efe
f01158e0:	e8 2e ab fe ff       	call   f0100413 <_warn>
f01158e5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01158ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158f2:	85 c0                	test   %eax,%eax
f01158f4:	74 27                	je     f011591d <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01158f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158fc:	83 ec 0c             	sub    $0xc,%esp
f01158ff:	6a 00                	push   $0x0
f0115901:	50                   	push   %eax
f0115902:	68 90 ac 13 f0       	push   $0xf013ac90
f0115907:	68 de 06 00 00       	push   $0x6de
f011590c:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115911:	e8 fd aa fe ff       	call   f0100413 <_warn>
f0115916:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115919:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011591d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115921:	74 04                	je     f0115927 <test_calculate_allocated_space+0x45c>
f0115923:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115927:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f011592b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115932:	00 00 00 
		num_pages = 0;
f0115935:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011593c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011593f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115942:	89 d0                	mov    %edx,%eax
f0115944:	c1 e0 02             	shl    $0x2,%eax
f0115947:	01 d0                	add    %edx,%eax
f0115949:	01 c0                	add    %eax,%eax
f011594b:	05 00 00 40 00       	add    $0x400000,%eax
f0115950:	89 c2                	mov    %eax,%edx
f0115952:	83 ec 0c             	sub    $0xc,%esp
f0115955:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011595b:	50                   	push   %eax
f011595c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115962:	50                   	push   %eax
f0115963:	52                   	push   %edx
f0115964:	68 00 00 40 00       	push   $0x400000
f0115969:	ff 75 d8             	pushl  -0x28(%ebp)
f011596c:	e8 e4 35 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115971:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115974:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011597a:	85 c0                	test   %eax,%eax
f011597c:	74 27                	je     f01159a5 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011597e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115984:	83 ec 0c             	sub    $0xc,%esp
f0115987:	6a 00                	push   $0x0
f0115989:	50                   	push   %eax
f011598a:	68 30 ac 13 f0       	push   $0xf013ac30
f011598f:	68 ea 06 00 00       	push   $0x6ea
f0115994:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115999:	e8 75 aa fe ff       	call   f0100413 <_warn>
f011599e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01159a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159ab:	85 c0                	test   %eax,%eax
f01159ad:	74 27                	je     f01159d6 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01159af:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159b5:	83 ec 0c             	sub    $0xc,%esp
f01159b8:	6a 00                	push   $0x0
f01159ba:	50                   	push   %eax
f01159bb:	68 90 ac 13 f0       	push   $0xf013ac90
f01159c0:	68 ef 06 00 00       	push   $0x6ef
f01159c5:	68 fe 8e 13 f0       	push   $0xf0138efe
f01159ca:	e8 44 aa fe ff       	call   f0100413 <_warn>
f01159cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159da:	74 04                	je     f01159e0 <test_calculate_allocated_space+0x515>
f01159dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159e0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01159e4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159eb:	00 00 00 
		num_pages = 0;
f01159ee:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159f5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01159f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159fb:	05 00 00 38 00       	add    $0x380000,%eax
f0115a00:	01 c0                	add    %eax,%eax
f0115a02:	89 c2                	mov    %eax,%edx
f0115a04:	83 ec 0c             	sub    $0xc,%esp
f0115a07:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a0d:	50                   	push   %eax
f0115a0e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a14:	50                   	push   %eax
f0115a15:	52                   	push   %edx
f0115a16:	68 00 00 70 00       	push   $0x700000
f0115a1b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a1e:	e8 32 35 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115a23:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a26:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a2c:	85 c0                	test   %eax,%eax
f0115a2e:	74 27                	je     f0115a57 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a30:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a36:	83 ec 0c             	sub    $0xc,%esp
f0115a39:	6a 00                	push   $0x0
f0115a3b:	50                   	push   %eax
f0115a3c:	68 30 ac 13 f0       	push   $0xf013ac30
f0115a41:	68 fc 06 00 00       	push   $0x6fc
f0115a46:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115a4b:	e8 c3 a9 fe ff       	call   f0100413 <_warn>
f0115a50:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a53:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a57:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a5d:	85 c0                	test   %eax,%eax
f0115a5f:	74 27                	je     f0115a88 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a67:	83 ec 0c             	sub    $0xc,%esp
f0115a6a:	6a 00                	push   $0x0
f0115a6c:	50                   	push   %eax
f0115a6d:	68 90 ac 13 f0       	push   $0xf013ac90
f0115a72:	68 01 07 00 00       	push   $0x701
f0115a77:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115a7c:	e8 92 a9 fe ff       	call   f0100413 <_warn>
f0115a81:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a84:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a88:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a8c:	74 04                	je     f0115a92 <test_calculate_allocated_space+0x5c7>
f0115a8e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a92:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115a96:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a9d:	00 00 00 
		num_pages = 0;
f0115aa0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115aa7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115aaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115aad:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115ab2:	89 c2                	mov    %eax,%edx
f0115ab4:	83 ec 0c             	sub    $0xc,%esp
f0115ab7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115abd:	50                   	push   %eax
f0115abe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ac4:	50                   	push   %eax
f0115ac5:	52                   	push   %edx
f0115ac6:	68 ff ff 3f 00       	push   $0x3fffff
f0115acb:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ace:	e8 82 34 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115ad3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ad6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115adc:	85 c0                	test   %eax,%eax
f0115ade:	74 27                	je     f0115b07 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ae0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ae6:	83 ec 0c             	sub    $0xc,%esp
f0115ae9:	6a 00                	push   $0x0
f0115aeb:	50                   	push   %eax
f0115aec:	68 30 ac 13 f0       	push   $0xf013ac30
f0115af1:	68 0d 07 00 00       	push   $0x70d
f0115af6:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115afb:	e8 13 a9 fe ff       	call   f0100413 <_warn>
f0115b00:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b03:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b07:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b0d:	85 c0                	test   %eax,%eax
f0115b0f:	74 27                	je     f0115b38 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b17:	83 ec 0c             	sub    $0xc,%esp
f0115b1a:	6a 00                	push   $0x0
f0115b1c:	50                   	push   %eax
f0115b1d:	68 90 ac 13 f0       	push   $0xf013ac90
f0115b22:	68 12 07 00 00       	push   $0x712
f0115b27:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115b2c:	e8 e2 a8 fe ff       	call   f0100413 <_warn>
f0115b31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b3c:	74 04                	je     f0115b42 <test_calculate_allocated_space+0x677>
f0115b3e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115b46:	83 ec 0c             	sub    $0xc,%esp
f0115b49:	68 49 a6 13 f0       	push   $0xf013a649
f0115b4e:	e8 bb b1 fe ff       	call   f0100d0e <cprintf>
f0115b53:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115b56:	83 ec 0c             	sub    $0xc,%esp
f0115b59:	68 50 ab 13 f0       	push   $0xf013ab50
f0115b5e:	e8 ab b1 fe ff       	call   f0100d0e <cprintf>
f0115b63:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115b66:	83 ec 04             	sub    $0x4,%esp
f0115b69:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115b6f:	50                   	push   %eax
f0115b70:	68 02 9a 13 f0       	push   $0xf0139a02
f0115b75:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b7b:	50                   	push   %eax
f0115b7c:	e8 c0 bf 01 00       	call   f0131b41 <strcconcat>
f0115b81:	83 c4 10             	add    $0x10,%esp
f0115b84:	83 ec 0c             	sub    $0xc,%esp
f0115b87:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115b8d:	50                   	push   %eax
f0115b8e:	e8 dd b1 fe ff       	call   f0100d70 <execute_command>
f0115b93:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115b96:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b9d:	00 00 00 
		num_pages = 0;
f0115ba0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ba7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115baa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115bad:	c1 e0 03             	shl    $0x3,%eax
f0115bb0:	89 c2                	mov    %eax,%edx
f0115bb2:	83 ec 0c             	sub    $0xc,%esp
f0115bb5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bbb:	50                   	push   %eax
f0115bbc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bc2:	50                   	push   %eax
f0115bc3:	52                   	push   %edx
f0115bc4:	6a 00                	push   $0x0
f0115bc6:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bc9:	e8 87 33 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115bce:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115bd1:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115bd8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115bdf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115be5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115be8:	74 28                	je     f0115c12 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115bea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bf0:	83 ec 0c             	sub    $0xc,%esp
f0115bf3:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bf6:	50                   	push   %eax
f0115bf7:	68 30 ac 13 f0       	push   $0xf013ac30
f0115bfc:	68 29 07 00 00       	push   $0x729
f0115c01:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115c06:	e8 08 a8 fe ff       	call   f0100413 <_warn>
f0115c0b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c0e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c12:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c18:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c1b:	74 28                	je     f0115c45 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c23:	83 ec 0c             	sub    $0xc,%esp
f0115c26:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c29:	50                   	push   %eax
f0115c2a:	68 90 ac 13 f0       	push   $0xf013ac90
f0115c2f:	68 2e 07 00 00       	push   $0x72e
f0115c34:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115c39:	e8 d5 a7 fe ff       	call   f0100413 <_warn>
f0115c3e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c41:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c45:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c49:	74 04                	je     f0115c4f <test_calculate_allocated_space+0x784>
f0115c4b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c4f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115c53:	83 ec 04             	sub    $0x4,%esp
f0115c56:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c5c:	50                   	push   %eax
f0115c5d:	68 0f 9a 13 f0       	push   $0xf0139a0f
f0115c62:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c68:	50                   	push   %eax
f0115c69:	e8 d3 be 01 00       	call   f0131b41 <strcconcat>
f0115c6e:	83 c4 10             	add    $0x10,%esp
f0115c71:	83 ec 0c             	sub    $0xc,%esp
f0115c74:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c7a:	50                   	push   %eax
f0115c7b:	e8 f0 b0 fe ff       	call   f0100d70 <execute_command>
f0115c80:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115c83:	83 ec 04             	sub    $0x4,%esp
f0115c86:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115c8c:	50                   	push   %eax
f0115c8d:	68 84 ab 13 f0       	push   $0xf013ab84
f0115c92:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c98:	50                   	push   %eax
f0115c99:	e8 a3 be 01 00       	call   f0131b41 <strcconcat>
f0115c9e:	83 c4 10             	add    $0x10,%esp
f0115ca1:	83 ec 0c             	sub    $0xc,%esp
f0115ca4:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115caa:	50                   	push   %eax
f0115cab:	e8 c0 b0 fe ff       	call   f0100d70 <execute_command>
f0115cb0:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115cb3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cba:	00 00 00 
		num_pages = 0;
f0115cbd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115cc4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115cc7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115cca:	c1 e0 03             	shl    $0x3,%eax
f0115ccd:	89 c2                	mov    %eax,%edx
f0115ccf:	83 ec 0c             	sub    $0xc,%esp
f0115cd2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cd8:	50                   	push   %eax
f0115cd9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cdf:	50                   	push   %eax
f0115ce0:	52                   	push   %edx
f0115ce1:	6a 00                	push   $0x0
f0115ce3:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ce6:	e8 6a 32 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115ceb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115cee:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115cf5:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115cfc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d02:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d05:	74 28                	je     f0115d2f <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d07:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d0d:	83 ec 0c             	sub    $0xc,%esp
f0115d10:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d13:	50                   	push   %eax
f0115d14:	68 30 ac 13 f0       	push   $0xf013ac30
f0115d19:	68 3f 07 00 00       	push   $0x73f
f0115d1e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115d23:	e8 eb a6 fe ff       	call   f0100413 <_warn>
f0115d28:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d2b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d2f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d35:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d38:	74 28                	je     f0115d62 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d3a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d40:	83 ec 0c             	sub    $0xc,%esp
f0115d43:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d46:	50                   	push   %eax
f0115d47:	68 90 ac 13 f0       	push   $0xf013ac90
f0115d4c:	68 44 07 00 00       	push   $0x744
f0115d51:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115d56:	e8 b8 a6 fe ff       	call   f0100413 <_warn>
f0115d5b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d5e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d62:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d66:	74 04                	je     f0115d6c <test_calculate_allocated_space+0x8a1>
f0115d68:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d6c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115d70:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d77:	00 00 00 
		num_pages = 0;
f0115d7a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d81:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115d84:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d87:	c1 e0 0a             	shl    $0xa,%eax
f0115d8a:	89 c2                	mov    %eax,%edx
f0115d8c:	83 ec 0c             	sub    $0xc,%esp
f0115d8f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d95:	50                   	push   %eax
f0115d96:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d9c:	50                   	push   %eax
f0115d9d:	52                   	push   %edx
f0115d9e:	6a 00                	push   $0x0
f0115da0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115da3:	e8 ad 31 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115da8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115dab:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115db2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115db9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dbf:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115dc2:	74 28                	je     f0115dec <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115dc4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dca:	83 ec 0c             	sub    $0xc,%esp
f0115dcd:	ff 75 c8             	pushl  -0x38(%ebp)
f0115dd0:	50                   	push   %eax
f0115dd1:	68 30 ac 13 f0       	push   $0xf013ac30
f0115dd6:	68 52 07 00 00       	push   $0x752
f0115ddb:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115de0:	e8 2e a6 fe ff       	call   f0100413 <_warn>
f0115de5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115de8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115dec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115df2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115df5:	74 28                	je     f0115e1f <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115df7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dfd:	83 ec 0c             	sub    $0xc,%esp
f0115e00:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e03:	50                   	push   %eax
f0115e04:	68 90 ac 13 f0       	push   $0xf013ac90
f0115e09:	68 57 07 00 00       	push   $0x757
f0115e0e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115e13:	e8 fb a5 fe ff       	call   f0100413 <_warn>
f0115e18:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e1b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e1f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e23:	74 04                	je     f0115e29 <test_calculate_allocated_space+0x95e>
f0115e25:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e29:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115e2d:	83 ec 04             	sub    $0x4,%esp
f0115e30:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e36:	50                   	push   %eax
f0115e37:	68 90 ab 13 f0       	push   $0xf013ab90
f0115e3c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e42:	50                   	push   %eax
f0115e43:	e8 f9 bc 01 00       	call   f0131b41 <strcconcat>
f0115e48:	83 c4 10             	add    $0x10,%esp
f0115e4b:	83 ec 0c             	sub    $0xc,%esp
f0115e4e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e54:	50                   	push   %eax
f0115e55:	e8 16 af fe ff       	call   f0100d70 <execute_command>
f0115e5a:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115e5d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e64:	00 00 00 
		num_pages = 0;
f0115e67:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e6e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115e71:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e74:	89 c2                	mov    %eax,%edx
f0115e76:	01 d2                	add    %edx,%edx
f0115e78:	01 d0                	add    %edx,%eax
f0115e7a:	05 00 18 00 00       	add    $0x1800,%eax
f0115e7f:	89 c2                	mov    %eax,%edx
f0115e81:	83 ec 0c             	sub    $0xc,%esp
f0115e84:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e8a:	50                   	push   %eax
f0115e8b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e91:	50                   	push   %eax
f0115e92:	52                   	push   %edx
f0115e93:	68 00 18 00 00       	push   $0x1800
f0115e98:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e9b:	e8 b5 30 ff ff       	call   f0108f55 <calculate_allocated_space>
f0115ea0:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115ea3:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115eaa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115eb1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115eb7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115eba:	74 28                	je     f0115ee4 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ebc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ec2:	83 ec 0c             	sub    $0xc,%esp
f0115ec5:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ec8:	50                   	push   %eax
f0115ec9:	68 30 ac 13 f0       	push   $0xf013ac30
f0115ece:	68 68 07 00 00       	push   $0x768
f0115ed3:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115ed8:	e8 36 a5 fe ff       	call   f0100413 <_warn>
f0115edd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ee0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ee4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eea:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115eed:	74 28                	je     f0115f17 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115eef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ef5:	83 ec 0c             	sub    $0xc,%esp
f0115ef8:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115efb:	50                   	push   %eax
f0115efc:	68 90 ac 13 f0       	push   $0xf013ac90
f0115f01:	68 6d 07 00 00       	push   $0x76d
f0115f06:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115f0b:	e8 03 a5 fe ff       	call   f0100413 <_warn>
f0115f10:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f13:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f17:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f1b:	74 04                	je     f0115f21 <test_calculate_allocated_space+0xa56>
f0115f1d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f21:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115f25:	83 ec 04             	sub    $0x4,%esp
f0115f28:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f2e:	50                   	push   %eax
f0115f2f:	68 68 9c 13 f0       	push   $0xf0139c68
f0115f34:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f3a:	50                   	push   %eax
f0115f3b:	e8 01 bc 01 00       	call   f0131b41 <strcconcat>
f0115f40:	83 c4 10             	add    $0x10,%esp
f0115f43:	83 ec 0c             	sub    $0xc,%esp
f0115f46:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f4c:	50                   	push   %eax
f0115f4d:	e8 1e ae fe ff       	call   f0100d70 <execute_command>
f0115f52:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115f55:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f5c:	00 00 00 
		num_pages = 0;
f0115f5f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f66:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115f69:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115f6c:	89 d0                	mov    %edx,%eax
f0115f6e:	c1 e0 02             	shl    $0x2,%eax
f0115f71:	01 d0                	add    %edx,%eax
f0115f73:	01 c0                	add    %eax,%eax
f0115f75:	05 00 00 40 00       	add    $0x400000,%eax
f0115f7a:	89 c2                	mov    %eax,%edx
f0115f7c:	83 ec 0c             	sub    $0xc,%esp
f0115f7f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f85:	50                   	push   %eax
f0115f86:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f8c:	50                   	push   %eax
f0115f8d:	52                   	push   %edx
f0115f8e:	68 00 00 40 00       	push   $0x400000
f0115f93:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f96:	e8 ba 2f ff ff       	call   f0108f55 <calculate_allocated_space>
f0115f9b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115f9e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115fa5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115fac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fb2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115fb5:	74 28                	je     f0115fdf <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115fb7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fbd:	83 ec 0c             	sub    $0xc,%esp
f0115fc0:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fc3:	50                   	push   %eax
f0115fc4:	68 30 ac 13 f0       	push   $0xf013ac30
f0115fc9:	68 7d 07 00 00       	push   $0x77d
f0115fce:	68 fe 8e 13 f0       	push   $0xf0138efe
f0115fd3:	e8 3b a4 fe ff       	call   f0100413 <_warn>
f0115fd8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fdb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115fdf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fe5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115fe8:	74 28                	je     f0116012 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115fea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ff0:	83 ec 0c             	sub    $0xc,%esp
f0115ff3:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ff6:	50                   	push   %eax
f0115ff7:	68 90 ac 13 f0       	push   $0xf013ac90
f0115ffc:	68 82 07 00 00       	push   $0x782
f0116001:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116006:	e8 08 a4 fe ff       	call   f0100413 <_warn>
f011600b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011600e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116012:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116016:	74 04                	je     f011601c <test_calculate_allocated_space+0xb51>
f0116018:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011601c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116020:	83 ec 04             	sub    $0x4,%esp
f0116023:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116029:	50                   	push   %eax
f011602a:	68 72 9c 13 f0       	push   $0xf0139c72
f011602f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116035:	50                   	push   %eax
f0116036:	e8 06 bb 01 00       	call   f0131b41 <strcconcat>
f011603b:	83 c4 10             	add    $0x10,%esp
f011603e:	83 ec 0c             	sub    $0xc,%esp
f0116041:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116047:	50                   	push   %eax
f0116048:	e8 23 ad fe ff       	call   f0100d70 <execute_command>
f011604d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116050:	83 ec 04             	sub    $0x4,%esp
f0116053:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116059:	50                   	push   %eax
f011605a:	68 98 ab 13 f0       	push   $0xf013ab98
f011605f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116065:	50                   	push   %eax
f0116066:	e8 d6 ba 01 00       	call   f0131b41 <strcconcat>
f011606b:	83 c4 10             	add    $0x10,%esp
f011606e:	83 ec 0c             	sub    $0xc,%esp
f0116071:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116077:	50                   	push   %eax
f0116078:	e8 f3 ac fe ff       	call   f0100d70 <execute_command>
f011607d:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116080:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116087:	00 00 00 
		num_pages = 0;
f011608a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116091:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0116094:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116097:	05 00 00 38 00       	add    $0x380000,%eax
f011609c:	01 c0                	add    %eax,%eax
f011609e:	89 c2                	mov    %eax,%edx
f01160a0:	83 ec 0c             	sub    $0xc,%esp
f01160a3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160a9:	50                   	push   %eax
f01160aa:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160b0:	50                   	push   %eax
f01160b1:	52                   	push   %edx
f01160b2:	68 00 00 70 00       	push   $0x700000
f01160b7:	ff 75 d8             	pushl  -0x28(%ebp)
f01160ba:	e8 96 2e ff ff       	call   f0108f55 <calculate_allocated_space>
f01160bf:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01160c2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01160c9:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160d0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160d6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01160d9:	74 28                	je     f0116103 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01160db:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160e1:	83 ec 0c             	sub    $0xc,%esp
f01160e4:	ff 75 c8             	pushl  -0x38(%ebp)
f01160e7:	50                   	push   %eax
f01160e8:	68 30 ac 13 f0       	push   $0xf013ac30
f01160ed:	68 94 07 00 00       	push   $0x794
f01160f2:	68 fe 8e 13 f0       	push   $0xf0138efe
f01160f7:	e8 17 a3 fe ff       	call   f0100413 <_warn>
f01160fc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116103:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116109:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011610c:	74 28                	je     f0116136 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011610e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116114:	83 ec 0c             	sub    $0xc,%esp
f0116117:	ff 75 c4             	pushl  -0x3c(%ebp)
f011611a:	50                   	push   %eax
f011611b:	68 90 ac 13 f0       	push   $0xf013ac90
f0116120:	68 99 07 00 00       	push   $0x799
f0116125:	68 fe 8e 13 f0       	push   $0xf0138efe
f011612a:	e8 e4 a2 fe ff       	call   f0100413 <_warn>
f011612f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116132:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116136:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011613a:	74 04                	je     f0116140 <test_calculate_allocated_space+0xc75>
f011613c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116140:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116144:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011614b:	00 00 00 
		num_pages = 0;
f011614e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116155:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116158:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011615b:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116160:	89 c2                	mov    %eax,%edx
f0116162:	83 ec 0c             	sub    $0xc,%esp
f0116165:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011616b:	50                   	push   %eax
f011616c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116172:	50                   	push   %eax
f0116173:	52                   	push   %edx
f0116174:	68 ff ff 3f 00       	push   $0x3fffff
f0116179:	ff 75 d8             	pushl  -0x28(%ebp)
f011617c:	e8 d4 2d ff ff       	call   f0108f55 <calculate_allocated_space>
f0116181:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116184:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f011618b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116192:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116198:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011619b:	74 28                	je     f01161c5 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011619d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161a3:	83 ec 0c             	sub    $0xc,%esp
f01161a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01161a9:	50                   	push   %eax
f01161aa:	68 30 ac 13 f0       	push   $0xf013ac30
f01161af:	68 a7 07 00 00       	push   $0x7a7
f01161b4:	68 fe 8e 13 f0       	push   $0xf0138efe
f01161b9:	e8 55 a2 fe ff       	call   f0100413 <_warn>
f01161be:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161c1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01161c5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161cb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01161ce:	74 28                	je     f01161f8 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01161d0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161d6:	83 ec 0c             	sub    $0xc,%esp
f01161d9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161dc:	50                   	push   %eax
f01161dd:	68 90 ac 13 f0       	push   $0xf013ac90
f01161e2:	68 ac 07 00 00       	push   $0x7ac
f01161e7:	68 fe 8e 13 f0       	push   $0xf0138efe
f01161ec:	e8 22 a2 fe ff       	call   f0100413 <_warn>
f01161f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01161f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161fc:	74 04                	je     f0116202 <test_calculate_allocated_space+0xd37>
f01161fe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116202:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116206:	83 ec 0c             	sub    $0xc,%esp
f0116209:	68 23 9c 13 f0       	push   $0xf0139c23
f011620e:	e8 fb aa fe ff       	call   f0100d0e <cprintf>
f0116213:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116216:	83 ec 08             	sub    $0x8,%esp
f0116219:	ff 75 e4             	pushl  -0x1c(%ebp)
f011621c:	68 ec ac 13 f0       	push   $0xf013acec
f0116221:	e8 e8 aa fe ff       	call   f0100d0e <cprintf>
f0116226:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116229:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011622d:	75 10                	jne    f011623f <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011622f:	83 ec 0c             	sub    $0xc,%esp
f0116232:	68 2c ad 13 f0       	push   $0xf013ad2c
f0116237:	e8 d2 aa fe ff       	call   f0100d0e <cprintf>
f011623c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011623f:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0116244:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116247:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011624a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011624d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116252:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116255:	5b                   	pop    %ebx
f0116256:	5e                   	pop    %esi
f0116257:	5f                   	pop    %edi
f0116258:	5d                   	pop    %ebp
f0116259:	c3                   	ret    

f011625a <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011625a:	55                   	push   %ebp
f011625b:	89 e5                	mov    %esp,%ebp
f011625d:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116260:	8b 45 10             	mov    0x10(%ebp),%eax
f0116263:	ba 01 00 00 00       	mov    $0x1,%edx
f0116268:	88 c1                	mov    %al,%cl
f011626a:	d3 e2                	shl    %cl,%edx
f011626c:	89 d0                	mov    %edx,%eax
f011626e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116271:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116274:	c1 e8 16             	shr    $0x16,%eax
f0116277:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011627e:	8b 45 08             	mov    0x8(%ebp),%eax
f0116281:	01 d0                	add    %edx,%eax
f0116283:	8b 00                	mov    (%eax),%eax
f0116285:	83 e0 01             	and    $0x1,%eax
f0116288:	85 c0                	test   %eax,%eax
f011628a:	75 07                	jne    f0116293 <CB+0x39>
f011628c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116291:	eb 76                	jmp    f0116309 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116293:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116296:	c1 e8 16             	shr    $0x16,%eax
f0116299:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01162a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01162a3:	01 d0                	add    %edx,%eax
f01162a5:	8b 00                	mov    (%eax),%eax
f01162a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01162ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01162af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01162b2:	c1 e8 0c             	shr    $0xc,%eax
f01162b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01162b8:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01162bd:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01162c0:	72 17                	jb     f01162d9 <CB+0x7f>
f01162c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01162c5:	68 78 ad 13 f0       	push   $0xf013ad78
f01162ca:	68 c7 07 00 00       	push   $0x7c7
f01162cf:	68 fe 8e 13 f0       	push   $0xf0138efe
f01162d4:	e8 2c 9f fe ff       	call   f0100205 <_panic>
f01162d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01162dc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01162e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01162e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162e7:	c1 e8 0c             	shr    $0xc,%eax
f01162ea:	25 ff 03 00 00       	and    $0x3ff,%eax
f01162ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01162f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01162f9:	01 d0                	add    %edx,%eax
f01162fb:	8b 00                	mov    (%eax),%eax
f01162fd:	23 45 f4             	and    -0xc(%ebp),%eax
f0116300:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116303:	0f 94 c0             	sete   %al
f0116306:	0f b6 c0             	movzbl %al,%eax
}
f0116309:	c9                   	leave  
f011630a:	c3                   	ret    

f011630b <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f011630b:	55                   	push   %ebp
f011630c:	89 e5                	mov    %esp,%ebp
f011630e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116311:	68 a7 ad 13 f0       	push   $0xf013ada7
f0116316:	68 b6 ad 13 f0       	push   $0xf013adb6
f011631b:	68 cc 07 00 00       	push   $0x7cc
f0116320:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116325:	e8 db 9e fe ff       	call   f0100205 <_panic>

f011632a <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011632a:	55                   	push   %ebp
f011632b:	89 e5                	mov    %esp,%ebp
f011632d:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116330:	68 a7 ad 13 f0       	push   $0xf013ada7
f0116335:	68 b6 ad 13 f0       	push   $0xf013adb6
f011633a:	68 d6 07 00 00       	push   $0x7d6
f011633f:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116344:	e8 bc 9e fe ff       	call   f0100205 <_panic>

f0116349 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116349:	55                   	push   %ebp
f011634a:	89 e5                	mov    %esp,%ebp
f011634c:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011634f:	68 a7 ad 13 f0       	push   $0xf013ada7
f0116354:	68 b6 ad 13 f0       	push   $0xf013adb6
f0116359:	68 e5 07 00 00       	push   $0x7e5
f011635e:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116363:	e8 9d 9e fe ff       	call   f0100205 <_panic>

f0116368 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0116368:	55                   	push   %ebp
f0116369:	89 e5                	mov    %esp,%ebp
f011636b:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011636e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116371:	c1 e8 16             	shr    $0x16,%eax
f0116374:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011637b:	8b 45 08             	mov    0x8(%ebp),%eax
f011637e:	01 d0                	add    %edx,%eax
f0116380:	8b 00                	mov    (%eax),%eax
f0116382:	83 e0 01             	and    $0x1,%eax
f0116385:	85 c0                	test   %eax,%eax
f0116387:	75 07                	jne    f0116390 <CE+0x28>
f0116389:	b8 00 00 00 00       	mov    $0x0,%eax
f011638e:	eb 7a                	jmp    f011640a <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116390:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116393:	c1 e8 16             	shr    $0x16,%eax
f0116396:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011639d:	8b 45 08             	mov    0x8(%ebp),%eax
f01163a0:	01 d0                	add    %edx,%eax
f01163a2:	8b 00                	mov    (%eax),%eax
f01163a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01163a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01163ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01163af:	c1 e8 0c             	shr    $0xc,%eax
f01163b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01163b5:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01163ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01163bd:	72 17                	jb     f01163d6 <CE+0x6e>
f01163bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01163c2:	68 78 ad 13 f0       	push   $0xf013ad78
f01163c7:	68 ee 07 00 00       	push   $0x7ee
f01163cc:	68 fe 8e 13 f0       	push   $0xf0138efe
f01163d1:	e8 2f 9e fe ff       	call   f0100205 <_panic>
f01163d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01163d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01163de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01163e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163e4:	c1 e8 0c             	shr    $0xc,%eax
f01163e7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01163ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01163f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01163f6:	01 d0                	add    %edx,%eax
f01163f8:	8b 00                	mov    (%eax),%eax
f01163fa:	85 c0                	test   %eax,%eax
f01163fc:	74 07                	je     f0116405 <CE+0x9d>
f01163fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0116403:	eb 05                	jmp    f011640a <CE+0xa2>
	return 1;
f0116405:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011640a:	c9                   	leave  
f011640b:	c3                   	ret    

f011640c <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011640c:	55                   	push   %ebp
f011640d:	89 e5                	mov    %esp,%ebp
f011640f:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116412:	68 a7 ad 13 f0       	push   $0xf013ada7
f0116417:	68 b6 ad 13 f0       	push   $0xf013adb6
f011641c:	68 f5 07 00 00       	push   $0x7f5
f0116421:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116426:	e8 da 9d fe ff       	call   f0100205 <_panic>

f011642b <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011642b:	55                   	push   %ebp
f011642c:	89 e5                	mov    %esp,%ebp
f011642e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116431:	68 a7 ad 13 f0       	push   $0xf013ada7
f0116436:	68 b6 ad 13 f0       	push   $0xf013adb6
f011643b:	68 05 08 00 00       	push   $0x805
f0116440:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116445:	e8 bb 9d fe ff       	call   f0100205 <_panic>

f011644a <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f011644a:	55                   	push   %ebp
f011644b:	89 e5                	mov    %esp,%ebp
f011644d:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116450:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116457:	eb 18                	jmp    f0116471 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116459:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011645c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116463:	8b 45 08             	mov    0x8(%ebp),%eax
f0116466:	01 d0                	add    %edx,%eax
f0116468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011646e:	ff 45 fc             	incl   -0x4(%ebp)
f0116471:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116474:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116479:	76 de                	jbe    f0116459 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f011647b:	90                   	nop
f011647c:	c9                   	leave  
f011647d:	c3                   	ret    

f011647e <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f011647e:	55                   	push   %ebp
f011647f:	89 e5                	mov    %esp,%ebp
f0116481:	83 ec 38             	sub    $0x38,%esp
f0116484:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116487:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f011648a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011648d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116495:	8b 45 10             	mov    0x10(%ebp),%eax
f0116498:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011649d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01164a0:	e9 ea 01 00 00       	jmp    f011668f <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01164a5:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01164a9:	74 44                	je     f01164ef <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01164ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01164ae:	83 ec 04             	sub    $0x4,%esp
f01164b1:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01164b4:	52                   	push   %edx
f01164b5:	50                   	push   %eax
f01164b6:	ff 75 08             	pushl  0x8(%ebp)
f01164b9:	e8 48 09 ff ff       	call   f0106e06 <get_frame_info>
f01164be:	83 c4 10             	add    $0x10,%esp
f01164c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01164c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01164c7:	85 c0                	test   %eax,%eax
f01164c9:	75 24                	jne    f01164ef <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01164cb:	83 ec 04             	sub    $0x4,%esp
f01164ce:	68 cc ad 13 f0       	push   $0xf013adcc
f01164d3:	68 22 08 00 00       	push   $0x822
f01164d8:	68 fe 8e 13 f0       	push   $0xf0138efe
f01164dd:	e8 31 9f fe ff       	call   f0100413 <_warn>
f01164e2:	83 c4 10             	add    $0x10,%esp
				return 0;
f01164e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01164ea:	e9 b6 01 00 00       	jmp    f01166a5 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01164ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01164f2:	83 ec 04             	sub    $0x4,%esp
f01164f5:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01164f8:	52                   	push   %edx
f01164f9:	50                   	push   %eax
f01164fa:	ff 75 08             	pushl  0x8(%ebp)
f01164fd:	e8 04 09 ff ff       	call   f0106e06 <get_frame_info>
f0116502:	83 c4 10             	add    $0x10,%esp
f0116505:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116508:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011650b:	85 c0                	test   %eax,%eax
f011650d:	75 24                	jne    f0116533 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011650f:	83 ec 04             	sub    $0x4,%esp
f0116512:	68 f8 ad 13 f0       	push   $0xf013adf8
f0116517:	68 29 08 00 00       	push   $0x829
f011651c:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116521:	e8 ed 9e fe ff       	call   f0100413 <_warn>
f0116526:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116529:	b8 00 00 00 00       	mov    $0x0,%eax
f011652e:	e9 72 01 00 00       	jmp    f01166a5 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116533:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116537:	75 70                	jne    f01165a9 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116539:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011653c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011653f:	c1 ea 0c             	shr    $0xc,%edx
f0116542:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116548:	c1 e2 02             	shl    $0x2,%edx
f011654b:	01 d0                	add    %edx,%eax
f011654d:	8b 00                	mov    (%eax),%eax
f011654f:	c1 e8 0c             	shr    $0xc,%eax
f0116552:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116555:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116558:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011655b:	c1 ea 0c             	shr    $0xc,%edx
f011655e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116564:	c1 e2 02             	shl    $0x2,%edx
f0116567:	01 d0                	add    %edx,%eax
f0116569:	8b 00                	mov    (%eax),%eax
f011656b:	c1 e8 0c             	shr    $0xc,%eax
f011656e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116571:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116574:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116577:	74 30                	je     f01165a9 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116579:	83 ec 04             	sub    $0x4,%esp
f011657c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011657f:	ff 75 e8             	pushl  -0x18(%ebp)
f0116582:	ff 75 f0             	pushl  -0x10(%ebp)
f0116585:	ff 75 f4             	pushl  -0xc(%ebp)
f0116588:	68 24 ae 13 f0       	push   $0xf013ae24
f011658d:	68 33 08 00 00       	push   $0x833
f0116592:	68 fe 8e 13 f0       	push   $0xf0138efe
f0116597:	e8 77 9e fe ff       	call   f0100413 <_warn>
f011659c:	83 c4 20             	add    $0x20,%esp
				return 0;
f011659f:	b8 00 00 00 00       	mov    $0x0,%eax
f01165a4:	e9 fc 00 00 00       	jmp    f01166a5 <CCP+0x227>
			}
		}
		if (ref != -1)
f01165a9:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01165ad:	74 52                	je     f0116601 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01165af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01165b3:	74 0e                	je     f01165c3 <CCP+0x145>
f01165b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01165b8:	8b 40 08             	mov    0x8(%eax),%eax
f01165bb:	0f b7 c0             	movzwl %ax,%eax
f01165be:	3b 45 18             	cmp    0x18(%ebp),%eax
f01165c1:	74 3e                	je     f0116601 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01165c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01165c7:	74 0b                	je     f01165d4 <CCP+0x156>
f01165c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01165cc:	8b 40 08             	mov    0x8(%eax),%eax
f01165cf:	0f b7 c0             	movzwl %ax,%eax
f01165d2:	eb 05                	jmp    f01165d9 <CCP+0x15b>
f01165d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01165d9:	83 ec 0c             	sub    $0xc,%esp
f01165dc:	50                   	push   %eax
f01165dd:	ff 75 f0             	pushl  -0x10(%ebp)
f01165e0:	68 80 ae 13 f0       	push   $0xf013ae80
f01165e5:	68 3b 08 00 00       	push   $0x83b
f01165ea:	68 fe 8e 13 f0       	push   $0xf0138efe
f01165ef:	e8 1f 9e fe ff       	call   f0100413 <_warn>
f01165f4:	83 c4 20             	add    $0x20,%esp
				return 0;
f01165f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01165fc:	e9 a4 00 00 00       	jmp    f01166a5 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116601:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116604:	ff 75 20             	pushl  0x20(%ebp)
f0116607:	ff 75 1c             	pushl  0x1c(%ebp)
f011660a:	50                   	push   %eax
f011660b:	ff 75 08             	pushl  0x8(%ebp)
f011660e:	e8 17 fd ff ff       	call   f011632a <CPs>
f0116613:	83 c4 10             	add    $0x10,%esp
f0116616:	85 c0                	test   %eax,%eax
f0116618:	7f 21                	jg     f011663b <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f011661a:	83 ec 04             	sub    $0x4,%esp
f011661d:	68 f0 ae 13 f0       	push   $0xf013aef0
f0116622:	68 41 08 00 00       	push   $0x841
f0116627:	68 fe 8e 13 f0       	push   $0xf0138efe
f011662c:	e8 e2 9d fe ff       	call   f0100413 <_warn>
f0116631:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116634:	b8 00 00 00 00       	mov    $0x0,%eax
f0116639:	eb 6a                	jmp    f01166a5 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f011663b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011663f:	74 3a                	je     f011667b <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116644:	ff 75 28             	pushl  0x28(%ebp)
f0116647:	ff 75 24             	pushl  0x24(%ebp)
f011664a:	50                   	push   %eax
f011664b:	ff 75 08             	pushl  0x8(%ebp)
f011664e:	e8 d7 fc ff ff       	call   f011632a <CPs>
f0116653:	83 c4 10             	add    $0x10,%esp
f0116656:	85 c0                	test   %eax,%eax
f0116658:	7f 21                	jg     f011667b <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f011665a:	83 ec 04             	sub    $0x4,%esp
f011665d:	68 38 af 13 f0       	push   $0xf013af38
f0116662:	68 48 08 00 00       	push   $0x848
f0116667:	68 fe 8e 13 f0       	push   $0xf0138efe
f011666c:	e8 a2 9d fe ff       	call   f0100413 <_warn>
f0116671:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116674:	b8 00 00 00 00       	mov    $0x0,%eax
f0116679:	eb 2a                	jmp    f01166a5 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f011667b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011667f:	74 07                	je     f0116688 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116681:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116688:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f011668f:	8b 55 10             	mov    0x10(%ebp),%edx
f0116692:	8b 45 14             	mov    0x14(%ebp),%eax
f0116695:	01 d0                	add    %edx,%eax
f0116697:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011669a:	0f 87 05 fe ff ff    	ja     f01164a5 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01166a0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01166a5:	c9                   	leave  
f01166a6:	c3                   	ret    

f01166a7 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01166a7:	55                   	push   %ebp
f01166a8:	89 e5                	mov    %esp,%ebp
f01166aa:	57                   	push   %edi
f01166ab:	56                   	push   %esi
f01166ac:	53                   	push   %ebx
f01166ad:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01166b3:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01166b8:	84 c0                	test   %al,%al
f01166ba:	0f 84 b4 09 00 00    	je     f0117074 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01166c0:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01166c7:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01166cd:	bb d8 b1 13 f0       	mov    $0xf013b1d8,%ebx
f01166d2:	ba 04 00 00 00       	mov    $0x4,%edx
f01166d7:	89 c7                	mov    %eax,%edi
f01166d9:	89 de                	mov    %ebx,%esi
f01166db:	89 d1                	mov    %edx,%ecx
f01166dd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01166df:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01166e5:	b9 15 00 00 00       	mov    $0x15,%ecx
f01166ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01166ef:	89 d7                	mov    %edx,%edi
f01166f1:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01166f3:	83 ec 0c             	sub    $0xc,%esp
f01166f6:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01166fc:	50                   	push   %eax
f01166fd:	e8 6e a6 fe ff       	call   f0100d70 <execute_command>
f0116702:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116705:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011670b:	bb 3c b2 13 f0       	mov    $0xf013b23c,%ebx
f0116710:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116715:	89 c7                	mov    %eax,%edi
f0116717:	89 de                	mov    %ebx,%esi
f0116719:	89 d1                	mov    %edx,%ecx
f011671b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011671d:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116723:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116728:	b0 00                	mov    $0x0,%al
f011672a:	89 d7                	mov    %edx,%edi
f011672c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011672e:	83 ec 0c             	sub    $0xc,%esp
f0116731:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116737:	50                   	push   %eax
f0116738:	e8 33 a6 fe ff       	call   f0100d70 <execute_command>
f011673d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116740:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116746:	bb a0 b2 13 f0       	mov    $0xf013b2a0,%ebx
f011674b:	ba 17 00 00 00       	mov    $0x17,%edx
f0116750:	89 c7                	mov    %eax,%edi
f0116752:	89 de                	mov    %ebx,%esi
f0116754:	89 d1                	mov    %edx,%ecx
f0116756:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116758:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011675e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116763:	b0 00                	mov    $0x0,%al
f0116765:	89 d7                	mov    %edx,%edi
f0116767:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116769:	83 ec 0c             	sub    $0xc,%esp
f011676c:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116772:	50                   	push   %eax
f0116773:	e8 f8 a5 fe ff       	call   f0100d70 <execute_command>
f0116778:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011677b:	83 ec 04             	sub    $0x4,%esp
f011677e:	6a 00                	push   $0x0
f0116780:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116783:	50                   	push   %eax
f0116784:	68 00 10 00 00       	push   $0x1000
f0116789:	e8 86 36 ff ff       	call   f0109e14 <envid2env>
f011678e:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116791:	83 ec 04             	sub    $0x4,%esp
f0116794:	6a 00                	push   $0x0
f0116796:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116799:	50                   	push   %eax
f011679a:	68 01 10 00 00       	push   $0x1001
f011679f:	e8 70 36 ff ff       	call   f0109e14 <envid2env>
f01167a4:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01167a7:	83 ec 04             	sub    $0x4,%esp
f01167aa:	6a 00                	push   $0x0
f01167ac:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01167af:	50                   	push   %eax
f01167b0:	68 02 10 00 00       	push   $0x1002
f01167b5:	e8 5a 36 ff ff       	call   f0109e14 <envid2env>
f01167ba:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01167bd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167c0:	85 c0                	test   %eax,%eax
f01167c2:	74 0e                	je     f01167d2 <test_priority_normal_and_higher+0x12b>
f01167c4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167c7:	85 c0                	test   %eax,%eax
f01167c9:	74 07                	je     f01167d2 <test_priority_normal_and_higher+0x12b>
f01167cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167ce:	85 c0                	test   %eax,%eax
f01167d0:	75 14                	jne    f01167e6 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01167d2:	83 ec 04             	sub    $0x4,%esp
f01167d5:	68 78 af 13 f0       	push   $0xf013af78
f01167da:	6a 26                	push   $0x26
f01167dc:	68 91 af 13 f0       	push   $0xf013af91
f01167e1:	e8 1f 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01167e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167e9:	8b 40 74             	mov    0x74(%eax),%eax
f01167ec:	83 f8 14             	cmp    $0x14,%eax
f01167ef:	75 16                	jne    f0116807 <test_priority_normal_and_higher+0x160>
f01167f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167f4:	8b 40 74             	mov    0x74(%eax),%eax
f01167f7:	83 f8 0f             	cmp    $0xf,%eax
f01167fa:	75 0b                	jne    f0116807 <test_priority_normal_and_higher+0x160>
f01167fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167ff:	8b 40 74             	mov    0x74(%eax),%eax
f0116802:	83 f8 0a             	cmp    $0xa,%eax
f0116805:	74 14                	je     f011681b <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116807:	83 ec 04             	sub    $0x4,%esp
f011680a:	68 ac af 13 f0       	push   $0xf013afac
f011680f:	6a 29                	push   $0x29
f0116811:	68 91 af 13 f0       	push   $0xf013af91
f0116816:	e8 ea 99 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f011681b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116822:	eb 44                	jmp    f0116868 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116824:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116827:	8b 48 78             	mov    0x78(%eax),%ecx
f011682a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011682d:	89 d0                	mov    %edx,%eax
f011682f:	01 c0                	add    %eax,%eax
f0116831:	01 d0                	add    %edx,%eax
f0116833:	c1 e0 03             	shl    $0x3,%eax
f0116836:	01 c8                	add    %ecx,%eax
f0116838:	8b 10                	mov    (%eax),%edx
f011683a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011683d:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116844:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116847:	8b 48 78             	mov    0x78(%eax),%ecx
f011684a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011684d:	89 d0                	mov    %edx,%eax
f011684f:	01 c0                	add    %eax,%eax
f0116851:	01 d0                	add    %edx,%eax
f0116853:	c1 e0 03             	shl    $0x3,%eax
f0116856:	01 c8                	add    %ecx,%eax
f0116858:	8b 50 08             	mov    0x8(%eax),%edx
f011685b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011685e:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116865:	ff 45 e4             	incl   -0x1c(%ebp)
f0116868:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011686c:	7e b6                	jle    f0116824 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011686e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116875:	eb 44                	jmp    f01168bb <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116877:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011687a:	8b 48 78             	mov    0x78(%eax),%ecx
f011687d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116880:	89 d0                	mov    %edx,%eax
f0116882:	01 c0                	add    %eax,%eax
f0116884:	01 d0                	add    %edx,%eax
f0116886:	c1 e0 03             	shl    $0x3,%eax
f0116889:	01 c8                	add    %ecx,%eax
f011688b:	8b 10                	mov    (%eax),%edx
f011688d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116890:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116897:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011689a:	8b 48 78             	mov    0x78(%eax),%ecx
f011689d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168a0:	89 d0                	mov    %edx,%eax
f01168a2:	01 c0                	add    %eax,%eax
f01168a4:	01 d0                	add    %edx,%eax
f01168a6:	c1 e0 03             	shl    $0x3,%eax
f01168a9:	01 c8                	add    %ecx,%eax
f01168ab:	8b 50 08             	mov    0x8(%eax),%edx
f01168ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168b1:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01168b8:	ff 45 e0             	incl   -0x20(%ebp)
f01168bb:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01168bf:	7e b6                	jle    f0116877 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01168c1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01168c8:	eb 44                	jmp    f011690e <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01168ca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01168d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01168d3:	89 d0                	mov    %edx,%eax
f01168d5:	01 c0                	add    %eax,%eax
f01168d7:	01 d0                	add    %edx,%eax
f01168d9:	c1 e0 03             	shl    $0x3,%eax
f01168dc:	01 c8                	add    %ecx,%eax
f01168de:	8b 10                	mov    (%eax),%edx
f01168e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01168e3:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01168ea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168ed:	8b 48 78             	mov    0x78(%eax),%ecx
f01168f0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01168f3:	89 d0                	mov    %edx,%eax
f01168f5:	01 c0                	add    %eax,%eax
f01168f7:	01 d0                	add    %edx,%eax
f01168f9:	c1 e0 03             	shl    $0x3,%eax
f01168fc:	01 c8                	add    %ecx,%eax
f01168fe:	8b 50 08             	mov    0x8(%eax),%edx
f0116901:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116904:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011690b:	ff 45 dc             	incl   -0x24(%ebp)
f011690e:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116912:	7e b6                	jle    f01168ca <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116914:	e8 8e 65 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116919:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f011691c:	e8 a7 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116921:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116924:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116927:	83 ec 08             	sub    $0x8,%esp
f011692a:	6a 03                	push   $0x3
f011692c:	50                   	push   %eax
f011692d:	e8 c0 49 ff ff       	call   f010b2f2 <set_program_priority>
f0116932:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116935:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116938:	83 ec 08             	sub    $0x8,%esp
f011693b:	6a 03                	push   $0x3
f011693d:	50                   	push   %eax
f011693e:	e8 af 49 ff ff       	call   f010b2f2 <set_program_priority>
f0116943:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116946:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116949:	83 ec 08             	sub    $0x8,%esp
f011694c:	6a 03                	push   $0x3
f011694e:	50                   	push   %eax
f011694f:	e8 9e 49 ff ff       	call   f010b2f2 <set_program_priority>
f0116954:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116957:	e8 6c d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011695c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011695f:	74 14                	je     f0116975 <test_priority_normal_and_higher+0x2ce>
f0116961:	83 ec 04             	sub    $0x4,%esp
f0116964:	68 f8 af 13 f0       	push   $0xf013aff8
f0116969:	6a 45                	push   $0x45
f011696b:	68 91 af 13 f0       	push   $0xf013af91
f0116970:	e8 90 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116975:	e8 2d 65 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011697a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011697d:	74 14                	je     f0116993 <test_priority_normal_and_higher+0x2ec>
f011697f:	83 ec 04             	sub    $0x4,%esp
f0116982:	68 f8 af 13 f0       	push   $0xf013aff8
f0116987:	6a 46                	push   $0x46
f0116989:	68 91 af 13 f0       	push   $0xf013af91
f011698e:	e8 72 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116993:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116996:	8b 40 74             	mov    0x74(%eax),%eax
f0116999:	83 f8 14             	cmp    $0x14,%eax
f011699c:	75 16                	jne    f01169b4 <test_priority_normal_and_higher+0x30d>
f011699e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169a1:	8b 40 74             	mov    0x74(%eax),%eax
f01169a4:	83 f8 0f             	cmp    $0xf,%eax
f01169a7:	75 0b                	jne    f01169b4 <test_priority_normal_and_higher+0x30d>
f01169a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169ac:	8b 40 74             	mov    0x74(%eax),%eax
f01169af:	83 f8 0a             	cmp    $0xa,%eax
f01169b2:	74 14                	je     f01169c8 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01169b4:	83 ec 04             	sub    $0x4,%esp
f01169b7:	68 24 b0 13 f0       	push   $0xf013b024
f01169bc:	6a 49                	push   $0x49
f01169be:	68 91 af 13 f0       	push   $0xf013af91
f01169c3:	e8 3d 98 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01169c8:	e8 da 64 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01169cd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169d0:	e8 f3 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01169d5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01169d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169db:	83 ec 08             	sub    $0x8,%esp
f01169de:	6a 04                	push   $0x4
f01169e0:	50                   	push   %eax
f01169e1:	e8 0c 49 ff ff       	call   f010b2f2 <set_program_priority>
f01169e6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01169e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169ec:	83 ec 08             	sub    $0x8,%esp
f01169ef:	6a 04                	push   $0x4
f01169f1:	50                   	push   %eax
f01169f2:	e8 fb 48 ff ff       	call   f010b2f2 <set_program_priority>
f01169f7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01169fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169fd:	83 ec 08             	sub    $0x8,%esp
f0116a00:	6a 04                	push   $0x4
f0116a02:	50                   	push   %eax
f0116a03:	e8 ea 48 ff ff       	call   f010b2f2 <set_program_priority>
f0116a08:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a0b:	e8 b8 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a10:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a13:	74 14                	je     f0116a29 <test_priority_normal_and_higher+0x382>
f0116a15:	83 ec 04             	sub    $0x4,%esp
f0116a18:	68 f8 af 13 f0       	push   $0xf013aff8
f0116a1d:	6a 53                	push   $0x53
f0116a1f:	68 91 af 13 f0       	push   $0xf013af91
f0116a24:	e8 dc 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116a29:	e8 79 64 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116a2e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a31:	74 14                	je     f0116a47 <test_priority_normal_and_higher+0x3a0>
f0116a33:	83 ec 04             	sub    $0x4,%esp
f0116a36:	68 78 b0 13 f0       	push   $0xf013b078
f0116a3b:	6a 54                	push   $0x54
f0116a3d:	68 91 af 13 f0       	push   $0xf013af91
f0116a42:	e8 be 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116a47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a4a:	8b 40 74             	mov    0x74(%eax),%eax
f0116a4d:	83 f8 14             	cmp    $0x14,%eax
f0116a50:	75 16                	jne    f0116a68 <test_priority_normal_and_higher+0x3c1>
f0116a52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a55:	8b 40 74             	mov    0x74(%eax),%eax
f0116a58:	83 f8 0f             	cmp    $0xf,%eax
f0116a5b:	75 0b                	jne    f0116a68 <test_priority_normal_and_higher+0x3c1>
f0116a5d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a60:	8b 40 74             	mov    0x74(%eax),%eax
f0116a63:	83 f8 14             	cmp    $0x14,%eax
f0116a66:	74 14                	je     f0116a7c <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116a68:	83 ec 04             	sub    $0x4,%esp
f0116a6b:	68 a8 b0 13 f0       	push   $0xf013b0a8
f0116a70:	6a 57                	push   $0x57
f0116a72:	68 91 af 13 f0       	push   $0xf013af91
f0116a77:	e8 89 97 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116a7c:	e8 26 64 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116a81:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a84:	e8 3f d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a89:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116a8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a8f:	83 ec 08             	sub    $0x8,%esp
f0116a92:	6a 04                	push   $0x4
f0116a94:	50                   	push   %eax
f0116a95:	e8 58 48 ff ff       	call   f010b2f2 <set_program_priority>
f0116a9a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a9d:	e8 26 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116aa2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116aa5:	74 14                	je     f0116abb <test_priority_normal_and_higher+0x414>
f0116aa7:	83 ec 04             	sub    $0x4,%esp
f0116aaa:	68 f8 af 13 f0       	push   $0xf013aff8
f0116aaf:	6a 5f                	push   $0x5f
f0116ab1:	68 91 af 13 f0       	push   $0xf013af91
f0116ab6:	e8 4a 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116abb:	e8 e7 63 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116ac0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ac3:	74 14                	je     f0116ad9 <test_priority_normal_and_higher+0x432>
f0116ac5:	83 ec 04             	sub    $0x4,%esp
f0116ac8:	68 f8 af 13 f0       	push   $0xf013aff8
f0116acd:	6a 60                	push   $0x60
f0116acf:	68 91 af 13 f0       	push   $0xf013af91
f0116ad4:	e8 2c 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ad9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116adc:	8b 40 74             	mov    0x74(%eax),%eax
f0116adf:	83 f8 14             	cmp    $0x14,%eax
f0116ae2:	75 16                	jne    f0116afa <test_priority_normal_and_higher+0x453>
f0116ae4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ae7:	8b 40 74             	mov    0x74(%eax),%eax
f0116aea:	83 f8 0f             	cmp    $0xf,%eax
f0116aed:	75 0b                	jne    f0116afa <test_priority_normal_and_higher+0x453>
f0116aef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116af2:	8b 40 74             	mov    0x74(%eax),%eax
f0116af5:	83 f8 14             	cmp    $0x14,%eax
f0116af8:	74 14                	je     f0116b0e <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116afa:	83 ec 04             	sub    $0x4,%esp
f0116afd:	68 f0 b0 13 f0       	push   $0xf013b0f0
f0116b02:	6a 63                	push   $0x63
f0116b04:	68 91 af 13 f0       	push   $0xf013af91
f0116b09:	e8 f7 96 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b0e:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116b15:	eb 1b                	jmp    f0116b32 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116b17:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b1a:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b1d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116b20:	89 d0                	mov    %edx,%eax
f0116b22:	01 c0                	add    %eax,%eax
f0116b24:	01 d0                	add    %edx,%eax
f0116b26:	c1 e0 03             	shl    $0x3,%eax
f0116b29:	01 c8                	add    %ecx,%eax
f0116b2b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b2f:	ff 45 d8             	incl   -0x28(%ebp)
f0116b32:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116b36:	7e df                	jle    f0116b17 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116b38:	e8 6a 63 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116b3d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b40:	e8 83 d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b45:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116b48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b4b:	83 ec 08             	sub    $0x8,%esp
f0116b4e:	6a 04                	push   $0x4
f0116b50:	50                   	push   %eax
f0116b51:	e8 9c 47 ff ff       	call   f010b2f2 <set_program_priority>
f0116b56:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b59:	e8 6a d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b5e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116b61:	74 14                	je     f0116b77 <test_priority_normal_and_higher+0x4d0>
f0116b63:	83 ec 04             	sub    $0x4,%esp
f0116b66:	68 f8 af 13 f0       	push   $0xf013aff8
f0116b6b:	6a 70                	push   $0x70
f0116b6d:	68 91 af 13 f0       	push   $0xf013af91
f0116b72:	e8 8e 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116b77:	e8 2b 63 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116b7c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116b7f:	74 14                	je     f0116b95 <test_priority_normal_and_higher+0x4ee>
f0116b81:	83 ec 04             	sub    $0x4,%esp
f0116b84:	68 f8 af 13 f0       	push   $0xf013aff8
f0116b89:	6a 71                	push   $0x71
f0116b8b:	68 91 af 13 f0       	push   $0xf013af91
f0116b90:	e8 70 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116b95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b98:	8b 40 74             	mov    0x74(%eax),%eax
f0116b9b:	83 f8 14             	cmp    $0x14,%eax
f0116b9e:	75 16                	jne    f0116bb6 <test_priority_normal_and_higher+0x50f>
f0116ba0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ba3:	8b 40 74             	mov    0x74(%eax),%eax
f0116ba6:	83 f8 0f             	cmp    $0xf,%eax
f0116ba9:	75 0b                	jne    f0116bb6 <test_priority_normal_and_higher+0x50f>
f0116bab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116bae:	8b 40 74             	mov    0x74(%eax),%eax
f0116bb1:	83 f8 14             	cmp    $0x14,%eax
f0116bb4:	74 14                	je     f0116bca <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116bb6:	83 ec 04             	sub    $0x4,%esp
f0116bb9:	68 f0 b0 13 f0       	push   $0xf013b0f0
f0116bbe:	6a 74                	push   $0x74
f0116bc0:	68 91 af 13 f0       	push   $0xf013af91
f0116bc5:	e8 3b 96 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116bca:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116bd1:	eb 1b                	jmp    f0116bee <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116bd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bd6:	8b 48 78             	mov    0x78(%eax),%ecx
f0116bd9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116bdc:	89 d0                	mov    %edx,%eax
f0116bde:	01 c0                	add    %eax,%eax
f0116be0:	01 d0                	add    %edx,%eax
f0116be2:	c1 e0 03             	shl    $0x3,%eax
f0116be5:	01 c8                	add    %ecx,%eax
f0116be7:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116beb:	ff 45 d4             	incl   -0x2c(%ebp)
f0116bee:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116bf2:	7e df                	jle    f0116bd3 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116bf4:	e8 ae 62 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116bf9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116bfc:	e8 c7 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c01:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116c04:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c07:	83 ec 08             	sub    $0x8,%esp
f0116c0a:	6a 05                	push   $0x5
f0116c0c:	50                   	push   %eax
f0116c0d:	e8 e0 46 ff ff       	call   f010b2f2 <set_program_priority>
f0116c12:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116c15:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c18:	83 ec 08             	sub    $0x8,%esp
f0116c1b:	6a 05                	push   $0x5
f0116c1d:	50                   	push   %eax
f0116c1e:	e8 cf 46 ff ff       	call   f010b2f2 <set_program_priority>
f0116c23:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c26:	e8 9d d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c2b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116c2e:	74 14                	je     f0116c44 <test_priority_normal_and_higher+0x59d>
f0116c30:	83 ec 04             	sub    $0x4,%esp
f0116c33:	68 f8 af 13 f0       	push   $0xf013aff8
f0116c38:	6a 7f                	push   $0x7f
f0116c3a:	68 91 af 13 f0       	push   $0xf013af91
f0116c3f:	e8 c1 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116c44:	e8 5e 62 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116c49:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116c4c:	74 17                	je     f0116c65 <test_priority_normal_and_higher+0x5be>
f0116c4e:	83 ec 04             	sub    $0x4,%esp
f0116c51:	68 f8 af 13 f0       	push   $0xf013aff8
f0116c56:	68 80 00 00 00       	push   $0x80
f0116c5b:	68 91 af 13 f0       	push   $0xf013af91
f0116c60:	e8 a0 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116c65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c68:	8b 40 74             	mov    0x74(%eax),%eax
f0116c6b:	83 f8 14             	cmp    $0x14,%eax
f0116c6e:	75 16                	jne    f0116c86 <test_priority_normal_and_higher+0x5df>
f0116c70:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c73:	8b 40 74             	mov    0x74(%eax),%eax
f0116c76:	83 f8 1e             	cmp    $0x1e,%eax
f0116c79:	75 0b                	jne    f0116c86 <test_priority_normal_and_higher+0x5df>
f0116c7b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c7e:	8b 40 74             	mov    0x74(%eax),%eax
f0116c81:	83 f8 28             	cmp    $0x28,%eax
f0116c84:	74 17                	je     f0116c9d <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116c86:	83 ec 04             	sub    $0x4,%esp
f0116c89:	68 2c b1 13 f0       	push   $0xf013b12c
f0116c8e:	68 83 00 00 00       	push   $0x83
f0116c93:	68 91 af 13 f0       	push   $0xf013af91
f0116c98:	e8 68 95 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116c9d:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116ca4:	eb 1b                	jmp    f0116cc1 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116ca6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ca9:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cac:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116caf:	89 d0                	mov    %edx,%eax
f0116cb1:	01 c0                	add    %eax,%eax
f0116cb3:	01 d0                	add    %edx,%eax
f0116cb5:	c1 e0 03             	shl    $0x3,%eax
f0116cb8:	01 c8                	add    %ecx,%eax
f0116cba:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116cbe:	ff 45 d0             	incl   -0x30(%ebp)
f0116cc1:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116cc5:	7e df                	jle    f0116ca6 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116cc7:	e8 db 61 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116ccc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ccf:	e8 f4 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116cd4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116cd7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cda:	83 ec 08             	sub    $0x8,%esp
f0116cdd:	6a 05                	push   $0x5
f0116cdf:	50                   	push   %eax
f0116ce0:	e8 0d 46 ff ff       	call   f010b2f2 <set_program_priority>
f0116ce5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116ce8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ceb:	83 ec 08             	sub    $0x8,%esp
f0116cee:	6a 04                	push   $0x4
f0116cf0:	50                   	push   %eax
f0116cf1:	e8 fc 45 ff ff       	call   f010b2f2 <set_program_priority>
f0116cf6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116cf9:	e8 ca d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116cfe:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d01:	74 17                	je     f0116d1a <test_priority_normal_and_higher+0x673>
f0116d03:	83 ec 04             	sub    $0x4,%esp
f0116d06:	68 f8 af 13 f0       	push   $0xf013aff8
f0116d0b:	68 8e 00 00 00       	push   $0x8e
f0116d10:	68 91 af 13 f0       	push   $0xf013af91
f0116d15:	e8 eb 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116d1a:	e8 88 61 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116d1f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116d22:	74 17                	je     f0116d3b <test_priority_normal_and_higher+0x694>
f0116d24:	83 ec 04             	sub    $0x4,%esp
f0116d27:	68 f8 af 13 f0       	push   $0xf013aff8
f0116d2c:	68 8f 00 00 00       	push   $0x8f
f0116d31:	68 91 af 13 f0       	push   $0xf013af91
f0116d36:	e8 ca 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116d3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d3e:	8b 40 74             	mov    0x74(%eax),%eax
f0116d41:	83 f8 14             	cmp    $0x14,%eax
f0116d44:	75 16                	jne    f0116d5c <test_priority_normal_and_higher+0x6b5>
f0116d46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d49:	8b 40 74             	mov    0x74(%eax),%eax
f0116d4c:	83 f8 1e             	cmp    $0x1e,%eax
f0116d4f:	75 0b                	jne    f0116d5c <test_priority_normal_and_higher+0x6b5>
f0116d51:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d54:	8b 40 74             	mov    0x74(%eax),%eax
f0116d57:	83 f8 28             	cmp    $0x28,%eax
f0116d5a:	74 17                	je     f0116d73 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116d5c:	83 ec 04             	sub    $0x4,%esp
f0116d5f:	68 2c b1 13 f0       	push   $0xf013b12c
f0116d64:	68 92 00 00 00       	push   $0x92
f0116d69:	68 91 af 13 f0       	push   $0xf013af91
f0116d6e:	e8 92 94 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116d73:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116d7a:	eb 1b                	jmp    f0116d97 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116d7c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d7f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d82:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116d85:	89 d0                	mov    %edx,%eax
f0116d87:	01 c0                	add    %eax,%eax
f0116d89:	01 d0                	add    %edx,%eax
f0116d8b:	c1 e0 03             	shl    $0x3,%eax
f0116d8e:	01 c8                	add    %ecx,%eax
f0116d90:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116d94:	ff 45 cc             	incl   -0x34(%ebp)
f0116d97:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116d9b:	7e df                	jle    f0116d7c <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116d9d:	e8 05 61 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116da2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116da5:	e8 1e d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116daa:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116dad:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116db0:	83 ec 08             	sub    $0x8,%esp
f0116db3:	6a 05                	push   $0x5
f0116db5:	50                   	push   %eax
f0116db6:	e8 37 45 ff ff       	call   f010b2f2 <set_program_priority>
f0116dbb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116dbe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116dc1:	83 ec 08             	sub    $0x8,%esp
f0116dc4:	6a 04                	push   $0x4
f0116dc6:	50                   	push   %eax
f0116dc7:	e8 26 45 ff ff       	call   f010b2f2 <set_program_priority>
f0116dcc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116dcf:	e8 f4 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116dd4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116dd7:	74 17                	je     f0116df0 <test_priority_normal_and_higher+0x749>
f0116dd9:	83 ec 04             	sub    $0x4,%esp
f0116ddc:	68 f8 af 13 f0       	push   $0xf013aff8
f0116de1:	68 9d 00 00 00       	push   $0x9d
f0116de6:	68 91 af 13 f0       	push   $0xf013af91
f0116deb:	e8 15 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116df0:	e8 b2 60 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0116df5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116df8:	74 17                	je     f0116e11 <test_priority_normal_and_higher+0x76a>
f0116dfa:	83 ec 04             	sub    $0x4,%esp
f0116dfd:	68 f8 af 13 f0       	push   $0xf013aff8
f0116e02:	68 9e 00 00 00       	push   $0x9e
f0116e07:	68 91 af 13 f0       	push   $0xf013af91
f0116e0c:	e8 f4 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116e11:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e14:	8b 40 74             	mov    0x74(%eax),%eax
f0116e17:	83 f8 14             	cmp    $0x14,%eax
f0116e1a:	75 16                	jne    f0116e32 <test_priority_normal_and_higher+0x78b>
f0116e1c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e1f:	8b 40 74             	mov    0x74(%eax),%eax
f0116e22:	83 f8 3c             	cmp    $0x3c,%eax
f0116e25:	75 0b                	jne    f0116e32 <test_priority_normal_and_higher+0x78b>
f0116e27:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e2a:	8b 40 74             	mov    0x74(%eax),%eax
f0116e2d:	83 f8 28             	cmp    $0x28,%eax
f0116e30:	74 17                	je     f0116e49 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116e32:	83 ec 04             	sub    $0x4,%esp
f0116e35:	68 2c b1 13 f0       	push   $0xf013b12c
f0116e3a:	68 a1 00 00 00       	push   $0xa1
f0116e3f:	68 91 af 13 f0       	push   $0xf013af91
f0116e44:	e8 bc 93 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116e49:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116e50:	eb 1b                	jmp    f0116e6d <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116e52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e55:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e58:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116e5b:	89 d0                	mov    %edx,%eax
f0116e5d:	01 c0                	add    %eax,%eax
f0116e5f:	01 d0                	add    %edx,%eax
f0116e61:	c1 e0 03             	shl    $0x3,%eax
f0116e64:	01 c8                	add    %ecx,%eax
f0116e66:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116e6a:	ff 45 c8             	incl   -0x38(%ebp)
f0116e6d:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116e71:	7e df                	jle    f0116e52 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116e73:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116e7a:	eb 1b                	jmp    f0116e97 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116e7c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e7f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e82:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116e85:	89 d0                	mov    %edx,%eax
f0116e87:	01 c0                	add    %eax,%eax
f0116e89:	01 d0                	add    %edx,%eax
f0116e8b:	c1 e0 03             	shl    $0x3,%eax
f0116e8e:	01 c8                	add    %ecx,%eax
f0116e90:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116e94:	ff 45 c4             	incl   -0x3c(%ebp)
f0116e97:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116e9b:	7e df                	jle    f0116e7c <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116e9d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116ea4:	eb 7a                	jmp    f0116f20 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116ea6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116ea9:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116eb0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116eb3:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eb6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116eb9:	89 d0                	mov    %edx,%eax
f0116ebb:	01 c0                	add    %eax,%eax
f0116ebd:	01 d0                	add    %edx,%eax
f0116ebf:	c1 e0 03             	shl    $0x3,%eax
f0116ec2:	01 d8                	add    %ebx,%eax
f0116ec4:	8b 00                	mov    (%eax),%eax
f0116ec6:	39 c1                	cmp    %eax,%ecx
f0116ec8:	74 17                	je     f0116ee1 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116eca:	83 ec 04             	sub    $0x4,%esp
f0116ecd:	68 68 b1 13 f0       	push   $0xf013b168
f0116ed2:	68 af 00 00 00       	push   $0xaf
f0116ed7:	68 91 af 13 f0       	push   $0xf013af91
f0116edc:	e8 24 93 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ee1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116ee4:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116eeb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116eee:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ef1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116ef4:	89 d0                	mov    %edx,%eax
f0116ef6:	01 c0                	add    %eax,%eax
f0116ef8:	01 d0                	add    %edx,%eax
f0116efa:	c1 e0 03             	shl    $0x3,%eax
f0116efd:	01 d8                	add    %ebx,%eax
f0116eff:	8b 40 08             	mov    0x8(%eax),%eax
f0116f02:	39 c1                	cmp    %eax,%ecx
f0116f04:	74 17                	je     f0116f1d <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116f06:	83 ec 04             	sub    $0x4,%esp
f0116f09:	68 68 b1 13 f0       	push   $0xf013b168
f0116f0e:	68 b2 00 00 00       	push   $0xb2
f0116f13:	68 91 af 13 f0       	push   $0xf013af91
f0116f18:	e8 e8 92 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116f1d:	ff 45 c0             	incl   -0x40(%ebp)
f0116f20:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116f24:	7e 80                	jle    f0116ea6 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116f26:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116f2d:	eb 7a                	jmp    f0116fa9 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116f32:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116f39:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f3c:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f3f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116f42:	89 d0                	mov    %edx,%eax
f0116f44:	01 c0                	add    %eax,%eax
f0116f46:	01 d0                	add    %edx,%eax
f0116f48:	c1 e0 03             	shl    $0x3,%eax
f0116f4b:	01 d8                	add    %ebx,%eax
f0116f4d:	8b 00                	mov    (%eax),%eax
f0116f4f:	39 c1                	cmp    %eax,%ecx
f0116f51:	74 17                	je     f0116f6a <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116f53:	83 ec 04             	sub    $0x4,%esp
f0116f56:	68 68 b1 13 f0       	push   $0xf013b168
f0116f5b:	68 b8 00 00 00       	push   $0xb8
f0116f60:	68 91 af 13 f0       	push   $0xf013af91
f0116f65:	e8 9b 92 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116f6d:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116f74:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f77:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f7a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116f7d:	89 d0                	mov    %edx,%eax
f0116f7f:	01 c0                	add    %eax,%eax
f0116f81:	01 d0                	add    %edx,%eax
f0116f83:	c1 e0 03             	shl    $0x3,%eax
f0116f86:	01 d8                	add    %ebx,%eax
f0116f88:	8b 40 08             	mov    0x8(%eax),%eax
f0116f8b:	39 c1                	cmp    %eax,%ecx
f0116f8d:	74 17                	je     f0116fa6 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116f8f:	83 ec 04             	sub    $0x4,%esp
f0116f92:	68 68 b1 13 f0       	push   $0xf013b168
f0116f97:	68 bb 00 00 00       	push   $0xbb
f0116f9c:	68 91 af 13 f0       	push   $0xf013af91
f0116fa1:	e8 5f 92 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116fa6:	ff 45 bc             	incl   -0x44(%ebp)
f0116fa9:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116fad:	7e 80                	jle    f0116f2f <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116faf:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116fb6:	eb 7a                	jmp    f0117032 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116fbb:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116fc2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fc5:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fc8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116fcb:	89 d0                	mov    %edx,%eax
f0116fcd:	01 c0                	add    %eax,%eax
f0116fcf:	01 d0                	add    %edx,%eax
f0116fd1:	c1 e0 03             	shl    $0x3,%eax
f0116fd4:	01 d8                	add    %ebx,%eax
f0116fd6:	8b 00                	mov    (%eax),%eax
f0116fd8:	39 c1                	cmp    %eax,%ecx
f0116fda:	74 17                	je     f0116ff3 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116fdc:	83 ec 04             	sub    $0x4,%esp
f0116fdf:	68 68 b1 13 f0       	push   $0xf013b168
f0116fe4:	68 c1 00 00 00       	push   $0xc1
f0116fe9:	68 91 af 13 f0       	push   $0xf013af91
f0116fee:	e8 12 92 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ff3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ff6:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116ffd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117000:	8b 58 78             	mov    0x78(%eax),%ebx
f0117003:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117006:	89 d0                	mov    %edx,%eax
f0117008:	01 c0                	add    %eax,%eax
f011700a:	01 d0                	add    %edx,%eax
f011700c:	c1 e0 03             	shl    $0x3,%eax
f011700f:	01 d8                	add    %ebx,%eax
f0117011:	8b 40 08             	mov    0x8(%eax),%eax
f0117014:	39 c1                	cmp    %eax,%ecx
f0117016:	74 17                	je     f011702f <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0117018:	83 ec 04             	sub    $0x4,%esp
f011701b:	68 68 b1 13 f0       	push   $0xf013b168
f0117020:	68 c4 00 00 00       	push   $0xc4
f0117025:	68 91 af 13 f0       	push   $0xf013af91
f011702a:	e8 d6 91 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011702f:	ff 45 b8             	incl   -0x48(%ebp)
f0117032:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117036:	7e 80                	jle    f0116fb8 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117038:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011703f:	75 6e 61 
f0117042:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117049:	6c 00 00 
f011704c:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117052:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117057:	b8 00 00 00 00       	mov    $0x0,%eax
f011705c:	89 d7                	mov    %edx,%edi
f011705e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117060:	83 ec 0c             	sub    $0xc,%esp
f0117063:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117069:	50                   	push   %eax
f011706a:	e8 01 9d fe ff       	call   f0100d70 <execute_command>
f011706f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0117072:	eb 10                	jmp    f0117084 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117074:	83 ec 0c             	sub    $0xc,%esp
f0117077:	68 9c b1 13 f0       	push   $0xf013b19c
f011707c:	e8 8d 9c fe ff       	call   f0100d0e <cprintf>
f0117081:	83 c4 10             	add    $0x10,%esp
	}
}
f0117084:	90                   	nop
f0117085:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117088:	5b                   	pop    %ebx
f0117089:	5e                   	pop    %esi
f011708a:	5f                   	pop    %edi
f011708b:	5d                   	pop    %ebp
f011708c:	c3                   	ret    

f011708d <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011708d:	55                   	push   %ebp
f011708e:	89 e5                	mov    %esp,%ebp
f0117090:	57                   	push   %edi
f0117091:	56                   	push   %esi
f0117092:	53                   	push   %ebx
f0117093:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0117099:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f011709e:	84 c0                	test   %al,%al
f01170a0:	0f 84 be 09 00 00    	je     f0117a64 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01170a6:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01170ad:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01170b3:	bb d8 b1 13 f0       	mov    $0xf013b1d8,%ebx
f01170b8:	ba 04 00 00 00       	mov    $0x4,%edx
f01170bd:	89 c7                	mov    %eax,%edi
f01170bf:	89 de                	mov    %ebx,%esi
f01170c1:	89 d1                	mov    %edx,%ecx
f01170c3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01170c5:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01170cb:	b9 15 00 00 00       	mov    $0x15,%ecx
f01170d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01170d5:	89 d7                	mov    %edx,%edi
f01170d7:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01170d9:	83 ec 0c             	sub    $0xc,%esp
f01170dc:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01170e2:	50                   	push   %eax
f01170e3:	e8 88 9c fe ff       	call   f0100d70 <execute_command>
f01170e8:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01170eb:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01170f1:	bb 94 b4 13 f0       	mov    $0xf013b494,%ebx
f01170f6:	ba 0d 00 00 00       	mov    $0xd,%edx
f01170fb:	89 c7                	mov    %eax,%edi
f01170fd:	89 de                	mov    %ebx,%esi
f01170ff:	89 d1                	mov    %edx,%ecx
f0117101:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117103:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117109:	b9 57 00 00 00       	mov    $0x57,%ecx
f011710e:	b0 00                	mov    $0x0,%al
f0117110:	89 d7                	mov    %edx,%edi
f0117112:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117114:	83 ec 0c             	sub    $0xc,%esp
f0117117:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011711d:	50                   	push   %eax
f011711e:	e8 4d 9c fe ff       	call   f0100d70 <execute_command>
f0117123:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117126:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011712c:	bb f8 b4 13 f0       	mov    $0xf013b4f8,%ebx
f0117131:	ba 17 00 00 00       	mov    $0x17,%edx
f0117136:	89 c7                	mov    %eax,%edi
f0117138:	89 de                	mov    %ebx,%esi
f011713a:	89 d1                	mov    %edx,%ecx
f011713c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011713e:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117144:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117149:	b0 00                	mov    $0x0,%al
f011714b:	89 d7                	mov    %edx,%edi
f011714d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011714f:	83 ec 0c             	sub    $0xc,%esp
f0117152:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117158:	50                   	push   %eax
f0117159:	e8 12 9c fe ff       	call   f0100d70 <execute_command>
f011715e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117161:	83 ec 04             	sub    $0x4,%esp
f0117164:	6a 00                	push   $0x0
f0117166:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117169:	50                   	push   %eax
f011716a:	68 00 10 00 00       	push   $0x1000
f011716f:	e8 a0 2c ff ff       	call   f0109e14 <envid2env>
f0117174:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117177:	83 ec 04             	sub    $0x4,%esp
f011717a:	6a 00                	push   $0x0
f011717c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011717f:	50                   	push   %eax
f0117180:	68 01 10 00 00       	push   $0x1001
f0117185:	e8 8a 2c ff ff       	call   f0109e14 <envid2env>
f011718a:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011718d:	83 ec 04             	sub    $0x4,%esp
f0117190:	6a 00                	push   $0x0
f0117192:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117195:	50                   	push   %eax
f0117196:	68 02 10 00 00       	push   $0x1002
f011719b:	e8 74 2c ff ff       	call   f0109e14 <envid2env>
f01171a0:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01171a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171a6:	85 c0                	test   %eax,%eax
f01171a8:	74 0e                	je     f01171b8 <test_priority_normal_and_lower+0x12b>
f01171aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01171ad:	85 c0                	test   %eax,%eax
f01171af:	74 07                	je     f01171b8 <test_priority_normal_and_lower+0x12b>
f01171b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171b4:	85 c0                	test   %eax,%eax
f01171b6:	75 17                	jne    f01171cf <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01171b8:	83 ec 04             	sub    $0x4,%esp
f01171bb:	68 78 af 13 f0       	push   $0xf013af78
f01171c0:	68 eb 00 00 00       	push   $0xeb
f01171c5:	68 91 af 13 f0       	push   $0xf013af91
f01171ca:	e8 36 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01171cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171d2:	8b 40 74             	mov    0x74(%eax),%eax
f01171d5:	83 f8 14             	cmp    $0x14,%eax
f01171d8:	75 16                	jne    f01171f0 <test_priority_normal_and_lower+0x163>
f01171da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01171dd:	8b 40 74             	mov    0x74(%eax),%eax
f01171e0:	83 f8 1e             	cmp    $0x1e,%eax
f01171e3:	75 0b                	jne    f01171f0 <test_priority_normal_and_lower+0x163>
f01171e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171e8:	8b 40 74             	mov    0x74(%eax),%eax
f01171eb:	83 f8 28             	cmp    $0x28,%eax
f01171ee:	74 17                	je     f0117207 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01171f0:	83 ec 04             	sub    $0x4,%esp
f01171f3:	68 ac af 13 f0       	push   $0xf013afac
f01171f8:	68 ee 00 00 00       	push   $0xee
f01171fd:	68 91 af 13 f0       	push   $0xf013af91
f0117202:	e8 fe 8f fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117207:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011720e:	eb 44                	jmp    f0117254 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117210:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117213:	8b 48 78             	mov    0x78(%eax),%ecx
f0117216:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117219:	89 d0                	mov    %edx,%eax
f011721b:	01 c0                	add    %eax,%eax
f011721d:	01 d0                	add    %edx,%eax
f011721f:	c1 e0 03             	shl    $0x3,%eax
f0117222:	01 c8                	add    %ecx,%eax
f0117224:	8b 10                	mov    (%eax),%edx
f0117226:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117229:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117230:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117233:	8b 48 78             	mov    0x78(%eax),%ecx
f0117236:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117239:	89 d0                	mov    %edx,%eax
f011723b:	01 c0                	add    %eax,%eax
f011723d:	01 d0                	add    %edx,%eax
f011723f:	c1 e0 03             	shl    $0x3,%eax
f0117242:	01 c8                	add    %ecx,%eax
f0117244:	8b 50 08             	mov    0x8(%eax),%edx
f0117247:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011724a:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117251:	ff 45 e4             	incl   -0x1c(%ebp)
f0117254:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117258:	7e b6                	jle    f0117210 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011725a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117261:	eb 44                	jmp    f01172a7 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117263:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117266:	8b 48 78             	mov    0x78(%eax),%ecx
f0117269:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011726c:	89 d0                	mov    %edx,%eax
f011726e:	01 c0                	add    %eax,%eax
f0117270:	01 d0                	add    %edx,%eax
f0117272:	c1 e0 03             	shl    $0x3,%eax
f0117275:	01 c8                	add    %ecx,%eax
f0117277:	8b 10                	mov    (%eax),%edx
f0117279:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011727c:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117283:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117286:	8b 48 78             	mov    0x78(%eax),%ecx
f0117289:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011728c:	89 d0                	mov    %edx,%eax
f011728e:	01 c0                	add    %eax,%eax
f0117290:	01 d0                	add    %edx,%eax
f0117292:	c1 e0 03             	shl    $0x3,%eax
f0117295:	01 c8                	add    %ecx,%eax
f0117297:	8b 50 08             	mov    0x8(%eax),%edx
f011729a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011729d:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01172a4:	ff 45 e0             	incl   -0x20(%ebp)
f01172a7:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01172ab:	7e b6                	jle    f0117263 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01172ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01172b4:	eb 44                	jmp    f01172fa <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01172b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172b9:	8b 48 78             	mov    0x78(%eax),%ecx
f01172bc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01172bf:	89 d0                	mov    %edx,%eax
f01172c1:	01 c0                	add    %eax,%eax
f01172c3:	01 d0                	add    %edx,%eax
f01172c5:	c1 e0 03             	shl    $0x3,%eax
f01172c8:	01 c8                	add    %ecx,%eax
f01172ca:	8b 10                	mov    (%eax),%edx
f01172cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01172cf:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01172d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172d9:	8b 48 78             	mov    0x78(%eax),%ecx
f01172dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01172df:	89 d0                	mov    %edx,%eax
f01172e1:	01 c0                	add    %eax,%eax
f01172e3:	01 d0                	add    %edx,%eax
f01172e5:	c1 e0 03             	shl    $0x3,%eax
f01172e8:	01 c8                	add    %ecx,%eax
f01172ea:	8b 50 08             	mov    0x8(%eax),%edx
f01172ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01172f0:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01172f7:	ff 45 dc             	incl   -0x24(%ebp)
f01172fa:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01172fe:	7e b6                	jle    f01172b6 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117300:	e8 a2 5b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117305:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117308:	e8 bb ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011730d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117310:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117313:	83 ec 08             	sub    $0x8,%esp
f0117316:	6a 03                	push   $0x3
f0117318:	50                   	push   %eax
f0117319:	e8 d4 3f ff ff       	call   f010b2f2 <set_program_priority>
f011731e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117321:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117324:	83 ec 08             	sub    $0x8,%esp
f0117327:	6a 03                	push   $0x3
f0117329:	50                   	push   %eax
f011732a:	e8 c3 3f ff ff       	call   f010b2f2 <set_program_priority>
f011732f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117332:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117335:	83 ec 08             	sub    $0x8,%esp
f0117338:	6a 03                	push   $0x3
f011733a:	50                   	push   %eax
f011733b:	e8 b2 3f ff ff       	call   f010b2f2 <set_program_priority>
f0117340:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117343:	e8 80 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117348:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011734b:	74 17                	je     f0117364 <test_priority_normal_and_lower+0x2d7>
f011734d:	83 ec 04             	sub    $0x4,%esp
f0117350:	68 f8 af 13 f0       	push   $0xf013aff8
f0117355:	68 0a 01 00 00       	push   $0x10a
f011735a:	68 91 af 13 f0       	push   $0xf013af91
f011735f:	e8 a1 8e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117364:	e8 3e 5b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117369:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011736c:	74 17                	je     f0117385 <test_priority_normal_and_lower+0x2f8>
f011736e:	83 ec 04             	sub    $0x4,%esp
f0117371:	68 f8 af 13 f0       	push   $0xf013aff8
f0117376:	68 0b 01 00 00       	push   $0x10b
f011737b:	68 91 af 13 f0       	push   $0xf013af91
f0117380:	e8 80 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117385:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117388:	8b 40 74             	mov    0x74(%eax),%eax
f011738b:	83 f8 14             	cmp    $0x14,%eax
f011738e:	75 16                	jne    f01173a6 <test_priority_normal_and_lower+0x319>
f0117390:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117393:	8b 40 74             	mov    0x74(%eax),%eax
f0117396:	83 f8 1e             	cmp    $0x1e,%eax
f0117399:	75 0b                	jne    f01173a6 <test_priority_normal_and_lower+0x319>
f011739b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011739e:	8b 40 74             	mov    0x74(%eax),%eax
f01173a1:	83 f8 28             	cmp    $0x28,%eax
f01173a4:	74 17                	je     f01173bd <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01173a6:	83 ec 04             	sub    $0x4,%esp
f01173a9:	68 24 b0 13 f0       	push   $0xf013b024
f01173ae:	68 0e 01 00 00       	push   $0x10e
f01173b3:	68 91 af 13 f0       	push   $0xf013af91
f01173b8:	e8 48 8e fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01173bd:	e8 e5 5a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01173c2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173c5:	e8 fe c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01173ca:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01173cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173d0:	83 ec 08             	sub    $0x8,%esp
f01173d3:	6a 02                	push   $0x2
f01173d5:	50                   	push   %eax
f01173d6:	e8 17 3f ff ff       	call   f010b2f2 <set_program_priority>
f01173db:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01173de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01173e1:	83 ec 08             	sub    $0x8,%esp
f01173e4:	6a 02                	push   $0x2
f01173e6:	50                   	push   %eax
f01173e7:	e8 06 3f ff ff       	call   f010b2f2 <set_program_priority>
f01173ec:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01173ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173f2:	83 ec 08             	sub    $0x8,%esp
f01173f5:	6a 02                	push   $0x2
f01173f7:	50                   	push   %eax
f01173f8:	e8 f5 3e ff ff       	call   f010b2f2 <set_program_priority>
f01173fd:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117400:	e8 c3 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117405:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117408:	74 17                	je     f0117421 <test_priority_normal_and_lower+0x394>
f011740a:	83 ec 04             	sub    $0x4,%esp
f011740d:	68 f8 af 13 f0       	push   $0xf013aff8
f0117412:	68 18 01 00 00       	push   $0x118
f0117417:	68 91 af 13 f0       	push   $0xf013af91
f011741c:	e8 e4 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117421:	e8 81 5a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117426:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117429:	74 21                	je     f011744c <test_priority_normal_and_lower+0x3bf>
f011742b:	e8 77 5a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117430:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117433:	29 c2                	sub    %eax,%edx
f0117435:	89 d0                	mov    %edx,%eax
f0117437:	50                   	push   %eax
f0117438:	68 78 b0 13 f0       	push   $0xf013b078
f011743d:	68 19 01 00 00       	push   $0x119
f0117442:	68 91 af 13 f0       	push   $0xf013af91
f0117447:	e8 b9 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011744c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011744f:	8b 40 74             	mov    0x74(%eax),%eax
f0117452:	83 f8 0a             	cmp    $0xa,%eax
f0117455:	75 16                	jne    f011746d <test_priority_normal_and_lower+0x3e0>
f0117457:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011745a:	8b 40 74             	mov    0x74(%eax),%eax
f011745d:	83 f8 0f             	cmp    $0xf,%eax
f0117460:	75 0b                	jne    f011746d <test_priority_normal_and_lower+0x3e0>
f0117462:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117465:	8b 40 74             	mov    0x74(%eax),%eax
f0117468:	83 f8 14             	cmp    $0x14,%eax
f011746b:	74 17                	je     f0117484 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f011746d:	83 ec 04             	sub    $0x4,%esp
f0117470:	68 a8 b0 13 f0       	push   $0xf013b0a8
f0117475:	68 1c 01 00 00       	push   $0x11c
f011747a:	68 91 af 13 f0       	push   $0xf013af91
f011747f:	e8 81 8d fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117484:	e8 1e 5a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117489:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011748c:	e8 37 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117491:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117494:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117497:	83 ec 08             	sub    $0x8,%esp
f011749a:	6a 02                	push   $0x2
f011749c:	50                   	push   %eax
f011749d:	e8 50 3e ff ff       	call   f010b2f2 <set_program_priority>
f01174a2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01174a5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174a8:	83 ec 08             	sub    $0x8,%esp
f01174ab:	6a 02                	push   $0x2
f01174ad:	50                   	push   %eax
f01174ae:	e8 3f 3e ff ff       	call   f010b2f2 <set_program_priority>
f01174b3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01174b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174b9:	83 ec 08             	sub    $0x8,%esp
f01174bc:	6a 02                	push   $0x2
f01174be:	50                   	push   %eax
f01174bf:	e8 2e 3e ff ff       	call   f010b2f2 <set_program_priority>
f01174c4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174c7:	e8 fc c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01174cc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01174cf:	74 17                	je     f01174e8 <test_priority_normal_and_lower+0x45b>
f01174d1:	83 ec 04             	sub    $0x4,%esp
f01174d4:	68 f8 af 13 f0       	push   $0xf013aff8
f01174d9:	68 26 01 00 00       	push   $0x126
f01174de:	68 91 af 13 f0       	push   $0xf013af91
f01174e3:	e8 1d 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01174e8:	e8 ba 59 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01174ed:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01174f0:	74 21                	je     f0117513 <test_priority_normal_and_lower+0x486>
f01174f2:	e8 b0 59 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01174f7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01174fa:	29 c2                	sub    %eax,%edx
f01174fc:	89 d0                	mov    %edx,%eax
f01174fe:	50                   	push   %eax
f01174ff:	68 78 b0 13 f0       	push   $0xf013b078
f0117504:	68 27 01 00 00       	push   $0x127
f0117509:	68 91 af 13 f0       	push   $0xf013af91
f011750e:	e8 f2 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117513:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117516:	8b 40 74             	mov    0x74(%eax),%eax
f0117519:	83 f8 0a             	cmp    $0xa,%eax
f011751c:	75 16                	jne    f0117534 <test_priority_normal_and_lower+0x4a7>
f011751e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117521:	8b 40 74             	mov    0x74(%eax),%eax
f0117524:	83 f8 0f             	cmp    $0xf,%eax
f0117527:	75 0b                	jne    f0117534 <test_priority_normal_and_lower+0x4a7>
f0117529:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011752c:	8b 40 74             	mov    0x74(%eax),%eax
f011752f:	83 f8 0a             	cmp    $0xa,%eax
f0117532:	74 17                	je     f011754b <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117534:	83 ec 04             	sub    $0x4,%esp
f0117537:	68 a8 b0 13 f0       	push   $0xf013b0a8
f011753c:	68 2a 01 00 00       	push   $0x12a
f0117541:	68 91 af 13 f0       	push   $0xf013af91
f0117546:	e8 ba 8c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f011754b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117552:	eb 7a                	jmp    f01175ce <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117554:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117557:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011755e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117561:	8b 58 78             	mov    0x78(%eax),%ebx
f0117564:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117567:	89 d0                	mov    %edx,%eax
f0117569:	01 c0                	add    %eax,%eax
f011756b:	01 d0                	add    %edx,%eax
f011756d:	c1 e0 03             	shl    $0x3,%eax
f0117570:	01 d8                	add    %ebx,%eax
f0117572:	8b 00                	mov    (%eax),%eax
f0117574:	39 c1                	cmp    %eax,%ecx
f0117576:	74 17                	je     f011758f <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0117578:	83 ec 04             	sub    $0x4,%esp
f011757b:	68 68 b1 13 f0       	push   $0xf013b168
f0117580:	68 2f 01 00 00       	push   $0x12f
f0117585:	68 91 af 13 f0       	push   $0xf013af91
f011758a:	e8 76 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011758f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117592:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117599:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011759c:	8b 58 78             	mov    0x78(%eax),%ebx
f011759f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01175a2:	89 d0                	mov    %edx,%eax
f01175a4:	01 c0                	add    %eax,%eax
f01175a6:	01 d0                	add    %edx,%eax
f01175a8:	c1 e0 03             	shl    $0x3,%eax
f01175ab:	01 d8                	add    %ebx,%eax
f01175ad:	8b 40 08             	mov    0x8(%eax),%eax
f01175b0:	39 c1                	cmp    %eax,%ecx
f01175b2:	74 17                	je     f01175cb <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01175b4:	83 ec 04             	sub    $0x4,%esp
f01175b7:	68 68 b1 13 f0       	push   $0xf013b168
f01175bc:	68 32 01 00 00       	push   $0x132
f01175c1:	68 91 af 13 f0       	push   $0xf013af91
f01175c6:	e8 3a 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01175cb:	ff 45 d8             	incl   -0x28(%ebp)
f01175ce:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01175d2:	7e 80                	jle    f0117554 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01175d4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01175db:	eb 7a                	jmp    f0117657 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01175dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01175e0:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01175e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175ea:	8b 58 78             	mov    0x78(%eax),%ebx
f01175ed:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01175f0:	89 d0                	mov    %edx,%eax
f01175f2:	01 c0                	add    %eax,%eax
f01175f4:	01 d0                	add    %edx,%eax
f01175f6:	c1 e0 03             	shl    $0x3,%eax
f01175f9:	01 d8                	add    %ebx,%eax
f01175fb:	8b 00                	mov    (%eax),%eax
f01175fd:	39 c1                	cmp    %eax,%ecx
f01175ff:	74 17                	je     f0117618 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117601:	83 ec 04             	sub    $0x4,%esp
f0117604:	68 68 b1 13 f0       	push   $0xf013b168
f0117609:	68 38 01 00 00       	push   $0x138
f011760e:	68 91 af 13 f0       	push   $0xf013af91
f0117613:	e8 ed 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117618:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011761b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117622:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117625:	8b 58 78             	mov    0x78(%eax),%ebx
f0117628:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011762b:	89 d0                	mov    %edx,%eax
f011762d:	01 c0                	add    %eax,%eax
f011762f:	01 d0                	add    %edx,%eax
f0117631:	c1 e0 03             	shl    $0x3,%eax
f0117634:	01 d8                	add    %ebx,%eax
f0117636:	8b 40 08             	mov    0x8(%eax),%eax
f0117639:	39 c1                	cmp    %eax,%ecx
f011763b:	74 17                	je     f0117654 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011763d:	83 ec 04             	sub    $0x4,%esp
f0117640:	68 68 b1 13 f0       	push   $0xf013b168
f0117645:	68 3b 01 00 00       	push   $0x13b
f011764a:	68 91 af 13 f0       	push   $0xf013af91
f011764f:	e8 b1 8b fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117654:	ff 45 d4             	incl   -0x2c(%ebp)
f0117657:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011765b:	7e 80                	jle    f01175dd <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011765d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117664:	eb 7a                	jmp    f01176e0 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117666:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117669:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117670:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117673:	8b 58 78             	mov    0x78(%eax),%ebx
f0117676:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117679:	89 d0                	mov    %edx,%eax
f011767b:	01 c0                	add    %eax,%eax
f011767d:	01 d0                	add    %edx,%eax
f011767f:	c1 e0 03             	shl    $0x3,%eax
f0117682:	01 d8                	add    %ebx,%eax
f0117684:	8b 00                	mov    (%eax),%eax
f0117686:	39 c1                	cmp    %eax,%ecx
f0117688:	74 17                	je     f01176a1 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f011768a:	83 ec 04             	sub    $0x4,%esp
f011768d:	68 68 b1 13 f0       	push   $0xf013b168
f0117692:	68 41 01 00 00       	push   $0x141
f0117697:	68 91 af 13 f0       	push   $0xf013af91
f011769c:	e8 64 8b fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01176a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176a4:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01176ab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01176b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01176b4:	89 d0                	mov    %edx,%eax
f01176b6:	01 c0                	add    %eax,%eax
f01176b8:	01 d0                	add    %edx,%eax
f01176ba:	c1 e0 03             	shl    $0x3,%eax
f01176bd:	01 d8                	add    %ebx,%eax
f01176bf:	8b 40 08             	mov    0x8(%eax),%eax
f01176c2:	39 c1                	cmp    %eax,%ecx
f01176c4:	74 17                	je     f01176dd <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01176c6:	83 ec 04             	sub    $0x4,%esp
f01176c9:	68 68 b1 13 f0       	push   $0xf013b168
f01176ce:	68 44 01 00 00       	push   $0x144
f01176d3:	68 91 af 13 f0       	push   $0xf013af91
f01176d8:	e8 28 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01176dd:	ff 45 d0             	incl   -0x30(%ebp)
f01176e0:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01176e4:	7e 80                	jle    f0117666 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01176e6:	e8 bc 57 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01176eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176ee:	e8 d5 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01176f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01176f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176f9:	83 ec 08             	sub    $0x8,%esp
f01176fc:	6a 01                	push   $0x1
f01176fe:	50                   	push   %eax
f01176ff:	e8 ee 3b ff ff       	call   f010b2f2 <set_program_priority>
f0117704:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117707:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011770a:	83 ec 08             	sub    $0x8,%esp
f011770d:	6a 01                	push   $0x1
f011770f:	50                   	push   %eax
f0117710:	e8 dd 3b ff ff       	call   f010b2f2 <set_program_priority>
f0117715:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117718:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011771b:	83 ec 08             	sub    $0x8,%esp
f011771e:	6a 01                	push   $0x1
f0117720:	50                   	push   %eax
f0117721:	e8 cc 3b ff ff       	call   f010b2f2 <set_program_priority>
f0117726:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117729:	e8 9a c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011772e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117731:	74 17                	je     f011774a <test_priority_normal_and_lower+0x6bd>
f0117733:	83 ec 04             	sub    $0x4,%esp
f0117736:	68 f8 af 13 f0       	push   $0xf013aff8
f011773b:	68 4d 01 00 00       	push   $0x14d
f0117740:	68 91 af 13 f0       	push   $0xf013af91
f0117745:	e8 bb 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f011774a:	e8 58 57 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011774f:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117752:	83 f8 0d             	cmp    $0xd,%eax
f0117755:	74 17                	je     f011776e <test_priority_normal_and_lower+0x6e1>
f0117757:	83 ec 04             	sub    $0x4,%esp
f011775a:	68 04 b3 13 f0       	push   $0xf013b304
f011775f:	68 4e 01 00 00       	push   $0x14e
f0117764:	68 91 af 13 f0       	push   $0xf013af91
f0117769:	e8 97 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011776e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117771:	8b 40 74             	mov    0x74(%eax),%eax
f0117774:	83 f8 05             	cmp    $0x5,%eax
f0117777:	75 16                	jne    f011778f <test_priority_normal_and_lower+0x702>
f0117779:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011777c:	8b 40 74             	mov    0x74(%eax),%eax
f011777f:	83 f8 07             	cmp    $0x7,%eax
f0117782:	75 0b                	jne    f011778f <test_priority_normal_and_lower+0x702>
f0117784:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117787:	8b 40 74             	mov    0x74(%eax),%eax
f011778a:	83 f8 05             	cmp    $0x5,%eax
f011778d:	74 17                	je     f01177a6 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f011778f:	83 ec 04             	sub    $0x4,%esp
f0117792:	68 4c b3 13 f0       	push   $0xf013b34c
f0117797:	68 51 01 00 00       	push   $0x151
f011779c:	68 91 af 13 f0       	push   $0xf013af91
f01177a1:	e8 5f 8a fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f01177a6:	e8 fc 56 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01177ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177ae:	e8 15 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177b3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01177b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177b9:	83 ec 08             	sub    $0x8,%esp
f01177bc:	6a 01                	push   $0x1
f01177be:	50                   	push   %eax
f01177bf:	e8 2e 3b ff ff       	call   f010b2f2 <set_program_priority>
f01177c4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01177c7:	e8 fc c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177cc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01177cf:	74 17                	je     f01177e8 <test_priority_normal_and_lower+0x75b>
f01177d1:	83 ec 04             	sub    $0x4,%esp
f01177d4:	68 f8 af 13 f0       	push   $0xf013aff8
f01177d9:	68 57 01 00 00       	push   $0x157
f01177de:	68 91 af 13 f0       	push   $0xf013af91
f01177e3:	e8 1d 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01177e8:	e8 ba 56 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01177ed:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01177f0:	83 f8 03             	cmp    $0x3,%eax
f01177f3:	74 17                	je     f011780c <test_priority_normal_and_lower+0x77f>
f01177f5:	83 ec 04             	sub    $0x4,%esp
f01177f8:	68 f8 af 13 f0       	push   $0xf013aff8
f01177fd:	68 58 01 00 00       	push   $0x158
f0117802:	68 91 af 13 f0       	push   $0xf013af91
f0117807:	e8 f9 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011780c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011780f:	8b 40 74             	mov    0x74(%eax),%eax
f0117812:	83 f8 02             	cmp    $0x2,%eax
f0117815:	75 16                	jne    f011782d <test_priority_normal_and_lower+0x7a0>
f0117817:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011781a:	8b 40 74             	mov    0x74(%eax),%eax
f011781d:	83 f8 07             	cmp    $0x7,%eax
f0117820:	75 0b                	jne    f011782d <test_priority_normal_and_lower+0x7a0>
f0117822:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117825:	8b 40 74             	mov    0x74(%eax),%eax
f0117828:	83 f8 05             	cmp    $0x5,%eax
f011782b:	74 17                	je     f0117844 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011782d:	83 ec 04             	sub    $0x4,%esp
f0117830:	68 2c b1 13 f0       	push   $0xf013b12c
f0117835:	68 5b 01 00 00       	push   $0x15b
f011783a:	68 91 af 13 f0       	push   $0xf013af91
f011783f:	e8 c1 89 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117844:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011784b:	e9 80 00 00 00       	jmp    f01178d0 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117850:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117853:	83 c0 08             	add    $0x8,%eax
f0117856:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011785d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117860:	8b 58 78             	mov    0x78(%eax),%ebx
f0117863:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117866:	89 d0                	mov    %edx,%eax
f0117868:	01 c0                	add    %eax,%eax
f011786a:	01 d0                	add    %edx,%eax
f011786c:	c1 e0 03             	shl    $0x3,%eax
f011786f:	01 d8                	add    %ebx,%eax
f0117871:	8b 00                	mov    (%eax),%eax
f0117873:	39 c1                	cmp    %eax,%ecx
f0117875:	74 17                	je     f011788e <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117877:	83 ec 04             	sub    $0x4,%esp
f011787a:	68 7c b3 13 f0       	push   $0xf013b37c
f011787f:	68 60 01 00 00       	push   $0x160
f0117884:	68 91 af 13 f0       	push   $0xf013af91
f0117889:	e8 77 89 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011788e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117891:	83 c0 08             	add    $0x8,%eax
f0117894:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011789b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011789e:	8b 58 78             	mov    0x78(%eax),%ebx
f01178a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01178a4:	89 d0                	mov    %edx,%eax
f01178a6:	01 c0                	add    %eax,%eax
f01178a8:	01 d0                	add    %edx,%eax
f01178aa:	c1 e0 03             	shl    $0x3,%eax
f01178ad:	01 d8                	add    %ebx,%eax
f01178af:	8b 40 08             	mov    0x8(%eax),%eax
f01178b2:	39 c1                	cmp    %eax,%ecx
f01178b4:	74 17                	je     f01178cd <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01178b6:	83 ec 04             	sub    $0x4,%esp
f01178b9:	68 7c b3 13 f0       	push   $0xf013b37c
f01178be:	68 63 01 00 00       	push   $0x163
f01178c3:	68 91 af 13 f0       	push   $0xf013af91
f01178c8:	e8 38 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01178cd:	ff 45 cc             	incl   -0x34(%ebp)
f01178d0:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01178d4:	0f 8e 76 ff ff ff    	jle    f0117850 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01178da:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01178e1:	e9 80 00 00 00       	jmp    f0117966 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01178e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01178e9:	83 c0 03             	add    $0x3,%eax
f01178ec:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01178f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178f6:	8b 58 78             	mov    0x78(%eax),%ebx
f01178f9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01178fc:	89 d0                	mov    %edx,%eax
f01178fe:	01 c0                	add    %eax,%eax
f0117900:	01 d0                	add    %edx,%eax
f0117902:	c1 e0 03             	shl    $0x3,%eax
f0117905:	01 d8                	add    %ebx,%eax
f0117907:	8b 00                	mov    (%eax),%eax
f0117909:	39 c1                	cmp    %eax,%ecx
f011790b:	74 17                	je     f0117924 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f011790d:	ff 75 c8             	pushl  -0x38(%ebp)
f0117910:	68 e8 b3 13 f0       	push   $0xf013b3e8
f0117915:	68 69 01 00 00       	push   $0x169
f011791a:	68 91 af 13 f0       	push   $0xf013af91
f011791f:	e8 e1 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117924:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117927:	83 c0 03             	add    $0x3,%eax
f011792a:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117931:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117934:	8b 58 78             	mov    0x78(%eax),%ebx
f0117937:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011793a:	89 d0                	mov    %edx,%eax
f011793c:	01 c0                	add    %eax,%eax
f011793e:	01 d0                	add    %edx,%eax
f0117940:	c1 e0 03             	shl    $0x3,%eax
f0117943:	01 d8                	add    %ebx,%eax
f0117945:	8b 40 08             	mov    0x8(%eax),%eax
f0117948:	39 c1                	cmp    %eax,%ecx
f011794a:	74 17                	je     f0117963 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011794c:	83 ec 04             	sub    $0x4,%esp
f011794f:	68 7c b3 13 f0       	push   $0xf013b37c
f0117954:	68 6c 01 00 00       	push   $0x16c
f0117959:	68 91 af 13 f0       	push   $0xf013af91
f011795e:	e8 a2 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117963:	ff 45 c8             	incl   -0x38(%ebp)
f0117966:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011796a:	0f 8e 76 ff ff ff    	jle    f01178e6 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117970:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117977:	e9 80 00 00 00       	jmp    f01179fc <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011797c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011797f:	83 c0 05             	add    $0x5,%eax
f0117982:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117989:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011798c:	8b 58 78             	mov    0x78(%eax),%ebx
f011798f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117992:	89 d0                	mov    %edx,%eax
f0117994:	01 c0                	add    %eax,%eax
f0117996:	01 d0                	add    %edx,%eax
f0117998:	c1 e0 03             	shl    $0x3,%eax
f011799b:	01 d8                	add    %ebx,%eax
f011799d:	8b 00                	mov    (%eax),%eax
f011799f:	39 c1                	cmp    %eax,%ecx
f01179a1:	74 17                	je     f01179ba <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179a3:	83 ec 04             	sub    $0x4,%esp
f01179a6:	68 7c b3 13 f0       	push   $0xf013b37c
f01179ab:	68 72 01 00 00       	push   $0x172
f01179b0:	68 91 af 13 f0       	push   $0xf013af91
f01179b5:	e8 4b 88 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01179ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01179bd:	83 c0 05             	add    $0x5,%eax
f01179c0:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01179c7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179ca:	8b 58 78             	mov    0x78(%eax),%ebx
f01179cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01179d0:	89 d0                	mov    %edx,%eax
f01179d2:	01 c0                	add    %eax,%eax
f01179d4:	01 d0                	add    %edx,%eax
f01179d6:	c1 e0 03             	shl    $0x3,%eax
f01179d9:	01 d8                	add    %ebx,%eax
f01179db:	8b 40 08             	mov    0x8(%eax),%eax
f01179de:	39 c1                	cmp    %eax,%ecx
f01179e0:	74 17                	je     f01179f9 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179e2:	83 ec 04             	sub    $0x4,%esp
f01179e5:	68 7c b3 13 f0       	push   $0xf013b37c
f01179ea:	68 75 01 00 00       	push   $0x175
f01179ef:	68 91 af 13 f0       	push   $0xf013af91
f01179f4:	e8 0c 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01179f9:	ff 45 c4             	incl   -0x3c(%ebp)
f01179fc:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117a00:	0f 8e 76 ff ff ff    	jle    f011797c <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117a06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a09:	83 ec 08             	sub    $0x8,%esp
f0117a0c:	6a 05                	push   $0x5
f0117a0e:	50                   	push   %eax
f0117a0f:	e8 de 38 ff ff       	call   f010b2f2 <set_program_priority>
f0117a14:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117a17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a1a:	83 ec 08             	sub    $0x8,%esp
f0117a1d:	6a 05                	push   $0x5
f0117a1f:	50                   	push   %eax
f0117a20:	e8 cd 38 ff ff       	call   f010b2f2 <set_program_priority>
f0117a25:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117a28:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117a2f:	75 6e 61 
f0117a32:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117a39:	6c 00 00 
f0117a3c:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117a42:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117a47:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a4c:	89 d7                	mov    %edx,%edi
f0117a4e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117a50:	83 ec 0c             	sub    $0xc,%esp
f0117a53:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117a59:	50                   	push   %eax
f0117a5a:	e8 11 93 fe ff       	call   f0100d70 <execute_command>
f0117a5f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117a62:	eb 10                	jmp    f0117a74 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117a64:	83 ec 0c             	sub    $0xc,%esp
f0117a67:	68 58 b4 13 f0       	push   $0xf013b458
f0117a6c:	e8 9d 92 fe ff       	call   f0100d0e <cprintf>
f0117a71:	83 c4 10             	add    $0x10,%esp
	}
}
f0117a74:	90                   	nop
f0117a75:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117a78:	5b                   	pop    %ebx
f0117a79:	5e                   	pop    %esi
f0117a7a:	5f                   	pop    %edi
f0117a7b:	5d                   	pop    %ebp
f0117a7c:	c3                   	ret    

f0117a7d <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117a7d:	55                   	push   %ebp
f0117a7e:	89 e5                	mov    %esp,%ebp
f0117a80:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0117a85:	83 f8 03             	cmp    $0x3,%eax
f0117a88:	75 04                	jne    f0117a8e <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117a8a:	b0 01                	mov    $0x1,%al
f0117a8c:	eb 02                	jmp    f0117a90 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117a8e:	b0 00                	mov    $0x0,%al
f0117a90:	5d                   	pop    %ebp
f0117a91:	c3                   	ret    

f0117a92 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117a92:	55                   	push   %ebp
f0117a93:	89 e5                	mov    %esp,%ebp
f0117a95:	57                   	push   %edi
f0117a96:	53                   	push   %ebx
f0117a97:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117a9d:	83 ec 0c             	sub    $0xc,%esp
f0117aa0:	68 5c b5 13 f0       	push   $0xf013b55c
f0117aa5:	e8 64 92 fe ff       	call   f0100d0e <cprintf>
f0117aaa:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117aad:	83 ec 0c             	sub    $0xc,%esp
f0117ab0:	68 8c b5 13 f0       	push   $0xf013b58c
f0117ab5:	e8 54 92 fe ff       	call   f0100d0e <cprintf>
f0117aba:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117abd:	83 ec 0c             	sub    $0xc,%esp
f0117ac0:	68 5c b5 13 f0       	push   $0xf013b55c
f0117ac5:	e8 44 92 fe ff       	call   f0100d0e <cprintf>
f0117aca:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117acd:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117ad1:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117ad5:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117adb:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117ae1:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117ae8:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117aef:	e8 b3 53 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117af4:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117af7:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117afd:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117b02:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b07:	89 d7                	mov    %edx,%edi
f0117b09:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117b0b:	e8 97 53 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117b10:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117b13:	e8 b0 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b18:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117b1b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117b22:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b2a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117b2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b30:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b35:	f7 75 d4             	divl   -0x2c(%ebp)
f0117b38:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b3b:	29 d0                	sub    %edx,%eax
f0117b3d:	89 c1                	mov    %eax,%ecx
f0117b3f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117b46:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117b4b:	0f b6 d0             	movzbl %al,%edx
f0117b4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b51:	01 d0                	add    %edx,%eax
f0117b53:	48                   	dec    %eax
f0117b54:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117b57:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b5f:	f7 75 cc             	divl   -0x34(%ebp)
f0117b62:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b65:	29 d0                	sub    %edx,%eax
f0117b67:	01 c1                	add    %eax,%ecx
f0117b69:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117b70:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117b75:	0f b6 c0             	movzbl %al,%eax
f0117b78:	c1 e0 04             	shl    $0x4,%eax
f0117b7b:	89 c2                	mov    %eax,%edx
f0117b7d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b80:	01 d0                	add    %edx,%eax
f0117b82:	48                   	dec    %eax
f0117b83:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117b86:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117b89:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b8e:	f7 75 c4             	divl   -0x3c(%ebp)
f0117b91:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117b94:	29 d0                	sub    %edx,%eax
f0117b96:	01 c8                	add    %ecx,%eax
f0117b98:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117b9d:	29 c2                	sub    %eax,%edx
f0117b9f:	89 d0                	mov    %edx,%eax
f0117ba1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117ba4:	83 ec 0c             	sub    $0xc,%esp
f0117ba7:	ff 75 bc             	pushl  -0x44(%ebp)
f0117baa:	e8 e0 ff fe ff       	call   f0107b8f <kmalloc>
f0117baf:	83 c4 10             	add    $0x10,%esp
f0117bb2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117bb8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117bbe:	85 c0                	test   %eax,%eax
f0117bc0:	74 14                	je     f0117bd6 <test_kmalloc+0x144>
f0117bc2:	83 ec 04             	sub    $0x4,%esp
f0117bc5:	68 e8 b5 13 f0       	push   $0xf013b5e8
f0117bca:	6a 40                	push   $0x40
f0117bcc:	68 1a b6 13 f0       	push   $0xf013b61a
f0117bd1:	e8 2f 86 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bd6:	e8 ed c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117bdb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bde:	74 14                	je     f0117bf4 <test_kmalloc+0x162>
f0117be0:	83 ec 04             	sub    $0x4,%esp
f0117be3:	68 34 b6 13 f0       	push   $0xf013b634
f0117be8:	6a 41                	push   $0x41
f0117bea:	68 1a b6 13 f0       	push   $0xf013b61a
f0117bef:	e8 11 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117bf4:	e8 ae 52 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117bf9:	89 c2                	mov    %eax,%edx
f0117bfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117bfe:	39 c2                	cmp    %eax,%edx
f0117c00:	74 14                	je     f0117c16 <test_kmalloc+0x184>
f0117c02:	83 ec 04             	sub    $0x4,%esp
f0117c05:	68 9c b6 13 f0       	push   $0xf013b69c
f0117c0a:	6a 42                	push   $0x42
f0117c0c:	68 1a b6 13 f0       	push   $0xf013b61a
f0117c11:	e8 ef 85 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117c16:	83 ec 0c             	sub    $0xc,%esp
f0117c19:	68 dc b6 13 f0       	push   $0xf013b6dc
f0117c1e:	e8 eb 90 fe ff       	call   f0100d0e <cprintf>
f0117c23:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117c26:	e8 7c 52 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117c2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c2e:	e8 95 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c33:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117c36:	83 ec 0c             	sub    $0xc,%esp
f0117c39:	68 00 fc 1f 00       	push   $0x1ffc00
f0117c3e:	e8 4c ff fe ff       	call   f0107b8f <kmalloc>
f0117c43:	83 c4 10             	add    $0x10,%esp
f0117c46:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c4c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c52:	89 c1                	mov    %eax,%ecx
f0117c54:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117c5b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c63:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117c66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c69:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c6e:	f7 75 b8             	divl   -0x48(%ebp)
f0117c71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c74:	29 d0                	sub    %edx,%eax
f0117c76:	89 c3                	mov    %eax,%ebx
f0117c78:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117c7f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117c84:	0f b6 d0             	movzbl %al,%edx
f0117c87:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c8a:	01 d0                	add    %edx,%eax
f0117c8c:	48                   	dec    %eax
f0117c8d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117c90:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117c93:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c98:	f7 75 b0             	divl   -0x50(%ebp)
f0117c9b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117c9e:	29 d0                	sub    %edx,%eax
f0117ca0:	01 c3                	add    %eax,%ebx
f0117ca2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117ca9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117cae:	0f b6 c0             	movzbl %al,%eax
f0117cb1:	c1 e0 04             	shl    $0x4,%eax
f0117cb4:	89 c2                	mov    %eax,%edx
f0117cb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117cb9:	01 d0                	add    %edx,%eax
f0117cbb:	48                   	dec    %eax
f0117cbc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117cbf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117cc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cc7:	f7 75 a8             	divl   -0x58(%ebp)
f0117cca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117ccd:	29 d0                	sub    %edx,%eax
f0117ccf:	01 d8                	add    %ebx,%eax
f0117cd1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117cd6:	39 c1                	cmp    %eax,%ecx
f0117cd8:	74 14                	je     f0117cee <test_kmalloc+0x25c>
f0117cda:	83 ec 04             	sub    $0x4,%esp
f0117cdd:	68 00 b7 13 f0       	push   $0xf013b700
f0117ce2:	6a 49                	push   $0x49
f0117ce4:	68 1a b6 13 f0       	push   $0xf013b61a
f0117ce9:	e8 17 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117cee:	e8 d5 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117cf3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117cf6:	74 14                	je     f0117d0c <test_kmalloc+0x27a>
f0117cf8:	83 ec 04             	sub    $0x4,%esp
f0117cfb:	68 34 b6 13 f0       	push   $0xf013b634
f0117d00:	6a 4a                	push   $0x4a
f0117d02:	68 1a b6 13 f0       	push   $0xf013b61a
f0117d07:	e8 f9 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d0c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d0f:	e8 93 51 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117d14:	29 c3                	sub    %eax,%ebx
f0117d16:	89 d8                	mov    %ebx,%eax
f0117d18:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117d1d:	74 14                	je     f0117d33 <test_kmalloc+0x2a1>
f0117d1f:	83 ec 04             	sub    $0x4,%esp
f0117d22:	68 9c b6 13 f0       	push   $0xf013b69c
f0117d27:	6a 4b                	push   $0x4b
f0117d29:	68 1a b6 13 f0       	push   $0xf013b61a
f0117d2e:	e8 d2 84 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d33:	e8 6f 51 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117d38:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d3b:	e8 88 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d40:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117d43:	83 ec 0c             	sub    $0xc,%esp
f0117d46:	68 00 fc 1f 00       	push   $0x1ffc00
f0117d4b:	e8 3f fe fe ff       	call   f0107b8f <kmalloc>
f0117d50:	83 c4 10             	add    $0x10,%esp
f0117d53:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d59:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117d5f:	89 c1                	mov    %eax,%ecx
f0117d61:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117d68:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117d6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d70:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117d73:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d7b:	f7 75 a0             	divl   -0x60(%ebp)
f0117d7e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d81:	29 d0                	sub    %edx,%eax
f0117d83:	89 c3                	mov    %eax,%ebx
f0117d85:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117d8c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117d91:	0f b6 d0             	movzbl %al,%edx
f0117d94:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117d97:	01 d0                	add    %edx,%eax
f0117d99:	48                   	dec    %eax
f0117d9a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117d9d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117da0:	ba 00 00 00 00       	mov    $0x0,%edx
f0117da5:	f7 75 98             	divl   -0x68(%ebp)
f0117da8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117dab:	29 d0                	sub    %edx,%eax
f0117dad:	01 c3                	add    %eax,%ebx
f0117daf:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117db6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117dbb:	0f b6 c0             	movzbl %al,%eax
f0117dbe:	c1 e0 04             	shl    $0x4,%eax
f0117dc1:	89 c2                	mov    %eax,%edx
f0117dc3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117dc6:	01 d0                	add    %edx,%eax
f0117dc8:	48                   	dec    %eax
f0117dc9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117dcc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117dcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dd4:	f7 75 90             	divl   -0x70(%ebp)
f0117dd7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117dda:	29 d0                	sub    %edx,%eax
f0117ddc:	01 d8                	add    %ebx,%eax
f0117dde:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117de3:	39 c1                	cmp    %eax,%ecx
f0117de5:	74 14                	je     f0117dfb <test_kmalloc+0x369>
f0117de7:	83 ec 04             	sub    $0x4,%esp
f0117dea:	68 00 b7 13 f0       	push   $0xf013b700
f0117def:	6a 51                	push   $0x51
f0117df1:	68 1a b6 13 f0       	push   $0xf013b61a
f0117df6:	e8 0a 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117dfb:	e8 c8 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e00:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e03:	74 14                	je     f0117e19 <test_kmalloc+0x387>
f0117e05:	83 ec 04             	sub    $0x4,%esp
f0117e08:	68 34 b6 13 f0       	push   $0xf013b634
f0117e0d:	6a 52                	push   $0x52
f0117e0f:	68 1a b6 13 f0       	push   $0xf013b61a
f0117e14:	e8 ec 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e19:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e1c:	e8 86 50 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117e21:	29 c3                	sub    %eax,%ebx
f0117e23:	89 d8                	mov    %ebx,%eax
f0117e25:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117e2a:	74 14                	je     f0117e40 <test_kmalloc+0x3ae>
f0117e2c:	83 ec 04             	sub    $0x4,%esp
f0117e2f:	68 9c b6 13 f0       	push   $0xf013b69c
f0117e34:	6a 53                	push   $0x53
f0117e36:	68 1a b6 13 f0       	push   $0xf013b61a
f0117e3b:	e8 c5 83 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117e40:	e8 62 50 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117e45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e48:	e8 7b bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117e50:	83 ec 0c             	sub    $0xc,%esp
f0117e53:	68 00 08 00 00       	push   $0x800
f0117e58:	e8 32 fd fe ff       	call   f0107b8f <kmalloc>
f0117e5d:	83 c4 10             	add    $0x10,%esp
f0117e60:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117e66:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117e6c:	89 c1                	mov    %eax,%ecx
f0117e6e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117e75:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117e78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e7d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117e80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117e83:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e88:	f7 75 88             	divl   -0x78(%ebp)
f0117e8b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117e8e:	29 d0                	sub    %edx,%eax
f0117e90:	89 c3                	mov    %eax,%ebx
f0117e92:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117e99:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117e9e:	0f b6 d0             	movzbl %al,%edx
f0117ea1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117ea4:	01 d0                	add    %edx,%eax
f0117ea6:	48                   	dec    %eax
f0117ea7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117ead:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117eb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eb8:	f7 75 80             	divl   -0x80(%ebp)
f0117ebb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117ec1:	29 d0                	sub    %edx,%eax
f0117ec3:	01 c3                	add    %eax,%ebx
f0117ec5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117ecc:	10 00 00 
f0117ecf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117ed4:	0f b6 c0             	movzbl %al,%eax
f0117ed7:	c1 e0 04             	shl    $0x4,%eax
f0117eda:	89 c2                	mov    %eax,%edx
f0117edc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117ee2:	01 d0                	add    %edx,%eax
f0117ee4:	48                   	dec    %eax
f0117ee5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117eeb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117ef1:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ef6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117efc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117f02:	29 d0                	sub    %edx,%eax
f0117f04:	01 d8                	add    %ebx,%eax
f0117f06:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117f0b:	39 c1                	cmp    %eax,%ecx
f0117f0d:	74 14                	je     f0117f23 <test_kmalloc+0x491>
f0117f0f:	83 ec 04             	sub    $0x4,%esp
f0117f12:	68 00 b7 13 f0       	push   $0xf013b700
f0117f17:	6a 59                	push   $0x59
f0117f19:	68 1a b6 13 f0       	push   $0xf013b61a
f0117f1e:	e8 e2 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f23:	e8 a0 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f28:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f2b:	74 14                	je     f0117f41 <test_kmalloc+0x4af>
f0117f2d:	83 ec 04             	sub    $0x4,%esp
f0117f30:	68 34 b6 13 f0       	push   $0xf013b634
f0117f35:	6a 5a                	push   $0x5a
f0117f37:	68 1a b6 13 f0       	push   $0xf013b61a
f0117f3c:	e8 c4 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f41:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117f44:	e8 5e 4f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117f49:	29 c3                	sub    %eax,%ebx
f0117f4b:	89 d8                	mov    %ebx,%eax
f0117f4d:	83 f8 01             	cmp    $0x1,%eax
f0117f50:	74 14                	je     f0117f66 <test_kmalloc+0x4d4>
f0117f52:	83 ec 04             	sub    $0x4,%esp
f0117f55:	68 9c b6 13 f0       	push   $0xf013b69c
f0117f5a:	6a 5b                	push   $0x5b
f0117f5c:	68 1a b6 13 f0       	push   $0xf013b61a
f0117f61:	e8 9f 82 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117f66:	e8 3c 4f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0117f6b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f6e:	e8 55 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f73:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117f76:	83 ec 0c             	sub    $0xc,%esp
f0117f79:	68 00 08 00 00       	push   $0x800
f0117f7e:	e8 0c fc fe ff       	call   f0107b8f <kmalloc>
f0117f83:	83 c4 10             	add    $0x10,%esp
f0117f86:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f8c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117f92:	89 c1                	mov    %eax,%ecx
f0117f94:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117f9b:	10 00 00 
f0117f9e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117fa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fa9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117faf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fba:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117fc0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117fc6:	29 d0                	sub    %edx,%eax
f0117fc8:	89 c3                	mov    %eax,%ebx
f0117fca:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117fd1:	10 00 00 
f0117fd4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117fd9:	0f b6 d0             	movzbl %al,%edx
f0117fdc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117fe2:	01 d0                	add    %edx,%eax
f0117fe4:	48                   	dec    %eax
f0117fe5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117feb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117ff1:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ff6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117ffc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118002:	29 d0                	sub    %edx,%eax
f0118004:	01 c3                	add    %eax,%ebx
f0118006:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011800d:	10 00 00 
f0118010:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118015:	0f b6 c0             	movzbl %al,%eax
f0118018:	c1 e0 04             	shl    $0x4,%eax
f011801b:	89 c2                	mov    %eax,%edx
f011801d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118023:	01 d0                	add    %edx,%eax
f0118025:	48                   	dec    %eax
f0118026:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011802c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118032:	ba 00 00 00 00       	mov    $0x0,%edx
f0118037:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011803d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118043:	29 d0                	sub    %edx,%eax
f0118045:	01 d8                	add    %ebx,%eax
f0118047:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011804c:	39 c1                	cmp    %eax,%ecx
f011804e:	74 14                	je     f0118064 <test_kmalloc+0x5d2>
f0118050:	83 ec 04             	sub    $0x4,%esp
f0118053:	68 00 b7 13 f0       	push   $0xf013b700
f0118058:	6a 61                	push   $0x61
f011805a:	68 1a b6 13 f0       	push   $0xf013b61a
f011805f:	e8 a1 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118064:	e8 5f bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118069:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011806c:	74 14                	je     f0118082 <test_kmalloc+0x5f0>
f011806e:	83 ec 04             	sub    $0x4,%esp
f0118071:	68 34 b6 13 f0       	push   $0xf013b634
f0118076:	6a 62                	push   $0x62
f0118078:	68 1a b6 13 f0       	push   $0xf013b61a
f011807d:	e8 83 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118082:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118085:	e8 1d 4e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011808a:	29 c3                	sub    %eax,%ebx
f011808c:	89 d8                	mov    %ebx,%eax
f011808e:	83 f8 01             	cmp    $0x1,%eax
f0118091:	74 14                	je     f01180a7 <test_kmalloc+0x615>
f0118093:	83 ec 04             	sub    $0x4,%esp
f0118096:	68 9c b6 13 f0       	push   $0xf013b69c
f011809b:	6a 63                	push   $0x63
f011809d:	68 1a b6 13 f0       	push   $0xf013b61a
f01180a2:	e8 5e 81 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01180a7:	e8 fb 4d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01180ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180af:	e8 14 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01180b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01180b7:	83 ec 0c             	sub    $0xc,%esp
f01180ba:	68 00 1c 00 00       	push   $0x1c00
f01180bf:	e8 cb fa fe ff       	call   f0107b8f <kmalloc>
f01180c4:	83 c4 10             	add    $0x10,%esp
f01180c7:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01180cd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01180d3:	89 c1                	mov    %eax,%ecx
f01180d5:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01180dc:	10 00 00 
f01180df:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01180e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180ea:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01180f0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01180f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01180fb:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118101:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118107:	29 d0                	sub    %edx,%eax
f0118109:	89 c3                	mov    %eax,%ebx
f011810b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118112:	10 00 00 
f0118115:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011811a:	0f b6 d0             	movzbl %al,%edx
f011811d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118123:	01 d0                	add    %edx,%eax
f0118125:	48                   	dec    %eax
f0118126:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011812c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118132:	ba 00 00 00 00       	mov    $0x0,%edx
f0118137:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011813d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118143:	29 d0                	sub    %edx,%eax
f0118145:	01 c3                	add    %eax,%ebx
f0118147:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011814e:	10 00 00 
f0118151:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118156:	0f b6 c0             	movzbl %al,%eax
f0118159:	c1 e0 04             	shl    $0x4,%eax
f011815c:	89 c2                	mov    %eax,%edx
f011815e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118164:	01 d0                	add    %edx,%eax
f0118166:	48                   	dec    %eax
f0118167:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011816d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118173:	ba 00 00 00 00       	mov    $0x0,%edx
f0118178:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011817e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118184:	29 d0                	sub    %edx,%eax
f0118186:	01 d8                	add    %ebx,%eax
f0118188:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011818d:	39 c1                	cmp    %eax,%ecx
f011818f:	74 14                	je     f01181a5 <test_kmalloc+0x713>
f0118191:	83 ec 04             	sub    $0x4,%esp
f0118194:	68 00 b7 13 f0       	push   $0xf013b700
f0118199:	6a 69                	push   $0x69
f011819b:	68 1a b6 13 f0       	push   $0xf013b61a
f01181a0:	e8 60 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181a5:	e8 1e bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181aa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181ad:	74 14                	je     f01181c3 <test_kmalloc+0x731>
f01181af:	83 ec 04             	sub    $0x4,%esp
f01181b2:	68 34 b6 13 f0       	push   $0xf013b634
f01181b7:	6a 6a                	push   $0x6a
f01181b9:	68 1a b6 13 f0       	push   $0xf013b61a
f01181be:	e8 42 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181c3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01181c6:	e8 dc 4c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01181cb:	29 c3                	sub    %eax,%ebx
f01181cd:	89 d8                	mov    %ebx,%eax
f01181cf:	83 f8 02             	cmp    $0x2,%eax
f01181d2:	74 14                	je     f01181e8 <test_kmalloc+0x756>
f01181d4:	83 ec 04             	sub    $0x4,%esp
f01181d7:	68 9c b6 13 f0       	push   $0xf013b69c
f01181dc:	6a 6b                	push   $0x6b
f01181de:	68 1a b6 13 f0       	push   $0xf013b61a
f01181e3:	e8 1d 80 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01181e8:	e8 ba 4c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01181ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181f0:	e8 d3 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01181f8:	83 ec 0c             	sub    $0xc,%esp
f01181fb:	68 00 fc 2f 00       	push   $0x2ffc00
f0118200:	e8 8a f9 fe ff       	call   f0107b8f <kmalloc>
f0118205:	83 c4 10             	add    $0x10,%esp
f0118208:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011820e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118214:	89 c1                	mov    %eax,%ecx
f0118216:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011821d:	10 00 00 
f0118220:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118226:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011822b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118231:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118237:	ba 00 00 00 00       	mov    $0x0,%edx
f011823c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118242:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118248:	29 d0                	sub    %edx,%eax
f011824a:	89 c3                	mov    %eax,%ebx
f011824c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118253:	10 00 00 
f0118256:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011825b:	0f b6 d0             	movzbl %al,%edx
f011825e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118264:	01 d0                	add    %edx,%eax
f0118266:	48                   	dec    %eax
f0118267:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011826d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118273:	ba 00 00 00 00       	mov    $0x0,%edx
f0118278:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011827e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118284:	29 d0                	sub    %edx,%eax
f0118286:	01 c3                	add    %eax,%ebx
f0118288:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011828f:	10 00 00 
f0118292:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118297:	0f b6 c0             	movzbl %al,%eax
f011829a:	c1 e0 04             	shl    $0x4,%eax
f011829d:	89 c2                	mov    %eax,%edx
f011829f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01182a5:	01 d0                	add    %edx,%eax
f01182a7:	48                   	dec    %eax
f01182a8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01182ae:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01182b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01182b9:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01182bf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01182c5:	29 d0                	sub    %edx,%eax
f01182c7:	01 d8                	add    %ebx,%eax
f01182c9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01182ce:	39 c1                	cmp    %eax,%ecx
f01182d0:	74 14                	je     f01182e6 <test_kmalloc+0x854>
f01182d2:	83 ec 04             	sub    $0x4,%esp
f01182d5:	68 00 b7 13 f0       	push   $0xf013b700
f01182da:	6a 71                	push   $0x71
f01182dc:	68 1a b6 13 f0       	push   $0xf013b61a
f01182e1:	e8 1f 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182e6:	e8 dd ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01182ee:	74 14                	je     f0118304 <test_kmalloc+0x872>
f01182f0:	83 ec 04             	sub    $0x4,%esp
f01182f3:	68 34 b6 13 f0       	push   $0xf013b634
f01182f8:	6a 72                	push   $0x72
f01182fa:	68 1a b6 13 f0       	push   $0xf013b61a
f01182ff:	e8 01 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118304:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118307:	e8 9b 4b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011830c:	29 c3                	sub    %eax,%ebx
f011830e:	89 d8                	mov    %ebx,%eax
f0118310:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118315:	74 14                	je     f011832b <test_kmalloc+0x899>
f0118317:	83 ec 04             	sub    $0x4,%esp
f011831a:	68 9c b6 13 f0       	push   $0xf013b69c
f011831f:	6a 73                	push   $0x73
f0118321:	68 1a b6 13 f0       	push   $0xf013b61a
f0118326:	e8 da 7e fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011832b:	e8 77 4b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118330:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118333:	e8 90 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118338:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011833b:	83 ec 0c             	sub    $0xc,%esp
f011833e:	68 00 fc 5f 00       	push   $0x5ffc00
f0118343:	e8 47 f8 fe ff       	call   f0107b8f <kmalloc>
f0118348:	83 c4 10             	add    $0x10,%esp
f011834b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118351:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118357:	89 c1                	mov    %eax,%ecx
f0118359:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118360:	10 00 00 
f0118363:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118369:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011836e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118374:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011837a:	ba 00 00 00 00       	mov    $0x0,%edx
f011837f:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118385:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011838b:	29 d0                	sub    %edx,%eax
f011838d:	89 c3                	mov    %eax,%ebx
f011838f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118396:	10 00 00 
f0118399:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011839e:	0f b6 d0             	movzbl %al,%edx
f01183a1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183a7:	01 d0                	add    %edx,%eax
f01183a9:	48                   	dec    %eax
f01183aa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01183b0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01183bb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01183c1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183c7:	29 d0                	sub    %edx,%eax
f01183c9:	01 c3                	add    %eax,%ebx
f01183cb:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01183d2:	10 00 00 
f01183d5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01183da:	0f b6 c0             	movzbl %al,%eax
f01183dd:	c1 e0 04             	shl    $0x4,%eax
f01183e0:	89 c2                	mov    %eax,%edx
f01183e2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01183e8:	01 d0                	add    %edx,%eax
f01183ea:	48                   	dec    %eax
f01183eb:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01183f1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01183f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183fc:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118402:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118408:	29 d0                	sub    %edx,%eax
f011840a:	01 d8                	add    %ebx,%eax
f011840c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118411:	39 c1                	cmp    %eax,%ecx
f0118413:	74 14                	je     f0118429 <test_kmalloc+0x997>
f0118415:	83 ec 04             	sub    $0x4,%esp
f0118418:	68 00 b7 13 f0       	push   $0xf013b700
f011841d:	6a 79                	push   $0x79
f011841f:	68 1a b6 13 f0       	push   $0xf013b61a
f0118424:	e8 dc 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118429:	e8 9a b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011842e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118431:	74 14                	je     f0118447 <test_kmalloc+0x9b5>
f0118433:	83 ec 04             	sub    $0x4,%esp
f0118436:	68 34 b6 13 f0       	push   $0xf013b634
f011843b:	6a 7a                	push   $0x7a
f011843d:	68 1a b6 13 f0       	push   $0xf013b61a
f0118442:	e8 be 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118447:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011844a:	e8 58 4a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011844f:	29 c3                	sub    %eax,%ebx
f0118451:	89 d8                	mov    %ebx,%eax
f0118453:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118458:	74 14                	je     f011846e <test_kmalloc+0x9dc>
f011845a:	83 ec 04             	sub    $0x4,%esp
f011845d:	68 9c b6 13 f0       	push   $0xf013b69c
f0118462:	6a 7b                	push   $0x7b
f0118464:	68 1a b6 13 f0       	push   $0xf013b61a
f0118469:	e8 97 7d fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011846e:	e8 34 4a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118473:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118476:	e8 4d b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011847b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011847e:	83 ec 0c             	sub    $0xc,%esp
f0118481:	68 00 38 00 00       	push   $0x3800
f0118486:	e8 04 f7 fe ff       	call   f0107b8f <kmalloc>
f011848b:	83 c4 10             	add    $0x10,%esp
f011848e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118494:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011849a:	89 c1                	mov    %eax,%ecx
f011849c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01184a3:	10 00 00 
f01184a6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01184ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184b1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01184b7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01184c2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01184c8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184ce:	29 d0                	sub    %edx,%eax
f01184d0:	89 c3                	mov    %eax,%ebx
f01184d2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01184d9:	10 00 00 
f01184dc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01184e1:	0f b6 d0             	movzbl %al,%edx
f01184e4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01184ea:	01 d0                	add    %edx,%eax
f01184ec:	48                   	dec    %eax
f01184ed:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01184f3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01184f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01184fe:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118504:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011850a:	29 d0                	sub    %edx,%eax
f011850c:	01 c3                	add    %eax,%ebx
f011850e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118515:	10 00 00 
f0118518:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011851d:	0f b6 c0             	movzbl %al,%eax
f0118520:	c1 e0 04             	shl    $0x4,%eax
f0118523:	89 c2                	mov    %eax,%edx
f0118525:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011852b:	01 d0                	add    %edx,%eax
f011852d:	48                   	dec    %eax
f011852e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118534:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011853a:	ba 00 00 00 00       	mov    $0x0,%edx
f011853f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118545:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011854b:	29 d0                	sub    %edx,%eax
f011854d:	01 d8                	add    %ebx,%eax
f011854f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118554:	39 c1                	cmp    %eax,%ecx
f0118556:	74 17                	je     f011856f <test_kmalloc+0xadd>
f0118558:	83 ec 04             	sub    $0x4,%esp
f011855b:	68 00 b7 13 f0       	push   $0xf013b700
f0118560:	68 81 00 00 00       	push   $0x81
f0118565:	68 1a b6 13 f0       	push   $0xf013b61a
f011856a:	e8 96 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011856f:	e8 54 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118574:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118577:	74 17                	je     f0118590 <test_kmalloc+0xafe>
f0118579:	83 ec 04             	sub    $0x4,%esp
f011857c:	68 34 b6 13 f0       	push   $0xf013b634
f0118581:	68 82 00 00 00       	push   $0x82
f0118586:	68 1a b6 13 f0       	push   $0xf013b61a
f011858b:	e8 75 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118590:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118593:	e8 0f 49 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118598:	29 c3                	sub    %eax,%ebx
f011859a:	89 d8                	mov    %ebx,%eax
f011859c:	83 f8 04             	cmp    $0x4,%eax
f011859f:	74 17                	je     f01185b8 <test_kmalloc+0xb26>
f01185a1:	83 ec 04             	sub    $0x4,%esp
f01185a4:	68 9c b6 13 f0       	push   $0xf013b69c
f01185a9:	68 83 00 00 00       	push   $0x83
f01185ae:	68 1a b6 13 f0       	push   $0xf013b61a
f01185b3:	e8 4d 7c fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01185b8:	83 ec 0c             	sub    $0xc,%esp
f01185bb:	68 66 b7 13 f0       	push   $0xf013b766
f01185c0:	e8 49 87 fe ff       	call   f0100d0e <cprintf>
f01185c5:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01185c8:	e8 da 48 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01185cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01185d0:	e8 f3 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01185d5:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01185d8:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01185df:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01185e2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01185e8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01185ee:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01185f4:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01185f7:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01185f9:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01185ff:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118605:	01 c2                	add    %eax,%edx
f0118607:	8a 45 f2             	mov    -0xe(%ebp),%al
f011860a:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f011860c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118612:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118618:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f011861f:	fd 0f 00 
			shortArr[0] = minShort;
f0118622:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118628:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011862b:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011862e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118634:	01 c0                	add    %eax,%eax
f0118636:	89 c2                	mov    %eax,%edx
f0118638:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011863e:	01 c2                	add    %eax,%edx
f0118640:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118644:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118647:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011864d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118653:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f011865a:	01 00 00 
			intArr[0] = minInt;
f011865d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118663:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118666:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118668:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011866e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118675:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011867b:	01 c2                	add    %eax,%edx
f011867d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118680:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118682:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118688:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011868e:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0118695:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118698:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011869e:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01186a1:	88 10                	mov    %dl,(%eax)
f01186a3:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01186a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01186ac:	66 89 42 02          	mov    %ax,0x2(%edx)
f01186b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01186b9:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01186bc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01186c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01186c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186cf:	01 c2                	add    %eax,%edx
f01186d1:	8a 45 f2             	mov    -0xe(%ebp),%al
f01186d4:	88 02                	mov    %al,(%edx)
f01186d6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01186dc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01186e3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186e9:	01 c2                	add    %eax,%edx
f01186eb:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01186ef:	66 89 42 02          	mov    %ax,0x2(%edx)
f01186f3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01186f9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118700:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118706:	01 c2                	add    %eax,%edx
f0118708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011870b:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f011870e:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118715:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118718:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011871e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118724:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011872a:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011872d:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f011872f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118735:	89 c2                	mov    %eax,%edx
f0118737:	c1 ea 1f             	shr    $0x1f,%edx
f011873a:	01 d0                	add    %edx,%eax
f011873c:	d1 f8                	sar    %eax
f011873e:	89 c2                	mov    %eax,%edx
f0118740:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118746:	01 c2                	add    %eax,%edx
f0118748:	8a 45 f2             	mov    -0xe(%ebp),%al
f011874b:	88 c1                	mov    %al,%cl
f011874d:	c0 e9 07             	shr    $0x7,%cl
f0118750:	01 c8                	add    %ecx,%eax
f0118752:	d0 f8                	sar    %al
f0118754:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118756:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011875c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118762:	01 c2                	add    %eax,%edx
f0118764:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118767:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118769:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011876f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118775:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f011877c:	1b 00 00 
			shortArr2[0] = minShort;
f011877f:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118785:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118788:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011878b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118791:	01 c0                	add    %eax,%eax
f0118793:	89 c2                	mov    %eax,%edx
f0118795:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011879b:	01 c2                	add    %eax,%edx
f011879d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01187a1:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01187a4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01187aa:	8a 00                	mov    (%eax),%al
f01187ac:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01187af:	75 15                	jne    f01187c6 <test_kmalloc+0xd34>
f01187b1:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01187b7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01187bd:	01 d0                	add    %edx,%eax
f01187bf:	8a 00                	mov    (%eax),%al
f01187c1:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01187c4:	74 17                	je     f01187dd <test_kmalloc+0xd4b>
f01187c6:	83 ec 04             	sub    $0x4,%esp
f01187c9:	68 70 b7 13 f0       	push   $0xf013b770
f01187ce:	68 b2 00 00 00       	push   $0xb2
f01187d3:	68 1a b6 13 f0       	push   $0xf013b61a
f01187d8:	e8 28 7a fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01187dd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01187e3:	66 8b 00             	mov    (%eax),%ax
f01187e6:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01187ea:	75 1b                	jne    f0118807 <test_kmalloc+0xd75>
f01187ec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01187f2:	01 c0                	add    %eax,%eax
f01187f4:	89 c2                	mov    %eax,%edx
f01187f6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01187fc:	01 d0                	add    %edx,%eax
f01187fe:	66 8b 00             	mov    (%eax),%ax
f0118801:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118805:	74 17                	je     f011881e <test_kmalloc+0xd8c>
f0118807:	83 ec 04             	sub    $0x4,%esp
f011880a:	68 70 b7 13 f0       	push   $0xf013b770
f011880f:	68 b3 00 00 00       	push   $0xb3
f0118814:	68 1a b6 13 f0       	push   $0xf013b61a
f0118819:	e8 e7 79 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011881e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118824:	8b 00                	mov    (%eax),%eax
f0118826:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118829:	75 1c                	jne    f0118847 <test_kmalloc+0xdb5>
f011882b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118831:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118838:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011883e:	01 d0                	add    %edx,%eax
f0118840:	8b 00                	mov    (%eax),%eax
f0118842:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118845:	74 17                	je     f011885e <test_kmalloc+0xdcc>
f0118847:	83 ec 04             	sub    $0x4,%esp
f011884a:	68 70 b7 13 f0       	push   $0xf013b770
f011884f:	68 b4 00 00 00       	push   $0xb4
f0118854:	68 1a b6 13 f0       	push   $0xf013b61a
f0118859:	e8 a7 79 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011885e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118864:	8a 00                	mov    (%eax),%al
f0118866:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118869:	75 1c                	jne    f0118887 <test_kmalloc+0xdf5>
f011886b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118871:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118878:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011887e:	01 d0                	add    %edx,%eax
f0118880:	8a 00                	mov    (%eax),%al
f0118882:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118885:	74 17                	je     f011889e <test_kmalloc+0xe0c>
f0118887:	83 ec 04             	sub    $0x4,%esp
f011888a:	68 70 b7 13 f0       	push   $0xf013b770
f011888f:	68 b6 00 00 00       	push   $0xb6
f0118894:	68 1a b6 13 f0       	push   $0xf013b61a
f0118899:	e8 67 79 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011889e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188a4:	66 8b 40 02          	mov    0x2(%eax),%ax
f01188a8:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01188ac:	75 1f                	jne    f01188cd <test_kmalloc+0xe3b>
f01188ae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01188b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01188bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188c1:	01 d0                	add    %edx,%eax
f01188c3:	66 8b 40 02          	mov    0x2(%eax),%ax
f01188c7:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01188cb:	74 17                	je     f01188e4 <test_kmalloc+0xe52>
f01188cd:	83 ec 04             	sub    $0x4,%esp
f01188d0:	68 70 b7 13 f0       	push   $0xf013b770
f01188d5:	68 b7 00 00 00       	push   $0xb7
f01188da:	68 1a b6 13 f0       	push   $0xf013b61a
f01188df:	e8 21 79 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01188e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188ea:	8b 40 04             	mov    0x4(%eax),%eax
f01188ed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01188f0:	75 1d                	jne    f011890f <test_kmalloc+0xe7d>
f01188f2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01188f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01188ff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118905:	01 d0                	add    %edx,%eax
f0118907:	8b 40 04             	mov    0x4(%eax),%eax
f011890a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011890d:	74 17                	je     f0118926 <test_kmalloc+0xe94>
f011890f:	83 ec 04             	sub    $0x4,%esp
f0118912:	68 70 b7 13 f0       	push   $0xf013b770
f0118917:	68 b8 00 00 00       	push   $0xb8
f011891c:	68 1a b6 13 f0       	push   $0xf013b61a
f0118921:	e8 df 78 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118926:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011892c:	8a 00                	mov    (%eax),%al
f011892e:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118931:	75 40                	jne    f0118973 <test_kmalloc+0xee1>
f0118933:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118939:	89 c2                	mov    %eax,%edx
f011893b:	c1 ea 1f             	shr    $0x1f,%edx
f011893e:	01 d0                	add    %edx,%eax
f0118940:	d1 f8                	sar    %eax
f0118942:	89 c2                	mov    %eax,%edx
f0118944:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011894a:	01 d0                	add    %edx,%eax
f011894c:	8a 10                	mov    (%eax),%dl
f011894e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118951:	88 c1                	mov    %al,%cl
f0118953:	c0 e9 07             	shr    $0x7,%cl
f0118956:	01 c8                	add    %ecx,%eax
f0118958:	d0 f8                	sar    %al
f011895a:	38 c2                	cmp    %al,%dl
f011895c:	75 15                	jne    f0118973 <test_kmalloc+0xee1>
f011895e:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118964:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011896a:	01 d0                	add    %edx,%eax
f011896c:	8a 00                	mov    (%eax),%al
f011896e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118971:	74 17                	je     f011898a <test_kmalloc+0xef8>
f0118973:	83 ec 04             	sub    $0x4,%esp
f0118976:	68 70 b7 13 f0       	push   $0xf013b770
f011897b:	68 ba 00 00 00       	push   $0xba
f0118980:	68 1a b6 13 f0       	push   $0xf013b61a
f0118985:	e8 7b 78 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011898a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118990:	66 8b 00             	mov    (%eax),%ax
f0118993:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118997:	75 1b                	jne    f01189b4 <test_kmalloc+0xf22>
f0118999:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011899f:	01 c0                	add    %eax,%eax
f01189a1:	89 c2                	mov    %eax,%edx
f01189a3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01189a9:	01 d0                	add    %edx,%eax
f01189ab:	66 8b 00             	mov    (%eax),%ax
f01189ae:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01189b2:	74 17                	je     f01189cb <test_kmalloc+0xf39>
f01189b4:	83 ec 04             	sub    $0x4,%esp
f01189b7:	68 70 b7 13 f0       	push   $0xf013b770
f01189bc:	68 bb 00 00 00       	push   $0xbb
f01189c1:	68 1a b6 13 f0       	push   $0xf013b61a
f01189c6:	e8 3a 78 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189cb:	e8 d7 44 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01189d0:	89 c2                	mov    %eax,%edx
f01189d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01189d5:	39 c2                	cmp    %eax,%edx
f01189d7:	74 17                	je     f01189f0 <test_kmalloc+0xf5e>
f01189d9:	83 ec 04             	sub    $0x4,%esp
f01189dc:	68 9c b6 13 f0       	push   $0xf013b69c
f01189e1:	68 bd 00 00 00       	push   $0xbd
f01189e6:	68 1a b6 13 f0       	push   $0xf013b61a
f01189eb:	e8 15 78 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189f0:	e8 d3 b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01189f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189f8:	74 17                	je     f0118a11 <test_kmalloc+0xf7f>
f01189fa:	83 ec 04             	sub    $0x4,%esp
f01189fd:	68 34 b6 13 f0       	push   $0xf013b634
f0118a02:	68 be 00 00 00       	push   $0xbe
f0118a07:	68 1a b6 13 f0       	push   $0xf013b61a
f0118a0c:	e8 f4 77 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118a11:	83 ec 0c             	sub    $0xc,%esp
f0118a14:	68 a5 b7 13 f0       	push   $0xf013b7a5
f0118a19:	e8 f0 82 fe ff       	call   f0100d0e <cprintf>
f0118a1e:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118a21:	e8 81 44 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118a26:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a29:	e8 9a b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118a31:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118a38:	10 00 00 
f0118a3b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118a41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a46:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118a4c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a57:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118a5d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118a63:	29 d0                	sub    %edx,%eax
f0118a65:	89 c1                	mov    %eax,%ecx
f0118a67:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118a6e:	10 00 00 
f0118a71:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118a76:	0f b6 d0             	movzbl %al,%edx
f0118a79:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118a7f:	01 d0                	add    %edx,%eax
f0118a81:	48                   	dec    %eax
f0118a82:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118a88:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118a8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a93:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118a99:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118a9f:	29 d0                	sub    %edx,%eax
f0118aa1:	01 c1                	add    %eax,%ecx
f0118aa3:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118aaa:	10 00 00 
f0118aad:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118ab2:	0f b6 c0             	movzbl %al,%eax
f0118ab5:	c1 e0 04             	shl    $0x4,%eax
f0118ab8:	89 c2                	mov    %eax,%edx
f0118aba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118ac0:	01 d0                	add    %edx,%eax
f0118ac2:	48                   	dec    %eax
f0118ac3:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118ac9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118acf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ad4:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118ada:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118ae0:	29 d0                	sub    %edx,%eax
f0118ae2:	01 c8                	add    %ecx,%eax
f0118ae4:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118ae9:	29 c2                	sub    %eax,%edx
f0118aeb:	89 d0                	mov    %edx,%eax
f0118aed:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118af3:	83 ec 0c             	sub    $0xc,%esp
f0118af6:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118afc:	e8 8e f0 fe ff       	call   f0107b8f <kmalloc>
f0118b01:	83 c4 10             	add    $0x10,%esp
f0118b04:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118b0a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118b10:	85 c0                	test   %eax,%eax
f0118b12:	74 17                	je     f0118b2b <test_kmalloc+0x1099>
f0118b14:	83 ec 04             	sub    $0x4,%esp
f0118b17:	68 e8 b5 13 f0       	push   $0xf013b5e8
f0118b1c:	68 c8 00 00 00       	push   $0xc8
f0118b21:	68 1a b6 13 f0       	push   $0xf013b61a
f0118b26:	e8 da 76 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b2b:	e8 98 b2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118b30:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b33:	74 17                	je     f0118b4c <test_kmalloc+0x10ba>
f0118b35:	83 ec 04             	sub    $0x4,%esp
f0118b38:	68 34 b6 13 f0       	push   $0xf013b634
f0118b3d:	68 c9 00 00 00       	push   $0xc9
f0118b42:	68 1a b6 13 f0       	push   $0xf013b61a
f0118b47:	e8 b9 76 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b4c:	e8 56 43 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118b51:	89 c2                	mov    %eax,%edx
f0118b53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118b56:	39 c2                	cmp    %eax,%edx
f0118b58:	74 17                	je     f0118b71 <test_kmalloc+0x10df>
f0118b5a:	83 ec 04             	sub    $0x4,%esp
f0118b5d:	68 9c b6 13 f0       	push   $0xf013b69c
f0118b62:	68 ca 00 00 00       	push   $0xca
f0118b67:	68 1a b6 13 f0       	push   $0xf013b61a
f0118b6c:	e8 94 76 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118b71:	83 ec 0c             	sub    $0xc,%esp
f0118b74:	68 ac b7 13 f0       	push   $0xf013b7ac
f0118b79:	e8 90 81 fe ff       	call   f0100d0e <cprintf>
f0118b7e:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118b81:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118b87:	05 00 40 00 00       	add    $0x4000,%eax
f0118b8c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118b92:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118b99:	10 00 00 
f0118b9c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118ba2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ba7:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118bad:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118bb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bb8:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118bbe:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118bc4:	29 d0                	sub    %edx,%eax
f0118bc6:	89 c1                	mov    %eax,%ecx
f0118bc8:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118bcf:	10 00 00 
f0118bd2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118bd7:	0f b6 d0             	movzbl %al,%edx
f0118bda:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118be0:	01 d0                	add    %edx,%eax
f0118be2:	48                   	dec    %eax
f0118be3:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118be9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118bef:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bf4:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118bfa:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118c00:	29 d0                	sub    %edx,%eax
f0118c02:	01 c1                	add    %eax,%ecx
f0118c04:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118c0b:	10 00 00 
f0118c0e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118c13:	0f b6 c0             	movzbl %al,%eax
f0118c16:	c1 e0 04             	shl    $0x4,%eax
f0118c19:	89 c2                	mov    %eax,%edx
f0118c1b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118c21:	01 d0                	add    %edx,%eax
f0118c23:	48                   	dec    %eax
f0118c24:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118c2a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118c30:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c35:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118c3b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118c41:	29 d0                	sub    %edx,%eax
f0118c43:	01 c8                	add    %ecx,%eax
f0118c45:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118c4d:	eb 6a                	jmp    f0118cb9 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118c4f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0118c54:	83 ec 04             	sub    $0x4,%esp
f0118c57:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118c5d:	52                   	push   %edx
f0118c5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0118c61:	50                   	push   %eax
f0118c62:	e8 4a de fe ff       	call   f0106ab1 <get_page_table>
f0118c67:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118c6a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118c70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118c73:	c1 ea 0c             	shr    $0xc,%edx
f0118c76:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118c7c:	c1 e2 02             	shl    $0x2,%edx
f0118c7f:	01 d0                	add    %edx,%eax
f0118c81:	8b 00                	mov    (%eax),%eax
f0118c83:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118c88:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118c8e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118c94:	83 e0 04             	and    $0x4,%eax
f0118c97:	85 c0                	test   %eax,%eax
f0118c99:	74 17                	je     f0118cb2 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118c9b:	83 ec 04             	sub    $0x4,%esp
f0118c9e:	68 b4 b7 13 f0       	push   $0xf013b7b4
f0118ca3:	68 d7 00 00 00       	push   $0xd7
f0118ca8:	68 1a b6 13 f0       	push   $0xf013b61a
f0118cad:	e8 53 75 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118cb2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118cbc:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118cc2:	72 8b                	jb     f0118c4f <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118cc4:	83 ec 0c             	sub    $0xc,%esp
f0118cc7:	68 fe b7 13 f0       	push   $0xf013b7fe
f0118ccc:	e8 3d 80 fe ff       	call   f0100d0e <cprintf>
f0118cd1:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118cd4:	83 ec 0c             	sub    $0xc,%esp
f0118cd7:	68 08 b8 13 f0       	push   $0xf013b808
f0118cdc:	e8 2d 80 fe ff       	call   f0100d0e <cprintf>
f0118ce1:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118ce4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118ce9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118cec:	5b                   	pop    %ebx
f0118ced:	5f                   	pop    %edi
f0118cee:	5d                   	pop    %ebp
f0118cef:	c3                   	ret    

f0118cf0 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118cf0:	55                   	push   %ebp
f0118cf1:	89 e5                	mov    %esp,%ebp
f0118cf3:	57                   	push   %edi
f0118cf4:	53                   	push   %ebx
f0118cf5:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118cfb:	83 ec 0c             	sub    $0xc,%esp
f0118cfe:	68 5c b5 13 f0       	push   $0xf013b55c
f0118d03:	e8 06 80 fe ff       	call   f0100d0e <cprintf>
f0118d08:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118d0b:	83 ec 0c             	sub    $0xc,%esp
f0118d0e:	68 8c b5 13 f0       	push   $0xf013b58c
f0118d13:	e8 f6 7f fe ff       	call   f0100d0e <cprintf>
f0118d18:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118d1b:	83 ec 0c             	sub    $0xc,%esp
f0118d1e:	68 5c b5 13 f0       	push   $0xf013b55c
f0118d23:	e8 e6 7f fe ff       	call   f0100d0e <cprintf>
f0118d28:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118d2b:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118d31:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118d36:	b8 00 00 00 00       	mov    $0x0,%eax
f0118d3b:	89 d7                	mov    %edx,%edi
f0118d3d:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118d3f:	83 ec 0c             	sub    $0xc,%esp
f0118d42:	68 44 b8 13 f0       	push   $0xf013b844
f0118d47:	e8 c2 7f fe ff       	call   f0100d0e <cprintf>
f0118d4c:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118d4f:	e8 53 41 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0118d54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118d57:	e8 6c b0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118d5c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118d66:	eb 1f                	jmp    f0118d87 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118d68:	83 ec 0c             	sub    $0xc,%esp
f0118d6b:	68 00 00 20 00       	push   $0x200000
f0118d70:	e8 1a ee fe ff       	call   f0107b8f <kmalloc>
f0118d75:	83 c4 10             	add    $0x10,%esp
f0118d78:	89 c2                	mov    %eax,%edx
f0118d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118d7d:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118d84:	ff 45 f4             	incl   -0xc(%ebp)
f0118d87:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118d8b:	7e db                	jle    f0118d68 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118d8d:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118d94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118d97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118d9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118da2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118da7:	f7 75 e8             	divl   -0x18(%ebp)
f0118daa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118dad:	29 d0                	sub    %edx,%eax
f0118daf:	89 c1                	mov    %eax,%ecx
f0118db1:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118db8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118dbd:	0f b6 d0             	movzbl %al,%edx
f0118dc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118dc3:	01 d0                	add    %edx,%eax
f0118dc5:	48                   	dec    %eax
f0118dc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118dc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118dcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dd1:	f7 75 e0             	divl   -0x20(%ebp)
f0118dd4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118dd7:	29 d0                	sub    %edx,%eax
f0118dd9:	01 c1                	add    %eax,%ecx
f0118ddb:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118de2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118de7:	0f b6 c0             	movzbl %al,%eax
f0118dea:	c1 e0 04             	shl    $0x4,%eax
f0118ded:	89 c2                	mov    %eax,%edx
f0118def:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118df2:	01 d0                	add    %edx,%eax
f0118df4:	48                   	dec    %eax
f0118df5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118df8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118dfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e00:	f7 75 d8             	divl   -0x28(%ebp)
f0118e03:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118e06:	29 d0                	sub    %edx,%eax
f0118e08:	01 c8                	add    %ecx,%eax
f0118e0a:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118e0f:	29 c2                	sub    %eax,%edx
f0118e11:	89 d0                	mov    %edx,%eax
f0118e13:	83 ec 0c             	sub    $0xc,%esp
f0118e16:	50                   	push   %eax
f0118e17:	e8 73 ed fe ff       	call   f0107b8f <kmalloc>
f0118e1c:	83 c4 10             	add    $0x10,%esp
f0118e1f:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118e25:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118e2b:	89 c1                	mov    %eax,%ecx
f0118e2d:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118e34:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118e37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118e3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118e42:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e47:	f7 75 d0             	divl   -0x30(%ebp)
f0118e4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118e4d:	29 d0                	sub    %edx,%eax
f0118e4f:	89 c3                	mov    %eax,%ebx
f0118e51:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118e58:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118e5d:	0f b6 d0             	movzbl %al,%edx
f0118e60:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118e63:	01 d0                	add    %edx,%eax
f0118e65:	48                   	dec    %eax
f0118e66:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118e69:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e71:	f7 75 c8             	divl   -0x38(%ebp)
f0118e74:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118e77:	29 d0                	sub    %edx,%eax
f0118e79:	01 c3                	add    %eax,%ebx
f0118e7b:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118e82:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118e87:	0f b6 c0             	movzbl %al,%eax
f0118e8a:	c1 e0 04             	shl    $0x4,%eax
f0118e8d:	89 c2                	mov    %eax,%edx
f0118e8f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118e92:	01 d0                	add    %edx,%eax
f0118e94:	48                   	dec    %eax
f0118e95:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118e98:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118e9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ea0:	f7 75 c0             	divl   -0x40(%ebp)
f0118ea3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118ea6:	29 d0                	sub    %edx,%eax
f0118ea8:	01 d8                	add    %ebx,%eax
f0118eaa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118eaf:	39 c1                	cmp    %eax,%ecx
f0118eb1:	0f 85 ed 04 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118eb7:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118ebd:	89 c1                	mov    %eax,%ecx
f0118ebf:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118ec6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118ec9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ece:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118ed1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118ed4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ed9:	f7 75 b8             	divl   -0x48(%ebp)
f0118edc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118edf:	29 d0                	sub    %edx,%eax
f0118ee1:	89 c3                	mov    %eax,%ebx
f0118ee3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118eea:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118eef:	0f b6 d0             	movzbl %al,%edx
f0118ef2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118ef5:	01 d0                	add    %edx,%eax
f0118ef7:	48                   	dec    %eax
f0118ef8:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118efb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118efe:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f03:	f7 75 b0             	divl   -0x50(%ebp)
f0118f06:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f09:	29 d0                	sub    %edx,%eax
f0118f0b:	01 c3                	add    %eax,%ebx
f0118f0d:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118f14:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118f19:	0f b6 c0             	movzbl %al,%eax
f0118f1c:	c1 e0 04             	shl    $0x4,%eax
f0118f1f:	89 c2                	mov    %eax,%edx
f0118f21:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f24:	01 d0                	add    %edx,%eax
f0118f26:	48                   	dec    %eax
f0118f27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118f2a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f32:	f7 75 a8             	divl   -0x58(%ebp)
f0118f35:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f38:	29 d0                	sub    %edx,%eax
f0118f3a:	01 d8                	add    %ebx,%eax
f0118f3c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118f41:	39 c1                	cmp    %eax,%ecx
f0118f43:	0f 85 5b 04 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118f49:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118f4f:	89 c1                	mov    %eax,%ecx
f0118f51:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118f58:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118f5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f60:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118f63:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118f66:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f6b:	f7 75 a0             	divl   -0x60(%ebp)
f0118f6e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118f71:	29 d0                	sub    %edx,%eax
f0118f73:	89 c3                	mov    %eax,%ebx
f0118f75:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118f7c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118f81:	0f b6 d0             	movzbl %al,%edx
f0118f84:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118f87:	01 d0                	add    %edx,%eax
f0118f89:	48                   	dec    %eax
f0118f8a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118f8d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f95:	f7 75 98             	divl   -0x68(%ebp)
f0118f98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118f9b:	29 d0                	sub    %edx,%eax
f0118f9d:	01 c3                	add    %eax,%ebx
f0118f9f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118fa6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118fab:	0f b6 c0             	movzbl %al,%eax
f0118fae:	c1 e0 04             	shl    $0x4,%eax
f0118fb1:	89 c2                	mov    %eax,%edx
f0118fb3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118fb6:	01 d0                	add    %edx,%eax
f0118fb8:	48                   	dec    %eax
f0118fb9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118fbc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118fbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fc4:	f7 75 90             	divl   -0x70(%ebp)
f0118fc7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118fca:	29 d0                	sub    %edx,%eax
f0118fcc:	01 d8                	add    %ebx,%eax
f0118fce:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118fd3:	39 c1                	cmp    %eax,%ecx
f0118fd5:	0f 85 c9 03 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118fdb:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118fe1:	89 c1                	mov    %eax,%ecx
f0118fe3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118fea:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118fed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ff2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118ff5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ffd:	f7 75 88             	divl   -0x78(%ebp)
f0119000:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119003:	29 d0                	sub    %edx,%eax
f0119005:	89 c3                	mov    %eax,%ebx
f0119007:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011900e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119013:	0f b6 d0             	movzbl %al,%edx
f0119016:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119019:	01 d0                	add    %edx,%eax
f011901b:	48                   	dec    %eax
f011901c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119022:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119028:	ba 00 00 00 00       	mov    $0x0,%edx
f011902d:	f7 75 80             	divl   -0x80(%ebp)
f0119030:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119036:	29 d0                	sub    %edx,%eax
f0119038:	01 c3                	add    %eax,%ebx
f011903a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119041:	10 00 00 
f0119044:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119049:	0f b6 c0             	movzbl %al,%eax
f011904c:	c1 e0 04             	shl    $0x4,%eax
f011904f:	89 c2                	mov    %eax,%edx
f0119051:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119057:	01 d0                	add    %edx,%eax
f0119059:	48                   	dec    %eax
f011905a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119060:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119066:	ba 00 00 00 00       	mov    $0x0,%edx
f011906b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119071:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119077:	29 d0                	sub    %edx,%eax
f0119079:	01 d8                	add    %ebx,%eax
f011907b:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119080:	39 c1                	cmp    %eax,%ecx
f0119082:	0f 85 1c 03 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119088:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011908e:	89 c1                	mov    %eax,%ecx
f0119090:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0119097:	10 00 00 
f011909a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01190a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190a5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01190ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01190b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01190b6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01190bc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01190c2:	29 d0                	sub    %edx,%eax
f01190c4:	89 c3                	mov    %eax,%ebx
f01190c6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01190cd:	10 00 00 
f01190d0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01190d5:	0f b6 d0             	movzbl %al,%edx
f01190d8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01190de:	01 d0                	add    %edx,%eax
f01190e0:	48                   	dec    %eax
f01190e1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01190e7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01190ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01190f2:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01190f8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01190fe:	29 d0                	sub    %edx,%eax
f0119100:	01 c3                	add    %eax,%ebx
f0119102:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119109:	10 00 00 
f011910c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119111:	0f b6 c0             	movzbl %al,%eax
f0119114:	c1 e0 04             	shl    $0x4,%eax
f0119117:	89 c2                	mov    %eax,%edx
f0119119:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011911f:	01 d0                	add    %edx,%eax
f0119121:	48                   	dec    %eax
f0119122:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119128:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011912e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119133:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119139:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011913f:	29 d0                	sub    %edx,%eax
f0119141:	01 d8                	add    %ebx,%eax
f0119143:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119148:	39 c1                	cmp    %eax,%ecx
f011914a:	0f 85 54 02 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119150:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119156:	89 c1                	mov    %eax,%ecx
f0119158:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011915f:	10 00 00 
f0119162:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119168:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011916d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119173:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119179:	ba 00 00 00 00       	mov    $0x0,%edx
f011917e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119184:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011918a:	29 d0                	sub    %edx,%eax
f011918c:	89 c3                	mov    %eax,%ebx
f011918e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119195:	10 00 00 
f0119198:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011919d:	0f b6 d0             	movzbl %al,%edx
f01191a0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01191a6:	01 d0                	add    %edx,%eax
f01191a8:	48                   	dec    %eax
f01191a9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01191af:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01191b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01191ba:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01191c0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01191c6:	29 d0                	sub    %edx,%eax
f01191c8:	01 c3                	add    %eax,%ebx
f01191ca:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01191d1:	10 00 00 
f01191d4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01191d9:	0f b6 c0             	movzbl %al,%eax
f01191dc:	c1 e0 04             	shl    $0x4,%eax
f01191df:	89 c2                	mov    %eax,%edx
f01191e1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01191e7:	01 d0                	add    %edx,%eax
f01191e9:	48                   	dec    %eax
f01191ea:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01191f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01191f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01191fb:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119201:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119207:	29 d0                	sub    %edx,%eax
f0119209:	01 d8                	add    %ebx,%eax
f011920b:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119210:	39 c1                	cmp    %eax,%ecx
f0119212:	0f 85 8c 01 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119218:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011921e:	89 c1                	mov    %eax,%ecx
f0119220:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119227:	10 00 00 
f011922a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119230:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119235:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011923b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119241:	ba 00 00 00 00       	mov    $0x0,%edx
f0119246:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011924c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119252:	29 d0                	sub    %edx,%eax
f0119254:	89 c3                	mov    %eax,%ebx
f0119256:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011925d:	10 00 00 
f0119260:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119265:	0f b6 d0             	movzbl %al,%edx
f0119268:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011926e:	01 d0                	add    %edx,%eax
f0119270:	48                   	dec    %eax
f0119271:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0119277:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011927d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119282:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0119288:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011928e:	29 d0                	sub    %edx,%eax
f0119290:	01 c3                	add    %eax,%ebx
f0119292:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0119299:	10 00 00 
f011929c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01192a1:	0f b6 c0             	movzbl %al,%eax
f01192a4:	c1 e0 04             	shl    $0x4,%eax
f01192a7:	89 c2                	mov    %eax,%edx
f01192a9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01192af:	01 d0                	add    %edx,%eax
f01192b1:	48                   	dec    %eax
f01192b2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01192b8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01192be:	ba 00 00 00 00       	mov    $0x0,%edx
f01192c3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01192c9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01192cf:	29 d0                	sub    %edx,%eax
f01192d1:	01 d8                	add    %ebx,%eax
f01192d3:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01192d8:	39 c1                	cmp    %eax,%ecx
f01192da:	0f 85 c4 00 00 00    	jne    f01193a4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01192e0:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01192e6:	89 c1                	mov    %eax,%ecx
f01192e8:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01192ef:	10 00 00 
f01192f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01192f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192fd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119303:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119309:	ba 00 00 00 00       	mov    $0x0,%edx
f011930e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119314:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011931a:	29 d0                	sub    %edx,%eax
f011931c:	89 c3                	mov    %eax,%ebx
f011931e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119325:	10 00 00 
f0119328:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011932d:	0f b6 d0             	movzbl %al,%edx
f0119330:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119336:	01 d0                	add    %edx,%eax
f0119338:	48                   	dec    %eax
f0119339:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011933f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119345:	ba 00 00 00 00       	mov    $0x0,%edx
f011934a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0119350:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119356:	29 d0                	sub    %edx,%eax
f0119358:	01 c3                	add    %eax,%ebx
f011935a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0119361:	10 00 00 
f0119364:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119369:	0f b6 c0             	movzbl %al,%eax
f011936c:	c1 e0 04             	shl    $0x4,%eax
f011936f:	89 c2                	mov    %eax,%edx
f0119371:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119377:	01 d0                	add    %edx,%eax
f0119379:	48                   	dec    %eax
f011937a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0119380:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119386:	ba 00 00 00 00       	mov    $0x0,%edx
f011938b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0119391:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119397:	29 d0                	sub    %edx,%eax
f0119399:	01 d8                	add    %ebx,%eax
f011939b:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01193a0:	39 c1                	cmp    %eax,%ecx
f01193a2:	74 17                	je     f01193bb <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01193a4:	83 ec 04             	sub    $0x4,%esp
f01193a7:	68 94 b8 13 f0       	push   $0xf013b894
f01193ac:	68 03 01 00 00       	push   $0x103
f01193b1:	68 1a b6 13 f0       	push   $0xf013b61a
f01193b6:	e8 4a 6e fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193bb:	e8 08 aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01193c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01193c3:	74 17                	je     f01193dc <test_kmalloc_nextfit+0x6ec>
f01193c5:	83 ec 04             	sub    $0x4,%esp
f01193c8:	68 34 b6 13 f0       	push   $0xf013b634
f01193cd:	68 05 01 00 00       	push   $0x105
f01193d2:	68 1a b6 13 f0       	push   $0xf013b61a
f01193d7:	e8 29 6e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01193dc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01193df:	e8 c3 3a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01193e4:	29 c3                	sub    %eax,%ebx
f01193e6:	89 d9                	mov    %ebx,%ecx
f01193e8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01193ef:	10 00 00 
f01193f2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01193f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193fd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119403:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119409:	ba 00 00 00 00       	mov    $0x0,%edx
f011940e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119414:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011941a:	29 d0                	sub    %edx,%eax
f011941c:	89 c3                	mov    %eax,%ebx
f011941e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119425:	10 00 00 
f0119428:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011942d:	0f b6 d0             	movzbl %al,%edx
f0119430:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119436:	01 d0                	add    %edx,%eax
f0119438:	48                   	dec    %eax
f0119439:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011943f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119445:	ba 00 00 00 00       	mov    $0x0,%edx
f011944a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119450:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119456:	29 d0                	sub    %edx,%eax
f0119458:	01 c3                	add    %eax,%ebx
f011945a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0119461:	10 00 00 
f0119464:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119469:	0f b6 c0             	movzbl %al,%eax
f011946c:	c1 e0 04             	shl    $0x4,%eax
f011946f:	89 c2                	mov    %eax,%edx
f0119471:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119477:	01 d0                	add    %edx,%eax
f0119479:	48                   	dec    %eax
f011947a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0119480:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119486:	ba 00 00 00 00       	mov    $0x0,%edx
f011948b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0119491:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119497:	29 d0                	sub    %edx,%eax
f0119499:	01 d8                	add    %ebx,%eax
f011949b:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01194a0:	29 c2                	sub    %eax,%edx
f01194a2:	89 d0                	mov    %edx,%eax
f01194a4:	c1 e8 0c             	shr    $0xc,%eax
f01194a7:	39 c1                	cmp    %eax,%ecx
f01194a9:	74 17                	je     f01194c2 <test_kmalloc_nextfit+0x7d2>
f01194ab:	83 ec 04             	sub    $0x4,%esp
f01194ae:	68 d7 b8 13 f0       	push   $0xf013b8d7
f01194b3:	68 06 01 00 00       	push   $0x106
f01194b8:	68 1a b6 13 f0       	push   $0xf013b61a
f01194bd:	e8 43 6d fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01194c2:	e8 01 a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01194c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194ca:	e8 d8 39 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01194cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01194d2:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01194d8:	83 ec 0c             	sub    $0xc,%esp
f01194db:	50                   	push   %eax
f01194dc:	e8 79 e7 fe ff       	call   f0107c5a <kfree>
f01194e1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01194e4:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01194ea:	83 ec 0c             	sub    $0xc,%esp
f01194ed:	50                   	push   %eax
f01194ee:	e8 67 e7 fe ff       	call   f0107c5a <kfree>
f01194f3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01194f6:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01194fc:	83 ec 0c             	sub    $0xc,%esp
f01194ff:	50                   	push   %eax
f0119500:	e8 55 e7 fe ff       	call   f0107c5a <kfree>
f0119505:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119508:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011950e:	83 ec 0c             	sub    $0xc,%esp
f0119511:	50                   	push   %eax
f0119512:	e8 43 e7 fe ff       	call   f0107c5a <kfree>
f0119517:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011951a:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119520:	83 ec 0c             	sub    $0xc,%esp
f0119523:	50                   	push   %eax
f0119524:	e8 31 e7 fe ff       	call   f0107c5a <kfree>
f0119529:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011952c:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119532:	83 ec 0c             	sub    $0xc,%esp
f0119535:	50                   	push   %eax
f0119536:	e8 1f e7 fe ff       	call   f0107c5a <kfree>
f011953b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011953e:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119544:	83 ec 0c             	sub    $0xc,%esp
f0119547:	50                   	push   %eax
f0119548:	e8 0d e7 fe ff       	call   f0107c5a <kfree>
f011954d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119550:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119556:	83 ec 0c             	sub    $0xc,%esp
f0119559:	50                   	push   %eax
f011955a:	e8 fb e6 fe ff       	call   f0107c5a <kfree>
f011955f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119562:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119568:	83 ec 0c             	sub    $0xc,%esp
f011956b:	50                   	push   %eax
f011956c:	e8 e9 e6 fe ff       	call   f0107c5a <kfree>
f0119571:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119574:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011957a:	83 ec 0c             	sub    $0xc,%esp
f011957d:	50                   	push   %eax
f011957e:	e8 d7 e6 fe ff       	call   f0107c5a <kfree>
f0119583:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119586:	e8 3d a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011958b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011958e:	74 17                	je     f01195a7 <test_kmalloc_nextfit+0x8b7>
f0119590:	83 ec 04             	sub    $0x4,%esp
f0119593:	68 34 b6 13 f0       	push   $0xf013b634
f0119598:	68 17 01 00 00       	push   $0x117
f011959d:	68 1a b6 13 f0       	push   $0xf013b61a
f01195a2:	e8 5e 6c fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01195a7:	e8 fb 38 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01195ac:	89 c2                	mov    %eax,%edx
f01195ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01195b1:	89 d1                	mov    %edx,%ecx
f01195b3:	29 c1                	sub    %eax,%ecx
f01195b5:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01195bc:	10 00 00 
f01195bf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01195c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195ca:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01195d0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195db:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01195e1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195e7:	29 d0                	sub    %edx,%eax
f01195e9:	89 c3                	mov    %eax,%ebx
f01195eb:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01195f2:	10 00 00 
f01195f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01195fa:	0f b6 d0             	movzbl %al,%edx
f01195fd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119603:	01 d0                	add    %edx,%eax
f0119605:	48                   	dec    %eax
f0119606:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011960c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119612:	ba 00 00 00 00       	mov    $0x0,%edx
f0119617:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011961d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119623:	29 d0                	sub    %edx,%eax
f0119625:	01 c3                	add    %eax,%ebx
f0119627:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011962e:	10 00 00 
f0119631:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119636:	0f b6 c0             	movzbl %al,%eax
f0119639:	c1 e0 04             	shl    $0x4,%eax
f011963c:	89 c2                	mov    %eax,%edx
f011963e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119644:	01 d0                	add    %edx,%eax
f0119646:	48                   	dec    %eax
f0119647:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011964d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119653:	ba 00 00 00 00       	mov    $0x0,%edx
f0119658:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011965e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119664:	29 d0                	sub    %edx,%eax
f0119666:	01 d8                	add    %ebx,%eax
f0119668:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f011966d:	29 c2                	sub    %eax,%edx
f011966f:	89 d0                	mov    %edx,%eax
f0119671:	c1 e8 0c             	shr    $0xc,%eax
f0119674:	39 c1                	cmp    %eax,%ecx
f0119676:	74 17                	je     f011968f <test_kmalloc_nextfit+0x99f>
f0119678:	83 ec 04             	sub    $0x4,%esp
f011967b:	68 e8 b8 13 f0       	push   $0xf013b8e8
f0119680:	68 18 01 00 00       	push   $0x118
f0119685:	68 1a b6 13 f0       	push   $0xf013b61a
f011968a:	e8 76 6b fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f011968f:	e8 34 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119694:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119697:	e8 0b 38 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011969c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f011969f:	83 ec 0c             	sub    $0xc,%esp
f01196a2:	68 00 fc 0f 00       	push   $0xffc00
f01196a7:	e8 e3 e4 fe ff       	call   f0107b8f <kmalloc>
f01196ac:	83 c4 10             	add    $0x10,%esp
f01196af:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01196b5:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01196bc:	10 00 00 
f01196bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01196c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196ca:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01196d0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01196d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01196db:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01196e1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01196e7:	29 d0                	sub    %edx,%eax
f01196e9:	89 c1                	mov    %eax,%ecx
f01196eb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01196f2:	10 00 00 
f01196f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01196fa:	0f b6 d0             	movzbl %al,%edx
f01196fd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119703:	01 d0                	add    %edx,%eax
f0119705:	48                   	dec    %eax
f0119706:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011970c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119712:	ba 00 00 00 00       	mov    $0x0,%edx
f0119717:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011971d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119723:	29 d0                	sub    %edx,%eax
f0119725:	01 c1                	add    %eax,%ecx
f0119727:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011972e:	10 00 00 
f0119731:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119736:	0f b6 c0             	movzbl %al,%eax
f0119739:	c1 e0 04             	shl    $0x4,%eax
f011973c:	89 c2                	mov    %eax,%edx
f011973e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119744:	01 d0                	add    %edx,%eax
f0119746:	48                   	dec    %eax
f0119747:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011974d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119753:	ba 00 00 00 00       	mov    $0x0,%edx
f0119758:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011975e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119764:	29 d0                	sub    %edx,%eax
f0119766:	01 c8                	add    %ecx,%eax
f0119768:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011976e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119774:	39 c2                	cmp    %eax,%edx
f0119776:	74 17                	je     f011978f <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119778:	83 ec 04             	sub    $0x4,%esp
f011977b:	68 28 b9 13 f0       	push   $0xf013b928
f0119780:	68 1f 01 00 00       	push   $0x11f
f0119785:	68 1a b6 13 f0       	push   $0xf013b61a
f011978a:	e8 76 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011978f:	e8 34 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119797:	74 17                	je     f01197b0 <test_kmalloc_nextfit+0xac0>
f0119799:	83 ec 04             	sub    $0x4,%esp
f011979c:	68 34 b6 13 f0       	push   $0xf013b634
f01197a1:	68 20 01 00 00       	push   $0x120
f01197a6:	68 1a b6 13 f0       	push   $0xf013b61a
f01197ab:	e8 55 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01197b0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197b3:	e8 ef 36 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01197b8:	29 c3                	sub    %eax,%ebx
f01197ba:	89 d8                	mov    %ebx,%eax
f01197bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f01197c1:	74 17                	je     f01197da <test_kmalloc_nextfit+0xaea>
f01197c3:	83 ec 04             	sub    $0x4,%esp
f01197c6:	68 d7 b8 13 f0       	push   $0xf013b8d7
f01197cb:	68 21 01 00 00       	push   $0x121
f01197d0:	68 1a b6 13 f0       	push   $0xf013b61a
f01197d5:	e8 2b 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01197da:	e8 e9 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197e2:	e8 c0 36 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f01197e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01197ea:	83 ec 0c             	sub    $0xc,%esp
f01197ed:	68 00 04 00 00       	push   $0x400
f01197f2:	e8 98 e3 fe ff       	call   f0107b8f <kmalloc>
f01197f7:	83 c4 10             	add    $0x10,%esp
f01197fa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119800:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119807:	10 00 00 
f011980a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119810:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119815:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011981b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119821:	ba 00 00 00 00       	mov    $0x0,%edx
f0119826:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011982c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119832:	29 d0                	sub    %edx,%eax
f0119834:	89 c1                	mov    %eax,%ecx
f0119836:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011983d:	10 00 00 
f0119840:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119845:	0f b6 d0             	movzbl %al,%edx
f0119848:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011984e:	01 d0                	add    %edx,%eax
f0119850:	48                   	dec    %eax
f0119851:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119857:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011985d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119862:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119868:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011986e:	29 d0                	sub    %edx,%eax
f0119870:	01 c1                	add    %eax,%ecx
f0119872:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119879:	10 00 00 
f011987c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119881:	0f b6 c0             	movzbl %al,%eax
f0119884:	c1 e0 04             	shl    $0x4,%eax
f0119887:	89 c2                	mov    %eax,%edx
f0119889:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011988f:	01 d0                	add    %edx,%eax
f0119891:	48                   	dec    %eax
f0119892:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119898:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011989e:	ba 00 00 00 00       	mov    $0x0,%edx
f01198a3:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01198a9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01198af:	29 d0                	sub    %edx,%eax
f01198b1:	01 c8                	add    %ecx,%eax
f01198b3:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01198b9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01198bf:	39 c2                	cmp    %eax,%edx
f01198c1:	74 17                	je     f01198da <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01198c3:	83 ec 04             	sub    $0x4,%esp
f01198c6:	68 28 b9 13 f0       	push   $0xf013b928
f01198cb:	68 27 01 00 00       	push   $0x127
f01198d0:	68 1a b6 13 f0       	push   $0xf013b61a
f01198d5:	e8 2b 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198da:	e8 e9 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198e2:	74 17                	je     f01198fb <test_kmalloc_nextfit+0xc0b>
f01198e4:	83 ec 04             	sub    $0x4,%esp
f01198e7:	68 34 b6 13 f0       	push   $0xf013b634
f01198ec:	68 28 01 00 00       	push   $0x128
f01198f1:	68 1a b6 13 f0       	push   $0xf013b61a
f01198f6:	e8 0a 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01198fb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198fe:	e8 a4 35 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119903:	29 c3                	sub    %eax,%ebx
f0119905:	89 d8                	mov    %ebx,%eax
f0119907:	83 f8 01             	cmp    $0x1,%eax
f011990a:	74 17                	je     f0119923 <test_kmalloc_nextfit+0xc33>
f011990c:	83 ec 04             	sub    $0x4,%esp
f011990f:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119914:	68 29 01 00 00       	push   $0x129
f0119919:	68 1a b6 13 f0       	push   $0xf013b61a
f011991e:	e8 e2 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119923:	e8 a0 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119928:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011992b:	e8 77 35 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119930:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119933:	83 ec 0c             	sub    $0xc,%esp
f0119936:	68 00 00 50 00       	push   $0x500000
f011993b:	e8 4f e2 fe ff       	call   f0107b8f <kmalloc>
f0119940:	83 c4 10             	add    $0x10,%esp
f0119943:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119949:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119950:	10 00 00 
f0119953:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119959:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011995e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119964:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011996a:	ba 00 00 00 00       	mov    $0x0,%edx
f011996f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119975:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011997b:	29 d0                	sub    %edx,%eax
f011997d:	89 c1                	mov    %eax,%ecx
f011997f:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119986:	10 00 00 
f0119989:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011998e:	0f b6 d0             	movzbl %al,%edx
f0119991:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119997:	01 d0                	add    %edx,%eax
f0119999:	48                   	dec    %eax
f011999a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01199a0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01199a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01199ab:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01199b1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01199b7:	29 d0                	sub    %edx,%eax
f01199b9:	01 c1                	add    %eax,%ecx
f01199bb:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01199c2:	10 00 00 
f01199c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01199ca:	0f b6 c0             	movzbl %al,%eax
f01199cd:	c1 e0 04             	shl    $0x4,%eax
f01199d0:	89 c2                	mov    %eax,%edx
f01199d2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01199d8:	01 d0                	add    %edx,%eax
f01199da:	48                   	dec    %eax
f01199db:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01199e1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01199e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01199ec:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01199f2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01199f8:	29 d0                	sub    %edx,%eax
f01199fa:	01 c8                	add    %ecx,%eax
f01199fc:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119a02:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a08:	39 c2                	cmp    %eax,%edx
f0119a0a:	74 17                	je     f0119a23 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119a0c:	83 ec 04             	sub    $0x4,%esp
f0119a0f:	68 28 b9 13 f0       	push   $0xf013b928
f0119a14:	68 2f 01 00 00       	push   $0x12f
f0119a19:	68 1a b6 13 f0       	push   $0xf013b61a
f0119a1e:	e8 e2 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a23:	e8 a0 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a28:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a2b:	74 17                	je     f0119a44 <test_kmalloc_nextfit+0xd54>
f0119a2d:	83 ec 04             	sub    $0x4,%esp
f0119a30:	68 34 b6 13 f0       	push   $0xf013b634
f0119a35:	68 30 01 00 00       	push   $0x130
f0119a3a:	68 1a b6 13 f0       	push   $0xf013b61a
f0119a3f:	e8 c1 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119a44:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a47:	e8 5b 34 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119a4c:	29 c3                	sub    %eax,%ebx
f0119a4e:	89 d8                	mov    %ebx,%eax
f0119a50:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119a55:	74 17                	je     f0119a6e <test_kmalloc_nextfit+0xd7e>
f0119a57:	83 ec 04             	sub    $0x4,%esp
f0119a5a:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119a5f:	68 31 01 00 00       	push   $0x131
f0119a64:	68 1a b6 13 f0       	push   $0xf013b61a
f0119a69:	e8 97 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a6e:	e8 55 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a76:	e8 2c 34 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119a7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119a7e:	83 ec 0c             	sub    $0xc,%esp
f0119a81:	68 00 00 10 00       	push   $0x100000
f0119a86:	e8 04 e1 fe ff       	call   f0107b8f <kmalloc>
f0119a8b:	83 c4 10             	add    $0x10,%esp
f0119a8e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119a94:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119a9b:	10 00 00 
f0119a9e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119aa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119aa9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119aaf:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aba:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119ac0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ac6:	29 d0                	sub    %edx,%eax
f0119ac8:	89 c1                	mov    %eax,%ecx
f0119aca:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119ad1:	10 00 00 
f0119ad4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119ad9:	0f b6 d0             	movzbl %al,%edx
f0119adc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119ae2:	01 d0                	add    %edx,%eax
f0119ae4:	48                   	dec    %eax
f0119ae5:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119aeb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119af6:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119afc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119b02:	29 d0                	sub    %edx,%eax
f0119b04:	01 c1                	add    %eax,%ecx
f0119b06:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119b0d:	10 00 00 
f0119b10:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119b15:	0f b6 c0             	movzbl %al,%eax
f0119b18:	c1 e0 04             	shl    $0x4,%eax
f0119b1b:	89 c2                	mov    %eax,%edx
f0119b1d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119b23:	01 d0                	add    %edx,%eax
f0119b25:	48                   	dec    %eax
f0119b26:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119b2c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119b32:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b37:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119b3d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119b43:	29 d0                	sub    %edx,%eax
f0119b45:	01 c8                	add    %ecx,%eax
f0119b47:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119b4d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b53:	39 c2                	cmp    %eax,%edx
f0119b55:	74 17                	je     f0119b6e <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119b57:	83 ec 04             	sub    $0x4,%esp
f0119b5a:	68 28 b9 13 f0       	push   $0xf013b928
f0119b5f:	68 37 01 00 00       	push   $0x137
f0119b64:	68 1a b6 13 f0       	push   $0xf013b61a
f0119b69:	e8 97 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b6e:	e8 55 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b73:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b76:	74 17                	je     f0119b8f <test_kmalloc_nextfit+0xe9f>
f0119b78:	83 ec 04             	sub    $0x4,%esp
f0119b7b:	68 34 b6 13 f0       	push   $0xf013b634
f0119b80:	68 38 01 00 00       	push   $0x138
f0119b85:	68 1a b6 13 f0       	push   $0xf013b61a
f0119b8a:	e8 76 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119b8f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b92:	e8 10 33 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119b97:	29 c3                	sub    %eax,%ebx
f0119b99:	89 d8                	mov    %ebx,%eax
f0119b9b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119ba0:	74 17                	je     f0119bb9 <test_kmalloc_nextfit+0xec9>
f0119ba2:	83 ec 04             	sub    $0x4,%esp
f0119ba5:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119baa:	68 39 01 00 00       	push   $0x139
f0119baf:	68 1a b6 13 f0       	push   $0xf013b61a
f0119bb4:	e8 4c 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119bb9:	e8 0a a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119bbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119bc1:	e8 e1 32 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119bc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119bc9:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119bcf:	83 ec 0c             	sub    $0xc,%esp
f0119bd2:	50                   	push   %eax
f0119bd3:	e8 82 e0 fe ff       	call   f0107c5a <kfree>
f0119bd8:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bdb:	e8 e8 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119be0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119be3:	74 17                	je     f0119bfc <test_kmalloc_nextfit+0xf0c>
f0119be5:	83 ec 04             	sub    $0x4,%esp
f0119be8:	68 34 b6 13 f0       	push   $0xf013b634
f0119bed:	68 3e 01 00 00       	push   $0x13e
f0119bf2:	68 1a b6 13 f0       	push   $0xf013b61a
f0119bf7:	e8 09 66 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119bfc:	e8 a6 32 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119c01:	89 c2                	mov    %eax,%edx
f0119c03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119c06:	29 c2                	sub    %eax,%edx
f0119c08:	89 d0                	mov    %edx,%eax
f0119c0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c0f:	74 17                	je     f0119c28 <test_kmalloc_nextfit+0xf38>
f0119c11:	83 ec 04             	sub    $0x4,%esp
f0119c14:	68 e8 b8 13 f0       	push   $0xf013b8e8
f0119c19:	68 3f 01 00 00       	push   $0x13f
f0119c1e:	68 1a b6 13 f0       	push   $0xf013b61a
f0119c23:	e8 dd 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c28:	e8 9b a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c30:	e8 72 32 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119c35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119c38:	83 ec 0c             	sub    $0xc,%esp
f0119c3b:	68 00 04 00 00       	push   $0x400
f0119c40:	e8 4a df fe ff       	call   f0107b8f <kmalloc>
f0119c45:	83 c4 10             	add    $0x10,%esp
f0119c48:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119c4e:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119c55:	10 00 00 
f0119c58:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119c5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c63:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119c69:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119c6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c74:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119c7a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119c80:	29 d0                	sub    %edx,%eax
f0119c82:	89 c1                	mov    %eax,%ecx
f0119c84:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119c8b:	10 00 00 
f0119c8e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119c93:	0f b6 d0             	movzbl %al,%edx
f0119c96:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119c9c:	01 d0                	add    %edx,%eax
f0119c9e:	48                   	dec    %eax
f0119c9f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119ca5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119cab:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cb0:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119cb6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119cbc:	29 d0                	sub    %edx,%eax
f0119cbe:	01 c1                	add    %eax,%ecx
f0119cc0:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119cc7:	10 00 00 
f0119cca:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119ccf:	0f b6 c0             	movzbl %al,%eax
f0119cd2:	c1 e0 04             	shl    $0x4,%eax
f0119cd5:	89 c2                	mov    %eax,%edx
f0119cd7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119cdd:	01 d0                	add    %edx,%eax
f0119cdf:	48                   	dec    %eax
f0119ce0:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119ce6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119cec:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cf1:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119cf7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119cfd:	29 d0                	sub    %edx,%eax
f0119cff:	01 c8                	add    %ecx,%eax
f0119d01:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119d07:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d0d:	39 c2                	cmp    %eax,%edx
f0119d0f:	74 17                	je     f0119d28 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119d11:	83 ec 04             	sub    $0x4,%esp
f0119d14:	68 28 b9 13 f0       	push   $0xf013b928
f0119d19:	68 45 01 00 00       	push   $0x145
f0119d1e:	68 1a b6 13 f0       	push   $0xf013b61a
f0119d23:	e8 dd 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d28:	e8 9b a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d30:	74 17                	je     f0119d49 <test_kmalloc_nextfit+0x1059>
f0119d32:	83 ec 04             	sub    $0x4,%esp
f0119d35:	68 34 b6 13 f0       	push   $0xf013b634
f0119d3a:	68 46 01 00 00       	push   $0x146
f0119d3f:	68 1a b6 13 f0       	push   $0xf013b61a
f0119d44:	e8 bc 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d49:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d4c:	e8 56 31 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119d51:	29 c3                	sub    %eax,%ebx
f0119d53:	89 d8                	mov    %ebx,%eax
f0119d55:	83 f8 01             	cmp    $0x1,%eax
f0119d58:	74 17                	je     f0119d71 <test_kmalloc_nextfit+0x1081>
f0119d5a:	83 ec 04             	sub    $0x4,%esp
f0119d5d:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119d62:	68 47 01 00 00       	push   $0x147
f0119d67:	68 1a b6 13 f0       	push   $0xf013b61a
f0119d6c:	e8 94 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d71:	e8 52 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d76:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d79:	e8 29 31 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119d7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119d81:	83 ec 0c             	sub    $0xc,%esp
f0119d84:	68 00 e0 1f 00       	push   $0x1fe000
f0119d89:	e8 01 de fe ff       	call   f0107b8f <kmalloc>
f0119d8e:	83 c4 10             	add    $0x10,%esp
f0119d91:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119d97:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119d9e:	10 00 00 
f0119da1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119da7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119dac:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119db2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dbd:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119dc3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119dc9:	29 d0                	sub    %edx,%eax
f0119dcb:	89 c1                	mov    %eax,%ecx
f0119dcd:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119dd4:	10 00 00 
f0119dd7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119ddc:	0f b6 d0             	movzbl %al,%edx
f0119ddf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119de5:	01 d0                	add    %edx,%eax
f0119de7:	48                   	dec    %eax
f0119de8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119dee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119df9:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119dff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119e05:	29 d0                	sub    %edx,%eax
f0119e07:	01 c1                	add    %eax,%ecx
f0119e09:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119e10:	10 00 00 
f0119e13:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119e18:	0f b6 c0             	movzbl %al,%eax
f0119e1b:	c1 e0 04             	shl    $0x4,%eax
f0119e1e:	89 c2                	mov    %eax,%edx
f0119e20:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119e26:	01 d0                	add    %edx,%eax
f0119e28:	48                   	dec    %eax
f0119e29:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119e2f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e3a:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119e40:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119e46:	29 d0                	sub    %edx,%eax
f0119e48:	01 c8                	add    %ecx,%eax
f0119e4a:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119e50:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e56:	39 c2                	cmp    %eax,%edx
f0119e58:	74 17                	je     f0119e71 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119e5a:	83 ec 04             	sub    $0x4,%esp
f0119e5d:	68 28 b9 13 f0       	push   $0xf013b928
f0119e62:	68 4d 01 00 00       	push   $0x14d
f0119e67:	68 1a b6 13 f0       	push   $0xf013b61a
f0119e6c:	e8 94 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e71:	e8 52 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e76:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e79:	74 17                	je     f0119e92 <test_kmalloc_nextfit+0x11a2>
f0119e7b:	83 ec 04             	sub    $0x4,%esp
f0119e7e:	68 34 b6 13 f0       	push   $0xf013b634
f0119e83:	68 4e 01 00 00       	push   $0x14e
f0119e88:	68 1a b6 13 f0       	push   $0xf013b61a
f0119e8d:	e8 73 63 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119e92:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e95:	e8 0d 30 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119e9a:	29 c3                	sub    %eax,%ebx
f0119e9c:	89 d8                	mov    %ebx,%eax
f0119e9e:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119ea3:	74 17                	je     f0119ebc <test_kmalloc_nextfit+0x11cc>
f0119ea5:	83 ec 04             	sub    $0x4,%esp
f0119ea8:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119ead:	68 50 01 00 00       	push   $0x150
f0119eb2:	68 1a b6 13 f0       	push   $0xf013b61a
f0119eb7:	e8 49 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ebc:	e8 07 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ec1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ec4:	e8 de 2f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119ecc:	83 ec 0c             	sub    $0xc,%esp
f0119ecf:	68 00 00 08 00       	push   $0x80000
f0119ed4:	e8 b6 dc fe ff       	call   f0107b8f <kmalloc>
f0119ed9:	83 c4 10             	add    $0x10,%esp
f0119edc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119ee2:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119ee9:	10 00 00 
f0119eec:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119ef2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ef7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119efd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f03:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f08:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119f0e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f14:	29 d0                	sub    %edx,%eax
f0119f16:	89 c1                	mov    %eax,%ecx
f0119f18:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119f1f:	10 00 00 
f0119f22:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119f27:	0f b6 d0             	movzbl %al,%edx
f0119f2a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119f30:	01 d0                	add    %edx,%eax
f0119f32:	48                   	dec    %eax
f0119f33:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119f39:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119f3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f44:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119f4a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119f50:	29 d0                	sub    %edx,%eax
f0119f52:	01 c1                	add    %eax,%ecx
f0119f54:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119f5b:	10 00 00 
f0119f5e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119f63:	0f b6 c0             	movzbl %al,%eax
f0119f66:	c1 e0 04             	shl    $0x4,%eax
f0119f69:	89 c2                	mov    %eax,%edx
f0119f6b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119f71:	01 d0                	add    %edx,%eax
f0119f73:	48                   	dec    %eax
f0119f74:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119f7a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f85:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119f8b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119f91:	29 d0                	sub    %edx,%eax
f0119f93:	01 c8                	add    %ecx,%eax
f0119f95:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119f9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fa1:	39 c2                	cmp    %eax,%edx
f0119fa3:	74 17                	je     f0119fbc <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119fa5:	83 ec 04             	sub    $0x4,%esp
f0119fa8:	68 28 b9 13 f0       	push   $0xf013b928
f0119fad:	68 56 01 00 00       	push   $0x156
f0119fb2:	68 1a b6 13 f0       	push   $0xf013b61a
f0119fb7:	e8 49 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fbc:	e8 07 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fc1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fc4:	74 17                	je     f0119fdd <test_kmalloc_nextfit+0x12ed>
f0119fc6:	83 ec 04             	sub    $0x4,%esp
f0119fc9:	68 34 b6 13 f0       	push   $0xf013b634
f0119fce:	68 57 01 00 00       	push   $0x157
f0119fd3:	68 1a b6 13 f0       	push   $0xf013b61a
f0119fd8:	e8 28 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119fdd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fe0:	e8 c2 2e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f0119fe5:	29 c3                	sub    %eax,%ebx
f0119fe7:	89 d8                	mov    %ebx,%eax
f0119fe9:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119fee:	74 17                	je     f011a007 <test_kmalloc_nextfit+0x1317>
f0119ff0:	83 ec 04             	sub    $0x4,%esp
f0119ff3:	68 d7 b8 13 f0       	push   $0xf013b8d7
f0119ff8:	68 58 01 00 00       	push   $0x158
f0119ffd:	68 1a b6 13 f0       	push   $0xf013b61a
f011a002:	e8 fe 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a007:	83 ec 0c             	sub    $0xc,%esp
f011a00a:	68 48 b9 13 f0       	push   $0xf013b948
f011a00f:	e8 fa 6c fe ff       	call   f0100d0e <cprintf>
f011a014:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a017:	e8 ac 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a01c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a01f:	e8 83 2e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a024:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a027:	83 ec 0c             	sub    $0xc,%esp
f011a02a:	68 00 00 38 00       	push   $0x380000
f011a02f:	e8 5b db fe ff       	call   f0107b8f <kmalloc>
f011a034:	83 c4 10             	add    $0x10,%esp
f011a037:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a03d:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a044:	10 00 00 
f011a047:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a04d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a052:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a058:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a05e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a063:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a069:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a06f:	29 d0                	sub    %edx,%eax
f011a071:	89 c1                	mov    %eax,%ecx
f011a073:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a07a:	10 00 00 
f011a07d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a082:	0f b6 d0             	movzbl %al,%edx
f011a085:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a08b:	01 d0                	add    %edx,%eax
f011a08d:	48                   	dec    %eax
f011a08e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a094:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a09a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a09f:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a0a5:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a0ab:	29 d0                	sub    %edx,%eax
f011a0ad:	01 c1                	add    %eax,%ecx
f011a0af:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a0b6:	10 00 00 
f011a0b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a0be:	0f b6 c0             	movzbl %al,%eax
f011a0c1:	c1 e0 04             	shl    $0x4,%eax
f011a0c4:	89 c2                	mov    %eax,%edx
f011a0c6:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a0cc:	01 d0                	add    %edx,%eax
f011a0ce:	48                   	dec    %eax
f011a0cf:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a0d5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a0db:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0e0:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a0e6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a0ec:	29 d0                	sub    %edx,%eax
f011a0ee:	01 c8                	add    %ecx,%eax
f011a0f0:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a0f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a0fc:	39 c2                	cmp    %eax,%edx
f011a0fe:	74 17                	je     f011a117 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a100:	83 ec 04             	sub    $0x4,%esp
f011a103:	68 28 b9 13 f0       	push   $0xf013b928
f011a108:	68 62 01 00 00       	push   $0x162
f011a10d:	68 1a b6 13 f0       	push   $0xf013b61a
f011a112:	e8 ee 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a117:	e8 ac 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a11c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a11f:	74 17                	je     f011a138 <test_kmalloc_nextfit+0x1448>
f011a121:	83 ec 04             	sub    $0x4,%esp
f011a124:	68 34 b6 13 f0       	push   $0xf013b634
f011a129:	68 63 01 00 00       	push   $0x163
f011a12e:	68 1a b6 13 f0       	push   $0xf013b61a
f011a133:	e8 cd 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a138:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a13b:	e8 67 2d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a140:	29 c3                	sub    %eax,%ebx
f011a142:	89 d8                	mov    %ebx,%eax
f011a144:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a149:	74 17                	je     f011a162 <test_kmalloc_nextfit+0x1472>
f011a14b:	83 ec 04             	sub    $0x4,%esp
f011a14e:	68 d7 b8 13 f0       	push   $0xf013b8d7
f011a153:	68 64 01 00 00       	push   $0x164
f011a158:	68 1a b6 13 f0       	push   $0xf013b61a
f011a15d:	e8 a3 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a162:	e8 61 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a167:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a16a:	e8 38 2d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a16f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a172:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a178:	83 ec 0c             	sub    $0xc,%esp
f011a17b:	50                   	push   %eax
f011a17c:	e8 d9 da fe ff       	call   f0107c5a <kfree>
f011a181:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a184:	e8 3f 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a189:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a18c:	74 17                	je     f011a1a5 <test_kmalloc_nextfit+0x14b5>
f011a18e:	83 ec 04             	sub    $0x4,%esp
f011a191:	68 34 b6 13 f0       	push   $0xf013b634
f011a196:	68 69 01 00 00       	push   $0x169
f011a19b:	68 1a b6 13 f0       	push   $0xf013b61a
f011a1a0:	e8 60 60 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a1a5:	e8 fd 2c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a1aa:	89 c2                	mov    %eax,%edx
f011a1ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a1af:	29 c2                	sub    %eax,%edx
f011a1b1:	89 d0                	mov    %edx,%eax
f011a1b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a1b8:	74 17                	je     f011a1d1 <test_kmalloc_nextfit+0x14e1>
f011a1ba:	83 ec 04             	sub    $0x4,%esp
f011a1bd:	68 e8 b8 13 f0       	push   $0xf013b8e8
f011a1c2:	68 6a 01 00 00       	push   $0x16a
f011a1c7:	68 1a b6 13 f0       	push   $0xf013b61a
f011a1cc:	e8 34 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1d1:	e8 f2 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1d9:	e8 c9 2c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a1de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a1e1:	83 ec 0c             	sub    $0xc,%esp
f011a1e4:	68 00 fc 3f 00       	push   $0x3ffc00
f011a1e9:	e8 a1 d9 fe ff       	call   f0107b8f <kmalloc>
f011a1ee:	83 c4 10             	add    $0x10,%esp
f011a1f1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a1f7:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a1fe:	10 00 00 
f011a201:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a207:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a20c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a212:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a218:	ba 00 00 00 00       	mov    $0x0,%edx
f011a21d:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a223:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a229:	29 d0                	sub    %edx,%eax
f011a22b:	89 c1                	mov    %eax,%ecx
f011a22d:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a234:	10 00 00 
f011a237:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a23c:	0f b6 d0             	movzbl %al,%edx
f011a23f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a245:	01 d0                	add    %edx,%eax
f011a247:	48                   	dec    %eax
f011a248:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a24e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a254:	ba 00 00 00 00       	mov    $0x0,%edx
f011a259:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a25f:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a265:	29 d0                	sub    %edx,%eax
f011a267:	01 c1                	add    %eax,%ecx
f011a269:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a270:	10 00 00 
f011a273:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a278:	0f b6 c0             	movzbl %al,%eax
f011a27b:	c1 e0 04             	shl    $0x4,%eax
f011a27e:	89 c2                	mov    %eax,%edx
f011a280:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a286:	01 d0                	add    %edx,%eax
f011a288:	48                   	dec    %eax
f011a289:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a28f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a295:	ba 00 00 00 00       	mov    $0x0,%edx
f011a29a:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a2a0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a2a6:	29 d0                	sub    %edx,%eax
f011a2a8:	01 c8                	add    %ecx,%eax
f011a2aa:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a2b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a2b6:	39 c2                	cmp    %eax,%edx
f011a2b8:	74 17                	je     f011a2d1 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a2ba:	83 ec 04             	sub    $0x4,%esp
f011a2bd:	68 28 b9 13 f0       	push   $0xf013b928
f011a2c2:	68 70 01 00 00       	push   $0x170
f011a2c7:	68 1a b6 13 f0       	push   $0xf013b61a
f011a2cc:	e8 34 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2d1:	e8 f2 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2d9:	74 17                	je     f011a2f2 <test_kmalloc_nextfit+0x1602>
f011a2db:	83 ec 04             	sub    $0x4,%esp
f011a2de:	68 34 b6 13 f0       	push   $0xf013b634
f011a2e3:	68 71 01 00 00       	push   $0x171
f011a2e8:	68 1a b6 13 f0       	push   $0xf013b61a
f011a2ed:	e8 13 5f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a2f2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a2f5:	e8 ad 2b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a2fa:	29 c3                	sub    %eax,%ebx
f011a2fc:	89 d8                	mov    %ebx,%eax
f011a2fe:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a303:	74 17                	je     f011a31c <test_kmalloc_nextfit+0x162c>
f011a305:	83 ec 04             	sub    $0x4,%esp
f011a308:	68 d7 b8 13 f0       	push   $0xf013b8d7
f011a30d:	68 72 01 00 00       	push   $0x172
f011a312:	68 1a b6 13 f0       	push   $0xf013b61a
f011a317:	e8 e9 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a31c:	83 ec 0c             	sub    $0xc,%esp
f011a31f:	68 84 b9 13 f0       	push   $0xf013b984
f011a324:	e8 e5 69 fe ff       	call   f0100d0e <cprintf>
f011a329:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a32c:	e8 97 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a331:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a334:	e8 6e 2b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a339:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a33c:	83 ec 0c             	sub    $0xc,%esp
f011a33f:	68 00 00 60 00       	push   $0x600000
f011a344:	e8 46 d8 fe ff       	call   f0107b8f <kmalloc>
f011a349:	83 c4 10             	add    $0x10,%esp
f011a34c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a352:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a358:	85 c0                	test   %eax,%eax
f011a35a:	74 17                	je     f011a373 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a35c:	83 ec 04             	sub    $0x4,%esp
f011a35f:	68 28 b9 13 f0       	push   $0xf013b928
f011a364:	68 7c 01 00 00       	push   $0x17c
f011a369:	68 1a b6 13 f0       	push   $0xf013b61a
f011a36e:	e8 92 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a373:	e8 50 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a378:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a37b:	74 17                	je     f011a394 <test_kmalloc_nextfit+0x16a4>
f011a37d:	83 ec 04             	sub    $0x4,%esp
f011a380:	68 34 b6 13 f0       	push   $0xf013b634
f011a385:	68 7d 01 00 00       	push   $0x17d
f011a38a:	68 1a b6 13 f0       	push   $0xf013b61a
f011a38f:	e8 71 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a394:	e8 0e 2b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a399:	89 c2                	mov    %eax,%edx
f011a39b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a39e:	39 c2                	cmp    %eax,%edx
f011a3a0:	74 17                	je     f011a3b9 <test_kmalloc_nextfit+0x16c9>
f011a3a2:	83 ec 04             	sub    $0x4,%esp
f011a3a5:	68 d7 b8 13 f0       	push   $0xf013b8d7
f011a3aa:	68 7e 01 00 00       	push   $0x17e
f011a3af:	68 1a b6 13 f0       	push   $0xf013b61a
f011a3b4:	e8 4c 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a3b9:	83 ec 0c             	sub    $0xc,%esp
f011a3bc:	68 bc b9 13 f0       	push   $0xf013b9bc
f011a3c1:	e8 48 69 fe ff       	call   f0100d0e <cprintf>
f011a3c6:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a3c9:	83 ec 0c             	sub    $0xc,%esp
f011a3cc:	68 f8 b9 13 f0       	push   $0xf013b9f8
f011a3d1:	e8 38 69 fe ff       	call   f0100d0e <cprintf>
f011a3d6:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a3d9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a3de:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a3e1:	5b                   	pop    %ebx
f011a3e2:	5f                   	pop    %edi
f011a3e3:	5d                   	pop    %ebp
f011a3e4:	c3                   	ret    

f011a3e5 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a3e5:	55                   	push   %ebp
f011a3e6:	89 e5                	mov    %esp,%ebp
f011a3e8:	57                   	push   %edi
f011a3e9:	53                   	push   %ebx
f011a3ea:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a3f0:	83 ec 0c             	sub    $0xc,%esp
f011a3f3:	68 5c b5 13 f0       	push   $0xf013b55c
f011a3f8:	e8 11 69 fe ff       	call   f0100d0e <cprintf>
f011a3fd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a400:	83 ec 0c             	sub    $0xc,%esp
f011a403:	68 8c b5 13 f0       	push   $0xf013b58c
f011a408:	e8 01 69 fe ff       	call   f0100d0e <cprintf>
f011a40d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a410:	83 ec 0c             	sub    $0xc,%esp
f011a413:	68 5c b5 13 f0       	push   $0xf013b55c
f011a418:	e8 f1 68 fe ff       	call   f0100d0e <cprintf>
f011a41d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a420:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a426:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a42b:	b8 00 00 00 00       	mov    $0x0,%eax
f011a430:	89 d7                	mov    %edx,%edi
f011a432:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a434:	e8 6e 2a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a439:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a43c:	e8 87 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a441:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a444:	83 ec 0c             	sub    $0xc,%esp
f011a447:	68 00 fc 2f 00       	push   $0x2ffc00
f011a44c:	e8 3e d7 fe ff       	call   f0107b8f <kmalloc>
f011a451:	83 c4 10             	add    $0x10,%esp
f011a454:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a45a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a460:	89 c1                	mov    %eax,%ecx
f011a462:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a469:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a46c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a471:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a477:	ba 00 00 00 00       	mov    $0x0,%edx
f011a47c:	f7 75 ec             	divl   -0x14(%ebp)
f011a47f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a482:	29 d0                	sub    %edx,%eax
f011a484:	89 c3                	mov    %eax,%ebx
f011a486:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a48d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a492:	0f b6 d0             	movzbl %al,%edx
f011a495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a498:	01 d0                	add    %edx,%eax
f011a49a:	48                   	dec    %eax
f011a49b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a49e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a4a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4a6:	f7 75 e4             	divl   -0x1c(%ebp)
f011a4a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a4ac:	29 d0                	sub    %edx,%eax
f011a4ae:	01 c3                	add    %eax,%ebx
f011a4b0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a4b7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a4bc:	0f b6 c0             	movzbl %al,%eax
f011a4bf:	c1 e0 04             	shl    $0x4,%eax
f011a4c2:	89 c2                	mov    %eax,%edx
f011a4c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a4c7:	01 d0                	add    %edx,%eax
f011a4c9:	48                   	dec    %eax
f011a4ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a4cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4d5:	f7 75 dc             	divl   -0x24(%ebp)
f011a4d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4db:	29 d0                	sub    %edx,%eax
f011a4dd:	01 d8                	add    %ebx,%eax
f011a4df:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a4e4:	39 c1                	cmp    %eax,%ecx
f011a4e6:	74 17                	je     f011a4ff <test_kmalloc_bestfit1+0x11a>
f011a4e8:	83 ec 04             	sub    $0x4,%esp
f011a4eb:	68 34 ba 13 f0       	push   $0xf013ba34
f011a4f0:	68 98 01 00 00       	push   $0x198
f011a4f5:	68 1a b6 13 f0       	push   $0xf013b61a
f011a4fa:	e8 06 5d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4ff:	e8 c4 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a504:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a507:	74 17                	je     f011a520 <test_kmalloc_bestfit1+0x13b>
f011a509:	83 ec 04             	sub    $0x4,%esp
f011a50c:	68 34 b6 13 f0       	push   $0xf013b634
f011a511:	68 99 01 00 00       	push   $0x199
f011a516:	68 1a b6 13 f0       	push   $0xf013b61a
f011a51b:	e8 e5 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a520:	e8 82 29 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a525:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a528:	29 c2                	sub    %eax,%edx
f011a52a:	89 d0                	mov    %edx,%eax
f011a52c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a531:	74 17                	je     f011a54a <test_kmalloc_bestfit1+0x165>
f011a533:	83 ec 04             	sub    $0x4,%esp
f011a536:	68 64 ba 13 f0       	push   $0xf013ba64
f011a53b:	68 9a 01 00 00       	push   $0x19a
f011a540:	68 1a b6 13 f0       	push   $0xf013b61a
f011a545:	e8 bb 5c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a54a:	e8 58 29 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a552:	e8 71 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a557:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a55a:	83 ec 0c             	sub    $0xc,%esp
f011a55d:	68 00 fc 2f 00       	push   $0x2ffc00
f011a562:	e8 28 d6 fe ff       	call   f0107b8f <kmalloc>
f011a567:	83 c4 10             	add    $0x10,%esp
f011a56a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a570:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a576:	89 c1                	mov    %eax,%ecx
f011a578:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a57f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a582:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a587:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a58d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a592:	f7 75 d4             	divl   -0x2c(%ebp)
f011a595:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a598:	29 d0                	sub    %edx,%eax
f011a59a:	89 c3                	mov    %eax,%ebx
f011a59c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a5a3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a5a8:	0f b6 d0             	movzbl %al,%edx
f011a5ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a5ae:	01 d0                	add    %edx,%eax
f011a5b0:	48                   	dec    %eax
f011a5b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a5b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5bc:	f7 75 cc             	divl   -0x34(%ebp)
f011a5bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5c2:	29 d0                	sub    %edx,%eax
f011a5c4:	01 c3                	add    %eax,%ebx
f011a5c6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a5cd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a5d2:	0f b6 c0             	movzbl %al,%eax
f011a5d5:	c1 e0 04             	shl    $0x4,%eax
f011a5d8:	89 c2                	mov    %eax,%edx
f011a5da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5dd:	01 d0                	add    %edx,%eax
f011a5df:	48                   	dec    %eax
f011a5e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a5e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5eb:	f7 75 c4             	divl   -0x3c(%ebp)
f011a5ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5f1:	29 d0                	sub    %edx,%eax
f011a5f3:	01 d8                	add    %ebx,%eax
f011a5f5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a5fa:	39 c1                	cmp    %eax,%ecx
f011a5fc:	74 17                	je     f011a615 <test_kmalloc_bestfit1+0x230>
f011a5fe:	83 ec 04             	sub    $0x4,%esp
f011a601:	68 34 ba 13 f0       	push   $0xf013ba34
f011a606:	68 a0 01 00 00       	push   $0x1a0
f011a60b:	68 1a b6 13 f0       	push   $0xf013b61a
f011a610:	e8 f0 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a615:	e8 ae 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a61a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a61d:	74 17                	je     f011a636 <test_kmalloc_bestfit1+0x251>
f011a61f:	83 ec 04             	sub    $0x4,%esp
f011a622:	68 34 b6 13 f0       	push   $0xf013b634
f011a627:	68 a1 01 00 00       	push   $0x1a1
f011a62c:	68 1a b6 13 f0       	push   $0xf013b61a
f011a631:	e8 cf 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a636:	e8 6c 28 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a63b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a63e:	29 c2                	sub    %eax,%edx
f011a640:	89 d0                	mov    %edx,%eax
f011a642:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a647:	74 17                	je     f011a660 <test_kmalloc_bestfit1+0x27b>
f011a649:	83 ec 04             	sub    $0x4,%esp
f011a64c:	68 64 ba 13 f0       	push   $0xf013ba64
f011a651:	68 a2 01 00 00       	push   $0x1a2
f011a656:	68 1a b6 13 f0       	push   $0xf013b61a
f011a65b:	e8 a5 5b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a660:	e8 42 28 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a665:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a668:	e8 5b 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a66d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a670:	83 ec 0c             	sub    $0xc,%esp
f011a673:	68 00 fc 1f 00       	push   $0x1ffc00
f011a678:	e8 12 d5 fe ff       	call   f0107b8f <kmalloc>
f011a67d:	83 c4 10             	add    $0x10,%esp
f011a680:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a686:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a68c:	89 c1                	mov    %eax,%ecx
f011a68e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a695:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a698:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a69d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a6a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6a8:	f7 75 bc             	divl   -0x44(%ebp)
f011a6ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6ae:	29 d0                	sub    %edx,%eax
f011a6b0:	89 c3                	mov    %eax,%ebx
f011a6b2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a6b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a6be:	0f b6 d0             	movzbl %al,%edx
f011a6c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a6c4:	01 d0                	add    %edx,%eax
f011a6c6:	48                   	dec    %eax
f011a6c7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a6ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6d2:	f7 75 b4             	divl   -0x4c(%ebp)
f011a6d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6d8:	29 d0                	sub    %edx,%eax
f011a6da:	01 c3                	add    %eax,%ebx
f011a6dc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a6e3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a6e8:	0f b6 c0             	movzbl %al,%eax
f011a6eb:	c1 e0 04             	shl    $0x4,%eax
f011a6ee:	89 c2                	mov    %eax,%edx
f011a6f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a6f3:	01 d0                	add    %edx,%eax
f011a6f5:	48                   	dec    %eax
f011a6f6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a6f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a701:	f7 75 ac             	divl   -0x54(%ebp)
f011a704:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a707:	29 d0                	sub    %edx,%eax
f011a709:	01 d8                	add    %ebx,%eax
f011a70b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a710:	39 c1                	cmp    %eax,%ecx
f011a712:	74 17                	je     f011a72b <test_kmalloc_bestfit1+0x346>
f011a714:	83 ec 04             	sub    $0x4,%esp
f011a717:	68 34 ba 13 f0       	push   $0xf013ba34
f011a71c:	68 a8 01 00 00       	push   $0x1a8
f011a721:	68 1a b6 13 f0       	push   $0xf013b61a
f011a726:	e8 da 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a72b:	e8 98 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a730:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a733:	74 17                	je     f011a74c <test_kmalloc_bestfit1+0x367>
f011a735:	83 ec 04             	sub    $0x4,%esp
f011a738:	68 34 b6 13 f0       	push   $0xf013b634
f011a73d:	68 a9 01 00 00       	push   $0x1a9
f011a742:	68 1a b6 13 f0       	push   $0xf013b61a
f011a747:	e8 b9 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a74c:	e8 56 27 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a754:	29 c2                	sub    %eax,%edx
f011a756:	89 d0                	mov    %edx,%eax
f011a758:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a75d:	74 17                	je     f011a776 <test_kmalloc_bestfit1+0x391>
f011a75f:	83 ec 04             	sub    $0x4,%esp
f011a762:	68 64 ba 13 f0       	push   $0xf013ba64
f011a767:	68 aa 01 00 00       	push   $0x1aa
f011a76c:	68 1a b6 13 f0       	push   $0xf013b61a
f011a771:	e8 8f 5a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a776:	e8 2c 27 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a77b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a77e:	e8 45 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a783:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a786:	83 ec 0c             	sub    $0xc,%esp
f011a789:	68 00 fc 1f 00       	push   $0x1ffc00
f011a78e:	e8 fc d3 fe ff       	call   f0107b8f <kmalloc>
f011a793:	83 c4 10             	add    $0x10,%esp
f011a796:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a79c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a7a2:	89 c1                	mov    %eax,%ecx
f011a7a4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a7ab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7b3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a7b6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7be:	f7 75 a4             	divl   -0x5c(%ebp)
f011a7c1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7c4:	29 d0                	sub    %edx,%eax
f011a7c6:	89 c3                	mov    %eax,%ebx
f011a7c8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a7cf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a7d4:	0f b6 d0             	movzbl %al,%edx
f011a7d7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a7da:	01 d0                	add    %edx,%eax
f011a7dc:	48                   	dec    %eax
f011a7dd:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a7e0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a7e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7e8:	f7 75 9c             	divl   -0x64(%ebp)
f011a7eb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a7ee:	29 d0                	sub    %edx,%eax
f011a7f0:	01 c3                	add    %eax,%ebx
f011a7f2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a7f9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a7fe:	0f b6 c0             	movzbl %al,%eax
f011a801:	c1 e0 04             	shl    $0x4,%eax
f011a804:	89 c2                	mov    %eax,%edx
f011a806:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a809:	01 d0                	add    %edx,%eax
f011a80b:	48                   	dec    %eax
f011a80c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a80f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a812:	ba 00 00 00 00       	mov    $0x0,%edx
f011a817:	f7 75 94             	divl   -0x6c(%ebp)
f011a81a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a81d:	29 d0                	sub    %edx,%eax
f011a81f:	01 d8                	add    %ebx,%eax
f011a821:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a826:	39 c1                	cmp    %eax,%ecx
f011a828:	74 17                	je     f011a841 <test_kmalloc_bestfit1+0x45c>
f011a82a:	83 ec 04             	sub    $0x4,%esp
f011a82d:	68 34 ba 13 f0       	push   $0xf013ba34
f011a832:	68 b0 01 00 00       	push   $0x1b0
f011a837:	68 1a b6 13 f0       	push   $0xf013b61a
f011a83c:	e8 c4 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a841:	e8 82 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a846:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a849:	74 17                	je     f011a862 <test_kmalloc_bestfit1+0x47d>
f011a84b:	83 ec 04             	sub    $0x4,%esp
f011a84e:	68 34 b6 13 f0       	push   $0xf013b634
f011a853:	68 b1 01 00 00       	push   $0x1b1
f011a858:	68 1a b6 13 f0       	push   $0xf013b61a
f011a85d:	e8 a3 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a862:	e8 40 26 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a86a:	29 c2                	sub    %eax,%edx
f011a86c:	89 d0                	mov    %edx,%eax
f011a86e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a873:	74 17                	je     f011a88c <test_kmalloc_bestfit1+0x4a7>
f011a875:	83 ec 04             	sub    $0x4,%esp
f011a878:	68 64 ba 13 f0       	push   $0xf013ba64
f011a87d:	68 b2 01 00 00       	push   $0x1b2
f011a882:	68 1a b6 13 f0       	push   $0xf013b61a
f011a887:	e8 79 59 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a88c:	e8 16 26 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a891:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a894:	e8 2f 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a899:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a89c:	83 ec 0c             	sub    $0xc,%esp
f011a89f:	68 00 fc 0f 00       	push   $0xffc00
f011a8a4:	e8 e6 d2 fe ff       	call   f0107b8f <kmalloc>
f011a8a9:	83 c4 10             	add    $0x10,%esp
f011a8ac:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a8b2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a8b8:	89 c1                	mov    %eax,%ecx
f011a8ba:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a8c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a8c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8c9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a8cc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a8cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8d4:	f7 75 8c             	divl   -0x74(%ebp)
f011a8d7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a8da:	29 d0                	sub    %edx,%eax
f011a8dc:	89 c3                	mov    %eax,%ebx
f011a8de:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a8e5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a8ea:	0f b6 d0             	movzbl %al,%edx
f011a8ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a8f0:	01 d0                	add    %edx,%eax
f011a8f2:	48                   	dec    %eax
f011a8f3:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a8f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a8f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8fe:	f7 75 84             	divl   -0x7c(%ebp)
f011a901:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a904:	29 d0                	sub    %edx,%eax
f011a906:	01 c3                	add    %eax,%ebx
f011a908:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a90f:	10 00 00 
f011a912:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a917:	0f b6 c0             	movzbl %al,%eax
f011a91a:	c1 e0 04             	shl    $0x4,%eax
f011a91d:	89 c2                	mov    %eax,%edx
f011a91f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a925:	01 d0                	add    %edx,%eax
f011a927:	48                   	dec    %eax
f011a928:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a92e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a934:	ba 00 00 00 00       	mov    $0x0,%edx
f011a939:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a93f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a945:	29 d0                	sub    %edx,%eax
f011a947:	01 d8                	add    %ebx,%eax
f011a949:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a94e:	39 c1                	cmp    %eax,%ecx
f011a950:	74 17                	je     f011a969 <test_kmalloc_bestfit1+0x584>
f011a952:	83 ec 04             	sub    $0x4,%esp
f011a955:	68 34 ba 13 f0       	push   $0xf013ba34
f011a95a:	68 b8 01 00 00       	push   $0x1b8
f011a95f:	68 1a b6 13 f0       	push   $0xf013b61a
f011a964:	e8 9c 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a969:	e8 5a 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a96e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a971:	74 17                	je     f011a98a <test_kmalloc_bestfit1+0x5a5>
f011a973:	83 ec 04             	sub    $0x4,%esp
f011a976:	68 34 b6 13 f0       	push   $0xf013b634
f011a97b:	68 b9 01 00 00       	push   $0x1b9
f011a980:	68 1a b6 13 f0       	push   $0xf013b61a
f011a985:	e8 7b 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a98a:	e8 18 25 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a98f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a992:	29 c2                	sub    %eax,%edx
f011a994:	89 d0                	mov    %edx,%eax
f011a996:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a99b:	74 17                	je     f011a9b4 <test_kmalloc_bestfit1+0x5cf>
f011a99d:	83 ec 04             	sub    $0x4,%esp
f011a9a0:	68 64 ba 13 f0       	push   $0xf013ba64
f011a9a5:	68 ba 01 00 00       	push   $0x1ba
f011a9aa:	68 1a b6 13 f0       	push   $0xf013b61a
f011a9af:	e8 51 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9b4:	e8 ee 24 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011a9b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9bc:	e8 07 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a9c4:	83 ec 0c             	sub    $0xc,%esp
f011a9c7:	68 00 fc 0f 00       	push   $0xffc00
f011a9cc:	e8 be d1 fe ff       	call   f0107b8f <kmalloc>
f011a9d1:	83 c4 10             	add    $0x10,%esp
f011a9d4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a9da:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a9e0:	89 c1                	mov    %eax,%ecx
f011a9e2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a9e9:	10 00 00 
f011a9ec:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a9f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9f7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a9fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa03:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa08:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aa0e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa14:	29 d0                	sub    %edx,%eax
f011aa16:	89 c3                	mov    %eax,%ebx
f011aa18:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aa1f:	10 00 00 
f011aa22:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011aa27:	0f b6 d0             	movzbl %al,%edx
f011aa2a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011aa30:	01 d0                	add    %edx,%eax
f011aa32:	48                   	dec    %eax
f011aa33:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011aa39:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aa3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa44:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011aa4a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aa50:	29 d0                	sub    %edx,%eax
f011aa52:	01 c3                	add    %eax,%ebx
f011aa54:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011aa5b:	10 00 00 
f011aa5e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011aa63:	0f b6 c0             	movzbl %al,%eax
f011aa66:	c1 e0 04             	shl    $0x4,%eax
f011aa69:	89 c2                	mov    %eax,%edx
f011aa6b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aa71:	01 d0                	add    %edx,%eax
f011aa73:	48                   	dec    %eax
f011aa74:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aa7a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aa80:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa85:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aa8b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aa91:	29 d0                	sub    %edx,%eax
f011aa93:	01 d8                	add    %ebx,%eax
f011aa95:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aa9a:	39 c1                	cmp    %eax,%ecx
f011aa9c:	74 17                	je     f011aab5 <test_kmalloc_bestfit1+0x6d0>
f011aa9e:	83 ec 04             	sub    $0x4,%esp
f011aaa1:	68 34 ba 13 f0       	push   $0xf013ba34
f011aaa6:	68 c0 01 00 00       	push   $0x1c0
f011aaab:	68 1a b6 13 f0       	push   $0xf013b61a
f011aab0:	e8 50 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aab5:	e8 0e 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aaba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aabd:	74 17                	je     f011aad6 <test_kmalloc_bestfit1+0x6f1>
f011aabf:	83 ec 04             	sub    $0x4,%esp
f011aac2:	68 34 b6 13 f0       	push   $0xf013b634
f011aac7:	68 c1 01 00 00       	push   $0x1c1
f011aacc:	68 1a b6 13 f0       	push   $0xf013b61a
f011aad1:	e8 2f 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aad6:	e8 cc 23 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011aadb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aade:	29 c2                	sub    %eax,%edx
f011aae0:	89 d0                	mov    %edx,%eax
f011aae2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aae7:	74 17                	je     f011ab00 <test_kmalloc_bestfit1+0x71b>
f011aae9:	83 ec 04             	sub    $0x4,%esp
f011aaec:	68 64 ba 13 f0       	push   $0xf013ba64
f011aaf1:	68 c2 01 00 00       	push   $0x1c2
f011aaf6:	68 1a b6 13 f0       	push   $0xf013b61a
f011aafb:	e8 05 57 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab00:	e8 a2 23 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ab05:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab08:	e8 bb 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ab10:	83 ec 0c             	sub    $0xc,%esp
f011ab13:	68 00 fc 0f 00       	push   $0xffc00
f011ab18:	e8 72 d0 fe ff       	call   f0107b8f <kmalloc>
f011ab1d:	83 c4 10             	add    $0x10,%esp
f011ab20:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ab26:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ab2c:	89 c1                	mov    %eax,%ecx
f011ab2e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ab35:	10 00 00 
f011ab38:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ab3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab43:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ab49:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab54:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ab5a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab60:	29 d0                	sub    %edx,%eax
f011ab62:	89 c3                	mov    %eax,%ebx
f011ab64:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ab6b:	10 00 00 
f011ab6e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ab73:	0f b6 d0             	movzbl %al,%edx
f011ab76:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ab7c:	01 d0                	add    %edx,%eax
f011ab7e:	48                   	dec    %eax
f011ab7f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ab85:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab90:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ab96:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab9c:	29 d0                	sub    %edx,%eax
f011ab9e:	01 c3                	add    %eax,%ebx
f011aba0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011aba7:	10 00 00 
f011abaa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011abaf:	0f b6 c0             	movzbl %al,%eax
f011abb2:	c1 e0 04             	shl    $0x4,%eax
f011abb5:	89 c2                	mov    %eax,%edx
f011abb7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011abbd:	01 d0                	add    %edx,%eax
f011abbf:	48                   	dec    %eax
f011abc0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011abc6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011abcc:	ba 00 00 00 00       	mov    $0x0,%edx
f011abd1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011abd7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011abdd:	29 d0                	sub    %edx,%eax
f011abdf:	01 d8                	add    %ebx,%eax
f011abe1:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011abe6:	39 c1                	cmp    %eax,%ecx
f011abe8:	74 17                	je     f011ac01 <test_kmalloc_bestfit1+0x81c>
f011abea:	83 ec 04             	sub    $0x4,%esp
f011abed:	68 34 ba 13 f0       	push   $0xf013ba34
f011abf2:	68 c8 01 00 00       	push   $0x1c8
f011abf7:	68 1a b6 13 f0       	push   $0xf013b61a
f011abfc:	e8 04 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac01:	e8 c2 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac09:	74 17                	je     f011ac22 <test_kmalloc_bestfit1+0x83d>
f011ac0b:	83 ec 04             	sub    $0x4,%esp
f011ac0e:	68 34 b6 13 f0       	push   $0xf013b634
f011ac13:	68 c9 01 00 00       	push   $0x1c9
f011ac18:	68 1a b6 13 f0       	push   $0xf013b61a
f011ac1d:	e8 e3 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac22:	e8 80 22 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ac27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac2a:	29 c2                	sub    %eax,%edx
f011ac2c:	89 d0                	mov    %edx,%eax
f011ac2e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac33:	74 17                	je     f011ac4c <test_kmalloc_bestfit1+0x867>
f011ac35:	83 ec 04             	sub    $0x4,%esp
f011ac38:	68 64 ba 13 f0       	push   $0xf013ba64
f011ac3d:	68 ca 01 00 00       	push   $0x1ca
f011ac42:	68 1a b6 13 f0       	push   $0xf013b61a
f011ac47:	e8 b9 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac4c:	e8 56 22 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ac51:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac54:	e8 6f 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac59:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ac5c:	83 ec 0c             	sub    $0xc,%esp
f011ac5f:	68 00 fc 0f 00       	push   $0xffc00
f011ac64:	e8 26 cf fe ff       	call   f0107b8f <kmalloc>
f011ac69:	83 c4 10             	add    $0x10,%esp
f011ac6c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ac72:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ac78:	89 c1                	mov    %eax,%ecx
f011ac7a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ac81:	10 00 00 
f011ac84:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ac8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac8f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ac95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ac9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011aca0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011aca6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011acac:	29 d0                	sub    %edx,%eax
f011acae:	89 c3                	mov    %eax,%ebx
f011acb0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011acb7:	10 00 00 
f011acba:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011acbf:	0f b6 d0             	movzbl %al,%edx
f011acc2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011acc8:	01 d0                	add    %edx,%eax
f011acca:	48                   	dec    %eax
f011accb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011acd1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011acd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011acdc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ace2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ace8:	29 d0                	sub    %edx,%eax
f011acea:	01 c3                	add    %eax,%ebx
f011acec:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011acf3:	10 00 00 
f011acf6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011acfb:	0f b6 c0             	movzbl %al,%eax
f011acfe:	c1 e0 04             	shl    $0x4,%eax
f011ad01:	89 c2                	mov    %eax,%edx
f011ad03:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ad09:	01 d0                	add    %edx,%eax
f011ad0b:	48                   	dec    %eax
f011ad0c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ad12:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad18:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad1d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ad23:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad29:	29 d0                	sub    %edx,%eax
f011ad2b:	01 d8                	add    %ebx,%eax
f011ad2d:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ad32:	39 c1                	cmp    %eax,%ecx
f011ad34:	74 17                	je     f011ad4d <test_kmalloc_bestfit1+0x968>
f011ad36:	83 ec 04             	sub    $0x4,%esp
f011ad39:	68 34 ba 13 f0       	push   $0xf013ba34
f011ad3e:	68 d0 01 00 00       	push   $0x1d0
f011ad43:	68 1a b6 13 f0       	push   $0xf013b61a
f011ad48:	e8 b8 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad4d:	e8 76 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad55:	74 17                	je     f011ad6e <test_kmalloc_bestfit1+0x989>
f011ad57:	83 ec 04             	sub    $0x4,%esp
f011ad5a:	68 34 b6 13 f0       	push   $0xf013b634
f011ad5f:	68 d1 01 00 00       	push   $0x1d1
f011ad64:	68 1a b6 13 f0       	push   $0xf013b61a
f011ad69:	e8 97 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad6e:	e8 34 21 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ad73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad76:	29 c2                	sub    %eax,%edx
f011ad78:	89 d0                	mov    %edx,%eax
f011ad7a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad7f:	74 17                	je     f011ad98 <test_kmalloc_bestfit1+0x9b3>
f011ad81:	83 ec 04             	sub    $0x4,%esp
f011ad84:	68 64 ba 13 f0       	push   $0xf013ba64
f011ad89:	68 d2 01 00 00       	push   $0x1d2
f011ad8e:	68 1a b6 13 f0       	push   $0xf013b61a
f011ad93:	e8 6d 54 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ad98:	e8 0a 21 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ad9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ada0:	e8 23 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ada5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ada8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011adae:	83 ec 0c             	sub    $0xc,%esp
f011adb1:	50                   	push   %eax
f011adb2:	e8 a3 ce fe ff       	call   f0107c5a <kfree>
f011adb7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adba:	e8 09 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adbf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adc2:	74 17                	je     f011addb <test_kmalloc_bestfit1+0x9f6>
f011adc4:	83 ec 04             	sub    $0x4,%esp
f011adc7:	68 34 b6 13 f0       	push   $0xf013b634
f011adcc:	68 db 01 00 00       	push   $0x1db
f011add1:	68 1a b6 13 f0       	push   $0xf013b61a
f011add6:	e8 2a 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011addb:	e8 c7 20 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ade0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ade3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ade8:	74 17                	je     f011ae01 <test_kmalloc_bestfit1+0xa1c>
f011adea:	83 ec 04             	sub    $0x4,%esp
f011aded:	68 77 ba 13 f0       	push   $0xf013ba77
f011adf2:	68 dc 01 00 00       	push   $0x1dc
f011adf7:	68 1a b6 13 f0       	push   $0xf013b61a
f011adfc:	e8 04 54 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae01:	e8 a1 20 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ae06:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae09:	e8 ba 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011ae11:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ae17:	83 ec 0c             	sub    $0xc,%esp
f011ae1a:	50                   	push   %eax
f011ae1b:	e8 3a ce fe ff       	call   f0107c5a <kfree>
f011ae20:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae23:	e8 a0 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae2b:	74 17                	je     f011ae44 <test_kmalloc_bestfit1+0xa5f>
f011ae2d:	83 ec 04             	sub    $0x4,%esp
f011ae30:	68 34 b6 13 f0       	push   $0xf013b634
f011ae35:	68 e2 01 00 00       	push   $0x1e2
f011ae3a:	68 1a b6 13 f0       	push   $0xf013b61a
f011ae3f:	e8 c1 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ae44:	e8 5e 20 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ae49:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ae4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae51:	74 17                	je     f011ae6a <test_kmalloc_bestfit1+0xa85>
f011ae53:	83 ec 04             	sub    $0x4,%esp
f011ae56:	68 77 ba 13 f0       	push   $0xf013ba77
f011ae5b:	68 e3 01 00 00       	push   $0x1e3
f011ae60:	68 1a b6 13 f0       	push   $0xf013b61a
f011ae65:	e8 9b 53 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae6a:	e8 38 20 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ae6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae72:	e8 51 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae77:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ae7a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ae80:	83 ec 0c             	sub    $0xc,%esp
f011ae83:	50                   	push   %eax
f011ae84:	e8 d1 cd fe ff       	call   f0107c5a <kfree>
f011ae89:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae8c:	e8 37 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae91:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae94:	74 17                	je     f011aead <test_kmalloc_bestfit1+0xac8>
f011ae96:	83 ec 04             	sub    $0x4,%esp
f011ae99:	68 34 b6 13 f0       	push   $0xf013b634
f011ae9e:	68 e9 01 00 00       	push   $0x1e9
f011aea3:	68 1a b6 13 f0       	push   $0xf013b61a
f011aea8:	e8 58 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aead:	e8 f5 1f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011aeb2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aeb5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aeba:	74 17                	je     f011aed3 <test_kmalloc_bestfit1+0xaee>
f011aebc:	83 ec 04             	sub    $0x4,%esp
f011aebf:	68 77 ba 13 f0       	push   $0xf013ba77
f011aec4:	68 ea 01 00 00       	push   $0x1ea
f011aec9:	68 1a b6 13 f0       	push   $0xf013b61a
f011aece:	e8 32 53 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011aed3:	e8 cf 1f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011aed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aedb:	e8 e8 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aee0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011aee3:	83 ec 0c             	sub    $0xc,%esp
f011aee6:	68 00 00 08 00       	push   $0x80000
f011aeeb:	e8 9f cc fe ff       	call   f0107b8f <kmalloc>
f011aef0:	83 c4 10             	add    $0x10,%esp
f011aef3:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011aef9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011aeff:	89 c1                	mov    %eax,%ecx
f011af01:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011af08:	10 00 00 
f011af0b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011af11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af16:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011af1c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af22:	ba 00 00 00 00       	mov    $0x0,%edx
f011af27:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011af2d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af33:	29 d0                	sub    %edx,%eax
f011af35:	89 c3                	mov    %eax,%ebx
f011af37:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011af3e:	10 00 00 
f011af41:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011af46:	0f b6 d0             	movzbl %al,%edx
f011af49:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011af4f:	01 d0                	add    %edx,%eax
f011af51:	48                   	dec    %eax
f011af52:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011af58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011af5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011af63:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011af69:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011af6f:	29 d0                	sub    %edx,%eax
f011af71:	01 c3                	add    %eax,%ebx
f011af73:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011af7a:	10 00 00 
f011af7d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011af82:	0f b6 c0             	movzbl %al,%eax
f011af85:	c1 e0 04             	shl    $0x4,%eax
f011af88:	89 c2                	mov    %eax,%edx
f011af8a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011af90:	01 d0                	add    %edx,%eax
f011af92:	48                   	dec    %eax
f011af93:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011af99:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011af9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011afa4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011afaa:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011afb0:	29 d0                	sub    %edx,%eax
f011afb2:	01 d8                	add    %ebx,%eax
f011afb4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011afb9:	39 c1                	cmp    %eax,%ecx
f011afbb:	74 17                	je     f011afd4 <test_kmalloc_bestfit1+0xbef>
f011afbd:	83 ec 04             	sub    $0x4,%esp
f011afc0:	68 34 ba 13 f0       	push   $0xf013ba34
f011afc5:	68 f3 01 00 00       	push   $0x1f3
f011afca:	68 1a b6 13 f0       	push   $0xf013b61a
f011afcf:	e8 31 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afd4:	e8 ef 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011afd9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afdc:	74 17                	je     f011aff5 <test_kmalloc_bestfit1+0xc10>
f011afde:	83 ec 04             	sub    $0x4,%esp
f011afe1:	68 34 b6 13 f0       	push   $0xf013b634
f011afe6:	68 f4 01 00 00       	push   $0x1f4
f011afeb:	68 1a b6 13 f0       	push   $0xf013b61a
f011aff0:	e8 10 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011aff5:	e8 ad 1e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011affa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011affd:	29 c2                	sub    %eax,%edx
f011afff:	89 d0                	mov    %edx,%eax
f011b001:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b006:	74 17                	je     f011b01f <test_kmalloc_bestfit1+0xc3a>
f011b008:	83 ec 04             	sub    $0x4,%esp
f011b00b:	68 64 ba 13 f0       	push   $0xf013ba64
f011b010:	68 f5 01 00 00       	push   $0x1f5
f011b015:	68 1a b6 13 f0       	push   $0xf013b61a
f011b01a:	e8 e6 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b01f:	e8 83 1e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b024:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b027:	e8 9c 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b02c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b02f:	83 ec 0c             	sub    $0xc,%esp
f011b032:	68 00 fc 0f 00       	push   $0xffc00
f011b037:	e8 53 cb fe ff       	call   f0107b8f <kmalloc>
f011b03c:	83 c4 10             	add    $0x10,%esp
f011b03f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b045:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b04b:	89 c1                	mov    %eax,%ecx
f011b04d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b054:	10 00 00 
f011b057:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b05d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b062:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b068:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b06e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b073:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b079:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b07f:	29 d0                	sub    %edx,%eax
f011b081:	89 c3                	mov    %eax,%ebx
f011b083:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b08a:	10 00 00 
f011b08d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b092:	0f b6 d0             	movzbl %al,%edx
f011b095:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b09b:	01 d0                	add    %edx,%eax
f011b09d:	48                   	dec    %eax
f011b09e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b0a4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b0aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0af:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b0b5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b0bb:	29 d0                	sub    %edx,%eax
f011b0bd:	01 c3                	add    %eax,%ebx
f011b0bf:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b0c6:	10 00 00 
f011b0c9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b0ce:	0f b6 c0             	movzbl %al,%eax
f011b0d1:	c1 e0 04             	shl    $0x4,%eax
f011b0d4:	89 c2                	mov    %eax,%edx
f011b0d6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b0dc:	01 d0                	add    %edx,%eax
f011b0de:	48                   	dec    %eax
f011b0df:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b0e5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b0eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0f0:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b0f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b0fc:	29 d0                	sub    %edx,%eax
f011b0fe:	01 d8                	add    %ebx,%eax
f011b100:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b105:	39 c1                	cmp    %eax,%ecx
f011b107:	74 17                	je     f011b120 <test_kmalloc_bestfit1+0xd3b>
f011b109:	83 ec 04             	sub    $0x4,%esp
f011b10c:	68 34 ba 13 f0       	push   $0xf013ba34
f011b111:	68 fb 01 00 00       	push   $0x1fb
f011b116:	68 1a b6 13 f0       	push   $0xf013b61a
f011b11b:	e8 e5 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b120:	e8 a3 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b125:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b128:	74 17                	je     f011b141 <test_kmalloc_bestfit1+0xd5c>
f011b12a:	83 ec 04             	sub    $0x4,%esp
f011b12d:	68 34 b6 13 f0       	push   $0xf013b634
f011b132:	68 fc 01 00 00       	push   $0x1fc
f011b137:	68 1a b6 13 f0       	push   $0xf013b61a
f011b13c:	e8 c4 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b141:	e8 61 1d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b146:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b149:	29 c2                	sub    %eax,%edx
f011b14b:	89 d0                	mov    %edx,%eax
f011b14d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b152:	74 17                	je     f011b16b <test_kmalloc_bestfit1+0xd86>
f011b154:	83 ec 04             	sub    $0x4,%esp
f011b157:	68 64 ba 13 f0       	push   $0xf013ba64
f011b15c:	68 fd 01 00 00       	push   $0x1fd
f011b161:	68 1a b6 13 f0       	push   $0xf013b61a
f011b166:	e8 9a 50 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b16b:	e8 37 1d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b170:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b173:	e8 50 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b178:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b17b:	83 ec 0c             	sub    $0xc,%esp
f011b17e:	68 00 fc 03 00       	push   $0x3fc00
f011b183:	e8 07 ca fe ff       	call   f0107b8f <kmalloc>
f011b188:	83 c4 10             	add    $0x10,%esp
f011b18b:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b191:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b197:	89 c1                	mov    %eax,%ecx
f011b199:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b1a0:	10 00 00 
f011b1a3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b1a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1ae:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b1b4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b1ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1bf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b1c5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b1cb:	29 d0                	sub    %edx,%eax
f011b1cd:	89 c3                	mov    %eax,%ebx
f011b1cf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b1d6:	10 00 00 
f011b1d9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b1de:	0f b6 d0             	movzbl %al,%edx
f011b1e1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b1e7:	01 d0                	add    %edx,%eax
f011b1e9:	48                   	dec    %eax
f011b1ea:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b1f0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b1f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1fb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b201:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b207:	29 d0                	sub    %edx,%eax
f011b209:	01 c3                	add    %eax,%ebx
f011b20b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b212:	10 00 00 
f011b215:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b21a:	0f b6 c0             	movzbl %al,%eax
f011b21d:	c1 e0 04             	shl    $0x4,%eax
f011b220:	89 c2                	mov    %eax,%edx
f011b222:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b228:	01 d0                	add    %edx,%eax
f011b22a:	48                   	dec    %eax
f011b22b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b231:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b237:	ba 00 00 00 00       	mov    $0x0,%edx
f011b23c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b242:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b248:	29 d0                	sub    %edx,%eax
f011b24a:	01 d8                	add    %ebx,%eax
f011b24c:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b251:	39 c1                	cmp    %eax,%ecx
f011b253:	74 17                	je     f011b26c <test_kmalloc_bestfit1+0xe87>
f011b255:	83 ec 04             	sub    $0x4,%esp
f011b258:	68 34 ba 13 f0       	push   $0xf013ba34
f011b25d:	68 03 02 00 00       	push   $0x203
f011b262:	68 1a b6 13 f0       	push   $0xf013b61a
f011b267:	e8 99 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b26c:	e8 57 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b271:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b274:	74 17                	je     f011b28d <test_kmalloc_bestfit1+0xea8>
f011b276:	83 ec 04             	sub    $0x4,%esp
f011b279:	68 34 b6 13 f0       	push   $0xf013b634
f011b27e:	68 04 02 00 00       	push   $0x204
f011b283:	68 1a b6 13 f0       	push   $0xf013b61a
f011b288:	e8 78 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b28d:	e8 15 1c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b292:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b295:	29 c2                	sub    %eax,%edx
f011b297:	89 d0                	mov    %edx,%eax
f011b299:	83 f8 40             	cmp    $0x40,%eax
f011b29c:	74 17                	je     f011b2b5 <test_kmalloc_bestfit1+0xed0>
f011b29e:	83 ec 04             	sub    $0x4,%esp
f011b2a1:	68 64 ba 13 f0       	push   $0xf013ba64
f011b2a6:	68 05 02 00 00       	push   $0x205
f011b2ab:	68 1a b6 13 f0       	push   $0xf013b61a
f011b2b0:	e8 50 4f fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b2b5:	e8 ed 1b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b2ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2bd:	e8 06 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b2c5:	83 ec 0c             	sub    $0xc,%esp
f011b2c8:	68 00 fc 3f 00       	push   $0x3ffc00
f011b2cd:	e8 bd c8 fe ff       	call   f0107b8f <kmalloc>
f011b2d2:	83 c4 10             	add    $0x10,%esp
f011b2d5:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b2db:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b2e1:	89 c1                	mov    %eax,%ecx
f011b2e3:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b2ea:	10 00 00 
f011b2ed:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b2f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2f8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b2fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b304:	ba 00 00 00 00       	mov    $0x0,%edx
f011b309:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b30f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b315:	29 d0                	sub    %edx,%eax
f011b317:	89 c3                	mov    %eax,%ebx
f011b319:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b320:	10 00 00 
f011b323:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b328:	0f b6 d0             	movzbl %al,%edx
f011b32b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b331:	01 d0                	add    %edx,%eax
f011b333:	48                   	dec    %eax
f011b334:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b33a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b340:	ba 00 00 00 00       	mov    $0x0,%edx
f011b345:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b34b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b351:	29 d0                	sub    %edx,%eax
f011b353:	01 c3                	add    %eax,%ebx
f011b355:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b35c:	10 00 00 
f011b35f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b364:	0f b6 c0             	movzbl %al,%eax
f011b367:	c1 e0 04             	shl    $0x4,%eax
f011b36a:	89 c2                	mov    %eax,%edx
f011b36c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b372:	01 d0                	add    %edx,%eax
f011b374:	48                   	dec    %eax
f011b375:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b37b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b381:	ba 00 00 00 00       	mov    $0x0,%edx
f011b386:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b38c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b392:	29 d0                	sub    %edx,%eax
f011b394:	01 d8                	add    %ebx,%eax
f011b396:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b39b:	39 c1                	cmp    %eax,%ecx
f011b39d:	74 17                	je     f011b3b6 <test_kmalloc_bestfit1+0xfd1>
f011b39f:	83 ec 04             	sub    $0x4,%esp
f011b3a2:	68 34 ba 13 f0       	push   $0xf013ba34
f011b3a7:	68 0b 02 00 00       	push   $0x20b
f011b3ac:	68 1a b6 13 f0       	push   $0xf013b61a
f011b3b1:	e8 4f 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3b6:	e8 0d 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b3be:	74 17                	je     f011b3d7 <test_kmalloc_bestfit1+0xff2>
f011b3c0:	83 ec 04             	sub    $0x4,%esp
f011b3c3:	68 34 b6 13 f0       	push   $0xf013b634
f011b3c8:	68 0c 02 00 00       	push   $0x20c
f011b3cd:	68 1a b6 13 f0       	push   $0xf013b61a
f011b3d2:	e8 2e 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b3d7:	e8 cb 1a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b3dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b3df:	29 c2                	sub    %eax,%edx
f011b3e1:	89 d0                	mov    %edx,%eax
f011b3e3:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b3e8:	74 17                	je     f011b401 <test_kmalloc_bestfit1+0x101c>
f011b3ea:	83 ec 04             	sub    $0x4,%esp
f011b3ed:	68 64 ba 13 f0       	push   $0xf013ba64
f011b3f2:	68 0d 02 00 00       	push   $0x20d
f011b3f7:	68 1a b6 13 f0       	push   $0xf013b61a
f011b3fc:	e8 04 4e fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b401:	e8 a1 1a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b406:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b409:	e8 ba 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b40e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b411:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b417:	83 ec 0c             	sub    $0xc,%esp
f011b41a:	50                   	push   %eax
f011b41b:	e8 3a c8 fe ff       	call   f0107c5a <kfree>
f011b420:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b423:	e8 a0 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b428:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b42b:	74 17                	je     f011b444 <test_kmalloc_bestfit1+0x105f>
f011b42d:	83 ec 04             	sub    $0x4,%esp
f011b430:	68 34 b6 13 f0       	push   $0xf013b634
f011b435:	68 16 02 00 00       	push   $0x216
f011b43a:	68 1a b6 13 f0       	push   $0xf013b61a
f011b43f:	e8 c1 4d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b444:	e8 5e 1a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b449:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b44c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b451:	74 17                	je     f011b46a <test_kmalloc_bestfit1+0x1085>
f011b453:	83 ec 04             	sub    $0x4,%esp
f011b456:	68 77 ba 13 f0       	push   $0xf013ba77
f011b45b:	68 17 02 00 00       	push   $0x217
f011b460:	68 1a b6 13 f0       	push   $0xf013b61a
f011b465:	e8 9b 4d fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b46a:	e8 38 1a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b46f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b472:	e8 51 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b477:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b47a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b480:	83 ec 0c             	sub    $0xc,%esp
f011b483:	50                   	push   %eax
f011b484:	e8 d1 c7 fe ff       	call   f0107c5a <kfree>
f011b489:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b48c:	e8 37 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b491:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b494:	74 17                	je     f011b4ad <test_kmalloc_bestfit1+0x10c8>
f011b496:	83 ec 04             	sub    $0x4,%esp
f011b499:	68 34 b6 13 f0       	push   $0xf013b634
f011b49e:	68 1d 02 00 00       	push   $0x21d
f011b4a3:	68 1a b6 13 f0       	push   $0xf013b61a
f011b4a8:	e8 58 4d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b4ad:	e8 f5 19 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b4b2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4b5:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b4ba:	74 17                	je     f011b4d3 <test_kmalloc_bestfit1+0x10ee>
f011b4bc:	83 ec 04             	sub    $0x4,%esp
f011b4bf:	68 77 ba 13 f0       	push   $0xf013ba77
f011b4c4:	68 1e 02 00 00       	push   $0x21e
f011b4c9:	68 1a b6 13 f0       	push   $0xf013b61a
f011b4ce:	e8 32 4d fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b4d3:	e8 cf 19 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b4d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4db:	e8 e8 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b4e3:	83 ec 0c             	sub    $0xc,%esp
f011b4e6:	68 00 fc 1f 00       	push   $0x1ffc00
f011b4eb:	e8 9f c6 fe ff       	call   f0107b8f <kmalloc>
f011b4f0:	83 c4 10             	add    $0x10,%esp
f011b4f3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b4f9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b4ff:	89 c1                	mov    %eax,%ecx
f011b501:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b508:	10 00 00 
f011b50b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b511:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b516:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b51c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b522:	ba 00 00 00 00       	mov    $0x0,%edx
f011b527:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b52d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b533:	29 d0                	sub    %edx,%eax
f011b535:	89 c3                	mov    %eax,%ebx
f011b537:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b53e:	10 00 00 
f011b541:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b546:	0f b6 d0             	movzbl %al,%edx
f011b549:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b54f:	01 d0                	add    %edx,%eax
f011b551:	48                   	dec    %eax
f011b552:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b558:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b55e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b563:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b569:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b56f:	29 d0                	sub    %edx,%eax
f011b571:	01 c3                	add    %eax,%ebx
f011b573:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b57a:	10 00 00 
f011b57d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b582:	0f b6 c0             	movzbl %al,%eax
f011b585:	c1 e0 04             	shl    $0x4,%eax
f011b588:	89 c2                	mov    %eax,%edx
f011b58a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b590:	01 d0                	add    %edx,%eax
f011b592:	48                   	dec    %eax
f011b593:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b599:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b59f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5a4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b5aa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b5b0:	29 d0                	sub    %edx,%eax
f011b5b2:	01 d8                	add    %ebx,%eax
f011b5b4:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b5b9:	39 c1                	cmp    %eax,%ecx
f011b5bb:	74 17                	je     f011b5d4 <test_kmalloc_bestfit1+0x11ef>
f011b5bd:	83 ec 04             	sub    $0x4,%esp
f011b5c0:	68 34 ba 13 f0       	push   $0xf013ba34
f011b5c5:	68 27 02 00 00       	push   $0x227
f011b5ca:	68 1a b6 13 f0       	push   $0xf013b61a
f011b5cf:	e8 31 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5d4:	e8 ef 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5dc:	74 17                	je     f011b5f5 <test_kmalloc_bestfit1+0x1210>
f011b5de:	83 ec 04             	sub    $0x4,%esp
f011b5e1:	68 34 b6 13 f0       	push   $0xf013b634
f011b5e6:	68 28 02 00 00       	push   $0x228
f011b5eb:	68 1a b6 13 f0       	push   $0xf013b61a
f011b5f0:	e8 10 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b5f5:	e8 ad 18 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b5fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b5fd:	29 c2                	sub    %eax,%edx
f011b5ff:	89 d0                	mov    %edx,%eax
f011b601:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b606:	74 17                	je     f011b61f <test_kmalloc_bestfit1+0x123a>
f011b608:	83 ec 04             	sub    $0x4,%esp
f011b60b:	68 64 ba 13 f0       	push   $0xf013ba64
f011b610:	68 29 02 00 00       	push   $0x229
f011b615:	68 1a b6 13 f0       	push   $0xf013b61a
f011b61a:	e8 e6 4b fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b61f:	83 ec 0c             	sub    $0xc,%esp
f011b622:	68 84 ba 13 f0       	push   $0xf013ba84
f011b627:	e8 e2 56 fe ff       	call   f0100d0e <cprintf>
f011b62c:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b62f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b634:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b637:	5b                   	pop    %ebx
f011b638:	5f                   	pop    %edi
f011b639:	5d                   	pop    %ebp
f011b63a:	c3                   	ret    

f011b63b <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b63b:	55                   	push   %ebp
f011b63c:	89 e5                	mov    %esp,%ebp
f011b63e:	57                   	push   %edi
f011b63f:	53                   	push   %ebx
f011b640:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b646:	83 ec 0c             	sub    $0xc,%esp
f011b649:	68 5c b5 13 f0       	push   $0xf013b55c
f011b64e:	e8 bb 56 fe ff       	call   f0100d0e <cprintf>
f011b653:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b656:	83 ec 0c             	sub    $0xc,%esp
f011b659:	68 8c b5 13 f0       	push   $0xf013b58c
f011b65e:	e8 ab 56 fe ff       	call   f0100d0e <cprintf>
f011b663:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b666:	83 ec 0c             	sub    $0xc,%esp
f011b669:	68 5c b5 13 f0       	push   $0xf013b55c
f011b66e:	e8 9b 56 fe ff       	call   f0100d0e <cprintf>
f011b673:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b676:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b67c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b681:	b8 00 00 00 00       	mov    $0x0,%eax
f011b686:	89 d7                	mov    %edx,%edi
f011b688:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b68a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b691:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b694:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b699:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b69c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b69f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6a4:	f7 75 f4             	divl   -0xc(%ebp)
f011b6a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6aa:	29 d0                	sub    %edx,%eax
f011b6ac:	89 c1                	mov    %eax,%ecx
f011b6ae:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b6b5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b6ba:	0f b6 d0             	movzbl %al,%edx
f011b6bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b6c0:	01 d0                	add    %edx,%eax
f011b6c2:	48                   	dec    %eax
f011b6c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ce:	f7 75 ec             	divl   -0x14(%ebp)
f011b6d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6d4:	29 d0                	sub    %edx,%eax
f011b6d6:	01 c1                	add    %eax,%ecx
f011b6d8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b6df:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b6e4:	0f b6 c0             	movzbl %al,%eax
f011b6e7:	c1 e0 04             	shl    $0x4,%eax
f011b6ea:	89 c2                	mov    %eax,%edx
f011b6ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b6ef:	01 d0                	add    %edx,%eax
f011b6f1:	48                   	dec    %eax
f011b6f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b6f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b6f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6fd:	f7 75 e4             	divl   -0x1c(%ebp)
f011b700:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b703:	29 d0                	sub    %edx,%eax
f011b705:	01 c8                	add    %ecx,%eax
f011b707:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b70c:	29 c2                	sub    %eax,%edx
f011b70e:	89 d0                	mov    %edx,%eax
f011b710:	83 ec 0c             	sub    $0xc,%esp
f011b713:	50                   	push   %eax
f011b714:	e8 76 c4 fe ff       	call   f0107b8f <kmalloc>
f011b719:	83 c4 10             	add    $0x10,%esp
f011b71c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b722:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b728:	85 c0                	test   %eax,%eax
f011b72a:	74 17                	je     f011b743 <test_kmalloc_bestfit2+0x108>
f011b72c:	83 ec 04             	sub    $0x4,%esp
f011b72f:	68 cc ba 13 f0       	push   $0xf013bacc
f011b734:	68 3f 02 00 00       	push   $0x23f
f011b739:	68 1a b6 13 f0       	push   $0xf013b61a
f011b73e:	e8 c2 4a fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b743:	e8 5f 17 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b748:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b74b:	e8 78 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b750:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b753:	83 ec 0c             	sub    $0xc,%esp
f011b756:	68 00 fc 1f 00       	push   $0x1ffc00
f011b75b:	e8 2f c4 fe ff       	call   f0107b8f <kmalloc>
f011b760:	83 c4 10             	add    $0x10,%esp
f011b763:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b769:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b76f:	89 c1                	mov    %eax,%ecx
f011b771:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b77b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b780:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b783:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b786:	ba 00 00 00 00       	mov    $0x0,%edx
f011b78b:	f7 75 d4             	divl   -0x2c(%ebp)
f011b78e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b791:	29 d0                	sub    %edx,%eax
f011b793:	89 c3                	mov    %eax,%ebx
f011b795:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b79c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b7a1:	0f b6 d0             	movzbl %al,%edx
f011b7a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b7a7:	01 d0                	add    %edx,%eax
f011b7a9:	48                   	dec    %eax
f011b7aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b7ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7b5:	f7 75 cc             	divl   -0x34(%ebp)
f011b7b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7bb:	29 d0                	sub    %edx,%eax
f011b7bd:	01 c3                	add    %eax,%ebx
f011b7bf:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b7c6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b7cb:	0f b6 c0             	movzbl %al,%eax
f011b7ce:	c1 e0 04             	shl    $0x4,%eax
f011b7d1:	89 c2                	mov    %eax,%edx
f011b7d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b7d6:	01 d0                	add    %edx,%eax
f011b7d8:	48                   	dec    %eax
f011b7d9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b7dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7df:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7e4:	f7 75 c4             	divl   -0x3c(%ebp)
f011b7e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7ea:	29 d0                	sub    %edx,%eax
f011b7ec:	01 d8                	add    %ebx,%eax
f011b7ee:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b7f3:	39 c1                	cmp    %eax,%ecx
f011b7f5:	74 17                	je     f011b80e <test_kmalloc_bestfit2+0x1d3>
f011b7f7:	83 ec 04             	sub    $0x4,%esp
f011b7fa:	68 34 ba 13 f0       	push   $0xf013ba34
f011b7ff:	68 49 02 00 00       	push   $0x249
f011b804:	68 1a b6 13 f0       	push   $0xf013b61a
f011b809:	e8 f7 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b80e:	e8 b5 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b813:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b816:	74 17                	je     f011b82f <test_kmalloc_bestfit2+0x1f4>
f011b818:	83 ec 04             	sub    $0x4,%esp
f011b81b:	68 34 b6 13 f0       	push   $0xf013b634
f011b820:	68 4a 02 00 00       	push   $0x24a
f011b825:	68 1a b6 13 f0       	push   $0xf013b61a
f011b82a:	e8 d6 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b82f:	e8 73 16 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b834:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b837:	29 c2                	sub    %eax,%edx
f011b839:	89 d0                	mov    %edx,%eax
f011b83b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b840:	74 17                	je     f011b859 <test_kmalloc_bestfit2+0x21e>
f011b842:	83 ec 04             	sub    $0x4,%esp
f011b845:	68 64 ba 13 f0       	push   $0xf013ba64
f011b84a:	68 4b 02 00 00       	push   $0x24b
f011b84f:	68 1a b6 13 f0       	push   $0xf013b61a
f011b854:	e8 ac 49 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b859:	e8 49 16 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b85e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b861:	e8 62 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b866:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b869:	83 ec 0c             	sub    $0xc,%esp
f011b86c:	68 00 fc 1f 00       	push   $0x1ffc00
f011b871:	e8 19 c3 fe ff       	call   f0107b8f <kmalloc>
f011b876:	83 c4 10             	add    $0x10,%esp
f011b879:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b87f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b885:	89 c1                	mov    %eax,%ecx
f011b887:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b88e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b891:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b896:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b899:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b89c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8a1:	f7 75 bc             	divl   -0x44(%ebp)
f011b8a4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8a7:	29 d0                	sub    %edx,%eax
f011b8a9:	89 c3                	mov    %eax,%ebx
f011b8ab:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b8b2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b8b7:	0f b6 d0             	movzbl %al,%edx
f011b8ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b8bd:	01 d0                	add    %edx,%eax
f011b8bf:	48                   	dec    %eax
f011b8c0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b8c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8cb:	f7 75 b4             	divl   -0x4c(%ebp)
f011b8ce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8d1:	29 d0                	sub    %edx,%eax
f011b8d3:	01 c3                	add    %eax,%ebx
f011b8d5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b8dc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b8e1:	0f b6 c0             	movzbl %al,%eax
f011b8e4:	c1 e0 04             	shl    $0x4,%eax
f011b8e7:	89 c2                	mov    %eax,%edx
f011b8e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b8ec:	01 d0                	add    %edx,%eax
f011b8ee:	48                   	dec    %eax
f011b8ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b8f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b8f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8fa:	f7 75 ac             	divl   -0x54(%ebp)
f011b8fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b900:	29 d0                	sub    %edx,%eax
f011b902:	01 d8                	add    %ebx,%eax
f011b904:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b909:	39 c1                	cmp    %eax,%ecx
f011b90b:	74 17                	je     f011b924 <test_kmalloc_bestfit2+0x2e9>
f011b90d:	83 ec 04             	sub    $0x4,%esp
f011b910:	68 34 ba 13 f0       	push   $0xf013ba34
f011b915:	68 51 02 00 00       	push   $0x251
f011b91a:	68 1a b6 13 f0       	push   $0xf013b61a
f011b91f:	e8 e1 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b924:	e8 9f 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b929:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b92c:	74 17                	je     f011b945 <test_kmalloc_bestfit2+0x30a>
f011b92e:	83 ec 04             	sub    $0x4,%esp
f011b931:	68 34 b6 13 f0       	push   $0xf013b634
f011b936:	68 52 02 00 00       	push   $0x252
f011b93b:	68 1a b6 13 f0       	push   $0xf013b61a
f011b940:	e8 c0 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b945:	e8 5d 15 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b94a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b94d:	29 c2                	sub    %eax,%edx
f011b94f:	89 d0                	mov    %edx,%eax
f011b951:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b956:	74 17                	je     f011b96f <test_kmalloc_bestfit2+0x334>
f011b958:	83 ec 04             	sub    $0x4,%esp
f011b95b:	68 64 ba 13 f0       	push   $0xf013ba64
f011b960:	68 53 02 00 00       	push   $0x253
f011b965:	68 1a b6 13 f0       	push   $0xf013b61a
f011b96a:	e8 96 48 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b96f:	e8 33 15 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011b974:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b977:	e8 4c 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b97c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b97f:	83 ec 0c             	sub    $0xc,%esp
f011b982:	68 00 08 00 00       	push   $0x800
f011b987:	e8 03 c2 fe ff       	call   f0107b8f <kmalloc>
f011b98c:	83 c4 10             	add    $0x10,%esp
f011b98f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b995:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b99b:	89 c1                	mov    %eax,%ecx
f011b99d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b9a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b9a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9ac:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b9af:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9b7:	f7 75 a4             	divl   -0x5c(%ebp)
f011b9ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9bd:	29 d0                	sub    %edx,%eax
f011b9bf:	89 c3                	mov    %eax,%ebx
f011b9c1:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b9c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b9cd:	0f b6 d0             	movzbl %al,%edx
f011b9d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b9d3:	01 d0                	add    %edx,%eax
f011b9d5:	48                   	dec    %eax
f011b9d6:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b9d9:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9e1:	f7 75 9c             	divl   -0x64(%ebp)
f011b9e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9e7:	29 d0                	sub    %edx,%eax
f011b9e9:	01 c3                	add    %eax,%ebx
f011b9eb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b9f2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b9f7:	0f b6 c0             	movzbl %al,%eax
f011b9fa:	c1 e0 04             	shl    $0x4,%eax
f011b9fd:	89 c2                	mov    %eax,%edx
f011b9ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba02:	01 d0                	add    %edx,%eax
f011ba04:	48                   	dec    %eax
f011ba05:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ba08:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba10:	f7 75 94             	divl   -0x6c(%ebp)
f011ba13:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba16:	29 d0                	sub    %edx,%eax
f011ba18:	01 d8                	add    %ebx,%eax
f011ba1a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ba1f:	39 c1                	cmp    %eax,%ecx
f011ba21:	74 17                	je     f011ba3a <test_kmalloc_bestfit2+0x3ff>
f011ba23:	83 ec 04             	sub    $0x4,%esp
f011ba26:	68 34 ba 13 f0       	push   $0xf013ba34
f011ba2b:	68 59 02 00 00       	push   $0x259
f011ba30:	68 1a b6 13 f0       	push   $0xf013b61a
f011ba35:	e8 cb 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba3a:	e8 89 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba3f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba42:	74 17                	je     f011ba5b <test_kmalloc_bestfit2+0x420>
f011ba44:	83 ec 04             	sub    $0x4,%esp
f011ba47:	68 34 b6 13 f0       	push   $0xf013b634
f011ba4c:	68 5a 02 00 00       	push   $0x25a
f011ba51:	68 1a b6 13 f0       	push   $0xf013b61a
f011ba56:	e8 aa 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba5b:	e8 47 14 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ba60:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba63:	29 c2                	sub    %eax,%edx
f011ba65:	89 d0                	mov    %edx,%eax
f011ba67:	83 f8 01             	cmp    $0x1,%eax
f011ba6a:	74 17                	je     f011ba83 <test_kmalloc_bestfit2+0x448>
f011ba6c:	83 ec 04             	sub    $0x4,%esp
f011ba6f:	68 64 ba 13 f0       	push   $0xf013ba64
f011ba74:	68 5b 02 00 00       	push   $0x25b
f011ba79:	68 1a b6 13 f0       	push   $0xf013b61a
f011ba7e:	e8 82 47 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba83:	e8 1f 14 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ba88:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba8b:	e8 38 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba90:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba93:	83 ec 0c             	sub    $0xc,%esp
f011ba96:	68 00 08 00 00       	push   $0x800
f011ba9b:	e8 ef c0 fe ff       	call   f0107b8f <kmalloc>
f011baa0:	83 c4 10             	add    $0x10,%esp
f011baa3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011baa9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011baaf:	89 c1                	mov    %eax,%ecx
f011bab1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bab8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011babb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bac0:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bac3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bac6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bacb:	f7 75 8c             	divl   -0x74(%ebp)
f011bace:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bad1:	29 d0                	sub    %edx,%eax
f011bad3:	89 c3                	mov    %eax,%ebx
f011bad5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011badc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bae1:	0f b6 d0             	movzbl %al,%edx
f011bae4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bae7:	01 d0                	add    %edx,%eax
f011bae9:	48                   	dec    %eax
f011baea:	89 45 80             	mov    %eax,-0x80(%ebp)
f011baed:	8b 45 80             	mov    -0x80(%ebp),%eax
f011baf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011baf5:	f7 75 84             	divl   -0x7c(%ebp)
f011baf8:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bafb:	29 d0                	sub    %edx,%eax
f011bafd:	01 c3                	add    %eax,%ebx
f011baff:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bb06:	10 00 00 
f011bb09:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bb0e:	0f b6 c0             	movzbl %al,%eax
f011bb11:	c1 e0 04             	shl    $0x4,%eax
f011bb14:	89 c2                	mov    %eax,%edx
f011bb16:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bb1c:	01 d0                	add    %edx,%eax
f011bb1e:	48                   	dec    %eax
f011bb1f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bb25:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb30:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bb36:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb3c:	29 d0                	sub    %edx,%eax
f011bb3e:	01 d8                	add    %ebx,%eax
f011bb40:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bb45:	39 c1                	cmp    %eax,%ecx
f011bb47:	74 17                	je     f011bb60 <test_kmalloc_bestfit2+0x525>
f011bb49:	83 ec 04             	sub    $0x4,%esp
f011bb4c:	68 34 ba 13 f0       	push   $0xf013ba34
f011bb51:	68 61 02 00 00       	push   $0x261
f011bb56:	68 1a b6 13 f0       	push   $0xf013b61a
f011bb5b:	e8 a5 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb60:	e8 63 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb65:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb68:	74 17                	je     f011bb81 <test_kmalloc_bestfit2+0x546>
f011bb6a:	83 ec 04             	sub    $0x4,%esp
f011bb6d:	68 34 b6 13 f0       	push   $0xf013b634
f011bb72:	68 62 02 00 00       	push   $0x262
f011bb77:	68 1a b6 13 f0       	push   $0xf013b61a
f011bb7c:	e8 84 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bb81:	e8 21 13 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bb86:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb89:	29 c2                	sub    %eax,%edx
f011bb8b:	89 d0                	mov    %edx,%eax
f011bb8d:	83 f8 01             	cmp    $0x1,%eax
f011bb90:	74 17                	je     f011bba9 <test_kmalloc_bestfit2+0x56e>
f011bb92:	83 ec 04             	sub    $0x4,%esp
f011bb95:	68 64 ba 13 f0       	push   $0xf013ba64
f011bb9a:	68 63 02 00 00       	push   $0x263
f011bb9f:	68 1a b6 13 f0       	push   $0xf013b61a
f011bba4:	e8 5c 46 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bba9:	e8 f9 12 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bbae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbb1:	e8 12 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbb6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bbb9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bbbf:	83 ec 0c             	sub    $0xc,%esp
f011bbc2:	50                   	push   %eax
f011bbc3:	e8 92 c0 fe ff       	call   f0107c5a <kfree>
f011bbc8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbcb:	e8 f8 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbd0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bbd3:	74 17                	je     f011bbec <test_kmalloc_bestfit2+0x5b1>
f011bbd5:	83 ec 04             	sub    $0x4,%esp
f011bbd8:	68 34 b6 13 f0       	push   $0xf013b634
f011bbdd:	68 69 02 00 00       	push   $0x269
f011bbe2:	68 1a b6 13 f0       	push   $0xf013b61a
f011bbe7:	e8 19 46 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bbec:	e8 b6 12 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bbf1:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bbf4:	83 f8 01             	cmp    $0x1,%eax
f011bbf7:	74 17                	je     f011bc10 <test_kmalloc_bestfit2+0x5d5>
f011bbf9:	83 ec 04             	sub    $0x4,%esp
f011bbfc:	68 64 ba 13 f0       	push   $0xf013ba64
f011bc01:	68 6a 02 00 00       	push   $0x26a
f011bc06:	68 1a b6 13 f0       	push   $0xf013b61a
f011bc0b:	e8 f5 45 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bc10:	e8 92 12 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bc15:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc18:	e8 ab 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bc20:	83 ec 0c             	sub    $0xc,%esp
f011bc23:	68 00 1c 00 00       	push   $0x1c00
f011bc28:	e8 62 bf fe ff       	call   f0107b8f <kmalloc>
f011bc2d:	83 c4 10             	add    $0x10,%esp
f011bc30:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bc36:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bc3c:	89 c1                	mov    %eax,%ecx
f011bc3e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bc45:	10 00 00 
f011bc48:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bc4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc53:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bc59:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc64:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bc6a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc70:	29 d0                	sub    %edx,%eax
f011bc72:	89 c3                	mov    %eax,%ebx
f011bc74:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bc7b:	10 00 00 
f011bc7e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bc83:	0f b6 d0             	movzbl %al,%edx
f011bc86:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bc8c:	01 d0                	add    %edx,%eax
f011bc8e:	48                   	dec    %eax
f011bc8f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bc95:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bc9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bca0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bca6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bcac:	29 d0                	sub    %edx,%eax
f011bcae:	01 c3                	add    %eax,%ebx
f011bcb0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bcb7:	10 00 00 
f011bcba:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bcbf:	0f b6 c0             	movzbl %al,%eax
f011bcc2:	c1 e0 04             	shl    $0x4,%eax
f011bcc5:	89 c2                	mov    %eax,%edx
f011bcc7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bccd:	01 d0                	add    %edx,%eax
f011bccf:	48                   	dec    %eax
f011bcd0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bcd6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bcdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bce1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bce7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bced:	29 d0                	sub    %edx,%eax
f011bcef:	01 d8                	add    %ebx,%eax
f011bcf1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bcf6:	39 c1                	cmp    %eax,%ecx
f011bcf8:	74 17                	je     f011bd11 <test_kmalloc_bestfit2+0x6d6>
f011bcfa:	83 ec 04             	sub    $0x4,%esp
f011bcfd:	68 34 ba 13 f0       	push   $0xf013ba34
f011bd02:	68 70 02 00 00       	push   $0x270
f011bd07:	68 1a b6 13 f0       	push   $0xf013b61a
f011bd0c:	e8 f4 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd11:	e8 b2 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd19:	74 17                	je     f011bd32 <test_kmalloc_bestfit2+0x6f7>
f011bd1b:	83 ec 04             	sub    $0x4,%esp
f011bd1e:	68 34 b6 13 f0       	push   $0xf013b634
f011bd23:	68 71 02 00 00       	push   $0x271
f011bd28:	68 1a b6 13 f0       	push   $0xf013b61a
f011bd2d:	e8 d3 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bd32:	e8 70 11 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bd37:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd3a:	29 c2                	sub    %eax,%edx
f011bd3c:	89 d0                	mov    %edx,%eax
f011bd3e:	83 f8 02             	cmp    $0x2,%eax
f011bd41:	74 17                	je     f011bd5a <test_kmalloc_bestfit2+0x71f>
f011bd43:	83 ec 04             	sub    $0x4,%esp
f011bd46:	68 64 ba 13 f0       	push   $0xf013ba64
f011bd4b:	68 72 02 00 00       	push   $0x272
f011bd50:	68 1a b6 13 f0       	push   $0xf013b61a
f011bd55:	e8 ab 44 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd5a:	e8 48 11 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bd5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd62:	e8 61 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd67:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011bd6a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bd70:	83 ec 0c             	sub    $0xc,%esp
f011bd73:	50                   	push   %eax
f011bd74:	e8 e1 be fe ff       	call   f0107c5a <kfree>
f011bd79:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd7c:	e8 47 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd81:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd84:	74 17                	je     f011bd9d <test_kmalloc_bestfit2+0x762>
f011bd86:	83 ec 04             	sub    $0x4,%esp
f011bd89:	68 34 b6 13 f0       	push   $0xf013b634
f011bd8e:	68 78 02 00 00       	push   $0x278
f011bd93:	68 1a b6 13 f0       	push   $0xf013b61a
f011bd98:	e8 68 44 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bd9d:	e8 05 11 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bda2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bda5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bdaa:	74 17                	je     f011bdc3 <test_kmalloc_bestfit2+0x788>
f011bdac:	83 ec 04             	sub    $0x4,%esp
f011bdaf:	68 e8 b8 13 f0       	push   $0xf013b8e8
f011bdb4:	68 79 02 00 00       	push   $0x279
f011bdb9:	68 1a b6 13 f0       	push   $0xf013b61a
f011bdbe:	e8 42 44 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bdc3:	e8 df 10 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bdc8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdcb:	e8 f8 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bdd3:	83 ec 0c             	sub    $0xc,%esp
f011bdd6:	68 00 fc 2f 00       	push   $0x2ffc00
f011bddb:	e8 af bd fe ff       	call   f0107b8f <kmalloc>
f011bde0:	83 c4 10             	add    $0x10,%esp
f011bde3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bde9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bdef:	89 c1                	mov    %eax,%ecx
f011bdf1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bdf8:	10 00 00 
f011bdfb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011be01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be06:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011be0c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be12:	ba 00 00 00 00       	mov    $0x0,%edx
f011be17:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011be1d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be23:	29 d0                	sub    %edx,%eax
f011be25:	89 c3                	mov    %eax,%ebx
f011be27:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011be2e:	10 00 00 
f011be31:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011be36:	0f b6 d0             	movzbl %al,%edx
f011be39:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011be3f:	01 d0                	add    %edx,%eax
f011be41:	48                   	dec    %eax
f011be42:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011be48:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be53:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011be59:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be5f:	29 d0                	sub    %edx,%eax
f011be61:	01 c3                	add    %eax,%ebx
f011be63:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011be6a:	10 00 00 
f011be6d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011be72:	0f b6 c0             	movzbl %al,%eax
f011be75:	c1 e0 04             	shl    $0x4,%eax
f011be78:	89 c2                	mov    %eax,%edx
f011be7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011be80:	01 d0                	add    %edx,%eax
f011be82:	48                   	dec    %eax
f011be83:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011be89:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011be8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011be94:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011be9a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bea0:	29 d0                	sub    %edx,%eax
f011bea2:	01 d8                	add    %ebx,%eax
f011bea4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bea9:	39 c1                	cmp    %eax,%ecx
f011beab:	74 17                	je     f011bec4 <test_kmalloc_bestfit2+0x889>
f011bead:	83 ec 04             	sub    $0x4,%esp
f011beb0:	68 34 ba 13 f0       	push   $0xf013ba34
f011beb5:	68 7f 02 00 00       	push   $0x27f
f011beba:	68 1a b6 13 f0       	push   $0xf013b61a
f011bebf:	e8 41 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bec4:	e8 ff 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bec9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011becc:	74 17                	je     f011bee5 <test_kmalloc_bestfit2+0x8aa>
f011bece:	83 ec 04             	sub    $0x4,%esp
f011bed1:	68 34 b6 13 f0       	push   $0xf013b634
f011bed6:	68 80 02 00 00       	push   $0x280
f011bedb:	68 1a b6 13 f0       	push   $0xf013b61a
f011bee0:	e8 20 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bee5:	e8 bd 0f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011beea:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011beed:	29 c2                	sub    %eax,%edx
f011beef:	89 d0                	mov    %edx,%eax
f011bef1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bef6:	74 17                	je     f011bf0f <test_kmalloc_bestfit2+0x8d4>
f011bef8:	83 ec 04             	sub    $0x4,%esp
f011befb:	68 64 ba 13 f0       	push   $0xf013ba64
f011bf00:	68 81 02 00 00       	push   $0x281
f011bf05:	68 1a b6 13 f0       	push   $0xf013b61a
f011bf0a:	e8 f6 42 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf0f:	e8 93 0f ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011bf14:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf17:	e8 ac 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bf1f:	83 ec 0c             	sub    $0xc,%esp
f011bf22:	68 00 18 20 00       	push   $0x201800
f011bf27:	e8 63 bc fe ff       	call   f0107b8f <kmalloc>
f011bf2c:	83 c4 10             	add    $0x10,%esp
f011bf2f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf35:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bf3b:	89 c1                	mov    %eax,%ecx
f011bf3d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bf44:	10 00 00 
f011bf47:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bf4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf52:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bf58:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf63:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bf69:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf6f:	29 d0                	sub    %edx,%eax
f011bf71:	89 c3                	mov    %eax,%ebx
f011bf73:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bf7a:	10 00 00 
f011bf7d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bf82:	0f b6 d0             	movzbl %al,%edx
f011bf85:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bf8b:	01 d0                	add    %edx,%eax
f011bf8d:	48                   	dec    %eax
f011bf8e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bf94:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bf9a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf9f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bfa5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bfab:	29 d0                	sub    %edx,%eax
f011bfad:	01 c3                	add    %eax,%ebx
f011bfaf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bfb6:	10 00 00 
f011bfb9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bfbe:	0f b6 c0             	movzbl %al,%eax
f011bfc1:	c1 e0 04             	shl    $0x4,%eax
f011bfc4:	89 c2                	mov    %eax,%edx
f011bfc6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bfcc:	01 d0                	add    %edx,%eax
f011bfce:	48                   	dec    %eax
f011bfcf:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bfd5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bfdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfe0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bfe6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bfec:	29 d0                	sub    %edx,%eax
f011bfee:	01 d8                	add    %ebx,%eax
f011bff0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bff5:	39 c1                	cmp    %eax,%ecx
f011bff7:	74 17                	je     f011c010 <test_kmalloc_bestfit2+0x9d5>
f011bff9:	83 ec 04             	sub    $0x4,%esp
f011bffc:	68 34 ba 13 f0       	push   $0xf013ba34
f011c001:	68 87 02 00 00       	push   $0x287
f011c006:	68 1a b6 13 f0       	push   $0xf013b61a
f011c00b:	e8 f5 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c010:	e8 b3 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c015:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c018:	74 17                	je     f011c031 <test_kmalloc_bestfit2+0x9f6>
f011c01a:	83 ec 04             	sub    $0x4,%esp
f011c01d:	68 34 b6 13 f0       	push   $0xf013b634
f011c022:	68 88 02 00 00       	push   $0x288
f011c027:	68 1a b6 13 f0       	push   $0xf013b61a
f011c02c:	e8 d4 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c031:	e8 71 0e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c036:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c039:	29 c2                	sub    %eax,%edx
f011c03b:	89 d0                	mov    %edx,%eax
f011c03d:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c042:	74 17                	je     f011c05b <test_kmalloc_bestfit2+0xa20>
f011c044:	83 ec 04             	sub    $0x4,%esp
f011c047:	68 64 ba 13 f0       	push   $0xf013ba64
f011c04c:	68 89 02 00 00       	push   $0x289
f011c051:	68 1a b6 13 f0       	push   $0xf013b61a
f011c056:	e8 aa 41 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c05b:	e8 47 0e ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c060:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c063:	e8 60 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c068:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c06b:	83 ec 0c             	sub    $0xc,%esp
f011c06e:	68 00 fc 4f 00       	push   $0x4ffc00
f011c073:	e8 17 bb fe ff       	call   f0107b8f <kmalloc>
f011c078:	83 c4 10             	add    $0x10,%esp
f011c07b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c081:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c087:	89 c1                	mov    %eax,%ecx
f011c089:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c090:	10 00 00 
f011c093:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c099:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c09e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c0a4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c0aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0af:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c0b5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c0bb:	29 d0                	sub    %edx,%eax
f011c0bd:	89 c3                	mov    %eax,%ebx
f011c0bf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c0c6:	10 00 00 
f011c0c9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c0ce:	0f b6 d0             	movzbl %al,%edx
f011c0d1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c0d7:	01 d0                	add    %edx,%eax
f011c0d9:	48                   	dec    %eax
f011c0da:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c0e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c0e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0eb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c0f1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c0f7:	29 d0                	sub    %edx,%eax
f011c0f9:	01 c3                	add    %eax,%ebx
f011c0fb:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c102:	10 00 00 
f011c105:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c10a:	0f b6 c0             	movzbl %al,%eax
f011c10d:	c1 e0 04             	shl    $0x4,%eax
f011c110:	89 c2                	mov    %eax,%edx
f011c112:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c118:	01 d0                	add    %edx,%eax
f011c11a:	48                   	dec    %eax
f011c11b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c121:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c127:	ba 00 00 00 00       	mov    $0x0,%edx
f011c12c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c132:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c138:	29 d0                	sub    %edx,%eax
f011c13a:	01 d8                	add    %ebx,%eax
f011c13c:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c141:	39 c1                	cmp    %eax,%ecx
f011c143:	74 17                	je     f011c15c <test_kmalloc_bestfit2+0xb21>
f011c145:	83 ec 04             	sub    $0x4,%esp
f011c148:	68 34 ba 13 f0       	push   $0xf013ba34
f011c14d:	68 8f 02 00 00       	push   $0x28f
f011c152:	68 1a b6 13 f0       	push   $0xf013b61a
f011c157:	e8 a9 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c15c:	e8 67 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c161:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c164:	74 17                	je     f011c17d <test_kmalloc_bestfit2+0xb42>
f011c166:	83 ec 04             	sub    $0x4,%esp
f011c169:	68 34 b6 13 f0       	push   $0xf013b634
f011c16e:	68 90 02 00 00       	push   $0x290
f011c173:	68 1a b6 13 f0       	push   $0xf013b61a
f011c178:	e8 88 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c17d:	e8 25 0d ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c182:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c185:	29 c2                	sub    %eax,%edx
f011c187:	89 d0                	mov    %edx,%eax
f011c189:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c18e:	74 17                	je     f011c1a7 <test_kmalloc_bestfit2+0xb6c>
f011c190:	83 ec 04             	sub    $0x4,%esp
f011c193:	68 64 ba 13 f0       	push   $0xf013ba64
f011c198:	68 91 02 00 00       	push   $0x291
f011c19d:	68 1a b6 13 f0       	push   $0xf013b61a
f011c1a2:	e8 5e 40 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c1a7:	e8 fb 0c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c1ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1af:	e8 14 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c1b7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c1bd:	83 ec 0c             	sub    $0xc,%esp
f011c1c0:	50                   	push   %eax
f011c1c1:	e8 94 ba fe ff       	call   f0107c5a <kfree>
f011c1c6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1c9:	e8 fa 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1d1:	74 17                	je     f011c1ea <test_kmalloc_bestfit2+0xbaf>
f011c1d3:	83 ec 04             	sub    $0x4,%esp
f011c1d6:	68 34 b6 13 f0       	push   $0xf013b634
f011c1db:	68 97 02 00 00       	push   $0x297
f011c1e0:	68 1a b6 13 f0       	push   $0xf013b61a
f011c1e5:	e8 1b 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c1ea:	e8 b8 0c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c1ef:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c1f2:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c1f7:	74 17                	je     f011c210 <test_kmalloc_bestfit2+0xbd5>
f011c1f9:	83 ec 04             	sub    $0x4,%esp
f011c1fc:	68 e8 b8 13 f0       	push   $0xf013b8e8
f011c201:	68 98 02 00 00       	push   $0x298
f011c206:	68 1a b6 13 f0       	push   $0xf013b61a
f011c20b:	e8 f5 3f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c210:	e8 92 0c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c215:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c218:	e8 ab 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c21d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c220:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c226:	83 ec 0c             	sub    $0xc,%esp
f011c229:	50                   	push   %eax
f011c22a:	e8 2b ba fe ff       	call   f0107c5a <kfree>
f011c22f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c232:	e8 91 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c237:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c23a:	74 17                	je     f011c253 <test_kmalloc_bestfit2+0xc18>
f011c23c:	83 ec 04             	sub    $0x4,%esp
f011c23f:	68 34 b6 13 f0       	push   $0xf013b634
f011c244:	68 9e 02 00 00       	push   $0x29e
f011c249:	68 1a b6 13 f0       	push   $0xf013b61a
f011c24e:	e8 b2 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c253:	e8 4f 0c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c258:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c25b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c260:	74 17                	je     f011c279 <test_kmalloc_bestfit2+0xc3e>
f011c262:	83 ec 04             	sub    $0x4,%esp
f011c265:	68 14 bb 13 f0       	push   $0xf013bb14
f011c26a:	68 9f 02 00 00       	push   $0x29f
f011c26f:	68 1a b6 13 f0       	push   $0xf013b61a
f011c274:	e8 8c 3f fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c279:	e8 29 0c ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c27e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c281:	e8 42 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c286:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c289:	83 ec 0c             	sub    $0xc,%esp
f011c28c:	68 00 fc 1f 00       	push   $0x1ffc00
f011c291:	e8 f9 b8 fe ff       	call   f0107b8f <kmalloc>
f011c296:	83 c4 10             	add    $0x10,%esp
f011c299:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c29f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c2a5:	89 c1                	mov    %eax,%ecx
f011c2a7:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c2ae:	10 00 00 
f011c2b1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c2b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2bc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c2c2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2cd:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c2d3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2d9:	29 d0                	sub    %edx,%eax
f011c2db:	89 c3                	mov    %eax,%ebx
f011c2dd:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c2e4:	10 00 00 
f011c2e7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c2ec:	0f b6 d0             	movzbl %al,%edx
f011c2ef:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c2f5:	01 d0                	add    %edx,%eax
f011c2f7:	48                   	dec    %eax
f011c2f8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c2fe:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c304:	ba 00 00 00 00       	mov    $0x0,%edx
f011c309:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c30f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c315:	29 d0                	sub    %edx,%eax
f011c317:	01 c3                	add    %eax,%ebx
f011c319:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c320:	10 00 00 
f011c323:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c328:	0f b6 c0             	movzbl %al,%eax
f011c32b:	c1 e0 04             	shl    $0x4,%eax
f011c32e:	89 c2                	mov    %eax,%edx
f011c330:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c336:	01 d0                	add    %edx,%eax
f011c338:	48                   	dec    %eax
f011c339:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c33f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c345:	ba 00 00 00 00       	mov    $0x0,%edx
f011c34a:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c350:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c356:	29 d0                	sub    %edx,%eax
f011c358:	01 d8                	add    %ebx,%eax
f011c35a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c35f:	39 c1                	cmp    %eax,%ecx
f011c361:	74 17                	je     f011c37a <test_kmalloc_bestfit2+0xd3f>
f011c363:	83 ec 04             	sub    $0x4,%esp
f011c366:	68 34 ba 13 f0       	push   $0xf013ba34
f011c36b:	68 a5 02 00 00       	push   $0x2a5
f011c370:	68 1a b6 13 f0       	push   $0xf013b61a
f011c375:	e8 8b 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c37a:	e8 49 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c37f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c382:	74 17                	je     f011c39b <test_kmalloc_bestfit2+0xd60>
f011c384:	83 ec 04             	sub    $0x4,%esp
f011c387:	68 34 b6 13 f0       	push   $0xf013b634
f011c38c:	68 a6 02 00 00       	push   $0x2a6
f011c391:	68 1a b6 13 f0       	push   $0xf013b61a
f011c396:	e8 6a 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c39b:	e8 07 0b ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c3a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c3a3:	29 c2                	sub    %eax,%edx
f011c3a5:	89 d0                	mov    %edx,%eax
f011c3a7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3ac:	74 17                	je     f011c3c5 <test_kmalloc_bestfit2+0xd8a>
f011c3ae:	83 ec 04             	sub    $0x4,%esp
f011c3b1:	68 52 bb 13 f0       	push   $0xf013bb52
f011c3b6:	68 a7 02 00 00       	push   $0x2a7
f011c3bb:	68 1a b6 13 f0       	push   $0xf013b61a
f011c3c0:	e8 40 3e fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c3c5:	e8 dd 0a ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c3ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3cd:	e8 f6 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c3d5:	83 ec 0c             	sub    $0xc,%esp
f011c3d8:	68 00 18 00 00       	push   $0x1800
f011c3dd:	e8 ad b7 fe ff       	call   f0107b8f <kmalloc>
f011c3e2:	83 c4 10             	add    $0x10,%esp
f011c3e5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3eb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c3f1:	89 c1                	mov    %eax,%ecx
f011c3f3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c3fa:	10 00 00 
f011c3fd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c403:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c408:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c40e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c414:	ba 00 00 00 00       	mov    $0x0,%edx
f011c419:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c41f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c425:	29 d0                	sub    %edx,%eax
f011c427:	89 c3                	mov    %eax,%ebx
f011c429:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c430:	10 00 00 
f011c433:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c438:	0f b6 d0             	movzbl %al,%edx
f011c43b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c441:	01 d0                	add    %edx,%eax
f011c443:	48                   	dec    %eax
f011c444:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c44a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c450:	ba 00 00 00 00       	mov    $0x0,%edx
f011c455:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c45b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c461:	29 d0                	sub    %edx,%eax
f011c463:	01 c3                	add    %eax,%ebx
f011c465:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c46c:	10 00 00 
f011c46f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c474:	0f b6 c0             	movzbl %al,%eax
f011c477:	c1 e0 04             	shl    $0x4,%eax
f011c47a:	89 c2                	mov    %eax,%edx
f011c47c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c482:	01 d0                	add    %edx,%eax
f011c484:	48                   	dec    %eax
f011c485:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c48b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c491:	ba 00 00 00 00       	mov    $0x0,%edx
f011c496:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c49c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c4a2:	29 d0                	sub    %edx,%eax
f011c4a4:	01 d8                	add    %ebx,%eax
f011c4a6:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c4ab:	39 c1                	cmp    %eax,%ecx
f011c4ad:	74 17                	je     f011c4c6 <test_kmalloc_bestfit2+0xe8b>
f011c4af:	83 ec 04             	sub    $0x4,%esp
f011c4b2:	68 34 ba 13 f0       	push   $0xf013ba34
f011c4b7:	68 ad 02 00 00       	push   $0x2ad
f011c4bc:	68 1a b6 13 f0       	push   $0xf013b61a
f011c4c1:	e8 3f 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4c6:	e8 fd 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c4ce:	74 17                	je     f011c4e7 <test_kmalloc_bestfit2+0xeac>
f011c4d0:	83 ec 04             	sub    $0x4,%esp
f011c4d3:	68 34 b6 13 f0       	push   $0xf013b634
f011c4d8:	68 ae 02 00 00       	push   $0x2ae
f011c4dd:	68 1a b6 13 f0       	push   $0xf013b61a
f011c4e2:	e8 1e 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c4e7:	e8 bb 09 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c4ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4ef:	29 c2                	sub    %eax,%edx
f011c4f1:	89 d0                	mov    %edx,%eax
f011c4f3:	83 f8 02             	cmp    $0x2,%eax
f011c4f6:	74 17                	je     f011c50f <test_kmalloc_bestfit2+0xed4>
f011c4f8:	83 ec 04             	sub    $0x4,%esp
f011c4fb:	68 52 bb 13 f0       	push   $0xf013bb52
f011c500:	68 af 02 00 00       	push   $0x2af
f011c505:	68 1a b6 13 f0       	push   $0xf013b61a
f011c50a:	e8 f6 3c fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c50f:	e8 93 09 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c514:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c517:	e8 ac 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c51c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c51f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c525:	83 ec 0c             	sub    $0xc,%esp
f011c528:	50                   	push   %eax
f011c529:	e8 2c b7 fe ff       	call   f0107c5a <kfree>
f011c52e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c531:	e8 92 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c536:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c539:	74 17                	je     f011c552 <test_kmalloc_bestfit2+0xf17>
f011c53b:	83 ec 04             	sub    $0x4,%esp
f011c53e:	68 34 b6 13 f0       	push   $0xf013b634
f011c543:	68 b5 02 00 00       	push   $0x2b5
f011c548:	68 1a b6 13 f0       	push   $0xf013b61a
f011c54d:	e8 b3 3c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c552:	e8 50 09 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c557:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c55a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c55f:	74 17                	je     f011c578 <test_kmalloc_bestfit2+0xf3d>
f011c561:	83 ec 04             	sub    $0x4,%esp
f011c564:	68 14 bb 13 f0       	push   $0xf013bb14
f011c569:	68 b6 02 00 00       	push   $0x2b6
f011c56e:	68 1a b6 13 f0       	push   $0xf013b61a
f011c573:	e8 8d 3c fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c578:	e8 2a 09 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c57d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c580:	e8 43 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c585:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c588:	83 ec 0c             	sub    $0xc,%esp
f011c58b:	68 00 fc 2f 00       	push   $0x2ffc00
f011c590:	e8 fa b5 fe ff       	call   f0107b8f <kmalloc>
f011c595:	83 c4 10             	add    $0x10,%esp
f011c598:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c59e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c5a4:	89 c1                	mov    %eax,%ecx
f011c5a6:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c5ad:	10 00 00 
f011c5b0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c5b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5bb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c5c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c5c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5cc:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c5d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c5d8:	29 d0                	sub    %edx,%eax
f011c5da:	89 c3                	mov    %eax,%ebx
f011c5dc:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c5e3:	10 00 00 
f011c5e6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c5eb:	0f b6 d0             	movzbl %al,%edx
f011c5ee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c5f4:	01 d0                	add    %edx,%eax
f011c5f6:	48                   	dec    %eax
f011c5f7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c5fd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c603:	ba 00 00 00 00       	mov    $0x0,%edx
f011c608:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c60e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c614:	29 d0                	sub    %edx,%eax
f011c616:	01 c3                	add    %eax,%ebx
f011c618:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c61f:	10 00 00 
f011c622:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c627:	0f b6 c0             	movzbl %al,%eax
f011c62a:	c1 e0 04             	shl    $0x4,%eax
f011c62d:	89 c2                	mov    %eax,%edx
f011c62f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c635:	01 d0                	add    %edx,%eax
f011c637:	48                   	dec    %eax
f011c638:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c63e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c644:	ba 00 00 00 00       	mov    $0x0,%edx
f011c649:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c64f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c655:	29 d0                	sub    %edx,%eax
f011c657:	01 d8                	add    %ebx,%eax
f011c659:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c65e:	39 c1                	cmp    %eax,%ecx
f011c660:	74 17                	je     f011c679 <test_kmalloc_bestfit2+0x103e>
f011c662:	83 ec 04             	sub    $0x4,%esp
f011c665:	68 34 ba 13 f0       	push   $0xf013ba34
f011c66a:	68 bc 02 00 00       	push   $0x2bc
f011c66f:	68 1a b6 13 f0       	push   $0xf013b61a
f011c674:	e8 8c 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c679:	e8 4a 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c67e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c681:	74 17                	je     f011c69a <test_kmalloc_bestfit2+0x105f>
f011c683:	83 ec 04             	sub    $0x4,%esp
f011c686:	68 34 b6 13 f0       	push   $0xf013b634
f011c68b:	68 bd 02 00 00       	push   $0x2bd
f011c690:	68 1a b6 13 f0       	push   $0xf013b61a
f011c695:	e8 6b 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c69a:	e8 08 08 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c69f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c6a2:	29 c2                	sub    %eax,%edx
f011c6a4:	89 d0                	mov    %edx,%eax
f011c6a6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c6ab:	74 17                	je     f011c6c4 <test_kmalloc_bestfit2+0x1089>
f011c6ad:	83 ec 04             	sub    $0x4,%esp
f011c6b0:	68 14 bb 13 f0       	push   $0xf013bb14
f011c6b5:	68 be 02 00 00       	push   $0x2be
f011c6ba:	68 1a b6 13 f0       	push   $0xf013b61a
f011c6bf:	e8 41 3b fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6c4:	e8 de 07 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c6c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6cc:	e8 f7 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c6d4:	83 ec 0c             	sub    $0xc,%esp
f011c6d7:	68 00 fc 3f 00       	push   $0x3ffc00
f011c6dc:	e8 ae b4 fe ff       	call   f0107b8f <kmalloc>
f011c6e1:	83 c4 10             	add    $0x10,%esp
f011c6e4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c6ea:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c6f0:	89 c1                	mov    %eax,%ecx
f011c6f2:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c6f9:	10 00 00 
f011c6fc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c702:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c707:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c70d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c713:	ba 00 00 00 00       	mov    $0x0,%edx
f011c718:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c71e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c724:	29 d0                	sub    %edx,%eax
f011c726:	89 c3                	mov    %eax,%ebx
f011c728:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c72f:	10 00 00 
f011c732:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c737:	0f b6 d0             	movzbl %al,%edx
f011c73a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c740:	01 d0                	add    %edx,%eax
f011c742:	48                   	dec    %eax
f011c743:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c749:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c74f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c754:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c75a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c760:	29 d0                	sub    %edx,%eax
f011c762:	01 c3                	add    %eax,%ebx
f011c764:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c76b:	10 00 00 
f011c76e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c773:	0f b6 c0             	movzbl %al,%eax
f011c776:	c1 e0 04             	shl    $0x4,%eax
f011c779:	89 c2                	mov    %eax,%edx
f011c77b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c781:	01 d0                	add    %edx,%eax
f011c783:	48                   	dec    %eax
f011c784:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c78a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c790:	ba 00 00 00 00       	mov    $0x0,%edx
f011c795:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c79b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c7a1:	29 d0                	sub    %edx,%eax
f011c7a3:	01 d8                	add    %ebx,%eax
f011c7a5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c7aa:	39 c1                	cmp    %eax,%ecx
f011c7ac:	74 17                	je     f011c7c5 <test_kmalloc_bestfit2+0x118a>
f011c7ae:	83 ec 04             	sub    $0x4,%esp
f011c7b1:	68 34 ba 13 f0       	push   $0xf013ba34
f011c7b6:	68 c4 02 00 00       	push   $0x2c4
f011c7bb:	68 1a b6 13 f0       	push   $0xf013b61a
f011c7c0:	e8 40 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7c5:	e8 fe 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c7cd:	74 17                	je     f011c7e6 <test_kmalloc_bestfit2+0x11ab>
f011c7cf:	83 ec 04             	sub    $0x4,%esp
f011c7d2:	68 34 b6 13 f0       	push   $0xf013b634
f011c7d7:	68 c5 02 00 00       	push   $0x2c5
f011c7dc:	68 1a b6 13 f0       	push   $0xf013b61a
f011c7e1:	e8 1f 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c7e6:	e8 bc 06 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c7eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c7ee:	29 c2                	sub    %eax,%edx
f011c7f0:	89 d0                	mov    %edx,%eax
f011c7f2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c7f7:	74 17                	je     f011c810 <test_kmalloc_bestfit2+0x11d5>
f011c7f9:	83 ec 04             	sub    $0x4,%esp
f011c7fc:	68 14 bb 13 f0       	push   $0xf013bb14
f011c801:	68 c6 02 00 00       	push   $0x2c6
f011c806:	68 1a b6 13 f0       	push   $0xf013b61a
f011c80b:	e8 f5 39 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c810:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c817:	10 00 00 
f011c81a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c820:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c825:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c82b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c831:	ba 00 00 00 00       	mov    $0x0,%edx
f011c836:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c83c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c842:	29 d0                	sub    %edx,%eax
f011c844:	89 c1                	mov    %eax,%ecx
f011c846:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c84d:	10 00 00 
f011c850:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c855:	0f b6 d0             	movzbl %al,%edx
f011c858:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c85e:	01 d0                	add    %edx,%eax
f011c860:	48                   	dec    %eax
f011c861:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c867:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c86d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c872:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c878:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c87e:	29 d0                	sub    %edx,%eax
f011c880:	01 c1                	add    %eax,%ecx
f011c882:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c889:	10 00 00 
f011c88c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c891:	0f b6 c0             	movzbl %al,%eax
f011c894:	c1 e0 04             	shl    $0x4,%eax
f011c897:	89 c2                	mov    %eax,%edx
f011c899:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c89f:	01 d0                	add    %edx,%eax
f011c8a1:	48                   	dec    %eax
f011c8a2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c8a8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c8ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8b3:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c8b9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c8bf:	29 d0                	sub    %edx,%eax
f011c8c1:	01 c8                	add    %ecx,%eax
f011c8c3:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c8c8:	29 c2                	sub    %eax,%edx
f011c8ca:	89 d0                	mov    %edx,%eax
f011c8cc:	83 ec 0c             	sub    $0xc,%esp
f011c8cf:	50                   	push   %eax
f011c8d0:	e8 ba b2 fe ff       	call   f0107b8f <kmalloc>
f011c8d5:	83 c4 10             	add    $0x10,%esp
f011c8d8:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c8de:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c8e4:	85 c0                	test   %eax,%eax
f011c8e6:	74 17                	je     f011c8ff <test_kmalloc_bestfit2+0x12c4>
f011c8e8:	83 ec 04             	sub    $0x4,%esp
f011c8eb:	68 64 bb 13 f0       	push   $0xf013bb64
f011c8f0:	68 ce 02 00 00       	push   $0x2ce
f011c8f5:	68 1a b6 13 f0       	push   $0xf013b61a
f011c8fa:	e8 06 39 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c8ff:	83 ec 0c             	sub    $0xc,%esp
f011c902:	68 c8 bb 13 f0       	push   $0xf013bbc8
f011c907:	e8 02 44 fe ff       	call   f0100d0e <cprintf>
f011c90c:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c90f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c914:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c917:	5b                   	pop    %ebx
f011c918:	5f                   	pop    %edi
f011c919:	5d                   	pop    %ebp
f011c91a:	c3                   	ret    

f011c91b <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c91b:	55                   	push   %ebp
f011c91c:	89 e5                	mov    %esp,%ebp
f011c91e:	57                   	push   %edi
f011c91f:	53                   	push   %ebx
f011c920:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c926:	83 ec 0c             	sub    $0xc,%esp
f011c929:	68 5c b5 13 f0       	push   $0xf013b55c
f011c92e:	e8 db 43 fe ff       	call   f0100d0e <cprintf>
f011c933:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c936:	83 ec 0c             	sub    $0xc,%esp
f011c939:	68 8c b5 13 f0       	push   $0xf013b58c
f011c93e:	e8 cb 43 fe ff       	call   f0100d0e <cprintf>
f011c943:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c946:	83 ec 0c             	sub    $0xc,%esp
f011c949:	68 5c b5 13 f0       	push   $0xf013b55c
f011c94e:	e8 bb 43 fe ff       	call   f0100d0e <cprintf>
f011c953:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c956:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c95c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c961:	b8 00 00 00 00       	mov    $0x0,%eax
f011c966:	89 d7                	mov    %edx,%edi
f011c968:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c96a:	e8 38 05 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011c96f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c972:	e8 51 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c977:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c97a:	83 ec 0c             	sub    $0xc,%esp
f011c97d:	68 00 fc 0f 00       	push   $0xffc00
f011c982:	e8 08 b2 fe ff       	call   f0107b8f <kmalloc>
f011c987:	83 c4 10             	add    $0x10,%esp
f011c98a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c990:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c996:	89 c1                	mov    %eax,%ecx
f011c998:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c99f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c9a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c9aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9b2:	f7 75 ec             	divl   -0x14(%ebp)
f011c9b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9b8:	29 d0                	sub    %edx,%eax
f011c9ba:	89 c3                	mov    %eax,%ebx
f011c9bc:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c9c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c9c8:	0f b6 d0             	movzbl %al,%edx
f011c9cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c9ce:	01 d0                	add    %edx,%eax
f011c9d0:	48                   	dec    %eax
f011c9d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c9d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9dc:	f7 75 e4             	divl   -0x1c(%ebp)
f011c9df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9e2:	29 d0                	sub    %edx,%eax
f011c9e4:	01 c3                	add    %eax,%ebx
f011c9e6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c9ed:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c9f2:	0f b6 c0             	movzbl %al,%eax
f011c9f5:	c1 e0 04             	shl    $0x4,%eax
f011c9f8:	89 c2                	mov    %eax,%edx
f011c9fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c9fd:	01 d0                	add    %edx,%eax
f011c9ff:	48                   	dec    %eax
f011ca00:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ca03:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca0b:	f7 75 dc             	divl   -0x24(%ebp)
f011ca0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca11:	29 d0                	sub    %edx,%eax
f011ca13:	01 d8                	add    %ebx,%eax
f011ca15:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ca1a:	39 c1                	cmp    %eax,%ecx
f011ca1c:	74 17                	je     f011ca35 <test_kmalloc_firstfit1+0x11a>
f011ca1e:	83 ec 04             	sub    $0x4,%esp
f011ca21:	68 34 ba 13 f0       	push   $0xf013ba34
f011ca26:	68 e6 02 00 00       	push   $0x2e6
f011ca2b:	68 1a b6 13 f0       	push   $0xf013b61a
f011ca30:	e8 d0 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca35:	e8 8e 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca3d:	74 17                	je     f011ca56 <test_kmalloc_firstfit1+0x13b>
f011ca3f:	83 ec 04             	sub    $0x4,%esp
f011ca42:	68 34 b6 13 f0       	push   $0xf013b634
f011ca47:	68 e7 02 00 00       	push   $0x2e7
f011ca4c:	68 1a b6 13 f0       	push   $0xf013b61a
f011ca51:	e8 af 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca56:	e8 4c 04 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ca5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca5e:	29 c2                	sub    %eax,%edx
f011ca60:	89 d0                	mov    %edx,%eax
f011ca62:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca67:	74 17                	je     f011ca80 <test_kmalloc_firstfit1+0x165>
f011ca69:	83 ec 04             	sub    $0x4,%esp
f011ca6c:	68 64 ba 13 f0       	push   $0xf013ba64
f011ca71:	68 e8 02 00 00       	push   $0x2e8
f011ca76:	68 1a b6 13 f0       	push   $0xf013b61a
f011ca7b:	e8 85 37 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca80:	e8 22 04 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ca85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca88:	e8 3b 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011ca90:	83 ec 0c             	sub    $0xc,%esp
f011ca93:	68 00 fc 0f 00       	push   $0xffc00
f011ca98:	e8 f2 b0 fe ff       	call   f0107b8f <kmalloc>
f011ca9d:	83 c4 10             	add    $0x10,%esp
f011caa0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011caa6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011caac:	89 c1                	mov    %eax,%ecx
f011caae:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cab5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cab8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cabd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cac0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cac3:	ba 00 00 00 00       	mov    $0x0,%edx
f011cac8:	f7 75 d4             	divl   -0x2c(%ebp)
f011cacb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cace:	29 d0                	sub    %edx,%eax
f011cad0:	89 c3                	mov    %eax,%ebx
f011cad2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cad9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cade:	0f b6 d0             	movzbl %al,%edx
f011cae1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cae4:	01 d0                	add    %edx,%eax
f011cae6:	48                   	dec    %eax
f011cae7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011caea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011caed:	ba 00 00 00 00       	mov    $0x0,%edx
f011caf2:	f7 75 cc             	divl   -0x34(%ebp)
f011caf5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011caf8:	29 d0                	sub    %edx,%eax
f011cafa:	01 c3                	add    %eax,%ebx
f011cafc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb03:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cb08:	0f b6 c0             	movzbl %al,%eax
f011cb0b:	c1 e0 04             	shl    $0x4,%eax
f011cb0e:	89 c2                	mov    %eax,%edx
f011cb10:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb13:	01 d0                	add    %edx,%eax
f011cb15:	48                   	dec    %eax
f011cb16:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb21:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb27:	29 d0                	sub    %edx,%eax
f011cb29:	01 d8                	add    %ebx,%eax
f011cb2b:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cb30:	39 c1                	cmp    %eax,%ecx
f011cb32:	74 17                	je     f011cb4b <test_kmalloc_firstfit1+0x230>
f011cb34:	83 ec 04             	sub    $0x4,%esp
f011cb37:	68 34 ba 13 f0       	push   $0xf013ba34
f011cb3c:	68 ee 02 00 00       	push   $0x2ee
f011cb41:	68 1a b6 13 f0       	push   $0xf013b61a
f011cb46:	e8 ba 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb4b:	e8 78 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb53:	74 17                	je     f011cb6c <test_kmalloc_firstfit1+0x251>
f011cb55:	83 ec 04             	sub    $0x4,%esp
f011cb58:	68 34 b6 13 f0       	push   $0xf013b634
f011cb5d:	68 ef 02 00 00       	push   $0x2ef
f011cb62:	68 1a b6 13 f0       	push   $0xf013b61a
f011cb67:	e8 99 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb6c:	e8 36 03 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011cb71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb74:	29 c2                	sub    %eax,%edx
f011cb76:	89 d0                	mov    %edx,%eax
f011cb78:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb7d:	74 17                	je     f011cb96 <test_kmalloc_firstfit1+0x27b>
f011cb7f:	83 ec 04             	sub    $0x4,%esp
f011cb82:	68 64 ba 13 f0       	push   $0xf013ba64
f011cb87:	68 f0 02 00 00       	push   $0x2f0
f011cb8c:	68 1a b6 13 f0       	push   $0xf013b61a
f011cb91:	e8 6f 36 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb96:	e8 0c 03 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011cb9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb9e:	e8 25 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cba3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cba6:	83 ec 0c             	sub    $0xc,%esp
f011cba9:	68 00 fc 0f 00       	push   $0xffc00
f011cbae:	e8 dc af fe ff       	call   f0107b8f <kmalloc>
f011cbb3:	83 c4 10             	add    $0x10,%esp
f011cbb6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cbbc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cbc2:	89 c1                	mov    %eax,%ecx
f011cbc4:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cbcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cbce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbd3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cbd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbde:	f7 75 bc             	divl   -0x44(%ebp)
f011cbe1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbe4:	29 d0                	sub    %edx,%eax
f011cbe6:	89 c3                	mov    %eax,%ebx
f011cbe8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cbef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cbf4:	0f b6 d0             	movzbl %al,%edx
f011cbf7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cbfa:	01 d0                	add    %edx,%eax
f011cbfc:	48                   	dec    %eax
f011cbfd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc03:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc08:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc0b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc0e:	29 d0                	sub    %edx,%eax
f011cc10:	01 c3                	add    %eax,%ebx
f011cc12:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cc19:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cc1e:	0f b6 c0             	movzbl %al,%eax
f011cc21:	c1 e0 04             	shl    $0x4,%eax
f011cc24:	89 c2                	mov    %eax,%edx
f011cc26:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cc29:	01 d0                	add    %edx,%eax
f011cc2b:	48                   	dec    %eax
f011cc2c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cc2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc32:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc37:	f7 75 ac             	divl   -0x54(%ebp)
f011cc3a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc3d:	29 d0                	sub    %edx,%eax
f011cc3f:	01 d8                	add    %ebx,%eax
f011cc41:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cc46:	39 c1                	cmp    %eax,%ecx
f011cc48:	74 17                	je     f011cc61 <test_kmalloc_firstfit1+0x346>
f011cc4a:	83 ec 04             	sub    $0x4,%esp
f011cc4d:	68 34 ba 13 f0       	push   $0xf013ba34
f011cc52:	68 f6 02 00 00       	push   $0x2f6
f011cc57:	68 1a b6 13 f0       	push   $0xf013b61a
f011cc5c:	e8 a4 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc61:	e8 62 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc69:	74 17                	je     f011cc82 <test_kmalloc_firstfit1+0x367>
f011cc6b:	83 ec 04             	sub    $0x4,%esp
f011cc6e:	68 34 b6 13 f0       	push   $0xf013b634
f011cc73:	68 f7 02 00 00       	push   $0x2f7
f011cc78:	68 1a b6 13 f0       	push   $0xf013b61a
f011cc7d:	e8 83 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc82:	e8 20 02 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011cc87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc8a:	29 c2                	sub    %eax,%edx
f011cc8c:	89 d0                	mov    %edx,%eax
f011cc8e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc93:	74 17                	je     f011ccac <test_kmalloc_firstfit1+0x391>
f011cc95:	83 ec 04             	sub    $0x4,%esp
f011cc98:	68 64 ba 13 f0       	push   $0xf013ba64
f011cc9d:	68 f8 02 00 00       	push   $0x2f8
f011cca2:	68 1a b6 13 f0       	push   $0xf013b61a
f011cca7:	e8 59 35 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccac:	e8 f6 01 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011ccb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccb4:	e8 0f 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011ccbc:	83 ec 0c             	sub    $0xc,%esp
f011ccbf:	68 00 fc 0f 00       	push   $0xffc00
f011ccc4:	e8 c6 ae fe ff       	call   f0107b8f <kmalloc>
f011ccc9:	83 c4 10             	add    $0x10,%esp
f011cccc:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011ccd2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ccd8:	89 c1                	mov    %eax,%ecx
f011ccda:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cce1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cce4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cce9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ccec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ccef:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccf4:	f7 75 a4             	divl   -0x5c(%ebp)
f011ccf7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ccfa:	29 d0                	sub    %edx,%eax
f011ccfc:	89 c3                	mov    %eax,%ebx
f011ccfe:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cd05:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cd0a:	0f b6 d0             	movzbl %al,%edx
f011cd0d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cd10:	01 d0                	add    %edx,%eax
f011cd12:	48                   	dec    %eax
f011cd13:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cd16:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd19:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd1e:	f7 75 9c             	divl   -0x64(%ebp)
f011cd21:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd24:	29 d0                	sub    %edx,%eax
f011cd26:	01 c3                	add    %eax,%ebx
f011cd28:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cd2f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cd34:	0f b6 c0             	movzbl %al,%eax
f011cd37:	c1 e0 04             	shl    $0x4,%eax
f011cd3a:	89 c2                	mov    %eax,%edx
f011cd3c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cd3f:	01 d0                	add    %edx,%eax
f011cd41:	48                   	dec    %eax
f011cd42:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cd45:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd48:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4d:	f7 75 94             	divl   -0x6c(%ebp)
f011cd50:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd53:	29 d0                	sub    %edx,%eax
f011cd55:	01 d8                	add    %ebx,%eax
f011cd57:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011cd5c:	39 c1                	cmp    %eax,%ecx
f011cd5e:	74 17                	je     f011cd77 <test_kmalloc_firstfit1+0x45c>
f011cd60:	83 ec 04             	sub    $0x4,%esp
f011cd63:	68 34 ba 13 f0       	push   $0xf013ba34
f011cd68:	68 fe 02 00 00       	push   $0x2fe
f011cd6d:	68 1a b6 13 f0       	push   $0xf013b61a
f011cd72:	e8 8e 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd77:	e8 4c 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd7c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd7f:	74 17                	je     f011cd98 <test_kmalloc_firstfit1+0x47d>
f011cd81:	83 ec 04             	sub    $0x4,%esp
f011cd84:	68 34 b6 13 f0       	push   $0xf013b634
f011cd89:	68 ff 02 00 00       	push   $0x2ff
f011cd8e:	68 1a b6 13 f0       	push   $0xf013b61a
f011cd93:	e8 6d 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd98:	e8 0a 01 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011cd9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cda0:	29 c2                	sub    %eax,%edx
f011cda2:	89 d0                	mov    %edx,%eax
f011cda4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cda9:	74 17                	je     f011cdc2 <test_kmalloc_firstfit1+0x4a7>
f011cdab:	83 ec 04             	sub    $0x4,%esp
f011cdae:	68 64 ba 13 f0       	push   $0xf013ba64
f011cdb3:	68 00 03 00 00       	push   $0x300
f011cdb8:	68 1a b6 13 f0       	push   $0xf013b61a
f011cdbd:	e8 43 34 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdc2:	e8 e0 00 ff ff       	call   f010cea7 <sys_calculate_free_frames>
f011cdc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdca:	e8 f9 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cdcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cdd2:	83 ec 0c             	sub    $0xc,%esp
f011cdd5:	68 00 fc 1f 00       	push   $0x1ffc00
f011cdda:	e8 b0 ad fe ff       	call   f0107b8f <kmalloc>
f011cddf:	83 c4 10             	add    $0x10,%esp
f011cde2:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cde8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cdee:	89 c1                	mov    %eax,%ecx
f011cdf0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cdf7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cdfa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdff:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ce02:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce05:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce0a:	f7 75 8c             	divl   -0x74(%ebp)
f011ce0d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce10:	29 d0                	sub    %edx,%eax
f011ce12:	89 c3                	mov    %eax,%ebx
f011ce14:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ce1b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ce20:	0f b6 d0             	movzbl %al,%edx
f011ce23:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ce26:	01 d0                	add    %edx,%eax
f011ce28:	48                   	dec    %eax
f011ce29:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ce2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce34:	f7 75 84             	divl   -0x7c(%ebp)
f011ce37:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce3a:	29 d0                	sub    %edx,%eax
f011ce3c:	01 c3                	add    %eax,%ebx
f011ce3e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ce45:	10 00 00 
f011ce48:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ce4d:	0f b6 c0             	movzbl %al,%eax
f011ce50:	c1 e0 04             	shl    $0x4,%eax
f011ce53:	89 c2                	mov    %eax,%edx
f011ce55:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ce5b:	01 d0                	add    %edx,%eax
f011ce5d:	48                   	dec    %eax
f011ce5e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ce64:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce6f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ce75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce7b:	29 d0                	sub    %edx,%eax
f011ce7d:	01 d8                	add    %ebx,%eax
f011ce7f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ce84:	39 c1                	cmp    %eax,%ecx
f011ce86:	74 17                	je     f011ce9f <test_kmalloc_firstfit1+0x584>
f011ce88:	83 ec 04             	sub    $0x4,%esp
f011ce8b:	68 34 ba 13 f0       	push   $0xf013ba34
f011ce90:	68 06 03 00 00       	push   $0x306
f011ce95:	68 1a b6 13 f0       	push   $0xf013b61a
f011ce9a:	e8 66 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce9f:	e8 24 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cea4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cea7:	74 17                	je     f011cec0 <test_kmalloc_firstfit1+0x5a5>
f011cea9:	83 ec 04             	sub    $0x4,%esp
f011ceac:	68 34 b6 13 f0       	push   $0xf013b634
f011ceb1:	68 07 03 00 00       	push   $0x307
f011ceb6:	68 1a b6 13 f0       	push   $0xf013b61a
f011cebb:	e8 45 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cec0:	e8 e2 ff fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011cec5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cec8:	29 c2                	sub    %eax,%edx
f011ceca:	89 d0                	mov    %edx,%eax
f011cecc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ced1:	74 17                	je     f011ceea <test_kmalloc_firstfit1+0x5cf>
f011ced3:	83 ec 04             	sub    $0x4,%esp
f011ced6:	68 64 ba 13 f0       	push   $0xf013ba64
f011cedb:	68 08 03 00 00       	push   $0x308
f011cee0:	68 1a b6 13 f0       	push   $0xf013b61a
f011cee5:	e8 1b 33 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ceea:	e8 b8 ff fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011ceef:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cef2:	e8 d1 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cef7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cefa:	83 ec 0c             	sub    $0xc,%esp
f011cefd:	68 00 fc 1f 00       	push   $0x1ffc00
f011cf02:	e8 88 ac fe ff       	call   f0107b8f <kmalloc>
f011cf07:	83 c4 10             	add    $0x10,%esp
f011cf0a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cf10:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011cf16:	89 c1                	mov    %eax,%ecx
f011cf18:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cf1f:	10 00 00 
f011cf22:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cf28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf2d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cf33:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cf39:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf3e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cf44:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cf4a:	29 d0                	sub    %edx,%eax
f011cf4c:	89 c3                	mov    %eax,%ebx
f011cf4e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cf55:	10 00 00 
f011cf58:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cf5d:	0f b6 d0             	movzbl %al,%edx
f011cf60:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cf66:	01 d0                	add    %edx,%eax
f011cf68:	48                   	dec    %eax
f011cf69:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cf6f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cf75:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf7a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cf80:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cf86:	29 d0                	sub    %edx,%eax
f011cf88:	01 c3                	add    %eax,%ebx
f011cf8a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cf91:	10 00 00 
f011cf94:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cf99:	0f b6 c0             	movzbl %al,%eax
f011cf9c:	c1 e0 04             	shl    $0x4,%eax
f011cf9f:	89 c2                	mov    %eax,%edx
f011cfa1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cfa7:	01 d0                	add    %edx,%eax
f011cfa9:	48                   	dec    %eax
f011cfaa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cfb0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cfb6:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfbb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cfc1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cfc7:	29 d0                	sub    %edx,%eax
f011cfc9:	01 d8                	add    %ebx,%eax
f011cfcb:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cfd0:	39 c1                	cmp    %eax,%ecx
f011cfd2:	74 17                	je     f011cfeb <test_kmalloc_firstfit1+0x6d0>
f011cfd4:	83 ec 04             	sub    $0x4,%esp
f011cfd7:	68 34 ba 13 f0       	push   $0xf013ba34
f011cfdc:	68 0e 03 00 00       	push   $0x30e
f011cfe1:	68 1a b6 13 f0       	push   $0xf013b61a
f011cfe6:	e8 1a 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfeb:	e8 d8 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cff0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cff3:	74 17                	je     f011d00c <test_kmalloc_firstfit1+0x6f1>
f011cff5:	83 ec 04             	sub    $0x4,%esp
f011cff8:	68 34 b6 13 f0       	push   $0xf013b634
f011cffd:	68 0f 03 00 00       	push   $0x30f
f011d002:	68 1a b6 13 f0       	push   $0xf013b61a
f011d007:	e8 f9 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d00c:	e8 96 fe fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d011:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d014:	29 c2                	sub    %eax,%edx
f011d016:	89 d0                	mov    %edx,%eax
f011d018:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d01d:	74 17                	je     f011d036 <test_kmalloc_firstfit1+0x71b>
f011d01f:	83 ec 04             	sub    $0x4,%esp
f011d022:	68 64 ba 13 f0       	push   $0xf013ba64
f011d027:	68 10 03 00 00       	push   $0x310
f011d02c:	68 1a b6 13 f0       	push   $0xf013b61a
f011d031:	e8 cf 31 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d036:	e8 6c fe fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d03b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d03e:	e8 85 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d043:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d046:	83 ec 0c             	sub    $0xc,%esp
f011d049:	68 00 fc 2f 00       	push   $0x2ffc00
f011d04e:	e8 3c ab fe ff       	call   f0107b8f <kmalloc>
f011d053:	83 c4 10             	add    $0x10,%esp
f011d056:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d05c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d062:	89 c1                	mov    %eax,%ecx
f011d064:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d06b:	10 00 00 
f011d06e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d074:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d079:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d07f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d085:	ba 00 00 00 00       	mov    $0x0,%edx
f011d08a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d090:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d096:	29 d0                	sub    %edx,%eax
f011d098:	89 c3                	mov    %eax,%ebx
f011d09a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d0a1:	10 00 00 
f011d0a4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d0a9:	0f b6 d0             	movzbl %al,%edx
f011d0ac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d0b2:	01 d0                	add    %edx,%eax
f011d0b4:	48                   	dec    %eax
f011d0b5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d0bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d0c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0c6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d0cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d0d2:	29 d0                	sub    %edx,%eax
f011d0d4:	01 c3                	add    %eax,%ebx
f011d0d6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d0dd:	10 00 00 
f011d0e0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d0e5:	0f b6 c0             	movzbl %al,%eax
f011d0e8:	c1 e0 04             	shl    $0x4,%eax
f011d0eb:	89 c2                	mov    %eax,%edx
f011d0ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d0f3:	01 d0                	add    %edx,%eax
f011d0f5:	48                   	dec    %eax
f011d0f6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d0fc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d102:	ba 00 00 00 00       	mov    $0x0,%edx
f011d107:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d10d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d113:	29 d0                	sub    %edx,%eax
f011d115:	01 d8                	add    %ebx,%eax
f011d117:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d11c:	39 c1                	cmp    %eax,%ecx
f011d11e:	74 17                	je     f011d137 <test_kmalloc_firstfit1+0x81c>
f011d120:	83 ec 04             	sub    $0x4,%esp
f011d123:	68 34 ba 13 f0       	push   $0xf013ba34
f011d128:	68 16 03 00 00       	push   $0x316
f011d12d:	68 1a b6 13 f0       	push   $0xf013b61a
f011d132:	e8 ce 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d137:	e8 8c 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d13c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d13f:	74 17                	je     f011d158 <test_kmalloc_firstfit1+0x83d>
f011d141:	83 ec 04             	sub    $0x4,%esp
f011d144:	68 34 b6 13 f0       	push   $0xf013b634
f011d149:	68 17 03 00 00       	push   $0x317
f011d14e:	68 1a b6 13 f0       	push   $0xf013b61a
f011d153:	e8 ad 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d158:	e8 4a fd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d15d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d160:	29 c2                	sub    %eax,%edx
f011d162:	89 d0                	mov    %edx,%eax
f011d164:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d169:	74 17                	je     f011d182 <test_kmalloc_firstfit1+0x867>
f011d16b:	83 ec 04             	sub    $0x4,%esp
f011d16e:	68 64 ba 13 f0       	push   $0xf013ba64
f011d173:	68 18 03 00 00       	push   $0x318
f011d178:	68 1a b6 13 f0       	push   $0xf013b61a
f011d17d:	e8 83 30 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d182:	e8 20 fd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d187:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d18a:	e8 39 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d18f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d192:	83 ec 0c             	sub    $0xc,%esp
f011d195:	68 00 fc 2f 00       	push   $0x2ffc00
f011d19a:	e8 f0 a9 fe ff       	call   f0107b8f <kmalloc>
f011d19f:	83 c4 10             	add    $0x10,%esp
f011d1a2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d1a8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d1ae:	89 c1                	mov    %eax,%ecx
f011d1b0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d1b7:	10 00 00 
f011d1ba:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d1c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1c5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d1cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d1d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1d6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d1dc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d1e2:	29 d0                	sub    %edx,%eax
f011d1e4:	89 c3                	mov    %eax,%ebx
f011d1e6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d1ed:	10 00 00 
f011d1f0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d1f5:	0f b6 d0             	movzbl %al,%edx
f011d1f8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d1fe:	01 d0                	add    %edx,%eax
f011d200:	48                   	dec    %eax
f011d201:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d207:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d20d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d212:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d218:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d21e:	29 d0                	sub    %edx,%eax
f011d220:	01 c3                	add    %eax,%ebx
f011d222:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d229:	10 00 00 
f011d22c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d231:	0f b6 c0             	movzbl %al,%eax
f011d234:	c1 e0 04             	shl    $0x4,%eax
f011d237:	89 c2                	mov    %eax,%edx
f011d239:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d23f:	01 d0                	add    %edx,%eax
f011d241:	48                   	dec    %eax
f011d242:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d248:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d24e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d253:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d259:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d25f:	29 d0                	sub    %edx,%eax
f011d261:	01 d8                	add    %ebx,%eax
f011d263:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d268:	39 c1                	cmp    %eax,%ecx
f011d26a:	74 17                	je     f011d283 <test_kmalloc_firstfit1+0x968>
f011d26c:	83 ec 04             	sub    $0x4,%esp
f011d26f:	68 34 ba 13 f0       	push   $0xf013ba34
f011d274:	68 1e 03 00 00       	push   $0x31e
f011d279:	68 1a b6 13 f0       	push   $0xf013b61a
f011d27e:	e8 82 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d283:	e8 40 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d288:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d28b:	74 17                	je     f011d2a4 <test_kmalloc_firstfit1+0x989>
f011d28d:	83 ec 04             	sub    $0x4,%esp
f011d290:	68 34 b6 13 f0       	push   $0xf013b634
f011d295:	68 1f 03 00 00       	push   $0x31f
f011d29a:	68 1a b6 13 f0       	push   $0xf013b61a
f011d29f:	e8 61 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d2a4:	e8 fe fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d2a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2ac:	29 c2                	sub    %eax,%edx
f011d2ae:	89 d0                	mov    %edx,%eax
f011d2b0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d2b5:	74 17                	je     f011d2ce <test_kmalloc_firstfit1+0x9b3>
f011d2b7:	83 ec 04             	sub    $0x4,%esp
f011d2ba:	68 64 ba 13 f0       	push   $0xf013ba64
f011d2bf:	68 20 03 00 00       	push   $0x320
f011d2c4:	68 1a b6 13 f0       	push   $0xf013b61a
f011d2c9:	e8 37 2f fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d2ce:	e8 d4 fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d2d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2d6:	e8 ed 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d2de:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d2e4:	83 ec 0c             	sub    $0xc,%esp
f011d2e7:	50                   	push   %eax
f011d2e8:	e8 6d a9 fe ff       	call   f0107c5a <kfree>
f011d2ed:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2f0:	e8 d3 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2f8:	74 17                	je     f011d311 <test_kmalloc_firstfit1+0x9f6>
f011d2fa:	83 ec 04             	sub    $0x4,%esp
f011d2fd:	68 34 b6 13 f0       	push   $0xf013b634
f011d302:	68 29 03 00 00       	push   $0x329
f011d307:	68 1a b6 13 f0       	push   $0xf013b61a
f011d30c:	e8 f4 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d311:	e8 91 fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d316:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d319:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d31e:	74 17                	je     f011d337 <test_kmalloc_firstfit1+0xa1c>
f011d320:	83 ec 04             	sub    $0x4,%esp
f011d323:	68 77 ba 13 f0       	push   $0xf013ba77
f011d328:	68 2a 03 00 00       	push   $0x32a
f011d32d:	68 1a b6 13 f0       	push   $0xf013b61a
f011d332:	e8 ce 2e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d337:	e8 6b fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d33c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d33f:	e8 84 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d344:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d347:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d34d:	83 ec 0c             	sub    $0xc,%esp
f011d350:	50                   	push   %eax
f011d351:	e8 04 a9 fe ff       	call   f0107c5a <kfree>
f011d356:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d359:	e8 6a 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d35e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d361:	74 17                	je     f011d37a <test_kmalloc_firstfit1+0xa5f>
f011d363:	83 ec 04             	sub    $0x4,%esp
f011d366:	68 34 b6 13 f0       	push   $0xf013b634
f011d36b:	68 30 03 00 00       	push   $0x330
f011d370:	68 1a b6 13 f0       	push   $0xf013b61a
f011d375:	e8 8b 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d37a:	e8 28 fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d37f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d382:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d387:	74 17                	je     f011d3a0 <test_kmalloc_firstfit1+0xa85>
f011d389:	83 ec 04             	sub    $0x4,%esp
f011d38c:	68 77 ba 13 f0       	push   $0xf013ba77
f011d391:	68 31 03 00 00       	push   $0x331
f011d396:	68 1a b6 13 f0       	push   $0xf013b61a
f011d39b:	e8 65 2e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d3a0:	e8 02 fb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d3a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3a8:	e8 1b 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d3b0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d3b6:	83 ec 0c             	sub    $0xc,%esp
f011d3b9:	50                   	push   %eax
f011d3ba:	e8 9b a8 fe ff       	call   f0107c5a <kfree>
f011d3bf:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3c2:	e8 01 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3ca:	74 17                	je     f011d3e3 <test_kmalloc_firstfit1+0xac8>
f011d3cc:	83 ec 04             	sub    $0x4,%esp
f011d3cf:	68 34 b6 13 f0       	push   $0xf013b634
f011d3d4:	68 37 03 00 00       	push   $0x337
f011d3d9:	68 1a b6 13 f0       	push   $0xf013b61a
f011d3de:	e8 22 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d3e3:	e8 bf fa fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d3e8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d3eb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d3f0:	74 17                	je     f011d409 <test_kmalloc_firstfit1+0xaee>
f011d3f2:	83 ec 04             	sub    $0x4,%esp
f011d3f5:	68 77 ba 13 f0       	push   $0xf013ba77
f011d3fa:	68 38 03 00 00       	push   $0x338
f011d3ff:	68 1a b6 13 f0       	push   $0xf013b61a
f011d404:	e8 fc 2d fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d409:	e8 99 fa fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d40e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d411:	e8 b2 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d416:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d419:	83 ec 0c             	sub    $0xc,%esp
f011d41c:	68 00 fc 07 00       	push   $0x7fc00
f011d421:	e8 69 a7 fe ff       	call   f0107b8f <kmalloc>
f011d426:	83 c4 10             	add    $0x10,%esp
f011d429:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d42f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d435:	89 c1                	mov    %eax,%ecx
f011d437:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d43e:	10 00 00 
f011d441:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d447:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d44c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d452:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d458:	ba 00 00 00 00       	mov    $0x0,%edx
f011d45d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d463:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d469:	29 d0                	sub    %edx,%eax
f011d46b:	89 c3                	mov    %eax,%ebx
f011d46d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d474:	10 00 00 
f011d477:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d47c:	0f b6 d0             	movzbl %al,%edx
f011d47f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d485:	01 d0                	add    %edx,%eax
f011d487:	48                   	dec    %eax
f011d488:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d48e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d494:	ba 00 00 00 00       	mov    $0x0,%edx
f011d499:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d49f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4a5:	29 d0                	sub    %edx,%eax
f011d4a7:	01 c3                	add    %eax,%ebx
f011d4a9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d4b0:	10 00 00 
f011d4b3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d4b8:	0f b6 c0             	movzbl %al,%eax
f011d4bb:	c1 e0 04             	shl    $0x4,%eax
f011d4be:	89 c2                	mov    %eax,%edx
f011d4c0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d4c6:	01 d0                	add    %edx,%eax
f011d4c8:	48                   	dec    %eax
f011d4c9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d4cf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d4d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4da:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d4e0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d4e6:	29 d0                	sub    %edx,%eax
f011d4e8:	01 d8                	add    %ebx,%eax
f011d4ea:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d4ef:	39 c1                	cmp    %eax,%ecx
f011d4f1:	74 17                	je     f011d50a <test_kmalloc_firstfit1+0xbef>
f011d4f3:	83 ec 04             	sub    $0x4,%esp
f011d4f6:	68 34 ba 13 f0       	push   $0xf013ba34
f011d4fb:	68 41 03 00 00       	push   $0x341
f011d500:	68 1a b6 13 f0       	push   $0xf013b61a
f011d505:	e8 fb 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d50a:	e8 b9 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d50f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d512:	74 17                	je     f011d52b <test_kmalloc_firstfit1+0xc10>
f011d514:	83 ec 04             	sub    $0x4,%esp
f011d517:	68 34 b6 13 f0       	push   $0xf013b634
f011d51c:	68 42 03 00 00       	push   $0x342
f011d521:	68 1a b6 13 f0       	push   $0xf013b61a
f011d526:	e8 da 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d52b:	e8 77 f9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d530:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d533:	29 c2                	sub    %eax,%edx
f011d535:	89 d0                	mov    %edx,%eax
f011d537:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d53c:	74 17                	je     f011d555 <test_kmalloc_firstfit1+0xc3a>
f011d53e:	83 ec 04             	sub    $0x4,%esp
f011d541:	68 64 ba 13 f0       	push   $0xf013ba64
f011d546:	68 43 03 00 00       	push   $0x343
f011d54b:	68 1a b6 13 f0       	push   $0xf013b61a
f011d550:	e8 b0 2c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d555:	e8 4d f9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d55a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d55d:	e8 66 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d562:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d565:	83 ec 0c             	sub    $0xc,%esp
f011d568:	68 00 fc 0f 00       	push   $0xffc00
f011d56d:	e8 1d a6 fe ff       	call   f0107b8f <kmalloc>
f011d572:	83 c4 10             	add    $0x10,%esp
f011d575:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d57b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d581:	89 c1                	mov    %eax,%ecx
f011d583:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d58a:	10 00 00 
f011d58d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d593:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d598:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d59e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d5a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5a9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d5af:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d5b5:	29 d0                	sub    %edx,%eax
f011d5b7:	89 c3                	mov    %eax,%ebx
f011d5b9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d5c0:	10 00 00 
f011d5c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d5c8:	0f b6 d0             	movzbl %al,%edx
f011d5cb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d5d1:	01 d0                	add    %edx,%eax
f011d5d3:	48                   	dec    %eax
f011d5d4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d5da:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d5e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5e5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d5eb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d5f1:	29 d0                	sub    %edx,%eax
f011d5f3:	01 c3                	add    %eax,%ebx
f011d5f5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d5fc:	10 00 00 
f011d5ff:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d604:	0f b6 c0             	movzbl %al,%eax
f011d607:	c1 e0 04             	shl    $0x4,%eax
f011d60a:	89 c2                	mov    %eax,%edx
f011d60c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d612:	01 d0                	add    %edx,%eax
f011d614:	48                   	dec    %eax
f011d615:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d61b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d621:	ba 00 00 00 00       	mov    $0x0,%edx
f011d626:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d62c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d632:	29 d0                	sub    %edx,%eax
f011d634:	01 d8                	add    %ebx,%eax
f011d636:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d63b:	39 c1                	cmp    %eax,%ecx
f011d63d:	74 17                	je     f011d656 <test_kmalloc_firstfit1+0xd3b>
f011d63f:	83 ec 04             	sub    $0x4,%esp
f011d642:	68 34 ba 13 f0       	push   $0xf013ba34
f011d647:	68 49 03 00 00       	push   $0x349
f011d64c:	68 1a b6 13 f0       	push   $0xf013b61a
f011d651:	e8 af 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d656:	e8 6d 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d65b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d65e:	74 17                	je     f011d677 <test_kmalloc_firstfit1+0xd5c>
f011d660:	83 ec 04             	sub    $0x4,%esp
f011d663:	68 34 b6 13 f0       	push   $0xf013b634
f011d668:	68 4a 03 00 00       	push   $0x34a
f011d66d:	68 1a b6 13 f0       	push   $0xf013b61a
f011d672:	e8 8e 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d677:	e8 2b f8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d67c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d67f:	29 c2                	sub    %eax,%edx
f011d681:	89 d0                	mov    %edx,%eax
f011d683:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d688:	74 17                	je     f011d6a1 <test_kmalloc_firstfit1+0xd86>
f011d68a:	83 ec 04             	sub    $0x4,%esp
f011d68d:	68 64 ba 13 f0       	push   $0xf013ba64
f011d692:	68 4b 03 00 00       	push   $0x34b
f011d697:	68 1a b6 13 f0       	push   $0xf013b61a
f011d69c:	e8 64 2b fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d6a1:	e8 01 f8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d6a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6a9:	e8 1a 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d6b1:	83 ec 0c             	sub    $0xc,%esp
f011d6b4:	68 00 fc 03 00       	push   $0x3fc00
f011d6b9:	e8 d1 a4 fe ff       	call   f0107b8f <kmalloc>
f011d6be:	83 c4 10             	add    $0x10,%esp
f011d6c1:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d6c7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d6cd:	89 c1                	mov    %eax,%ecx
f011d6cf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d6d6:	10 00 00 
f011d6d9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d6df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d6e4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d6ea:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d6f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6f5:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d6fb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d701:	29 d0                	sub    %edx,%eax
f011d703:	89 c3                	mov    %eax,%ebx
f011d705:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d70c:	10 00 00 
f011d70f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d714:	0f b6 d0             	movzbl %al,%edx
f011d717:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d71d:	01 d0                	add    %edx,%eax
f011d71f:	48                   	dec    %eax
f011d720:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d726:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d72c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d731:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d737:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d73d:	29 d0                	sub    %edx,%eax
f011d73f:	01 c3                	add    %eax,%ebx
f011d741:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d748:	10 00 00 
f011d74b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d750:	0f b6 c0             	movzbl %al,%eax
f011d753:	c1 e0 04             	shl    $0x4,%eax
f011d756:	89 c2                	mov    %eax,%edx
f011d758:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d75e:	01 d0                	add    %edx,%eax
f011d760:	48                   	dec    %eax
f011d761:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d767:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d76d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d772:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d778:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d77e:	29 d0                	sub    %edx,%eax
f011d780:	01 d8                	add    %ebx,%eax
f011d782:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d787:	39 c1                	cmp    %eax,%ecx
f011d789:	74 17                	je     f011d7a2 <test_kmalloc_firstfit1+0xe87>
f011d78b:	83 ec 04             	sub    $0x4,%esp
f011d78e:	68 34 ba 13 f0       	push   $0xf013ba34
f011d793:	68 52 03 00 00       	push   $0x352
f011d798:	68 1a b6 13 f0       	push   $0xf013b61a
f011d79d:	e8 63 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7a2:	e8 21 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7aa:	74 17                	je     f011d7c3 <test_kmalloc_firstfit1+0xea8>
f011d7ac:	83 ec 04             	sub    $0x4,%esp
f011d7af:	68 34 b6 13 f0       	push   $0xf013b634
f011d7b4:	68 53 03 00 00       	push   $0x353
f011d7b9:	68 1a b6 13 f0       	push   $0xf013b61a
f011d7be:	e8 42 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d7c3:	e8 df f6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d7c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d7cb:	29 c2                	sub    %eax,%edx
f011d7cd:	89 d0                	mov    %edx,%eax
f011d7cf:	83 f8 40             	cmp    $0x40,%eax
f011d7d2:	74 17                	je     f011d7eb <test_kmalloc_firstfit1+0xed0>
f011d7d4:	83 ec 04             	sub    $0x4,%esp
f011d7d7:	68 64 ba 13 f0       	push   $0xf013ba64
f011d7dc:	68 54 03 00 00       	push   $0x354
f011d7e1:	68 1a b6 13 f0       	push   $0xf013b61a
f011d7e6:	e8 1a 2a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d7eb:	e8 b7 f6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d7f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7f3:	e8 d0 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d7fb:	83 ec 0c             	sub    $0xc,%esp
f011d7fe:	68 00 00 20 00       	push   $0x200000
f011d803:	e8 87 a3 fe ff       	call   f0107b8f <kmalloc>
f011d808:	83 c4 10             	add    $0x10,%esp
f011d80b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d811:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d817:	89 c1                	mov    %eax,%ecx
f011d819:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d820:	10 00 00 
f011d823:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d829:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d82e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d834:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d83a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d83f:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d845:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d84b:	29 d0                	sub    %edx,%eax
f011d84d:	89 c3                	mov    %eax,%ebx
f011d84f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d856:	10 00 00 
f011d859:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d85e:	0f b6 d0             	movzbl %al,%edx
f011d861:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d867:	01 d0                	add    %edx,%eax
f011d869:	48                   	dec    %eax
f011d86a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d870:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d876:	ba 00 00 00 00       	mov    $0x0,%edx
f011d87b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d881:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d887:	29 d0                	sub    %edx,%eax
f011d889:	01 c3                	add    %eax,%ebx
f011d88b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d892:	10 00 00 
f011d895:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d89a:	0f b6 c0             	movzbl %al,%eax
f011d89d:	c1 e0 04             	shl    $0x4,%eax
f011d8a0:	89 c2                	mov    %eax,%edx
f011d8a2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d8a8:	01 d0                	add    %edx,%eax
f011d8aa:	48                   	dec    %eax
f011d8ab:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d8b1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d8b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8bc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d8c2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d8c8:	29 d0                	sub    %edx,%eax
f011d8ca:	01 d8                	add    %ebx,%eax
f011d8cc:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d8d1:	39 c1                	cmp    %eax,%ecx
f011d8d3:	74 17                	je     f011d8ec <test_kmalloc_firstfit1+0xfd1>
f011d8d5:	83 ec 04             	sub    $0x4,%esp
f011d8d8:	68 34 ba 13 f0       	push   $0xf013ba34
f011d8dd:	68 5a 03 00 00       	push   $0x35a
f011d8e2:	68 1a b6 13 f0       	push   $0xf013b61a
f011d8e7:	e8 19 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d8ec:	e8 b6 f5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d8f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d8f4:	29 c2                	sub    %eax,%edx
f011d8f6:	89 d0                	mov    %edx,%eax
f011d8f8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d8fd:	74 17                	je     f011d916 <test_kmalloc_firstfit1+0xffb>
f011d8ff:	83 ec 04             	sub    $0x4,%esp
f011d902:	68 64 ba 13 f0       	push   $0xf013ba64
f011d907:	68 5b 03 00 00       	push   $0x35b
f011d90c:	68 1a b6 13 f0       	push   $0xf013b61a
f011d911:	e8 ef 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d916:	e8 ad 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d91b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d91e:	74 17                	je     f011d937 <test_kmalloc_firstfit1+0x101c>
f011d920:	83 ec 04             	sub    $0x4,%esp
f011d923:	68 34 b6 13 f0       	push   $0xf013b634
f011d928:	68 5c 03 00 00       	push   $0x35c
f011d92d:	68 1a b6 13 f0       	push   $0xf013b61a
f011d932:	e8 ce 28 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d937:	e8 6b f5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011d93c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d93f:	e8 84 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d944:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d947:	83 ec 0c             	sub    $0xc,%esp
f011d94a:	68 00 fc 3f 00       	push   $0x3ffc00
f011d94f:	e8 3b a2 fe ff       	call   f0107b8f <kmalloc>
f011d954:	83 c4 10             	add    $0x10,%esp
f011d957:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d95d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d963:	89 c1                	mov    %eax,%ecx
f011d965:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d96c:	10 00 00 
f011d96f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d975:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d97a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d980:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d986:	ba 00 00 00 00       	mov    $0x0,%edx
f011d98b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d991:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d997:	29 d0                	sub    %edx,%eax
f011d999:	89 c3                	mov    %eax,%ebx
f011d99b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d9a2:	10 00 00 
f011d9a5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d9aa:	0f b6 d0             	movzbl %al,%edx
f011d9ad:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d9b3:	01 d0                	add    %edx,%eax
f011d9b5:	48                   	dec    %eax
f011d9b6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d9bc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d9c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d9cd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d9d3:	29 d0                	sub    %edx,%eax
f011d9d5:	01 c3                	add    %eax,%ebx
f011d9d7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d9de:	10 00 00 
f011d9e1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d9e6:	0f b6 c0             	movzbl %al,%eax
f011d9e9:	c1 e0 04             	shl    $0x4,%eax
f011d9ec:	89 c2                	mov    %eax,%edx
f011d9ee:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d9f4:	01 d0                	add    %edx,%eax
f011d9f6:	48                   	dec    %eax
f011d9f7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d9fd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da03:	ba 00 00 00 00       	mov    $0x0,%edx
f011da08:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011da0e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da14:	29 d0                	sub    %edx,%eax
f011da16:	01 d8                	add    %ebx,%eax
f011da18:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011da1d:	39 c1                	cmp    %eax,%ecx
f011da1f:	74 17                	je     f011da38 <test_kmalloc_firstfit1+0x111d>
f011da21:	83 ec 04             	sub    $0x4,%esp
f011da24:	68 34 ba 13 f0       	push   $0xf013ba34
f011da29:	68 63 03 00 00       	push   $0x363
f011da2e:	68 1a b6 13 f0       	push   $0xf013b61a
f011da33:	e8 cd 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da38:	e8 8b 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da40:	74 17                	je     f011da59 <test_kmalloc_firstfit1+0x113e>
f011da42:	83 ec 04             	sub    $0x4,%esp
f011da45:	68 34 b6 13 f0       	push   $0xf013b634
f011da4a:	68 64 03 00 00       	push   $0x364
f011da4f:	68 1a b6 13 f0       	push   $0xf013b61a
f011da54:	e8 ac 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011da59:	e8 49 f4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011da5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011da61:	29 c2                	sub    %eax,%edx
f011da63:	89 d0                	mov    %edx,%eax
f011da65:	3d 00 04 00 00       	cmp    $0x400,%eax
f011da6a:	74 17                	je     f011da83 <test_kmalloc_firstfit1+0x1168>
f011da6c:	83 ec 04             	sub    $0x4,%esp
f011da6f:	68 64 ba 13 f0       	push   $0xf013ba64
f011da74:	68 65 03 00 00       	push   $0x365
f011da79:	68 1a b6 13 f0       	push   $0xf013b61a
f011da7e:	e8 82 27 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011da83:	e8 1f f4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011da88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da8b:	e8 38 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011da93:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011da99:	83 ec 0c             	sub    $0xc,%esp
f011da9c:	50                   	push   %eax
f011da9d:	e8 b8 a1 fe ff       	call   f0107c5a <kfree>
f011daa2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daa5:	e8 1e 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011daaa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011daad:	74 17                	je     f011dac6 <test_kmalloc_firstfit1+0x11ab>
f011daaf:	83 ec 04             	sub    $0x4,%esp
f011dab2:	68 34 b6 13 f0       	push   $0xf013b634
f011dab7:	68 6e 03 00 00       	push   $0x36e
f011dabc:	68 1a b6 13 f0       	push   $0xf013b61a
f011dac1:	e8 3f 27 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dac6:	e8 dc f3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011dacb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dace:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dad3:	74 17                	je     f011daec <test_kmalloc_firstfit1+0x11d1>
f011dad5:	83 ec 04             	sub    $0x4,%esp
f011dad8:	68 77 ba 13 f0       	push   $0xf013ba77
f011dadd:	68 6f 03 00 00       	push   $0x36f
f011dae2:	68 1a b6 13 f0       	push   $0xf013b61a
f011dae7:	e8 19 27 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011daec:	e8 b6 f3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011daf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daf4:	e8 cf 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011daf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011dafc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011db02:	83 ec 0c             	sub    $0xc,%esp
f011db05:	50                   	push   %eax
f011db06:	e8 4f a1 fe ff       	call   f0107c5a <kfree>
f011db0b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db0e:	e8 b5 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db13:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db16:	74 17                	je     f011db2f <test_kmalloc_firstfit1+0x1214>
f011db18:	83 ec 04             	sub    $0x4,%esp
f011db1b:	68 34 b6 13 f0       	push   $0xf013b634
f011db20:	68 75 03 00 00       	push   $0x375
f011db25:	68 1a b6 13 f0       	push   $0xf013b61a
f011db2a:	e8 d6 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011db2f:	e8 73 f3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011db34:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011db37:	3d 00 01 00 00       	cmp    $0x100,%eax
f011db3c:	74 17                	je     f011db55 <test_kmalloc_firstfit1+0x123a>
f011db3e:	83 ec 04             	sub    $0x4,%esp
f011db41:	68 77 ba 13 f0       	push   $0xf013ba77
f011db46:	68 76 03 00 00       	push   $0x376
f011db4b:	68 1a b6 13 f0       	push   $0xf013b61a
f011db50:	e8 b0 26 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011db55:	e8 4d f3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011db5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db5d:	e8 66 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db62:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011db65:	83 ec 0c             	sub    $0xc,%esp
f011db68:	68 00 00 10 00       	push   $0x100000
f011db6d:	e8 1d a0 fe ff       	call   f0107b8f <kmalloc>
f011db72:	83 c4 10             	add    $0x10,%esp
f011db75:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011db7b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011db81:	89 c1                	mov    %eax,%ecx
f011db83:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011db8a:	10 00 00 
f011db8d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011db93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db98:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011db9e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dba4:	ba 00 00 00 00       	mov    $0x0,%edx
f011dba9:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dbaf:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dbb5:	29 d0                	sub    %edx,%eax
f011dbb7:	89 c3                	mov    %eax,%ebx
f011dbb9:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011dbc0:	10 00 00 
f011dbc3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dbc8:	0f b6 d0             	movzbl %al,%edx
f011dbcb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dbd1:	01 d0                	add    %edx,%eax
f011dbd3:	48                   	dec    %eax
f011dbd4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011dbda:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dbe0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbe5:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011dbeb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dbf1:	29 d0                	sub    %edx,%eax
f011dbf3:	01 c3                	add    %eax,%ebx
f011dbf5:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011dbfc:	10 00 00 
f011dbff:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dc04:	0f b6 c0             	movzbl %al,%eax
f011dc07:	c1 e0 04             	shl    $0x4,%eax
f011dc0a:	89 c2                	mov    %eax,%edx
f011dc0c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dc12:	01 d0                	add    %edx,%eax
f011dc14:	48                   	dec    %eax
f011dc15:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011dc1b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc21:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc26:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011dc2c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc32:	29 d0                	sub    %edx,%eax
f011dc34:	01 d8                	add    %ebx,%eax
f011dc36:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011dc3b:	39 c1                	cmp    %eax,%ecx
f011dc3d:	74 17                	je     f011dc56 <test_kmalloc_firstfit1+0x133b>
f011dc3f:	83 ec 04             	sub    $0x4,%esp
f011dc42:	68 34 ba 13 f0       	push   $0xf013ba34
f011dc47:	68 80 03 00 00       	push   $0x380
f011dc4c:	68 1a b6 13 f0       	push   $0xf013b61a
f011dc51:	e8 af 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc56:	e8 6d 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc5e:	74 17                	je     f011dc77 <test_kmalloc_firstfit1+0x135c>
f011dc60:	83 ec 04             	sub    $0x4,%esp
f011dc63:	68 34 b6 13 f0       	push   $0xf013b634
f011dc68:	68 81 03 00 00       	push   $0x381
f011dc6d:	68 1a b6 13 f0       	push   $0xf013b61a
f011dc72:	e8 8e 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dc77:	e8 2b f2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011dc7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc7f:	29 c2                	sub    %eax,%edx
f011dc81:	89 d0                	mov    %edx,%eax
f011dc83:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dc88:	74 17                	je     f011dca1 <test_kmalloc_firstfit1+0x1386>
f011dc8a:	83 ec 04             	sub    $0x4,%esp
f011dc8d:	68 64 ba 13 f0       	push   $0xf013ba64
f011dc92:	68 82 03 00 00       	push   $0x382
f011dc97:	68 1a b6 13 f0       	push   $0xf013b61a
f011dc9c:	e8 64 25 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011dca1:	83 ec 0c             	sub    $0xc,%esp
f011dca4:	68 10 bc 13 f0       	push   $0xf013bc10
f011dca9:	e8 60 30 fe ff       	call   f0100d0e <cprintf>
f011dcae:	83 c4 10             	add    $0x10,%esp

	return 1;
f011dcb1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dcb6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dcb9:	5b                   	pop    %ebx
f011dcba:	5f                   	pop    %edi
f011dcbb:	5d                   	pop    %ebp
f011dcbc:	c3                   	ret    

f011dcbd <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dcbd:	55                   	push   %ebp
f011dcbe:	89 e5                	mov    %esp,%ebp
f011dcc0:	57                   	push   %edi
f011dcc1:	53                   	push   %ebx
f011dcc2:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011dcc8:	83 ec 0c             	sub    $0xc,%esp
f011dccb:	68 5c b5 13 f0       	push   $0xf013b55c
f011dcd0:	e8 39 30 fe ff       	call   f0100d0e <cprintf>
f011dcd5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dcd8:	83 ec 0c             	sub    $0xc,%esp
f011dcdb:	68 8c b5 13 f0       	push   $0xf013b58c
f011dce0:	e8 29 30 fe ff       	call   f0100d0e <cprintf>
f011dce5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dce8:	83 ec 0c             	sub    $0xc,%esp
f011dceb:	68 5c b5 13 f0       	push   $0xf013b55c
f011dcf0:	e8 19 30 fe ff       	call   f0100d0e <cprintf>
f011dcf5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011dcf8:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011dcfe:	b9 14 00 00 00       	mov    $0x14,%ecx
f011dd03:	b8 00 00 00 00       	mov    $0x0,%eax
f011dd08:	89 d7                	mov    %edx,%edi
f011dd0a:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011dd0c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011dd13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011dd1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd21:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd26:	f7 75 f4             	divl   -0xc(%ebp)
f011dd29:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd2c:	29 d0                	sub    %edx,%eax
f011dd2e:	89 c1                	mov    %eax,%ecx
f011dd30:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011dd37:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dd3c:	0f b6 d0             	movzbl %al,%edx
f011dd3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011dd42:	01 d0                	add    %edx,%eax
f011dd44:	48                   	dec    %eax
f011dd45:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dd48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd50:	f7 75 ec             	divl   -0x14(%ebp)
f011dd53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd56:	29 d0                	sub    %edx,%eax
f011dd58:	01 c1                	add    %eax,%ecx
f011dd5a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dd61:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dd66:	0f b6 c0             	movzbl %al,%eax
f011dd69:	c1 e0 04             	shl    $0x4,%eax
f011dd6c:	89 c2                	mov    %eax,%edx
f011dd6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dd71:	01 d0                	add    %edx,%eax
f011dd73:	48                   	dec    %eax
f011dd74:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dd77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd7a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd7f:	f7 75 e4             	divl   -0x1c(%ebp)
f011dd82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd85:	29 d0                	sub    %edx,%eax
f011dd87:	01 c8                	add    %ecx,%eax
f011dd89:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011dd8e:	29 c2                	sub    %eax,%edx
f011dd90:	89 d0                	mov    %edx,%eax
f011dd92:	83 ec 0c             	sub    $0xc,%esp
f011dd95:	50                   	push   %eax
f011dd96:	e8 f4 9d fe ff       	call   f0107b8f <kmalloc>
f011dd9b:	83 c4 10             	add    $0x10,%esp
f011dd9e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011dda4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ddaa:	85 c0                	test   %eax,%eax
f011ddac:	74 17                	je     f011ddc5 <test_kmalloc_firstfit2+0x108>
f011ddae:	83 ec 04             	sub    $0x4,%esp
f011ddb1:	68 5c bc 13 f0       	push   $0xf013bc5c
f011ddb6:	68 97 03 00 00       	push   $0x397
f011ddbb:	68 1a b6 13 f0       	push   $0xf013b61a
f011ddc0:	e8 40 24 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddc5:	e8 dd f0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011ddca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddcd:	e8 f6 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ddd5:	83 ec 0c             	sub    $0xc,%esp
f011ddd8:	68 00 fc 1f 00       	push   $0x1ffc00
f011dddd:	e8 ad 9d fe ff       	call   f0107b8f <kmalloc>
f011dde2:	83 c4 10             	add    $0x10,%esp
f011dde5:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ddeb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ddf1:	89 c1                	mov    %eax,%ecx
f011ddf3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ddfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ddfd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de02:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011de05:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de08:	ba 00 00 00 00       	mov    $0x0,%edx
f011de0d:	f7 75 d4             	divl   -0x2c(%ebp)
f011de10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de13:	29 d0                	sub    %edx,%eax
f011de15:	89 c3                	mov    %eax,%ebx
f011de17:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011de1e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011de23:	0f b6 d0             	movzbl %al,%edx
f011de26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011de29:	01 d0                	add    %edx,%eax
f011de2b:	48                   	dec    %eax
f011de2c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011de2f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011de32:	ba 00 00 00 00       	mov    $0x0,%edx
f011de37:	f7 75 cc             	divl   -0x34(%ebp)
f011de3a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011de3d:	29 d0                	sub    %edx,%eax
f011de3f:	01 c3                	add    %eax,%ebx
f011de41:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011de48:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011de4d:	0f b6 c0             	movzbl %al,%eax
f011de50:	c1 e0 04             	shl    $0x4,%eax
f011de53:	89 c2                	mov    %eax,%edx
f011de55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011de58:	01 d0                	add    %edx,%eax
f011de5a:	48                   	dec    %eax
f011de5b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011de5e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011de61:	ba 00 00 00 00       	mov    $0x0,%edx
f011de66:	f7 75 c4             	divl   -0x3c(%ebp)
f011de69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011de6c:	29 d0                	sub    %edx,%eax
f011de6e:	01 d8                	add    %ebx,%eax
f011de70:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011de75:	39 c1                	cmp    %eax,%ecx
f011de77:	74 17                	je     f011de90 <test_kmalloc_firstfit2+0x1d3>
f011de79:	83 ec 04             	sub    $0x4,%esp
f011de7c:	68 34 ba 13 f0       	push   $0xf013ba34
f011de81:	68 a1 03 00 00       	push   $0x3a1
f011de86:	68 1a b6 13 f0       	push   $0xf013b61a
f011de8b:	e8 75 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de90:	e8 33 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de95:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de98:	74 17                	je     f011deb1 <test_kmalloc_firstfit2+0x1f4>
f011de9a:	83 ec 04             	sub    $0x4,%esp
f011de9d:	68 34 b6 13 f0       	push   $0xf013b634
f011dea2:	68 a2 03 00 00       	push   $0x3a2
f011dea7:	68 1a b6 13 f0       	push   $0xf013b61a
f011deac:	e8 54 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011deb1:	e8 f1 ef fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011deb6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011deb9:	29 c2                	sub    %eax,%edx
f011debb:	89 d0                	mov    %edx,%eax
f011debd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dec2:	74 17                	je     f011dedb <test_kmalloc_firstfit2+0x21e>
f011dec4:	83 ec 04             	sub    $0x4,%esp
f011dec7:	68 64 ba 13 f0       	push   $0xf013ba64
f011decc:	68 a3 03 00 00       	push   $0x3a3
f011ded1:	68 1a b6 13 f0       	push   $0xf013b61a
f011ded6:	e8 2a 23 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dedb:	e8 c7 ef fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011dee0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dee3:	e8 e0 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dee8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011deeb:	83 ec 0c             	sub    $0xc,%esp
f011deee:	68 00 fc 1f 00       	push   $0x1ffc00
f011def3:	e8 97 9c fe ff       	call   f0107b8f <kmalloc>
f011def8:	83 c4 10             	add    $0x10,%esp
f011defb:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011df01:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011df07:	89 c1                	mov    %eax,%ecx
f011df09:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011df10:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011df13:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df18:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011df1b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011df23:	f7 75 bc             	divl   -0x44(%ebp)
f011df26:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df29:	29 d0                	sub    %edx,%eax
f011df2b:	89 c3                	mov    %eax,%ebx
f011df2d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011df34:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011df39:	0f b6 d0             	movzbl %al,%edx
f011df3c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011df3f:	01 d0                	add    %edx,%eax
f011df41:	48                   	dec    %eax
f011df42:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011df45:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011df48:	ba 00 00 00 00       	mov    $0x0,%edx
f011df4d:	f7 75 b4             	divl   -0x4c(%ebp)
f011df50:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011df53:	29 d0                	sub    %edx,%eax
f011df55:	01 c3                	add    %eax,%ebx
f011df57:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011df5e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011df63:	0f b6 c0             	movzbl %al,%eax
f011df66:	c1 e0 04             	shl    $0x4,%eax
f011df69:	89 c2                	mov    %eax,%edx
f011df6b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011df6e:	01 d0                	add    %edx,%eax
f011df70:	48                   	dec    %eax
f011df71:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011df74:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df77:	ba 00 00 00 00       	mov    $0x0,%edx
f011df7c:	f7 75 ac             	divl   -0x54(%ebp)
f011df7f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df82:	29 d0                	sub    %edx,%eax
f011df84:	01 d8                	add    %ebx,%eax
f011df86:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011df8b:	39 c1                	cmp    %eax,%ecx
f011df8d:	74 17                	je     f011dfa6 <test_kmalloc_firstfit2+0x2e9>
f011df8f:	83 ec 04             	sub    $0x4,%esp
f011df92:	68 34 ba 13 f0       	push   $0xf013ba34
f011df97:	68 a9 03 00 00       	push   $0x3a9
f011df9c:	68 1a b6 13 f0       	push   $0xf013b61a
f011dfa1:	e8 5f 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfa6:	e8 1d 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfae:	74 17                	je     f011dfc7 <test_kmalloc_firstfit2+0x30a>
f011dfb0:	83 ec 04             	sub    $0x4,%esp
f011dfb3:	68 34 b6 13 f0       	push   $0xf013b634
f011dfb8:	68 aa 03 00 00       	push   $0x3aa
f011dfbd:	68 1a b6 13 f0       	push   $0xf013b61a
f011dfc2:	e8 3e 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dfc7:	e8 db ee fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011dfcc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfcf:	29 c2                	sub    %eax,%edx
f011dfd1:	89 d0                	mov    %edx,%eax
f011dfd3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dfd8:	74 17                	je     f011dff1 <test_kmalloc_firstfit2+0x334>
f011dfda:	83 ec 04             	sub    $0x4,%esp
f011dfdd:	68 64 ba 13 f0       	push   $0xf013ba64
f011dfe2:	68 ab 03 00 00       	push   $0x3ab
f011dfe7:	68 1a b6 13 f0       	push   $0xf013b61a
f011dfec:	e8 14 22 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dff1:	e8 b1 ee fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011dff6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dff9:	e8 ca 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dffe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e001:	83 ec 0c             	sub    $0xc,%esp
f011e004:	68 00 08 00 00       	push   $0x800
f011e009:	e8 81 9b fe ff       	call   f0107b8f <kmalloc>
f011e00e:	83 c4 10             	add    $0x10,%esp
f011e011:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e017:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e01d:	89 c1                	mov    %eax,%ecx
f011e01f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e026:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e029:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e02e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e031:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e034:	ba 00 00 00 00       	mov    $0x0,%edx
f011e039:	f7 75 a4             	divl   -0x5c(%ebp)
f011e03c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e03f:	29 d0                	sub    %edx,%eax
f011e041:	89 c3                	mov    %eax,%ebx
f011e043:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e04a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e04f:	0f b6 d0             	movzbl %al,%edx
f011e052:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e055:	01 d0                	add    %edx,%eax
f011e057:	48                   	dec    %eax
f011e058:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e05b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e05e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e063:	f7 75 9c             	divl   -0x64(%ebp)
f011e066:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e069:	29 d0                	sub    %edx,%eax
f011e06b:	01 c3                	add    %eax,%ebx
f011e06d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e074:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e079:	0f b6 c0             	movzbl %al,%eax
f011e07c:	c1 e0 04             	shl    $0x4,%eax
f011e07f:	89 c2                	mov    %eax,%edx
f011e081:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e084:	01 d0                	add    %edx,%eax
f011e086:	48                   	dec    %eax
f011e087:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e08a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e08d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e092:	f7 75 94             	divl   -0x6c(%ebp)
f011e095:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e098:	29 d0                	sub    %edx,%eax
f011e09a:	01 d8                	add    %ebx,%eax
f011e09c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e0a1:	39 c1                	cmp    %eax,%ecx
f011e0a3:	73 17                	jae    f011e0bc <test_kmalloc_firstfit2+0x3ff>
f011e0a5:	83 ec 04             	sub    $0x4,%esp
f011e0a8:	68 34 ba 13 f0       	push   $0xf013ba34
f011e0ad:	68 b1 03 00 00       	push   $0x3b1
f011e0b2:	68 1a b6 13 f0       	push   $0xf013b61a
f011e0b7:	e8 49 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0bc:	e8 07 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0c4:	74 17                	je     f011e0dd <test_kmalloc_firstfit2+0x420>
f011e0c6:	83 ec 04             	sub    $0x4,%esp
f011e0c9:	68 34 b6 13 f0       	push   $0xf013b634
f011e0ce:	68 b2 03 00 00       	push   $0x3b2
f011e0d3:	68 1a b6 13 f0       	push   $0xf013b61a
f011e0d8:	e8 28 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e0dd:	e8 c5 ed fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e0e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0e5:	29 c2                	sub    %eax,%edx
f011e0e7:	89 d0                	mov    %edx,%eax
f011e0e9:	83 f8 01             	cmp    $0x1,%eax
f011e0ec:	74 17                	je     f011e105 <test_kmalloc_firstfit2+0x448>
f011e0ee:	83 ec 04             	sub    $0x4,%esp
f011e0f1:	68 64 ba 13 f0       	push   $0xf013ba64
f011e0f6:	68 b3 03 00 00       	push   $0x3b3
f011e0fb:	68 1a b6 13 f0       	push   $0xf013b61a
f011e100:	e8 00 21 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e105:	e8 9d ed fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e10a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e10d:	e8 b6 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e112:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e115:	83 ec 0c             	sub    $0xc,%esp
f011e118:	68 00 08 00 00       	push   $0x800
f011e11d:	e8 6d 9a fe ff       	call   f0107b8f <kmalloc>
f011e122:	83 c4 10             	add    $0x10,%esp
f011e125:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e12b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e131:	89 c1                	mov    %eax,%ecx
f011e133:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e13a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e13d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e142:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e145:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e148:	ba 00 00 00 00       	mov    $0x0,%edx
f011e14d:	f7 75 8c             	divl   -0x74(%ebp)
f011e150:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e153:	29 d0                	sub    %edx,%eax
f011e155:	89 c3                	mov    %eax,%ebx
f011e157:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e15e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e163:	0f b6 d0             	movzbl %al,%edx
f011e166:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e169:	01 d0                	add    %edx,%eax
f011e16b:	48                   	dec    %eax
f011e16c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e16f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e172:	ba 00 00 00 00       	mov    $0x0,%edx
f011e177:	f7 75 84             	divl   -0x7c(%ebp)
f011e17a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e17d:	29 d0                	sub    %edx,%eax
f011e17f:	01 c3                	add    %eax,%ebx
f011e181:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e188:	10 00 00 
f011e18b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e190:	0f b6 c0             	movzbl %al,%eax
f011e193:	c1 e0 04             	shl    $0x4,%eax
f011e196:	89 c2                	mov    %eax,%edx
f011e198:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e19e:	01 d0                	add    %edx,%eax
f011e1a0:	48                   	dec    %eax
f011e1a1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e1a7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1b2:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e1b8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e1be:	29 d0                	sub    %edx,%eax
f011e1c0:	01 d8                	add    %ebx,%eax
f011e1c2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e1c7:	39 c1                	cmp    %eax,%ecx
f011e1c9:	74 17                	je     f011e1e2 <test_kmalloc_firstfit2+0x525>
f011e1cb:	83 ec 04             	sub    $0x4,%esp
f011e1ce:	68 34 ba 13 f0       	push   $0xf013ba34
f011e1d3:	68 b9 03 00 00       	push   $0x3b9
f011e1d8:	68 1a b6 13 f0       	push   $0xf013b61a
f011e1dd:	e8 23 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1e2:	e8 e1 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1ea:	74 17                	je     f011e203 <test_kmalloc_firstfit2+0x546>
f011e1ec:	83 ec 04             	sub    $0x4,%esp
f011e1ef:	68 34 b6 13 f0       	push   $0xf013b634
f011e1f4:	68 ba 03 00 00       	push   $0x3ba
f011e1f9:	68 1a b6 13 f0       	push   $0xf013b61a
f011e1fe:	e8 02 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e203:	e8 9f ec fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e208:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e20b:	29 c2                	sub    %eax,%edx
f011e20d:	89 d0                	mov    %edx,%eax
f011e20f:	83 f8 01             	cmp    $0x1,%eax
f011e212:	74 17                	je     f011e22b <test_kmalloc_firstfit2+0x56e>
f011e214:	83 ec 04             	sub    $0x4,%esp
f011e217:	68 64 ba 13 f0       	push   $0xf013ba64
f011e21c:	68 bb 03 00 00       	push   $0x3bb
f011e221:	68 1a b6 13 f0       	push   $0xf013b61a
f011e226:	e8 da 1f fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e22b:	e8 77 ec fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e230:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e233:	e8 90 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e238:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e23b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e241:	83 ec 0c             	sub    $0xc,%esp
f011e244:	50                   	push   %eax
f011e245:	e8 10 9a fe ff       	call   f0107c5a <kfree>
f011e24a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e24d:	e8 76 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e252:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e255:	74 17                	je     f011e26e <test_kmalloc_firstfit2+0x5b1>
f011e257:	83 ec 04             	sub    $0x4,%esp
f011e25a:	68 34 b6 13 f0       	push   $0xf013b634
f011e25f:	68 c1 03 00 00       	push   $0x3c1
f011e264:	68 1a b6 13 f0       	push   $0xf013b61a
f011e269:	e8 97 1f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e26e:	e8 34 ec fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e273:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e276:	83 f8 01             	cmp    $0x1,%eax
f011e279:	74 17                	je     f011e292 <test_kmalloc_firstfit2+0x5d5>
f011e27b:	83 ec 04             	sub    $0x4,%esp
f011e27e:	68 77 ba 13 f0       	push   $0xf013ba77
f011e283:	68 c2 03 00 00       	push   $0x3c2
f011e288:	68 1a b6 13 f0       	push   $0xf013b61a
f011e28d:	e8 73 1f fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e292:	e8 10 ec fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e297:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e29a:	e8 29 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e29f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e2a2:	83 ec 0c             	sub    $0xc,%esp
f011e2a5:	68 00 1c 00 00       	push   $0x1c00
f011e2aa:	e8 e0 98 fe ff       	call   f0107b8f <kmalloc>
f011e2af:	83 c4 10             	add    $0x10,%esp
f011e2b2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e2b8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e2be:	89 c1                	mov    %eax,%ecx
f011e2c0:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e2c7:	10 00 00 
f011e2ca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e2d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2d5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e2db:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e2e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2e6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e2ec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e2f2:	29 d0                	sub    %edx,%eax
f011e2f4:	89 c3                	mov    %eax,%ebx
f011e2f6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e2fd:	10 00 00 
f011e300:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e305:	0f b6 d0             	movzbl %al,%edx
f011e308:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e30e:	01 d0                	add    %edx,%eax
f011e310:	48                   	dec    %eax
f011e311:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e317:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e31d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e322:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e328:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e32e:	29 d0                	sub    %edx,%eax
f011e330:	01 c3                	add    %eax,%ebx
f011e332:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e339:	10 00 00 
f011e33c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e341:	0f b6 c0             	movzbl %al,%eax
f011e344:	c1 e0 04             	shl    $0x4,%eax
f011e347:	89 c2                	mov    %eax,%edx
f011e349:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e34f:	01 d0                	add    %edx,%eax
f011e351:	48                   	dec    %eax
f011e352:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e358:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e35e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e363:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e369:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e36f:	29 d0                	sub    %edx,%eax
f011e371:	01 d8                	add    %ebx,%eax
f011e373:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e378:	39 c1                	cmp    %eax,%ecx
f011e37a:	74 17                	je     f011e393 <test_kmalloc_firstfit2+0x6d6>
f011e37c:	83 ec 04             	sub    $0x4,%esp
f011e37f:	68 34 ba 13 f0       	push   $0xf013ba34
f011e384:	68 c8 03 00 00       	push   $0x3c8
f011e389:	68 1a b6 13 f0       	push   $0xf013b61a
f011e38e:	e8 72 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e393:	e8 30 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e398:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e39b:	74 17                	je     f011e3b4 <test_kmalloc_firstfit2+0x6f7>
f011e39d:	83 ec 04             	sub    $0x4,%esp
f011e3a0:	68 34 b6 13 f0       	push   $0xf013b634
f011e3a5:	68 c9 03 00 00       	push   $0x3c9
f011e3aa:	68 1a b6 13 f0       	push   $0xf013b61a
f011e3af:	e8 51 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e3b4:	e8 ee ea fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e3b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e3bc:	29 c2                	sub    %eax,%edx
f011e3be:	89 d0                	mov    %edx,%eax
f011e3c0:	83 f8 02             	cmp    $0x2,%eax
f011e3c3:	74 17                	je     f011e3dc <test_kmalloc_firstfit2+0x71f>
f011e3c5:	83 ec 04             	sub    $0x4,%esp
f011e3c8:	68 64 ba 13 f0       	push   $0xf013ba64
f011e3cd:	68 ca 03 00 00       	push   $0x3ca
f011e3d2:	68 1a b6 13 f0       	push   $0xf013b61a
f011e3d7:	e8 29 1e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e3dc:	e8 c6 ea fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e3e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3e4:	e8 df 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e3ec:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e3f2:	83 ec 0c             	sub    $0xc,%esp
f011e3f5:	50                   	push   %eax
f011e3f6:	e8 5f 98 fe ff       	call   f0107c5a <kfree>
f011e3fb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3fe:	e8 c5 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e403:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e406:	74 17                	je     f011e41f <test_kmalloc_firstfit2+0x762>
f011e408:	83 ec 04             	sub    $0x4,%esp
f011e40b:	68 34 b6 13 f0       	push   $0xf013b634
f011e410:	68 d0 03 00 00       	push   $0x3d0
f011e415:	68 1a b6 13 f0       	push   $0xf013b61a
f011e41a:	e8 e6 1d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e41f:	e8 83 ea fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e424:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e427:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e42c:	74 17                	je     f011e445 <test_kmalloc_firstfit2+0x788>
f011e42e:	83 ec 04             	sub    $0x4,%esp
f011e431:	68 77 ba 13 f0       	push   $0xf013ba77
f011e436:	68 d1 03 00 00       	push   $0x3d1
f011e43b:	68 1a b6 13 f0       	push   $0xf013b61a
f011e440:	e8 c0 1d fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e445:	e8 5d ea fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e44a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e44d:	e8 76 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e452:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e455:	83 ec 0c             	sub    $0xc,%esp
f011e458:	68 00 fc 2f 00       	push   $0x2ffc00
f011e45d:	e8 2d 97 fe ff       	call   f0107b8f <kmalloc>
f011e462:	83 c4 10             	add    $0x10,%esp
f011e465:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e46b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e471:	89 c1                	mov    %eax,%ecx
f011e473:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e47a:	10 00 00 
f011e47d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e483:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e488:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e48e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e494:	ba 00 00 00 00       	mov    $0x0,%edx
f011e499:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e49f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e4a5:	29 d0                	sub    %edx,%eax
f011e4a7:	89 c3                	mov    %eax,%ebx
f011e4a9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e4b0:	10 00 00 
f011e4b3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e4b8:	0f b6 d0             	movzbl %al,%edx
f011e4bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e4c1:	01 d0                	add    %edx,%eax
f011e4c3:	48                   	dec    %eax
f011e4c4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e4ca:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4d5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e4db:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4e1:	29 d0                	sub    %edx,%eax
f011e4e3:	01 c3                	add    %eax,%ebx
f011e4e5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e4ec:	10 00 00 
f011e4ef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e4f4:	0f b6 c0             	movzbl %al,%eax
f011e4f7:	c1 e0 04             	shl    $0x4,%eax
f011e4fa:	89 c2                	mov    %eax,%edx
f011e4fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e502:	01 d0                	add    %edx,%eax
f011e504:	48                   	dec    %eax
f011e505:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e50b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e511:	ba 00 00 00 00       	mov    $0x0,%edx
f011e516:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e51c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e522:	29 d0                	sub    %edx,%eax
f011e524:	01 d8                	add    %ebx,%eax
f011e526:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e52b:	39 c1                	cmp    %eax,%ecx
f011e52d:	74 17                	je     f011e546 <test_kmalloc_firstfit2+0x889>
f011e52f:	83 ec 04             	sub    $0x4,%esp
f011e532:	68 34 ba 13 f0       	push   $0xf013ba34
f011e537:	68 d7 03 00 00       	push   $0x3d7
f011e53c:	68 1a b6 13 f0       	push   $0xf013b61a
f011e541:	e8 bf 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e546:	e8 7d 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e54b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e54e:	74 17                	je     f011e567 <test_kmalloc_firstfit2+0x8aa>
f011e550:	83 ec 04             	sub    $0x4,%esp
f011e553:	68 34 b6 13 f0       	push   $0xf013b634
f011e558:	68 d8 03 00 00       	push   $0x3d8
f011e55d:	68 1a b6 13 f0       	push   $0xf013b61a
f011e562:	e8 9e 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e567:	e8 3b e9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e56c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e56f:	29 c2                	sub    %eax,%edx
f011e571:	89 d0                	mov    %edx,%eax
f011e573:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e578:	74 17                	je     f011e591 <test_kmalloc_firstfit2+0x8d4>
f011e57a:	83 ec 04             	sub    $0x4,%esp
f011e57d:	68 64 ba 13 f0       	push   $0xf013ba64
f011e582:	68 d9 03 00 00       	push   $0x3d9
f011e587:	68 1a b6 13 f0       	push   $0xf013b61a
f011e58c:	e8 74 1c fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e591:	e8 11 e9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e596:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e599:	e8 2a 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e59e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e5a1:	83 ec 0c             	sub    $0xc,%esp
f011e5a4:	68 00 18 20 00       	push   $0x201800
f011e5a9:	e8 e1 95 fe ff       	call   f0107b8f <kmalloc>
f011e5ae:	83 c4 10             	add    $0x10,%esp
f011e5b1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e5b7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e5bd:	89 c1                	mov    %eax,%ecx
f011e5bf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e5c6:	10 00 00 
f011e5c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e5cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5d4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e5da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e5e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5e5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e5eb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e5f1:	29 d0                	sub    %edx,%eax
f011e5f3:	89 c3                	mov    %eax,%ebx
f011e5f5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e5fc:	10 00 00 
f011e5ff:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e604:	0f b6 d0             	movzbl %al,%edx
f011e607:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e60d:	01 d0                	add    %edx,%eax
f011e60f:	48                   	dec    %eax
f011e610:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e616:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e61c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e621:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e627:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e62d:	29 d0                	sub    %edx,%eax
f011e62f:	01 c3                	add    %eax,%ebx
f011e631:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e638:	10 00 00 
f011e63b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e640:	0f b6 c0             	movzbl %al,%eax
f011e643:	c1 e0 04             	shl    $0x4,%eax
f011e646:	89 c2                	mov    %eax,%edx
f011e648:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e64e:	01 d0                	add    %edx,%eax
f011e650:	48                   	dec    %eax
f011e651:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e657:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e65d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e662:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e668:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e66e:	29 d0                	sub    %edx,%eax
f011e670:	01 d8                	add    %ebx,%eax
f011e672:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e677:	39 c1                	cmp    %eax,%ecx
f011e679:	74 17                	je     f011e692 <test_kmalloc_firstfit2+0x9d5>
f011e67b:	83 ec 04             	sub    $0x4,%esp
f011e67e:	68 34 ba 13 f0       	push   $0xf013ba34
f011e683:	68 df 03 00 00       	push   $0x3df
f011e688:	68 1a b6 13 f0       	push   $0xf013b61a
f011e68d:	e8 73 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e692:	e8 31 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e697:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e69a:	74 17                	je     f011e6b3 <test_kmalloc_firstfit2+0x9f6>
f011e69c:	83 ec 04             	sub    $0x4,%esp
f011e69f:	68 34 b6 13 f0       	push   $0xf013b634
f011e6a4:	68 e0 03 00 00       	push   $0x3e0
f011e6a9:	68 1a b6 13 f0       	push   $0xf013b61a
f011e6ae:	e8 52 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e6b3:	e8 ef e7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e6b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e6bb:	29 c2                	sub    %eax,%edx
f011e6bd:	89 d0                	mov    %edx,%eax
f011e6bf:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e6c4:	74 17                	je     f011e6dd <test_kmalloc_firstfit2+0xa20>
f011e6c6:	83 ec 04             	sub    $0x4,%esp
f011e6c9:	68 64 ba 13 f0       	push   $0xf013ba64
f011e6ce:	68 e1 03 00 00       	push   $0x3e1
f011e6d3:	68 1a b6 13 f0       	push   $0xf013b61a
f011e6d8:	e8 28 1b fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e6dd:	e8 c5 e7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e6e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6e5:	e8 de 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e6ed:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e6f3:	83 ec 0c             	sub    $0xc,%esp
f011e6f6:	50                   	push   %eax
f011e6f7:	e8 5e 95 fe ff       	call   f0107c5a <kfree>
f011e6fc:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6ff:	e8 c4 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e704:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e707:	74 17                	je     f011e720 <test_kmalloc_firstfit2+0xa63>
f011e709:	83 ec 04             	sub    $0x4,%esp
f011e70c:	68 34 b6 13 f0       	push   $0xf013b634
f011e711:	68 e7 03 00 00       	push   $0x3e7
f011e716:	68 1a b6 13 f0       	push   $0xf013b61a
f011e71b:	e8 e5 1a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e720:	e8 82 e7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e725:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e728:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e72d:	74 17                	je     f011e746 <test_kmalloc_firstfit2+0xa89>
f011e72f:	83 ec 04             	sub    $0x4,%esp
f011e732:	68 77 ba 13 f0       	push   $0xf013ba77
f011e737:	68 e8 03 00 00       	push   $0x3e8
f011e73c:	68 1a b6 13 f0       	push   $0xf013b61a
f011e741:	e8 bf 1a fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e746:	e8 5c e7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e74b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e74e:	e8 75 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e753:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e756:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e75c:	83 ec 0c             	sub    $0xc,%esp
f011e75f:	50                   	push   %eax
f011e760:	e8 f5 94 fe ff       	call   f0107c5a <kfree>
f011e765:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e768:	e8 3a e7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e76d:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e770:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e775:	74 17                	je     f011e78e <test_kmalloc_firstfit2+0xad1>
f011e777:	83 ec 04             	sub    $0x4,%esp
f011e77a:	68 77 ba 13 f0       	push   $0xf013ba77
f011e77f:	68 ee 03 00 00       	push   $0x3ee
f011e784:	68 1a b6 13 f0       	push   $0xf013b61a
f011e789:	e8 77 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e78e:	e8 35 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e793:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e796:	74 17                	je     f011e7af <test_kmalloc_firstfit2+0xaf2>
f011e798:	83 ec 04             	sub    $0x4,%esp
f011e79b:	68 34 b6 13 f0       	push   $0xf013b634
f011e7a0:	68 ef 03 00 00       	push   $0x3ef
f011e7a5:	68 1a b6 13 f0       	push   $0xf013b61a
f011e7aa:	e8 56 1a fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e7af:	e8 f3 e6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e7b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7b7:	e8 0c 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e7bf:	83 ec 0c             	sub    $0xc,%esp
f011e7c2:	68 00 fc 4f 00       	push   $0x4ffc00
f011e7c7:	e8 c3 93 fe ff       	call   f0107b8f <kmalloc>
f011e7cc:	83 c4 10             	add    $0x10,%esp
f011e7cf:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e7d5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e7db:	89 c1                	mov    %eax,%ecx
f011e7dd:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e7e4:	10 00 00 
f011e7e7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e7ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e7f2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e7f8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e7fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011e803:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e809:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e80f:	29 d0                	sub    %edx,%eax
f011e811:	89 c3                	mov    %eax,%ebx
f011e813:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e81a:	10 00 00 
f011e81d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e822:	0f b6 d0             	movzbl %al,%edx
f011e825:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e82b:	01 d0                	add    %edx,%eax
f011e82d:	48                   	dec    %eax
f011e82e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e834:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e83a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e83f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e845:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e84b:	29 d0                	sub    %edx,%eax
f011e84d:	01 c3                	add    %eax,%ebx
f011e84f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e856:	10 00 00 
f011e859:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e85e:	0f b6 c0             	movzbl %al,%eax
f011e861:	c1 e0 04             	shl    $0x4,%eax
f011e864:	89 c2                	mov    %eax,%edx
f011e866:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e86c:	01 d0                	add    %edx,%eax
f011e86e:	48                   	dec    %eax
f011e86f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e875:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e87b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e880:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e886:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e88c:	29 d0                	sub    %edx,%eax
f011e88e:	01 d8                	add    %ebx,%eax
f011e890:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e895:	39 c1                	cmp    %eax,%ecx
f011e897:	74 17                	je     f011e8b0 <test_kmalloc_firstfit2+0xbf3>
f011e899:	83 ec 04             	sub    $0x4,%esp
f011e89c:	68 34 ba 13 f0       	push   $0xf013ba34
f011e8a1:	68 f5 03 00 00       	push   $0x3f5
f011e8a6:	68 1a b6 13 f0       	push   $0xf013b61a
f011e8ab:	e8 55 19 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8b0:	e8 13 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e8b8:	74 17                	je     f011e8d1 <test_kmalloc_firstfit2+0xc14>
f011e8ba:	83 ec 04             	sub    $0x4,%esp
f011e8bd:	68 34 b6 13 f0       	push   $0xf013b634
f011e8c2:	68 f6 03 00 00       	push   $0x3f6
f011e8c7:	68 1a b6 13 f0       	push   $0xf013b61a
f011e8cc:	e8 34 19 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e8d1:	e8 d1 e5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e8d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e8d9:	29 c2                	sub    %eax,%edx
f011e8db:	89 d0                	mov    %edx,%eax
f011e8dd:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e8e2:	74 17                	je     f011e8fb <test_kmalloc_firstfit2+0xc3e>
f011e8e4:	83 ec 04             	sub    $0x4,%esp
f011e8e7:	68 64 ba 13 f0       	push   $0xf013ba64
f011e8ec:	68 f7 03 00 00       	push   $0x3f7
f011e8f1:	68 1a b6 13 f0       	push   $0xf013b61a
f011e8f6:	e8 0a 19 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e8fb:	e8 a7 e5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011e900:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e903:	e8 c0 54 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e908:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e90b:	83 ec 0c             	sub    $0xc,%esp
f011e90e:	68 00 fc 2f 00       	push   $0x2ffc00
f011e913:	e8 77 92 fe ff       	call   f0107b8f <kmalloc>
f011e918:	83 c4 10             	add    $0x10,%esp
f011e91b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e921:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e927:	89 c1                	mov    %eax,%ecx
f011e929:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e930:	10 00 00 
f011e933:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e939:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e93e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e944:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e94a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e94f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e955:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e95b:	29 d0                	sub    %edx,%eax
f011e95d:	89 c3                	mov    %eax,%ebx
f011e95f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e966:	10 00 00 
f011e969:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e96e:	0f b6 d0             	movzbl %al,%edx
f011e971:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e977:	01 d0                	add    %edx,%eax
f011e979:	48                   	dec    %eax
f011e97a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e980:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e986:	ba 00 00 00 00       	mov    $0x0,%edx
f011e98b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e991:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e997:	29 d0                	sub    %edx,%eax
f011e999:	01 c3                	add    %eax,%ebx
f011e99b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e9a2:	10 00 00 
f011e9a5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e9aa:	0f b6 c0             	movzbl %al,%eax
f011e9ad:	c1 e0 04             	shl    $0x4,%eax
f011e9b0:	89 c2                	mov    %eax,%edx
f011e9b2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e9b8:	01 d0                	add    %edx,%eax
f011e9ba:	48                   	dec    %eax
f011e9bb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e9c1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e9c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9cc:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e9d2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e9d8:	29 d0                	sub    %edx,%eax
f011e9da:	01 d8                	add    %ebx,%eax
f011e9dc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e9e1:	39 c1                	cmp    %eax,%ecx
f011e9e3:	74 17                	je     f011e9fc <test_kmalloc_firstfit2+0xd3f>
f011e9e5:	83 ec 04             	sub    $0x4,%esp
f011e9e8:	68 34 ba 13 f0       	push   $0xf013ba34
f011e9ed:	68 05 04 00 00       	push   $0x405
f011e9f2:	68 1a b6 13 f0       	push   $0xf013b61a
f011e9f7:	e8 09 18 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9fc:	e8 c7 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea01:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ea04:	74 17                	je     f011ea1d <test_kmalloc_firstfit2+0xd60>
f011ea06:	83 ec 04             	sub    $0x4,%esp
f011ea09:	68 34 b6 13 f0       	push   $0xf013b634
f011ea0e:	68 06 04 00 00       	push   $0x406
f011ea13:	68 1a b6 13 f0       	push   $0xf013b61a
f011ea18:	e8 e8 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ea1d:	e8 85 e4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011ea22:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ea25:	29 c2                	sub    %eax,%edx
f011ea27:	89 d0                	mov    %edx,%eax
f011ea29:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ea2e:	74 17                	je     f011ea47 <test_kmalloc_firstfit2+0xd8a>
f011ea30:	83 ec 04             	sub    $0x4,%esp
f011ea33:	68 64 ba 13 f0       	push   $0xf013ba64
f011ea38:	68 07 04 00 00       	push   $0x407
f011ea3d:	68 1a b6 13 f0       	push   $0xf013b61a
f011ea42:	e8 be 17 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ea47:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ea4e:	10 00 00 
f011ea51:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ea57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea5c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ea62:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ea68:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea6d:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ea73:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ea79:	29 d0                	sub    %edx,%eax
f011ea7b:	89 c1                	mov    %eax,%ecx
f011ea7d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ea84:	10 00 00 
f011ea87:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ea8c:	0f b6 d0             	movzbl %al,%edx
f011ea8f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ea95:	01 d0                	add    %edx,%eax
f011ea97:	48                   	dec    %eax
f011ea98:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ea9e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eaa4:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaa9:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011eaaf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eab5:	29 d0                	sub    %edx,%eax
f011eab7:	01 c1                	add    %eax,%ecx
f011eab9:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011eac0:	10 00 00 
f011eac3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011eac8:	0f b6 c0             	movzbl %al,%eax
f011eacb:	c1 e0 04             	shl    $0x4,%eax
f011eace:	89 c2                	mov    %eax,%edx
f011ead0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ead6:	01 d0                	add    %edx,%eax
f011ead8:	48                   	dec    %eax
f011ead9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011eadf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eae5:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaea:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011eaf0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eaf6:	29 d0                	sub    %edx,%eax
f011eaf8:	01 c8                	add    %ecx,%eax
f011eafa:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011eaff:	29 c2                	sub    %eax,%edx
f011eb01:	89 d0                	mov    %edx,%eax
f011eb03:	83 ec 0c             	sub    $0xc,%esp
f011eb06:	50                   	push   %eax
f011eb07:	e8 83 90 fe ff       	call   f0107b8f <kmalloc>
f011eb0c:	83 c4 10             	add    $0x10,%esp
f011eb0f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011eb15:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011eb1b:	85 c0                	test   %eax,%eax
f011eb1d:	74 17                	je     f011eb36 <test_kmalloc_firstfit2+0xe79>
f011eb1f:	83 ec 04             	sub    $0x4,%esp
f011eb22:	68 64 bb 13 f0       	push   $0xf013bb64
f011eb27:	68 0d 04 00 00       	push   $0x40d
f011eb2c:	68 1a b6 13 f0       	push   $0xf013b61a
f011eb31:	e8 cf 16 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011eb36:	83 ec 0c             	sub    $0xc,%esp
f011eb39:	68 a4 bc 13 f0       	push   $0xf013bca4
f011eb3e:	e8 cb 21 fe ff       	call   f0100d0e <cprintf>
f011eb43:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011eb46:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011eb4b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011eb4e:	5b                   	pop    %ebx
f011eb4f:	5f                   	pop    %edi
f011eb50:	5d                   	pop    %ebp
f011eb51:	c3                   	ret    

f011eb52 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011eb52:	55                   	push   %ebp
f011eb53:	89 e5                	mov    %esp,%ebp
f011eb55:	57                   	push   %edi
f011eb56:	53                   	push   %ebx
f011eb57:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011eb5d:	83 ec 0c             	sub    $0xc,%esp
f011eb60:	68 5c b5 13 f0       	push   $0xf013b55c
f011eb65:	e8 a4 21 fe ff       	call   f0100d0e <cprintf>
f011eb6a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011eb6d:	83 ec 0c             	sub    $0xc,%esp
f011eb70:	68 8c b5 13 f0       	push   $0xf013b58c
f011eb75:	e8 94 21 fe ff       	call   f0100d0e <cprintf>
f011eb7a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011eb7d:	83 ec 0c             	sub    $0xc,%esp
f011eb80:	68 5c b5 13 f0       	push   $0xf013b55c
f011eb85:	e8 84 21 fe ff       	call   f0100d0e <cprintf>
f011eb8a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011eb8d:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011eb93:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011eb98:	b8 00 00 00 00       	mov    $0x0,%eax
f011eb9d:	89 d7                	mov    %edx,%edi
f011eb9f:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011eba1:	e8 01 e3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011eba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011eba9:	e8 1a 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ebae:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ebb1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011ebb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ebbf:	eb 1f                	jmp    f011ebe0 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011ebc1:	83 ec 0c             	sub    $0xc,%esp
f011ebc4:	68 00 00 20 00       	push   $0x200000
f011ebc9:	e8 c1 8f fe ff       	call   f0107b8f <kmalloc>
f011ebce:	83 c4 10             	add    $0x10,%esp
f011ebd1:	89 c2                	mov    %eax,%edx
f011ebd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ebd6:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ebdd:	ff 45 f4             	incl   -0xc(%ebp)
f011ebe0:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ebe4:	7e db                	jle    f011ebc1 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ebe6:	83 ec 0c             	sub    $0xc,%esp
f011ebe9:	68 00 b0 1f 00       	push   $0x1fb000
f011ebee:	e8 9c 8f fe ff       	call   f0107b8f <kmalloc>
f011ebf3:	83 c4 10             	add    $0x10,%esp
f011ebf6:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ebfc:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ec02:	89 c1                	mov    %eax,%ecx
f011ec04:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ec0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ec0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ec16:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec19:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec1e:	f7 75 e4             	divl   -0x1c(%ebp)
f011ec21:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec24:	29 d0                	sub    %edx,%eax
f011ec26:	89 c3                	mov    %eax,%ebx
f011ec28:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ec2f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ec34:	0f b6 d0             	movzbl %al,%edx
f011ec37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ec3a:	01 d0                	add    %edx,%eax
f011ec3c:	48                   	dec    %eax
f011ec3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ec40:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec43:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec48:	f7 75 dc             	divl   -0x24(%ebp)
f011ec4b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec4e:	29 d0                	sub    %edx,%eax
f011ec50:	01 c3                	add    %eax,%ebx
f011ec52:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ec59:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ec5e:	0f b6 c0             	movzbl %al,%eax
f011ec61:	c1 e0 04             	shl    $0x4,%eax
f011ec64:	89 c2                	mov    %eax,%edx
f011ec66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ec69:	01 d0                	add    %edx,%eax
f011ec6b:	48                   	dec    %eax
f011ec6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ec6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ec72:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec77:	f7 75 d4             	divl   -0x2c(%ebp)
f011ec7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ec7d:	29 d0                	sub    %edx,%eax
f011ec7f:	01 d8                	add    %ebx,%eax
f011ec81:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ec86:	39 c1                	cmp    %eax,%ecx
f011ec88:	0f 85 c0 04 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ec8e:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011ec94:	89 c1                	mov    %eax,%ecx
f011ec96:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ec9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011eca0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eca5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011eca8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ecab:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecb0:	f7 75 cc             	divl   -0x34(%ebp)
f011ecb3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ecb6:	29 d0                	sub    %edx,%eax
f011ecb8:	89 c3                	mov    %eax,%ebx
f011ecba:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ecc1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ecc6:	0f b6 d0             	movzbl %al,%edx
f011ecc9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011eccc:	01 d0                	add    %edx,%eax
f011ecce:	48                   	dec    %eax
f011eccf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ecd2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ecd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecda:	f7 75 c4             	divl   -0x3c(%ebp)
f011ecdd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ece0:	29 d0                	sub    %edx,%eax
f011ece2:	01 c3                	add    %eax,%ebx
f011ece4:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011eceb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ecf0:	0f b6 c0             	movzbl %al,%eax
f011ecf3:	c1 e0 04             	shl    $0x4,%eax
f011ecf6:	89 c2                	mov    %eax,%edx
f011ecf8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ecfb:	01 d0                	add    %edx,%eax
f011ecfd:	48                   	dec    %eax
f011ecfe:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ed01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed04:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed09:	f7 75 bc             	divl   -0x44(%ebp)
f011ed0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed0f:	29 d0                	sub    %edx,%eax
f011ed11:	01 d8                	add    %ebx,%eax
f011ed13:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ed18:	39 c1                	cmp    %eax,%ecx
f011ed1a:	0f 85 2e 04 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ed20:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ed26:	89 c1                	mov    %eax,%ecx
f011ed28:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ed2f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ed32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed37:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ed3a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ed3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed42:	f7 75 b4             	divl   -0x4c(%ebp)
f011ed45:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ed48:	29 d0                	sub    %edx,%eax
f011ed4a:	89 c3                	mov    %eax,%ebx
f011ed4c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ed53:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ed58:	0f b6 d0             	movzbl %al,%edx
f011ed5b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ed5e:	01 d0                	add    %edx,%eax
f011ed60:	48                   	dec    %eax
f011ed61:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ed64:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ed67:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed6c:	f7 75 ac             	divl   -0x54(%ebp)
f011ed6f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ed72:	29 d0                	sub    %edx,%eax
f011ed74:	01 c3                	add    %eax,%ebx
f011ed76:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ed7d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ed82:	0f b6 c0             	movzbl %al,%eax
f011ed85:	c1 e0 04             	shl    $0x4,%eax
f011ed88:	89 c2                	mov    %eax,%edx
f011ed8a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ed8d:	01 d0                	add    %edx,%eax
f011ed8f:	48                   	dec    %eax
f011ed90:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ed93:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ed96:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed9b:	f7 75 a4             	divl   -0x5c(%ebp)
f011ed9e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eda1:	29 d0                	sub    %edx,%eax
f011eda3:	01 d8                	add    %ebx,%eax
f011eda5:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011edaa:	39 c1                	cmp    %eax,%ecx
f011edac:	0f 85 9c 03 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011edb2:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011edb8:	89 c1                	mov    %eax,%ecx
f011edba:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011edc1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011edc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edc9:	89 45 98             	mov    %eax,-0x68(%ebp)
f011edcc:	8b 45 98             	mov    -0x68(%ebp),%eax
f011edcf:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd4:	f7 75 9c             	divl   -0x64(%ebp)
f011edd7:	8b 45 98             	mov    -0x68(%ebp),%eax
f011edda:	29 d0                	sub    %edx,%eax
f011eddc:	89 c3                	mov    %eax,%ebx
f011edde:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ede5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011edea:	0f b6 d0             	movzbl %al,%edx
f011eded:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011edf0:	01 d0                	add    %edx,%eax
f011edf2:	48                   	dec    %eax
f011edf3:	89 45 90             	mov    %eax,-0x70(%ebp)
f011edf6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011edf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011edfe:	f7 75 94             	divl   -0x6c(%ebp)
f011ee01:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ee04:	29 d0                	sub    %edx,%eax
f011ee06:	01 c3                	add    %eax,%ebx
f011ee08:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ee0f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ee14:	0f b6 c0             	movzbl %al,%eax
f011ee17:	c1 e0 04             	shl    $0x4,%eax
f011ee1a:	89 c2                	mov    %eax,%edx
f011ee1c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ee1f:	01 d0                	add    %edx,%eax
f011ee21:	48                   	dec    %eax
f011ee22:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ee25:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee28:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2d:	f7 75 8c             	divl   -0x74(%ebp)
f011ee30:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee33:	29 d0                	sub    %edx,%eax
f011ee35:	01 d8                	add    %ebx,%eax
f011ee37:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ee3c:	39 c1                	cmp    %eax,%ecx
f011ee3e:	0f 85 0a 03 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ee44:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011ee4a:	89 c1                	mov    %eax,%ecx
f011ee4c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ee53:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ee56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee5b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ee5e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ee61:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee66:	f7 75 84             	divl   -0x7c(%ebp)
f011ee69:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ee6c:	29 d0                	sub    %edx,%eax
f011ee6e:	89 c3                	mov    %eax,%ebx
f011ee70:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ee77:	10 00 00 
f011ee7a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ee7f:	0f b6 d0             	movzbl %al,%edx
f011ee82:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ee88:	01 d0                	add    %edx,%eax
f011ee8a:	48                   	dec    %eax
f011ee8b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ee91:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee9c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011eea2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eea8:	29 d0                	sub    %edx,%eax
f011eeaa:	01 c3                	add    %eax,%ebx
f011eeac:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011eeb3:	10 00 00 
f011eeb6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011eebb:	0f b6 c0             	movzbl %al,%eax
f011eebe:	c1 e0 04             	shl    $0x4,%eax
f011eec1:	89 c2                	mov    %eax,%edx
f011eec3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011eec9:	01 d0                	add    %edx,%eax
f011eecb:	48                   	dec    %eax
f011eecc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011eed2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eed8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eedd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011eee3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eee9:	29 d0                	sub    %edx,%eax
f011eeeb:	01 d8                	add    %ebx,%eax
f011eeed:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eef2:	39 c1                	cmp    %eax,%ecx
f011eef4:	0f 85 54 02 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011eefa:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011ef00:	89 c1                	mov    %eax,%ecx
f011ef02:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ef09:	10 00 00 
f011ef0c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ef12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef17:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ef1d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef28:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ef2e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef34:	29 d0                	sub    %edx,%eax
f011ef36:	89 c3                	mov    %eax,%ebx
f011ef38:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ef3f:	10 00 00 
f011ef42:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ef47:	0f b6 d0             	movzbl %al,%edx
f011ef4a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ef50:	01 d0                	add    %edx,%eax
f011ef52:	48                   	dec    %eax
f011ef53:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ef59:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef64:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ef6a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef70:	29 d0                	sub    %edx,%eax
f011ef72:	01 c3                	add    %eax,%ebx
f011ef74:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ef7b:	10 00 00 
f011ef7e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ef83:	0f b6 c0             	movzbl %al,%eax
f011ef86:	c1 e0 04             	shl    $0x4,%eax
f011ef89:	89 c2                	mov    %eax,%edx
f011ef8b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ef91:	01 d0                	add    %edx,%eax
f011ef93:	48                   	dec    %eax
f011ef94:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ef9a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011efa0:	ba 00 00 00 00       	mov    $0x0,%edx
f011efa5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011efab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011efb1:	29 d0                	sub    %edx,%eax
f011efb3:	01 d8                	add    %ebx,%eax
f011efb5:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011efba:	39 c1                	cmp    %eax,%ecx
f011efbc:	0f 85 8c 01 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011efc2:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011efc8:	89 c1                	mov    %eax,%ecx
f011efca:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011efd1:	10 00 00 
f011efd4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011efda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011efdf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011efe5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011efeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011eff6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011effc:	29 d0                	sub    %edx,%eax
f011effe:	89 c3                	mov    %eax,%ebx
f011f000:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f007:	10 00 00 
f011f00a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f00f:	0f b6 d0             	movzbl %al,%edx
f011f012:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f018:	01 d0                	add    %edx,%eax
f011f01a:	48                   	dec    %eax
f011f01b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f021:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f027:	ba 00 00 00 00       	mov    $0x0,%edx
f011f02c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f032:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f038:	29 d0                	sub    %edx,%eax
f011f03a:	01 c3                	add    %eax,%ebx
f011f03c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f043:	10 00 00 
f011f046:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f04b:	0f b6 c0             	movzbl %al,%eax
f011f04e:	c1 e0 04             	shl    $0x4,%eax
f011f051:	89 c2                	mov    %eax,%edx
f011f053:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f059:	01 d0                	add    %edx,%eax
f011f05b:	48                   	dec    %eax
f011f05c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f062:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f068:	ba 00 00 00 00       	mov    $0x0,%edx
f011f06d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f073:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f079:	29 d0                	sub    %edx,%eax
f011f07b:	01 d8                	add    %ebx,%eax
f011f07d:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f082:	39 c1                	cmp    %eax,%ecx
f011f084:	0f 85 c4 00 00 00    	jne    f011f14e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f08a:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f090:	89 c1                	mov    %eax,%ecx
f011f092:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f099:	10 00 00 
f011f09c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f0a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0a7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f0ad:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f0b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0b8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f0be:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f0c4:	29 d0                	sub    %edx,%eax
f011f0c6:	89 c3                	mov    %eax,%ebx
f011f0c8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f0cf:	10 00 00 
f011f0d2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f0d7:	0f b6 d0             	movzbl %al,%edx
f011f0da:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f0e0:	01 d0                	add    %edx,%eax
f011f0e2:	48                   	dec    %eax
f011f0e3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f0e9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f0ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0f4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f0fa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f100:	29 d0                	sub    %edx,%eax
f011f102:	01 c3                	add    %eax,%ebx
f011f104:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f10b:	10 00 00 
f011f10e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f113:	0f b6 c0             	movzbl %al,%eax
f011f116:	c1 e0 04             	shl    $0x4,%eax
f011f119:	89 c2                	mov    %eax,%edx
f011f11b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f121:	01 d0                	add    %edx,%eax
f011f123:	48                   	dec    %eax
f011f124:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f12a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f130:	ba 00 00 00 00       	mov    $0x0,%edx
f011f135:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f13b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f141:	29 d0                	sub    %edx,%eax
f011f143:	01 d8                	add    %ebx,%eax
f011f145:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f14a:	39 c1                	cmp    %eax,%ecx
f011f14c:	74 17                	je     f011f165 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f14e:	83 ec 04             	sub    $0x4,%esp
f011f151:	68 f0 bc 13 f0       	push   $0xf013bcf0
f011f156:	68 31 04 00 00       	push   $0x431
f011f15b:	68 1a b6 13 f0       	push   $0xf013b61a
f011f160:	e8 a0 10 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f165:	e8 5e 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f16a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f16d:	74 17                	je     f011f186 <test_kmalloc_worstfit+0x634>
f011f16f:	83 ec 04             	sub    $0x4,%esp
f011f172:	68 34 b6 13 f0       	push   $0xf013b634
f011f177:	68 33 04 00 00       	push   $0x433
f011f17c:	68 1a b6 13 f0       	push   $0xf013b61a
f011f181:	e8 7f 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f186:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f189:	e8 19 dd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f18e:	29 c3                	sub    %eax,%ebx
f011f190:	89 d8                	mov    %ebx,%eax
f011f192:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f197:	74 17                	je     f011f1b0 <test_kmalloc_worstfit+0x65e>
f011f199:	83 ec 04             	sub    $0x4,%esp
f011f19c:	68 d7 b8 13 f0       	push   $0xf013b8d7
f011f1a1:	68 34 04 00 00       	push   $0x434
f011f1a6:	68 1a b6 13 f0       	push   $0xf013b61a
f011f1ab:	e8 55 10 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f1b0:	e8 f2 dc fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f1b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f1b8:	e8 0b 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f1bd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f1c0:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f1c6:	83 ec 0c             	sub    $0xc,%esp
f011f1c9:	50                   	push   %eax
f011f1ca:	e8 8b 8a fe ff       	call   f0107c5a <kfree>
f011f1cf:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f1d2:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f1d8:	83 ec 0c             	sub    $0xc,%esp
f011f1db:	50                   	push   %eax
f011f1dc:	e8 79 8a fe ff       	call   f0107c5a <kfree>
f011f1e1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f1e4:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f1ea:	83 ec 0c             	sub    $0xc,%esp
f011f1ed:	50                   	push   %eax
f011f1ee:	e8 67 8a fe ff       	call   f0107c5a <kfree>
f011f1f3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f1f6:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f1fc:	83 ec 0c             	sub    $0xc,%esp
f011f1ff:	50                   	push   %eax
f011f200:	e8 55 8a fe ff       	call   f0107c5a <kfree>
f011f205:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f208:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f20e:	83 ec 0c             	sub    $0xc,%esp
f011f211:	50                   	push   %eax
f011f212:	e8 43 8a fe ff       	call   f0107c5a <kfree>
f011f217:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f21a:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f220:	83 ec 0c             	sub    $0xc,%esp
f011f223:	50                   	push   %eax
f011f224:	e8 31 8a fe ff       	call   f0107c5a <kfree>
f011f229:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f22c:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f232:	83 ec 0c             	sub    $0xc,%esp
f011f235:	50                   	push   %eax
f011f236:	e8 1f 8a fe ff       	call   f0107c5a <kfree>
f011f23b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f23e:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f244:	83 ec 0c             	sub    $0xc,%esp
f011f247:	50                   	push   %eax
f011f248:	e8 0d 8a fe ff       	call   f0107c5a <kfree>
f011f24d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f250:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f256:	83 ec 0c             	sub    $0xc,%esp
f011f259:	50                   	push   %eax
f011f25a:	e8 fb 89 fe ff       	call   f0107c5a <kfree>
f011f25f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f262:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f268:	83 ec 0c             	sub    $0xc,%esp
f011f26b:	50                   	push   %eax
f011f26c:	e8 e9 89 fe ff       	call   f0107c5a <kfree>
f011f271:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f274:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f27a:	83 ec 0c             	sub    $0xc,%esp
f011f27d:	50                   	push   %eax
f011f27e:	e8 d7 89 fe ff       	call   f0107c5a <kfree>
f011f283:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f286:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f28c:	83 ec 0c             	sub    $0xc,%esp
f011f28f:	50                   	push   %eax
f011f290:	e8 c5 89 fe ff       	call   f0107c5a <kfree>
f011f295:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f298:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f29e:	83 ec 0c             	sub    $0xc,%esp
f011f2a1:	50                   	push   %eax
f011f2a2:	e8 b3 89 fe ff       	call   f0107c5a <kfree>
f011f2a7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f2aa:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f2b0:	83 ec 0c             	sub    $0xc,%esp
f011f2b3:	50                   	push   %eax
f011f2b4:	e8 a1 89 fe ff       	call   f0107c5a <kfree>
f011f2b9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f2bc:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f2c2:	83 ec 0c             	sub    $0xc,%esp
f011f2c5:	50                   	push   %eax
f011f2c6:	e8 8f 89 fe ff       	call   f0107c5a <kfree>
f011f2cb:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2ce:	e8 f5 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2d6:	74 17                	je     f011f2ef <test_kmalloc_worstfit+0x79d>
f011f2d8:	83 ec 04             	sub    $0x4,%esp
f011f2db:	68 34 b6 13 f0       	push   $0xf013b634
f011f2e0:	68 4a 04 00 00       	push   $0x44a
f011f2e5:	68 1a b6 13 f0       	push   $0xf013b61a
f011f2ea:	e8 16 0f fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f2ef:	e8 b3 db fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f2f4:	89 c2                	mov    %eax,%edx
f011f2f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f2f9:	29 c2                	sub    %eax,%edx
f011f2fb:	89 d0                	mov    %edx,%eax
f011f2fd:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f302:	74 17                	je     f011f31b <test_kmalloc_worstfit+0x7c9>
f011f304:	83 ec 04             	sub    $0x4,%esp
f011f307:	68 e8 b8 13 f0       	push   $0xf013b8e8
f011f30c:	68 4b 04 00 00       	push   $0x44b
f011f311:	68 1a b6 13 f0       	push   $0xf013b61a
f011f316:	e8 ea 0e fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f31b:	e8 87 db fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f320:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f323:	e8 a0 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f328:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f32b:	83 ec 0c             	sub    $0xc,%esp
f011f32e:	68 00 00 10 00       	push   $0x100000
f011f333:	e8 57 88 fe ff       	call   f0107b8f <kmalloc>
f011f338:	83 c4 10             	add    $0x10,%esp
f011f33b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f341:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f348:	10 00 00 
f011f34b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f351:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f356:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f35c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f362:	ba 00 00 00 00       	mov    $0x0,%edx
f011f367:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f36d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f373:	29 d0                	sub    %edx,%eax
f011f375:	89 c1                	mov    %eax,%ecx
f011f377:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f37e:	10 00 00 
f011f381:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f386:	0f b6 d0             	movzbl %al,%edx
f011f389:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f38f:	01 d0                	add    %edx,%eax
f011f391:	48                   	dec    %eax
f011f392:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f398:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f39e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3a3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f3a9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f3af:	29 d0                	sub    %edx,%eax
f011f3b1:	01 c1                	add    %eax,%ecx
f011f3b3:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f3ba:	10 00 00 
f011f3bd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f3c2:	0f b6 c0             	movzbl %al,%eax
f011f3c5:	c1 e0 04             	shl    $0x4,%eax
f011f3c8:	89 c2                	mov    %eax,%edx
f011f3ca:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f3d0:	01 d0                	add    %edx,%eax
f011f3d2:	48                   	dec    %eax
f011f3d3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f3d9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f3df:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3e4:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f3ea:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f3f0:	29 d0                	sub    %edx,%eax
f011f3f2:	01 c8                	add    %ecx,%eax
f011f3f4:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f3fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f400:	39 c2                	cmp    %eax,%edx
f011f402:	74 17                	je     f011f41b <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f404:	83 ec 04             	sub    $0x4,%esp
f011f407:	68 34 bd 13 f0       	push   $0xf013bd34
f011f40c:	68 52 04 00 00       	push   $0x452
f011f411:	68 1a b6 13 f0       	push   $0xf013b61a
f011f416:	e8 ea 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f41b:	e8 a8 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f420:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f423:	74 17                	je     f011f43c <test_kmalloc_worstfit+0x8ea>
f011f425:	83 ec 04             	sub    $0x4,%esp
f011f428:	68 34 b6 13 f0       	push   $0xf013b634
f011f42d:	68 53 04 00 00       	push   $0x453
f011f432:	68 1a b6 13 f0       	push   $0xf013b61a
f011f437:	e8 c9 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f43c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f43f:	e8 63 da fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f444:	29 c3                	sub    %eax,%ebx
f011f446:	89 d8                	mov    %ebx,%eax
f011f448:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f44d:	74 17                	je     f011f466 <test_kmalloc_worstfit+0x914>
f011f44f:	83 ec 04             	sub    $0x4,%esp
f011f452:	68 52 bb 13 f0       	push   $0xf013bb52
f011f457:	68 54 04 00 00       	push   $0x454
f011f45c:	68 1a b6 13 f0       	push   $0xf013b61a
f011f461:	e8 9f 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f466:	ff 45 e8             	incl   -0x18(%ebp)
f011f469:	83 ec 08             	sub    $0x8,%esp
f011f46c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f46f:	68 54 bd 13 f0       	push   $0xf013bd54
f011f474:	e8 95 18 fe ff       	call   f0100d0e <cprintf>
f011f479:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f47c:	e8 26 da fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f481:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f484:	e8 3f 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f489:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f48c:	83 ec 0c             	sub    $0xc,%esp
f011f48f:	68 00 00 40 00       	push   $0x400000
f011f494:	e8 f6 86 fe ff       	call   f0107b8f <kmalloc>
f011f499:	83 c4 10             	add    $0x10,%esp
f011f49c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f4a2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f4a9:	10 00 00 
f011f4ac:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f4b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4b7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f4bd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f4c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4c8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f4ce:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f4d4:	29 d0                	sub    %edx,%eax
f011f4d6:	89 c1                	mov    %eax,%ecx
f011f4d8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f4df:	10 00 00 
f011f4e2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f4e7:	0f b6 d0             	movzbl %al,%edx
f011f4ea:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f4f0:	01 d0                	add    %edx,%eax
f011f4f2:	48                   	dec    %eax
f011f4f3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f4f9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f4ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011f504:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f50a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f510:	29 d0                	sub    %edx,%eax
f011f512:	01 c1                	add    %eax,%ecx
f011f514:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f51b:	10 00 00 
f011f51e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f523:	0f b6 c0             	movzbl %al,%eax
f011f526:	c1 e0 04             	shl    $0x4,%eax
f011f529:	89 c2                	mov    %eax,%edx
f011f52b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f531:	01 d0                	add    %edx,%eax
f011f533:	48                   	dec    %eax
f011f534:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f53a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f540:	ba 00 00 00 00       	mov    $0x0,%edx
f011f545:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f54b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f551:	29 d0                	sub    %edx,%eax
f011f553:	01 c8                	add    %ecx,%eax
f011f555:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f55b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f561:	39 c2                	cmp    %eax,%edx
f011f563:	74 17                	je     f011f57c <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f565:	83 ec 04             	sub    $0x4,%esp
f011f568:	68 34 bd 13 f0       	push   $0xf013bd34
f011f56d:	68 5b 04 00 00       	push   $0x45b
f011f572:	68 1a b6 13 f0       	push   $0xf013b61a
f011f577:	e8 89 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f57c:	e8 47 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f581:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f584:	74 17                	je     f011f59d <test_kmalloc_worstfit+0xa4b>
f011f586:	83 ec 04             	sub    $0x4,%esp
f011f589:	68 34 b6 13 f0       	push   $0xf013b634
f011f58e:	68 5c 04 00 00       	push   $0x45c
f011f593:	68 1a b6 13 f0       	push   $0xf013b61a
f011f598:	e8 68 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f59d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5a0:	e8 02 d9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f5a5:	29 c3                	sub    %eax,%ebx
f011f5a7:	89 d8                	mov    %ebx,%eax
f011f5a9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f5ae:	74 17                	je     f011f5c7 <test_kmalloc_worstfit+0xa75>
f011f5b0:	83 ec 04             	sub    $0x4,%esp
f011f5b3:	68 52 bb 13 f0       	push   $0xf013bb52
f011f5b8:	68 5d 04 00 00       	push   $0x45d
f011f5bd:	68 1a b6 13 f0       	push   $0xf013b61a
f011f5c2:	e8 3e 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5c7:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ca:	83 ec 08             	sub    $0x8,%esp
f011f5cd:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5d0:	68 54 bd 13 f0       	push   $0xf013bd54
f011f5d5:	e8 34 17 fe ff       	call   f0100d0e <cprintf>
f011f5da:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5dd:	e8 c5 d8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f5e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5e5:	e8 de 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f5ed:	83 ec 0c             	sub    $0xc,%esp
f011f5f0:	68 00 00 60 00       	push   $0x600000
f011f5f5:	e8 95 85 fe ff       	call   f0107b8f <kmalloc>
f011f5fa:	83 c4 10             	add    $0x10,%esp
f011f5fd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f603:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f60a:	10 00 00 
f011f60d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f613:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f618:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f61e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f624:	ba 00 00 00 00       	mov    $0x0,%edx
f011f629:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f62f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f635:	29 d0                	sub    %edx,%eax
f011f637:	89 c1                	mov    %eax,%ecx
f011f639:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f640:	10 00 00 
f011f643:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f648:	0f b6 d0             	movzbl %al,%edx
f011f64b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f651:	01 d0                	add    %edx,%eax
f011f653:	48                   	dec    %eax
f011f654:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f65a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f660:	ba 00 00 00 00       	mov    $0x0,%edx
f011f665:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f66b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f671:	29 d0                	sub    %edx,%eax
f011f673:	01 c1                	add    %eax,%ecx
f011f675:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f67c:	10 00 00 
f011f67f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f684:	0f b6 c0             	movzbl %al,%eax
f011f687:	c1 e0 04             	shl    $0x4,%eax
f011f68a:	89 c2                	mov    %eax,%edx
f011f68c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f692:	01 d0                	add    %edx,%eax
f011f694:	48                   	dec    %eax
f011f695:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f69b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6a6:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f6ac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f6b2:	29 d0                	sub    %edx,%eax
f011f6b4:	01 c8                	add    %ecx,%eax
f011f6b6:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f6bc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6c2:	39 c2                	cmp    %eax,%edx
f011f6c4:	74 17                	je     f011f6dd <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f6c6:	83 ec 04             	sub    $0x4,%esp
f011f6c9:	68 34 bd 13 f0       	push   $0xf013bd34
f011f6ce:	68 64 04 00 00       	push   $0x464
f011f6d3:	68 1a b6 13 f0       	push   $0xf013b61a
f011f6d8:	e8 28 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6dd:	e8 e6 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f6e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6e5:	74 17                	je     f011f6fe <test_kmalloc_worstfit+0xbac>
f011f6e7:	83 ec 04             	sub    $0x4,%esp
f011f6ea:	68 34 b6 13 f0       	push   $0xf013b634
f011f6ef:	68 65 04 00 00       	push   $0x465
f011f6f4:	68 1a b6 13 f0       	push   $0xf013b61a
f011f6f9:	e8 07 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f6fe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f701:	e8 a1 d7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f706:	29 c3                	sub    %eax,%ebx
f011f708:	89 d8                	mov    %ebx,%eax
f011f70a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f70f:	74 17                	je     f011f728 <test_kmalloc_worstfit+0xbd6>
f011f711:	83 ec 04             	sub    $0x4,%esp
f011f714:	68 52 bb 13 f0       	push   $0xf013bb52
f011f719:	68 66 04 00 00       	push   $0x466
f011f71e:	68 1a b6 13 f0       	push   $0xf013b61a
f011f723:	e8 dd 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f728:	ff 45 e8             	incl   -0x18(%ebp)
f011f72b:	83 ec 08             	sub    $0x8,%esp
f011f72e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f731:	68 54 bd 13 f0       	push   $0xf013bd54
f011f736:	e8 d3 15 fe ff       	call   f0100d0e <cprintf>
f011f73b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f73e:	e8 64 d7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f743:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f746:	e8 7d 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f74b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f74e:	83 ec 0c             	sub    $0xc,%esp
f011f751:	68 00 00 50 00       	push   $0x500000
f011f756:	e8 34 84 fe ff       	call   f0107b8f <kmalloc>
f011f75b:	83 c4 10             	add    $0x10,%esp
f011f75e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f764:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f76b:	10 00 00 
f011f76e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f774:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f779:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f77f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f785:	ba 00 00 00 00       	mov    $0x0,%edx
f011f78a:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f790:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f796:	29 d0                	sub    %edx,%eax
f011f798:	89 c1                	mov    %eax,%ecx
f011f79a:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f7a1:	10 00 00 
f011f7a4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f7a9:	0f b6 d0             	movzbl %al,%edx
f011f7ac:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f7b2:	01 d0                	add    %edx,%eax
f011f7b4:	48                   	dec    %eax
f011f7b5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f7bb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f7c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7c6:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f7cc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f7d2:	29 d0                	sub    %edx,%eax
f011f7d4:	01 c1                	add    %eax,%ecx
f011f7d6:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f7dd:	10 00 00 
f011f7e0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f7e5:	0f b6 c0             	movzbl %al,%eax
f011f7e8:	c1 e0 04             	shl    $0x4,%eax
f011f7eb:	89 c2                	mov    %eax,%edx
f011f7ed:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f7f3:	01 d0                	add    %edx,%eax
f011f7f5:	48                   	dec    %eax
f011f7f6:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f7fc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f802:	ba 00 00 00 00       	mov    $0x0,%edx
f011f807:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f80d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f813:	29 d0                	sub    %edx,%eax
f011f815:	01 c8                	add    %ecx,%eax
f011f817:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f81d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f823:	39 c2                	cmp    %eax,%edx
f011f825:	74 17                	je     f011f83e <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f827:	83 ec 04             	sub    $0x4,%esp
f011f82a:	68 34 bd 13 f0       	push   $0xf013bd34
f011f82f:	68 6d 04 00 00       	push   $0x46d
f011f834:	68 1a b6 13 f0       	push   $0xf013b61a
f011f839:	e8 c7 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f83e:	e8 85 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f843:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f846:	74 17                	je     f011f85f <test_kmalloc_worstfit+0xd0d>
f011f848:	83 ec 04             	sub    $0x4,%esp
f011f84b:	68 34 b6 13 f0       	push   $0xf013b634
f011f850:	68 6e 04 00 00       	push   $0x46e
f011f855:	68 1a b6 13 f0       	push   $0xf013b61a
f011f85a:	e8 a6 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f85f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f862:	e8 40 d6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f867:	29 c3                	sub    %eax,%ebx
f011f869:	89 d8                	mov    %ebx,%eax
f011f86b:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f870:	74 17                	je     f011f889 <test_kmalloc_worstfit+0xd37>
f011f872:	83 ec 04             	sub    $0x4,%esp
f011f875:	68 52 bb 13 f0       	push   $0xf013bb52
f011f87a:	68 6f 04 00 00       	push   $0x46f
f011f87f:	68 1a b6 13 f0       	push   $0xf013b61a
f011f884:	e8 7c 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f889:	ff 45 e8             	incl   -0x18(%ebp)
f011f88c:	83 ec 08             	sub    $0x8,%esp
f011f88f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f892:	68 54 bd 13 f0       	push   $0xf013bd54
f011f897:	e8 72 14 fe ff       	call   f0100d0e <cprintf>
f011f89c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f89f:	e8 03 d6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f8a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8a7:	e8 1c 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f8af:	83 ec 0c             	sub    $0xc,%esp
f011f8b2:	68 00 00 40 00       	push   $0x400000
f011f8b7:	e8 d3 82 fe ff       	call   f0107b8f <kmalloc>
f011f8bc:	83 c4 10             	add    $0x10,%esp
f011f8bf:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f8c5:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f8cc:	10 00 00 
f011f8cf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f8d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8da:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f8e0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f8e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8eb:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f8f1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f8f7:	29 d0                	sub    %edx,%eax
f011f8f9:	89 c1                	mov    %eax,%ecx
f011f8fb:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f902:	10 00 00 
f011f905:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f90a:	0f b6 d0             	movzbl %al,%edx
f011f90d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f913:	01 d0                	add    %edx,%eax
f011f915:	48                   	dec    %eax
f011f916:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f91c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f922:	ba 00 00 00 00       	mov    $0x0,%edx
f011f927:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f92d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f933:	29 d0                	sub    %edx,%eax
f011f935:	01 c1                	add    %eax,%ecx
f011f937:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f93e:	10 00 00 
f011f941:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f946:	0f b6 c0             	movzbl %al,%eax
f011f949:	c1 e0 04             	shl    $0x4,%eax
f011f94c:	89 c2                	mov    %eax,%edx
f011f94e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f954:	01 d0                	add    %edx,%eax
f011f956:	48                   	dec    %eax
f011f957:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f95d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f963:	ba 00 00 00 00       	mov    $0x0,%edx
f011f968:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f96e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f974:	29 d0                	sub    %edx,%eax
f011f976:	01 c8                	add    %ecx,%eax
f011f978:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f97e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f984:	39 c2                	cmp    %eax,%edx
f011f986:	74 17                	je     f011f99f <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f988:	83 ec 04             	sub    $0x4,%esp
f011f98b:	68 34 bd 13 f0       	push   $0xf013bd34
f011f990:	68 76 04 00 00       	push   $0x476
f011f995:	68 1a b6 13 f0       	push   $0xf013b61a
f011f99a:	e8 66 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f99f:	e8 24 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9a7:	74 17                	je     f011f9c0 <test_kmalloc_worstfit+0xe6e>
f011f9a9:	83 ec 04             	sub    $0x4,%esp
f011f9ac:	68 34 b6 13 f0       	push   $0xf013b634
f011f9b1:	68 77 04 00 00       	push   $0x477
f011f9b6:	68 1a b6 13 f0       	push   $0xf013b61a
f011f9bb:	e8 45 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f9c0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f9c3:	e8 df d4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011f9c8:	29 c3                	sub    %eax,%ebx
f011f9ca:	89 d8                	mov    %ebx,%eax
f011f9cc:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f9d1:	74 17                	je     f011f9ea <test_kmalloc_worstfit+0xe98>
f011f9d3:	83 ec 04             	sub    $0x4,%esp
f011f9d6:	68 52 bb 13 f0       	push   $0xf013bb52
f011f9db:	68 78 04 00 00       	push   $0x478
f011f9e0:	68 1a b6 13 f0       	push   $0xf013b61a
f011f9e5:	e8 1b 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f9ea:	ff 45 e8             	incl   -0x18(%ebp)
f011f9ed:	83 ec 08             	sub    $0x8,%esp
f011f9f0:	ff 75 e8             	pushl  -0x18(%ebp)
f011f9f3:	68 54 bd 13 f0       	push   $0xf013bd54
f011f9f8:	e8 11 13 fe ff       	call   f0100d0e <cprintf>
f011f9fd:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa00:	e8 a2 d4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fa05:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa08:	e8 bb 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fa10:	83 ec 0c             	sub    $0xc,%esp
f011fa13:	68 00 00 20 00       	push   $0x200000
f011fa18:	e8 72 81 fe ff       	call   f0107b8f <kmalloc>
f011fa1d:	83 c4 10             	add    $0x10,%esp
f011fa20:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fa26:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fa2d:	10 00 00 
f011fa30:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fa36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa3b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fa41:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fa47:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa4c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fa52:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fa58:	29 d0                	sub    %edx,%eax
f011fa5a:	89 c1                	mov    %eax,%ecx
f011fa5c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fa63:	10 00 00 
f011fa66:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fa6b:	0f b6 d0             	movzbl %al,%edx
f011fa6e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fa74:	01 d0                	add    %edx,%eax
f011fa76:	48                   	dec    %eax
f011fa77:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fa7d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fa83:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa88:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fa8e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fa94:	29 d0                	sub    %edx,%eax
f011fa96:	01 c1                	add    %eax,%ecx
f011fa98:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011fa9f:	10 00 00 
f011faa2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011faa7:	0f b6 c0             	movzbl %al,%eax
f011faaa:	c1 e0 04             	shl    $0x4,%eax
f011faad:	89 c2                	mov    %eax,%edx
f011faaf:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fab5:	01 d0                	add    %edx,%eax
f011fab7:	48                   	dec    %eax
f011fab8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011fabe:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fac4:	ba 00 00 00 00       	mov    $0x0,%edx
f011fac9:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011facf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fad5:	29 d0                	sub    %edx,%eax
f011fad7:	01 c8                	add    %ecx,%eax
f011fad9:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011fadf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fae5:	39 c2                	cmp    %eax,%edx
f011fae7:	74 17                	je     f011fb00 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011fae9:	83 ec 04             	sub    $0x4,%esp
f011faec:	68 34 bd 13 f0       	push   $0xf013bd34
f011faf1:	68 7f 04 00 00       	push   $0x47f
f011faf6:	68 1a b6 13 f0       	push   $0xf013b61a
f011fafb:	e8 05 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb00:	e8 c3 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb05:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb08:	74 17                	je     f011fb21 <test_kmalloc_worstfit+0xfcf>
f011fb0a:	83 ec 04             	sub    $0x4,%esp
f011fb0d:	68 34 b6 13 f0       	push   $0xf013b634
f011fb12:	68 80 04 00 00       	push   $0x480
f011fb17:	68 1a b6 13 f0       	push   $0xf013b61a
f011fb1c:	e8 e4 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb21:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb24:	e8 7e d3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fb29:	29 c3                	sub    %eax,%ebx
f011fb2b:	89 d8                	mov    %ebx,%eax
f011fb2d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb32:	74 17                	je     f011fb4b <test_kmalloc_worstfit+0xff9>
f011fb34:	83 ec 04             	sub    $0x4,%esp
f011fb37:	68 52 bb 13 f0       	push   $0xf013bb52
f011fb3c:	68 81 04 00 00       	push   $0x481
f011fb41:	68 1a b6 13 f0       	push   $0xf013b61a
f011fb46:	e8 ba 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb4b:	ff 45 e8             	incl   -0x18(%ebp)
f011fb4e:	83 ec 08             	sub    $0x8,%esp
f011fb51:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb54:	68 54 bd 13 f0       	push   $0xf013bd54
f011fb59:	e8 b0 11 fe ff       	call   f0100d0e <cprintf>
f011fb5e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb61:	e8 41 d3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fb66:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb69:	e8 5a 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011fb71:	83 ec 0c             	sub    $0xc,%esp
f011fb74:	68 00 00 18 00       	push   $0x180000
f011fb79:	e8 11 80 fe ff       	call   f0107b8f <kmalloc>
f011fb7e:	83 c4 10             	add    $0x10,%esp
f011fb81:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fb87:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fb8e:	10 00 00 
f011fb91:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fb97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb9c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fba2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fba8:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbad:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fbb3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fbb9:	29 d0                	sub    %edx,%eax
f011fbbb:	89 c1                	mov    %eax,%ecx
f011fbbd:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011fbc4:	10 00 00 
f011fbc7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fbcc:	0f b6 d0             	movzbl %al,%edx
f011fbcf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fbd5:	01 d0                	add    %edx,%eax
f011fbd7:	48                   	dec    %eax
f011fbd8:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011fbde:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fbe4:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbe9:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011fbef:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fbf5:	29 d0                	sub    %edx,%eax
f011fbf7:	01 c1                	add    %eax,%ecx
f011fbf9:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011fc00:	10 00 00 
f011fc03:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fc08:	0f b6 c0             	movzbl %al,%eax
f011fc0b:	c1 e0 04             	shl    $0x4,%eax
f011fc0e:	89 c2                	mov    %eax,%edx
f011fc10:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011fc16:	01 d0                	add    %edx,%eax
f011fc18:	48                   	dec    %eax
f011fc19:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011fc1f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc25:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc2a:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011fc30:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc36:	29 d0                	sub    %edx,%eax
f011fc38:	01 c8                	add    %ecx,%eax
f011fc3a:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011fc40:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc46:	39 c2                	cmp    %eax,%edx
f011fc48:	74 17                	je     f011fc61 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011fc4a:	83 ec 04             	sub    $0x4,%esp
f011fc4d:	68 34 bd 13 f0       	push   $0xf013bd34
f011fc52:	68 88 04 00 00       	push   $0x488
f011fc57:	68 1a b6 13 f0       	push   $0xf013b61a
f011fc5c:	e8 a4 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc61:	e8 62 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc66:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc69:	74 17                	je     f011fc82 <test_kmalloc_worstfit+0x1130>
f011fc6b:	83 ec 04             	sub    $0x4,%esp
f011fc6e:	68 34 b6 13 f0       	push   $0xf013b634
f011fc73:	68 89 04 00 00       	push   $0x489
f011fc78:	68 1a b6 13 f0       	push   $0xf013b61a
f011fc7d:	e8 83 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fc82:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc85:	e8 1d d2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fc8a:	29 c3                	sub    %eax,%ebx
f011fc8c:	89 d8                	mov    %ebx,%eax
f011fc8e:	3d 80 01 00 00       	cmp    $0x180,%eax
f011fc93:	74 17                	je     f011fcac <test_kmalloc_worstfit+0x115a>
f011fc95:	83 ec 04             	sub    $0x4,%esp
f011fc98:	68 52 bb 13 f0       	push   $0xf013bb52
f011fc9d:	68 8a 04 00 00       	push   $0x48a
f011fca2:	68 1a b6 13 f0       	push   $0xf013b61a
f011fca7:	e8 59 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fcac:	ff 45 e8             	incl   -0x18(%ebp)
f011fcaf:	83 ec 08             	sub    $0x8,%esp
f011fcb2:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcb5:	68 54 bd 13 f0       	push   $0xf013bd54
f011fcba:	e8 4f 10 fe ff       	call   f0100d0e <cprintf>
f011fcbf:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fcc2:	e8 e0 d1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fcc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fcca:	e8 f9 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011fcd2:	83 ec 0c             	sub    $0xc,%esp
f011fcd5:	68 00 00 08 00       	push   $0x80000
f011fcda:	e8 b0 7e fe ff       	call   f0107b8f <kmalloc>
f011fcdf:	83 c4 10             	add    $0x10,%esp
f011fce2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011fce8:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011fcef:	10 00 00 
f011fcf2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fcf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fcfd:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011fd03:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd09:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd0e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fd14:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd1a:	29 d0                	sub    %edx,%eax
f011fd1c:	89 c1                	mov    %eax,%ecx
f011fd1e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fd25:	10 00 00 
f011fd28:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fd2d:	0f b6 d0             	movzbl %al,%edx
f011fd30:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fd36:	01 d0                	add    %edx,%eax
f011fd38:	48                   	dec    %eax
f011fd39:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fd3f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fd45:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd4a:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fd50:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fd56:	29 d0                	sub    %edx,%eax
f011fd58:	01 c1                	add    %eax,%ecx
f011fd5a:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fd61:	10 00 00 
f011fd64:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fd69:	0f b6 c0             	movzbl %al,%eax
f011fd6c:	c1 e0 04             	shl    $0x4,%eax
f011fd6f:	89 c2                	mov    %eax,%edx
f011fd71:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fd77:	01 d0                	add    %edx,%eax
f011fd79:	48                   	dec    %eax
f011fd7a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fd80:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fd86:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd8b:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fd91:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fd97:	29 d0                	sub    %edx,%eax
f011fd99:	01 c8                	add    %ecx,%eax
f011fd9b:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011fda1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fda7:	39 c2                	cmp    %eax,%edx
f011fda9:	74 17                	je     f011fdc2 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011fdab:	83 ec 04             	sub    $0x4,%esp
f011fdae:	68 34 bd 13 f0       	push   $0xf013bd34
f011fdb3:	68 91 04 00 00       	push   $0x491
f011fdb8:	68 1a b6 13 f0       	push   $0xf013b61a
f011fdbd:	e8 43 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdc2:	e8 01 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fdc7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fdca:	74 17                	je     f011fde3 <test_kmalloc_worstfit+0x1291>
f011fdcc:	83 ec 04             	sub    $0x4,%esp
f011fdcf:	68 34 b6 13 f0       	push   $0xf013b634
f011fdd4:	68 92 04 00 00       	push   $0x492
f011fdd9:	68 1a b6 13 f0       	push   $0xf013b61a
f011fdde:	e8 22 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fde3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fde6:	e8 bc d0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fdeb:	29 c3                	sub    %eax,%ebx
f011fded:	89 d8                	mov    %ebx,%eax
f011fdef:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fdf4:	74 17                	je     f011fe0d <test_kmalloc_worstfit+0x12bb>
f011fdf6:	83 ec 04             	sub    $0x4,%esp
f011fdf9:	68 52 bb 13 f0       	push   $0xf013bb52
f011fdfe:	68 93 04 00 00       	push   $0x493
f011fe03:	68 1a b6 13 f0       	push   $0xf013b61a
f011fe08:	e8 f8 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe0d:	ff 45 e8             	incl   -0x18(%ebp)
f011fe10:	83 ec 08             	sub    $0x8,%esp
f011fe13:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe16:	68 54 bd 13 f0       	push   $0xf013bd54
f011fe1b:	e8 ee 0e fe ff       	call   f0100d0e <cprintf>
f011fe20:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe23:	e8 7f d0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011fe28:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe2b:	e8 98 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe30:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fe33:	83 ec 0c             	sub    $0xc,%esp
f011fe36:	68 00 04 00 00       	push   $0x400
f011fe3b:	e8 4f 7d fe ff       	call   f0107b8f <kmalloc>
f011fe40:	83 c4 10             	add    $0x10,%esp
f011fe43:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011fe49:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011fe50:	10 00 00 
f011fe53:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011fe59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe5e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fe64:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fe6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe6f:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011fe75:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fe7b:	29 d0                	sub    %edx,%eax
f011fe7d:	89 c1                	mov    %eax,%ecx
f011fe7f:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011fe86:	10 00 00 
f011fe89:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fe8e:	0f b6 d0             	movzbl %al,%edx
f011fe91:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fe97:	01 d0                	add    %edx,%eax
f011fe99:	48                   	dec    %eax
f011fe9a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011fea0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fea6:	ba 00 00 00 00       	mov    $0x0,%edx
f011feab:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011feb1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011feb7:	29 d0                	sub    %edx,%eax
f011feb9:	01 c1                	add    %eax,%ecx
f011febb:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fec2:	10 00 00 
f011fec5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011feca:	0f b6 c0             	movzbl %al,%eax
f011fecd:	c1 e0 04             	shl    $0x4,%eax
f011fed0:	89 c2                	mov    %eax,%edx
f011fed2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fed8:	01 d0                	add    %edx,%eax
f011feda:	48                   	dec    %eax
f011fedb:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011fee1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fee7:	ba 00 00 00 00       	mov    $0x0,%edx
f011feec:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fef2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fef8:	29 d0                	sub    %edx,%eax
f011fefa:	01 c8                	add    %ecx,%eax
f011fefc:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ff02:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff08:	39 c2                	cmp    %eax,%edx
f011ff0a:	74 17                	je     f011ff23 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011ff0c:	83 ec 04             	sub    $0x4,%esp
f011ff0f:	68 34 bd 13 f0       	push   $0xf013bd34
f011ff14:	68 9a 04 00 00       	push   $0x49a
f011ff19:	68 1a b6 13 f0       	push   $0xf013b61a
f011ff1e:	e8 e2 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff23:	e8 a0 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff28:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff2b:	74 17                	je     f011ff44 <test_kmalloc_worstfit+0x13f2>
f011ff2d:	83 ec 04             	sub    $0x4,%esp
f011ff30:	68 34 b6 13 f0       	push   $0xf013b634
f011ff35:	68 9b 04 00 00       	push   $0x49b
f011ff3a:	68 1a b6 13 f0       	push   $0xf013b61a
f011ff3f:	e8 c1 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ff44:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff47:	e8 5b cf fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011ff4c:	29 c3                	sub    %eax,%ebx
f011ff4e:	89 d8                	mov    %ebx,%eax
f011ff50:	83 f8 01             	cmp    $0x1,%eax
f011ff53:	74 17                	je     f011ff6c <test_kmalloc_worstfit+0x141a>
f011ff55:	83 ec 04             	sub    $0x4,%esp
f011ff58:	68 52 bb 13 f0       	push   $0xf013bb52
f011ff5d:	68 9c 04 00 00       	push   $0x49c
f011ff62:	68 1a b6 13 f0       	push   $0xf013b61a
f011ff67:	e8 99 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ff6c:	ff 45 e8             	incl   -0x18(%ebp)
f011ff6f:	83 ec 08             	sub    $0x8,%esp
f011ff72:	ff 75 e8             	pushl  -0x18(%ebp)
f011ff75:	68 54 bd 13 f0       	push   $0xf013bd54
f011ff7a:	e8 8f 0d fe ff       	call   f0100d0e <cprintf>
f011ff7f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ff82:	e8 20 cf fe ff       	call   f010cea7 <sys_calculate_free_frames>
f011ff87:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ff8a:	e8 39 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011ff92:	83 ec 0c             	sub    $0xc,%esp
f011ff95:	68 00 f0 1f 00       	push   $0x1ff000
f011ff9a:	e8 f0 7b fe ff       	call   f0107b8f <kmalloc>
f011ff9f:	83 c4 10             	add    $0x10,%esp
f011ffa2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011ffa8:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011ffaf:	10 00 00 
f011ffb2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011ffb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ffbd:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011ffc3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ffc9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffce:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011ffd4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ffda:	29 d0                	sub    %edx,%eax
f011ffdc:	89 c1                	mov    %eax,%ecx
f011ffde:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011ffe5:	10 00 00 
f011ffe8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ffed:	0f b6 d0             	movzbl %al,%edx
f011fff0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011fff6:	01 d0                	add    %edx,%eax
f011fff8:	48                   	dec    %eax
f011fff9:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011ffff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120005:	ba 00 00 00 00       	mov    $0x0,%edx
f012000a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120010:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120016:	29 d0                	sub    %edx,%eax
f0120018:	01 c1                	add    %eax,%ecx
f012001a:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0120021:	10 00 00 
f0120024:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120029:	0f b6 c0             	movzbl %al,%eax
f012002c:	c1 e0 04             	shl    $0x4,%eax
f012002f:	89 c2                	mov    %eax,%edx
f0120031:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120037:	01 d0                	add    %edx,%eax
f0120039:	48                   	dec    %eax
f012003a:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0120040:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120046:	ba 00 00 00 00       	mov    $0x0,%edx
f012004b:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0120051:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120057:	29 d0                	sub    %edx,%eax
f0120059:	01 c8                	add    %ecx,%eax
f012005b:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f0120061:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120067:	39 c2                	cmp    %eax,%edx
f0120069:	74 17                	je     f0120082 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f012006b:	83 ec 04             	sub    $0x4,%esp
f012006e:	68 34 bd 13 f0       	push   $0xf013bd34
f0120073:	68 a3 04 00 00       	push   $0x4a3
f0120078:	68 1a b6 13 f0       	push   $0xf013b61a
f012007d:	e8 83 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120082:	e8 41 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120087:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012008a:	74 17                	je     f01200a3 <test_kmalloc_worstfit+0x1551>
f012008c:	83 ec 04             	sub    $0x4,%esp
f012008f:	68 34 b6 13 f0       	push   $0xf013b634
f0120094:	68 a4 04 00 00       	push   $0x4a4
f0120099:	68 1a b6 13 f0       	push   $0xf013b61a
f012009e:	e8 62 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01200a3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01200a6:	e8 fc cd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01200ab:	29 c3                	sub    %eax,%ebx
f01200ad:	89 d8                	mov    %ebx,%eax
f01200af:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01200b4:	74 17                	je     f01200cd <test_kmalloc_worstfit+0x157b>
f01200b6:	83 ec 04             	sub    $0x4,%esp
f01200b9:	68 52 bb 13 f0       	push   $0xf013bb52
f01200be:	68 a5 04 00 00       	push   $0x4a5
f01200c3:	68 1a b6 13 f0       	push   $0xf013b61a
f01200c8:	e8 38 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01200cd:	ff 45 e8             	incl   -0x18(%ebp)
f01200d0:	83 ec 08             	sub    $0x8,%esp
f01200d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01200d6:	68 54 bd 13 f0       	push   $0xf013bd54
f01200db:	e8 2e 0c fe ff       	call   f0100d0e <cprintf>
f01200e0:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01200e3:	e8 bf cd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01200e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01200eb:	e8 d8 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01200f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f01200f3:	83 ec 0c             	sub    $0xc,%esp
f01200f6:	68 00 00 40 00       	push   $0x400000
f01200fb:	e8 8f 7a fe ff       	call   f0107b8f <kmalloc>
f0120100:	83 c4 10             	add    $0x10,%esp
f0120103:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f0120109:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012010f:	85 c0                	test   %eax,%eax
f0120111:	74 17                	je     f012012a <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120113:	83 ec 04             	sub    $0x4,%esp
f0120116:	68 34 bd 13 f0       	push   $0xf013bd34
f012011b:	68 ad 04 00 00       	push   $0x4ad
f0120120:	68 1a b6 13 f0       	push   $0xf013b61a
f0120125:	e8 db 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012012a:	e8 99 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012012f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120132:	74 17                	je     f012014b <test_kmalloc_worstfit+0x15f9>
f0120134:	83 ec 04             	sub    $0x4,%esp
f0120137:	68 34 b6 13 f0       	push   $0xf013b634
f012013c:	68 ae 04 00 00       	push   $0x4ae
f0120141:	68 1a b6 13 f0       	push   $0xf013b61a
f0120146:	e8 ba 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f012014b:	e8 57 cd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120150:	89 c2                	mov    %eax,%edx
f0120152:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120155:	39 c2                	cmp    %eax,%edx
f0120157:	74 17                	je     f0120170 <test_kmalloc_worstfit+0x161e>
f0120159:	83 ec 04             	sub    $0x4,%esp
f012015c:	68 52 bb 13 f0       	push   $0xf013bb52
f0120161:	68 af 04 00 00       	push   $0x4af
f0120166:	68 1a b6 13 f0       	push   $0xf013b61a
f012016b:	e8 95 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120170:	ff 45 e8             	incl   -0x18(%ebp)
f0120173:	83 ec 08             	sub    $0x8,%esp
f0120176:	ff 75 e8             	pushl  -0x18(%ebp)
f0120179:	68 54 bd 13 f0       	push   $0xf013bd54
f012017e:	e8 8b 0b fe ff       	call   f0100d0e <cprintf>
f0120183:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0120186:	83 ec 0c             	sub    $0xc,%esp
f0120189:	68 68 bd 13 f0       	push   $0xf013bd68
f012018e:	e8 7b 0b fe ff       	call   f0100d0e <cprintf>
f0120193:	83 c4 10             	add    $0x10,%esp


	return 1;
f0120196:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012019b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012019e:	5b                   	pop    %ebx
f012019f:	5f                   	pop    %edi
f01201a0:	5d                   	pop    %ebp
f01201a1:	c3                   	ret    

f01201a2 <test_kfree>:

int test_kfree()
{
f01201a2:	55                   	push   %ebp
f01201a3:	89 e5                	mov    %esp,%ebp
f01201a5:	57                   	push   %edi
f01201a6:	53                   	push   %ebx
f01201a7:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01201ad:	83 ec 0c             	sub    $0xc,%esp
f01201b0:	68 5c b5 13 f0       	push   $0xf013b55c
f01201b5:	e8 54 0b fe ff       	call   f0100d0e <cprintf>
f01201ba:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01201bd:	83 ec 0c             	sub    $0xc,%esp
f01201c0:	68 8c b5 13 f0       	push   $0xf013b58c
f01201c5:	e8 44 0b fe ff       	call   f0100d0e <cprintf>
f01201ca:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01201cd:	83 ec 0c             	sub    $0xc,%esp
f01201d0:	68 5c b5 13 f0       	push   $0xf013b55c
f01201d5:	e8 34 0b fe ff       	call   f0100d0e <cprintf>
f01201da:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01201dd:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01201e1:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01201e5:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01201eb:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01201f1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01201f8:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01201ff:	e8 a3 cc fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120204:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120207:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f012020d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120212:	b8 00 00 00 00       	mov    $0x0,%eax
f0120217:	89 d7                	mov    %edx,%edi
f0120219:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012021b:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f0120221:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120226:	b8 00 00 00 00       	mov    $0x0,%eax
f012022b:	89 d7                	mov    %edx,%edi
f012022d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012022f:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120235:	b9 14 00 00 00       	mov    $0x14,%ecx
f012023a:	b8 00 00 00 00       	mov    $0x0,%eax
f012023f:	89 d7                	mov    %edx,%edi
f0120241:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120243:	e8 5f cc fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120248:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012024b:	e8 78 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120250:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0120253:	83 ec 0c             	sub    $0xc,%esp
f0120256:	68 00 fc 1f 00       	push   $0x1ffc00
f012025b:	e8 2f 79 fe ff       	call   f0107b8f <kmalloc>
f0120260:	83 c4 10             	add    $0x10,%esp
f0120263:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120269:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012026f:	89 c1                	mov    %eax,%ecx
f0120271:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0120278:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012027b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120280:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0120283:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120286:	ba 00 00 00 00       	mov    $0x0,%edx
f012028b:	f7 75 c8             	divl   -0x38(%ebp)
f012028e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120291:	29 d0                	sub    %edx,%eax
f0120293:	89 c3                	mov    %eax,%ebx
f0120295:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012029c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01202a1:	0f b6 d0             	movzbl %al,%edx
f01202a4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01202a7:	01 d0                	add    %edx,%eax
f01202a9:	48                   	dec    %eax
f01202aa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01202ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01202b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01202b5:	f7 75 c0             	divl   -0x40(%ebp)
f01202b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01202bb:	29 d0                	sub    %edx,%eax
f01202bd:	01 c3                	add    %eax,%ebx
f01202bf:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01202c6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01202cb:	0f b6 c0             	movzbl %al,%eax
f01202ce:	c1 e0 04             	shl    $0x4,%eax
f01202d1:	89 c2                	mov    %eax,%edx
f01202d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01202d6:	01 d0                	add    %edx,%eax
f01202d8:	48                   	dec    %eax
f01202d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01202dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01202df:	ba 00 00 00 00       	mov    $0x0,%edx
f01202e4:	f7 75 b8             	divl   -0x48(%ebp)
f01202e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01202ea:	29 d0                	sub    %edx,%eax
f01202ec:	01 d8                	add    %ebx,%eax
f01202ee:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01202f3:	39 c1                	cmp    %eax,%ecx
f01202f5:	74 17                	je     f012030e <test_kfree+0x16c>
f01202f7:	83 ec 04             	sub    $0x4,%esp
f01202fa:	68 00 b7 13 f0       	push   $0xf013b700
f01202ff:	68 d7 04 00 00       	push   $0x4d7
f0120304:	68 1a b6 13 f0       	push   $0xf013b61a
f0120309:	e8 f7 fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012030e:	e8 b5 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120313:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120316:	74 17                	je     f012032f <test_kfree+0x18d>
f0120318:	83 ec 04             	sub    $0x4,%esp
f012031b:	68 34 b6 13 f0       	push   $0xf013b634
f0120320:	68 d8 04 00 00       	push   $0x4d8
f0120325:	68 1a b6 13 f0       	push   $0xf013b61a
f012032a:	e8 d6 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012032f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120332:	e8 70 cb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120337:	29 c3                	sub    %eax,%ebx
f0120339:	89 d8                	mov    %ebx,%eax
f012033b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120340:	74 17                	je     f0120359 <test_kfree+0x1b7>
f0120342:	83 ec 04             	sub    $0x4,%esp
f0120345:	68 9c b6 13 f0       	push   $0xf013b69c
f012034a:	68 d9 04 00 00       	push   $0x4d9
f012034f:	68 1a b6 13 f0       	push   $0xf013b61a
f0120354:	e8 ac fe fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0120359:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f0120360:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120363:	e8 3f cb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120368:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012036b:	e8 58 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120370:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0120373:	83 ec 0c             	sub    $0xc,%esp
f0120376:	68 00 fc 1f 00       	push   $0x1ffc00
f012037b:	e8 0f 78 fe ff       	call   f0107b8f <kmalloc>
f0120380:	83 c4 10             	add    $0x10,%esp
f0120383:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120389:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f012038f:	89 c1                	mov    %eax,%ecx
f0120391:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0120398:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012039b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203a0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01203a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01203a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01203ab:	f7 75 b0             	divl   -0x50(%ebp)
f01203ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01203b1:	29 d0                	sub    %edx,%eax
f01203b3:	89 c3                	mov    %eax,%ebx
f01203b5:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01203bc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01203c1:	0f b6 d0             	movzbl %al,%edx
f01203c4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01203c7:	01 d0                	add    %edx,%eax
f01203c9:	48                   	dec    %eax
f01203ca:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01203cd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01203d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01203d5:	f7 75 a8             	divl   -0x58(%ebp)
f01203d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01203db:	29 d0                	sub    %edx,%eax
f01203dd:	01 c3                	add    %eax,%ebx
f01203df:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01203e6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01203eb:	0f b6 c0             	movzbl %al,%eax
f01203ee:	c1 e0 04             	shl    $0x4,%eax
f01203f1:	89 c2                	mov    %eax,%edx
f01203f3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01203f6:	01 d0                	add    %edx,%eax
f01203f8:	48                   	dec    %eax
f01203f9:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01203fc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01203ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120404:	f7 75 a0             	divl   -0x60(%ebp)
f0120407:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012040a:	29 d0                	sub    %edx,%eax
f012040c:	01 d8                	add    %ebx,%eax
f012040e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120413:	39 c1                	cmp    %eax,%ecx
f0120415:	74 17                	je     f012042e <test_kfree+0x28c>
f0120417:	83 ec 04             	sub    $0x4,%esp
f012041a:	68 00 b7 13 f0       	push   $0xf013b700
f012041f:	68 e0 04 00 00       	push   $0x4e0
f0120424:	68 1a b6 13 f0       	push   $0xf013b61a
f0120429:	e8 d7 fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012042e:	e8 95 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120433:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120436:	74 17                	je     f012044f <test_kfree+0x2ad>
f0120438:	83 ec 04             	sub    $0x4,%esp
f012043b:	68 34 b6 13 f0       	push   $0xf013b634
f0120440:	68 e1 04 00 00       	push   $0x4e1
f0120445:	68 1a b6 13 f0       	push   $0xf013b61a
f012044a:	e8 b6 fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012044f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120452:	e8 50 ca fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120457:	29 c3                	sub    %eax,%ebx
f0120459:	89 d8                	mov    %ebx,%eax
f012045b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120460:	74 17                	je     f0120479 <test_kfree+0x2d7>
f0120462:	83 ec 04             	sub    $0x4,%esp
f0120465:	68 9c b6 13 f0       	push   $0xf013b69c
f012046a:	68 e2 04 00 00       	push   $0x4e2
f012046f:	68 1a b6 13 f0       	push   $0xf013b61a
f0120474:	e8 8c fd fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0120479:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f0120480:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120483:	e8 1f ca fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120488:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012048b:	e8 38 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120490:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0120493:	83 ec 0c             	sub    $0xc,%esp
f0120496:	68 00 08 00 00       	push   $0x800
f012049b:	e8 ef 76 fe ff       	call   f0107b8f <kmalloc>
f01204a0:	83 c4 10             	add    $0x10,%esp
f01204a3:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204a9:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01204af:	89 c1                	mov    %eax,%ecx
f01204b1:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01204b8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01204bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204c0:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01204c3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01204c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01204cb:	f7 75 98             	divl   -0x68(%ebp)
f01204ce:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01204d1:	29 d0                	sub    %edx,%eax
f01204d3:	89 c3                	mov    %eax,%ebx
f01204d5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01204dc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01204e1:	0f b6 d0             	movzbl %al,%edx
f01204e4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01204e7:	01 d0                	add    %edx,%eax
f01204e9:	48                   	dec    %eax
f01204ea:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01204ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01204f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01204f5:	f7 75 90             	divl   -0x70(%ebp)
f01204f8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01204fb:	29 d0                	sub    %edx,%eax
f01204fd:	01 c3                	add    %eax,%ebx
f01204ff:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120506:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012050b:	0f b6 c0             	movzbl %al,%eax
f012050e:	c1 e0 04             	shl    $0x4,%eax
f0120511:	89 c2                	mov    %eax,%edx
f0120513:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120516:	01 d0                	add    %edx,%eax
f0120518:	48                   	dec    %eax
f0120519:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012051c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012051f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120524:	f7 75 88             	divl   -0x78(%ebp)
f0120527:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012052a:	29 d0                	sub    %edx,%eax
f012052c:	01 d8                	add    %ebx,%eax
f012052e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120533:	39 c1                	cmp    %eax,%ecx
f0120535:	74 17                	je     f012054e <test_kfree+0x3ac>
f0120537:	83 ec 04             	sub    $0x4,%esp
f012053a:	68 00 b7 13 f0       	push   $0xf013b700
f012053f:	68 e9 04 00 00       	push   $0x4e9
f0120544:	68 1a b6 13 f0       	push   $0xf013b61a
f0120549:	e8 b7 fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012054e:	e8 75 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120553:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120556:	74 17                	je     f012056f <test_kfree+0x3cd>
f0120558:	83 ec 04             	sub    $0x4,%esp
f012055b:	68 34 b6 13 f0       	push   $0xf013b634
f0120560:	68 ea 04 00 00       	push   $0x4ea
f0120565:	68 1a b6 13 f0       	push   $0xf013b61a
f012056a:	e8 96 fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012056f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120572:	e8 30 c9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120577:	29 c3                	sub    %eax,%ebx
f0120579:	89 d8                	mov    %ebx,%eax
f012057b:	83 f8 01             	cmp    $0x1,%eax
f012057e:	74 17                	je     f0120597 <test_kfree+0x3f5>
f0120580:	83 ec 04             	sub    $0x4,%esp
f0120583:	68 9c b6 13 f0       	push   $0xf013b69c
f0120588:	68 eb 04 00 00       	push   $0x4eb
f012058d:	68 1a b6 13 f0       	push   $0xf013b61a
f0120592:	e8 6e fc fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0120597:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f012059e:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01205a1:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01205a7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01205aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205b1:	eb 0e                	jmp    f01205c1 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01205b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205b9:	01 d0                	add    %edx,%eax
f01205bb:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01205be:	ff 45 f4             	incl   -0xc(%ebp)
f01205c1:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01205c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205ca:	7f e7                	jg     f01205b3 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01205cc:	e8 d6 c8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01205d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205d4:	e8 ef 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01205dc:	83 ec 0c             	sub    $0xc,%esp
f01205df:	68 00 08 00 00       	push   $0x800
f01205e4:	e8 a6 75 fe ff       	call   f0107b8f <kmalloc>
f01205e9:	83 c4 10             	add    $0x10,%esp
f01205ec:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205f2:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01205f8:	89 c1                	mov    %eax,%ecx
f01205fa:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120601:	10 00 00 
f0120604:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012060a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012060f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120615:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012061b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120620:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120626:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012062c:	29 d0                	sub    %edx,%eax
f012062e:	89 c3                	mov    %eax,%ebx
f0120630:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120637:	10 00 00 
f012063a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012063f:	0f b6 d0             	movzbl %al,%edx
f0120642:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120648:	01 d0                	add    %edx,%eax
f012064a:	48                   	dec    %eax
f012064b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120651:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120657:	ba 00 00 00 00       	mov    $0x0,%edx
f012065c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120662:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120668:	29 d0                	sub    %edx,%eax
f012066a:	01 c3                	add    %eax,%ebx
f012066c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120673:	10 00 00 
f0120676:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012067b:	0f b6 c0             	movzbl %al,%eax
f012067e:	c1 e0 04             	shl    $0x4,%eax
f0120681:	89 c2                	mov    %eax,%edx
f0120683:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120689:	01 d0                	add    %edx,%eax
f012068b:	48                   	dec    %eax
f012068c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120692:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120698:	ba 00 00 00 00       	mov    $0x0,%edx
f012069d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01206a3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01206a9:	29 d0                	sub    %edx,%eax
f01206ab:	01 d8                	add    %ebx,%eax
f01206ad:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01206b2:	39 c1                	cmp    %eax,%ecx
f01206b4:	74 17                	je     f01206cd <test_kfree+0x52b>
f01206b6:	83 ec 04             	sub    $0x4,%esp
f01206b9:	68 00 b7 13 f0       	push   $0xf013b700
f01206be:	68 f7 04 00 00       	push   $0x4f7
f01206c3:	68 1a b6 13 f0       	push   $0xf013b61a
f01206c8:	e8 38 fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206cd:	e8 f6 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206d5:	74 17                	je     f01206ee <test_kfree+0x54c>
f01206d7:	83 ec 04             	sub    $0x4,%esp
f01206da:	68 34 b6 13 f0       	push   $0xf013b634
f01206df:	68 f8 04 00 00       	push   $0x4f8
f01206e4:	68 1a b6 13 f0       	push   $0xf013b61a
f01206e9:	e8 17 fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206f1:	e8 b1 c7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01206f6:	29 c3                	sub    %eax,%ebx
f01206f8:	89 d8                	mov    %ebx,%eax
f01206fa:	83 f8 01             	cmp    $0x1,%eax
f01206fd:	74 17                	je     f0120716 <test_kfree+0x574>
f01206ff:	83 ec 04             	sub    $0x4,%esp
f0120702:	68 9c b6 13 f0       	push   $0xf013b69c
f0120707:	68 f9 04 00 00       	push   $0x4f9
f012070c:	68 1a b6 13 f0       	push   $0xf013b61a
f0120711:	e8 ef fa fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120716:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f012071d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120720:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120726:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120730:	eb 0e                	jmp    f0120740 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120732:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120735:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120738:	01 d0                	add    %edx,%eax
f012073a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012073d:	ff 45 f4             	incl   -0xc(%ebp)
f0120740:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120746:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120749:	7f e7                	jg     f0120732 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012074b:	e8 57 c7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120750:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120753:	e8 70 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120758:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012075b:	83 ec 0c             	sub    $0xc,%esp
f012075e:	68 00 1c 00 00       	push   $0x1c00
f0120763:	e8 27 74 fe ff       	call   f0107b8f <kmalloc>
f0120768:	83 c4 10             	add    $0x10,%esp
f012076b:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120771:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120777:	89 c1                	mov    %eax,%ecx
f0120779:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120780:	10 00 00 
f0120783:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120789:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012078e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120794:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012079a:	ba 00 00 00 00       	mov    $0x0,%edx
f012079f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01207a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01207ab:	29 d0                	sub    %edx,%eax
f01207ad:	89 c3                	mov    %eax,%ebx
f01207af:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01207b6:	10 00 00 
f01207b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01207be:	0f b6 d0             	movzbl %al,%edx
f01207c1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01207c7:	01 d0                	add    %edx,%eax
f01207c9:	48                   	dec    %eax
f01207ca:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01207d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01207d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01207db:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01207e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01207e7:	29 d0                	sub    %edx,%eax
f01207e9:	01 c3                	add    %eax,%ebx
f01207eb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01207f2:	10 00 00 
f01207f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01207fa:	0f b6 c0             	movzbl %al,%eax
f01207fd:	c1 e0 04             	shl    $0x4,%eax
f0120800:	89 c2                	mov    %eax,%edx
f0120802:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120808:	01 d0                	add    %edx,%eax
f012080a:	48                   	dec    %eax
f012080b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120811:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120817:	ba 00 00 00 00       	mov    $0x0,%edx
f012081c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120822:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120828:	29 d0                	sub    %edx,%eax
f012082a:	01 d8                	add    %ebx,%eax
f012082c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120831:	39 c1                	cmp    %eax,%ecx
f0120833:	74 17                	je     f012084c <test_kfree+0x6aa>
f0120835:	83 ec 04             	sub    $0x4,%esp
f0120838:	68 00 b7 13 f0       	push   $0xf013b700
f012083d:	68 05 05 00 00       	push   $0x505
f0120842:	68 1a b6 13 f0       	push   $0xf013b61a
f0120847:	e8 b9 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012084c:	e8 77 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120851:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120854:	74 17                	je     f012086d <test_kfree+0x6cb>
f0120856:	83 ec 04             	sub    $0x4,%esp
f0120859:	68 34 b6 13 f0       	push   $0xf013b634
f012085e:	68 06 05 00 00       	push   $0x506
f0120863:	68 1a b6 13 f0       	push   $0xf013b61a
f0120868:	e8 98 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012086d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120870:	e8 32 c6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120875:	29 c3                	sub    %eax,%ebx
f0120877:	89 d8                	mov    %ebx,%eax
f0120879:	83 f8 02             	cmp    $0x2,%eax
f012087c:	74 17                	je     f0120895 <test_kfree+0x6f3>
f012087e:	83 ec 04             	sub    $0x4,%esp
f0120881:	68 9c b6 13 f0       	push   $0xf013b69c
f0120886:	68 07 05 00 00       	push   $0x507
f012088b:	68 1a b6 13 f0       	push   $0xf013b61a
f0120890:	e8 70 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120895:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f012089c:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012089f:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01208a5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01208a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208af:	eb 0e                	jmp    f01208bf <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f01208b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01208b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01208b7:	01 d0                	add    %edx,%eax
f01208b9:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01208bc:	ff 45 f4             	incl   -0xc(%ebp)
f01208bf:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01208c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208c8:	7f e7                	jg     f01208b1 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01208ca:	e8 d8 c5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01208cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208d2:	e8 f1 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01208da:	83 ec 0c             	sub    $0xc,%esp
f01208dd:	68 00 fc 2f 00       	push   $0x2ffc00
f01208e2:	e8 a8 72 fe ff       	call   f0107b8f <kmalloc>
f01208e7:	83 c4 10             	add    $0x10,%esp
f01208ea:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208f0:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01208f6:	89 c1                	mov    %eax,%ecx
f01208f8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01208ff:	10 00 00 
f0120902:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120908:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012090d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120913:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120919:	ba 00 00 00 00       	mov    $0x0,%edx
f012091e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120924:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012092a:	29 d0                	sub    %edx,%eax
f012092c:	89 c3                	mov    %eax,%ebx
f012092e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120935:	10 00 00 
f0120938:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012093d:	0f b6 d0             	movzbl %al,%edx
f0120940:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120946:	01 d0                	add    %edx,%eax
f0120948:	48                   	dec    %eax
f0120949:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012094f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120955:	ba 00 00 00 00       	mov    $0x0,%edx
f012095a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120960:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120966:	29 d0                	sub    %edx,%eax
f0120968:	01 c3                	add    %eax,%ebx
f012096a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120971:	10 00 00 
f0120974:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120979:	0f b6 c0             	movzbl %al,%eax
f012097c:	c1 e0 04             	shl    $0x4,%eax
f012097f:	89 c2                	mov    %eax,%edx
f0120981:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120987:	01 d0                	add    %edx,%eax
f0120989:	48                   	dec    %eax
f012098a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120990:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120996:	ba 00 00 00 00       	mov    $0x0,%edx
f012099b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01209a1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01209a7:	29 d0                	sub    %edx,%eax
f01209a9:	01 d8                	add    %ebx,%eax
f01209ab:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01209b0:	39 c1                	cmp    %eax,%ecx
f01209b2:	74 17                	je     f01209cb <test_kfree+0x829>
f01209b4:	83 ec 04             	sub    $0x4,%esp
f01209b7:	68 00 b7 13 f0       	push   $0xf013b700
f01209bc:	68 13 05 00 00       	push   $0x513
f01209c1:	68 1a b6 13 f0       	push   $0xf013b61a
f01209c6:	e8 3a f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209cb:	e8 f8 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01209d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209d3:	74 17                	je     f01209ec <test_kfree+0x84a>
f01209d5:	83 ec 04             	sub    $0x4,%esp
f01209d8:	68 34 b6 13 f0       	push   $0xf013b634
f01209dd:	68 14 05 00 00       	push   $0x514
f01209e2:	68 1a b6 13 f0       	push   $0xf013b61a
f01209e7:	e8 19 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209ec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209ef:	e8 b3 c4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01209f4:	29 c3                	sub    %eax,%ebx
f01209f6:	89 d8                	mov    %ebx,%eax
f01209f8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01209fd:	74 17                	je     f0120a16 <test_kfree+0x874>
f01209ff:	83 ec 04             	sub    $0x4,%esp
f0120a02:	68 9c b6 13 f0       	push   $0xf013b69c
f0120a07:	68 15 05 00 00       	push   $0x515
f0120a0c:	68 1a b6 13 f0       	push   $0xf013b61a
f0120a11:	e8 ef f7 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120a16:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120a1d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120a20:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120a26:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120a29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a30:	eb 0e                	jmp    f0120a40 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120a32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a35:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a38:	01 d0                	add    %edx,%eax
f0120a3a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120a3d:	ff 45 f4             	incl   -0xc(%ebp)
f0120a40:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120a46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a49:	7f e7                	jg     f0120a32 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a4b:	e8 57 c4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120a50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a53:	e8 70 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a58:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120a5b:	83 ec 0c             	sub    $0xc,%esp
f0120a5e:	68 00 fc 5f 00       	push   $0x5ffc00
f0120a63:	e8 27 71 fe ff       	call   f0107b8f <kmalloc>
f0120a68:	83 c4 10             	add    $0x10,%esp
f0120a6b:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a71:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120a77:	89 c1                	mov    %eax,%ecx
f0120a79:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120a80:	10 00 00 
f0120a83:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120a89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a8e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120a94:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120a9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a9f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120aa5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120aab:	29 d0                	sub    %edx,%eax
f0120aad:	89 c3                	mov    %eax,%ebx
f0120aaf:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120ab6:	10 00 00 
f0120ab9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120abe:	0f b6 d0             	movzbl %al,%edx
f0120ac1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120ac7:	01 d0                	add    %edx,%eax
f0120ac9:	48                   	dec    %eax
f0120aca:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120ad0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120ad6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120adb:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120ae1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120ae7:	29 d0                	sub    %edx,%eax
f0120ae9:	01 c3                	add    %eax,%ebx
f0120aeb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120af2:	10 00 00 
f0120af5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120afa:	0f b6 c0             	movzbl %al,%eax
f0120afd:	c1 e0 04             	shl    $0x4,%eax
f0120b00:	89 c2                	mov    %eax,%edx
f0120b02:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120b08:	01 d0                	add    %edx,%eax
f0120b0a:	48                   	dec    %eax
f0120b0b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120b11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b17:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b1c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120b22:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b28:	29 d0                	sub    %edx,%eax
f0120b2a:	01 d8                	add    %ebx,%eax
f0120b2c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120b31:	39 c1                	cmp    %eax,%ecx
f0120b33:	74 17                	je     f0120b4c <test_kfree+0x9aa>
f0120b35:	83 ec 04             	sub    $0x4,%esp
f0120b38:	68 00 b7 13 f0       	push   $0xf013b700
f0120b3d:	68 21 05 00 00       	push   $0x521
f0120b42:	68 1a b6 13 f0       	push   $0xf013b61a
f0120b47:	e8 b9 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b4c:	e8 77 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b51:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b54:	74 17                	je     f0120b6d <test_kfree+0x9cb>
f0120b56:	83 ec 04             	sub    $0x4,%esp
f0120b59:	68 34 b6 13 f0       	push   $0xf013b634
f0120b5e:	68 22 05 00 00       	push   $0x522
f0120b63:	68 1a b6 13 f0       	push   $0xf013b61a
f0120b68:	e8 98 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b6d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b70:	e8 32 c3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120b75:	29 c3                	sub    %eax,%ebx
f0120b77:	89 d8                	mov    %ebx,%eax
f0120b79:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120b7e:	74 17                	je     f0120b97 <test_kfree+0x9f5>
f0120b80:	83 ec 04             	sub    $0x4,%esp
f0120b83:	68 9c b6 13 f0       	push   $0xf013b69c
f0120b88:	68 23 05 00 00       	push   $0x523
f0120b8d:	68 1a b6 13 f0       	push   $0xf013b61a
f0120b92:	e8 6e f6 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120b97:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120b9e:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ba1:	e8 01 c3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120ba6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ba9:	e8 1a 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120bae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120bb1:	83 ec 0c             	sub    $0xc,%esp
f0120bb4:	68 00 38 00 00       	push   $0x3800
f0120bb9:	e8 d1 6f fe ff       	call   f0107b8f <kmalloc>
f0120bbe:	83 c4 10             	add    $0x10,%esp
f0120bc1:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120bc7:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120bcd:	89 c1                	mov    %eax,%ecx
f0120bcf:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120bd6:	10 00 00 
f0120bd9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120bdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120be4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120bea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bf5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120bfb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120c01:	29 d0                	sub    %edx,%eax
f0120c03:	89 c3                	mov    %eax,%ebx
f0120c05:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120c0c:	10 00 00 
f0120c0f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120c14:	0f b6 d0             	movzbl %al,%edx
f0120c17:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120c1d:	01 d0                	add    %edx,%eax
f0120c1f:	48                   	dec    %eax
f0120c20:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120c26:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c31:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120c37:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120c3d:	29 d0                	sub    %edx,%eax
f0120c3f:	01 c3                	add    %eax,%ebx
f0120c41:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120c48:	10 00 00 
f0120c4b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120c50:	0f b6 c0             	movzbl %al,%eax
f0120c53:	c1 e0 04             	shl    $0x4,%eax
f0120c56:	89 c2                	mov    %eax,%edx
f0120c58:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120c5e:	01 d0                	add    %edx,%eax
f0120c60:	48                   	dec    %eax
f0120c61:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120c67:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c72:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120c78:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120c7e:	29 d0                	sub    %edx,%eax
f0120c80:	01 d8                	add    %ebx,%eax
f0120c82:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120c87:	39 c1                	cmp    %eax,%ecx
f0120c89:	74 17                	je     f0120ca2 <test_kfree+0xb00>
f0120c8b:	83 ec 04             	sub    $0x4,%esp
f0120c8e:	68 00 b7 13 f0       	push   $0xf013b700
f0120c93:	68 2a 05 00 00       	push   $0x52a
f0120c98:	68 1a b6 13 f0       	push   $0xf013b61a
f0120c9d:	e8 63 f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ca2:	e8 21 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ca7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120caa:	74 17                	je     f0120cc3 <test_kfree+0xb21>
f0120cac:	83 ec 04             	sub    $0x4,%esp
f0120caf:	68 34 b6 13 f0       	push   $0xf013b634
f0120cb4:	68 2b 05 00 00       	push   $0x52b
f0120cb9:	68 1a b6 13 f0       	push   $0xf013b61a
f0120cbe:	e8 42 f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120cc3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120cc6:	e8 dc c1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120ccb:	29 c3                	sub    %eax,%ebx
f0120ccd:	89 d8                	mov    %ebx,%eax
f0120ccf:	83 f8 04             	cmp    $0x4,%eax
f0120cd2:	74 17                	je     f0120ceb <test_kfree+0xb49>
f0120cd4:	83 ec 04             	sub    $0x4,%esp
f0120cd7:	68 9c b6 13 f0       	push   $0xf013b69c
f0120cdc:	68 2c 05 00 00       	push   $0x52c
f0120ce1:	68 1a b6 13 f0       	push   $0xf013b61a
f0120ce6:	e8 1a f5 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120ceb:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120cf2:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120cf5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120cfb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120cfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d05:	eb 0e                	jmp    f0120d15 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120d07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d0a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d0d:	01 d0                	add    %edx,%eax
f0120d0f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120d12:	ff 45 f4             	incl   -0xc(%ebp)
f0120d15:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120d1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d1e:	7f e7                	jg     f0120d07 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120d20:	e8 82 c1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120d25:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120d2b:	e8 98 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d30:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120d36:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120d3c:	83 ec 0c             	sub    $0xc,%esp
f0120d3f:	50                   	push   %eax
f0120d40:	e8 15 6f fe ff       	call   f0107c5a <kfree>
f0120d45:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d48:	e8 7b 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d4d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120d53:	74 17                	je     f0120d6c <test_kfree+0xbca>
f0120d55:	83 ec 04             	sub    $0x4,%esp
f0120d58:	68 34 b6 13 f0       	push   $0xf013b634
f0120d5d:	68 3b 05 00 00       	push   $0x53b
f0120d62:	68 1a b6 13 f0       	push   $0xf013b61a
f0120d67:	e8 99 f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d6c:	e8 36 c1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120d71:	89 c2                	mov    %eax,%edx
f0120d73:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120d79:	29 c2                	sub    %eax,%edx
f0120d7b:	89 d0                	mov    %edx,%eax
f0120d7d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120d82:	74 17                	je     f0120d9b <test_kfree+0xbf9>
f0120d84:	83 ec 04             	sub    $0x4,%esp
f0120d87:	68 a4 bd 13 f0       	push   $0xf013bda4
f0120d8c:	68 3c 05 00 00       	push   $0x53c
f0120d91:	68 1a b6 13 f0       	push   $0xf013b61a
f0120d96:	e8 6a f4 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d9b:	e8 07 c1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120da0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120da6:	e8 1d 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120dab:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120db1:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120db7:	83 ec 0c             	sub    $0xc,%esp
f0120dba:	50                   	push   %eax
f0120dbb:	e8 9a 6e fe ff       	call   f0107c5a <kfree>
f0120dc0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dc3:	e8 00 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120dc8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120dce:	74 17                	je     f0120de7 <test_kfree+0xc45>
f0120dd0:	83 ec 04             	sub    $0x4,%esp
f0120dd3:	68 34 b6 13 f0       	push   $0xf013b634
f0120dd8:	68 42 05 00 00       	push   $0x542
f0120ddd:	68 1a b6 13 f0       	push   $0xf013b61a
f0120de2:	e8 1e f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120de7:	e8 bb c0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120dec:	89 c2                	mov    %eax,%edx
f0120dee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120df4:	29 c2                	sub    %eax,%edx
f0120df6:	89 d0                	mov    %edx,%eax
f0120df8:	83 f8 01             	cmp    $0x1,%eax
f0120dfb:	74 17                	je     f0120e14 <test_kfree+0xc72>
f0120dfd:	83 ec 04             	sub    $0x4,%esp
f0120e00:	68 a4 bd 13 f0       	push   $0xf013bda4
f0120e05:	68 43 05 00 00       	push   $0x543
f0120e0a:	68 1a b6 13 f0       	push   $0xf013b61a
f0120e0f:	e8 f1 f3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e14:	e8 8e c0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120e19:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e1f:	e8 a4 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e24:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120e2a:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120e30:	83 ec 0c             	sub    $0xc,%esp
f0120e33:	50                   	push   %eax
f0120e34:	e8 21 6e fe ff       	call   f0107c5a <kfree>
f0120e39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e3c:	e8 87 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e41:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120e47:	74 17                	je     f0120e60 <test_kfree+0xcbe>
f0120e49:	83 ec 04             	sub    $0x4,%esp
f0120e4c:	68 34 b6 13 f0       	push   $0xf013b634
f0120e51:	68 49 05 00 00       	push   $0x549
f0120e56:	68 1a b6 13 f0       	push   $0xf013b61a
f0120e5b:	e8 a5 f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e60:	e8 42 c0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120e65:	89 c2                	mov    %eax,%edx
f0120e67:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120e6d:	29 c2                	sub    %eax,%edx
f0120e6f:	89 d0                	mov    %edx,%eax
f0120e71:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120e76:	74 17                	je     f0120e8f <test_kfree+0xced>
f0120e78:	83 ec 04             	sub    $0x4,%esp
f0120e7b:	68 a4 bd 13 f0       	push   $0xf013bda4
f0120e80:	68 4a 05 00 00       	push   $0x54a
f0120e85:	68 1a b6 13 f0       	push   $0xf013b61a
f0120e8a:	e8 76 f3 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e8f:	e8 13 c0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120e94:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e9a:	e8 29 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e9f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120ea5:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120eab:	83 ec 0c             	sub    $0xc,%esp
f0120eae:	50                   	push   %eax
f0120eaf:	e8 a6 6d fe ff       	call   f0107c5a <kfree>
f0120eb4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eb7:	e8 0c 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ebc:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120ec2:	74 17                	je     f0120edb <test_kfree+0xd39>
f0120ec4:	83 ec 04             	sub    $0x4,%esp
f0120ec7:	68 34 b6 13 f0       	push   $0xf013b634
f0120ecc:	68 50 05 00 00       	push   $0x550
f0120ed1:	68 1a b6 13 f0       	push   $0xf013b61a
f0120ed6:	e8 2a f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120edb:	e8 c7 bf fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0120ee0:	89 c2                	mov    %eax,%edx
f0120ee2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120ee8:	29 c2                	sub    %eax,%edx
f0120eea:	89 d0                	mov    %edx,%eax
f0120eec:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120ef1:	74 17                	je     f0120f0a <test_kfree+0xd68>
f0120ef3:	83 ec 04             	sub    $0x4,%esp
f0120ef6:	68 a4 bd 13 f0       	push   $0xf013bda4
f0120efb:	68 51 05 00 00       	push   $0x551
f0120f00:	68 1a b6 13 f0       	push   $0xf013b61a
f0120f05:	e8 fb f2 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120f0a:	83 ec 0c             	sub    $0xc,%esp
f0120f0d:	68 dc bd 13 f0       	push   $0xf013bddc
f0120f12:	e8 f7 fd fd ff       	call   f0100d0e <cprintf>
f0120f17:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120f1a:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120f20:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120f23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f2a:	eb 1e                	jmp    f0120f4a <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120f2c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120f32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f35:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f38:	01 c8                	add    %ecx,%eax
f0120f3a:	8a 00                	mov    (%eax),%al
f0120f3c:	0f be c0             	movsbl %al,%eax
f0120f3f:	01 d0                	add    %edx,%eax
f0120f41:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120f47:	ff 45 f4             	incl   -0xc(%ebp)
f0120f4a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f53:	7f d7                	jg     f0120f2c <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120f55:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120f5b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f61:	89 c1                	mov    %eax,%ecx
f0120f63:	01 c9                	add    %ecx,%ecx
f0120f65:	01 c8                	add    %ecx,%eax
f0120f67:	39 c2                	cmp    %eax,%edx
f0120f69:	74 17                	je     f0120f82 <test_kfree+0xde0>
f0120f6b:	83 ec 04             	sub    $0x4,%esp
f0120f6e:	68 00 be 13 f0       	push   $0xf013be00
f0120f73:	68 5e 05 00 00       	push   $0x55e
f0120f78:	68 1a b6 13 f0       	push   $0xf013b61a
f0120f7d:	e8 83 f2 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120f82:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120f88:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120f8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f92:	eb 1e                	jmp    f0120fb2 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120f94:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120f9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f9d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120fa0:	01 c8                	add    %ecx,%eax
f0120fa2:	8a 00                	mov    (%eax),%al
f0120fa4:	0f be c0             	movsbl %al,%eax
f0120fa7:	01 d0                	add    %edx,%eax
f0120fa9:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120faf:	ff 45 f4             	incl   -0xc(%ebp)
f0120fb2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120fb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120fbb:	7f d7                	jg     f0120f94 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120fbd:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120fc3:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120fc9:	c1 e2 02             	shl    $0x2,%edx
f0120fcc:	39 d0                	cmp    %edx,%eax
f0120fce:	74 17                	je     f0120fe7 <test_kfree+0xe45>
f0120fd0:	83 ec 04             	sub    $0x4,%esp
f0120fd3:	68 00 be 13 f0       	push   $0xf013be00
f0120fd8:	68 66 05 00 00       	push   $0x566
f0120fdd:	68 1a b6 13 f0       	push   $0xf013b61a
f0120fe2:	e8 1e f2 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120fe7:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120fed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120ff0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ff7:	eb 1e                	jmp    f0121017 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120ff9:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120fff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121002:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121005:	01 c8                	add    %ecx,%eax
f0121007:	8a 00                	mov    (%eax),%al
f0121009:	0f be c0             	movsbl %al,%eax
f012100c:	01 d0                	add    %edx,%eax
f012100e:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121014:	ff 45 f4             	incl   -0xc(%ebp)
f0121017:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012101d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121020:	7f d7                	jg     f0120ff9 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121022:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0121028:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012102e:	89 d0                	mov    %edx,%eax
f0121030:	c1 e0 02             	shl    $0x2,%eax
f0121033:	01 d0                	add    %edx,%eax
f0121035:	39 c1                	cmp    %eax,%ecx
f0121037:	74 17                	je     f0121050 <test_kfree+0xeae>
f0121039:	83 ec 04             	sub    $0x4,%esp
f012103c:	68 00 be 13 f0       	push   $0xf013be00
f0121041:	68 6e 05 00 00       	push   $0x56e
f0121046:	68 1a b6 13 f0       	push   $0xf013b61a
f012104b:	e8 b5 f1 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121050:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121056:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121059:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121060:	eb 1e                	jmp    f0121080 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0121062:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0121068:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012106b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012106e:	01 c8                	add    %ecx,%eax
f0121070:	8a 00                	mov    (%eax),%al
f0121072:	0f be c0             	movsbl %al,%eax
f0121075:	01 d0                	add    %edx,%eax
f0121077:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012107d:	ff 45 f4             	incl   -0xc(%ebp)
f0121080:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0121086:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121089:	7f d7                	jg     f0121062 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012108b:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0121091:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0121097:	89 d0                	mov    %edx,%eax
f0121099:	01 c0                	add    %eax,%eax
f012109b:	01 d0                	add    %edx,%eax
f012109d:	01 c0                	add    %eax,%eax
f012109f:	01 d0                	add    %edx,%eax
f01210a1:	39 c1                	cmp    %eax,%ecx
f01210a3:	74 17                	je     f01210bc <test_kfree+0xf1a>
f01210a5:	83 ec 04             	sub    $0x4,%esp
f01210a8:	68 00 be 13 f0       	push   $0xf013be00
f01210ad:	68 76 05 00 00       	push   $0x576
f01210b2:	68 1a b6 13 f0       	push   $0xf013b61a
f01210b7:	e8 49 f1 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01210bc:	83 ec 0c             	sub    $0xc,%esp
f01210bf:	68 33 be 13 f0       	push   $0xf013be33
f01210c4:	e8 45 fc fd ff       	call   f0100d0e <cprintf>
f01210c9:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01210cc:	e8 d6 bd fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01210d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210d4:	e8 ef 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01210dc:	83 ec 0c             	sub    $0xc,%esp
f01210df:	68 00 50 00 00       	push   $0x5000
f01210e4:	e8 a6 6a fe ff       	call   f0107b8f <kmalloc>
f01210e9:	83 c4 10             	add    $0x10,%esp
f01210ec:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210f2:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01210f8:	89 c1                	mov    %eax,%ecx
f01210fa:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121101:	10 00 00 
f0121104:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012110a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012110f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121115:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012111b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121120:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121126:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012112c:	29 d0                	sub    %edx,%eax
f012112e:	89 c3                	mov    %eax,%ebx
f0121130:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121137:	10 00 00 
f012113a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012113f:	0f b6 d0             	movzbl %al,%edx
f0121142:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121148:	01 d0                	add    %edx,%eax
f012114a:	48                   	dec    %eax
f012114b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121151:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121157:	ba 00 00 00 00       	mov    $0x0,%edx
f012115c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0121162:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121168:	29 d0                	sub    %edx,%eax
f012116a:	01 c3                	add    %eax,%ebx
f012116c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0121173:	10 00 00 
f0121176:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012117b:	0f b6 c0             	movzbl %al,%eax
f012117e:	c1 e0 04             	shl    $0x4,%eax
f0121181:	89 c2                	mov    %eax,%edx
f0121183:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121189:	01 d0                	add    %edx,%eax
f012118b:	48                   	dec    %eax
f012118c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0121192:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121198:	ba 00 00 00 00       	mov    $0x0,%edx
f012119d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01211a3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01211a9:	29 d0                	sub    %edx,%eax
f01211ab:	01 d8                	add    %ebx,%eax
f01211ad:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01211b2:	39 c1                	cmp    %eax,%ecx
f01211b4:	74 17                	je     f01211cd <test_kfree+0x102b>
f01211b6:	83 ec 04             	sub    $0x4,%esp
f01211b9:	68 00 b7 13 f0       	push   $0xf013b700
f01211be:	68 80 05 00 00       	push   $0x580
f01211c3:	68 1a b6 13 f0       	push   $0xf013b61a
f01211c8:	e8 38 f0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211cd:	e8 f6 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211d5:	74 17                	je     f01211ee <test_kfree+0x104c>
f01211d7:	83 ec 04             	sub    $0x4,%esp
f01211da:	68 34 b6 13 f0       	push   $0xf013b634
f01211df:	68 81 05 00 00       	push   $0x581
f01211e4:	68 1a b6 13 f0       	push   $0xf013b61a
f01211e9:	e8 17 f0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01211ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01211f1:	e8 b1 bc fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01211f6:	29 c3                	sub    %eax,%ebx
f01211f8:	89 d8                	mov    %ebx,%eax
f01211fa:	83 f8 05             	cmp    $0x5,%eax
f01211fd:	74 17                	je     f0121216 <test_kfree+0x1074>
f01211ff:	83 ec 04             	sub    $0x4,%esp
f0121202:	68 9c b6 13 f0       	push   $0xf013b69c
f0121207:	68 82 05 00 00       	push   $0x582
f012120c:	68 1a b6 13 f0       	push   $0xf013b61a
f0121211:	e8 ef ef fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121216:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f012121d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0121220:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121226:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121229:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121230:	eb 0e                	jmp    f0121240 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0121232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121235:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121238:	01 d0                	add    %edx,%eax
f012123a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012123d:	ff 45 f4             	incl   -0xc(%ebp)
f0121240:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121246:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121249:	7f e7                	jg     f0121232 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012124b:	e8 57 bc fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121250:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121253:	e8 70 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121258:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012125b:	83 ec 0c             	sub    $0xc,%esp
f012125e:	68 00 00 10 00       	push   $0x100000
f0121263:	e8 27 69 fe ff       	call   f0107b8f <kmalloc>
f0121268:	83 c4 10             	add    $0x10,%esp
f012126b:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121271:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121277:	89 c1                	mov    %eax,%ecx
f0121279:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0121280:	10 00 00 
f0121283:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0121289:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012128e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0121294:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012129a:	ba 00 00 00 00       	mov    $0x0,%edx
f012129f:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01212a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01212ab:	29 d0                	sub    %edx,%eax
f01212ad:	89 c3                	mov    %eax,%ebx
f01212af:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01212b6:	10 00 00 
f01212b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01212be:	0f b6 d0             	movzbl %al,%edx
f01212c1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01212c7:	01 d0                	add    %edx,%eax
f01212c9:	48                   	dec    %eax
f01212ca:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01212d0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01212d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01212db:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01212e1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01212e7:	29 d0                	sub    %edx,%eax
f01212e9:	01 c3                	add    %eax,%ebx
f01212eb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01212f2:	10 00 00 
f01212f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01212fa:	0f b6 c0             	movzbl %al,%eax
f01212fd:	c1 e0 04             	shl    $0x4,%eax
f0121300:	89 c2                	mov    %eax,%edx
f0121302:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121308:	01 d0                	add    %edx,%eax
f012130a:	48                   	dec    %eax
f012130b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121311:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121317:	ba 00 00 00 00       	mov    $0x0,%edx
f012131c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121322:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121328:	29 d0                	sub    %edx,%eax
f012132a:	01 d8                	add    %ebx,%eax
f012132c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121331:	39 c1                	cmp    %eax,%ecx
f0121333:	74 17                	je     f012134c <test_kfree+0x11aa>
f0121335:	83 ec 04             	sub    $0x4,%esp
f0121338:	68 00 b7 13 f0       	push   $0xf013b700
f012133d:	68 8e 05 00 00       	push   $0x58e
f0121342:	68 1a b6 13 f0       	push   $0xf013b61a
f0121347:	e8 b9 ee fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012134c:	e8 77 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121351:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121354:	74 17                	je     f012136d <test_kfree+0x11cb>
f0121356:	83 ec 04             	sub    $0x4,%esp
f0121359:	68 34 b6 13 f0       	push   $0xf013b634
f012135e:	68 8f 05 00 00       	push   $0x58f
f0121363:	68 1a b6 13 f0       	push   $0xf013b61a
f0121368:	e8 98 ee fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012136d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121370:	e8 32 bb fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121375:	29 c3                	sub    %eax,%ebx
f0121377:	89 d8                	mov    %ebx,%eax
f0121379:	3d 00 01 00 00       	cmp    $0x100,%eax
f012137e:	74 17                	je     f0121397 <test_kfree+0x11f5>
f0121380:	83 ec 04             	sub    $0x4,%esp
f0121383:	68 9c b6 13 f0       	push   $0xf013b69c
f0121388:	68 90 05 00 00       	push   $0x590
f012138d:	68 1a b6 13 f0       	push   $0xf013b61a
f0121392:	e8 6e ee fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0121397:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f012139e:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01213a1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01213a7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01213aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213b1:	eb 0e                	jmp    f01213c1 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01213b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213b9:	01 d0                	add    %edx,%eax
f01213bb:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01213be:	ff 45 f4             	incl   -0xc(%ebp)
f01213c1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01213c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213ca:	7f e7                	jg     f01213b3 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01213cc:	e8 ac 66 ff ff       	call   f0117a7d <isKHeapPlacementStrategyNEXTFIT>
f01213d1:	84 c0                	test   %al,%al
f01213d3:	0f 84 ac 06 00 00    	je     f0121a85 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01213d9:	e8 c9 ba fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01213de:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01213e1:	e8 e2 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01213e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01213e9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01213f0:	10 00 00 
f01213f3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01213f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01213fe:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121404:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012140a:	ba 00 00 00 00       	mov    $0x0,%edx
f012140f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121415:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012141b:	29 d0                	sub    %edx,%eax
f012141d:	89 c1                	mov    %eax,%ecx
f012141f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121426:	10 00 00 
f0121429:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012142e:	0f b6 d0             	movzbl %al,%edx
f0121431:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121437:	01 d0                	add    %edx,%eax
f0121439:	48                   	dec    %eax
f012143a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0121440:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121446:	ba 00 00 00 00       	mov    $0x0,%edx
f012144b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0121451:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121457:	29 d0                	sub    %edx,%eax
f0121459:	01 c1                	add    %eax,%ecx
f012145b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0121462:	10 00 00 
f0121465:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012146a:	0f b6 c0             	movzbl %al,%eax
f012146d:	c1 e0 04             	shl    $0x4,%eax
f0121470:	89 c2                	mov    %eax,%edx
f0121472:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121478:	01 d0                	add    %edx,%eax
f012147a:	48                   	dec    %eax
f012147b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0121481:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121487:	ba 00 00 00 00       	mov    $0x0,%edx
f012148c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0121492:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121498:	29 d0                	sub    %edx,%eax
f012149a:	01 c8                	add    %ecx,%eax
f012149c:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01214a1:	29 c2                	sub    %eax,%edx
f01214a3:	89 d0                	mov    %edx,%eax
f01214a5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01214ab:	83 ec 0c             	sub    $0xc,%esp
f01214ae:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01214b4:	e8 d6 66 fe ff       	call   f0107b8f <kmalloc>
f01214b9:	83 c4 10             	add    $0x10,%esp
f01214bc:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214c2:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01214c8:	89 c1                	mov    %eax,%ecx
f01214ca:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01214d1:	10 00 00 
f01214d4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01214da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01214df:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01214e5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01214eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01214f0:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01214f6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01214fc:	29 d0                	sub    %edx,%eax
f01214fe:	89 c3                	mov    %eax,%ebx
f0121500:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121507:	10 00 00 
f012150a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012150f:	0f b6 d0             	movzbl %al,%edx
f0121512:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121518:	01 d0                	add    %edx,%eax
f012151a:	48                   	dec    %eax
f012151b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121521:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121527:	ba 00 00 00 00       	mov    $0x0,%edx
f012152c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121532:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121538:	29 d0                	sub    %edx,%eax
f012153a:	01 c3                	add    %eax,%ebx
f012153c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121543:	10 00 00 
f0121546:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012154b:	0f b6 c0             	movzbl %al,%eax
f012154e:	c1 e0 04             	shl    $0x4,%eax
f0121551:	89 c2                	mov    %eax,%edx
f0121553:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121559:	01 d0                	add    %edx,%eax
f012155b:	48                   	dec    %eax
f012155c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0121562:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121568:	ba 00 00 00 00       	mov    $0x0,%edx
f012156d:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0121573:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121579:	29 d0                	sub    %edx,%eax
f012157b:	01 d8                	add    %ebx,%eax
f012157d:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0121582:	39 c1                	cmp    %eax,%ecx
f0121584:	74 17                	je     f012159d <test_kfree+0x13fb>
f0121586:	83 ec 04             	sub    $0x4,%esp
f0121589:	68 00 b7 13 f0       	push   $0xf013b700
f012158e:	68 9f 05 00 00       	push   $0x59f
f0121593:	68 1a b6 13 f0       	push   $0xf013b61a
f0121598:	e8 68 ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012159d:	e8 26 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01215a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215a5:	74 17                	je     f01215be <test_kfree+0x141c>
f01215a7:	83 ec 04             	sub    $0x4,%esp
f01215aa:	68 34 b6 13 f0       	push   $0xf013b634
f01215af:	68 a0 05 00 00       	push   $0x5a0
f01215b4:	68 1a b6 13 f0       	push   $0xf013b61a
f01215b9:	e8 47 ec fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01215be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215c1:	e8 e1 b8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01215c6:	29 c3                	sub    %eax,%ebx
f01215c8:	89 da                	mov    %ebx,%edx
f01215ca:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01215d0:	c1 e8 0c             	shr    $0xc,%eax
f01215d3:	39 c2                	cmp    %eax,%edx
f01215d5:	74 17                	je     f01215ee <test_kfree+0x144c>
f01215d7:	83 ec 04             	sub    $0x4,%esp
f01215da:	68 9c b6 13 f0       	push   $0xf013b69c
f01215df:	68 a1 05 00 00       	push   $0x5a1
f01215e4:	68 1a b6 13 f0       	push   $0xf013b61a
f01215e9:	e8 17 ec fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01215ee:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01215f4:	48                   	dec    %eax
f01215f5:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01215fb:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121601:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121604:	e8 9e b8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121609:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012160c:	e8 b7 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121611:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121614:	83 ec 0c             	sub    $0xc,%esp
f0121617:	68 00 00 30 00       	push   $0x300000
f012161c:	e8 6e 65 fe ff       	call   f0107b8f <kmalloc>
f0121621:	83 c4 10             	add    $0x10,%esp
f0121624:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012162a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121630:	89 c1                	mov    %eax,%ecx
f0121632:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121639:	10 00 00 
f012163c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121642:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121647:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012164d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121653:	ba 00 00 00 00       	mov    $0x0,%edx
f0121658:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012165e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121664:	29 d0                	sub    %edx,%eax
f0121666:	89 c3                	mov    %eax,%ebx
f0121668:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012166f:	10 00 00 
f0121672:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121677:	0f b6 d0             	movzbl %al,%edx
f012167a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121680:	01 d0                	add    %edx,%eax
f0121682:	48                   	dec    %eax
f0121683:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121689:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012168f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121694:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012169a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01216a0:	29 d0                	sub    %edx,%eax
f01216a2:	01 c3                	add    %eax,%ebx
f01216a4:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01216ab:	10 00 00 
f01216ae:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01216b3:	0f b6 c0             	movzbl %al,%eax
f01216b6:	c1 e0 04             	shl    $0x4,%eax
f01216b9:	89 c2                	mov    %eax,%edx
f01216bb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01216c1:	01 d0                	add    %edx,%eax
f01216c3:	48                   	dec    %eax
f01216c4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01216ca:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01216d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01216d5:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01216db:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01216e1:	29 d0                	sub    %edx,%eax
f01216e3:	01 d8                	add    %ebx,%eax
f01216e5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01216ea:	39 c1                	cmp    %eax,%ecx
f01216ec:	74 17                	je     f0121705 <test_kfree+0x1563>
f01216ee:	83 ec 04             	sub    $0x4,%esp
f01216f1:	68 00 b7 13 f0       	push   $0xf013b700
f01216f6:	68 ae 05 00 00       	push   $0x5ae
f01216fb:	68 1a b6 13 f0       	push   $0xf013b61a
f0121700:	e8 00 eb fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121705:	e8 be 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012170a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012170d:	74 17                	je     f0121726 <test_kfree+0x1584>
f012170f:	83 ec 04             	sub    $0x4,%esp
f0121712:	68 34 b6 13 f0       	push   $0xf013b634
f0121717:	68 af 05 00 00       	push   $0x5af
f012171c:	68 1a b6 13 f0       	push   $0xf013b61a
f0121721:	e8 df ea fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121726:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121729:	e8 79 b7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012172e:	29 c3                	sub    %eax,%ebx
f0121730:	89 d8                	mov    %ebx,%eax
f0121732:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121737:	74 17                	je     f0121750 <test_kfree+0x15ae>
f0121739:	83 ec 04             	sub    $0x4,%esp
f012173c:	68 9c b6 13 f0       	push   $0xf013b69c
f0121741:	68 b0 05 00 00       	push   $0x5b0
f0121746:	68 1a b6 13 f0       	push   $0xf013b61a
f012174b:	e8 b5 ea fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121750:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121757:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f012175a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121760:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121763:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012176a:	eb 0e                	jmp    f012177a <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f012176c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012176f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121772:	01 d0                	add    %edx,%eax
f0121774:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121777:	ff 45 f4             	incl   -0xc(%ebp)
f012177a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121780:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121783:	7f e7                	jg     f012176c <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121785:	e8 1d b7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012178a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012178d:	e8 36 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121792:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121795:	83 ec 0c             	sub    $0xc,%esp
f0121798:	68 00 08 00 00       	push   $0x800
f012179d:	e8 ed 63 fe ff       	call   f0107b8f <kmalloc>
f01217a2:	83 c4 10             	add    $0x10,%esp
f01217a5:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217ab:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01217b1:	89 c1                	mov    %eax,%ecx
f01217b3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01217ba:	10 00 00 
f01217bd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01217c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01217c8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01217ce:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01217d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01217d9:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01217df:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01217e5:	29 d0                	sub    %edx,%eax
f01217e7:	89 c3                	mov    %eax,%ebx
f01217e9:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01217f0:	10 00 00 
f01217f3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01217f8:	0f b6 d0             	movzbl %al,%edx
f01217fb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121801:	01 d0                	add    %edx,%eax
f0121803:	48                   	dec    %eax
f0121804:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012180a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121810:	ba 00 00 00 00       	mov    $0x0,%edx
f0121815:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012181b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121821:	29 d0                	sub    %edx,%eax
f0121823:	01 c3                	add    %eax,%ebx
f0121825:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012182c:	10 00 00 
f012182f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121834:	0f b6 c0             	movzbl %al,%eax
f0121837:	c1 e0 04             	shl    $0x4,%eax
f012183a:	89 c2                	mov    %eax,%edx
f012183c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121842:	01 d0                	add    %edx,%eax
f0121844:	48                   	dec    %eax
f0121845:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012184b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121851:	ba 00 00 00 00       	mov    $0x0,%edx
f0121856:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012185c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121862:	29 d0                	sub    %edx,%eax
f0121864:	01 d8                	add    %ebx,%eax
f0121866:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012186b:	39 c1                	cmp    %eax,%ecx
f012186d:	74 17                	je     f0121886 <test_kfree+0x16e4>
f012186f:	83 ec 04             	sub    $0x4,%esp
f0121872:	68 00 b7 13 f0       	push   $0xf013b700
f0121877:	68 bc 05 00 00       	push   $0x5bc
f012187c:	68 1a b6 13 f0       	push   $0xf013b61a
f0121881:	e8 7f e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121886:	e8 3d 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012188b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012188e:	74 17                	je     f01218a7 <test_kfree+0x1705>
f0121890:	83 ec 04             	sub    $0x4,%esp
f0121893:	68 34 b6 13 f0       	push   $0xf013b634
f0121898:	68 bd 05 00 00       	push   $0x5bd
f012189d:	68 1a b6 13 f0       	push   $0xf013b61a
f01218a2:	e8 5e e9 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218a7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218aa:	e8 f8 b5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01218af:	29 c3                	sub    %eax,%ebx
f01218b1:	89 d8                	mov    %ebx,%eax
f01218b3:	83 f8 01             	cmp    $0x1,%eax
f01218b6:	74 17                	je     f01218cf <test_kfree+0x172d>
f01218b8:	83 ec 04             	sub    $0x4,%esp
f01218bb:	68 9c b6 13 f0       	push   $0xf013b69c
f01218c0:	68 be 05 00 00       	push   $0x5be
f01218c5:	68 1a b6 13 f0       	push   $0xf013b61a
f01218ca:	e8 36 e9 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01218cf:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01218d6:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01218d9:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01218df:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01218e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01218e9:	eb 0e                	jmp    f01218f9 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01218eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01218ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01218f1:	01 d0                	add    %edx,%eax
f01218f3:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01218f6:	ff 45 f4             	incl   -0xc(%ebp)
f01218f9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01218ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121902:	7f e7                	jg     f01218eb <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121904:	e8 9e b5 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121909:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012190c:	e8 b7 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121911:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121914:	83 ec 0c             	sub    $0xc,%esp
f0121917:	68 00 00 10 00       	push   $0x100000
f012191c:	e8 6e 62 fe ff       	call   f0107b8f <kmalloc>
f0121921:	83 c4 10             	add    $0x10,%esp
f0121924:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012192a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121930:	89 c1                	mov    %eax,%ecx
f0121932:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121939:	10 00 00 
f012193c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121942:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121947:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012194d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121953:	ba 00 00 00 00       	mov    $0x0,%edx
f0121958:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012195e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121964:	29 d0                	sub    %edx,%eax
f0121966:	89 c3                	mov    %eax,%ebx
f0121968:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012196f:	10 00 00 
f0121972:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121977:	0f b6 d0             	movzbl %al,%edx
f012197a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121980:	01 d0                	add    %edx,%eax
f0121982:	48                   	dec    %eax
f0121983:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121989:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012198f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121994:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012199a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01219a0:	29 d0                	sub    %edx,%eax
f01219a2:	01 c3                	add    %eax,%ebx
f01219a4:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01219ab:	10 00 00 
f01219ae:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01219b3:	0f b6 c0             	movzbl %al,%eax
f01219b6:	c1 e0 04             	shl    $0x4,%eax
f01219b9:	89 c2                	mov    %eax,%edx
f01219bb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01219c1:	01 d0                	add    %edx,%eax
f01219c3:	48                   	dec    %eax
f01219c4:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01219ca:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01219d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01219d5:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01219db:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01219e1:	29 d0                	sub    %edx,%eax
f01219e3:	01 d8                	add    %ebx,%eax
f01219e5:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01219ea:	39 c1                	cmp    %eax,%ecx
f01219ec:	74 17                	je     f0121a05 <test_kfree+0x1863>
f01219ee:	83 ec 04             	sub    $0x4,%esp
f01219f1:	68 00 b7 13 f0       	push   $0xf013b700
f01219f6:	68 ca 05 00 00       	push   $0x5ca
f01219fb:	68 1a b6 13 f0       	push   $0xf013b61a
f0121a00:	e8 00 e8 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a05:	e8 be 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a0d:	74 17                	je     f0121a26 <test_kfree+0x1884>
f0121a0f:	83 ec 04             	sub    $0x4,%esp
f0121a12:	68 34 b6 13 f0       	push   $0xf013b634
f0121a17:	68 cb 05 00 00       	push   $0x5cb
f0121a1c:	68 1a b6 13 f0       	push   $0xf013b61a
f0121a21:	e8 df e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a26:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a29:	e8 79 b4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121a2e:	29 c3                	sub    %eax,%ebx
f0121a30:	89 d8                	mov    %ebx,%eax
f0121a32:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121a37:	74 17                	je     f0121a50 <test_kfree+0x18ae>
f0121a39:	83 ec 04             	sub    $0x4,%esp
f0121a3c:	68 9c b6 13 f0       	push   $0xf013b69c
f0121a41:	68 cc 05 00 00       	push   $0x5cc
f0121a46:	68 1a b6 13 f0       	push   $0xf013b61a
f0121a4b:	e8 b5 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121a50:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121a57:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121a5a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121a60:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121a63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a6a:	eb 0e                	jmp    f0121a7a <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121a6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a6f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121a72:	01 d0                	add    %edx,%eax
f0121a74:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121a77:	ff 45 f4             	incl   -0xc(%ebp)
f0121a7a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121a80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a83:	7f e7                	jg     f0121a6c <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121a85:	83 ec 0c             	sub    $0xc,%esp
f0121a88:	68 3a be 13 f0       	push   $0xf013be3a
f0121a8d:	e8 7c f2 fd ff       	call   f0100d0e <cprintf>
f0121a92:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a95:	e8 0d b4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121a9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a9d:	e8 26 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121aa2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121aa5:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121aab:	83 ec 0c             	sub    $0xc,%esp
f0121aae:	50                   	push   %eax
f0121aaf:	e8 a6 61 fe ff       	call   f0107c5a <kfree>
f0121ab4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ab7:	e8 0c 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121abc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121abf:	74 17                	je     f0121ad8 <test_kfree+0x1936>
f0121ac1:	83 ec 04             	sub    $0x4,%esp
f0121ac4:	68 34 b6 13 f0       	push   $0xf013b634
f0121ac9:	68 dd 05 00 00       	push   $0x5dd
f0121ace:	68 1a b6 13 f0       	push   $0xf013b61a
f0121ad3:	e8 2d e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ad8:	e8 ca b3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121add:	89 c2                	mov    %eax,%edx
f0121adf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ae2:	29 c2                	sub    %eax,%edx
f0121ae4:	89 d0                	mov    %edx,%eax
f0121ae6:	83 f8 02             	cmp    $0x2,%eax
f0121ae9:	74 17                	je     f0121b02 <test_kfree+0x1960>
f0121aeb:	83 ec 04             	sub    $0x4,%esp
f0121aee:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121af3:	68 de 05 00 00       	push   $0x5de
f0121af8:	68 1a b6 13 f0       	push   $0xf013b61a
f0121afd:	e8 03 e7 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b02:	e8 a0 b3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121b07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b0a:	e8 b9 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121b12:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121b18:	83 ec 0c             	sub    $0xc,%esp
f0121b1b:	50                   	push   %eax
f0121b1c:	e8 39 61 fe ff       	call   f0107c5a <kfree>
f0121b21:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b24:	e8 9f 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b2c:	74 17                	je     f0121b45 <test_kfree+0x19a3>
f0121b2e:	83 ec 04             	sub    $0x4,%esp
f0121b31:	68 34 b6 13 f0       	push   $0xf013b634
f0121b36:	68 e4 05 00 00       	push   $0x5e4
f0121b3b:	68 1a b6 13 f0       	push   $0xf013b61a
f0121b40:	e8 c0 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b45:	e8 5d b3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121b4a:	89 c2                	mov    %eax,%edx
f0121b4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b4f:	29 c2                	sub    %eax,%edx
f0121b51:	89 d0                	mov    %edx,%eax
f0121b53:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b58:	74 17                	je     f0121b71 <test_kfree+0x19cf>
f0121b5a:	83 ec 04             	sub    $0x4,%esp
f0121b5d:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121b62:	68 e5 05 00 00       	push   $0x5e5
f0121b67:	68 1a b6 13 f0       	push   $0xf013b61a
f0121b6c:	e8 94 e6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121b71:	e8 31 b3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121b76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b79:	e8 4a 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121b81:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121b87:	83 ec 0c             	sub    $0xc,%esp
f0121b8a:	50                   	push   %eax
f0121b8b:	e8 ca 60 fe ff       	call   f0107c5a <kfree>
f0121b90:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b93:	e8 30 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b9b:	74 17                	je     f0121bb4 <test_kfree+0x1a12>
f0121b9d:	83 ec 04             	sub    $0x4,%esp
f0121ba0:	68 34 b6 13 f0       	push   $0xf013b634
f0121ba5:	68 eb 05 00 00       	push   $0x5eb
f0121baa:	68 1a b6 13 f0       	push   $0xf013b61a
f0121baf:	e8 51 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121bb4:	e8 ee b2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121bb9:	89 c2                	mov    %eax,%edx
f0121bbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bbe:	29 c2                	sub    %eax,%edx
f0121bc0:	89 d0                	mov    %edx,%eax
f0121bc2:	83 f8 01             	cmp    $0x1,%eax
f0121bc5:	74 17                	je     f0121bde <test_kfree+0x1a3c>
f0121bc7:	83 ec 04             	sub    $0x4,%esp
f0121bca:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121bcf:	68 ec 05 00 00       	push   $0x5ec
f0121bd4:	68 1a b6 13 f0       	push   $0xf013b61a
f0121bd9:	e8 27 e6 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bde:	e8 c4 b2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121be3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121be6:	e8 dd 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121beb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121bee:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121bf4:	83 ec 0c             	sub    $0xc,%esp
f0121bf7:	50                   	push   %eax
f0121bf8:	e8 5d 60 fe ff       	call   f0107c5a <kfree>
f0121bfd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c00:	e8 c3 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c08:	74 17                	je     f0121c21 <test_kfree+0x1a7f>
f0121c0a:	83 ec 04             	sub    $0x4,%esp
f0121c0d:	68 34 b6 13 f0       	push   $0xf013b634
f0121c12:	68 f2 05 00 00       	push   $0x5f2
f0121c17:	68 1a b6 13 f0       	push   $0xf013b61a
f0121c1c:	e8 e4 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c21:	e8 81 b2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121c26:	89 c2                	mov    %eax,%edx
f0121c28:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c2b:	29 c2                	sub    %eax,%edx
f0121c2d:	89 d0                	mov    %edx,%eax
f0121c2f:	83 f8 04             	cmp    $0x4,%eax
f0121c32:	74 17                	je     f0121c4b <test_kfree+0x1aa9>
f0121c34:	83 ec 04             	sub    $0x4,%esp
f0121c37:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121c3c:	68 f3 05 00 00       	push   $0x5f3
f0121c41:	68 1a b6 13 f0       	push   $0xf013b61a
f0121c46:	e8 ba e5 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c4b:	e8 57 b2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121c50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c53:	e8 70 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c58:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121c5b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121c61:	83 ec 0c             	sub    $0xc,%esp
f0121c64:	50                   	push   %eax
f0121c65:	e8 f0 5f fe ff       	call   f0107c5a <kfree>
f0121c6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c6d:	e8 56 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c75:	74 17                	je     f0121c8e <test_kfree+0x1aec>
f0121c77:	83 ec 04             	sub    $0x4,%esp
f0121c7a:	68 34 b6 13 f0       	push   $0xf013b634
f0121c7f:	68 f9 05 00 00       	push   $0x5f9
f0121c84:	68 1a b6 13 f0       	push   $0xf013b61a
f0121c89:	e8 77 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c8e:	e8 14 b2 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121c93:	89 c2                	mov    %eax,%edx
f0121c95:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c98:	29 c2                	sub    %eax,%edx
f0121c9a:	89 d0                	mov    %edx,%eax
f0121c9c:	83 f8 05             	cmp    $0x5,%eax
f0121c9f:	74 17                	je     f0121cb8 <test_kfree+0x1b16>
f0121ca1:	83 ec 04             	sub    $0x4,%esp
f0121ca4:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121ca9:	68 fa 05 00 00       	push   $0x5fa
f0121cae:	68 1a b6 13 f0       	push   $0xf013b61a
f0121cb3:	e8 4d e5 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cb8:	e8 ea b1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121cbd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cc0:	e8 03 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cc5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121cc8:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121cce:	83 ec 0c             	sub    $0xc,%esp
f0121cd1:	50                   	push   %eax
f0121cd2:	e8 83 5f fe ff       	call   f0107c5a <kfree>
f0121cd7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cda:	e8 e9 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cdf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ce2:	74 17                	je     f0121cfb <test_kfree+0x1b59>
f0121ce4:	83 ec 04             	sub    $0x4,%esp
f0121ce7:	68 34 b6 13 f0       	push   $0xf013b634
f0121cec:	68 00 06 00 00       	push   $0x600
f0121cf1:	68 1a b6 13 f0       	push   $0xf013b61a
f0121cf6:	e8 0a e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121cfb:	e8 a7 b1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121d00:	89 c2                	mov    %eax,%edx
f0121d02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d05:	29 c2                	sub    %eax,%edx
f0121d07:	89 d0                	mov    %edx,%eax
f0121d09:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121d0e:	74 17                	je     f0121d27 <test_kfree+0x1b85>
f0121d10:	83 ec 04             	sub    $0x4,%esp
f0121d13:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121d18:	68 01 06 00 00       	push   $0x601
f0121d1d:	68 1a b6 13 f0       	push   $0xf013b61a
f0121d22:	e8 de e4 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121d27:	e8 51 5d ff ff       	call   f0117a7d <isKHeapPlacementStrategyNEXTFIT>
f0121d2c:	84 c0                	test   %al,%al
f0121d2e:	0f 84 80 02 00 00    	je     f0121fb4 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121d34:	e8 6e b1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121d39:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d3c:	e8 87 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d41:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121d44:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121d4a:	83 ec 0c             	sub    $0xc,%esp
f0121d4d:	50                   	push   %eax
f0121d4e:	e8 07 5f fe ff       	call   f0107c5a <kfree>
f0121d53:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121d56:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121d5d:	10 00 00 
f0121d60:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121d66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121d6b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121d71:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d7c:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121d82:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121d88:	29 d0                	sub    %edx,%eax
f0121d8a:	89 c1                	mov    %eax,%ecx
f0121d8c:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121d93:	10 00 00 
f0121d96:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121d9b:	0f b6 d0             	movzbl %al,%edx
f0121d9e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121da4:	01 d0                	add    %edx,%eax
f0121da6:	48                   	dec    %eax
f0121da7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121dad:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121db3:	ba 00 00 00 00       	mov    $0x0,%edx
f0121db8:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121dbe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121dc4:	29 d0                	sub    %edx,%eax
f0121dc6:	01 c1                	add    %eax,%ecx
f0121dc8:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121dcf:	10 00 00 
f0121dd2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121dd7:	0f b6 c0             	movzbl %al,%eax
f0121dda:	c1 e0 04             	shl    $0x4,%eax
f0121ddd:	89 c2                	mov    %eax,%edx
f0121ddf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121de5:	01 d0                	add    %edx,%eax
f0121de7:	48                   	dec    %eax
f0121de8:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121dee:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121df9:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121dff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e05:	29 d0                	sub    %edx,%eax
f0121e07:	01 c8                	add    %ecx,%eax
f0121e09:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121e0e:	29 c2                	sub    %eax,%edx
f0121e10:	89 d0                	mov    %edx,%eax
f0121e12:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e18:	e8 ab 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e1d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e20:	74 17                	je     f0121e39 <test_kfree+0x1c97>
f0121e22:	83 ec 04             	sub    $0x4,%esp
f0121e25:	68 34 b6 13 f0       	push   $0xf013b634
f0121e2a:	68 0b 06 00 00       	push   $0x60b
f0121e2f:	68 1a b6 13 f0       	push   $0xf013b61a
f0121e34:	e8 cc e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e39:	e8 69 b0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121e3e:	89 c2                	mov    %eax,%edx
f0121e40:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e43:	29 c2                	sub    %eax,%edx
f0121e45:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121e4b:	c1 e8 0c             	shr    $0xc,%eax
f0121e4e:	39 c2                	cmp    %eax,%edx
f0121e50:	74 17                	je     f0121e69 <test_kfree+0x1cc7>
f0121e52:	83 ec 04             	sub    $0x4,%esp
f0121e55:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121e5a:	68 0c 06 00 00       	push   $0x60c
f0121e5f:	68 1a b6 13 f0       	push   $0xf013b61a
f0121e64:	e8 9c e3 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121e69:	e8 39 b0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121e6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121e71:	e8 52 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e76:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121e79:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121e7f:	83 ec 0c             	sub    $0xc,%esp
f0121e82:	50                   	push   %eax
f0121e83:	e8 d2 5d fe ff       	call   f0107c5a <kfree>
f0121e88:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e8b:	e8 38 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e90:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e93:	74 17                	je     f0121eac <test_kfree+0x1d0a>
f0121e95:	83 ec 04             	sub    $0x4,%esp
f0121e98:	68 34 b6 13 f0       	push   $0xf013b634
f0121e9d:	68 12 06 00 00       	push   $0x612
f0121ea2:	68 1a b6 13 f0       	push   $0xf013b61a
f0121ea7:	e8 59 e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121eac:	e8 f6 af fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121eb1:	89 c2                	mov    %eax,%edx
f0121eb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121eb6:	29 c2                	sub    %eax,%edx
f0121eb8:	89 d0                	mov    %edx,%eax
f0121eba:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121ebf:	74 17                	je     f0121ed8 <test_kfree+0x1d36>
f0121ec1:	83 ec 04             	sub    $0x4,%esp
f0121ec4:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121ec9:	68 13 06 00 00       	push   $0x613
f0121ece:	68 1a b6 13 f0       	push   $0xf013b61a
f0121ed3:	e8 2d e3 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121ed8:	e8 ca af fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121edd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121ee0:	e8 e3 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ee5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121ee8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121eee:	83 ec 0c             	sub    $0xc,%esp
f0121ef1:	50                   	push   %eax
f0121ef2:	e8 63 5d fe ff       	call   f0107c5a <kfree>
f0121ef7:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121efa:	e8 c9 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121eff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f02:	74 17                	je     f0121f1b <test_kfree+0x1d79>
f0121f04:	83 ec 04             	sub    $0x4,%esp
f0121f07:	68 34 b6 13 f0       	push   $0xf013b634
f0121f0c:	68 19 06 00 00       	push   $0x619
f0121f11:	68 1a b6 13 f0       	push   $0xf013b61a
f0121f16:	e8 ea e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f1b:	e8 87 af fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121f20:	89 c2                	mov    %eax,%edx
f0121f22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f25:	29 c2                	sub    %eax,%edx
f0121f27:	89 d0                	mov    %edx,%eax
f0121f29:	83 f8 01             	cmp    $0x1,%eax
f0121f2c:	74 17                	je     f0121f45 <test_kfree+0x1da3>
f0121f2e:	83 ec 04             	sub    $0x4,%esp
f0121f31:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121f36:	68 1a 06 00 00       	push   $0x61a
f0121f3b:	68 1a b6 13 f0       	push   $0xf013b61a
f0121f40:	e8 c0 e2 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121f45:	e8 5d af fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121f4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121f4d:	e8 76 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f52:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121f55:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121f5b:	83 ec 0c             	sub    $0xc,%esp
f0121f5e:	50                   	push   %eax
f0121f5f:	e8 f6 5c fe ff       	call   f0107c5a <kfree>
f0121f64:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f67:	e8 5c 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f6f:	74 17                	je     f0121f88 <test_kfree+0x1de6>
f0121f71:	83 ec 04             	sub    $0x4,%esp
f0121f74:	68 34 b6 13 f0       	push   $0xf013b634
f0121f79:	68 20 06 00 00       	push   $0x620
f0121f7e:	68 1a b6 13 f0       	push   $0xf013b61a
f0121f83:	e8 7d e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f88:	e8 1a af fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121f8d:	89 c2                	mov    %eax,%edx
f0121f8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f92:	29 c2                	sub    %eax,%edx
f0121f94:	89 d0                	mov    %edx,%eax
f0121f96:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121f9b:	74 17                	je     f0121fb4 <test_kfree+0x1e12>
f0121f9d:	83 ec 04             	sub    $0x4,%esp
f0121fa0:	68 a4 bd 13 f0       	push   $0xf013bda4
f0121fa5:	68 21 06 00 00       	push   $0x621
f0121faa:	68 1a b6 13 f0       	push   $0xf013b61a
f0121faf:	e8 51 e2 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121fb4:	e8 ee ae fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0121fb9:	89 c2                	mov    %eax,%edx
f0121fbb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121fbe:	39 c2                	cmp    %eax,%edx
f0121fc0:	74 17                	je     f0121fd9 <test_kfree+0x1e37>
f0121fc2:	83 ec 04             	sub    $0x4,%esp
f0121fc5:	68 44 be 13 f0       	push   $0xf013be44
f0121fca:	68 24 06 00 00       	push   $0x624
f0121fcf:	68 1a b6 13 f0       	push   $0xf013b61a
f0121fd4:	e8 2c e2 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121fd9:	83 ec 0c             	sub    $0xc,%esp
f0121fdc:	68 78 be 13 f0       	push   $0xf013be78
f0121fe1:	e8 28 ed fd ff       	call   f0100d0e <cprintf>
f0121fe6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121fe9:	83 ec 0c             	sub    $0xc,%esp
f0121fec:	6a 03                	push   $0x3
f0121fee:	e8 54 b3 fe ff       	call   f010d347 <sys_bypassPageFault>
f0121ff3:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121ff6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ffd:	e9 82 00 00 00       	jmp    f0122084 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0122002:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122005:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f012200c:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012200f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122012:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122015:	e8 1b b3 fe ff       	call   f010d335 <sys_rcr2>
f012201a:	89 c2                	mov    %eax,%edx
f012201c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012201f:	39 c2                	cmp    %eax,%edx
f0122021:	74 17                	je     f012203a <test_kfree+0x1e98>
f0122023:	83 ec 04             	sub    $0x4,%esp
f0122026:	68 80 be 13 f0       	push   $0xf013be80
f012202b:	68 33 06 00 00       	push   $0x633
f0122030:	68 1a b6 13 f0       	push   $0xf013b61a
f0122035:	e8 cb e1 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012203a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012203d:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122044:	89 c2                	mov    %eax,%edx
f0122046:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122049:	01 d0                	add    %edx,%eax
f012204b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012204e:	e8 e2 b2 fe ff       	call   f010d335 <sys_rcr2>
f0122053:	89 c2                	mov    %eax,%edx
f0122055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122058:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012205f:	89 c1                	mov    %eax,%ecx
f0122061:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122064:	01 c8                	add    %ecx,%eax
f0122066:	39 c2                	cmp    %eax,%edx
f0122068:	74 17                	je     f0122081 <test_kfree+0x1edf>
f012206a:	83 ec 04             	sub    $0x4,%esp
f012206d:	68 80 be 13 f0       	push   $0xf013be80
f0122072:	68 35 06 00 00       	push   $0x635
f0122077:	68 1a b6 13 f0       	push   $0xf013b61a
f012207c:	e8 84 e1 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122081:	ff 45 f4             	incl   -0xc(%ebp)
f0122084:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122088:	0f 8e 74 ff ff ff    	jle    f0122002 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012208e:	83 ec 0c             	sub    $0xc,%esp
f0122091:	6a 00                	push   $0x0
f0122093:	e8 af b2 fe ff       	call   f010d347 <sys_bypassPageFault>
f0122098:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012209b:	83 ec 0c             	sub    $0xc,%esp
f012209e:	68 c5 be 13 f0       	push   $0xf013bec5
f01220a3:	e8 66 ec fd ff       	call   f0100d0e <cprintf>
f01220a8:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01220ab:	e8 f7 ad fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01220b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220b3:	e8 10 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01220bb:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01220c1:	83 ec 0c             	sub    $0xc,%esp
f01220c4:	50                   	push   %eax
f01220c5:	e8 90 5b fe ff       	call   f0107c5a <kfree>
f01220ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220cd:	e8 f6 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220d5:	74 17                	je     f01220ee <test_kfree+0x1f4c>
f01220d7:	83 ec 04             	sub    $0x4,%esp
f01220da:	68 34 b6 13 f0       	push   $0xf013b634
f01220df:	68 43 06 00 00       	push   $0x643
f01220e4:	68 1a b6 13 f0       	push   $0xf013b61a
f01220e9:	e8 17 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01220ee:	e8 b4 ad fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01220f3:	89 c2                	mov    %eax,%edx
f01220f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220f8:	39 c2                	cmp    %eax,%edx
f01220fa:	74 17                	je     f0122113 <test_kfree+0x1f71>
f01220fc:	83 ec 04             	sub    $0x4,%esp
f01220ff:	68 cc be 13 f0       	push   $0xf013becc
f0122104:	68 44 06 00 00       	push   $0x644
f0122109:	68 1a b6 13 f0       	push   $0xf013b61a
f012210e:	e8 f2 e0 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122113:	e8 8f ad fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122118:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012211b:	e8 a8 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122120:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122123:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122129:	83 ec 0c             	sub    $0xc,%esp
f012212c:	50                   	push   %eax
f012212d:	e8 28 5b fe ff       	call   f0107c5a <kfree>
f0122132:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122135:	e8 8e 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012213a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012213d:	74 17                	je     f0122156 <test_kfree+0x1fb4>
f012213f:	83 ec 04             	sub    $0x4,%esp
f0122142:	68 34 b6 13 f0       	push   $0xf013b634
f0122147:	68 4a 06 00 00       	push   $0x64a
f012214c:	68 1a b6 13 f0       	push   $0xf013b61a
f0122151:	e8 af e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122156:	e8 4c ad fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012215b:	89 c2                	mov    %eax,%edx
f012215d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122160:	39 c2                	cmp    %eax,%edx
f0122162:	74 17                	je     f012217b <test_kfree+0x1fd9>
f0122164:	83 ec 04             	sub    $0x4,%esp
f0122167:	68 cc be 13 f0       	push   $0xf013becc
f012216c:	68 4b 06 00 00       	push   $0x64b
f0122171:	68 1a b6 13 f0       	push   $0xf013b61a
f0122176:	e8 8a e0 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012217b:	e8 27 ad fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122180:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122183:	e8 40 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122188:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012218b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0122191:	83 ec 0c             	sub    $0xc,%esp
f0122194:	50                   	push   %eax
f0122195:	e8 c0 5a fe ff       	call   f0107c5a <kfree>
f012219a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012219d:	e8 26 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221a5:	74 17                	je     f01221be <test_kfree+0x201c>
f01221a7:	83 ec 04             	sub    $0x4,%esp
f01221aa:	68 34 b6 13 f0       	push   $0xf013b634
f01221af:	68 51 06 00 00       	push   $0x651
f01221b4:	68 1a b6 13 f0       	push   $0xf013b61a
f01221b9:	e8 47 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01221be:	e8 e4 ac fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01221c3:	89 c2                	mov    %eax,%edx
f01221c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221c8:	39 c2                	cmp    %eax,%edx
f01221ca:	74 17                	je     f01221e3 <test_kfree+0x2041>
f01221cc:	83 ec 04             	sub    $0x4,%esp
f01221cf:	68 cc be 13 f0       	push   $0xf013becc
f01221d4:	68 52 06 00 00       	push   $0x652
f01221d9:	68 1a b6 13 f0       	push   $0xf013b61a
f01221de:	e8 22 e0 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01221e3:	e8 bf ac fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01221e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221eb:	e8 d8 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01221f3:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01221f9:	83 ec 0c             	sub    $0xc,%esp
f01221fc:	50                   	push   %eax
f01221fd:	e8 58 5a fe ff       	call   f0107c5a <kfree>
f0122202:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122205:	e8 be 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012220a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012220d:	74 17                	je     f0122226 <test_kfree+0x2084>
f012220f:	83 ec 04             	sub    $0x4,%esp
f0122212:	68 34 b6 13 f0       	push   $0xf013b634
f0122217:	68 58 06 00 00       	push   $0x658
f012221c:	68 1a b6 13 f0       	push   $0xf013b61a
f0122221:	e8 df df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122226:	e8 7c ac fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012222b:	89 c2                	mov    %eax,%edx
f012222d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122230:	39 c2                	cmp    %eax,%edx
f0122232:	74 17                	je     f012224b <test_kfree+0x20a9>
f0122234:	83 ec 04             	sub    $0x4,%esp
f0122237:	68 cc be 13 f0       	push   $0xf013becc
f012223c:	68 59 06 00 00       	push   $0x659
f0122241:	68 1a b6 13 f0       	push   $0xf013b61a
f0122246:	e8 ba df fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012224b:	83 ec 0c             	sub    $0xc,%esp
f012224e:	68 13 bf 13 f0       	push   $0xf013bf13
f0122253:	e8 b6 ea fd ff       	call   f0100d0e <cprintf>
f0122258:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012225b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122262:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122269:	eb 48                	jmp    f01222b3 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012226b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012226e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0122273:	83 ec 04             	sub    $0x4,%esp
f0122276:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f012227c:	51                   	push   %ecx
f012227d:	52                   	push   %edx
f012227e:	50                   	push   %eax
f012227f:	e8 2d 48 fe ff       	call   f0106ab1 <get_page_table>
f0122284:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122287:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f012228d:	85 c0                	test   %eax,%eax
f012228f:	75 17                	jne    f01222a8 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122291:	83 ec 04             	sub    $0x4,%esp
f0122294:	68 1c bf 13 f0       	push   $0xf013bf1c
f0122299:	68 67 06 00 00       	push   $0x667
f012229e:	68 1a b6 13 f0       	push   $0xf013b61a
f01222a3:	e8 5d df fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01222a8:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01222af:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01222b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01222b7:	78 b2                	js     f012226b <test_kfree+0x20c9>
f01222b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01222bd:	7f 09                	jg     f01222c8 <test_kfree+0x2126>
f01222bf:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01222c6:	76 a3                	jbe    f012226b <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01222c8:	83 ec 0c             	sub    $0xc,%esp
f01222cb:	68 fe b7 13 f0       	push   $0xf013b7fe
f01222d0:	e8 39 ea fd ff       	call   f0100d0e <cprintf>
f01222d5:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01222d8:	83 ec 0c             	sub    $0xc,%esp
f01222db:	68 84 bf 13 f0       	push   $0xf013bf84
f01222e0:	e8 29 ea fd ff       	call   f0100d0e <cprintf>
f01222e5:	83 c4 10             	add    $0x10,%esp

	return 1;
f01222e8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01222ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01222f0:	5b                   	pop    %ebx
f01222f1:	5f                   	pop    %edi
f01222f2:	5d                   	pop    %ebp
f01222f3:	c3                   	ret    

f01222f4 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01222f4:	55                   	push   %ebp
f01222f5:	89 e5                	mov    %esp,%ebp
f01222f7:	57                   	push   %edi
f01222f8:	53                   	push   %ebx
f01222f9:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01222ff:	83 ec 0c             	sub    $0xc,%esp
f0122302:	68 5c b5 13 f0       	push   $0xf013b55c
f0122307:	e8 02 ea fd ff       	call   f0100d0e <cprintf>
f012230c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012230f:	83 ec 0c             	sub    $0xc,%esp
f0122312:	68 8c b5 13 f0       	push   $0xf013b58c
f0122317:	e8 f2 e9 fd ff       	call   f0100d0e <cprintf>
f012231c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012231f:	83 ec 0c             	sub    $0xc,%esp
f0122322:	68 5c b5 13 f0       	push   $0xf013b55c
f0122327:	e8 e2 e9 fd ff       	call   f0100d0e <cprintf>
f012232c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012232f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122333:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122337:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012233d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122343:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012234a:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122351:	e8 51 ab fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122356:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122359:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012235f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122364:	b8 00 00 00 00       	mov    $0x0,%eax
f0122369:	89 d7                	mov    %edx,%edi
f012236b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012236d:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0122373:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122378:	b8 00 00 00 00       	mov    $0x0,%eax
f012237d:	89 d7                	mov    %edx,%edi
f012237f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122381:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0122387:	b9 14 00 00 00       	mov    $0x14,%ecx
f012238c:	b8 00 00 00 00       	mov    $0x0,%eax
f0122391:	89 d7                	mov    %edx,%edi
f0122393:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122395:	e8 0d ab fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012239a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012239d:	e8 26 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01223a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01223a5:	83 ec 0c             	sub    $0xc,%esp
f01223a8:	68 00 fc 1f 00       	push   $0x1ffc00
f01223ad:	e8 dd 57 fe ff       	call   f0107b8f <kmalloc>
f01223b2:	83 c4 10             	add    $0x10,%esp
f01223b5:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01223bb:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01223c1:	89 c1                	mov    %eax,%ecx
f01223c3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01223ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01223cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223d2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01223d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01223d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01223dd:	f7 75 c8             	divl   -0x38(%ebp)
f01223e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01223e3:	29 d0                	sub    %edx,%eax
f01223e5:	89 c3                	mov    %eax,%ebx
f01223e7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01223ee:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01223f3:	0f b6 d0             	movzbl %al,%edx
f01223f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01223f9:	01 d0                	add    %edx,%eax
f01223fb:	48                   	dec    %eax
f01223fc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01223ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122402:	ba 00 00 00 00       	mov    $0x0,%edx
f0122407:	f7 75 c0             	divl   -0x40(%ebp)
f012240a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012240d:	29 d0                	sub    %edx,%eax
f012240f:	01 c3                	add    %eax,%ebx
f0122411:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122418:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012241d:	0f b6 c0             	movzbl %al,%eax
f0122420:	c1 e0 04             	shl    $0x4,%eax
f0122423:	89 c2                	mov    %eax,%edx
f0122425:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122428:	01 d0                	add    %edx,%eax
f012242a:	48                   	dec    %eax
f012242b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012242e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122431:	ba 00 00 00 00       	mov    $0x0,%edx
f0122436:	f7 75 b8             	divl   -0x48(%ebp)
f0122439:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012243c:	29 d0                	sub    %edx,%eax
f012243e:	01 d8                	add    %ebx,%eax
f0122440:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122445:	39 c1                	cmp    %eax,%ecx
f0122447:	74 17                	je     f0122460 <test_kfree_bestfirstfit+0x16c>
f0122449:	83 ec 04             	sub    $0x4,%esp
f012244c:	68 00 b7 13 f0       	push   $0xf013b700
f0122451:	68 95 06 00 00       	push   $0x695
f0122456:	68 1a b6 13 f0       	push   $0xf013b61a
f012245b:	e8 a5 dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122460:	e8 63 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122465:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122468:	74 17                	je     f0122481 <test_kfree_bestfirstfit+0x18d>
f012246a:	83 ec 04             	sub    $0x4,%esp
f012246d:	68 34 b6 13 f0       	push   $0xf013b634
f0122472:	68 96 06 00 00       	push   $0x696
f0122477:	68 1a b6 13 f0       	push   $0xf013b61a
f012247c:	e8 84 dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122481:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122484:	e8 1e aa fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122489:	29 c3                	sub    %eax,%ebx
f012248b:	89 d8                	mov    %ebx,%eax
f012248d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122492:	74 17                	je     f01224ab <test_kfree_bestfirstfit+0x1b7>
f0122494:	83 ec 04             	sub    $0x4,%esp
f0122497:	68 9c b6 13 f0       	push   $0xf013b69c
f012249c:	68 97 06 00 00       	push   $0x697
f01224a1:	68 1a b6 13 f0       	push   $0xf013b61a
f01224a6:	e8 5a dd fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01224ab:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01224b2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01224b5:	e8 ed a9 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01224ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224bd:	e8 06 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01224c5:	83 ec 0c             	sub    $0xc,%esp
f01224c8:	68 00 fc 1f 00       	push   $0x1ffc00
f01224cd:	e8 bd 56 fe ff       	call   f0107b8f <kmalloc>
f01224d2:	83 c4 10             	add    $0x10,%esp
f01224d5:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224db:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01224e1:	89 c1                	mov    %eax,%ecx
f01224e3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01224ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01224ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01224f2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01224f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01224f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01224fd:	f7 75 b0             	divl   -0x50(%ebp)
f0122500:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122503:	29 d0                	sub    %edx,%eax
f0122505:	89 c3                	mov    %eax,%ebx
f0122507:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012250e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122513:	0f b6 d0             	movzbl %al,%edx
f0122516:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122519:	01 d0                	add    %edx,%eax
f012251b:	48                   	dec    %eax
f012251c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012251f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122522:	ba 00 00 00 00       	mov    $0x0,%edx
f0122527:	f7 75 a8             	divl   -0x58(%ebp)
f012252a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012252d:	29 d0                	sub    %edx,%eax
f012252f:	01 c3                	add    %eax,%ebx
f0122531:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122538:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012253d:	0f b6 c0             	movzbl %al,%eax
f0122540:	c1 e0 04             	shl    $0x4,%eax
f0122543:	89 c2                	mov    %eax,%edx
f0122545:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122548:	01 d0                	add    %edx,%eax
f012254a:	48                   	dec    %eax
f012254b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012254e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122551:	ba 00 00 00 00       	mov    $0x0,%edx
f0122556:	f7 75 a0             	divl   -0x60(%ebp)
f0122559:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012255c:	29 d0                	sub    %edx,%eax
f012255e:	01 d8                	add    %ebx,%eax
f0122560:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122565:	39 c1                	cmp    %eax,%ecx
f0122567:	74 17                	je     f0122580 <test_kfree_bestfirstfit+0x28c>
f0122569:	83 ec 04             	sub    $0x4,%esp
f012256c:	68 00 b7 13 f0       	push   $0xf013b700
f0122571:	68 9e 06 00 00       	push   $0x69e
f0122576:	68 1a b6 13 f0       	push   $0xf013b61a
f012257b:	e8 85 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122580:	e8 43 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122585:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122588:	74 17                	je     f01225a1 <test_kfree_bestfirstfit+0x2ad>
f012258a:	83 ec 04             	sub    $0x4,%esp
f012258d:	68 34 b6 13 f0       	push   $0xf013b634
f0122592:	68 9f 06 00 00       	push   $0x69f
f0122597:	68 1a b6 13 f0       	push   $0xf013b61a
f012259c:	e8 64 dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01225a1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01225a4:	e8 fe a8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01225a9:	29 c3                	sub    %eax,%ebx
f01225ab:	89 d8                	mov    %ebx,%eax
f01225ad:	3d 00 02 00 00       	cmp    $0x200,%eax
f01225b2:	74 17                	je     f01225cb <test_kfree_bestfirstfit+0x2d7>
f01225b4:	83 ec 04             	sub    $0x4,%esp
f01225b7:	68 9c b6 13 f0       	push   $0xf013b69c
f01225bc:	68 a0 06 00 00       	push   $0x6a0
f01225c1:	68 1a b6 13 f0       	push   $0xf013b61a
f01225c6:	e8 3a dc fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01225cb:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01225d2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225d5:	e8 cd a8 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01225da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225dd:	e8 e6 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01225e5:	83 ec 0c             	sub    $0xc,%esp
f01225e8:	68 00 08 00 00       	push   $0x800
f01225ed:	e8 9d 55 fe ff       	call   f0107b8f <kmalloc>
f01225f2:	83 c4 10             	add    $0x10,%esp
f01225f5:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225fb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122601:	89 c1                	mov    %eax,%ecx
f0122603:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012260a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012260d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122612:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122615:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122618:	ba 00 00 00 00       	mov    $0x0,%edx
f012261d:	f7 75 98             	divl   -0x68(%ebp)
f0122620:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122623:	29 d0                	sub    %edx,%eax
f0122625:	89 c3                	mov    %eax,%ebx
f0122627:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012262e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122633:	0f b6 d0             	movzbl %al,%edx
f0122636:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122639:	01 d0                	add    %edx,%eax
f012263b:	48                   	dec    %eax
f012263c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012263f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122642:	ba 00 00 00 00       	mov    $0x0,%edx
f0122647:	f7 75 90             	divl   -0x70(%ebp)
f012264a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012264d:	29 d0                	sub    %edx,%eax
f012264f:	01 c3                	add    %eax,%ebx
f0122651:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122658:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012265d:	0f b6 c0             	movzbl %al,%eax
f0122660:	c1 e0 04             	shl    $0x4,%eax
f0122663:	89 c2                	mov    %eax,%edx
f0122665:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122668:	01 d0                	add    %edx,%eax
f012266a:	48                   	dec    %eax
f012266b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012266e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122671:	ba 00 00 00 00       	mov    $0x0,%edx
f0122676:	f7 75 88             	divl   -0x78(%ebp)
f0122679:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012267c:	29 d0                	sub    %edx,%eax
f012267e:	01 d8                	add    %ebx,%eax
f0122680:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122685:	39 c1                	cmp    %eax,%ecx
f0122687:	74 17                	je     f01226a0 <test_kfree_bestfirstfit+0x3ac>
f0122689:	83 ec 04             	sub    $0x4,%esp
f012268c:	68 00 b7 13 f0       	push   $0xf013b700
f0122691:	68 a7 06 00 00       	push   $0x6a7
f0122696:	68 1a b6 13 f0       	push   $0xf013b61a
f012269b:	e8 65 db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226a0:	e8 23 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01226a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226a8:	74 17                	je     f01226c1 <test_kfree_bestfirstfit+0x3cd>
f01226aa:	83 ec 04             	sub    $0x4,%esp
f01226ad:	68 34 b6 13 f0       	push   $0xf013b634
f01226b2:	68 a8 06 00 00       	push   $0x6a8
f01226b7:	68 1a b6 13 f0       	push   $0xf013b61a
f01226bc:	e8 44 db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226c1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226c4:	e8 de a7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01226c9:	29 c3                	sub    %eax,%ebx
f01226cb:	89 d8                	mov    %ebx,%eax
f01226cd:	83 f8 01             	cmp    $0x1,%eax
f01226d0:	74 17                	je     f01226e9 <test_kfree_bestfirstfit+0x3f5>
f01226d2:	83 ec 04             	sub    $0x4,%esp
f01226d5:	68 9c b6 13 f0       	push   $0xf013b69c
f01226da:	68 a9 06 00 00       	push   $0x6a9
f01226df:	68 1a b6 13 f0       	push   $0xf013b61a
f01226e4:	e8 1c db fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01226e9:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01226f0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01226f3:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01226f9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01226fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122703:	eb 0e                	jmp    f0122713 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122705:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122708:	8b 45 80             	mov    -0x80(%ebp),%eax
f012270b:	01 d0                	add    %edx,%eax
f012270d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122710:	ff 45 f4             	incl   -0xc(%ebp)
f0122713:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122719:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012271c:	7f e7                	jg     f0122705 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012271e:	e8 84 a7 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122723:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122726:	e8 9d 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012272b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012272e:	83 ec 0c             	sub    $0xc,%esp
f0122731:	68 00 08 00 00       	push   $0x800
f0122736:	e8 54 54 fe ff       	call   f0107b8f <kmalloc>
f012273b:	83 c4 10             	add    $0x10,%esp
f012273e:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122744:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012274a:	89 c1                	mov    %eax,%ecx
f012274c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122753:	10 00 00 
f0122756:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012275c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122761:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122767:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012276d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122772:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122778:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012277e:	29 d0                	sub    %edx,%eax
f0122780:	89 c3                	mov    %eax,%ebx
f0122782:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122789:	10 00 00 
f012278c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122791:	0f b6 d0             	movzbl %al,%edx
f0122794:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012279a:	01 d0                	add    %edx,%eax
f012279c:	48                   	dec    %eax
f012279d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01227a3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01227a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01227ae:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01227b4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01227ba:	29 d0                	sub    %edx,%eax
f01227bc:	01 c3                	add    %eax,%ebx
f01227be:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01227c5:	10 00 00 
f01227c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01227cd:	0f b6 c0             	movzbl %al,%eax
f01227d0:	c1 e0 04             	shl    $0x4,%eax
f01227d3:	89 c2                	mov    %eax,%edx
f01227d5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01227db:	01 d0                	add    %edx,%eax
f01227dd:	48                   	dec    %eax
f01227de:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01227e4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01227ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01227ef:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01227f5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01227fb:	29 d0                	sub    %edx,%eax
f01227fd:	01 d8                	add    %ebx,%eax
f01227ff:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122804:	39 c1                	cmp    %eax,%ecx
f0122806:	74 17                	je     f012281f <test_kfree_bestfirstfit+0x52b>
f0122808:	83 ec 04             	sub    $0x4,%esp
f012280b:	68 00 b7 13 f0       	push   $0xf013b700
f0122810:	68 b5 06 00 00       	push   $0x6b5
f0122815:	68 1a b6 13 f0       	push   $0xf013b61a
f012281a:	e8 e6 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012281f:	e8 a4 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122824:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122827:	74 17                	je     f0122840 <test_kfree_bestfirstfit+0x54c>
f0122829:	83 ec 04             	sub    $0x4,%esp
f012282c:	68 34 b6 13 f0       	push   $0xf013b634
f0122831:	68 b6 06 00 00       	push   $0x6b6
f0122836:	68 1a b6 13 f0       	push   $0xf013b61a
f012283b:	e8 c5 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122843:	e8 5f a6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122848:	29 c3                	sub    %eax,%ebx
f012284a:	89 d8                	mov    %ebx,%eax
f012284c:	83 f8 01             	cmp    $0x1,%eax
f012284f:	74 17                	je     f0122868 <test_kfree_bestfirstfit+0x574>
f0122851:	83 ec 04             	sub    $0x4,%esp
f0122854:	68 9c b6 13 f0       	push   $0xf013b69c
f0122859:	68 b7 06 00 00       	push   $0x6b7
f012285e:	68 1a b6 13 f0       	push   $0xf013b61a
f0122863:	e8 9d d9 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122868:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012286f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122872:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122878:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012287b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122882:	eb 0e                	jmp    f0122892 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122884:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122887:	8b 45 80             	mov    -0x80(%ebp),%eax
f012288a:	01 d0                	add    %edx,%eax
f012288c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012288f:	ff 45 f4             	incl   -0xc(%ebp)
f0122892:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122898:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012289b:	7f e7                	jg     f0122884 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012289d:	e8 05 a6 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01228a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228a5:	e8 1e 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01228ad:	83 ec 0c             	sub    $0xc,%esp
f01228b0:	68 00 1c 00 00       	push   $0x1c00
f01228b5:	e8 d5 52 fe ff       	call   f0107b8f <kmalloc>
f01228ba:	83 c4 10             	add    $0x10,%esp
f01228bd:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228c3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01228c9:	89 c1                	mov    %eax,%ecx
f01228cb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01228d2:	10 00 00 
f01228d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01228db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228e0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01228e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01228ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01228f1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01228f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01228fd:	29 d0                	sub    %edx,%eax
f01228ff:	89 c3                	mov    %eax,%ebx
f0122901:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122908:	10 00 00 
f012290b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122910:	0f b6 d0             	movzbl %al,%edx
f0122913:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122919:	01 d0                	add    %edx,%eax
f012291b:	48                   	dec    %eax
f012291c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122922:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122928:	ba 00 00 00 00       	mov    $0x0,%edx
f012292d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122933:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122939:	29 d0                	sub    %edx,%eax
f012293b:	01 c3                	add    %eax,%ebx
f012293d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122944:	10 00 00 
f0122947:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012294c:	0f b6 c0             	movzbl %al,%eax
f012294f:	c1 e0 04             	shl    $0x4,%eax
f0122952:	89 c2                	mov    %eax,%edx
f0122954:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012295a:	01 d0                	add    %edx,%eax
f012295c:	48                   	dec    %eax
f012295d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122963:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122969:	ba 00 00 00 00       	mov    $0x0,%edx
f012296e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122974:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012297a:	29 d0                	sub    %edx,%eax
f012297c:	01 d8                	add    %ebx,%eax
f012297e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122983:	39 c1                	cmp    %eax,%ecx
f0122985:	74 17                	je     f012299e <test_kfree_bestfirstfit+0x6aa>
f0122987:	83 ec 04             	sub    $0x4,%esp
f012298a:	68 00 b7 13 f0       	push   $0xf013b700
f012298f:	68 c3 06 00 00       	push   $0x6c3
f0122994:	68 1a b6 13 f0       	push   $0xf013b61a
f0122999:	e8 67 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012299e:	e8 25 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229a6:	74 17                	je     f01229bf <test_kfree_bestfirstfit+0x6cb>
f01229a8:	83 ec 04             	sub    $0x4,%esp
f01229ab:	68 34 b6 13 f0       	push   $0xf013b634
f01229b0:	68 c4 06 00 00       	push   $0x6c4
f01229b5:	68 1a b6 13 f0       	push   $0xf013b61a
f01229ba:	e8 46 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229c2:	e8 e0 a4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01229c7:	29 c3                	sub    %eax,%ebx
f01229c9:	89 d8                	mov    %ebx,%eax
f01229cb:	83 f8 02             	cmp    $0x2,%eax
f01229ce:	74 17                	je     f01229e7 <test_kfree_bestfirstfit+0x6f3>
f01229d0:	83 ec 04             	sub    $0x4,%esp
f01229d3:	68 9c b6 13 f0       	push   $0xf013b69c
f01229d8:	68 c5 06 00 00       	push   $0x6c5
f01229dd:	68 1a b6 13 f0       	push   $0xf013b61a
f01229e2:	e8 1e d8 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01229e7:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01229ee:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01229f1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01229f7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01229fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a01:	eb 0e                	jmp    f0122a11 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122a03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a09:	01 d0                	add    %edx,%eax
f0122a0b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122a0e:	ff 45 f4             	incl   -0xc(%ebp)
f0122a11:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122a17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a1a:	7f e7                	jg     f0122a03 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a1c:	e8 86 a4 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122a21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a24:	e8 9f 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a29:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122a2c:	83 ec 0c             	sub    $0xc,%esp
f0122a2f:	68 00 fc 2f 00       	push   $0x2ffc00
f0122a34:	e8 56 51 fe ff       	call   f0107b8f <kmalloc>
f0122a39:	83 c4 10             	add    $0x10,%esp
f0122a3c:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a42:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122a48:	89 c1                	mov    %eax,%ecx
f0122a4a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122a51:	10 00 00 
f0122a54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122a5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a5f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122a65:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122a6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a70:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122a76:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122a7c:	29 d0                	sub    %edx,%eax
f0122a7e:	89 c3                	mov    %eax,%ebx
f0122a80:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122a87:	10 00 00 
f0122a8a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122a8f:	0f b6 d0             	movzbl %al,%edx
f0122a92:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122a98:	01 d0                	add    %edx,%eax
f0122a9a:	48                   	dec    %eax
f0122a9b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122aa1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122aa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aac:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122ab2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ab8:	29 d0                	sub    %edx,%eax
f0122aba:	01 c3                	add    %eax,%ebx
f0122abc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122ac3:	10 00 00 
f0122ac6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122acb:	0f b6 c0             	movzbl %al,%eax
f0122ace:	c1 e0 04             	shl    $0x4,%eax
f0122ad1:	89 c2                	mov    %eax,%edx
f0122ad3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122ad9:	01 d0                	add    %edx,%eax
f0122adb:	48                   	dec    %eax
f0122adc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122ae2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122ae8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aed:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122af3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122af9:	29 d0                	sub    %edx,%eax
f0122afb:	01 d8                	add    %ebx,%eax
f0122afd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122b02:	39 c1                	cmp    %eax,%ecx
f0122b04:	74 17                	je     f0122b1d <test_kfree_bestfirstfit+0x829>
f0122b06:	83 ec 04             	sub    $0x4,%esp
f0122b09:	68 00 b7 13 f0       	push   $0xf013b700
f0122b0e:	68 d1 06 00 00       	push   $0x6d1
f0122b13:	68 1a b6 13 f0       	push   $0xf013b61a
f0122b18:	e8 e8 d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b1d:	e8 a6 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b22:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b25:	74 17                	je     f0122b3e <test_kfree_bestfirstfit+0x84a>
f0122b27:	83 ec 04             	sub    $0x4,%esp
f0122b2a:	68 34 b6 13 f0       	push   $0xf013b634
f0122b2f:	68 d2 06 00 00       	push   $0x6d2
f0122b34:	68 1a b6 13 f0       	push   $0xf013b61a
f0122b39:	e8 c7 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b3e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b41:	e8 61 a3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122b46:	29 c3                	sub    %eax,%ebx
f0122b48:	89 d8                	mov    %ebx,%eax
f0122b4a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122b4f:	74 17                	je     f0122b68 <test_kfree_bestfirstfit+0x874>
f0122b51:	83 ec 04             	sub    $0x4,%esp
f0122b54:	68 9c b6 13 f0       	push   $0xf013b69c
f0122b59:	68 d3 06 00 00       	push   $0x6d3
f0122b5e:	68 1a b6 13 f0       	push   $0xf013b61a
f0122b63:	e8 9d d6 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122b68:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122b6f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122b72:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122b78:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122b7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b82:	eb 0e                	jmp    f0122b92 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122b84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b87:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b8a:	01 d0                	add    %edx,%eax
f0122b8c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122b8f:	ff 45 f4             	incl   -0xc(%ebp)
f0122b92:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122b98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b9b:	7f e7                	jg     f0122b84 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b9d:	e8 05 a3 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122ba2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ba5:	e8 1e 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122baa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122bad:	83 ec 0c             	sub    $0xc,%esp
f0122bb0:	68 00 fc 5f 00       	push   $0x5ffc00
f0122bb5:	e8 d5 4f fe ff       	call   f0107b8f <kmalloc>
f0122bba:	83 c4 10             	add    $0x10,%esp
f0122bbd:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bc3:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122bc9:	89 c1                	mov    %eax,%ecx
f0122bcb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122bd2:	10 00 00 
f0122bd5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122bdb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122be0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122be6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bf1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122bf7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122bfd:	29 d0                	sub    %edx,%eax
f0122bff:	89 c3                	mov    %eax,%ebx
f0122c01:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122c08:	10 00 00 
f0122c0b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122c10:	0f b6 d0             	movzbl %al,%edx
f0122c13:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122c19:	01 d0                	add    %edx,%eax
f0122c1b:	48                   	dec    %eax
f0122c1c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122c22:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c2d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122c33:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c39:	29 d0                	sub    %edx,%eax
f0122c3b:	01 c3                	add    %eax,%ebx
f0122c3d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122c44:	10 00 00 
f0122c47:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122c4c:	0f b6 c0             	movzbl %al,%eax
f0122c4f:	c1 e0 04             	shl    $0x4,%eax
f0122c52:	89 c2                	mov    %eax,%edx
f0122c54:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122c5a:	01 d0                	add    %edx,%eax
f0122c5c:	48                   	dec    %eax
f0122c5d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122c63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122c69:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c6e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122c74:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122c7a:	29 d0                	sub    %edx,%eax
f0122c7c:	01 d8                	add    %ebx,%eax
f0122c7e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122c83:	39 c1                	cmp    %eax,%ecx
f0122c85:	74 17                	je     f0122c9e <test_kfree_bestfirstfit+0x9aa>
f0122c87:	83 ec 04             	sub    $0x4,%esp
f0122c8a:	68 00 b7 13 f0       	push   $0xf013b700
f0122c8f:	68 df 06 00 00       	push   $0x6df
f0122c94:	68 1a b6 13 f0       	push   $0xf013b61a
f0122c99:	e8 67 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c9e:	e8 25 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ca3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ca6:	74 17                	je     f0122cbf <test_kfree_bestfirstfit+0x9cb>
f0122ca8:	83 ec 04             	sub    $0x4,%esp
f0122cab:	68 34 b6 13 f0       	push   $0xf013b634
f0122cb0:	68 e0 06 00 00       	push   $0x6e0
f0122cb5:	68 1a b6 13 f0       	push   $0xf013b61a
f0122cba:	e8 46 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122cbf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122cc2:	e8 e0 a1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122cc7:	29 c3                	sub    %eax,%ebx
f0122cc9:	89 d8                	mov    %ebx,%eax
f0122ccb:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122cd0:	74 17                	je     f0122ce9 <test_kfree_bestfirstfit+0x9f5>
f0122cd2:	83 ec 04             	sub    $0x4,%esp
f0122cd5:	68 9c b6 13 f0       	push   $0xf013b69c
f0122cda:	68 e1 06 00 00       	push   $0x6e1
f0122cdf:	68 1a b6 13 f0       	push   $0xf013b61a
f0122ce4:	e8 1c d5 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122ce9:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122cf0:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cf3:	e8 af a1 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122cf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cfb:	e8 c8 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d00:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122d03:	83 ec 0c             	sub    $0xc,%esp
f0122d06:	68 00 38 00 00       	push   $0x3800
f0122d0b:	e8 7f 4e fe ff       	call   f0107b8f <kmalloc>
f0122d10:	83 c4 10             	add    $0x10,%esp
f0122d13:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d19:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122d1f:	89 c1                	mov    %eax,%ecx
f0122d21:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122d28:	10 00 00 
f0122d2b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122d31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d36:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122d3c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122d42:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d47:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122d4d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122d53:	29 d0                	sub    %edx,%eax
f0122d55:	89 c3                	mov    %eax,%ebx
f0122d57:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122d5e:	10 00 00 
f0122d61:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122d66:	0f b6 d0             	movzbl %al,%edx
f0122d69:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122d6f:	01 d0                	add    %edx,%eax
f0122d71:	48                   	dec    %eax
f0122d72:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122d78:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122d7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d83:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122d89:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122d8f:	29 d0                	sub    %edx,%eax
f0122d91:	01 c3                	add    %eax,%ebx
f0122d93:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122d9a:	10 00 00 
f0122d9d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122da2:	0f b6 c0             	movzbl %al,%eax
f0122da5:	c1 e0 04             	shl    $0x4,%eax
f0122da8:	89 c2                	mov    %eax,%edx
f0122daa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122db0:	01 d0                	add    %edx,%eax
f0122db2:	48                   	dec    %eax
f0122db3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122db9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122dbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dc4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122dca:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122dd0:	29 d0                	sub    %edx,%eax
f0122dd2:	01 d8                	add    %ebx,%eax
f0122dd4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122dd9:	39 c1                	cmp    %eax,%ecx
f0122ddb:	74 17                	je     f0122df4 <test_kfree_bestfirstfit+0xb00>
f0122ddd:	83 ec 04             	sub    $0x4,%esp
f0122de0:	68 00 b7 13 f0       	push   $0xf013b700
f0122de5:	68 e8 06 00 00       	push   $0x6e8
f0122dea:	68 1a b6 13 f0       	push   $0xf013b61a
f0122def:	e8 11 d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122df4:	e8 cf 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122df9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122dfc:	74 17                	je     f0122e15 <test_kfree_bestfirstfit+0xb21>
f0122dfe:	83 ec 04             	sub    $0x4,%esp
f0122e01:	68 34 b6 13 f0       	push   $0xf013b634
f0122e06:	68 e9 06 00 00       	push   $0x6e9
f0122e0b:	68 1a b6 13 f0       	push   $0xf013b61a
f0122e10:	e8 f0 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e15:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e18:	e8 8a a0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122e1d:	29 c3                	sub    %eax,%ebx
f0122e1f:	89 d8                	mov    %ebx,%eax
f0122e21:	83 f8 04             	cmp    $0x4,%eax
f0122e24:	74 17                	je     f0122e3d <test_kfree_bestfirstfit+0xb49>
f0122e26:	83 ec 04             	sub    $0x4,%esp
f0122e29:	68 9c b6 13 f0       	push   $0xf013b69c
f0122e2e:	68 ea 06 00 00       	push   $0x6ea
f0122e33:	68 1a b6 13 f0       	push   $0xf013b61a
f0122e38:	e8 c8 d3 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122e3d:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122e44:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122e47:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e4d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122e50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e57:	eb 0e                	jmp    f0122e67 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122e59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e5c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e5f:	01 d0                	add    %edx,%eax
f0122e61:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122e64:	ff 45 f4             	incl   -0xc(%ebp)
f0122e67:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122e6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e70:	7f e7                	jg     f0122e59 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122e72:	e8 30 a0 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122e77:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122e7d:	e8 46 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e82:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122e88:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122e8e:	83 ec 0c             	sub    $0xc,%esp
f0122e91:	50                   	push   %eax
f0122e92:	e8 c3 4d fe ff       	call   f0107c5a <kfree>
f0122e97:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e9a:	e8 29 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e9f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122ea5:	74 17                	je     f0122ebe <test_kfree_bestfirstfit+0xbca>
f0122ea7:	83 ec 04             	sub    $0x4,%esp
f0122eaa:	68 34 b6 13 f0       	push   $0xf013b634
f0122eaf:	68 f9 06 00 00       	push   $0x6f9
f0122eb4:	68 1a b6 13 f0       	push   $0xf013b61a
f0122eb9:	e8 47 d3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ebe:	e8 e4 9f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122ec3:	89 c2                	mov    %eax,%edx
f0122ec5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122ecb:	29 c2                	sub    %eax,%edx
f0122ecd:	89 d0                	mov    %edx,%eax
f0122ecf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122ed4:	74 17                	je     f0122eed <test_kfree_bestfirstfit+0xbf9>
f0122ed6:	83 ec 04             	sub    $0x4,%esp
f0122ed9:	68 a4 bd 13 f0       	push   $0xf013bda4
f0122ede:	68 fa 06 00 00       	push   $0x6fa
f0122ee3:	68 1a b6 13 f0       	push   $0xf013b61a
f0122ee8:	e8 18 d3 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122eed:	e8 b5 9f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122ef2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ef8:	e8 cb 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122efd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122f03:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122f09:	83 ec 0c             	sub    $0xc,%esp
f0122f0c:	50                   	push   %eax
f0122f0d:	e8 48 4d fe ff       	call   f0107c5a <kfree>
f0122f12:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f15:	e8 ae 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f1a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122f20:	74 17                	je     f0122f39 <test_kfree_bestfirstfit+0xc45>
f0122f22:	83 ec 04             	sub    $0x4,%esp
f0122f25:	68 34 b6 13 f0       	push   $0xf013b634
f0122f2a:	68 00 07 00 00       	push   $0x700
f0122f2f:	68 1a b6 13 f0       	push   $0xf013b61a
f0122f34:	e8 cc d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f39:	e8 69 9f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122f3e:	89 c2                	mov    %eax,%edx
f0122f40:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122f46:	29 c2                	sub    %eax,%edx
f0122f48:	89 d0                	mov    %edx,%eax
f0122f4a:	83 f8 01             	cmp    $0x1,%eax
f0122f4d:	74 17                	je     f0122f66 <test_kfree_bestfirstfit+0xc72>
f0122f4f:	83 ec 04             	sub    $0x4,%esp
f0122f52:	68 a4 bd 13 f0       	push   $0xf013bda4
f0122f57:	68 01 07 00 00       	push   $0x701
f0122f5c:	68 1a b6 13 f0       	push   $0xf013b61a
f0122f61:	e8 9f d2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f66:	e8 3c 9f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122f6b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f71:	e8 52 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f76:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122f7c:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122f82:	83 ec 0c             	sub    $0xc,%esp
f0122f85:	50                   	push   %eax
f0122f86:	e8 cf 4c fe ff       	call   f0107c5a <kfree>
f0122f8b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f8e:	e8 35 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f93:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122f99:	74 17                	je     f0122fb2 <test_kfree_bestfirstfit+0xcbe>
f0122f9b:	83 ec 04             	sub    $0x4,%esp
f0122f9e:	68 34 b6 13 f0       	push   $0xf013b634
f0122fa3:	68 07 07 00 00       	push   $0x707
f0122fa8:	68 1a b6 13 f0       	push   $0xf013b61a
f0122fad:	e8 53 d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fb2:	e8 f0 9e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122fb7:	89 c2                	mov    %eax,%edx
f0122fb9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122fbf:	29 c2                	sub    %eax,%edx
f0122fc1:	89 d0                	mov    %edx,%eax
f0122fc3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122fc8:	74 17                	je     f0122fe1 <test_kfree_bestfirstfit+0xced>
f0122fca:	83 ec 04             	sub    $0x4,%esp
f0122fcd:	68 a4 bd 13 f0       	push   $0xf013bda4
f0122fd2:	68 08 07 00 00       	push   $0x708
f0122fd7:	68 1a b6 13 f0       	push   $0xf013b61a
f0122fdc:	e8 24 d2 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fe1:	e8 c1 9e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0122fe6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fec:	e8 d7 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ff1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122ff7:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122ffd:	83 ec 0c             	sub    $0xc,%esp
f0123000:	50                   	push   %eax
f0123001:	e8 54 4c fe ff       	call   f0107c5a <kfree>
f0123006:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123009:	e8 ba 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012300e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123014:	74 17                	je     f012302d <test_kfree_bestfirstfit+0xd39>
f0123016:	83 ec 04             	sub    $0x4,%esp
f0123019:	68 34 b6 13 f0       	push   $0xf013b634
f012301e:	68 0e 07 00 00       	push   $0x70e
f0123023:	68 1a b6 13 f0       	push   $0xf013b61a
f0123028:	e8 d8 d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012302d:	e8 75 9e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123032:	89 c2                	mov    %eax,%edx
f0123034:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012303a:	29 c2                	sub    %eax,%edx
f012303c:	89 d0                	mov    %edx,%eax
f012303e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123043:	74 17                	je     f012305c <test_kfree_bestfirstfit+0xd68>
f0123045:	83 ec 04             	sub    $0x4,%esp
f0123048:	68 a4 bd 13 f0       	push   $0xf013bda4
f012304d:	68 0f 07 00 00       	push   $0x70f
f0123052:	68 1a b6 13 f0       	push   $0xf013b61a
f0123057:	e8 a9 d1 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012305c:	83 ec 0c             	sub    $0xc,%esp
f012305f:	68 dc bd 13 f0       	push   $0xf013bddc
f0123064:	e8 a5 dc fd ff       	call   f0100d0e <cprintf>
f0123069:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012306c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123072:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0123075:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012307c:	eb 1e                	jmp    f012309c <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f012307e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0123084:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123087:	8b 45 80             	mov    -0x80(%ebp),%eax
f012308a:	01 c8                	add    %ecx,%eax
f012308c:	8a 00                	mov    (%eax),%al
f012308e:	0f be c0             	movsbl %al,%eax
f0123091:	01 d0                	add    %edx,%eax
f0123093:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0123099:	ff 45 f4             	incl   -0xc(%ebp)
f012309c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01230a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01230a5:	7f d7                	jg     f012307e <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01230a7:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01230ad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01230b3:	89 c1                	mov    %eax,%ecx
f01230b5:	01 c9                	add    %ecx,%ecx
f01230b7:	01 c8                	add    %ecx,%eax
f01230b9:	39 c2                	cmp    %eax,%edx
f01230bb:	74 17                	je     f01230d4 <test_kfree_bestfirstfit+0xde0>
f01230bd:	83 ec 04             	sub    $0x4,%esp
f01230c0:	68 00 be 13 f0       	push   $0xf013be00
f01230c5:	68 1c 07 00 00       	push   $0x71c
f01230ca:	68 1a b6 13 f0       	push   $0xf013b61a
f01230cf:	e8 31 d1 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01230d4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01230da:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01230dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01230e4:	eb 1e                	jmp    f0123104 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01230e6:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01230ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01230ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230f2:	01 c8                	add    %ecx,%eax
f01230f4:	8a 00                	mov    (%eax),%al
f01230f6:	0f be c0             	movsbl %al,%eax
f01230f9:	01 d0                	add    %edx,%eax
f01230fb:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0123101:	ff 45 f4             	incl   -0xc(%ebp)
f0123104:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012310a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012310d:	7f d7                	jg     f01230e6 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012310f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123115:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012311b:	c1 e2 02             	shl    $0x2,%edx
f012311e:	39 d0                	cmp    %edx,%eax
f0123120:	74 17                	je     f0123139 <test_kfree_bestfirstfit+0xe45>
f0123122:	83 ec 04             	sub    $0x4,%esp
f0123125:	68 00 be 13 f0       	push   $0xf013be00
f012312a:	68 24 07 00 00       	push   $0x724
f012312f:	68 1a b6 13 f0       	push   $0xf013b61a
f0123134:	e8 cc d0 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123139:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012313f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0123142:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123149:	eb 1e                	jmp    f0123169 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f012314b:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0123151:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123154:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123157:	01 c8                	add    %ecx,%eax
f0123159:	8a 00                	mov    (%eax),%al
f012315b:	0f be c0             	movsbl %al,%eax
f012315e:	01 d0                	add    %edx,%eax
f0123160:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123166:	ff 45 f4             	incl   -0xc(%ebp)
f0123169:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012316f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123172:	7f d7                	jg     f012314b <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0123174:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012317a:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0123180:	89 d0                	mov    %edx,%eax
f0123182:	c1 e0 02             	shl    $0x2,%eax
f0123185:	01 d0                	add    %edx,%eax
f0123187:	39 c1                	cmp    %eax,%ecx
f0123189:	74 17                	je     f01231a2 <test_kfree_bestfirstfit+0xeae>
f012318b:	83 ec 04             	sub    $0x4,%esp
f012318e:	68 00 be 13 f0       	push   $0xf013be00
f0123193:	68 2c 07 00 00       	push   $0x72c
f0123198:	68 1a b6 13 f0       	push   $0xf013b61a
f012319d:	e8 63 d0 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01231a2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01231a8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01231ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231b2:	eb 1e                	jmp    f01231d2 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01231b4:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01231ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01231bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231c0:	01 c8                	add    %ecx,%eax
f01231c2:	8a 00                	mov    (%eax),%al
f01231c4:	0f be c0             	movsbl %al,%eax
f01231c7:	01 d0                	add    %edx,%eax
f01231c9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01231cf:	ff 45 f4             	incl   -0xc(%ebp)
f01231d2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01231d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01231db:	7f d7                	jg     f01231b4 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01231dd:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01231e3:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01231e9:	89 d0                	mov    %edx,%eax
f01231eb:	01 c0                	add    %eax,%eax
f01231ed:	01 d0                	add    %edx,%eax
f01231ef:	01 c0                	add    %eax,%eax
f01231f1:	01 d0                	add    %edx,%eax
f01231f3:	39 c1                	cmp    %eax,%ecx
f01231f5:	74 17                	je     f012320e <test_kfree_bestfirstfit+0xf1a>
f01231f7:	83 ec 04             	sub    $0x4,%esp
f01231fa:	68 00 be 13 f0       	push   $0xf013be00
f01231ff:	68 34 07 00 00       	push   $0x734
f0123204:	68 1a b6 13 f0       	push   $0xf013b61a
f0123209:	e8 f7 cf fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f012320e:	83 ec 0c             	sub    $0xc,%esp
f0123211:	68 33 be 13 f0       	push   $0xf013be33
f0123216:	e8 f3 da fd ff       	call   f0100d0e <cprintf>
f012321b:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012321e:	e8 84 9c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123223:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123226:	e8 9d 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012322b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f012322e:	83 ec 0c             	sub    $0xc,%esp
f0123231:	68 00 00 30 00       	push   $0x300000
f0123236:	e8 54 49 fe ff       	call   f0107b8f <kmalloc>
f012323b:	83 c4 10             	add    $0x10,%esp
f012323e:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123244:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012324a:	89 c1                	mov    %eax,%ecx
f012324c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0123253:	10 00 00 
f0123256:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012325c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123261:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0123267:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012326d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123272:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0123278:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012327e:	29 d0                	sub    %edx,%eax
f0123280:	89 c3                	mov    %eax,%ebx
f0123282:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0123289:	10 00 00 
f012328c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123291:	0f b6 d0             	movzbl %al,%edx
f0123294:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012329a:	01 d0                	add    %edx,%eax
f012329c:	48                   	dec    %eax
f012329d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01232a3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01232a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ae:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01232b4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01232ba:	29 d0                	sub    %edx,%eax
f01232bc:	01 c3                	add    %eax,%ebx
f01232be:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01232c5:	10 00 00 
f01232c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01232cd:	0f b6 c0             	movzbl %al,%eax
f01232d0:	c1 e0 04             	shl    $0x4,%eax
f01232d3:	89 c2                	mov    %eax,%edx
f01232d5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01232db:	01 d0                	add    %edx,%eax
f01232dd:	48                   	dec    %eax
f01232de:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01232e4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01232ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ef:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01232f5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01232fb:	29 d0                	sub    %edx,%eax
f01232fd:	01 d8                	add    %ebx,%eax
f01232ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123304:	39 c1                	cmp    %eax,%ecx
f0123306:	74 17                	je     f012331f <test_kfree_bestfirstfit+0x102b>
f0123308:	83 ec 04             	sub    $0x4,%esp
f012330b:	68 00 b7 13 f0       	push   $0xf013b700
f0123310:	68 3f 07 00 00       	push   $0x73f
f0123315:	68 1a b6 13 f0       	push   $0xf013b61a
f012331a:	e8 e6 ce fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012331f:	e8 a4 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123324:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123327:	74 17                	je     f0123340 <test_kfree_bestfirstfit+0x104c>
f0123329:	83 ec 04             	sub    $0x4,%esp
f012332c:	68 34 b6 13 f0       	push   $0xf013b634
f0123331:	68 40 07 00 00       	push   $0x740
f0123336:	68 1a b6 13 f0       	push   $0xf013b61a
f012333b:	e8 c5 ce fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123340:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123343:	e8 5f 9b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123348:	29 c3                	sub    %eax,%ebx
f012334a:	89 d8                	mov    %ebx,%eax
f012334c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123351:	74 17                	je     f012336a <test_kfree_bestfirstfit+0x1076>
f0123353:	83 ec 04             	sub    $0x4,%esp
f0123356:	68 9c b6 13 f0       	push   $0xf013b69c
f012335b:	68 41 07 00 00       	push   $0x741
f0123360:	68 1a b6 13 f0       	push   $0xf013b61a
f0123365:	e8 9b ce fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012336a:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0123371:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0123374:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012337a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012337d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123384:	eb 0e                	jmp    f0123394 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0123386:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123389:	8b 45 80             	mov    -0x80(%ebp),%eax
f012338c:	01 d0                	add    %edx,%eax
f012338e:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0123391:	ff 45 f4             	incl   -0xc(%ebp)
f0123394:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012339a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012339d:	7f e7                	jg     f0123386 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012339f:	e8 03 9b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01233a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233a7:	e8 1c 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01233af:	83 ec 0c             	sub    $0xc,%esp
f01233b2:	68 00 08 00 00       	push   $0x800
f01233b7:	e8 d3 47 fe ff       	call   f0107b8f <kmalloc>
f01233bc:	83 c4 10             	add    $0x10,%esp
f01233bf:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233c5:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01233cb:	89 c1                	mov    %eax,%ecx
f01233cd:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01233d4:	10 00 00 
f01233d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01233dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01233e2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01233e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01233ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01233f3:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01233f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01233ff:	29 d0                	sub    %edx,%eax
f0123401:	89 c3                	mov    %eax,%ebx
f0123403:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012340a:	10 00 00 
f012340d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123412:	0f b6 d0             	movzbl %al,%edx
f0123415:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012341b:	01 d0                	add    %edx,%eax
f012341d:	48                   	dec    %eax
f012341e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123424:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012342a:	ba 00 00 00 00       	mov    $0x0,%edx
f012342f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123435:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012343b:	29 d0                	sub    %edx,%eax
f012343d:	01 c3                	add    %eax,%ebx
f012343f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123446:	10 00 00 
f0123449:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012344e:	0f b6 c0             	movzbl %al,%eax
f0123451:	c1 e0 04             	shl    $0x4,%eax
f0123454:	89 c2                	mov    %eax,%edx
f0123456:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012345c:	01 d0                	add    %edx,%eax
f012345e:	48                   	dec    %eax
f012345f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123465:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012346b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123470:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123476:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012347c:	29 d0                	sub    %edx,%eax
f012347e:	01 d8                	add    %ebx,%eax
f0123480:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0123485:	39 c1                	cmp    %eax,%ecx
f0123487:	74 17                	je     f01234a0 <test_kfree_bestfirstfit+0x11ac>
f0123489:	83 ec 04             	sub    $0x4,%esp
f012348c:	68 00 b7 13 f0       	push   $0xf013b700
f0123491:	68 4d 07 00 00       	push   $0x74d
f0123496:	68 1a b6 13 f0       	push   $0xf013b61a
f012349b:	e8 65 cd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234a0:	e8 23 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234a8:	74 17                	je     f01234c1 <test_kfree_bestfirstfit+0x11cd>
f01234aa:	83 ec 04             	sub    $0x4,%esp
f01234ad:	68 34 b6 13 f0       	push   $0xf013b634
f01234b2:	68 4e 07 00 00       	push   $0x74e
f01234b7:	68 1a b6 13 f0       	push   $0xf013b61a
f01234bc:	e8 44 cd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234c1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01234c4:	e8 de 99 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01234c9:	29 c3                	sub    %eax,%ebx
f01234cb:	89 d8                	mov    %ebx,%eax
f01234cd:	83 f8 01             	cmp    $0x1,%eax
f01234d0:	74 17                	je     f01234e9 <test_kfree_bestfirstfit+0x11f5>
f01234d2:	83 ec 04             	sub    $0x4,%esp
f01234d5:	68 9c b6 13 f0       	push   $0xf013b69c
f01234da:	68 4f 07 00 00       	push   $0x74f
f01234df:	68 1a b6 13 f0       	push   $0xf013b61a
f01234e4:	e8 1c cd fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01234e9:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01234f0:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01234f3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01234f9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01234fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123503:	eb 0e                	jmp    f0123513 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123505:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123508:	8b 45 80             	mov    -0x80(%ebp),%eax
f012350b:	01 d0                	add    %edx,%eax
f012350d:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123510:	ff 45 f4             	incl   -0xc(%ebp)
f0123513:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123519:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012351c:	7f e7                	jg     f0123505 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012351e:	e8 84 99 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123523:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123526:	e8 9d 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012352b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012352e:	83 ec 0c             	sub    $0xc,%esp
f0123531:	68 00 00 10 00       	push   $0x100000
f0123536:	e8 54 46 fe ff       	call   f0107b8f <kmalloc>
f012353b:	83 c4 10             	add    $0x10,%esp
f012353e:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123544:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012354a:	89 c1                	mov    %eax,%ecx
f012354c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123553:	10 00 00 
f0123556:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012355c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123561:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123567:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012356d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123572:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123578:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012357e:	29 d0                	sub    %edx,%eax
f0123580:	89 c3                	mov    %eax,%ebx
f0123582:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123589:	10 00 00 
f012358c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123591:	0f b6 d0             	movzbl %al,%edx
f0123594:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012359a:	01 d0                	add    %edx,%eax
f012359c:	48                   	dec    %eax
f012359d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01235a3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01235a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ae:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01235b4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01235ba:	29 d0                	sub    %edx,%eax
f01235bc:	01 c3                	add    %eax,%ebx
f01235be:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01235c5:	10 00 00 
f01235c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01235cd:	0f b6 c0             	movzbl %al,%eax
f01235d0:	c1 e0 04             	shl    $0x4,%eax
f01235d3:	89 c2                	mov    %eax,%edx
f01235d5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01235db:	01 d0                	add    %edx,%eax
f01235dd:	48                   	dec    %eax
f01235de:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01235e4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ef:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01235f5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235fb:	29 d0                	sub    %edx,%eax
f01235fd:	01 d8                	add    %ebx,%eax
f01235ff:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123604:	39 c1                	cmp    %eax,%ecx
f0123606:	74 17                	je     f012361f <test_kfree_bestfirstfit+0x132b>
f0123608:	83 ec 04             	sub    $0x4,%esp
f012360b:	68 00 b7 13 f0       	push   $0xf013b700
f0123610:	68 5b 07 00 00       	push   $0x75b
f0123615:	68 1a b6 13 f0       	push   $0xf013b61a
f012361a:	e8 e6 cb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012361f:	e8 a4 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123624:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123627:	74 17                	je     f0123640 <test_kfree_bestfirstfit+0x134c>
f0123629:	83 ec 04             	sub    $0x4,%esp
f012362c:	68 34 b6 13 f0       	push   $0xf013b634
f0123631:	68 5c 07 00 00       	push   $0x75c
f0123636:	68 1a b6 13 f0       	push   $0xf013b61a
f012363b:	e8 c5 cb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123640:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123643:	e8 5f 98 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123648:	29 c3                	sub    %eax,%ebx
f012364a:	89 d8                	mov    %ebx,%eax
f012364c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123651:	74 17                	je     f012366a <test_kfree_bestfirstfit+0x1376>
f0123653:	83 ec 04             	sub    $0x4,%esp
f0123656:	68 9c b6 13 f0       	push   $0xf013b69c
f012365b:	68 5d 07 00 00       	push   $0x75d
f0123660:	68 1a b6 13 f0       	push   $0xf013b61a
f0123665:	e8 9b cb fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012366a:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123671:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123674:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012367a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012367d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123684:	eb 0e                	jmp    f0123694 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123686:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123689:	8b 45 80             	mov    -0x80(%ebp),%eax
f012368c:	01 d0                	add    %edx,%eax
f012368e:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123691:	ff 45 f4             	incl   -0xc(%ebp)
f0123694:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012369a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012369d:	7f e7                	jg     f0123686 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f012369f:	83 ec 0c             	sub    $0xc,%esp
f01236a2:	68 3a be 13 f0       	push   $0xf013be3a
f01236a7:	e8 62 d6 fd ff       	call   f0100d0e <cprintf>
f01236ac:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01236af:	e8 f3 97 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01236b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236b7:	e8 0c 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01236bf:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01236c5:	83 ec 0c             	sub    $0xc,%esp
f01236c8:	50                   	push   %eax
f01236c9:	e8 8c 45 fe ff       	call   f0107c5a <kfree>
f01236ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236d1:	e8 f2 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01236d9:	74 17                	je     f01236f2 <test_kfree_bestfirstfit+0x13fe>
f01236db:	83 ec 04             	sub    $0x4,%esp
f01236de:	68 34 b6 13 f0       	push   $0xf013b634
f01236e3:	68 6d 07 00 00       	push   $0x76d
f01236e8:	68 1a b6 13 f0       	push   $0xf013b61a
f01236ed:	e8 13 cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01236f2:	e8 b0 97 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01236f7:	89 c2                	mov    %eax,%edx
f01236f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01236fc:	29 c2                	sub    %eax,%edx
f01236fe:	89 d0                	mov    %edx,%eax
f0123700:	83 f8 02             	cmp    $0x2,%eax
f0123703:	74 17                	je     f012371c <test_kfree_bestfirstfit+0x1428>
f0123705:	83 ec 04             	sub    $0x4,%esp
f0123708:	68 a4 bd 13 f0       	push   $0xf013bda4
f012370d:	68 6e 07 00 00       	push   $0x76e
f0123712:	68 1a b6 13 f0       	push   $0xf013b61a
f0123717:	e8 e9 ca fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012371c:	e8 86 97 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123721:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123724:	e8 9f 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123729:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012372c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123732:	83 ec 0c             	sub    $0xc,%esp
f0123735:	50                   	push   %eax
f0123736:	e8 1f 45 fe ff       	call   f0107c5a <kfree>
f012373b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012373e:	e8 85 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123743:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123746:	74 17                	je     f012375f <test_kfree_bestfirstfit+0x146b>
f0123748:	83 ec 04             	sub    $0x4,%esp
f012374b:	68 34 b6 13 f0       	push   $0xf013b634
f0123750:	68 74 07 00 00       	push   $0x774
f0123755:	68 1a b6 13 f0       	push   $0xf013b61a
f012375a:	e8 a6 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012375f:	e8 43 97 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123764:	89 c2                	mov    %eax,%edx
f0123766:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123769:	29 c2                	sub    %eax,%edx
f012376b:	89 d0                	mov    %edx,%eax
f012376d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123772:	74 17                	je     f012378b <test_kfree_bestfirstfit+0x1497>
f0123774:	83 ec 04             	sub    $0x4,%esp
f0123777:	68 a4 bd 13 f0       	push   $0xf013bda4
f012377c:	68 75 07 00 00       	push   $0x775
f0123781:	68 1a b6 13 f0       	push   $0xf013b61a
f0123786:	e8 7a ca fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012378b:	e8 17 97 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123790:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123793:	e8 30 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123798:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f012379b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01237a1:	83 ec 0c             	sub    $0xc,%esp
f01237a4:	50                   	push   %eax
f01237a5:	e8 b0 44 fe ff       	call   f0107c5a <kfree>
f01237aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237ad:	e8 16 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237b5:	74 17                	je     f01237ce <test_kfree_bestfirstfit+0x14da>
f01237b7:	83 ec 04             	sub    $0x4,%esp
f01237ba:	68 34 b6 13 f0       	push   $0xf013b634
f01237bf:	68 7b 07 00 00       	push   $0x77b
f01237c4:	68 1a b6 13 f0       	push   $0xf013b61a
f01237c9:	e8 37 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01237ce:	e8 d4 96 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01237d3:	89 c2                	mov    %eax,%edx
f01237d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237d8:	29 c2                	sub    %eax,%edx
f01237da:	89 d0                	mov    %edx,%eax
f01237dc:	83 f8 01             	cmp    $0x1,%eax
f01237df:	74 17                	je     f01237f8 <test_kfree_bestfirstfit+0x1504>
f01237e1:	83 ec 04             	sub    $0x4,%esp
f01237e4:	68 a4 bd 13 f0       	push   $0xf013bda4
f01237e9:	68 7c 07 00 00       	push   $0x77c
f01237ee:	68 1a b6 13 f0       	push   $0xf013b61a
f01237f3:	e8 0d ca fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01237f8:	e8 aa 96 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01237fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123800:	e8 c3 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123805:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123808:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012380e:	83 ec 0c             	sub    $0xc,%esp
f0123811:	50                   	push   %eax
f0123812:	e8 43 44 fe ff       	call   f0107c5a <kfree>
f0123817:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012381a:	e8 a9 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012381f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123822:	74 17                	je     f012383b <test_kfree_bestfirstfit+0x1547>
f0123824:	83 ec 04             	sub    $0x4,%esp
f0123827:	68 34 b6 13 f0       	push   $0xf013b634
f012382c:	68 82 07 00 00       	push   $0x782
f0123831:	68 1a b6 13 f0       	push   $0xf013b61a
f0123836:	e8 ca c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012383b:	e8 67 96 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123840:	89 c2                	mov    %eax,%edx
f0123842:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123845:	29 c2                	sub    %eax,%edx
f0123847:	89 d0                	mov    %edx,%eax
f0123849:	83 f8 04             	cmp    $0x4,%eax
f012384c:	74 17                	je     f0123865 <test_kfree_bestfirstfit+0x1571>
f012384e:	83 ec 04             	sub    $0x4,%esp
f0123851:	68 a4 bd 13 f0       	push   $0xf013bda4
f0123856:	68 83 07 00 00       	push   $0x783
f012385b:	68 1a b6 13 f0       	push   $0xf013b61a
f0123860:	e8 a0 c9 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123865:	e8 3d 96 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012386a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012386d:	e8 56 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123872:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123875:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012387b:	83 ec 0c             	sub    $0xc,%esp
f012387e:	50                   	push   %eax
f012387f:	e8 d6 43 fe ff       	call   f0107c5a <kfree>
f0123884:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123887:	e8 3c 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012388c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012388f:	74 17                	je     f01238a8 <test_kfree_bestfirstfit+0x15b4>
f0123891:	83 ec 04             	sub    $0x4,%esp
f0123894:	68 34 b6 13 f0       	push   $0xf013b634
f0123899:	68 89 07 00 00       	push   $0x789
f012389e:	68 1a b6 13 f0       	push   $0xf013b61a
f01238a3:	e8 5d c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01238a8:	e8 fa 95 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01238ad:	89 c2                	mov    %eax,%edx
f01238af:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01238b2:	29 c2                	sub    %eax,%edx
f01238b4:	89 d0                	mov    %edx,%eax
f01238b6:	3d 00 03 00 00       	cmp    $0x300,%eax
f01238bb:	74 17                	je     f01238d4 <test_kfree_bestfirstfit+0x15e0>
f01238bd:	83 ec 04             	sub    $0x4,%esp
f01238c0:	68 a4 bd 13 f0       	push   $0xf013bda4
f01238c5:	68 8a 07 00 00       	push   $0x78a
f01238ca:	68 1a b6 13 f0       	push   $0xf013b61a
f01238cf:	e8 31 c9 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01238d4:	e8 ce 95 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01238d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238dc:	e8 e7 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01238e4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01238ea:	83 ec 0c             	sub    $0xc,%esp
f01238ed:	50                   	push   %eax
f01238ee:	e8 67 43 fe ff       	call   f0107c5a <kfree>
f01238f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238f6:	e8 cd 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238fe:	74 17                	je     f0123917 <test_kfree_bestfirstfit+0x1623>
f0123900:	83 ec 04             	sub    $0x4,%esp
f0123903:	68 34 b6 13 f0       	push   $0xf013b634
f0123908:	68 90 07 00 00       	push   $0x790
f012390d:	68 1a b6 13 f0       	push   $0xf013b61a
f0123912:	e8 ee c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123917:	e8 8b 95 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012391c:	89 c2                	mov    %eax,%edx
f012391e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123921:	29 c2                	sub    %eax,%edx
f0123923:	89 d0                	mov    %edx,%eax
f0123925:	83 f8 01             	cmp    $0x1,%eax
f0123928:	74 17                	je     f0123941 <test_kfree_bestfirstfit+0x164d>
f012392a:	83 ec 04             	sub    $0x4,%esp
f012392d:	68 a4 bd 13 f0       	push   $0xf013bda4
f0123932:	68 91 07 00 00       	push   $0x791
f0123937:	68 1a b6 13 f0       	push   $0xf013b61a
f012393c:	e8 c4 c8 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123941:	e8 61 95 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123946:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123949:	e8 7a 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012394e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123951:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123957:	83 ec 0c             	sub    $0xc,%esp
f012395a:	50                   	push   %eax
f012395b:	e8 fa 42 fe ff       	call   f0107c5a <kfree>
f0123960:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123963:	e8 60 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123968:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012396b:	74 17                	je     f0123984 <test_kfree_bestfirstfit+0x1690>
f012396d:	83 ec 04             	sub    $0x4,%esp
f0123970:	68 34 b6 13 f0       	push   $0xf013b634
f0123975:	68 97 07 00 00       	push   $0x797
f012397a:	68 1a b6 13 f0       	push   $0xf013b61a
f012397f:	e8 81 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123984:	e8 1e 95 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123989:	89 c2                	mov    %eax,%edx
f012398b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012398e:	29 c2                	sub    %eax,%edx
f0123990:	89 d0                	mov    %edx,%eax
f0123992:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123997:	74 17                	je     f01239b0 <test_kfree_bestfirstfit+0x16bc>
f0123999:	83 ec 04             	sub    $0x4,%esp
f012399c:	68 a4 bd 13 f0       	push   $0xf013bda4
f01239a1:	68 98 07 00 00       	push   $0x798
f01239a6:	68 1a b6 13 f0       	push   $0xf013b61a
f01239ab:	e8 55 c8 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01239b0:	e8 f2 94 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01239b5:	89 c2                	mov    %eax,%edx
f01239b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01239ba:	39 c2                	cmp    %eax,%edx
f01239bc:	74 17                	je     f01239d5 <test_kfree_bestfirstfit+0x16e1>
f01239be:	83 ec 04             	sub    $0x4,%esp
f01239c1:	68 44 be 13 f0       	push   $0xf013be44
f01239c6:	68 9a 07 00 00       	push   $0x79a
f01239cb:	68 1a b6 13 f0       	push   $0xf013b61a
f01239d0:	e8 30 c8 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01239d5:	83 ec 0c             	sub    $0xc,%esp
f01239d8:	68 78 be 13 f0       	push   $0xf013be78
f01239dd:	e8 2c d3 fd ff       	call   f0100d0e <cprintf>
f01239e2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01239e5:	83 ec 0c             	sub    $0xc,%esp
f01239e8:	6a 03                	push   $0x3
f01239ea:	e8 58 99 fe ff       	call   f010d347 <sys_bypassPageFault>
f01239ef:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01239f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01239f9:	e9 82 00 00 00       	jmp    f0123a80 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01239fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a01:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123a08:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123a0b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a0e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123a11:	e8 1f 99 fe ff       	call   f010d335 <sys_rcr2>
f0123a16:	89 c2                	mov    %eax,%edx
f0123a18:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a1b:	39 c2                	cmp    %eax,%edx
f0123a1d:	74 17                	je     f0123a36 <test_kfree_bestfirstfit+0x1742>
f0123a1f:	83 ec 04             	sub    $0x4,%esp
f0123a22:	68 80 be 13 f0       	push   $0xf013be80
f0123a27:	68 a9 07 00 00       	push   $0x7a9
f0123a2c:	68 1a b6 13 f0       	push   $0xf013b61a
f0123a31:	e8 cf c7 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a39:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123a40:	89 c2                	mov    %eax,%edx
f0123a42:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a45:	01 d0                	add    %edx,%eax
f0123a47:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123a4a:	e8 e6 98 fe ff       	call   f010d335 <sys_rcr2>
f0123a4f:	89 c2                	mov    %eax,%edx
f0123a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a54:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123a5b:	89 c1                	mov    %eax,%ecx
f0123a5d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a60:	01 c8                	add    %ecx,%eax
f0123a62:	39 c2                	cmp    %eax,%edx
f0123a64:	74 17                	je     f0123a7d <test_kfree_bestfirstfit+0x1789>
f0123a66:	83 ec 04             	sub    $0x4,%esp
f0123a69:	68 80 be 13 f0       	push   $0xf013be80
f0123a6e:	68 ab 07 00 00       	push   $0x7ab
f0123a73:	68 1a b6 13 f0       	push   $0xf013b61a
f0123a78:	e8 88 c7 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123a7d:	ff 45 f4             	incl   -0xc(%ebp)
f0123a80:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123a84:	0f 8e 74 ff ff ff    	jle    f01239fe <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123a8a:	83 ec 0c             	sub    $0xc,%esp
f0123a8d:	6a 00                	push   $0x0
f0123a8f:	e8 b3 98 fe ff       	call   f010d347 <sys_bypassPageFault>
f0123a94:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123a97:	83 ec 0c             	sub    $0xc,%esp
f0123a9a:	68 c5 be 13 f0       	push   $0xf013bec5
f0123a9f:	e8 6a d2 fd ff       	call   f0100d0e <cprintf>
f0123aa4:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123aa7:	e8 fb 93 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123aac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123aaf:	e8 14 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ab4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123ab7:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123abd:	83 ec 0c             	sub    $0xc,%esp
f0123ac0:	50                   	push   %eax
f0123ac1:	e8 94 41 fe ff       	call   f0107c5a <kfree>
f0123ac6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ac9:	e8 fa 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ace:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ad1:	74 17                	je     f0123aea <test_kfree_bestfirstfit+0x17f6>
f0123ad3:	83 ec 04             	sub    $0x4,%esp
f0123ad6:	68 34 b6 13 f0       	push   $0xf013b634
f0123adb:	68 b9 07 00 00       	push   $0x7b9
f0123ae0:	68 1a b6 13 f0       	push   $0xf013b61a
f0123ae5:	e8 1b c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123aea:	e8 b8 93 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123aef:	89 c2                	mov    %eax,%edx
f0123af1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123af4:	39 c2                	cmp    %eax,%edx
f0123af6:	74 17                	je     f0123b0f <test_kfree_bestfirstfit+0x181b>
f0123af8:	83 ec 04             	sub    $0x4,%esp
f0123afb:	68 cc be 13 f0       	push   $0xf013becc
f0123b00:	68 ba 07 00 00       	push   $0x7ba
f0123b05:	68 1a b6 13 f0       	push   $0xf013b61a
f0123b0a:	e8 f6 c6 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b0f:	e8 93 93 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123b14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b17:	e8 ac 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b1c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123b1f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123b25:	83 ec 0c             	sub    $0xc,%esp
f0123b28:	50                   	push   %eax
f0123b29:	e8 2c 41 fe ff       	call   f0107c5a <kfree>
f0123b2e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b31:	e8 92 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b36:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b39:	74 17                	je     f0123b52 <test_kfree_bestfirstfit+0x185e>
f0123b3b:	83 ec 04             	sub    $0x4,%esp
f0123b3e:	68 34 b6 13 f0       	push   $0xf013b634
f0123b43:	68 c0 07 00 00       	push   $0x7c0
f0123b48:	68 1a b6 13 f0       	push   $0xf013b61a
f0123b4d:	e8 b3 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123b52:	e8 50 93 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123b57:	89 c2                	mov    %eax,%edx
f0123b59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b5c:	39 c2                	cmp    %eax,%edx
f0123b5e:	74 17                	je     f0123b77 <test_kfree_bestfirstfit+0x1883>
f0123b60:	83 ec 04             	sub    $0x4,%esp
f0123b63:	68 cc be 13 f0       	push   $0xf013becc
f0123b68:	68 c1 07 00 00       	push   $0x7c1
f0123b6d:	68 1a b6 13 f0       	push   $0xf013b61a
f0123b72:	e8 8e c6 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b77:	e8 2b 93 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123b7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b7f:	e8 44 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123b87:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123b8d:	83 ec 0c             	sub    $0xc,%esp
f0123b90:	50                   	push   %eax
f0123b91:	e8 c4 40 fe ff       	call   f0107c5a <kfree>
f0123b96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b99:	e8 2a 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ba1:	74 17                	je     f0123bba <test_kfree_bestfirstfit+0x18c6>
f0123ba3:	83 ec 04             	sub    $0x4,%esp
f0123ba6:	68 34 b6 13 f0       	push   $0xf013b634
f0123bab:	68 c7 07 00 00       	push   $0x7c7
f0123bb0:	68 1a b6 13 f0       	push   $0xf013b61a
f0123bb5:	e8 4b c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123bba:	e8 e8 92 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123bbf:	89 c2                	mov    %eax,%edx
f0123bc1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bc4:	39 c2                	cmp    %eax,%edx
f0123bc6:	74 17                	je     f0123bdf <test_kfree_bestfirstfit+0x18eb>
f0123bc8:	83 ec 04             	sub    $0x4,%esp
f0123bcb:	68 cc be 13 f0       	push   $0xf013becc
f0123bd0:	68 c8 07 00 00       	push   $0x7c8
f0123bd5:	68 1a b6 13 f0       	push   $0xf013b61a
f0123bda:	e8 26 c6 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123bdf:	e8 c3 92 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123be4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123be7:	e8 dc 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123bef:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123bf5:	83 ec 0c             	sub    $0xc,%esp
f0123bf8:	50                   	push   %eax
f0123bf9:	e8 5c 40 fe ff       	call   f0107c5a <kfree>
f0123bfe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c01:	e8 c2 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c06:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c09:	74 17                	je     f0123c22 <test_kfree_bestfirstfit+0x192e>
f0123c0b:	83 ec 04             	sub    $0x4,%esp
f0123c0e:	68 34 b6 13 f0       	push   $0xf013b634
f0123c13:	68 ce 07 00 00       	push   $0x7ce
f0123c18:	68 1a b6 13 f0       	push   $0xf013b61a
f0123c1d:	e8 e3 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123c22:	e8 80 92 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123c27:	89 c2                	mov    %eax,%edx
f0123c29:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c2c:	39 c2                	cmp    %eax,%edx
f0123c2e:	74 17                	je     f0123c47 <test_kfree_bestfirstfit+0x1953>
f0123c30:	83 ec 04             	sub    $0x4,%esp
f0123c33:	68 cc be 13 f0       	push   $0xf013becc
f0123c38:	68 cf 07 00 00       	push   $0x7cf
f0123c3d:	68 1a b6 13 f0       	push   $0xf013b61a
f0123c42:	e8 be c5 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123c47:	83 ec 0c             	sub    $0xc,%esp
f0123c4a:	68 13 bf 13 f0       	push   $0xf013bf13
f0123c4f:	e8 ba d0 fd ff       	call   f0100d0e <cprintf>
f0123c54:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123c57:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123c5e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123c65:	eb 48                	jmp    f0123caf <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123c67:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123c6a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0123c6f:	83 ec 04             	sub    $0x4,%esp
f0123c72:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123c78:	51                   	push   %ecx
f0123c79:	52                   	push   %edx
f0123c7a:	50                   	push   %eax
f0123c7b:	e8 31 2e fe ff       	call   f0106ab1 <get_page_table>
f0123c80:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123c83:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123c89:	85 c0                	test   %eax,%eax
f0123c8b:	75 17                	jne    f0123ca4 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123c8d:	83 ec 04             	sub    $0x4,%esp
f0123c90:	68 1c bf 13 f0       	push   $0xf013bf1c
f0123c95:	68 dd 07 00 00       	push   $0x7dd
f0123c9a:	68 1a b6 13 f0       	push   $0xf013b61a
f0123c9f:	e8 61 c5 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123ca4:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123cab:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123caf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123cb3:	78 b2                	js     f0123c67 <test_kfree_bestfirstfit+0x1973>
f0123cb5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123cb9:	7f 09                	jg     f0123cc4 <test_kfree_bestfirstfit+0x19d0>
f0123cbb:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123cc2:	76 a3                	jbe    f0123c67 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123cc4:	83 ec 0c             	sub    $0xc,%esp
f0123cc7:	68 fe b7 13 f0       	push   $0xf013b7fe
f0123ccc:	e8 3d d0 fd ff       	call   f0100d0e <cprintf>
f0123cd1:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123cd4:	83 ec 0c             	sub    $0xc,%esp
f0123cd7:	68 84 bf 13 f0       	push   $0xf013bf84
f0123cdc:	e8 2d d0 fd ff       	call   f0100d0e <cprintf>
f0123ce1:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123ce4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123ce9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123cec:	5b                   	pop    %ebx
f0123ced:	5f                   	pop    %edi
f0123cee:	5d                   	pop    %ebp
f0123cef:	c3                   	ret    

f0123cf0 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123cf0:	55                   	push   %ebp
f0123cf1:	89 e5                	mov    %esp,%ebp
f0123cf3:	57                   	push   %edi
f0123cf4:	56                   	push   %esi
f0123cf5:	53                   	push   %ebx
f0123cf6:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123cfc:	83 ec 0c             	sub    $0xc,%esp
f0123cff:	68 5c b5 13 f0       	push   $0xf013b55c
f0123d04:	e8 05 d0 fd ff       	call   f0100d0e <cprintf>
f0123d09:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123d0c:	83 ec 0c             	sub    $0xc,%esp
f0123d0f:	68 8c b5 13 f0       	push   $0xf013b58c
f0123d14:	e8 f5 cf fd ff       	call   f0100d0e <cprintf>
f0123d19:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123d1c:	83 ec 0c             	sub    $0xc,%esp
f0123d1f:	68 5c b5 13 f0       	push   $0xf013b55c
f0123d24:	e8 e5 cf fd ff       	call   f0100d0e <cprintf>
f0123d29:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123d2c:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123d30:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123d34:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123d3a:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123d40:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123d47:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123d4e:	e8 54 91 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123d53:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123d56:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123d5c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d66:	89 d7                	mov    %edx,%edi
f0123d68:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123d6a:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123d70:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d75:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d7a:	89 d7                	mov    %edx,%edi
f0123d7c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d7e:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123d84:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d89:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d8e:	89 d7                	mov    %edx,%edi
f0123d90:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d92:	e8 10 91 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123d97:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d9a:	e8 29 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d9f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123da2:	83 ec 0c             	sub    $0xc,%esp
f0123da5:	68 00 fc 1f 00       	push   $0x1ffc00
f0123daa:	e8 e0 3d fe ff       	call   f0107b8f <kmalloc>
f0123daf:	83 c4 10             	add    $0x10,%esp
f0123db2:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123db8:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123dbe:	89 c1                	mov    %eax,%ecx
f0123dc0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123dc7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123dca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123dcf:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123dd2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123dd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dda:	f7 75 a0             	divl   -0x60(%ebp)
f0123ddd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123de0:	29 d0                	sub    %edx,%eax
f0123de2:	89 c3                	mov    %eax,%ebx
f0123de4:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123deb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123df0:	0f b6 d0             	movzbl %al,%edx
f0123df3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123df6:	01 d0                	add    %edx,%eax
f0123df8:	48                   	dec    %eax
f0123df9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123dfc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123dff:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e04:	f7 75 98             	divl   -0x68(%ebp)
f0123e07:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123e0a:	29 d0                	sub    %edx,%eax
f0123e0c:	01 c3                	add    %eax,%ebx
f0123e0e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123e15:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123e1a:	0f b6 c0             	movzbl %al,%eax
f0123e1d:	c1 e0 04             	shl    $0x4,%eax
f0123e20:	89 c2                	mov    %eax,%edx
f0123e22:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123e25:	01 d0                	add    %edx,%eax
f0123e27:	48                   	dec    %eax
f0123e28:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123e2b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e33:	f7 75 90             	divl   -0x70(%ebp)
f0123e36:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e39:	29 d0                	sub    %edx,%eax
f0123e3b:	01 d8                	add    %ebx,%eax
f0123e3d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123e42:	39 c1                	cmp    %eax,%ecx
f0123e44:	74 17                	je     f0123e5d <test_kheap_phys_addr+0x16d>
f0123e46:	83 ec 04             	sub    $0x4,%esp
f0123e49:	68 00 b7 13 f0       	push   $0xf013b700
f0123e4e:	68 0a 08 00 00       	push   $0x80a
f0123e53:	68 1a b6 13 f0       	push   $0xf013b61a
f0123e58:	e8 a8 c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e5d:	e8 66 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e62:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123e65:	74 17                	je     f0123e7e <test_kheap_phys_addr+0x18e>
f0123e67:	83 ec 04             	sub    $0x4,%esp
f0123e6a:	68 34 b6 13 f0       	push   $0xf013b634
f0123e6f:	68 0b 08 00 00       	push   $0x80b
f0123e74:	68 1a b6 13 f0       	push   $0xf013b61a
f0123e79:	e8 87 c3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e7e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e81:	e8 21 90 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123e86:	29 c3                	sub    %eax,%ebx
f0123e88:	89 d8                	mov    %ebx,%eax
f0123e8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e8f:	74 17                	je     f0123ea8 <test_kheap_phys_addr+0x1b8>
f0123e91:	83 ec 04             	sub    $0x4,%esp
f0123e94:	68 9c b6 13 f0       	push   $0xf013b69c
f0123e99:	68 0c 08 00 00       	push   $0x80c
f0123e9e:	68 1a b6 13 f0       	push   $0xf013b61a
f0123ea3:	e8 5d c3 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ea8:	e8 fa 8f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123ead:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123eb0:	e8 13 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123eb5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123eb8:	83 ec 0c             	sub    $0xc,%esp
f0123ebb:	68 00 fc 1f 00       	push   $0x1ffc00
f0123ec0:	e8 ca 3c fe ff       	call   f0107b8f <kmalloc>
f0123ec5:	83 c4 10             	add    $0x10,%esp
f0123ec8:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ece:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123ed4:	89 c1                	mov    %eax,%ecx
f0123ed6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123edd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123ee0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ee5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123ee8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ef0:	f7 75 88             	divl   -0x78(%ebp)
f0123ef3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123ef6:	29 d0                	sub    %edx,%eax
f0123ef8:	89 c3                	mov    %eax,%ebx
f0123efa:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123f01:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123f06:	0f b6 d0             	movzbl %al,%edx
f0123f09:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123f0c:	01 d0                	add    %edx,%eax
f0123f0e:	48                   	dec    %eax
f0123f0f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123f15:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f20:	f7 75 80             	divl   -0x80(%ebp)
f0123f23:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f29:	29 d0                	sub    %edx,%eax
f0123f2b:	01 c3                	add    %eax,%ebx
f0123f2d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123f34:	10 00 00 
f0123f37:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123f3c:	0f b6 c0             	movzbl %al,%eax
f0123f3f:	c1 e0 04             	shl    $0x4,%eax
f0123f42:	89 c2                	mov    %eax,%edx
f0123f44:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123f4a:	01 d0                	add    %edx,%eax
f0123f4c:	48                   	dec    %eax
f0123f4d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123f53:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123f59:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f5e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123f64:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123f6a:	29 d0                	sub    %edx,%eax
f0123f6c:	01 d8                	add    %ebx,%eax
f0123f6e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123f73:	39 c1                	cmp    %eax,%ecx
f0123f75:	74 17                	je     f0123f8e <test_kheap_phys_addr+0x29e>
f0123f77:	83 ec 04             	sub    $0x4,%esp
f0123f7a:	68 00 b7 13 f0       	push   $0xf013b700
f0123f7f:	68 12 08 00 00       	push   $0x812
f0123f84:	68 1a b6 13 f0       	push   $0xf013b61a
f0123f89:	e8 77 c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f8e:	e8 35 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f93:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123f96:	74 17                	je     f0123faf <test_kheap_phys_addr+0x2bf>
f0123f98:	83 ec 04             	sub    $0x4,%esp
f0123f9b:	68 34 b6 13 f0       	push   $0xf013b634
f0123fa0:	68 13 08 00 00       	push   $0x813
f0123fa5:	68 1a b6 13 f0       	push   $0xf013b61a
f0123faa:	e8 56 c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123faf:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123fb2:	e8 f0 8e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123fb7:	29 c3                	sub    %eax,%ebx
f0123fb9:	89 d8                	mov    %ebx,%eax
f0123fbb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123fc0:	74 17                	je     f0123fd9 <test_kheap_phys_addr+0x2e9>
f0123fc2:	83 ec 04             	sub    $0x4,%esp
f0123fc5:	68 9c b6 13 f0       	push   $0xf013b69c
f0123fca:	68 14 08 00 00       	push   $0x814
f0123fcf:	68 1a b6 13 f0       	push   $0xf013b61a
f0123fd4:	e8 2c c2 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fd9:	e8 c9 8e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0123fde:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fe1:	e8 e2 fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123fe6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123fe9:	83 ec 0c             	sub    $0xc,%esp
f0123fec:	68 00 08 00 00       	push   $0x800
f0123ff1:	e8 99 3b fe ff       	call   f0107b8f <kmalloc>
f0123ff6:	83 c4 10             	add    $0x10,%esp
f0123ff9:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123fff:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124005:	89 c1                	mov    %eax,%ecx
f0124007:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012400e:	10 00 00 
f0124011:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124017:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012401c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0124022:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124028:	ba 00 00 00 00       	mov    $0x0,%edx
f012402d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124033:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124039:	29 d0                	sub    %edx,%eax
f012403b:	89 c3                	mov    %eax,%ebx
f012403d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124044:	10 00 00 
f0124047:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012404c:	0f b6 d0             	movzbl %al,%edx
f012404f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124055:	01 d0                	add    %edx,%eax
f0124057:	48                   	dec    %eax
f0124058:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012405e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124064:	ba 00 00 00 00       	mov    $0x0,%edx
f0124069:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012406f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124075:	29 d0                	sub    %edx,%eax
f0124077:	01 c3                	add    %eax,%ebx
f0124079:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0124080:	10 00 00 
f0124083:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124088:	0f b6 c0             	movzbl %al,%eax
f012408b:	c1 e0 04             	shl    $0x4,%eax
f012408e:	89 c2                	mov    %eax,%edx
f0124090:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124096:	01 d0                	add    %edx,%eax
f0124098:	48                   	dec    %eax
f0124099:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012409f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01240a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01240aa:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01240b0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01240b6:	29 d0                	sub    %edx,%eax
f01240b8:	01 d8                	add    %ebx,%eax
f01240ba:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01240bf:	39 c1                	cmp    %eax,%ecx
f01240c1:	74 17                	je     f01240da <test_kheap_phys_addr+0x3ea>
f01240c3:	83 ec 04             	sub    $0x4,%esp
f01240c6:	68 00 b7 13 f0       	push   $0xf013b700
f01240cb:	68 1a 08 00 00       	push   $0x81a
f01240d0:	68 1a b6 13 f0       	push   $0xf013b61a
f01240d5:	e8 2b c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240da:	e8 e9 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01240df:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01240e2:	74 17                	je     f01240fb <test_kheap_phys_addr+0x40b>
f01240e4:	83 ec 04             	sub    $0x4,%esp
f01240e7:	68 34 b6 13 f0       	push   $0xf013b634
f01240ec:	68 1b 08 00 00       	push   $0x81b
f01240f1:	68 1a b6 13 f0       	push   $0xf013b61a
f01240f6:	e8 0a c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01240fb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01240fe:	e8 a4 8d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124103:	29 c3                	sub    %eax,%ebx
f0124105:	89 d8                	mov    %ebx,%eax
f0124107:	83 f8 01             	cmp    $0x1,%eax
f012410a:	74 17                	je     f0124123 <test_kheap_phys_addr+0x433>
f012410c:	83 ec 04             	sub    $0x4,%esp
f012410f:	68 9c b6 13 f0       	push   $0xf013b69c
f0124114:	68 1c 08 00 00       	push   $0x81c
f0124119:	68 1a b6 13 f0       	push   $0xf013b61a
f012411e:	e8 e2 c0 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124123:	e8 7f 8d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124128:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012412b:	e8 98 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124130:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124133:	83 ec 0c             	sub    $0xc,%esp
f0124136:	68 00 08 00 00       	push   $0x800
f012413b:	e8 4f 3a fe ff       	call   f0107b8f <kmalloc>
f0124140:	83 c4 10             	add    $0x10,%esp
f0124143:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124149:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012414f:	89 c1                	mov    %eax,%ecx
f0124151:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0124158:	10 00 00 
f012415b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124161:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124166:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012416c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124172:	ba 00 00 00 00       	mov    $0x0,%edx
f0124177:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012417d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124183:	29 d0                	sub    %edx,%eax
f0124185:	89 c3                	mov    %eax,%ebx
f0124187:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012418e:	10 00 00 
f0124191:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124196:	0f b6 d0             	movzbl %al,%edx
f0124199:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012419f:	01 d0                	add    %edx,%eax
f01241a1:	48                   	dec    %eax
f01241a2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01241a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01241ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01241b3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01241b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01241bf:	29 d0                	sub    %edx,%eax
f01241c1:	01 c3                	add    %eax,%ebx
f01241c3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01241ca:	10 00 00 
f01241cd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01241d2:	0f b6 c0             	movzbl %al,%eax
f01241d5:	c1 e0 04             	shl    $0x4,%eax
f01241d8:	89 c2                	mov    %eax,%edx
f01241da:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01241e0:	01 d0                	add    %edx,%eax
f01241e2:	48                   	dec    %eax
f01241e3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01241e9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01241ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01241f4:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01241fa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124200:	29 d0                	sub    %edx,%eax
f0124202:	01 d8                	add    %ebx,%eax
f0124204:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124209:	39 c1                	cmp    %eax,%ecx
f012420b:	74 17                	je     f0124224 <test_kheap_phys_addr+0x534>
f012420d:	83 ec 04             	sub    $0x4,%esp
f0124210:	68 00 b7 13 f0       	push   $0xf013b700
f0124215:	68 22 08 00 00       	push   $0x822
f012421a:	68 1a b6 13 f0       	push   $0xf013b61a
f012421f:	e8 e1 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124224:	e8 9f fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124229:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012422c:	74 17                	je     f0124245 <test_kheap_phys_addr+0x555>
f012422e:	83 ec 04             	sub    $0x4,%esp
f0124231:	68 34 b6 13 f0       	push   $0xf013b634
f0124236:	68 23 08 00 00       	push   $0x823
f012423b:	68 1a b6 13 f0       	push   $0xf013b61a
f0124240:	e8 c0 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124245:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124248:	e8 5a 8c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012424d:	29 c3                	sub    %eax,%ebx
f012424f:	89 d8                	mov    %ebx,%eax
f0124251:	83 f8 01             	cmp    $0x1,%eax
f0124254:	74 17                	je     f012426d <test_kheap_phys_addr+0x57d>
f0124256:	83 ec 04             	sub    $0x4,%esp
f0124259:	68 9c b6 13 f0       	push   $0xf013b69c
f012425e:	68 24 08 00 00       	push   $0x824
f0124263:	68 1a b6 13 f0       	push   $0xf013b61a
f0124268:	e8 98 bf fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012426d:	e8 35 8c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124272:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124275:	e8 4e fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012427a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012427d:	83 ec 0c             	sub    $0xc,%esp
f0124280:	68 00 1c 00 00       	push   $0x1c00
f0124285:	e8 05 39 fe ff       	call   f0107b8f <kmalloc>
f012428a:	83 c4 10             	add    $0x10,%esp
f012428d:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124293:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124299:	89 c1                	mov    %eax,%ecx
f012429b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01242a2:	10 00 00 
f01242a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01242ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242b0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01242b6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01242bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01242c7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01242cd:	29 d0                	sub    %edx,%eax
f01242cf:	89 c3                	mov    %eax,%ebx
f01242d1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01242d8:	10 00 00 
f01242db:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01242e0:	0f b6 d0             	movzbl %al,%edx
f01242e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01242e9:	01 d0                	add    %edx,%eax
f01242eb:	48                   	dec    %eax
f01242ec:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01242f2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01242f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01242fd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124303:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124309:	29 d0                	sub    %edx,%eax
f012430b:	01 c3                	add    %eax,%ebx
f012430d:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124314:	10 00 00 
f0124317:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012431c:	0f b6 c0             	movzbl %al,%eax
f012431f:	c1 e0 04             	shl    $0x4,%eax
f0124322:	89 c2                	mov    %eax,%edx
f0124324:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012432a:	01 d0                	add    %edx,%eax
f012432c:	48                   	dec    %eax
f012432d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124333:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124339:	ba 00 00 00 00       	mov    $0x0,%edx
f012433e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124344:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012434a:	29 d0                	sub    %edx,%eax
f012434c:	01 d8                	add    %ebx,%eax
f012434e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124353:	39 c1                	cmp    %eax,%ecx
f0124355:	74 17                	je     f012436e <test_kheap_phys_addr+0x67e>
f0124357:	83 ec 04             	sub    $0x4,%esp
f012435a:	68 00 b7 13 f0       	push   $0xf013b700
f012435f:	68 2a 08 00 00       	push   $0x82a
f0124364:	68 1a b6 13 f0       	push   $0xf013b61a
f0124369:	e8 97 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012436e:	e8 55 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124373:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124376:	74 17                	je     f012438f <test_kheap_phys_addr+0x69f>
f0124378:	83 ec 04             	sub    $0x4,%esp
f012437b:	68 34 b6 13 f0       	push   $0xf013b634
f0124380:	68 2b 08 00 00       	push   $0x82b
f0124385:	68 1a b6 13 f0       	push   $0xf013b61a
f012438a:	e8 76 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012438f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124392:	e8 10 8b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124397:	29 c3                	sub    %eax,%ebx
f0124399:	89 d8                	mov    %ebx,%eax
f012439b:	83 f8 02             	cmp    $0x2,%eax
f012439e:	74 17                	je     f01243b7 <test_kheap_phys_addr+0x6c7>
f01243a0:	83 ec 04             	sub    $0x4,%esp
f01243a3:	68 9c b6 13 f0       	push   $0xf013b69c
f01243a8:	68 2c 08 00 00       	push   $0x82c
f01243ad:	68 1a b6 13 f0       	push   $0xf013b61a
f01243b2:	e8 4e be fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01243b7:	e8 eb 8a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01243bc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243bf:	e8 04 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01243c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01243c7:	83 ec 0c             	sub    $0xc,%esp
f01243ca:	68 00 fc 2f 00       	push   $0x2ffc00
f01243cf:	e8 bb 37 fe ff       	call   f0107b8f <kmalloc>
f01243d4:	83 c4 10             	add    $0x10,%esp
f01243d7:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01243dd:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01243e3:	89 c1                	mov    %eax,%ecx
f01243e5:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01243ec:	10 00 00 
f01243ef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01243f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01243fa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0124400:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124406:	ba 00 00 00 00       	mov    $0x0,%edx
f012440b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124411:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124417:	29 d0                	sub    %edx,%eax
f0124419:	89 c3                	mov    %eax,%ebx
f012441b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124422:	10 00 00 
f0124425:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012442a:	0f b6 d0             	movzbl %al,%edx
f012442d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124433:	01 d0                	add    %edx,%eax
f0124435:	48                   	dec    %eax
f0124436:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012443c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124442:	ba 00 00 00 00       	mov    $0x0,%edx
f0124447:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012444d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124453:	29 d0                	sub    %edx,%eax
f0124455:	01 c3                	add    %eax,%ebx
f0124457:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012445e:	10 00 00 
f0124461:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124466:	0f b6 c0             	movzbl %al,%eax
f0124469:	c1 e0 04             	shl    $0x4,%eax
f012446c:	89 c2                	mov    %eax,%edx
f012446e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124474:	01 d0                	add    %edx,%eax
f0124476:	48                   	dec    %eax
f0124477:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012447d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124483:	ba 00 00 00 00       	mov    $0x0,%edx
f0124488:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012448e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124494:	29 d0                	sub    %edx,%eax
f0124496:	01 d8                	add    %ebx,%eax
f0124498:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012449d:	39 c1                	cmp    %eax,%ecx
f012449f:	74 17                	je     f01244b8 <test_kheap_phys_addr+0x7c8>
f01244a1:	83 ec 04             	sub    $0x4,%esp
f01244a4:	68 00 b7 13 f0       	push   $0xf013b700
f01244a9:	68 32 08 00 00       	push   $0x832
f01244ae:	68 1a b6 13 f0       	push   $0xf013b61a
f01244b3:	e8 4d bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244b8:	e8 0b f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01244bd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01244c0:	74 17                	je     f01244d9 <test_kheap_phys_addr+0x7e9>
f01244c2:	83 ec 04             	sub    $0x4,%esp
f01244c5:	68 34 b6 13 f0       	push   $0xf013b634
f01244ca:	68 33 08 00 00       	push   $0x833
f01244cf:	68 1a b6 13 f0       	push   $0xf013b61a
f01244d4:	e8 2c bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01244d9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01244dc:	e8 c6 89 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01244e1:	29 c3                	sub    %eax,%ebx
f01244e3:	89 d8                	mov    %ebx,%eax
f01244e5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01244ea:	74 17                	je     f0124503 <test_kheap_phys_addr+0x813>
f01244ec:	83 ec 04             	sub    $0x4,%esp
f01244ef:	68 9c b6 13 f0       	push   $0xf013b69c
f01244f4:	68 34 08 00 00       	push   $0x834
f01244f9:	68 1a b6 13 f0       	push   $0xf013b61a
f01244fe:	e8 02 bd fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124503:	e8 9f 89 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124508:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012450b:	e8 b8 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124510:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124513:	83 ec 0c             	sub    $0xc,%esp
f0124516:	68 00 fc 5f 00       	push   $0x5ffc00
f012451b:	e8 6f 36 fe ff       	call   f0107b8f <kmalloc>
f0124520:	83 c4 10             	add    $0x10,%esp
f0124523:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124529:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012452f:	89 c1                	mov    %eax,%ecx
f0124531:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124538:	10 00 00 
f012453b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124541:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124546:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012454c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124552:	ba 00 00 00 00       	mov    $0x0,%edx
f0124557:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012455d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124563:	29 d0                	sub    %edx,%eax
f0124565:	89 c3                	mov    %eax,%ebx
f0124567:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012456e:	10 00 00 
f0124571:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124576:	0f b6 d0             	movzbl %al,%edx
f0124579:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012457f:	01 d0                	add    %edx,%eax
f0124581:	48                   	dec    %eax
f0124582:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124588:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012458e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124593:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124599:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012459f:	29 d0                	sub    %edx,%eax
f01245a1:	01 c3                	add    %eax,%ebx
f01245a3:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01245aa:	10 00 00 
f01245ad:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01245b2:	0f b6 c0             	movzbl %al,%eax
f01245b5:	c1 e0 04             	shl    $0x4,%eax
f01245b8:	89 c2                	mov    %eax,%edx
f01245ba:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01245c0:	01 d0                	add    %edx,%eax
f01245c2:	48                   	dec    %eax
f01245c3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01245c9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01245cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01245d4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01245da:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01245e0:	29 d0                	sub    %edx,%eax
f01245e2:	01 d8                	add    %ebx,%eax
f01245e4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01245e9:	39 c1                	cmp    %eax,%ecx
f01245eb:	74 17                	je     f0124604 <test_kheap_phys_addr+0x914>
f01245ed:	83 ec 04             	sub    $0x4,%esp
f01245f0:	68 00 b7 13 f0       	push   $0xf013b700
f01245f5:	68 3a 08 00 00       	push   $0x83a
f01245fa:	68 1a b6 13 f0       	push   $0xf013b61a
f01245ff:	e8 01 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124604:	e8 bf f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124609:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012460c:	74 17                	je     f0124625 <test_kheap_phys_addr+0x935>
f012460e:	83 ec 04             	sub    $0x4,%esp
f0124611:	68 34 b6 13 f0       	push   $0xf013b634
f0124616:	68 3b 08 00 00       	push   $0x83b
f012461b:	68 1a b6 13 f0       	push   $0xf013b61a
f0124620:	e8 e0 bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124625:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124628:	e8 7a 88 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012462d:	29 c3                	sub    %eax,%ebx
f012462f:	89 d8                	mov    %ebx,%eax
f0124631:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124636:	74 17                	je     f012464f <test_kheap_phys_addr+0x95f>
f0124638:	83 ec 04             	sub    $0x4,%esp
f012463b:	68 9c b6 13 f0       	push   $0xf013b69c
f0124640:	68 3c 08 00 00       	push   $0x83c
f0124645:	68 1a b6 13 f0       	push   $0xf013b61a
f012464a:	e8 b6 bb fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012464f:	e8 53 88 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124654:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124657:	e8 6c f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012465c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012465f:	83 ec 0c             	sub    $0xc,%esp
f0124662:	68 00 38 00 00       	push   $0x3800
f0124667:	e8 23 35 fe ff       	call   f0107b8f <kmalloc>
f012466c:	83 c4 10             	add    $0x10,%esp
f012466f:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124675:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012467b:	89 c1                	mov    %eax,%ecx
f012467d:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124684:	10 00 00 
f0124687:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012468d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124692:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124698:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012469e:	ba 00 00 00 00       	mov    $0x0,%edx
f01246a3:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01246a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01246af:	29 d0                	sub    %edx,%eax
f01246b1:	89 c3                	mov    %eax,%ebx
f01246b3:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01246ba:	10 00 00 
f01246bd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01246c2:	0f b6 d0             	movzbl %al,%edx
f01246c5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01246cb:	01 d0                	add    %edx,%eax
f01246cd:	48                   	dec    %eax
f01246ce:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01246d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01246da:	ba 00 00 00 00       	mov    $0x0,%edx
f01246df:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01246e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01246eb:	29 d0                	sub    %edx,%eax
f01246ed:	01 c3                	add    %eax,%ebx
f01246ef:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01246f6:	10 00 00 
f01246f9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01246fe:	0f b6 c0             	movzbl %al,%eax
f0124701:	c1 e0 04             	shl    $0x4,%eax
f0124704:	89 c2                	mov    %eax,%edx
f0124706:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012470c:	01 d0                	add    %edx,%eax
f012470e:	48                   	dec    %eax
f012470f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124715:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012471b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124720:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124726:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012472c:	29 d0                	sub    %edx,%eax
f012472e:	01 d8                	add    %ebx,%eax
f0124730:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124735:	39 c1                	cmp    %eax,%ecx
f0124737:	74 17                	je     f0124750 <test_kheap_phys_addr+0xa60>
f0124739:	83 ec 04             	sub    $0x4,%esp
f012473c:	68 00 b7 13 f0       	push   $0xf013b700
f0124741:	68 42 08 00 00       	push   $0x842
f0124746:	68 1a b6 13 f0       	push   $0xf013b61a
f012474b:	e8 b5 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124750:	e8 73 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124755:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124758:	74 17                	je     f0124771 <test_kheap_phys_addr+0xa81>
f012475a:	83 ec 04             	sub    $0x4,%esp
f012475d:	68 34 b6 13 f0       	push   $0xf013b634
f0124762:	68 43 08 00 00       	push   $0x843
f0124767:	68 1a b6 13 f0       	push   $0xf013b61a
f012476c:	e8 94 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124771:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124774:	e8 2e 87 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124779:	29 c3                	sub    %eax,%ebx
f012477b:	89 d8                	mov    %ebx,%eax
f012477d:	83 f8 04             	cmp    $0x4,%eax
f0124780:	74 17                	je     f0124799 <test_kheap_phys_addr+0xaa9>
f0124782:	83 ec 04             	sub    $0x4,%esp
f0124785:	68 9c b6 13 f0       	push   $0xf013b69c
f012478a:	68 44 08 00 00       	push   $0x844
f012478f:	68 1a b6 13 f0       	push   $0xf013b61a
f0124794:	e8 6c ba fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124799:	89 e0                	mov    %esp,%eax
f012479b:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012479d:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01247a4:	10 00 00 
f01247a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01247ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01247b2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01247b8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01247be:	ba 00 00 00 00       	mov    $0x0,%edx
f01247c3:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01247c9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01247cf:	29 d0                	sub    %edx,%eax
f01247d1:	89 c1                	mov    %eax,%ecx
f01247d3:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01247da:	10 00 00 
f01247dd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01247e2:	0f b6 d0             	movzbl %al,%edx
f01247e5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01247eb:	01 d0                	add    %edx,%eax
f01247ed:	48                   	dec    %eax
f01247ee:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01247f4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01247fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01247ff:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124805:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012480b:	29 d0                	sub    %edx,%eax
f012480d:	01 c1                	add    %eax,%ecx
f012480f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124816:	10 00 00 
f0124819:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012481e:	0f b6 c0             	movzbl %al,%eax
f0124821:	c1 e0 04             	shl    $0x4,%eax
f0124824:	89 c2                	mov    %eax,%edx
f0124826:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012482c:	01 d0                	add    %edx,%eax
f012482e:	48                   	dec    %eax
f012482f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124835:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012483b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124840:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124846:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012484c:	29 d0                	sub    %edx,%eax
f012484e:	01 c8                	add    %ecx,%eax
f0124850:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124855:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012485b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124862:	10 00 00 
f0124865:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012486b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124870:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124876:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012487c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124881:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124887:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012488d:	29 d0                	sub    %edx,%eax
f012488f:	89 c1                	mov    %eax,%ecx
f0124891:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124898:	10 00 00 
f012489b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01248a0:	0f b6 d0             	movzbl %al,%edx
f01248a3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01248a9:	01 d0                	add    %edx,%eax
f01248ab:	48                   	dec    %eax
f01248ac:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01248b2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01248b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01248bd:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01248c3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01248c9:	29 d0                	sub    %edx,%eax
f01248cb:	01 c1                	add    %eax,%ecx
f01248cd:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01248d4:	10 00 00 
f01248d7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01248dc:	0f b6 c0             	movzbl %al,%eax
f01248df:	c1 e0 04             	shl    $0x4,%eax
f01248e2:	89 c2                	mov    %eax,%edx
f01248e4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01248ea:	01 d0                	add    %edx,%eax
f01248ec:	48                   	dec    %eax
f01248ed:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01248f3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01248f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01248fe:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124904:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012490a:	29 d0                	sub    %edx,%eax
f012490c:	01 c8                	add    %ecx,%eax
f012490e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124913:	c1 e8 0c             	shr    $0xc,%eax
f0124916:	89 c2                	mov    %eax,%edx
f0124918:	4a                   	dec    %edx
f0124919:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f012491f:	c1 e0 02             	shl    $0x2,%eax
f0124922:	8d 50 03             	lea    0x3(%eax),%edx
f0124925:	b8 10 00 00 00       	mov    $0x10,%eax
f012492a:	48                   	dec    %eax
f012492b:	01 d0                	add    %edx,%eax
f012492d:	bf 10 00 00 00       	mov    $0x10,%edi
f0124932:	ba 00 00 00 00       	mov    $0x0,%edx
f0124937:	f7 f7                	div    %edi
f0124939:	6b c0 10             	imul   $0x10,%eax,%eax
f012493c:	29 c4                	sub    %eax,%esp
f012493e:	89 e0                	mov    %esp,%eax
f0124940:	83 c0 03             	add    $0x3,%eax
f0124943:	c1 e8 02             	shr    $0x2,%eax
f0124946:	c1 e0 02             	shl    $0x2,%eax
f0124949:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f012494f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124956:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012495d:	10 00 00 
f0124960:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124966:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012496b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124971:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124977:	ba 00 00 00 00       	mov    $0x0,%edx
f012497c:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124982:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124988:	29 d0                	sub    %edx,%eax
f012498a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012498f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124992:	eb 29                	jmp    f01249bd <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124994:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124997:	8d 43 01             	lea    0x1(%ebx),%eax
f012499a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012499d:	83 ec 0c             	sub    $0xc,%esp
f01249a0:	ff 75 e0             	pushl  -0x20(%ebp)
f01249a3:	e8 05 34 fe ff       	call   f0107dad <kheap_physical_address>
f01249a8:	83 c4 10             	add    $0x10,%esp
f01249ab:	89 c2                	mov    %eax,%edx
f01249ad:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01249b3:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01249b6:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01249bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01249c0:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01249c6:	72 cc                	jb     f0124994 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01249c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01249cb:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01249d1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01249d8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01249df:	10 00 00 
f01249e2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01249e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249ed:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01249f3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01249f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01249fe:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124a04:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124a0a:	29 d0                	sub    %edx,%eax
f0124a0c:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a11:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a14:	e9 ab 00 00 00       	jmp    f0124ac4 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124a19:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0124a1e:	83 ec 04             	sub    $0x4,%esp
f0124a21:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124a27:	52                   	push   %edx
f0124a28:	ff 75 e0             	pushl  -0x20(%ebp)
f0124a2b:	50                   	push   %eax
f0124a2c:	e8 80 20 fe ff       	call   f0106ab1 <get_page_table>
f0124a31:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124a34:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124a3a:	85 c0                	test   %eax,%eax
f0124a3c:	75 17                	jne    f0124a55 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124a3e:	83 ec 04             	sub    $0x4,%esp
f0124a41:	68 bc bf 13 f0       	push   $0xf013bfbc
f0124a46:	68 59 08 00 00       	push   $0x859
f0124a4b:	68 1a b6 13 f0       	push   $0xf013b61a
f0124a50:	e8 b0 b7 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124a55:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a58:	c1 e8 0c             	shr    $0xc,%eax
f0124a5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124a60:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124a63:	eb 4b                	jmp    f0124ab0 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124a65:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124a6b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124a6e:	c1 e2 02             	shl    $0x2,%edx
f0124a71:	01 d0                	add    %edx,%eax
f0124a73:	8b 00                	mov    (%eax),%eax
f0124a75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124a7a:	89 c1                	mov    %eax,%ecx
f0124a7c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124a82:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124a85:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124a88:	39 c1                	cmp    %eax,%ecx
f0124a8a:	74 17                	je     f0124aa3 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124a8c:	83 ec 04             	sub    $0x4,%esp
f0124a8f:	68 15 c0 13 f0       	push   $0xf013c015
f0124a94:	68 60 08 00 00       	push   $0x860
f0124a99:	68 1a b6 13 f0       	push   $0xf013b61a
f0124a9e:	e8 62 b7 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124aa3:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124aaa:	ff 45 dc             	incl   -0x24(%ebp)
f0124aad:	ff 45 e4             	incl   -0x1c(%ebp)
f0124ab0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124ab3:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124ab9:	7d 09                	jge    f0124ac4 <test_kheap_phys_addr+0xdd4>
f0124abb:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124ac2:	7e a1                	jle    f0124a65 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ac4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ac7:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124acd:	0f 82 46 ff ff ff    	jb     f0124a19 <test_kheap_phys_addr+0xd29>
f0124ad3:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124ad5:	83 ec 0c             	sub    $0xc,%esp
f0124ad8:	68 34 c0 13 f0       	push   $0xf013c034
f0124add:	e8 2c c2 fd ff       	call   f0100d0e <cprintf>
f0124ae2:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124ae5:	e8 bd 83 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124aea:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124af0:	e8 d3 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124af5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124afb:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124b01:	83 ec 0c             	sub    $0xc,%esp
f0124b04:	50                   	push   %eax
f0124b05:	e8 50 31 fe ff       	call   f0107c5a <kfree>
f0124b0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b0d:	e8 b6 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b12:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124b18:	74 17                	je     f0124b31 <test_kheap_phys_addr+0xe41>
f0124b1a:	83 ec 04             	sub    $0x4,%esp
f0124b1d:	68 34 b6 13 f0       	push   $0xf013b634
f0124b22:	68 6e 08 00 00       	push   $0x86e
f0124b27:	68 1a b6 13 f0       	push   $0xf013b61a
f0124b2c:	e8 d4 b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b31:	e8 71 83 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124b36:	89 c2                	mov    %eax,%edx
f0124b38:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124b3e:	29 c2                	sub    %eax,%edx
f0124b40:	89 d0                	mov    %edx,%eax
f0124b42:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b47:	74 17                	je     f0124b60 <test_kheap_phys_addr+0xe70>
f0124b49:	83 ec 04             	sub    $0x4,%esp
f0124b4c:	68 a4 bd 13 f0       	push   $0xf013bda4
f0124b51:	68 6f 08 00 00       	push   $0x86f
f0124b56:	68 1a b6 13 f0       	push   $0xf013b61a
f0124b5b:	e8 a5 b6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124b60:	e8 42 83 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124b65:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b6b:	e8 58 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b70:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124b76:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124b7c:	83 ec 0c             	sub    $0xc,%esp
f0124b7f:	50                   	push   %eax
f0124b80:	e8 d5 30 fe ff       	call   f0107c5a <kfree>
f0124b85:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b88:	e8 3b f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b8d:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124b93:	74 17                	je     f0124bac <test_kheap_phys_addr+0xebc>
f0124b95:	83 ec 04             	sub    $0x4,%esp
f0124b98:	68 34 b6 13 f0       	push   $0xf013b634
f0124b9d:	68 75 08 00 00       	push   $0x875
f0124ba2:	68 1a b6 13 f0       	push   $0xf013b61a
f0124ba7:	e8 59 b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124bac:	e8 f6 82 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124bb1:	89 c2                	mov    %eax,%edx
f0124bb3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124bb9:	29 c2                	sub    %eax,%edx
f0124bbb:	89 d0                	mov    %edx,%eax
f0124bbd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124bc2:	74 17                	je     f0124bdb <test_kheap_phys_addr+0xeeb>
f0124bc4:	83 ec 04             	sub    $0x4,%esp
f0124bc7:	68 a4 bd 13 f0       	push   $0xf013bda4
f0124bcc:	68 76 08 00 00       	push   $0x876
f0124bd1:	68 1a b6 13 f0       	push   $0xf013b61a
f0124bd6:	e8 2a b6 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124bdb:	e8 c7 82 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124be0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124be6:	e8 dd f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124beb:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124bf1:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124bf7:	83 ec 0c             	sub    $0xc,%esp
f0124bfa:	50                   	push   %eax
f0124bfb:	e8 5a 30 fe ff       	call   f0107c5a <kfree>
f0124c00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c03:	e8 c0 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c08:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124c0e:	74 17                	je     f0124c27 <test_kheap_phys_addr+0xf37>
f0124c10:	83 ec 04             	sub    $0x4,%esp
f0124c13:	68 34 b6 13 f0       	push   $0xf013b634
f0124c18:	68 7c 08 00 00       	push   $0x87c
f0124c1d:	68 1a b6 13 f0       	push   $0xf013b61a
f0124c22:	e8 de b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c27:	e8 7b 82 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0124c2c:	89 c2                	mov    %eax,%edx
f0124c2e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124c34:	29 c2                	sub    %eax,%edx
f0124c36:	89 d0                	mov    %edx,%eax
f0124c38:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124c3d:	74 17                	je     f0124c56 <test_kheap_phys_addr+0xf66>
f0124c3f:	83 ec 04             	sub    $0x4,%esp
f0124c42:	68 a4 bd 13 f0       	push   $0xf013bda4
f0124c47:	68 7d 08 00 00       	push   $0x87d
f0124c4c:	68 1a b6 13 f0       	push   $0xf013b61a
f0124c51:	e8 af b5 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124c56:	89 e0                	mov    %esp,%eax
f0124c58:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124c5a:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124c61:	10 00 00 
f0124c64:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c6f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124c75:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124c7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c80:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124c86:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124c8c:	29 d0                	sub    %edx,%eax
f0124c8e:	89 c1                	mov    %eax,%ecx
f0124c90:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124c97:	10 00 00 
f0124c9a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124c9f:	0f b6 d0             	movzbl %al,%edx
f0124ca2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124ca8:	01 d0                	add    %edx,%eax
f0124caa:	48                   	dec    %eax
f0124cab:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124cb1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124cb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cbc:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124cc2:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124cc8:	29 d0                	sub    %edx,%eax
f0124cca:	01 c1                	add    %eax,%ecx
f0124ccc:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124cd3:	10 00 00 
f0124cd6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124cdb:	0f b6 c0             	movzbl %al,%eax
f0124cde:	c1 e0 04             	shl    $0x4,%eax
f0124ce1:	89 c2                	mov    %eax,%edx
f0124ce3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124ce9:	01 d0                	add    %edx,%eax
f0124ceb:	48                   	dec    %eax
f0124cec:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124cf2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cfd:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124d03:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d09:	29 d0                	sub    %edx,%eax
f0124d0b:	01 c8                	add    %ecx,%eax
f0124d0d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124d12:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124d18:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124d1f:	10 00 00 
f0124d22:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d2d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124d33:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d3e:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124d44:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124d4a:	29 d0                	sub    %edx,%eax
f0124d4c:	89 c1                	mov    %eax,%ecx
f0124d4e:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124d55:	10 00 00 
f0124d58:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124d5d:	0f b6 d0             	movzbl %al,%edx
f0124d60:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124d66:	01 d0                	add    %edx,%eax
f0124d68:	48                   	dec    %eax
f0124d69:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124d6f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d7a:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124d80:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124d86:	29 d0                	sub    %edx,%eax
f0124d88:	01 c1                	add    %eax,%ecx
f0124d8a:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124d91:	10 00 00 
f0124d94:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124d99:	0f b6 c0             	movzbl %al,%eax
f0124d9c:	c1 e0 04             	shl    $0x4,%eax
f0124d9f:	89 c2                	mov    %eax,%edx
f0124da1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124da7:	01 d0                	add    %edx,%eax
f0124da9:	48                   	dec    %eax
f0124daa:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124db0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dbb:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124dc1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124dc7:	29 d0                	sub    %edx,%eax
f0124dc9:	01 c8                	add    %ecx,%eax
f0124dcb:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124dd0:	c1 e8 0c             	shr    $0xc,%eax
f0124dd3:	89 c2                	mov    %eax,%edx
f0124dd5:	4a                   	dec    %edx
f0124dd6:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124ddc:	c1 e0 02             	shl    $0x2,%eax
f0124ddf:	8d 50 03             	lea    0x3(%eax),%edx
f0124de2:	b8 10 00 00 00       	mov    $0x10,%eax
f0124de7:	48                   	dec    %eax
f0124de8:	01 d0                	add    %edx,%eax
f0124dea:	bf 10 00 00 00       	mov    $0x10,%edi
f0124def:	ba 00 00 00 00       	mov    $0x0,%edx
f0124df4:	f7 f7                	div    %edi
f0124df6:	6b c0 10             	imul   $0x10,%eax,%eax
f0124df9:	29 c4                	sub    %eax,%esp
f0124dfb:	89 e0                	mov    %esp,%eax
f0124dfd:	83 c0 03             	add    $0x3,%eax
f0124e00:	c1 e8 02             	shr    $0x2,%eax
f0124e03:	c1 e0 02             	shl    $0x2,%eax
f0124e06:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124e0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e13:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124e1a:	10 00 00 
f0124e1d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124e23:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e28:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124e2e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e39:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124e3f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124e45:	29 d0                	sub    %edx,%eax
f0124e47:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124e4f:	eb 29                	jmp    f0124e7a <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124e51:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124e54:	8d 43 01             	lea    0x1(%ebx),%eax
f0124e57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124e5a:	83 ec 0c             	sub    $0xc,%esp
f0124e5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0124e60:	e8 48 2f fe ff       	call   f0107dad <kheap_physical_address>
f0124e65:	83 c4 10             	add    $0x10,%esp
f0124e68:	89 c2                	mov    %eax,%edx
f0124e6a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124e70:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e73:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124e7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e7d:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124e83:	72 cc                	jb     f0124e51 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124e85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e88:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124e8e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e95:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124e9c:	10 00 00 
f0124e9f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124ea5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124eaa:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124eb0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ebb:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124ec1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124ec7:	29 d0                	sub    %edx,%eax
f0124ec9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ece:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124ed1:	e9 ab 00 00 00       	jmp    f0124f81 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124ed6:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0124edb:	83 ec 04             	sub    $0x4,%esp
f0124ede:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124ee4:	52                   	push   %edx
f0124ee5:	ff 75 d8             	pushl  -0x28(%ebp)
f0124ee8:	50                   	push   %eax
f0124ee9:	e8 c3 1b fe ff       	call   f0106ab1 <get_page_table>
f0124eee:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124ef1:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124ef7:	85 c0                	test   %eax,%eax
f0124ef9:	75 17                	jne    f0124f12 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124efb:	83 ec 04             	sub    $0x4,%esp
f0124efe:	68 bc bf 13 f0       	push   $0xf013bfbc
f0124f03:	68 93 08 00 00       	push   $0x893
f0124f08:	68 1a b6 13 f0       	push   $0xf013b61a
f0124f0d:	e8 f3 b2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f12:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f15:	c1 e8 0c             	shr    $0xc,%eax
f0124f18:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124f1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124f20:	eb 4b                	jmp    f0124f6d <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124f22:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124f28:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124f2b:	c1 e2 02             	shl    $0x2,%edx
f0124f2e:	01 d0                	add    %edx,%eax
f0124f30:	8b 00                	mov    (%eax),%eax
f0124f32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124f37:	89 c1                	mov    %eax,%ecx
f0124f39:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124f3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124f42:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124f45:	39 c1                	cmp    %eax,%ecx
f0124f47:	74 17                	je     f0124f60 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124f49:	83 ec 04             	sub    $0x4,%esp
f0124f4c:	68 15 c0 13 f0       	push   $0xf013c015
f0124f51:	68 9a 08 00 00       	push   $0x89a
f0124f56:	68 1a b6 13 f0       	push   $0xf013b61a
f0124f5b:	e8 a5 b2 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124f60:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f67:	ff 45 d4             	incl   -0x2c(%ebp)
f0124f6a:	ff 45 e4             	incl   -0x1c(%ebp)
f0124f6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f70:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124f76:	7d 09                	jge    f0124f81 <test_kheap_phys_addr+0x1291>
f0124f78:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124f7f:	7e a1                	jle    f0124f22 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f81:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f84:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124f8a:	0f 82 46 ff ff ff    	jb     f0124ed6 <test_kheap_phys_addr+0x11e6>
f0124f90:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124f92:	83 ec 0c             	sub    $0xc,%esp
f0124f95:	68 a5 b7 13 f0       	push   $0xf013b7a5
f0124f9a:	e8 6f bd fd ff       	call   f0100d0e <cprintf>
f0124f9f:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124fa2:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124fa9:	10 00 00 
f0124fac:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124fb2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124fb7:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124fbd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124fc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fc8:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124fce:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124fd4:	29 d0                	sub    %edx,%eax
f0124fd6:	89 c1                	mov    %eax,%ecx
f0124fd8:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124fdf:	10 00 00 
f0124fe2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124fe7:	0f b6 d0             	movzbl %al,%edx
f0124fea:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124ff0:	01 d0                	add    %edx,%eax
f0124ff2:	48                   	dec    %eax
f0124ff3:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124ff9:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0125004:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012500a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125010:	29 d0                	sub    %edx,%eax
f0125012:	01 c1                	add    %eax,%ecx
f0125014:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f012501b:	10 00 00 
f012501e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125023:	0f b6 c0             	movzbl %al,%eax
f0125026:	c1 e0 04             	shl    $0x4,%eax
f0125029:	89 c2                	mov    %eax,%edx
f012502b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125031:	01 d0                	add    %edx,%eax
f0125033:	48                   	dec    %eax
f0125034:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012503a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125040:	ba 00 00 00 00       	mov    $0x0,%edx
f0125045:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f012504b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125051:	29 d0                	sub    %edx,%eax
f0125053:	01 c8                	add    %ecx,%eax
f0125055:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f012505a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0125060:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125067:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012506d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0125070:	eb 0a                	jmp    f012507c <test_kheap_phys_addr+0x138c>
		{
			i++;
f0125072:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125075:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f012507c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0125083:	76 ed                	jbe    f0125072 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0125085:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125088:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f012508e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0125095:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012509b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012509e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01250a5:	e9 cc 00 00 00       	jmp    f0125176 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01250aa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01250ad:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01250b2:	83 ec 04             	sub    $0x4,%esp
f01250b5:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01250bb:	51                   	push   %ecx
f01250bc:	52                   	push   %edx
f01250bd:	50                   	push   %eax
f01250be:	e8 ee 19 fe ff       	call   f0106ab1 <get_page_table>
f01250c3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01250c6:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01250cc:	85 c0                	test   %eax,%eax
f01250ce:	75 17                	jne    f01250e7 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01250d0:	83 ec 04             	sub    $0x4,%esp
f01250d3:	68 bc bf 13 f0       	push   $0xf013bfbc
f01250d8:	68 b6 08 00 00       	push   $0x8b6
f01250dd:	68 1a b6 13 f0       	push   $0xf013b61a
f01250e2:	e8 1e b1 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01250e7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01250ee:	eb 67                	jmp    f0125157 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01250f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01250f3:	c1 e0 0c             	shl    $0xc,%eax
f01250f6:	89 c2                	mov    %eax,%edx
f01250f8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01250fe:	01 d0                	add    %edx,%eax
f0125100:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125106:	83 ec 0c             	sub    $0xc,%esp
f0125109:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012510f:	e8 99 2c fe ff       	call   f0107dad <kheap_physical_address>
f0125114:	83 c4 10             	add    $0x10,%esp
f0125117:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012511d:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125123:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125126:	c1 e2 02             	shl    $0x2,%edx
f0125129:	01 d0                	add    %edx,%eax
f012512b:	8b 00                	mov    (%eax),%eax
f012512d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125132:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125138:	74 17                	je     f0125151 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012513a:	83 ec 04             	sub    $0x4,%esp
f012513d:	68 15 c0 13 f0       	push   $0xf013c015
f0125142:	68 c0 08 00 00       	push   $0x8c0
f0125147:	68 1a b6 13 f0       	push   $0xf013b61a
f012514c:	e8 b4 b0 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125151:	ff 45 cc             	incl   -0x34(%ebp)
f0125154:	ff 45 e4             	incl   -0x1c(%ebp)
f0125157:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012515a:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0125160:	7d 09                	jge    f012516b <test_kheap_phys_addr+0x147b>
f0125162:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0125169:	7e 85                	jle    f01250f0 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012516b:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0125172:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0125176:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012517a:	0f 88 2a ff ff ff    	js     f01250aa <test_kheap_phys_addr+0x13ba>
f0125180:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125184:	7f 0d                	jg     f0125193 <test_kheap_phys_addr+0x14a3>
f0125186:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f012518d:	0f 86 17 ff ff ff    	jbe    f01250aa <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125193:	83 ec 0c             	sub    $0xc,%esp
f0125196:	68 fe b7 13 f0       	push   $0xf013b7fe
f012519b:	e8 6e bb fd ff       	call   f0100d0e <cprintf>
f01251a0:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01251a3:	83 ec 0c             	sub    $0xc,%esp
f01251a6:	68 68 c0 13 f0       	push   $0xf013c068
f01251ab:	e8 5e bb fd ff       	call   f0100d0e <cprintf>
f01251b0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01251b3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01251b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01251bb:	5b                   	pop    %ebx
f01251bc:	5e                   	pop    %esi
f01251bd:	5f                   	pop    %edi
f01251be:	5d                   	pop    %ebp
f01251bf:	c3                   	ret    

f01251c0 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01251c0:	55                   	push   %ebp
f01251c1:	89 e5                	mov    %esp,%ebp
f01251c3:	57                   	push   %edi
f01251c4:	56                   	push   %esi
f01251c5:	53                   	push   %ebx
f01251c6:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01251cc:	89 e0                	mov    %esp,%eax
f01251ce:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01251d0:	83 ec 0c             	sub    $0xc,%esp
f01251d3:	68 5c b5 13 f0       	push   $0xf013b55c
f01251d8:	e8 31 bb fd ff       	call   f0100d0e <cprintf>
f01251dd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01251e0:	83 ec 0c             	sub    $0xc,%esp
f01251e3:	68 8c b5 13 f0       	push   $0xf013b58c
f01251e8:	e8 21 bb fd ff       	call   f0100d0e <cprintf>
f01251ed:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01251f0:	83 ec 0c             	sub    $0xc,%esp
f01251f3:	68 5c b5 13 f0       	push   $0xf013b55c
f01251f8:	e8 11 bb fd ff       	call   f0100d0e <cprintf>
f01251fd:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0125200:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125204:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0125208:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f012520e:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125214:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f012521b:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125222:	e8 80 7c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125227:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012522a:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125230:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125235:	b8 00 00 00 00       	mov    $0x0,%eax
f012523a:	89 d7                	mov    %edx,%edi
f012523c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012523e:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125244:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125249:	b8 00 00 00 00       	mov    $0x0,%eax
f012524e:	89 d7                	mov    %edx,%edi
f0125250:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125252:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0125258:	b9 14 00 00 00       	mov    $0x14,%ecx
f012525d:	b8 00 00 00 00       	mov    $0x0,%eax
f0125262:	89 d7                	mov    %edx,%edi
f0125264:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125266:	e8 3c 7c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012526b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012526e:	e8 55 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125273:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125276:	83 ec 0c             	sub    $0xc,%esp
f0125279:	68 00 fc 1f 00       	push   $0x1ffc00
f012527e:	e8 0c 29 fe ff       	call   f0107b8f <kmalloc>
f0125283:	83 c4 10             	add    $0x10,%esp
f0125286:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012528c:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125292:	89 c1                	mov    %eax,%ecx
f0125294:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012529b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012529e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252a3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01252a6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01252a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ae:	f7 75 b4             	divl   -0x4c(%ebp)
f01252b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01252b4:	29 d0                	sub    %edx,%eax
f01252b6:	89 c3                	mov    %eax,%ebx
f01252b8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01252bf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01252c4:	0f b6 d0             	movzbl %al,%edx
f01252c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01252ca:	01 d0                	add    %edx,%eax
f01252cc:	48                   	dec    %eax
f01252cd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01252d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01252d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01252d8:	f7 75 ac             	divl   -0x54(%ebp)
f01252db:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01252de:	29 d0                	sub    %edx,%eax
f01252e0:	01 c3                	add    %eax,%ebx
f01252e2:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01252e9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01252ee:	0f b6 c0             	movzbl %al,%eax
f01252f1:	c1 e0 04             	shl    $0x4,%eax
f01252f4:	89 c2                	mov    %eax,%edx
f01252f6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01252f9:	01 d0                	add    %edx,%eax
f01252fb:	48                   	dec    %eax
f01252fc:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01252ff:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125302:	ba 00 00 00 00       	mov    $0x0,%edx
f0125307:	f7 75 a4             	divl   -0x5c(%ebp)
f012530a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012530d:	29 d0                	sub    %edx,%eax
f012530f:	01 d8                	add    %ebx,%eax
f0125311:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125316:	39 c1                	cmp    %eax,%ecx
f0125318:	74 17                	je     f0125331 <test_kheap_virt_addr+0x171>
f012531a:	83 ec 04             	sub    $0x4,%esp
f012531d:	68 00 b7 13 f0       	push   $0xf013b700
f0125322:	68 ed 08 00 00       	push   $0x8ed
f0125327:	68 1a b6 13 f0       	push   $0xf013b61a
f012532c:	e8 d4 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125331:	e8 92 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125336:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125339:	74 17                	je     f0125352 <test_kheap_virt_addr+0x192>
f012533b:	83 ec 04             	sub    $0x4,%esp
f012533e:	68 34 b6 13 f0       	push   $0xf013b634
f0125343:	68 ee 08 00 00       	push   $0x8ee
f0125348:	68 1a b6 13 f0       	push   $0xf013b61a
f012534d:	e8 b3 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125352:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125355:	e8 4d 7b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012535a:	29 c3                	sub    %eax,%ebx
f012535c:	89 d8                	mov    %ebx,%eax
f012535e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125363:	74 17                	je     f012537c <test_kheap_virt_addr+0x1bc>
f0125365:	83 ec 04             	sub    $0x4,%esp
f0125368:	68 9c b6 13 f0       	push   $0xf013b69c
f012536d:	68 ef 08 00 00       	push   $0x8ef
f0125372:	68 1a b6 13 f0       	push   $0xf013b61a
f0125377:	e8 89 ae fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012537c:	e8 26 7b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125381:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125384:	e8 3f ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125389:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012538c:	83 ec 0c             	sub    $0xc,%esp
f012538f:	68 00 fc 1f 00       	push   $0x1ffc00
f0125394:	e8 f6 27 fe ff       	call   f0107b8f <kmalloc>
f0125399:	83 c4 10             	add    $0x10,%esp
f012539c:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01253a2:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01253a8:	89 c1                	mov    %eax,%ecx
f01253aa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01253b1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01253b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253b9:	89 45 98             	mov    %eax,-0x68(%ebp)
f01253bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01253bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01253c4:	f7 75 9c             	divl   -0x64(%ebp)
f01253c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01253ca:	29 d0                	sub    %edx,%eax
f01253cc:	89 c3                	mov    %eax,%ebx
f01253ce:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01253d5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01253da:	0f b6 d0             	movzbl %al,%edx
f01253dd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01253e0:	01 d0                	add    %edx,%eax
f01253e2:	48                   	dec    %eax
f01253e3:	89 45 90             	mov    %eax,-0x70(%ebp)
f01253e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01253e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01253ee:	f7 75 94             	divl   -0x6c(%ebp)
f01253f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01253f4:	29 d0                	sub    %edx,%eax
f01253f6:	01 c3                	add    %eax,%ebx
f01253f8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01253ff:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125404:	0f b6 c0             	movzbl %al,%eax
f0125407:	c1 e0 04             	shl    $0x4,%eax
f012540a:	89 c2                	mov    %eax,%edx
f012540c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012540f:	01 d0                	add    %edx,%eax
f0125411:	48                   	dec    %eax
f0125412:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125415:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125418:	ba 00 00 00 00       	mov    $0x0,%edx
f012541d:	f7 75 8c             	divl   -0x74(%ebp)
f0125420:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125423:	29 d0                	sub    %edx,%eax
f0125425:	01 d8                	add    %ebx,%eax
f0125427:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012542c:	39 c1                	cmp    %eax,%ecx
f012542e:	74 17                	je     f0125447 <test_kheap_virt_addr+0x287>
f0125430:	83 ec 04             	sub    $0x4,%esp
f0125433:	68 00 b7 13 f0       	push   $0xf013b700
f0125438:	68 f5 08 00 00       	push   $0x8f5
f012543d:	68 1a b6 13 f0       	push   $0xf013b61a
f0125442:	e8 be ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125447:	e8 7c e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012544c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012544f:	74 17                	je     f0125468 <test_kheap_virt_addr+0x2a8>
f0125451:	83 ec 04             	sub    $0x4,%esp
f0125454:	68 34 b6 13 f0       	push   $0xf013b634
f0125459:	68 f6 08 00 00       	push   $0x8f6
f012545e:	68 1a b6 13 f0       	push   $0xf013b61a
f0125463:	e8 9d ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125468:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012546b:	e8 37 7a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125470:	29 c3                	sub    %eax,%ebx
f0125472:	89 d8                	mov    %ebx,%eax
f0125474:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125479:	74 17                	je     f0125492 <test_kheap_virt_addr+0x2d2>
f012547b:	83 ec 04             	sub    $0x4,%esp
f012547e:	68 9c b6 13 f0       	push   $0xf013b69c
f0125483:	68 f7 08 00 00       	push   $0x8f7
f0125488:	68 1a b6 13 f0       	push   $0xf013b61a
f012548d:	e8 73 ad fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125492:	e8 10 7a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125497:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012549a:	e8 29 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012549f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01254a2:	83 ec 0c             	sub    $0xc,%esp
f01254a5:	68 00 08 00 00       	push   $0x800
f01254aa:	e8 e0 26 fe ff       	call   f0107b8f <kmalloc>
f01254af:	83 c4 10             	add    $0x10,%esp
f01254b2:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254b8:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01254be:	89 c1                	mov    %eax,%ecx
f01254c0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01254c7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01254ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254cf:	89 45 80             	mov    %eax,-0x80(%ebp)
f01254d2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01254da:	f7 75 84             	divl   -0x7c(%ebp)
f01254dd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254e0:	29 d0                	sub    %edx,%eax
f01254e2:	89 c3                	mov    %eax,%ebx
f01254e4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01254eb:	10 00 00 
f01254ee:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01254f3:	0f b6 d0             	movzbl %al,%edx
f01254f6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01254fc:	01 d0                	add    %edx,%eax
f01254fe:	48                   	dec    %eax
f01254ff:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125505:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012550b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125510:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125516:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012551c:	29 d0                	sub    %edx,%eax
f012551e:	01 c3                	add    %eax,%ebx
f0125520:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125527:	10 00 00 
f012552a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012552f:	0f b6 c0             	movzbl %al,%eax
f0125532:	c1 e0 04             	shl    $0x4,%eax
f0125535:	89 c2                	mov    %eax,%edx
f0125537:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012553d:	01 d0                	add    %edx,%eax
f012553f:	48                   	dec    %eax
f0125540:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125546:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012554c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125551:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125557:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012555d:	29 d0                	sub    %edx,%eax
f012555f:	01 d8                	add    %ebx,%eax
f0125561:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125566:	39 c1                	cmp    %eax,%ecx
f0125568:	74 17                	je     f0125581 <test_kheap_virt_addr+0x3c1>
f012556a:	83 ec 04             	sub    $0x4,%esp
f012556d:	68 00 b7 13 f0       	push   $0xf013b700
f0125572:	68 fd 08 00 00       	push   $0x8fd
f0125577:	68 1a b6 13 f0       	push   $0xf013b61a
f012557c:	e8 84 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125581:	e8 42 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125586:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125589:	74 17                	je     f01255a2 <test_kheap_virt_addr+0x3e2>
f012558b:	83 ec 04             	sub    $0x4,%esp
f012558e:	68 34 b6 13 f0       	push   $0xf013b634
f0125593:	68 fe 08 00 00       	push   $0x8fe
f0125598:	68 1a b6 13 f0       	push   $0xf013b61a
f012559d:	e8 63 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01255a2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01255a5:	e8 fd 78 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01255aa:	29 c3                	sub    %eax,%ebx
f01255ac:	89 d8                	mov    %ebx,%eax
f01255ae:	83 f8 01             	cmp    $0x1,%eax
f01255b1:	74 17                	je     f01255ca <test_kheap_virt_addr+0x40a>
f01255b3:	83 ec 04             	sub    $0x4,%esp
f01255b6:	68 9c b6 13 f0       	push   $0xf013b69c
f01255bb:	68 ff 08 00 00       	push   $0x8ff
f01255c0:	68 1a b6 13 f0       	push   $0xf013b61a
f01255c5:	e8 3b ac fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01255ca:	e8 d8 78 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01255cf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255d2:	e8 f1 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01255da:	83 ec 0c             	sub    $0xc,%esp
f01255dd:	68 00 08 00 00       	push   $0x800
f01255e2:	e8 a8 25 fe ff       	call   f0107b8f <kmalloc>
f01255e7:	83 c4 10             	add    $0x10,%esp
f01255ea:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255f0:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01255f6:	89 c1                	mov    %eax,%ecx
f01255f8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01255ff:	10 00 00 
f0125602:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125608:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012560d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125613:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125619:	ba 00 00 00 00       	mov    $0x0,%edx
f012561e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125624:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012562a:	29 d0                	sub    %edx,%eax
f012562c:	89 c3                	mov    %eax,%ebx
f012562e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125635:	10 00 00 
f0125638:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012563d:	0f b6 d0             	movzbl %al,%edx
f0125640:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125646:	01 d0                	add    %edx,%eax
f0125648:	48                   	dec    %eax
f0125649:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012564f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125655:	ba 00 00 00 00       	mov    $0x0,%edx
f012565a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125660:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125666:	29 d0                	sub    %edx,%eax
f0125668:	01 c3                	add    %eax,%ebx
f012566a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125671:	10 00 00 
f0125674:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125679:	0f b6 c0             	movzbl %al,%eax
f012567c:	c1 e0 04             	shl    $0x4,%eax
f012567f:	89 c2                	mov    %eax,%edx
f0125681:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125687:	01 d0                	add    %edx,%eax
f0125689:	48                   	dec    %eax
f012568a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125690:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125696:	ba 00 00 00 00       	mov    $0x0,%edx
f012569b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01256a1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01256a7:	29 d0                	sub    %edx,%eax
f01256a9:	01 d8                	add    %ebx,%eax
f01256ab:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01256b0:	39 c1                	cmp    %eax,%ecx
f01256b2:	74 17                	je     f01256cb <test_kheap_virt_addr+0x50b>
f01256b4:	83 ec 04             	sub    $0x4,%esp
f01256b7:	68 00 b7 13 f0       	push   $0xf013b700
f01256bc:	68 05 09 00 00       	push   $0x905
f01256c1:	68 1a b6 13 f0       	push   $0xf013b61a
f01256c6:	e8 3a ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256cb:	e8 f8 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256d0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01256d3:	74 17                	je     f01256ec <test_kheap_virt_addr+0x52c>
f01256d5:	83 ec 04             	sub    $0x4,%esp
f01256d8:	68 34 b6 13 f0       	push   $0xf013b634
f01256dd:	68 06 09 00 00       	push   $0x906
f01256e2:	68 1a b6 13 f0       	push   $0xf013b61a
f01256e7:	e8 19 ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01256ec:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01256ef:	e8 b3 77 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01256f4:	29 c3                	sub    %eax,%ebx
f01256f6:	89 d8                	mov    %ebx,%eax
f01256f8:	83 f8 01             	cmp    $0x1,%eax
f01256fb:	74 17                	je     f0125714 <test_kheap_virt_addr+0x554>
f01256fd:	83 ec 04             	sub    $0x4,%esp
f0125700:	68 9c b6 13 f0       	push   $0xf013b69c
f0125705:	68 07 09 00 00       	push   $0x907
f012570a:	68 1a b6 13 f0       	push   $0xf013b61a
f012570f:	e8 f1 aa fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125714:	e8 8e 77 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125719:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012571c:	e8 a7 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125721:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125724:	83 ec 0c             	sub    $0xc,%esp
f0125727:	68 00 1c 00 00       	push   $0x1c00
f012572c:	e8 5e 24 fe ff       	call   f0107b8f <kmalloc>
f0125731:	83 c4 10             	add    $0x10,%esp
f0125734:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012573a:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125740:	89 c1                	mov    %eax,%ecx
f0125742:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125749:	10 00 00 
f012574c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125752:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125757:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012575d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125763:	ba 00 00 00 00       	mov    $0x0,%edx
f0125768:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012576e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125774:	29 d0                	sub    %edx,%eax
f0125776:	89 c3                	mov    %eax,%ebx
f0125778:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012577f:	10 00 00 
f0125782:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125787:	0f b6 d0             	movzbl %al,%edx
f012578a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125790:	01 d0                	add    %edx,%eax
f0125792:	48                   	dec    %eax
f0125793:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125799:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012579f:	ba 00 00 00 00       	mov    $0x0,%edx
f01257a4:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01257aa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01257b0:	29 d0                	sub    %edx,%eax
f01257b2:	01 c3                	add    %eax,%ebx
f01257b4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01257bb:	10 00 00 
f01257be:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01257c3:	0f b6 c0             	movzbl %al,%eax
f01257c6:	c1 e0 04             	shl    $0x4,%eax
f01257c9:	89 c2                	mov    %eax,%edx
f01257cb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01257d1:	01 d0                	add    %edx,%eax
f01257d3:	48                   	dec    %eax
f01257d4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01257da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01257e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01257e5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01257eb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01257f1:	29 d0                	sub    %edx,%eax
f01257f3:	01 d8                	add    %ebx,%eax
f01257f5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01257fa:	39 c1                	cmp    %eax,%ecx
f01257fc:	74 17                	je     f0125815 <test_kheap_virt_addr+0x655>
f01257fe:	83 ec 04             	sub    $0x4,%esp
f0125801:	68 00 b7 13 f0       	push   $0xf013b700
f0125806:	68 0d 09 00 00       	push   $0x90d
f012580b:	68 1a b6 13 f0       	push   $0xf013b61a
f0125810:	e8 f0 a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125815:	e8 ae e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012581a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012581d:	74 17                	je     f0125836 <test_kheap_virt_addr+0x676>
f012581f:	83 ec 04             	sub    $0x4,%esp
f0125822:	68 34 b6 13 f0       	push   $0xf013b634
f0125827:	68 0e 09 00 00       	push   $0x90e
f012582c:	68 1a b6 13 f0       	push   $0xf013b61a
f0125831:	e8 cf a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125836:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125839:	e8 69 76 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012583e:	29 c3                	sub    %eax,%ebx
f0125840:	89 d8                	mov    %ebx,%eax
f0125842:	83 f8 02             	cmp    $0x2,%eax
f0125845:	74 17                	je     f012585e <test_kheap_virt_addr+0x69e>
f0125847:	83 ec 04             	sub    $0x4,%esp
f012584a:	68 9c b6 13 f0       	push   $0xf013b69c
f012584f:	68 0f 09 00 00       	push   $0x90f
f0125854:	68 1a b6 13 f0       	push   $0xf013b61a
f0125859:	e8 a7 a9 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012585e:	e8 44 76 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125863:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125866:	e8 5d e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012586b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012586e:	83 ec 0c             	sub    $0xc,%esp
f0125871:	68 00 fc 2f 00       	push   $0x2ffc00
f0125876:	e8 14 23 fe ff       	call   f0107b8f <kmalloc>
f012587b:	83 c4 10             	add    $0x10,%esp
f012587e:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125884:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012588a:	89 c1                	mov    %eax,%ecx
f012588c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125893:	10 00 00 
f0125896:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012589c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258a1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01258a7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01258ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01258b2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01258b8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01258be:	29 d0                	sub    %edx,%eax
f01258c0:	89 c3                	mov    %eax,%ebx
f01258c2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01258c9:	10 00 00 
f01258cc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01258d1:	0f b6 d0             	movzbl %al,%edx
f01258d4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01258da:	01 d0                	add    %edx,%eax
f01258dc:	48                   	dec    %eax
f01258dd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01258e3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01258e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01258ee:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01258f4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01258fa:	29 d0                	sub    %edx,%eax
f01258fc:	01 c3                	add    %eax,%ebx
f01258fe:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125905:	10 00 00 
f0125908:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012590d:	0f b6 c0             	movzbl %al,%eax
f0125910:	c1 e0 04             	shl    $0x4,%eax
f0125913:	89 c2                	mov    %eax,%edx
f0125915:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012591b:	01 d0                	add    %edx,%eax
f012591d:	48                   	dec    %eax
f012591e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125924:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012592a:	ba 00 00 00 00       	mov    $0x0,%edx
f012592f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125935:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012593b:	29 d0                	sub    %edx,%eax
f012593d:	01 d8                	add    %ebx,%eax
f012593f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125944:	39 c1                	cmp    %eax,%ecx
f0125946:	74 17                	je     f012595f <test_kheap_virt_addr+0x79f>
f0125948:	83 ec 04             	sub    $0x4,%esp
f012594b:	68 00 b7 13 f0       	push   $0xf013b700
f0125950:	68 15 09 00 00       	push   $0x915
f0125955:	68 1a b6 13 f0       	push   $0xf013b61a
f012595a:	e8 a6 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012595f:	e8 64 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125964:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125967:	74 17                	je     f0125980 <test_kheap_virt_addr+0x7c0>
f0125969:	83 ec 04             	sub    $0x4,%esp
f012596c:	68 34 b6 13 f0       	push   $0xf013b634
f0125971:	68 16 09 00 00       	push   $0x916
f0125976:	68 1a b6 13 f0       	push   $0xf013b61a
f012597b:	e8 85 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125980:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125983:	e8 1f 75 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125988:	29 c3                	sub    %eax,%ebx
f012598a:	89 d8                	mov    %ebx,%eax
f012598c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125991:	74 17                	je     f01259aa <test_kheap_virt_addr+0x7ea>
f0125993:	83 ec 04             	sub    $0x4,%esp
f0125996:	68 9c b6 13 f0       	push   $0xf013b69c
f012599b:	68 17 09 00 00       	push   $0x917
f01259a0:	68 1a b6 13 f0       	push   $0xf013b61a
f01259a5:	e8 5b a8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01259aa:	e8 f8 74 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01259af:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259b2:	e8 11 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01259b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01259ba:	83 ec 0c             	sub    $0xc,%esp
f01259bd:	68 00 fc 5f 00       	push   $0x5ffc00
f01259c2:	e8 c8 21 fe ff       	call   f0107b8f <kmalloc>
f01259c7:	83 c4 10             	add    $0x10,%esp
f01259ca:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01259d0:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01259d6:	89 c1                	mov    %eax,%ecx
f01259d8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01259df:	10 00 00 
f01259e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01259e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259ed:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01259f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01259f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01259fe:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125a04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125a0a:	29 d0                	sub    %edx,%eax
f0125a0c:	89 c3                	mov    %eax,%ebx
f0125a0e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125a15:	10 00 00 
f0125a18:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125a1d:	0f b6 d0             	movzbl %al,%edx
f0125a20:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125a26:	01 d0                	add    %edx,%eax
f0125a28:	48                   	dec    %eax
f0125a29:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125a2f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125a35:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a3a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125a40:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125a46:	29 d0                	sub    %edx,%eax
f0125a48:	01 c3                	add    %eax,%ebx
f0125a4a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125a51:	10 00 00 
f0125a54:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125a59:	0f b6 c0             	movzbl %al,%eax
f0125a5c:	c1 e0 04             	shl    $0x4,%eax
f0125a5f:	89 c2                	mov    %eax,%edx
f0125a61:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125a67:	01 d0                	add    %edx,%eax
f0125a69:	48                   	dec    %eax
f0125a6a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125a70:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125a76:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a7b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125a81:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125a87:	29 d0                	sub    %edx,%eax
f0125a89:	01 d8                	add    %ebx,%eax
f0125a8b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125a90:	39 c1                	cmp    %eax,%ecx
f0125a92:	74 17                	je     f0125aab <test_kheap_virt_addr+0x8eb>
f0125a94:	83 ec 04             	sub    $0x4,%esp
f0125a97:	68 00 b7 13 f0       	push   $0xf013b700
f0125a9c:	68 1d 09 00 00       	push   $0x91d
f0125aa1:	68 1a b6 13 f0       	push   $0xf013b61a
f0125aa6:	e8 5a a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125aab:	e8 18 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ab0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125ab3:	74 17                	je     f0125acc <test_kheap_virt_addr+0x90c>
f0125ab5:	83 ec 04             	sub    $0x4,%esp
f0125ab8:	68 34 b6 13 f0       	push   $0xf013b634
f0125abd:	68 1e 09 00 00       	push   $0x91e
f0125ac2:	68 1a b6 13 f0       	push   $0xf013b61a
f0125ac7:	e8 39 a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125acc:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125acf:	e8 d3 73 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125ad4:	29 c3                	sub    %eax,%ebx
f0125ad6:	89 d8                	mov    %ebx,%eax
f0125ad8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125add:	74 17                	je     f0125af6 <test_kheap_virt_addr+0x936>
f0125adf:	83 ec 04             	sub    $0x4,%esp
f0125ae2:	68 9c b6 13 f0       	push   $0xf013b69c
f0125ae7:	68 1f 09 00 00       	push   $0x91f
f0125aec:	68 1a b6 13 f0       	push   $0xf013b61a
f0125af1:	e8 0f a7 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125af6:	e8 ac 73 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125afb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125afe:	e8 c5 e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125b03:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125b06:	83 ec 0c             	sub    $0xc,%esp
f0125b09:	68 00 38 00 00       	push   $0x3800
f0125b0e:	e8 7c 20 fe ff       	call   f0107b8f <kmalloc>
f0125b13:	83 c4 10             	add    $0x10,%esp
f0125b16:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b1c:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125b22:	89 c1                	mov    %eax,%ecx
f0125b24:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125b2b:	10 00 00 
f0125b2e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125b34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b39:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125b3f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b4a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125b50:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125b56:	29 d0                	sub    %edx,%eax
f0125b58:	89 c3                	mov    %eax,%ebx
f0125b5a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125b61:	10 00 00 
f0125b64:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125b69:	0f b6 d0             	movzbl %al,%edx
f0125b6c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125b72:	01 d0                	add    %edx,%eax
f0125b74:	48                   	dec    %eax
f0125b75:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125b7b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125b81:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b86:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125b8c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125b92:	29 d0                	sub    %edx,%eax
f0125b94:	01 c3                	add    %eax,%ebx
f0125b96:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125b9d:	10 00 00 
f0125ba0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125ba5:	0f b6 c0             	movzbl %al,%eax
f0125ba8:	c1 e0 04             	shl    $0x4,%eax
f0125bab:	89 c2                	mov    %eax,%edx
f0125bad:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125bb3:	01 d0                	add    %edx,%eax
f0125bb5:	48                   	dec    %eax
f0125bb6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125bbc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125bc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bc7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125bcd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125bd3:	29 d0                	sub    %edx,%eax
f0125bd5:	01 d8                	add    %ebx,%eax
f0125bd7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125bdc:	39 c1                	cmp    %eax,%ecx
f0125bde:	74 17                	je     f0125bf7 <test_kheap_virt_addr+0xa37>
f0125be0:	83 ec 04             	sub    $0x4,%esp
f0125be3:	68 00 b7 13 f0       	push   $0xf013b700
f0125be8:	68 25 09 00 00       	push   $0x925
f0125bed:	68 1a b6 13 f0       	push   $0xf013b61a
f0125bf2:	e8 0e a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bf7:	e8 cc e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125bfc:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125bff:	74 17                	je     f0125c18 <test_kheap_virt_addr+0xa58>
f0125c01:	83 ec 04             	sub    $0x4,%esp
f0125c04:	68 34 b6 13 f0       	push   $0xf013b634
f0125c09:	68 26 09 00 00       	push   $0x926
f0125c0e:	68 1a b6 13 f0       	push   $0xf013b61a
f0125c13:	e8 ed a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c18:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c1b:	e8 87 72 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0125c20:	29 c3                	sub    %eax,%ebx
f0125c22:	89 d8                	mov    %ebx,%eax
f0125c24:	83 f8 04             	cmp    $0x4,%eax
f0125c27:	74 17                	je     f0125c40 <test_kheap_virt_addr+0xa80>
f0125c29:	83 ec 04             	sub    $0x4,%esp
f0125c2c:	68 9c b6 13 f0       	push   $0xf013b69c
f0125c31:	68 27 09 00 00       	push   $0x927
f0125c36:	68 1a b6 13 f0       	push   $0xf013b61a
f0125c3b:	e8 c5 a5 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125c40:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125c47:	10 00 00 
f0125c4a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125c50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c55:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125c5b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125c61:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c66:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125c6c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125c72:	29 d0                	sub    %edx,%eax
f0125c74:	89 c1                	mov    %eax,%ecx
f0125c76:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125c7d:	10 00 00 
f0125c80:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125c85:	0f b6 d0             	movzbl %al,%edx
f0125c88:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125c8e:	01 d0                	add    %edx,%eax
f0125c90:	48                   	dec    %eax
f0125c91:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125c97:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125c9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ca2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125ca8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125cae:	29 d0                	sub    %edx,%eax
f0125cb0:	01 c1                	add    %eax,%ecx
f0125cb2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125cb9:	10 00 00 
f0125cbc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125cc1:	0f b6 c0             	movzbl %al,%eax
f0125cc4:	c1 e0 04             	shl    $0x4,%eax
f0125cc7:	89 c2                	mov    %eax,%edx
f0125cc9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125ccf:	01 d0                	add    %edx,%eax
f0125cd1:	48                   	dec    %eax
f0125cd2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125cd8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ce3:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125ce9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125cef:	29 d0                	sub    %edx,%eax
f0125cf1:	01 c1                	add    %eax,%ecx
f0125cf3:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125cfa:	10 00 00 
f0125cfd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125d03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d08:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125d0e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d19:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125d1f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d25:	29 d0                	sub    %edx,%eax
f0125d27:	29 c1                	sub    %eax,%ecx
f0125d29:	89 c8                	mov    %ecx,%eax
f0125d2b:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125d30:	c1 e8 0c             	shr    $0xc,%eax
f0125d33:	89 c2                	mov    %eax,%edx
f0125d35:	4a                   	dec    %edx
f0125d36:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125d3c:	c1 e0 02             	shl    $0x2,%eax
f0125d3f:	8d 50 03             	lea    0x3(%eax),%edx
f0125d42:	b8 10 00 00 00       	mov    $0x10,%eax
f0125d47:	48                   	dec    %eax
f0125d48:	01 d0                	add    %edx,%eax
f0125d4a:	bf 10 00 00 00       	mov    $0x10,%edi
f0125d4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d54:	f7 f7                	div    %edi
f0125d56:	6b c0 10             	imul   $0x10,%eax,%eax
f0125d59:	29 c4                	sub    %eax,%esp
f0125d5b:	89 e0                	mov    %esp,%eax
f0125d5d:	83 c0 03             	add    $0x3,%eax
f0125d60:	c1 e8 02             	shr    $0x2,%eax
f0125d63:	c1 e0 02             	shl    $0x2,%eax
f0125d66:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125d6c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125d73:	10 00 00 
f0125d76:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125d7c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d81:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125d87:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125d8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d92:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125d98:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125d9e:	29 d0                	sub    %edx,%eax
f0125da0:	89 c1                	mov    %eax,%ecx
f0125da2:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125da9:	10 00 00 
f0125dac:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125db1:	0f b6 d0             	movzbl %al,%edx
f0125db4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125dba:	01 d0                	add    %edx,%eax
f0125dbc:	48                   	dec    %eax
f0125dbd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125dc3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125dc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dce:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125dd4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125dda:	29 d0                	sub    %edx,%eax
f0125ddc:	01 c1                	add    %eax,%ecx
f0125dde:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125de5:	10 00 00 
f0125de8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125ded:	0f b6 c0             	movzbl %al,%eax
f0125df0:	c1 e0 04             	shl    $0x4,%eax
f0125df3:	89 c2                	mov    %eax,%edx
f0125df5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125dfb:	01 d0                	add    %edx,%eax
f0125dfd:	48                   	dec    %eax
f0125dfe:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125e04:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e0f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125e15:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e1b:	29 d0                	sub    %edx,%eax
f0125e1d:	01 c1                	add    %eax,%ecx
f0125e1f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125e26:	10 00 00 
f0125e29:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125e2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e34:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125e3a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e45:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125e4b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125e51:	29 d0                	sub    %edx,%eax
f0125e53:	29 c1                	sub    %eax,%ecx
f0125e55:	89 c8                	mov    %ecx,%eax
f0125e57:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125e5c:	c1 e8 0c             	shr    $0xc,%eax
f0125e5f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125e65:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125e6c:	10 00 00 
f0125e6f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125e75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e7a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125e80:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125e86:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e8b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125e91:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125e97:	29 d0                	sub    %edx,%eax
f0125e99:	89 c1                	mov    %eax,%ecx
f0125e9b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125ea2:	10 00 00 
f0125ea5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125eaa:	0f b6 d0             	movzbl %al,%edx
f0125ead:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125eb3:	01 d0                	add    %edx,%eax
f0125eb5:	48                   	dec    %eax
f0125eb6:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125ebc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125ec2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ec7:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125ecd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125ed3:	29 d0                	sub    %edx,%eax
f0125ed5:	01 c1                	add    %eax,%ecx
f0125ed7:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125ede:	10 00 00 
f0125ee1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125ee6:	0f b6 c0             	movzbl %al,%eax
f0125ee9:	c1 e0 04             	shl    $0x4,%eax
f0125eec:	89 c2                	mov    %eax,%edx
f0125eee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125ef4:	01 d0                	add    %edx,%eax
f0125ef6:	48                   	dec    %eax
f0125ef7:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125efd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f03:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f08:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125f0e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f14:	29 d0                	sub    %edx,%eax
f0125f16:	01 c8                	add    %ecx,%eax
f0125f18:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125f1d:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125f23:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125f2a:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125f31:	10 00 00 
f0125f34:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125f3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f3f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125f45:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125f4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f50:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125f56:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125f5c:	29 d0                	sub    %edx,%eax
f0125f5e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125f63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125f66:	e9 21 01 00 00       	jmp    f012608c <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125f6b:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0125f70:	83 ec 04             	sub    $0x4,%esp
f0125f73:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125f79:	52                   	push   %edx
f0125f7a:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125f7d:	50                   	push   %eax
f0125f7e:	e8 2e 0b fe ff       	call   f0106ab1 <get_page_table>
f0125f83:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125f86:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125f8c:	85 c0                	test   %eax,%eax
f0125f8e:	75 17                	jne    f0125fa7 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125f90:	83 ec 04             	sub    $0x4,%esp
f0125f93:	68 bc bf 13 f0       	push   $0xf013bfbc
f0125f98:	68 38 09 00 00       	push   $0x938
f0125f9d:	68 1a b6 13 f0       	push   $0xf013b61a
f0125fa2:	e8 5e a2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125fa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125faa:	c1 e8 0c             	shr    $0xc,%eax
f0125fad:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125fb2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125fb5:	e9 ba 00 00 00       	jmp    f0126074 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125fba:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125fc0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125fc3:	c1 e2 02             	shl    $0x2,%edx
f0125fc6:	01 d0                	add    %edx,%eax
f0125fc8:	8b 00                	mov    (%eax),%eax
f0125fca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125fcf:	89 c1                	mov    %eax,%ecx
f0125fd1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125fd7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125fda:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125fdd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125fe3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125fe6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125fe9:	83 ec 0c             	sub    $0xc,%esp
f0125fec:	50                   	push   %eax
f0125fed:	e8 8f 1d fe ff       	call   f0107d81 <kheap_virtual_address>
f0125ff2:	83 c4 10             	add    $0x10,%esp
f0125ff5:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125ffb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126001:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126004:	74 61                	je     f0126067 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126006:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012600c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012600f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126012:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0126018:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012601b:	c1 e1 02             	shl    $0x2,%ecx
f012601e:	01 ca                	add    %ecx,%edx
f0126020:	8b 12                	mov    (%edx),%edx
f0126022:	89 d1                	mov    %edx,%ecx
f0126024:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012602a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012602d:	c1 e2 0c             	shl    $0xc,%edx
f0126030:	89 d3                	mov    %edx,%ebx
f0126032:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126035:	01 da                	add    %ebx,%edx
f0126037:	83 ec 0c             	sub    $0xc,%esp
f012603a:	50                   	push   %eax
f012603b:	51                   	push   %ecx
f012603c:	52                   	push   %edx
f012603d:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0126043:	68 b0 c0 13 f0       	push   $0xf013c0b0
f0126048:	e8 c1 ac fd ff       	call   f0100d0e <cprintf>
f012604d:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0126050:	83 ec 04             	sub    $0x4,%esp
f0126053:	68 f3 c0 13 f0       	push   $0xf013c0f3
f0126058:	68 42 09 00 00       	push   $0x942
f012605d:	68 1a b6 13 f0       	push   $0xf013b61a
f0126062:	e8 9e a1 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0126067:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012606e:	ff 45 dc             	incl   -0x24(%ebp)
f0126071:	ff 45 e0             	incl   -0x20(%ebp)
f0126074:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126077:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f012607d:	7d 0d                	jge    f012608c <test_kheap_virt_addr+0xecc>
f012607f:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0126086:	0f 8e 2e ff ff ff    	jle    f0125fba <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012608c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012608f:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0126095:	0f 82 d0 fe ff ff    	jb     f0125f6b <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f012609b:	83 ec 0c             	sub    $0xc,%esp
f012609e:	68 10 c1 13 f0       	push   $0xf013c110
f01260a3:	e8 66 ac fd ff       	call   f0100d0e <cprintf>
f01260a8:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01260ab:	e8 f7 6d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01260b0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01260b6:	e8 0d dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260bb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01260c1:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01260c7:	83 ec 0c             	sub    $0xc,%esp
f01260ca:	50                   	push   %eax
f01260cb:	e8 8a 1b fe ff       	call   f0107c5a <kfree>
f01260d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260d3:	e8 f0 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260d8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01260de:	74 17                	je     f01260f7 <test_kheap_virt_addr+0xf37>
f01260e0:	83 ec 04             	sub    $0x4,%esp
f01260e3:	68 34 b6 13 f0       	push   $0xf013b634
f01260e8:	68 50 09 00 00       	push   $0x950
f01260ed:	68 1a b6 13 f0       	push   $0xf013b61a
f01260f2:	e8 0e a1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01260f7:	e8 ab 6d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01260fc:	89 c2                	mov    %eax,%edx
f01260fe:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126104:	29 c2                	sub    %eax,%edx
f0126106:	89 d0                	mov    %edx,%eax
f0126108:	3d 00 02 00 00       	cmp    $0x200,%eax
f012610d:	74 17                	je     f0126126 <test_kheap_virt_addr+0xf66>
f012610f:	83 ec 04             	sub    $0x4,%esp
f0126112:	68 a4 bd 13 f0       	push   $0xf013bda4
f0126117:	68 51 09 00 00       	push   $0x951
f012611c:	68 1a b6 13 f0       	push   $0xf013b61a
f0126121:	e8 df a0 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126126:	e8 7c 6d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012612b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126131:	e8 92 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126136:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f012613c:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0126142:	83 ec 0c             	sub    $0xc,%esp
f0126145:	50                   	push   %eax
f0126146:	e8 0f 1b fe ff       	call   f0107c5a <kfree>
f012614b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012614e:	e8 75 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126153:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126159:	74 17                	je     f0126172 <test_kheap_virt_addr+0xfb2>
f012615b:	83 ec 04             	sub    $0x4,%esp
f012615e:	68 34 b6 13 f0       	push   $0xf013b634
f0126163:	68 57 09 00 00       	push   $0x957
f0126168:	68 1a b6 13 f0       	push   $0xf013b61a
f012616d:	e8 93 a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126172:	e8 30 6d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126177:	89 c2                	mov    %eax,%edx
f0126179:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012617f:	29 c2                	sub    %eax,%edx
f0126181:	89 d0                	mov    %edx,%eax
f0126183:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126188:	74 17                	je     f01261a1 <test_kheap_virt_addr+0xfe1>
f012618a:	83 ec 04             	sub    $0x4,%esp
f012618d:	68 a4 bd 13 f0       	push   $0xf013bda4
f0126192:	68 58 09 00 00       	push   $0x958
f0126197:	68 1a b6 13 f0       	push   $0xf013b61a
f012619c:	e8 64 a0 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01261a1:	e8 01 6d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01261a6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261ac:	e8 17 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261b1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01261b7:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01261bd:	83 ec 0c             	sub    $0xc,%esp
f01261c0:	50                   	push   %eax
f01261c1:	e8 94 1a fe ff       	call   f0107c5a <kfree>
f01261c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261c9:	e8 fa db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261ce:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01261d4:	74 17                	je     f01261ed <test_kheap_virt_addr+0x102d>
f01261d6:	83 ec 04             	sub    $0x4,%esp
f01261d9:	68 34 b6 13 f0       	push   $0xf013b634
f01261de:	68 5e 09 00 00       	push   $0x95e
f01261e3:	68 1a b6 13 f0       	push   $0xf013b61a
f01261e8:	e8 18 a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01261ed:	e8 b5 6c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01261f2:	89 c2                	mov    %eax,%edx
f01261f4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01261fa:	29 c2                	sub    %eax,%edx
f01261fc:	89 d0                	mov    %edx,%eax
f01261fe:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126203:	74 17                	je     f012621c <test_kheap_virt_addr+0x105c>
f0126205:	83 ec 04             	sub    $0x4,%esp
f0126208:	68 a4 bd 13 f0       	push   $0xf013bda4
f012620d:	68 5f 09 00 00       	push   $0x95f
f0126212:	68 1a b6 13 f0       	push   $0xf013b61a
f0126217:	e8 e9 9f fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012621c:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126223:	10 00 00 
f0126226:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012622c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126231:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126237:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012623d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126242:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126248:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012624e:	29 d0                	sub    %edx,%eax
f0126250:	89 c1                	mov    %eax,%ecx
f0126252:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0126259:	10 00 00 
f012625c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126261:	0f b6 d0             	movzbl %al,%edx
f0126264:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012626a:	01 d0                	add    %edx,%eax
f012626c:	48                   	dec    %eax
f012626d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0126273:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126279:	ba 00 00 00 00       	mov    $0x0,%edx
f012627e:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0126284:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012628a:	29 d0                	sub    %edx,%eax
f012628c:	01 c1                	add    %eax,%ecx
f012628e:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0126295:	10 00 00 
f0126298:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012629d:	0f b6 c0             	movzbl %al,%eax
f01262a0:	c1 e0 04             	shl    $0x4,%eax
f01262a3:	89 c2                	mov    %eax,%edx
f01262a5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01262ab:	01 d0                	add    %edx,%eax
f01262ad:	48                   	dec    %eax
f01262ae:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01262b4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01262ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01262bf:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01262c5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01262cb:	29 d0                	sub    %edx,%eax
f01262cd:	01 c8                	add    %ecx,%eax
f01262cf:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01262d4:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01262da:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01262e1:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01262e8:	10 00 00 
f01262eb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01262f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262f6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01262fc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126302:	ba 00 00 00 00       	mov    $0x0,%edx
f0126307:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012630d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126313:	29 d0                	sub    %edx,%eax
f0126315:	89 c1                	mov    %eax,%ecx
f0126317:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f012631e:	10 00 00 
f0126321:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126326:	0f b6 d0             	movzbl %al,%edx
f0126329:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012632f:	01 d0                	add    %edx,%eax
f0126331:	48                   	dec    %eax
f0126332:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126338:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012633e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126343:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126349:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012634f:	29 d0                	sub    %edx,%eax
f0126351:	01 c1                	add    %eax,%ecx
f0126353:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012635a:	10 00 00 
f012635d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126362:	0f b6 c0             	movzbl %al,%eax
f0126365:	c1 e0 04             	shl    $0x4,%eax
f0126368:	89 c2                	mov    %eax,%edx
f012636a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126370:	01 d0                	add    %edx,%eax
f0126372:	48                   	dec    %eax
f0126373:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0126379:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012637f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126384:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012638a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126390:	29 d0                	sub    %edx,%eax
f0126392:	01 c1                	add    %eax,%ecx
f0126394:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f012639b:	10 00 00 
f012639e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01263a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263a9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01263af:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01263b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01263ba:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01263c0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01263c6:	29 d0                	sub    %edx,%eax
f01263c8:	29 c1                	sub    %eax,%ecx
f01263ca:	89 c8                	mov    %ecx,%eax
f01263cc:	05 00 40 00 00       	add    $0x4000,%eax
f01263d1:	c1 e8 0c             	shr    $0xc,%eax
f01263d4:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01263da:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01263e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01263e3:	eb 41                	jmp    f0126426 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01263e5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01263eb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01263ee:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01263f1:	83 ec 0c             	sub    $0xc,%esp
f01263f4:	50                   	push   %eax
f01263f5:	e8 87 19 fe ff       	call   f0107d81 <kheap_virtual_address>
f01263fa:	83 c4 10             	add    $0x10,%esp
f01263fd:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126403:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012640a:	74 17                	je     f0126423 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012640c:	83 ec 04             	sub    $0x4,%esp
f012640f:	68 f3 c0 13 f0       	push   $0xf013c0f3
f0126414:	68 70 09 00 00       	push   $0x970
f0126419:	68 1a b6 13 f0       	push   $0xf013b61a
f012641e:	e8 e2 9d fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126423:	ff 45 d8             	incl   -0x28(%ebp)
f0126426:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012642c:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126432:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126435:	39 c2                	cmp    %eax,%edx
f0126437:	77 ac                	ja     f01263e5 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126439:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012643f:	05 00 04 00 00       	add    $0x400,%eax
f0126444:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126447:	e9 83 00 00 00       	jmp    f01264cf <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012644c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126452:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126455:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126458:	83 ec 0c             	sub    $0xc,%esp
f012645b:	50                   	push   %eax
f012645c:	e8 20 19 fe ff       	call   f0107d81 <kheap_virtual_address>
f0126461:	83 c4 10             	add    $0x10,%esp
f0126464:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012646a:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0126471:	10 00 00 
f0126474:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012647a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012647f:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0126485:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012648b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126490:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0126496:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012649c:	29 d0                	sub    %edx,%eax
f012649e:	89 c2                	mov    %eax,%edx
f01264a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01264a3:	c1 e0 0c             	shl    $0xc,%eax
f01264a6:	01 d0                	add    %edx,%eax
f01264a8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01264ad:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01264b3:	74 17                	je     f01264cc <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01264b5:	83 ec 04             	sub    $0x4,%esp
f01264b8:	68 f3 c0 13 f0       	push   $0xf013c0f3
f01264bd:	68 7a 09 00 00       	push   $0x97a
f01264c2:	68 1a b6 13 f0       	push   $0xf013b61a
f01264c7:	e8 39 9d fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01264cc:	ff 45 d8             	incl   -0x28(%ebp)
f01264cf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264d5:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01264db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01264de:	39 c2                	cmp    %eax,%edx
f01264e0:	0f 87 66 ff ff ff    	ja     f012644c <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01264e6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264ec:	05 04 07 00 00       	add    $0x704,%eax
f01264f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01264f4:	eb 41                	jmp    f0126537 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01264f6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01264fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01264ff:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126502:	83 ec 0c             	sub    $0xc,%esp
f0126505:	50                   	push   %eax
f0126506:	e8 76 18 fe ff       	call   f0107d81 <kheap_virtual_address>
f012650b:	83 c4 10             	add    $0x10,%esp
f012650e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126514:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012651b:	74 17                	je     f0126534 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012651d:	83 ec 04             	sub    $0x4,%esp
f0126520:	68 f3 c0 13 f0       	push   $0xf013c0f3
f0126525:	68 83 09 00 00       	push   $0x983
f012652a:	68 1a b6 13 f0       	push   $0xf013b61a
f012652f:	e8 d1 9c fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126534:	ff 45 d8             	incl   -0x28(%ebp)
f0126537:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012653d:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126543:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126546:	39 c2                	cmp    %eax,%edx
f0126548:	77 ac                	ja     f01264f6 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012654a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126550:	05 04 0d 00 00       	add    $0xd04,%eax
f0126555:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126558:	e9 83 00 00 00       	jmp    f01265e0 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012655d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126563:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126566:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126569:	83 ec 0c             	sub    $0xc,%esp
f012656c:	50                   	push   %eax
f012656d:	e8 0f 18 fe ff       	call   f0107d81 <kheap_virtual_address>
f0126572:	83 c4 10             	add    $0x10,%esp
f0126575:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012657b:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0126582:	10 00 00 
f0126585:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012658b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126590:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0126596:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012659c:	ba 00 00 00 00       	mov    $0x0,%edx
f01265a1:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01265a7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01265ad:	29 d0                	sub    %edx,%eax
f01265af:	89 c2                	mov    %eax,%edx
f01265b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265b4:	c1 e0 0c             	shl    $0xc,%eax
f01265b7:	01 d0                	add    %edx,%eax
f01265b9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01265be:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01265c4:	74 17                	je     f01265dd <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01265c6:	83 ec 04             	sub    $0x4,%esp
f01265c9:	68 f3 c0 13 f0       	push   $0xf013c0f3
f01265ce:	68 8c 09 00 00       	push   $0x98c
f01265d3:	68 1a b6 13 f0       	push   $0xf013b61a
f01265d8:	e8 28 9c fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01265dd:	ff 45 d8             	incl   -0x28(%ebp)
f01265e0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265e6:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01265ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265ef:	39 c2                	cmp    %eax,%edx
f01265f1:	0f 87 66 ff ff ff    	ja     f012655d <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f01265f7:	83 ec 0c             	sub    $0xc,%esp
f01265fa:	68 a5 b7 13 f0       	push   $0xf013b7a5
f01265ff:	e8 0a a7 fd ff       	call   f0100d0e <cprintf>
f0126604:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126607:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012660e:	eb 54                	jmp    f0126664 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126610:	83 ec 0c             	sub    $0xc,%esp
f0126613:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126616:	e8 66 17 fe ff       	call   f0107d81 <kheap_virtual_address>
f012661b:	83 c4 10             	add    $0x10,%esp
f012661e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126624:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f012662b:	74 30                	je     f012665d <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012662d:	83 ec 04             	sub    $0x4,%esp
f0126630:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126636:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126639:	68 41 c1 13 f0       	push   $0xf013c141
f012663e:	e8 cb a6 fd ff       	call   f0100d0e <cprintf>
f0126643:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126646:	83 ec 04             	sub    $0x4,%esp
f0126649:	68 f3 c0 13 f0       	push   $0xf013c0f3
f012664e:	68 9c 09 00 00       	push   $0x99c
f0126653:	68 1a b6 13 f0       	push   $0xf013b61a
f0126658:	e8 a8 9b fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012665d:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126664:	b8 bc ee 88 00       	mov    $0x88eebc,%eax
f0126669:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f012666c:	72 a2                	jb     f0126610 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012666e:	83 ec 0c             	sub    $0xc,%esp
f0126671:	68 fe b7 13 f0       	push   $0xf013b7fe
f0126676:	e8 93 a6 fd ff       	call   f0100d0e <cprintf>
f012667b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f012667e:	83 ec 0c             	sub    $0xc,%esp
f0126681:	68 60 c1 13 f0       	push   $0xf013c160
f0126686:	e8 83 a6 fd ff       	call   f0100d0e <cprintf>
f012668b:	83 c4 10             	add    $0x10,%esp

	return 1;
f012668e:	b8 01 00 00 00       	mov    $0x1,%eax
f0126693:	89 f4                	mov    %esi,%esp

}
f0126695:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126698:	5b                   	pop    %ebx
f0126699:	5e                   	pop    %esi
f012669a:	5f                   	pop    %edi
f012669b:	5d                   	pop    %ebp
f012669c:	c3                   	ret    

f012669d <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f012669d:	55                   	push   %ebp
f012669e:	89 e5                	mov    %esp,%ebp
f01266a0:	57                   	push   %edi
f01266a1:	56                   	push   %esi
f01266a2:	53                   	push   %ebx
f01266a3:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01266a9:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f01266ae:	84 c0                	test   %al,%al
f01266b0:	74 56                	je     f0126708 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01266b2:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f01266b9:	e8 e9 67 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01266be:	a3 b8 ee 88 f0       	mov    %eax,0xf088eeb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01266c3:	e8 00 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01266c8:	a3 b4 ee 88 f0       	mov    %eax,0xf088eeb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01266cd:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01266d3:	bb bd c2 13 f0       	mov    $0xf013c2bd,%ebx
f01266d8:	ba 11 00 00 00       	mov    $0x11,%edx
f01266dd:	89 c7                	mov    %eax,%edi
f01266df:	89 de                	mov    %ebx,%esi
f01266e1:	89 d1                	mov    %edx,%ecx
f01266e3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01266e5:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01266eb:	b9 53 00 00 00       	mov    $0x53,%ecx
f01266f0:	b0 00                	mov    $0x0,%al
f01266f2:	89 d7                	mov    %edx,%edi
f01266f4:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f01266f6:	83 ec 0c             	sub    $0xc,%esp
f01266f9:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01266ff:	50                   	push   %eax
f0126700:	e8 6b a6 fd ff       	call   f0100d70 <execute_command>
f0126705:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126708:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f012670f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126716:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f012671b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012671e:	eb 2d                	jmp    f012674d <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126720:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126723:	05 5c 05 00 00       	add    $0x55c,%eax
f0126728:	83 ec 08             	sub    $0x8,%esp
f012672b:	68 a7 c1 13 f0       	push   $0xf013c1a7
f0126730:	50                   	push   %eax
f0126731:	e8 79 af 00 00       	call   f01316af <strcmp>
f0126736:	83 c4 10             	add    $0x10,%esp
f0126739:	85 c0                	test   %eax,%eax
f012673b:	75 08                	jne    f0126745 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f012673d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126740:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126743:	eb 2f                	jmp    f0126774 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126745:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f012674a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012674d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126751:	74 08                	je     f012675b <test_three_creation_functions+0xbe>
f0126753:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126756:	8b 40 44             	mov    0x44(%eax),%eax
f0126759:	eb 05                	jmp    f0126760 <test_three_creation_functions+0xc3>
f012675b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126760:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0126765:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f012676a:	85 c0                	test   %eax,%eax
f012676c:	75 b2                	jne    f0126720 <test_three_creation_functions+0x83>
f012676e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126772:	75 ac                	jne    f0126720 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126777:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f012677d:	85 c0                	test   %eax,%eax
f012677f:	74 17                	je     f0126798 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126781:	83 ec 04             	sub    $0x4,%esp
f0126784:	68 b0 c1 13 f0       	push   $0xf013c1b0
f0126789:	68 c6 09 00 00       	push   $0x9c6
f012678e:	68 1a b6 13 f0       	push   $0xf013b61a
f0126793:	e8 6d 9a fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126798:	83 ec 0c             	sub    $0xc,%esp
f012679b:	ff 75 e4             	pushl  -0x1c(%ebp)
f012679e:	e8 7d 19 fe ff       	call   f0108120 <env_page_ws_get_size>
f01267a3:	83 c4 10             	add    $0x10,%esp
f01267a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01267a9:	e8 f9 66 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01267ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01267b1:	e8 12 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01267b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267b9:	a1 b4 ee 88 f0       	mov    0xf088eeb4,%eax
f01267be:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01267c1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01267c4:	74 17                	je     f01267dd <test_three_creation_functions+0x140>
f01267c6:	83 ec 04             	sub    $0x4,%esp
f01267c9:	68 34 b6 13 f0       	push   $0xf013b634
f01267ce:	68 cc 09 00 00       	push   $0x9cc
f01267d3:	68 1a b6 13 f0       	push   $0xf013b61a
f01267d8:	e8 28 9a fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267dd:	a1 b8 ee 88 f0       	mov    0xf088eeb8,%eax
f01267e2:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01267e5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01267e8:	83 c2 15             	add    $0x15,%edx
f01267eb:	39 d0                	cmp    %edx,%eax
f01267ed:	74 17                	je     f0126806 <test_three_creation_functions+0x169>
f01267ef:	83 ec 04             	sub    $0x4,%esp
f01267f2:	68 9c b6 13 f0       	push   $0xf013b69c
f01267f7:	68 ce 09 00 00       	push   $0x9ce
f01267fc:	68 1a b6 13 f0       	push   $0xf013b61a
f0126801:	e8 ff 99 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126806:	83 ec 0c             	sub    $0xc,%esp
f0126809:	68 00 10 00 00       	push   $0x1000
f012680e:	e8 7c 13 fe ff       	call   f0107b8f <kmalloc>
f0126813:	83 c4 10             	add    $0x10,%esp
f0126816:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126819:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126820:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126823:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126828:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012682b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012682e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126833:	f7 75 cc             	divl   -0x34(%ebp)
f0126836:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126839:	29 d0                	sub    %edx,%eax
f012683b:	89 c1                	mov    %eax,%ecx
f012683d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126844:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126849:	0f b6 d0             	movzbl %al,%edx
f012684c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012684f:	01 d0                	add    %edx,%eax
f0126851:	48                   	dec    %eax
f0126852:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126855:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126858:	ba 00 00 00 00       	mov    $0x0,%edx
f012685d:	f7 75 c4             	divl   -0x3c(%ebp)
f0126860:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126863:	29 d0                	sub    %edx,%eax
f0126865:	01 c1                	add    %eax,%ecx
f0126867:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012686e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126873:	0f b6 c0             	movzbl %al,%eax
f0126876:	c1 e0 04             	shl    $0x4,%eax
f0126879:	89 c2                	mov    %eax,%edx
f012687b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012687e:	01 d0                	add    %edx,%eax
f0126880:	48                   	dec    %eax
f0126881:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126884:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126887:	ba 00 00 00 00       	mov    $0x0,%edx
f012688c:	f7 75 bc             	divl   -0x44(%ebp)
f012688f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126892:	29 d0                	sub    %edx,%eax
f0126894:	01 c8                	add    %ecx,%eax
f0126896:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f012689c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012689f:	39 c2                	cmp    %eax,%edx
f01268a1:	74 17                	je     f01268ba <test_three_creation_functions+0x21d>
f01268a3:	83 ec 04             	sub    $0x4,%esp
f01268a6:	68 00 c2 13 f0       	push   $0xf013c200
f01268ab:	68 d2 09 00 00       	push   $0x9d2
f01268b0:	68 1a b6 13 f0       	push   $0xf013b61a
f01268b5:	e8 4b 99 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01268ba:	83 ec 0c             	sub    $0xc,%esp
f01268bd:	68 70 c2 13 f0       	push   $0xf013c270
f01268c2:	e8 47 a4 fd ff       	call   f0100d0e <cprintf>
f01268c7:	83 c4 10             	add    $0x10,%esp

	return 1;
f01268ca:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01268cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01268d2:	5b                   	pop    %ebx
f01268d3:	5e                   	pop    %esi
f01268d4:	5f                   	pop    %edi
f01268d5:	5d                   	pop    %ebp
f01268d6:	c3                   	ret    

f01268d7 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01268d7:	55                   	push   %ebp
f01268d8:	89 e5                	mov    %esp,%ebp
f01268da:	57                   	push   %edi
f01268db:	53                   	push   %ebx
f01268dc:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01268e2:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01268e6:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01268ea:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01268f0:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01268f6:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01268fd:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126904:	e8 9e 65 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126909:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012690c:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126912:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126917:	b8 00 00 00 00       	mov    $0x0,%eax
f012691c:	89 d7                	mov    %edx,%edi
f012691e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126920:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126926:	b9 14 00 00 00       	mov    $0x14,%ecx
f012692b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126930:	89 d7                	mov    %edx,%edi
f0126932:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126934:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012693a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012693f:	b8 00 00 00 00       	mov    $0x0,%eax
f0126944:	89 d7                	mov    %edx,%edi
f0126946:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126948:	e8 5a 65 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012694d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126950:	e8 73 d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126955:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126958:	83 ec 0c             	sub    $0xc,%esp
f012695b:	68 00 fc 1f 00       	push   $0x1ffc00
f0126960:	e8 2a 12 fe ff       	call   f0107b8f <kmalloc>
f0126965:	83 c4 10             	add    $0x10,%esp
f0126968:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012696e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126974:	89 c1                	mov    %eax,%ecx
f0126976:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012697d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126980:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126985:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126988:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012698b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126990:	f7 75 c8             	divl   -0x38(%ebp)
f0126993:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126996:	29 d0                	sub    %edx,%eax
f0126998:	89 c3                	mov    %eax,%ebx
f012699a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01269a1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01269a6:	0f b6 d0             	movzbl %al,%edx
f01269a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01269ac:	01 d0                	add    %edx,%eax
f01269ae:	48                   	dec    %eax
f01269af:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01269b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01269b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01269ba:	f7 75 c0             	divl   -0x40(%ebp)
f01269bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01269c0:	29 d0                	sub    %edx,%eax
f01269c2:	01 c3                	add    %eax,%ebx
f01269c4:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01269cb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01269d0:	0f b6 c0             	movzbl %al,%eax
f01269d3:	c1 e0 04             	shl    $0x4,%eax
f01269d6:	89 c2                	mov    %eax,%edx
f01269d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01269db:	01 d0                	add    %edx,%eax
f01269dd:	48                   	dec    %eax
f01269de:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01269e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01269e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01269e9:	f7 75 b8             	divl   -0x48(%ebp)
f01269ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01269ef:	29 d0                	sub    %edx,%eax
f01269f1:	01 d8                	add    %ebx,%eax
f01269f3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01269f8:	39 c1                	cmp    %eax,%ecx
f01269fa:	74 17                	je     f0126a13 <test_kfreeall+0x13c>
f01269fc:	83 ec 04             	sub    $0x4,%esp
f01269ff:	68 00 b7 13 f0       	push   $0xf013b700
f0126a04:	68 f9 09 00 00       	push   $0x9f9
f0126a09:	68 1a b6 13 f0       	push   $0xf013b61a
f0126a0e:	e8 f2 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a13:	e8 b0 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a18:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a1b:	74 17                	je     f0126a34 <test_kfreeall+0x15d>
f0126a1d:	83 ec 04             	sub    $0x4,%esp
f0126a20:	68 34 b6 13 f0       	push   $0xf013b634
f0126a25:	68 fa 09 00 00       	push   $0x9fa
f0126a2a:	68 1a b6 13 f0       	push   $0xf013b61a
f0126a2f:	e8 d1 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a34:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a37:	e8 6b 64 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126a3c:	29 c3                	sub    %eax,%ebx
f0126a3e:	89 d8                	mov    %ebx,%eax
f0126a40:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126a45:	74 17                	je     f0126a5e <test_kfreeall+0x187>
f0126a47:	83 ec 04             	sub    $0x4,%esp
f0126a4a:	68 9c b6 13 f0       	push   $0xf013b69c
f0126a4f:	68 fb 09 00 00       	push   $0x9fb
f0126a54:	68 1a b6 13 f0       	push   $0xf013b61a
f0126a59:	e8 a7 97 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126a5e:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126a65:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a68:	e8 3a 64 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126a6d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a70:	e8 53 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a75:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126a78:	83 ec 0c             	sub    $0xc,%esp
f0126a7b:	68 00 fc 1f 00       	push   $0x1ffc00
f0126a80:	e8 0a 11 fe ff       	call   f0107b8f <kmalloc>
f0126a85:	83 c4 10             	add    $0x10,%esp
f0126a88:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a8e:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126a94:	89 c1                	mov    %eax,%ecx
f0126a96:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126a9d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126aa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126aa5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126aa8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126aab:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ab0:	f7 75 b0             	divl   -0x50(%ebp)
f0126ab3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ab6:	29 d0                	sub    %edx,%eax
f0126ab8:	89 c3                	mov    %eax,%ebx
f0126aba:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126ac1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126ac6:	0f b6 d0             	movzbl %al,%edx
f0126ac9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126acc:	01 d0                	add    %edx,%eax
f0126ace:	48                   	dec    %eax
f0126acf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126ad2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ad5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ada:	f7 75 a8             	divl   -0x58(%ebp)
f0126add:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ae0:	29 d0                	sub    %edx,%eax
f0126ae2:	01 c3                	add    %eax,%ebx
f0126ae4:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126aeb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126af0:	0f b6 c0             	movzbl %al,%eax
f0126af3:	c1 e0 04             	shl    $0x4,%eax
f0126af6:	89 c2                	mov    %eax,%edx
f0126af8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126afb:	01 d0                	add    %edx,%eax
f0126afd:	48                   	dec    %eax
f0126afe:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126b01:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b09:	f7 75 a0             	divl   -0x60(%ebp)
f0126b0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b0f:	29 d0                	sub    %edx,%eax
f0126b11:	01 d8                	add    %ebx,%eax
f0126b13:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126b18:	39 c1                	cmp    %eax,%ecx
f0126b1a:	74 17                	je     f0126b33 <test_kfreeall+0x25c>
f0126b1c:	83 ec 04             	sub    $0x4,%esp
f0126b1f:	68 00 b7 13 f0       	push   $0xf013b700
f0126b24:	68 02 0a 00 00       	push   $0xa02
f0126b29:	68 1a b6 13 f0       	push   $0xf013b61a
f0126b2e:	e8 d2 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b33:	e8 90 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b38:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b3b:	74 17                	je     f0126b54 <test_kfreeall+0x27d>
f0126b3d:	83 ec 04             	sub    $0x4,%esp
f0126b40:	68 34 b6 13 f0       	push   $0xf013b634
f0126b45:	68 03 0a 00 00       	push   $0xa03
f0126b4a:	68 1a b6 13 f0       	push   $0xf013b61a
f0126b4f:	e8 b1 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b54:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126b57:	e8 4b 63 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126b5c:	29 c3                	sub    %eax,%ebx
f0126b5e:	89 d8                	mov    %ebx,%eax
f0126b60:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b65:	74 17                	je     f0126b7e <test_kfreeall+0x2a7>
f0126b67:	83 ec 04             	sub    $0x4,%esp
f0126b6a:	68 9c b6 13 f0       	push   $0xf013b69c
f0126b6f:	68 04 0a 00 00       	push   $0xa04
f0126b74:	68 1a b6 13 f0       	push   $0xf013b61a
f0126b79:	e8 87 96 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126b7e:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126b85:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b88:	e8 1a 63 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126b8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b90:	e8 33 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126b98:	83 ec 0c             	sub    $0xc,%esp
f0126b9b:	68 00 08 00 00       	push   $0x800
f0126ba0:	e8 ea 0f fe ff       	call   f0107b8f <kmalloc>
f0126ba5:	83 c4 10             	add    $0x10,%esp
f0126ba8:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126bae:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126bb4:	89 c1                	mov    %eax,%ecx
f0126bb6:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126bbd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126bc0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126bc5:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126bc8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126bcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bd0:	f7 75 98             	divl   -0x68(%ebp)
f0126bd3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126bd6:	29 d0                	sub    %edx,%eax
f0126bd8:	89 c3                	mov    %eax,%ebx
f0126bda:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126be1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126be6:	0f b6 d0             	movzbl %al,%edx
f0126be9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126bec:	01 d0                	add    %edx,%eax
f0126bee:	48                   	dec    %eax
f0126bef:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126bf2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126bf5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bfa:	f7 75 90             	divl   -0x70(%ebp)
f0126bfd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126c00:	29 d0                	sub    %edx,%eax
f0126c02:	01 c3                	add    %eax,%ebx
f0126c04:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126c0b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126c10:	0f b6 c0             	movzbl %al,%eax
f0126c13:	c1 e0 04             	shl    $0x4,%eax
f0126c16:	89 c2                	mov    %eax,%edx
f0126c18:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126c1b:	01 d0                	add    %edx,%eax
f0126c1d:	48                   	dec    %eax
f0126c1e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126c21:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c29:	f7 75 88             	divl   -0x78(%ebp)
f0126c2c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c2f:	29 d0                	sub    %edx,%eax
f0126c31:	01 d8                	add    %ebx,%eax
f0126c33:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126c38:	39 c1                	cmp    %eax,%ecx
f0126c3a:	74 17                	je     f0126c53 <test_kfreeall+0x37c>
f0126c3c:	83 ec 04             	sub    $0x4,%esp
f0126c3f:	68 00 b7 13 f0       	push   $0xf013b700
f0126c44:	68 0b 0a 00 00       	push   $0xa0b
f0126c49:	68 1a b6 13 f0       	push   $0xf013b61a
f0126c4e:	e8 b2 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c53:	e8 70 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c58:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c5b:	74 17                	je     f0126c74 <test_kfreeall+0x39d>
f0126c5d:	83 ec 04             	sub    $0x4,%esp
f0126c60:	68 34 b6 13 f0       	push   $0xf013b634
f0126c65:	68 0c 0a 00 00       	push   $0xa0c
f0126c6a:	68 1a b6 13 f0       	push   $0xf013b61a
f0126c6f:	e8 91 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c74:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c77:	e8 2b 62 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126c7c:	29 c3                	sub    %eax,%ebx
f0126c7e:	89 d8                	mov    %ebx,%eax
f0126c80:	83 f8 01             	cmp    $0x1,%eax
f0126c83:	74 17                	je     f0126c9c <test_kfreeall+0x3c5>
f0126c85:	83 ec 04             	sub    $0x4,%esp
f0126c88:	68 9c b6 13 f0       	push   $0xf013b69c
f0126c8d:	68 0d 0a 00 00       	push   $0xa0d
f0126c92:	68 1a b6 13 f0       	push   $0xf013b61a
f0126c97:	e8 69 95 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126c9c:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126ca3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126ca6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126cac:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126caf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cb6:	eb 0e                	jmp    f0126cc6 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126cbb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cbe:	01 d0                	add    %edx,%eax
f0126cc0:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126cc3:	ff 45 f4             	incl   -0xc(%ebp)
f0126cc6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126ccc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126ccf:	7f e7                	jg     f0126cb8 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126cd1:	e8 d1 61 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126cd6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126cd9:	e8 ea d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cde:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126ce1:	83 ec 0c             	sub    $0xc,%esp
f0126ce4:	68 00 08 00 00       	push   $0x800
f0126ce9:	e8 a1 0e fe ff       	call   f0107b8f <kmalloc>
f0126cee:	83 c4 10             	add    $0x10,%esp
f0126cf1:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126cf7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126cfd:	89 c1                	mov    %eax,%ecx
f0126cff:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126d06:	10 00 00 
f0126d09:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126d0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d14:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126d1a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d25:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126d2b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d31:	29 d0                	sub    %edx,%eax
f0126d33:	89 c3                	mov    %eax,%ebx
f0126d35:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126d3c:	10 00 00 
f0126d3f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126d44:	0f b6 d0             	movzbl %al,%edx
f0126d47:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126d4d:	01 d0                	add    %edx,%eax
f0126d4f:	48                   	dec    %eax
f0126d50:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126d56:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126d5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d61:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126d67:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126d6d:	29 d0                	sub    %edx,%eax
f0126d6f:	01 c3                	add    %eax,%ebx
f0126d71:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126d78:	10 00 00 
f0126d7b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126d80:	0f b6 c0             	movzbl %al,%eax
f0126d83:	c1 e0 04             	shl    $0x4,%eax
f0126d86:	89 c2                	mov    %eax,%edx
f0126d88:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126d8e:	01 d0                	add    %edx,%eax
f0126d90:	48                   	dec    %eax
f0126d91:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126d97:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126d9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126da2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126da8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126dae:	29 d0                	sub    %edx,%eax
f0126db0:	01 d8                	add    %ebx,%eax
f0126db2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126db7:	39 c1                	cmp    %eax,%ecx
f0126db9:	74 17                	je     f0126dd2 <test_kfreeall+0x4fb>
f0126dbb:	83 ec 04             	sub    $0x4,%esp
f0126dbe:	68 00 b7 13 f0       	push   $0xf013b700
f0126dc3:	68 19 0a 00 00       	push   $0xa19
f0126dc8:	68 1a b6 13 f0       	push   $0xf013b61a
f0126dcd:	e8 33 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dd2:	e8 f1 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126dd7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126dda:	74 17                	je     f0126df3 <test_kfreeall+0x51c>
f0126ddc:	83 ec 04             	sub    $0x4,%esp
f0126ddf:	68 34 b6 13 f0       	push   $0xf013b634
f0126de4:	68 1a 0a 00 00       	push   $0xa1a
f0126de9:	68 1a b6 13 f0       	push   $0xf013b61a
f0126dee:	e8 12 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126df3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126df6:	e8 ac 60 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126dfb:	29 c3                	sub    %eax,%ebx
f0126dfd:	89 d8                	mov    %ebx,%eax
f0126dff:	83 f8 01             	cmp    $0x1,%eax
f0126e02:	74 17                	je     f0126e1b <test_kfreeall+0x544>
f0126e04:	83 ec 04             	sub    $0x4,%esp
f0126e07:	68 9c b6 13 f0       	push   $0xf013b69c
f0126e0c:	68 1b 0a 00 00       	push   $0xa1b
f0126e11:	68 1a b6 13 f0       	push   $0xf013b61a
f0126e16:	e8 ea 93 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126e1b:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126e22:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126e25:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126e2b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126e2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e35:	eb 0e                	jmp    f0126e45 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126e37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e3a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e3d:	01 d0                	add    %edx,%eax
f0126e3f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126e42:	ff 45 f4             	incl   -0xc(%ebp)
f0126e45:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126e4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e4e:	7f e7                	jg     f0126e37 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e50:	e8 52 60 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126e55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e58:	e8 6b cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126e60:	83 ec 0c             	sub    $0xc,%esp
f0126e63:	68 00 1c 00 00       	push   $0x1c00
f0126e68:	e8 22 0d fe ff       	call   f0107b8f <kmalloc>
f0126e6d:	83 c4 10             	add    $0x10,%esp
f0126e70:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e76:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126e7c:	89 c1                	mov    %eax,%ecx
f0126e7e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126e85:	10 00 00 
f0126e88:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126e8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e93:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126e99:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126e9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ea4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126eaa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126eb0:	29 d0                	sub    %edx,%eax
f0126eb2:	89 c3                	mov    %eax,%ebx
f0126eb4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126ebb:	10 00 00 
f0126ebe:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126ec3:	0f b6 d0             	movzbl %al,%edx
f0126ec6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126ecc:	01 d0                	add    %edx,%eax
f0126ece:	48                   	dec    %eax
f0126ecf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126ed5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126edb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ee0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126ee6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126eec:	29 d0                	sub    %edx,%eax
f0126eee:	01 c3                	add    %eax,%ebx
f0126ef0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126ef7:	10 00 00 
f0126efa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126eff:	0f b6 c0             	movzbl %al,%eax
f0126f02:	c1 e0 04             	shl    $0x4,%eax
f0126f05:	89 c2                	mov    %eax,%edx
f0126f07:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126f0d:	01 d0                	add    %edx,%eax
f0126f0f:	48                   	dec    %eax
f0126f10:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126f16:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f21:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126f27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f2d:	29 d0                	sub    %edx,%eax
f0126f2f:	01 d8                	add    %ebx,%eax
f0126f31:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126f36:	39 c1                	cmp    %eax,%ecx
f0126f38:	74 17                	je     f0126f51 <test_kfreeall+0x67a>
f0126f3a:	83 ec 04             	sub    $0x4,%esp
f0126f3d:	68 00 b7 13 f0       	push   $0xf013b700
f0126f42:	68 27 0a 00 00       	push   $0xa27
f0126f47:	68 1a b6 13 f0       	push   $0xf013b61a
f0126f4c:	e8 b4 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f51:	e8 72 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f56:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f59:	74 17                	je     f0126f72 <test_kfreeall+0x69b>
f0126f5b:	83 ec 04             	sub    $0x4,%esp
f0126f5e:	68 34 b6 13 f0       	push   $0xf013b634
f0126f63:	68 28 0a 00 00       	push   $0xa28
f0126f68:	68 1a b6 13 f0       	push   $0xf013b61a
f0126f6d:	e8 93 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f72:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f75:	e8 2d 5f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126f7a:	29 c3                	sub    %eax,%ebx
f0126f7c:	89 d8                	mov    %ebx,%eax
f0126f7e:	83 f8 02             	cmp    $0x2,%eax
f0126f81:	74 17                	je     f0126f9a <test_kfreeall+0x6c3>
f0126f83:	83 ec 04             	sub    $0x4,%esp
f0126f86:	68 9c b6 13 f0       	push   $0xf013b69c
f0126f8b:	68 29 0a 00 00       	push   $0xa29
f0126f90:	68 1a b6 13 f0       	push   $0xf013b61a
f0126f95:	e8 6b 92 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126f9a:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126fa1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126fa4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126faa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126fad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126fb4:	eb 0e                	jmp    f0126fc4 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126fb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126fb9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fbc:	01 d0                	add    %edx,%eax
f0126fbe:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126fc1:	ff 45 f4             	incl   -0xc(%ebp)
f0126fc4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126fca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126fcd:	7f e7                	jg     f0126fb6 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126fcf:	e8 d3 5e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0126fd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fd7:	e8 ec cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126fdf:	83 ec 0c             	sub    $0xc,%esp
f0126fe2:	68 00 fc 2f 00       	push   $0x2ffc00
f0126fe7:	e8 a3 0b fe ff       	call   f0107b8f <kmalloc>
f0126fec:	83 c4 10             	add    $0x10,%esp
f0126fef:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ff5:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126ffb:	89 c1                	mov    %eax,%ecx
f0126ffd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127004:	10 00 00 
f0127007:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012700d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127012:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0127018:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012701e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127023:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0127029:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012702f:	29 d0                	sub    %edx,%eax
f0127031:	89 c3                	mov    %eax,%ebx
f0127033:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012703a:	10 00 00 
f012703d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127042:	0f b6 d0             	movzbl %al,%edx
f0127045:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012704b:	01 d0                	add    %edx,%eax
f012704d:	48                   	dec    %eax
f012704e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0127054:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012705a:	ba 00 00 00 00       	mov    $0x0,%edx
f012705f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0127065:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012706b:	29 d0                	sub    %edx,%eax
f012706d:	01 c3                	add    %eax,%ebx
f012706f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0127076:	10 00 00 
f0127079:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012707e:	0f b6 c0             	movzbl %al,%eax
f0127081:	c1 e0 04             	shl    $0x4,%eax
f0127084:	89 c2                	mov    %eax,%edx
f0127086:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012708c:	01 d0                	add    %edx,%eax
f012708e:	48                   	dec    %eax
f012708f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0127095:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012709b:	ba 00 00 00 00       	mov    $0x0,%edx
f01270a0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01270a6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01270ac:	29 d0                	sub    %edx,%eax
f01270ae:	01 d8                	add    %ebx,%eax
f01270b0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01270b5:	39 c1                	cmp    %eax,%ecx
f01270b7:	74 17                	je     f01270d0 <test_kfreeall+0x7f9>
f01270b9:	83 ec 04             	sub    $0x4,%esp
f01270bc:	68 00 b7 13 f0       	push   $0xf013b700
f01270c1:	68 35 0a 00 00       	push   $0xa35
f01270c6:	68 1a b6 13 f0       	push   $0xf013b61a
f01270cb:	e8 35 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270d0:	e8 f3 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270d8:	74 17                	je     f01270f1 <test_kfreeall+0x81a>
f01270da:	83 ec 04             	sub    $0x4,%esp
f01270dd:	68 34 b6 13 f0       	push   $0xf013b634
f01270e2:	68 36 0a 00 00       	push   $0xa36
f01270e7:	68 1a b6 13 f0       	push   $0xf013b61a
f01270ec:	e8 14 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270f1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01270f4:	e8 ae 5d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01270f9:	29 c3                	sub    %eax,%ebx
f01270fb:	89 d8                	mov    %ebx,%eax
f01270fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127102:	74 17                	je     f012711b <test_kfreeall+0x844>
f0127104:	83 ec 04             	sub    $0x4,%esp
f0127107:	68 9c b6 13 f0       	push   $0xf013b69c
f012710c:	68 37 0a 00 00       	push   $0xa37
f0127111:	68 1a b6 13 f0       	push   $0xf013b61a
f0127116:	e8 ea 90 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012711b:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0127122:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127125:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012712b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012712e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127135:	eb 0e                	jmp    f0127145 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127137:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012713a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012713d:	01 d0                	add    %edx,%eax
f012713f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127142:	ff 45 f4             	incl   -0xc(%ebp)
f0127145:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012714b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012714e:	7f e7                	jg     f0127137 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127150:	e8 52 5d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127155:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127158:	e8 6b cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012715d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0127160:	83 ec 0c             	sub    $0xc,%esp
f0127163:	68 00 fc 5f 00       	push   $0x5ffc00
f0127168:	e8 22 0a fe ff       	call   f0107b8f <kmalloc>
f012716d:	83 c4 10             	add    $0x10,%esp
f0127170:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127176:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012717c:	89 c1                	mov    %eax,%ecx
f012717e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0127185:	10 00 00 
f0127188:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012718e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127193:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0127199:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012719f:	ba 00 00 00 00       	mov    $0x0,%edx
f01271a4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01271aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01271b0:	29 d0                	sub    %edx,%eax
f01271b2:	89 c3                	mov    %eax,%ebx
f01271b4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01271bb:	10 00 00 
f01271be:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01271c3:	0f b6 d0             	movzbl %al,%edx
f01271c6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01271cc:	01 d0                	add    %edx,%eax
f01271ce:	48                   	dec    %eax
f01271cf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01271d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01271db:	ba 00 00 00 00       	mov    $0x0,%edx
f01271e0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01271e6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01271ec:	29 d0                	sub    %edx,%eax
f01271ee:	01 c3                	add    %eax,%ebx
f01271f0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01271f7:	10 00 00 
f01271fa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01271ff:	0f b6 c0             	movzbl %al,%eax
f0127202:	c1 e0 04             	shl    $0x4,%eax
f0127205:	89 c2                	mov    %eax,%edx
f0127207:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012720d:	01 d0                	add    %edx,%eax
f012720f:	48                   	dec    %eax
f0127210:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127216:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012721c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127221:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127227:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012722d:	29 d0                	sub    %edx,%eax
f012722f:	01 d8                	add    %ebx,%eax
f0127231:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127236:	39 c1                	cmp    %eax,%ecx
f0127238:	74 17                	je     f0127251 <test_kfreeall+0x97a>
f012723a:	83 ec 04             	sub    $0x4,%esp
f012723d:	68 00 b7 13 f0       	push   $0xf013b700
f0127242:	68 43 0a 00 00       	push   $0xa43
f0127247:	68 1a b6 13 f0       	push   $0xf013b61a
f012724c:	e8 b4 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127251:	e8 72 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127256:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127259:	74 17                	je     f0127272 <test_kfreeall+0x99b>
f012725b:	83 ec 04             	sub    $0x4,%esp
f012725e:	68 34 b6 13 f0       	push   $0xf013b634
f0127263:	68 44 0a 00 00       	push   $0xa44
f0127268:	68 1a b6 13 f0       	push   $0xf013b61a
f012726d:	e8 93 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127272:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127275:	e8 2d 5c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012727a:	29 c3                	sub    %eax,%ebx
f012727c:	89 d8                	mov    %ebx,%eax
f012727e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127283:	74 17                	je     f012729c <test_kfreeall+0x9c5>
f0127285:	83 ec 04             	sub    $0x4,%esp
f0127288:	68 9c b6 13 f0       	push   $0xf013b69c
f012728d:	68 45 0a 00 00       	push   $0xa45
f0127292:	68 1a b6 13 f0       	push   $0xf013b61a
f0127297:	e8 69 8f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012729c:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01272a3:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01272a6:	e8 fc 5b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01272ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272ae:	e8 15 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01272b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01272b6:	83 ec 0c             	sub    $0xc,%esp
f01272b9:	68 00 38 00 00       	push   $0x3800
f01272be:	e8 cc 08 fe ff       	call   f0107b8f <kmalloc>
f01272c3:	83 c4 10             	add    $0x10,%esp
f01272c6:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272cc:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01272d2:	89 c1                	mov    %eax,%ecx
f01272d4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01272db:	10 00 00 
f01272de:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01272e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272e9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01272ef:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01272f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01272fa:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0127300:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127306:	29 d0                	sub    %edx,%eax
f0127308:	89 c3                	mov    %eax,%ebx
f012730a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127311:	10 00 00 
f0127314:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127319:	0f b6 d0             	movzbl %al,%edx
f012731c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127322:	01 d0                	add    %edx,%eax
f0127324:	48                   	dec    %eax
f0127325:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012732b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127331:	ba 00 00 00 00       	mov    $0x0,%edx
f0127336:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012733c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127342:	29 d0                	sub    %edx,%eax
f0127344:	01 c3                	add    %eax,%ebx
f0127346:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012734d:	10 00 00 
f0127350:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127355:	0f b6 c0             	movzbl %al,%eax
f0127358:	c1 e0 04             	shl    $0x4,%eax
f012735b:	89 c2                	mov    %eax,%edx
f012735d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127363:	01 d0                	add    %edx,%eax
f0127365:	48                   	dec    %eax
f0127366:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012736c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127372:	ba 00 00 00 00       	mov    $0x0,%edx
f0127377:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012737d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127383:	29 d0                	sub    %edx,%eax
f0127385:	01 d8                	add    %ebx,%eax
f0127387:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012738c:	39 c1                	cmp    %eax,%ecx
f012738e:	74 17                	je     f01273a7 <test_kfreeall+0xad0>
f0127390:	83 ec 04             	sub    $0x4,%esp
f0127393:	68 00 b7 13 f0       	push   $0xf013b700
f0127398:	68 4c 0a 00 00       	push   $0xa4c
f012739d:	68 1a b6 13 f0       	push   $0xf013b61a
f01273a2:	e8 5e 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273a7:	e8 1c ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273af:	74 17                	je     f01273c8 <test_kfreeall+0xaf1>
f01273b1:	83 ec 04             	sub    $0x4,%esp
f01273b4:	68 34 b6 13 f0       	push   $0xf013b634
f01273b9:	68 4d 0a 00 00       	push   $0xa4d
f01273be:	68 1a b6 13 f0       	push   $0xf013b61a
f01273c3:	e8 3d 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273c8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273cb:	e8 d7 5a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01273d0:	29 c3                	sub    %eax,%ebx
f01273d2:	89 d8                	mov    %ebx,%eax
f01273d4:	83 f8 04             	cmp    $0x4,%eax
f01273d7:	74 17                	je     f01273f0 <test_kfreeall+0xb19>
f01273d9:	83 ec 04             	sub    $0x4,%esp
f01273dc:	68 9c b6 13 f0       	push   $0xf013b69c
f01273e1:	68 4e 0a 00 00       	push   $0xa4e
f01273e6:	68 1a b6 13 f0       	push   $0xf013b61a
f01273eb:	e8 15 8e fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01273f0:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01273f7:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01273fa:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127400:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127403:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012740a:	eb 0e                	jmp    f012741a <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012740c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012740f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127412:	01 d0                	add    %edx,%eax
f0127414:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127417:	ff 45 f4             	incl   -0xc(%ebp)
f012741a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127420:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127423:	7f e7                	jg     f012740c <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127425:	e8 7d 5a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012742a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127430:	e8 93 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127435:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012743b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127441:	83 ec 0c             	sub    $0xc,%esp
f0127444:	50                   	push   %eax
f0127445:	e8 10 08 fe ff       	call   f0107c5a <kfree>
f012744a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012744d:	e8 76 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127452:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127458:	74 17                	je     f0127471 <test_kfreeall+0xb9a>
f012745a:	83 ec 04             	sub    $0x4,%esp
f012745d:	68 34 b6 13 f0       	push   $0xf013b634
f0127462:	68 5d 0a 00 00       	push   $0xa5d
f0127467:	68 1a b6 13 f0       	push   $0xf013b61a
f012746c:	e8 94 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0127471:	e8 31 5a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127476:	89 c2                	mov    %eax,%edx
f0127478:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012747e:	29 c2                	sub    %eax,%edx
f0127480:	89 d0                	mov    %edx,%eax
f0127482:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127487:	74 17                	je     f01274a0 <test_kfreeall+0xbc9>
f0127489:	83 ec 04             	sub    $0x4,%esp
f012748c:	68 a4 bd 13 f0       	push   $0xf013bda4
f0127491:	68 5e 0a 00 00       	push   $0xa5e
f0127496:	68 1a b6 13 f0       	push   $0xf013b61a
f012749b:	e8 65 8d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01274a0:	e8 02 5a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01274a5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274ab:	e8 18 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274b0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01274b6:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01274bc:	83 ec 0c             	sub    $0xc,%esp
f01274bf:	50                   	push   %eax
f01274c0:	e8 95 07 fe ff       	call   f0107c5a <kfree>
f01274c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274c8:	e8 fb c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274cd:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01274d3:	74 17                	je     f01274ec <test_kfreeall+0xc15>
f01274d5:	83 ec 04             	sub    $0x4,%esp
f01274d8:	68 34 b6 13 f0       	push   $0xf013b634
f01274dd:	68 64 0a 00 00       	push   $0xa64
f01274e2:	68 1a b6 13 f0       	push   $0xf013b61a
f01274e7:	e8 19 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01274ec:	e8 b6 59 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01274f1:	89 c2                	mov    %eax,%edx
f01274f3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01274f9:	29 c2                	sub    %eax,%edx
f01274fb:	89 d0                	mov    %edx,%eax
f01274fd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127502:	74 17                	je     f012751b <test_kfreeall+0xc44>
f0127504:	83 ec 04             	sub    $0x4,%esp
f0127507:	68 a4 bd 13 f0       	push   $0xf013bda4
f012750c:	68 65 0a 00 00       	push   $0xa65
f0127511:	68 1a b6 13 f0       	push   $0xf013b61a
f0127516:	e8 ea 8c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012751b:	e8 87 59 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127520:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127526:	e8 9d c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012752b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127531:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127537:	83 ec 0c             	sub    $0xc,%esp
f012753a:	50                   	push   %eax
f012753b:	e8 1a 07 fe ff       	call   f0107c5a <kfree>
f0127540:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127543:	e8 80 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127548:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012754e:	74 17                	je     f0127567 <test_kfreeall+0xc90>
f0127550:	83 ec 04             	sub    $0x4,%esp
f0127553:	68 34 b6 13 f0       	push   $0xf013b634
f0127558:	68 6b 0a 00 00       	push   $0xa6b
f012755d:	68 1a b6 13 f0       	push   $0xf013b61a
f0127562:	e8 9e 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127567:	e8 3b 59 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012756c:	89 c2                	mov    %eax,%edx
f012756e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127574:	29 c2                	sub    %eax,%edx
f0127576:	89 d0                	mov    %edx,%eax
f0127578:	3d 00 06 00 00       	cmp    $0x600,%eax
f012757d:	74 17                	je     f0127596 <test_kfreeall+0xcbf>
f012757f:	83 ec 04             	sub    $0x4,%esp
f0127582:	68 a4 bd 13 f0       	push   $0xf013bda4
f0127587:	68 6c 0a 00 00       	push   $0xa6c
f012758c:	68 1a b6 13 f0       	push   $0xf013b61a
f0127591:	e8 6f 8c fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0127596:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012759c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012759f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275a6:	eb 1e                	jmp    f01275c6 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01275a8:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01275ae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01275b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275b4:	01 c8                	add    %ecx,%eax
f01275b6:	8a 00                	mov    (%eax),%al
f01275b8:	0f be c0             	movsbl %al,%eax
f01275bb:	01 d0                	add    %edx,%eax
f01275bd:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01275c3:	ff 45 f4             	incl   -0xc(%ebp)
f01275c6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01275cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275cf:	7f d7                	jg     f01275a8 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01275d1:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01275d7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01275dd:	01 c0                	add    %eax,%eax
f01275df:	39 c2                	cmp    %eax,%edx
f01275e1:	74 17                	je     f01275fa <test_kfreeall+0xd23>
f01275e3:	83 ec 04             	sub    $0x4,%esp
f01275e6:	68 00 be 13 f0       	push   $0xf013be00
f01275eb:	68 78 0a 00 00       	push   $0xa78
f01275f0:	68 1a b6 13 f0       	push   $0xf013b61a
f01275f5:	e8 0b 8c fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01275fa:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127600:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127603:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012760a:	eb 1e                	jmp    f012762a <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f012760c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127612:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127615:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127618:	01 c8                	add    %ecx,%eax
f012761a:	8a 00                	mov    (%eax),%al
f012761c:	0f be c0             	movsbl %al,%eax
f012761f:	01 d0                	add    %edx,%eax
f0127621:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127627:	ff 45 f4             	incl   -0xc(%ebp)
f012762a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127630:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127633:	7f d7                	jg     f012760c <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127635:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012763b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127641:	89 c1                	mov    %eax,%ecx
f0127643:	01 c9                	add    %ecx,%ecx
f0127645:	01 c8                	add    %ecx,%eax
f0127647:	39 c2                	cmp    %eax,%edx
f0127649:	74 17                	je     f0127662 <test_kfreeall+0xd8b>
f012764b:	83 ec 04             	sub    $0x4,%esp
f012764e:	68 00 be 13 f0       	push   $0xf013be00
f0127653:	68 80 0a 00 00       	push   $0xa80
f0127658:	68 1a b6 13 f0       	push   $0xf013b61a
f012765d:	e8 a3 8b fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127662:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127668:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012766b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127672:	eb 1e                	jmp    f0127692 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127674:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012767a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012767d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127680:	01 c8                	add    %ecx,%eax
f0127682:	8a 00                	mov    (%eax),%al
f0127684:	0f be c0             	movsbl %al,%eax
f0127687:	01 d0                	add    %edx,%eax
f0127689:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012768f:	ff 45 f4             	incl   -0xc(%ebp)
f0127692:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127698:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012769b:	7f d7                	jg     f0127674 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012769d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01276a3:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01276a9:	c1 e2 02             	shl    $0x2,%edx
f01276ac:	39 d0                	cmp    %edx,%eax
f01276ae:	74 17                	je     f01276c7 <test_kfreeall+0xdf0>
f01276b0:	83 ec 04             	sub    $0x4,%esp
f01276b3:	68 00 be 13 f0       	push   $0xf013be00
f01276b8:	68 88 0a 00 00       	push   $0xa88
f01276bd:	68 1a b6 13 f0       	push   $0xf013b61a
f01276c2:	e8 3e 8b fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01276c7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01276cd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01276d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276d7:	eb 1e                	jmp    f01276f7 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01276d9:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01276df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01276e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01276e5:	01 c8                	add    %ecx,%eax
f01276e7:	8a 00                	mov    (%eax),%al
f01276e9:	0f be c0             	movsbl %al,%eax
f01276ec:	01 d0                	add    %edx,%eax
f01276ee:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01276f4:	ff 45 f4             	incl   -0xc(%ebp)
f01276f7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01276fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127700:	7f d7                	jg     f01276d9 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127702:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127708:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012770e:	89 d0                	mov    %edx,%eax
f0127710:	c1 e0 02             	shl    $0x2,%eax
f0127713:	01 d0                	add    %edx,%eax
f0127715:	39 c1                	cmp    %eax,%ecx
f0127717:	74 17                	je     f0127730 <test_kfreeall+0xe59>
f0127719:	83 ec 04             	sub    $0x4,%esp
f012771c:	68 00 be 13 f0       	push   $0xf013be00
f0127721:	68 90 0a 00 00       	push   $0xa90
f0127726:	68 1a b6 13 f0       	push   $0xf013b61a
f012772b:	e8 d5 8a fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127730:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127736:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127739:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127740:	eb 1e                	jmp    f0127760 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127742:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127748:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012774b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012774e:	01 c8                	add    %ecx,%eax
f0127750:	8a 00                	mov    (%eax),%al
f0127752:	0f be c0             	movsbl %al,%eax
f0127755:	01 d0                	add    %edx,%eax
f0127757:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012775d:	ff 45 f4             	incl   -0xc(%ebp)
f0127760:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127766:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127769:	7f d7                	jg     f0127742 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012776b:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127771:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127777:	89 d0                	mov    %edx,%eax
f0127779:	01 c0                	add    %eax,%eax
f012777b:	01 d0                	add    %edx,%eax
f012777d:	01 c0                	add    %eax,%eax
f012777f:	01 d0                	add    %edx,%eax
f0127781:	39 c1                	cmp    %eax,%ecx
f0127783:	74 17                	je     f012779c <test_kfreeall+0xec5>
f0127785:	83 ec 04             	sub    $0x4,%esp
f0127788:	68 00 be 13 f0       	push   $0xf013be00
f012778d:	68 98 0a 00 00       	push   $0xa98
f0127792:	68 1a b6 13 f0       	push   $0xf013b61a
f0127797:	e8 69 8a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012779c:	e8 06 57 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01277a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277a4:	e8 1f c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01277ac:	83 ec 0c             	sub    $0xc,%esp
f01277af:	68 00 50 00 00       	push   $0x5000
f01277b4:	e8 d6 03 fe ff       	call   f0107b8f <kmalloc>
f01277b9:	83 c4 10             	add    $0x10,%esp
f01277bc:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277c2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01277c8:	89 c1                	mov    %eax,%ecx
f01277ca:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01277d1:	10 00 00 
f01277d4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01277da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277df:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01277e5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01277eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01277f0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01277f6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01277fc:	29 d0                	sub    %edx,%eax
f01277fe:	89 c3                	mov    %eax,%ebx
f0127800:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127807:	10 00 00 
f012780a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012780f:	0f b6 d0             	movzbl %al,%edx
f0127812:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127818:	01 d0                	add    %edx,%eax
f012781a:	48                   	dec    %eax
f012781b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127821:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127827:	ba 00 00 00 00       	mov    $0x0,%edx
f012782c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127832:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127838:	29 d0                	sub    %edx,%eax
f012783a:	01 c3                	add    %eax,%ebx
f012783c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127843:	10 00 00 
f0127846:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012784b:	0f b6 c0             	movzbl %al,%eax
f012784e:	c1 e0 04             	shl    $0x4,%eax
f0127851:	89 c2                	mov    %eax,%edx
f0127853:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127859:	01 d0                	add    %edx,%eax
f012785b:	48                   	dec    %eax
f012785c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127862:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127868:	ba 00 00 00 00       	mov    $0x0,%edx
f012786d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127873:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127879:	29 d0                	sub    %edx,%eax
f012787b:	01 d8                	add    %ebx,%eax
f012787d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127882:	39 c1                	cmp    %eax,%ecx
f0127884:	74 17                	je     f012789d <test_kfreeall+0xfc6>
f0127886:	83 ec 04             	sub    $0x4,%esp
f0127889:	68 00 b7 13 f0       	push   $0xf013b700
f012788e:	68 a1 0a 00 00       	push   $0xaa1
f0127893:	68 1a b6 13 f0       	push   $0xf013b61a
f0127898:	e8 68 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012789d:	e8 26 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01278a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01278a5:	74 17                	je     f01278be <test_kfreeall+0xfe7>
f01278a7:	83 ec 04             	sub    $0x4,%esp
f01278aa:	68 34 b6 13 f0       	push   $0xf013b634
f01278af:	68 a2 0a 00 00       	push   $0xaa2
f01278b4:	68 1a b6 13 f0       	push   $0xf013b61a
f01278b9:	e8 47 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01278c1:	e8 e1 55 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01278c6:	29 c3                	sub    %eax,%ebx
f01278c8:	89 d8                	mov    %ebx,%eax
f01278ca:	83 f8 05             	cmp    $0x5,%eax
f01278cd:	74 17                	je     f01278e6 <test_kfreeall+0x100f>
f01278cf:	83 ec 04             	sub    $0x4,%esp
f01278d2:	68 9c b6 13 f0       	push   $0xf013b69c
f01278d7:	68 a3 0a 00 00       	push   $0xaa3
f01278dc:	68 1a b6 13 f0       	push   $0xf013b61a
f01278e1:	e8 1f 89 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01278e6:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01278ed:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01278f0:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01278f6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01278f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127900:	eb 0e                	jmp    f0127910 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127902:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127905:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127908:	01 d0                	add    %edx,%eax
f012790a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012790d:	ff 45 f4             	incl   -0xc(%ebp)
f0127910:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127916:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127919:	7f e7                	jg     f0127902 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012791b:	e8 87 55 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127920:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127923:	e8 a0 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127928:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012792b:	83 ec 0c             	sub    $0xc,%esp
f012792e:	68 00 00 10 00       	push   $0x100000
f0127933:	e8 57 02 fe ff       	call   f0107b8f <kmalloc>
f0127938:	83 c4 10             	add    $0x10,%esp
f012793b:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127941:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127947:	89 c1                	mov    %eax,%ecx
f0127949:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127950:	10 00 00 
f0127953:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127959:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012795e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127964:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012796a:	ba 00 00 00 00       	mov    $0x0,%edx
f012796f:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127975:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012797b:	29 d0                	sub    %edx,%eax
f012797d:	89 c3                	mov    %eax,%ebx
f012797f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127986:	10 00 00 
f0127989:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012798e:	0f b6 d0             	movzbl %al,%edx
f0127991:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127997:	01 d0                	add    %edx,%eax
f0127999:	48                   	dec    %eax
f012799a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01279a0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01279a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01279ab:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01279b1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01279b7:	29 d0                	sub    %edx,%eax
f01279b9:	01 c3                	add    %eax,%ebx
f01279bb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01279c2:	10 00 00 
f01279c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01279ca:	0f b6 c0             	movzbl %al,%eax
f01279cd:	c1 e0 04             	shl    $0x4,%eax
f01279d0:	89 c2                	mov    %eax,%edx
f01279d2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01279d8:	01 d0                	add    %edx,%eax
f01279da:	48                   	dec    %eax
f01279db:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01279e1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01279e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01279ec:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01279f2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01279f8:	29 d0                	sub    %edx,%eax
f01279fa:	01 d8                	add    %ebx,%eax
f01279fc:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127a01:	39 c1                	cmp    %eax,%ecx
f0127a03:	74 17                	je     f0127a1c <test_kfreeall+0x1145>
f0127a05:	83 ec 04             	sub    $0x4,%esp
f0127a08:	68 00 b7 13 f0       	push   $0xf013b700
f0127a0d:	68 af 0a 00 00       	push   $0xaaf
f0127a12:	68 1a b6 13 f0       	push   $0xf013b61a
f0127a17:	e8 e9 87 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a1c:	e8 a7 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a24:	74 17                	je     f0127a3d <test_kfreeall+0x1166>
f0127a26:	83 ec 04             	sub    $0x4,%esp
f0127a29:	68 34 b6 13 f0       	push   $0xf013b634
f0127a2e:	68 b0 0a 00 00       	push   $0xab0
f0127a33:	68 1a b6 13 f0       	push   $0xf013b61a
f0127a38:	e8 c8 87 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a3d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127a40:	e8 62 54 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127a45:	29 c3                	sub    %eax,%ebx
f0127a47:	89 d8                	mov    %ebx,%eax
f0127a49:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127a4e:	74 17                	je     f0127a67 <test_kfreeall+0x1190>
f0127a50:	83 ec 04             	sub    $0x4,%esp
f0127a53:	68 9c b6 13 f0       	push   $0xf013b69c
f0127a58:	68 b1 0a 00 00       	push   $0xab1
f0127a5d:	68 1a b6 13 f0       	push   $0xf013b61a
f0127a62:	e8 9e 87 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127a67:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127a6e:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127a71:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127a77:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127a7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a81:	eb 0e                	jmp    f0127a91 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127a86:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a89:	01 d0                	add    %edx,%eax
f0127a8b:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127a8e:	ff 45 f4             	incl   -0xc(%ebp)
f0127a91:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127a97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a9a:	7f e7                	jg     f0127a83 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a9c:	e8 06 54 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127aa1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127aa4:	e8 1f c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127aa9:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127aac:	e8 47 03 fe ff       	call   f0107df8 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ab1:	e8 12 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ab6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ab9:	74 17                	je     f0127ad2 <test_kfreeall+0x11fb>
f0127abb:	83 ec 04             	sub    $0x4,%esp
f0127abe:	68 34 b6 13 f0       	push   $0xf013b634
f0127ac3:	68 c1 0a 00 00       	push   $0xac1
f0127ac8:	68 1a b6 13 f0       	push   $0xf013b61a
f0127acd:	e8 33 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127ad2:	e8 d0 53 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127ad7:	89 c2                	mov    %eax,%edx
f0127ad9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127adc:	89 d1                	mov    %edx,%ecx
f0127ade:	29 c1                	sub    %eax,%ecx
f0127ae0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127ae7:	10 00 00 
f0127aea:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127af0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127af5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127afb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b01:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b06:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127b0c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b12:	29 d0                	sub    %edx,%eax
f0127b14:	89 c3                	mov    %eax,%ebx
f0127b16:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127b1d:	10 00 00 
f0127b20:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127b25:	0f b6 d0             	movzbl %al,%edx
f0127b28:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127b2e:	01 d0                	add    %edx,%eax
f0127b30:	48                   	dec    %eax
f0127b31:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127b37:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127b3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b42:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127b48:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127b4e:	29 d0                	sub    %edx,%eax
f0127b50:	01 c3                	add    %eax,%ebx
f0127b52:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127b59:	10 00 00 
f0127b5c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127b61:	0f b6 c0             	movzbl %al,%eax
f0127b64:	c1 e0 04             	shl    $0x4,%eax
f0127b67:	89 c2                	mov    %eax,%edx
f0127b69:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127b6f:	01 d0                	add    %edx,%eax
f0127b71:	48                   	dec    %eax
f0127b72:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127b78:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b83:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127b89:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b8f:	29 d0                	sub    %edx,%eax
f0127b91:	01 d8                	add    %ebx,%eax
f0127b93:	05 00 40 00 00       	add    $0x4000,%eax
f0127b98:	c1 e8 0c             	shr    $0xc,%eax
f0127b9b:	05 0d 04 00 00       	add    $0x40d,%eax
f0127ba0:	39 c1                	cmp    %eax,%ecx
f0127ba2:	74 17                	je     f0127bbb <test_kfreeall+0x12e4>
f0127ba4:	83 ec 04             	sub    $0x4,%esp
f0127ba7:	68 a4 bd 13 f0       	push   $0xf013bda4
f0127bac:	68 c2 0a 00 00       	push   $0xac2
f0127bb1:	68 1a b6 13 f0       	push   $0xf013b61a
f0127bb6:	e8 4a 86 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127bbb:	83 ec 0c             	sub    $0xc,%esp
f0127bbe:	6a 03                	push   $0x3
f0127bc0:	e8 82 57 fe ff       	call   f010d347 <sys_bypassPageFault>
f0127bc5:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127bcf:	e9 82 00 00 00       	jmp    f0127c56 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127bd7:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127bde:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127be1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127be4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127be7:	e8 49 57 fe ff       	call   f010d335 <sys_rcr2>
f0127bec:	89 c2                	mov    %eax,%edx
f0127bee:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127bf1:	39 c2                	cmp    %eax,%edx
f0127bf3:	74 17                	je     f0127c0c <test_kfreeall+0x1335>
f0127bf5:	83 ec 04             	sub    $0x4,%esp
f0127bf8:	68 80 be 13 f0       	push   $0xf013be80
f0127bfd:	68 d0 0a 00 00       	push   $0xad0
f0127c02:	68 1a b6 13 f0       	push   $0xf013b61a
f0127c07:	e8 f9 85 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c0f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c16:	89 c2                	mov    %eax,%edx
f0127c18:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c1b:	01 d0                	add    %edx,%eax
f0127c1d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127c20:	e8 10 57 fe ff       	call   f010d335 <sys_rcr2>
f0127c25:	89 c2                	mov    %eax,%edx
f0127c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c2a:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c31:	89 c1                	mov    %eax,%ecx
f0127c33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c36:	01 c8                	add    %ecx,%eax
f0127c38:	39 c2                	cmp    %eax,%edx
f0127c3a:	74 17                	je     f0127c53 <test_kfreeall+0x137c>
f0127c3c:	83 ec 04             	sub    $0x4,%esp
f0127c3f:	68 80 be 13 f0       	push   $0xf013be80
f0127c44:	68 d2 0a 00 00       	push   $0xad2
f0127c49:	68 1a b6 13 f0       	push   $0xf013b61a
f0127c4e:	e8 b2 85 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127c53:	ff 45 f4             	incl   -0xc(%ebp)
f0127c56:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127c5a:	0f 8e 74 ff ff ff    	jle    f0127bd4 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127c60:	83 ec 0c             	sub    $0xc,%esp
f0127c63:	6a 00                	push   $0x0
f0127c65:	e8 dd 56 fe ff       	call   f010d347 <sys_bypassPageFault>
f0127c6a:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c6d:	e8 35 52 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127c72:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c75:	e8 4e c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127c7d:	83 ec 0c             	sub    $0xc,%esp
f0127c80:	68 00 00 40 00       	push   $0x400000
f0127c85:	e8 05 ff fd ff       	call   f0107b8f <kmalloc>
f0127c8a:	83 c4 10             	add    $0x10,%esp
f0127c8d:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127c93:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127c99:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127c9e:	74 17                	je     f0127cb7 <test_kfreeall+0x13e0>
f0127ca0:	83 ec 04             	sub    $0x4,%esp
f0127ca3:	68 24 c3 13 f0       	push   $0xf013c324
f0127ca8:	68 de 0a 00 00       	push   $0xade
f0127cad:	68 1a b6 13 f0       	push   $0xf013b61a
f0127cb2:	e8 4e 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cb7:	e8 0c c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127cbc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127cbf:	74 17                	je     f0127cd8 <test_kfreeall+0x1401>
f0127cc1:	83 ec 04             	sub    $0x4,%esp
f0127cc4:	68 34 b6 13 f0       	push   $0xf013b634
f0127cc9:	68 df 0a 00 00       	push   $0xadf
f0127cce:	68 1a b6 13 f0       	push   $0xf013b61a
f0127cd3:	e8 2d 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cd8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127cdb:	e8 c7 51 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127ce0:	29 c3                	sub    %eax,%ebx
f0127ce2:	89 d8                	mov    %ebx,%eax
f0127ce4:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127ce9:	74 17                	je     f0127d02 <test_kfreeall+0x142b>
f0127ceb:	83 ec 04             	sub    $0x4,%esp
f0127cee:	68 9c b6 13 f0       	push   $0xf013b69c
f0127cf3:	68 e0 0a 00 00       	push   $0xae0
f0127cf8:	68 1a b6 13 f0       	push   $0xf013b61a
f0127cfd:	e8 03 85 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d02:	e8 a0 51 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127d07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d0a:	e8 b9 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127d12:	83 ec 0c             	sub    $0xc,%esp
f0127d15:	68 00 30 00 00       	push   $0x3000
f0127d1a:	e8 70 fe fd ff       	call   f0107b8f <kmalloc>
f0127d1f:	83 c4 10             	add    $0x10,%esp
f0127d22:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127d28:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127d2e:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127d33:	74 17                	je     f0127d4c <test_kfreeall+0x1475>
f0127d35:	83 ec 04             	sub    $0x4,%esp
f0127d38:	68 24 c3 13 f0       	push   $0xf013c324
f0127d3d:	68 e6 0a 00 00       	push   $0xae6
f0127d42:	68 1a b6 13 f0       	push   $0xf013b61a
f0127d47:	e8 b9 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d4c:	e8 77 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d51:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d54:	74 17                	je     f0127d6d <test_kfreeall+0x1496>
f0127d56:	83 ec 04             	sub    $0x4,%esp
f0127d59:	68 34 b6 13 f0       	push   $0xf013b634
f0127d5e:	68 e7 0a 00 00       	push   $0xae7
f0127d63:	68 1a b6 13 f0       	push   $0xf013b61a
f0127d68:	e8 98 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d6d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d70:	e8 32 51 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127d75:	29 c3                	sub    %eax,%ebx
f0127d77:	89 d8                	mov    %ebx,%eax
f0127d79:	83 f8 03             	cmp    $0x3,%eax
f0127d7c:	74 17                	je     f0127d95 <test_kfreeall+0x14be>
f0127d7e:	83 ec 04             	sub    $0x4,%esp
f0127d81:	68 9c b6 13 f0       	push   $0xf013b69c
f0127d86:	68 e8 0a 00 00       	push   $0xae8
f0127d8b:	68 1a b6 13 f0       	push   $0xf013b61a
f0127d90:	e8 70 84 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d95:	e8 0d 51 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127d9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d9d:	e8 26 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127da2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127da5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127dab:	83 ec 0c             	sub    $0xc,%esp
f0127dae:	50                   	push   %eax
f0127daf:	e8 a6 fe fd ff       	call   f0107c5a <kfree>
f0127db4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127db7:	e8 0c c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dbc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127dbf:	74 17                	je     f0127dd8 <test_kfreeall+0x1501>
f0127dc1:	83 ec 04             	sub    $0x4,%esp
f0127dc4:	68 34 b6 13 f0       	push   $0xf013b634
f0127dc9:	68 f2 0a 00 00       	push   $0xaf2
f0127dce:	68 1a b6 13 f0       	push   $0xf013b61a
f0127dd3:	e8 2d 84 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127dd8:	e8 ca 50 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127ddd:	89 c2                	mov    %eax,%edx
f0127ddf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127de2:	29 c2                	sub    %eax,%edx
f0127de4:	89 d0                	mov    %edx,%eax
f0127de6:	83 f8 03             	cmp    $0x3,%eax
f0127de9:	74 17                	je     f0127e02 <test_kfreeall+0x152b>
f0127deb:	83 ec 04             	sub    $0x4,%esp
f0127dee:	68 cc be 13 f0       	push   $0xf013becc
f0127df3:	68 f3 0a 00 00       	push   $0xaf3
f0127df8:	68 1a b6 13 f0       	push   $0xf013b61a
f0127dfd:	e8 03 84 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e02:	e8 a0 50 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127e07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e0a:	e8 b9 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127e12:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127e18:	83 ec 0c             	sub    $0xc,%esp
f0127e1b:	50                   	push   %eax
f0127e1c:	e8 39 fe fd ff       	call   f0107c5a <kfree>
f0127e21:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e24:	e8 9f bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e2c:	74 17                	je     f0127e45 <test_kfreeall+0x156e>
f0127e2e:	83 ec 04             	sub    $0x4,%esp
f0127e31:	68 34 b6 13 f0       	push   $0xf013b634
f0127e36:	68 fc 0a 00 00       	push   $0xafc
f0127e3b:	68 1a b6 13 f0       	push   $0xf013b61a
f0127e40:	e8 c0 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127e45:	e8 5d 50 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127e4a:	89 c2                	mov    %eax,%edx
f0127e4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e4f:	39 c2                	cmp    %eax,%edx
f0127e51:	74 17                	je     f0127e6a <test_kfreeall+0x1593>
f0127e53:	83 ec 04             	sub    $0x4,%esp
f0127e56:	68 cc be 13 f0       	push   $0xf013becc
f0127e5b:	68 fd 0a 00 00       	push   $0xafd
f0127e60:	68 1a b6 13 f0       	push   $0xf013b61a
f0127e65:	e8 9b 83 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e6a:	e8 38 50 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127e6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e72:	e8 51 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127e7a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127e80:	83 ec 0c             	sub    $0xc,%esp
f0127e83:	50                   	push   %eax
f0127e84:	e8 d1 fd fd ff       	call   f0107c5a <kfree>
f0127e89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e8c:	e8 37 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e91:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e94:	74 17                	je     f0127ead <test_kfreeall+0x15d6>
f0127e96:	83 ec 04             	sub    $0x4,%esp
f0127e99:	68 34 b6 13 f0       	push   $0xf013b634
f0127e9e:	68 03 0b 00 00       	push   $0xb03
f0127ea3:	68 1a b6 13 f0       	push   $0xf013b61a
f0127ea8:	e8 58 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127ead:	e8 f5 4f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127eb2:	89 c2                	mov    %eax,%edx
f0127eb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127eb7:	39 c2                	cmp    %eax,%edx
f0127eb9:	74 17                	je     f0127ed2 <test_kfreeall+0x15fb>
f0127ebb:	83 ec 04             	sub    $0x4,%esp
f0127ebe:	68 cc be 13 f0       	push   $0xf013becc
f0127ec3:	68 04 0b 00 00       	push   $0xb04
f0127ec8:	68 1a b6 13 f0       	push   $0xf013b61a
f0127ecd:	e8 33 83 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ed2:	e8 d0 4f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127ed7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127eda:	e8 e9 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127edf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127ee2:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ee8:	83 ec 0c             	sub    $0xc,%esp
f0127eeb:	50                   	push   %eax
f0127eec:	e8 69 fd fd ff       	call   f0107c5a <kfree>
f0127ef1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ef4:	e8 cf be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ef9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127efc:	74 17                	je     f0127f15 <test_kfreeall+0x163e>
f0127efe:	83 ec 04             	sub    $0x4,%esp
f0127f01:	68 34 b6 13 f0       	push   $0xf013b634
f0127f06:	68 0a 0b 00 00       	push   $0xb0a
f0127f0b:	68 1a b6 13 f0       	push   $0xf013b61a
f0127f10:	e8 f0 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127f15:	e8 8d 4f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127f1a:	89 c2                	mov    %eax,%edx
f0127f1c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f1f:	39 c2                	cmp    %eax,%edx
f0127f21:	74 17                	je     f0127f3a <test_kfreeall+0x1663>
f0127f23:	83 ec 04             	sub    $0x4,%esp
f0127f26:	68 cc be 13 f0       	push   $0xf013becc
f0127f2b:	68 0b 0b 00 00       	push   $0xb0b
f0127f30:	68 1a b6 13 f0       	push   $0xf013b61a
f0127f35:	e8 cb 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127f3a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127f41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127f48:	eb 48                	jmp    f0127f92 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127f4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127f4d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0127f52:	83 ec 04             	sub    $0x4,%esp
f0127f55:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127f5b:	51                   	push   %ecx
f0127f5c:	52                   	push   %edx
f0127f5d:	50                   	push   %eax
f0127f5e:	e8 4e eb fd ff       	call   f0106ab1 <get_page_table>
f0127f63:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127f66:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127f6c:	85 c0                	test   %eax,%eax
f0127f6e:	75 17                	jne    f0127f87 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127f70:	83 ec 04             	sub    $0x4,%esp
f0127f73:	68 1c bf 13 f0       	push   $0xf013bf1c
f0127f78:	68 18 0b 00 00       	push   $0xb18
f0127f7d:	68 1a b6 13 f0       	push   $0xf013b61a
f0127f82:	e8 7e 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127f87:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127f8e:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127f92:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127f96:	78 b2                	js     f0127f4a <test_kfreeall+0x1673>
f0127f98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127f9c:	7f 09                	jg     f0127fa7 <test_kfreeall+0x16d0>
f0127f9e:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127fa5:	76 a3                	jbe    f0127f4a <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127fa7:	83 ec 0c             	sub    $0xc,%esp
f0127faa:	68 78 c3 13 f0       	push   $0xf013c378
f0127faf:	e8 5a 8d fd ff       	call   f0100d0e <cprintf>
f0127fb4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127fb7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127fbc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127fbf:	5b                   	pop    %ebx
f0127fc0:	5f                   	pop    %edi
f0127fc1:	5d                   	pop    %ebp
f0127fc2:	c3                   	ret    

f0127fc3 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127fc3:	55                   	push   %ebp
f0127fc4:	89 e5                	mov    %esp,%ebp
f0127fc6:	57                   	push   %edi
f0127fc7:	53                   	push   %ebx
f0127fc8:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127fce:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127fd2:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127fd6:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127fdc:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127fe2:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127fe9:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127ff0:	e8 b2 4e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0127ff5:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127ff8:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127ffe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128003:	b8 00 00 00 00       	mov    $0x0,%eax
f0128008:	89 d7                	mov    %edx,%edi
f012800a:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012800c:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0128012:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128017:	b8 00 00 00 00       	mov    $0x0,%eax
f012801c:	89 d7                	mov    %edx,%edi
f012801e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128020:	e8 82 4e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128025:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128028:	e8 9b bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012802d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128030:	83 ec 0c             	sub    $0xc,%esp
f0128033:	68 00 fc 1f 00       	push   $0x1ffc00
f0128038:	e8 52 fb fd ff       	call   f0107b8f <kmalloc>
f012803d:	83 c4 10             	add    $0x10,%esp
f0128040:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128046:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012804c:	89 c1                	mov    %eax,%ecx
f012804e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128055:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128058:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012805d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128060:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128063:	ba 00 00 00 00       	mov    $0x0,%edx
f0128068:	f7 75 d4             	divl   -0x2c(%ebp)
f012806b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012806e:	29 d0                	sub    %edx,%eax
f0128070:	89 c3                	mov    %eax,%ebx
f0128072:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128079:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012807e:	0f b6 d0             	movzbl %al,%edx
f0128081:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128084:	01 d0                	add    %edx,%eax
f0128086:	48                   	dec    %eax
f0128087:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012808a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012808d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128092:	f7 75 cc             	divl   -0x34(%ebp)
f0128095:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128098:	29 d0                	sub    %edx,%eax
f012809a:	01 c3                	add    %eax,%ebx
f012809c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01280a3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01280a8:	0f b6 c0             	movzbl %al,%eax
f01280ab:	c1 e0 04             	shl    $0x4,%eax
f01280ae:	89 c2                	mov    %eax,%edx
f01280b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01280b3:	01 d0                	add    %edx,%eax
f01280b5:	48                   	dec    %eax
f01280b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01280b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01280bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01280c1:	f7 75 c4             	divl   -0x3c(%ebp)
f01280c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01280c7:	29 d0                	sub    %edx,%eax
f01280c9:	01 d8                	add    %ebx,%eax
f01280cb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01280d0:	39 c1                	cmp    %eax,%ecx
f01280d2:	74 17                	je     f01280eb <test_kexpand+0x128>
f01280d4:	83 ec 04             	sub    $0x4,%esp
f01280d7:	68 00 b7 13 f0       	push   $0xf013b700
f01280dc:	68 43 0b 00 00       	push   $0xb43
f01280e1:	68 1a b6 13 f0       	push   $0xf013b61a
f01280e6:	e8 1a 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280eb:	e8 d8 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280f3:	74 17                	je     f012810c <test_kexpand+0x149>
f01280f5:	83 ec 04             	sub    $0x4,%esp
f01280f8:	68 34 b6 13 f0       	push   $0xf013b634
f01280fd:	68 44 0b 00 00       	push   $0xb44
f0128102:	68 1a b6 13 f0       	push   $0xf013b61a
f0128107:	e8 f9 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012810c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012810f:	e8 93 4d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128114:	29 c3                	sub    %eax,%ebx
f0128116:	89 d8                	mov    %ebx,%eax
f0128118:	3d 00 02 00 00       	cmp    $0x200,%eax
f012811d:	74 17                	je     f0128136 <test_kexpand+0x173>
f012811f:	83 ec 04             	sub    $0x4,%esp
f0128122:	68 9c b6 13 f0       	push   $0xf013b69c
f0128127:	68 45 0b 00 00       	push   $0xb45
f012812c:	68 1a b6 13 f0       	push   $0xf013b61a
f0128131:	e8 cf 80 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128136:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012813d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128140:	e8 62 4d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128145:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128148:	e8 7b bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012814d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128150:	83 ec 0c             	sub    $0xc,%esp
f0128153:	68 00 fc 1f 00       	push   $0x1ffc00
f0128158:	e8 32 fa fd ff       	call   f0107b8f <kmalloc>
f012815d:	83 c4 10             	add    $0x10,%esp
f0128160:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128166:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012816c:	89 c1                	mov    %eax,%ecx
f012816e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128175:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128178:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012817d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128180:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128183:	ba 00 00 00 00       	mov    $0x0,%edx
f0128188:	f7 75 bc             	divl   -0x44(%ebp)
f012818b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012818e:	29 d0                	sub    %edx,%eax
f0128190:	89 c3                	mov    %eax,%ebx
f0128192:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128199:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012819e:	0f b6 d0             	movzbl %al,%edx
f01281a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01281a4:	01 d0                	add    %edx,%eax
f01281a6:	48                   	dec    %eax
f01281a7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01281aa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01281ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01281b2:	f7 75 b4             	divl   -0x4c(%ebp)
f01281b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01281b8:	29 d0                	sub    %edx,%eax
f01281ba:	01 c3                	add    %eax,%ebx
f01281bc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01281c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01281c8:	0f b6 c0             	movzbl %al,%eax
f01281cb:	c1 e0 04             	shl    $0x4,%eax
f01281ce:	89 c2                	mov    %eax,%edx
f01281d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01281d3:	01 d0                	add    %edx,%eax
f01281d5:	48                   	dec    %eax
f01281d6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01281d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01281e1:	f7 75 ac             	divl   -0x54(%ebp)
f01281e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281e7:	29 d0                	sub    %edx,%eax
f01281e9:	01 d8                	add    %ebx,%eax
f01281eb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01281f0:	39 c1                	cmp    %eax,%ecx
f01281f2:	74 17                	je     f012820b <test_kexpand+0x248>
f01281f4:	83 ec 04             	sub    $0x4,%esp
f01281f7:	68 00 b7 13 f0       	push   $0xf013b700
f01281fc:	68 4c 0b 00 00       	push   $0xb4c
f0128201:	68 1a b6 13 f0       	push   $0xf013b61a
f0128206:	e8 fa 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012820b:	e8 b8 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128210:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128213:	74 17                	je     f012822c <test_kexpand+0x269>
f0128215:	83 ec 04             	sub    $0x4,%esp
f0128218:	68 34 b6 13 f0       	push   $0xf013b634
f012821d:	68 4d 0b 00 00       	push   $0xb4d
f0128222:	68 1a b6 13 f0       	push   $0xf013b61a
f0128227:	e8 d9 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012822c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012822f:	e8 73 4c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128234:	29 c3                	sub    %eax,%ebx
f0128236:	89 d8                	mov    %ebx,%eax
f0128238:	3d 00 02 00 00       	cmp    $0x200,%eax
f012823d:	74 17                	je     f0128256 <test_kexpand+0x293>
f012823f:	83 ec 04             	sub    $0x4,%esp
f0128242:	68 9c b6 13 f0       	push   $0xf013b69c
f0128247:	68 4e 0b 00 00       	push   $0xb4e
f012824c:	68 1a b6 13 f0       	push   $0xf013b61a
f0128251:	e8 af 7f fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128256:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012825d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128260:	e8 42 4c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128265:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128268:	e8 5b bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012826d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128270:	83 ec 0c             	sub    $0xc,%esp
f0128273:	68 00 08 00 00       	push   $0x800
f0128278:	e8 12 f9 fd ff       	call   f0107b8f <kmalloc>
f012827d:	83 c4 10             	add    $0x10,%esp
f0128280:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128286:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012828c:	89 c1                	mov    %eax,%ecx
f012828e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128295:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128298:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012829d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01282a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01282a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01282a8:	f7 75 a4             	divl   -0x5c(%ebp)
f01282ab:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01282ae:	29 d0                	sub    %edx,%eax
f01282b0:	89 c3                	mov    %eax,%ebx
f01282b2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01282b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01282be:	0f b6 d0             	movzbl %al,%edx
f01282c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01282c4:	01 d0                	add    %edx,%eax
f01282c6:	48                   	dec    %eax
f01282c7:	89 45 98             	mov    %eax,-0x68(%ebp)
f01282ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01282cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01282d2:	f7 75 9c             	divl   -0x64(%ebp)
f01282d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01282d8:	29 d0                	sub    %edx,%eax
f01282da:	01 c3                	add    %eax,%ebx
f01282dc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01282e3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01282e8:	0f b6 c0             	movzbl %al,%eax
f01282eb:	c1 e0 04             	shl    $0x4,%eax
f01282ee:	89 c2                	mov    %eax,%edx
f01282f0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01282f3:	01 d0                	add    %edx,%eax
f01282f5:	48                   	dec    %eax
f01282f6:	89 45 90             	mov    %eax,-0x70(%ebp)
f01282f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01282fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128301:	f7 75 94             	divl   -0x6c(%ebp)
f0128304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128307:	29 d0                	sub    %edx,%eax
f0128309:	01 d8                	add    %ebx,%eax
f012830b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128310:	39 c1                	cmp    %eax,%ecx
f0128312:	74 17                	je     f012832b <test_kexpand+0x368>
f0128314:	83 ec 04             	sub    $0x4,%esp
f0128317:	68 00 b7 13 f0       	push   $0xf013b700
f012831c:	68 55 0b 00 00       	push   $0xb55
f0128321:	68 1a b6 13 f0       	push   $0xf013b61a
f0128326:	e8 da 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012832b:	e8 98 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128330:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128333:	74 17                	je     f012834c <test_kexpand+0x389>
f0128335:	83 ec 04             	sub    $0x4,%esp
f0128338:	68 34 b6 13 f0       	push   $0xf013b634
f012833d:	68 56 0b 00 00       	push   $0xb56
f0128342:	68 1a b6 13 f0       	push   $0xf013b61a
f0128347:	e8 b9 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012834c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012834f:	e8 53 4b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128354:	29 c3                	sub    %eax,%ebx
f0128356:	89 d8                	mov    %ebx,%eax
f0128358:	83 f8 01             	cmp    $0x1,%eax
f012835b:	74 17                	je     f0128374 <test_kexpand+0x3b1>
f012835d:	83 ec 04             	sub    $0x4,%esp
f0128360:	68 9c b6 13 f0       	push   $0xf013b69c
f0128365:	68 57 0b 00 00       	push   $0xb57
f012836a:	68 1a b6 13 f0       	push   $0xf013b61a
f012836f:	e8 91 7e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128374:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012837b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012837e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128384:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128387:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012838e:	eb 0e                	jmp    f012839e <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0128390:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128393:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128396:	01 d0                	add    %edx,%eax
f0128398:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012839b:	ff 45 f4             	incl   -0xc(%ebp)
f012839e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01283a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283a7:	7f e7                	jg     f0128390 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01283a9:	e8 f9 4a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01283ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283b1:	e8 12 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01283b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01283b9:	83 ec 0c             	sub    $0xc,%esp
f01283bc:	68 00 08 00 00       	push   $0x800
f01283c1:	e8 c9 f7 fd ff       	call   f0107b8f <kmalloc>
f01283c6:	83 c4 10             	add    $0x10,%esp
f01283c9:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283cf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01283d5:	89 c1                	mov    %eax,%ecx
f01283d7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01283de:	8b 45 88             	mov    -0x78(%ebp),%eax
f01283e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283e6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01283e9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01283ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01283f1:	f7 75 88             	divl   -0x78(%ebp)
f01283f4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01283f7:	29 d0                	sub    %edx,%eax
f01283f9:	89 c3                	mov    %eax,%ebx
f01283fb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128402:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128407:	0f b6 d0             	movzbl %al,%edx
f012840a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012840d:	01 d0                	add    %edx,%eax
f012840f:	48                   	dec    %eax
f0128410:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128416:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012841c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128421:	f7 75 80             	divl   -0x80(%ebp)
f0128424:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012842a:	29 d0                	sub    %edx,%eax
f012842c:	01 c3                	add    %eax,%ebx
f012842e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128435:	10 00 00 
f0128438:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012843d:	0f b6 c0             	movzbl %al,%eax
f0128440:	c1 e0 04             	shl    $0x4,%eax
f0128443:	89 c2                	mov    %eax,%edx
f0128445:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012844b:	01 d0                	add    %edx,%eax
f012844d:	48                   	dec    %eax
f012844e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128454:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012845a:	ba 00 00 00 00       	mov    $0x0,%edx
f012845f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128465:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012846b:	29 d0                	sub    %edx,%eax
f012846d:	01 d8                	add    %ebx,%eax
f012846f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128474:	39 c1                	cmp    %eax,%ecx
f0128476:	74 17                	je     f012848f <test_kexpand+0x4cc>
f0128478:	83 ec 04             	sub    $0x4,%esp
f012847b:	68 00 b7 13 f0       	push   $0xf013b700
f0128480:	68 63 0b 00 00       	push   $0xb63
f0128485:	68 1a b6 13 f0       	push   $0xf013b61a
f012848a:	e8 76 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012848f:	e8 34 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128494:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128497:	74 17                	je     f01284b0 <test_kexpand+0x4ed>
f0128499:	83 ec 04             	sub    $0x4,%esp
f012849c:	68 34 b6 13 f0       	push   $0xf013b634
f01284a1:	68 64 0b 00 00       	push   $0xb64
f01284a6:	68 1a b6 13 f0       	push   $0xf013b61a
f01284ab:	e8 55 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284b0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284b3:	e8 ef 49 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01284b8:	29 c3                	sub    %eax,%ebx
f01284ba:	89 d8                	mov    %ebx,%eax
f01284bc:	83 f8 01             	cmp    $0x1,%eax
f01284bf:	74 17                	je     f01284d8 <test_kexpand+0x515>
f01284c1:	83 ec 04             	sub    $0x4,%esp
f01284c4:	68 9c b6 13 f0       	push   $0xf013b69c
f01284c9:	68 65 0b 00 00       	push   $0xb65
f01284ce:	68 1a b6 13 f0       	push   $0xf013b61a
f01284d3:	e8 2d 7d fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01284d8:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01284df:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01284e2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01284e8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01284eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284f2:	eb 0e                	jmp    f0128502 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01284f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01284f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284fa:	01 d0                	add    %edx,%eax
f01284fc:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01284ff:	ff 45 f4             	incl   -0xc(%ebp)
f0128502:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128508:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012850b:	7f e7                	jg     f01284f4 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012850d:	e8 95 49 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128512:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128515:	e8 ae b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012851a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012851d:	83 ec 0c             	sub    $0xc,%esp
f0128520:	68 00 1c 00 00       	push   $0x1c00
f0128525:	e8 65 f6 fd ff       	call   f0107b8f <kmalloc>
f012852a:	83 c4 10             	add    $0x10,%esp
f012852d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128533:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128539:	89 c1                	mov    %eax,%ecx
f012853b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128542:	10 00 00 
f0128545:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012854b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128550:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128556:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012855c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128561:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128567:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012856d:	29 d0                	sub    %edx,%eax
f012856f:	89 c3                	mov    %eax,%ebx
f0128571:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128578:	10 00 00 
f012857b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128580:	0f b6 d0             	movzbl %al,%edx
f0128583:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128589:	01 d0                	add    %edx,%eax
f012858b:	48                   	dec    %eax
f012858c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128592:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128598:	ba 00 00 00 00       	mov    $0x0,%edx
f012859d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01285a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01285a9:	29 d0                	sub    %edx,%eax
f01285ab:	01 c3                	add    %eax,%ebx
f01285ad:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01285b4:	10 00 00 
f01285b7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01285bc:	0f b6 c0             	movzbl %al,%eax
f01285bf:	c1 e0 04             	shl    $0x4,%eax
f01285c2:	89 c2                	mov    %eax,%edx
f01285c4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01285ca:	01 d0                	add    %edx,%eax
f01285cc:	48                   	dec    %eax
f01285cd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01285d3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01285d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01285de:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01285e4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01285ea:	29 d0                	sub    %edx,%eax
f01285ec:	01 d8                	add    %ebx,%eax
f01285ee:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01285f3:	39 c1                	cmp    %eax,%ecx
f01285f5:	74 17                	je     f012860e <test_kexpand+0x64b>
f01285f7:	83 ec 04             	sub    $0x4,%esp
f01285fa:	68 00 b7 13 f0       	push   $0xf013b700
f01285ff:	68 71 0b 00 00       	push   $0xb71
f0128604:	68 1a b6 13 f0       	push   $0xf013b61a
f0128609:	e8 f7 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012860e:	e8 b5 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128613:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128616:	74 17                	je     f012862f <test_kexpand+0x66c>
f0128618:	83 ec 04             	sub    $0x4,%esp
f012861b:	68 34 b6 13 f0       	push   $0xf013b634
f0128620:	68 72 0b 00 00       	push   $0xb72
f0128625:	68 1a b6 13 f0       	push   $0xf013b61a
f012862a:	e8 d6 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012862f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128632:	e8 70 48 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128637:	29 c3                	sub    %eax,%ebx
f0128639:	89 d8                	mov    %ebx,%eax
f012863b:	83 f8 02             	cmp    $0x2,%eax
f012863e:	74 17                	je     f0128657 <test_kexpand+0x694>
f0128640:	83 ec 04             	sub    $0x4,%esp
f0128643:	68 9c b6 13 f0       	push   $0xf013b69c
f0128648:	68 73 0b 00 00       	push   $0xb73
f012864d:	68 1a b6 13 f0       	push   $0xf013b61a
f0128652:	e8 ae 7b fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128657:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f012865e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128661:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128667:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012866a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128671:	eb 0e                	jmp    f0128681 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128673:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128676:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128679:	01 d0                	add    %edx,%eax
f012867b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012867e:	ff 45 f4             	incl   -0xc(%ebp)
f0128681:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128687:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012868a:	7f e7                	jg     f0128673 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012868c:	e8 16 48 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128691:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128694:	e8 2f b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128699:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012869c:	83 ec 0c             	sub    $0xc,%esp
f012869f:	68 00 fc 2f 00       	push   $0x2ffc00
f01286a4:	e8 e6 f4 fd ff       	call   f0107b8f <kmalloc>
f01286a9:	83 c4 10             	add    $0x10,%esp
f01286ac:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286b2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01286b8:	89 c1                	mov    %eax,%ecx
f01286ba:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01286c1:	10 00 00 
f01286c4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01286ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286cf:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01286d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01286db:	ba 00 00 00 00       	mov    $0x0,%edx
f01286e0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01286e6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01286ec:	29 d0                	sub    %edx,%eax
f01286ee:	89 c3                	mov    %eax,%ebx
f01286f0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01286f7:	10 00 00 
f01286fa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01286ff:	0f b6 d0             	movzbl %al,%edx
f0128702:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128708:	01 d0                	add    %edx,%eax
f012870a:	48                   	dec    %eax
f012870b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128711:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128717:	ba 00 00 00 00       	mov    $0x0,%edx
f012871c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128722:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128728:	29 d0                	sub    %edx,%eax
f012872a:	01 c3                	add    %eax,%ebx
f012872c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128733:	10 00 00 
f0128736:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012873b:	0f b6 c0             	movzbl %al,%eax
f012873e:	c1 e0 04             	shl    $0x4,%eax
f0128741:	89 c2                	mov    %eax,%edx
f0128743:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128749:	01 d0                	add    %edx,%eax
f012874b:	48                   	dec    %eax
f012874c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128752:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128758:	ba 00 00 00 00       	mov    $0x0,%edx
f012875d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128763:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128769:	29 d0                	sub    %edx,%eax
f012876b:	01 d8                	add    %ebx,%eax
f012876d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128772:	39 c1                	cmp    %eax,%ecx
f0128774:	74 17                	je     f012878d <test_kexpand+0x7ca>
f0128776:	83 ec 04             	sub    $0x4,%esp
f0128779:	68 00 b7 13 f0       	push   $0xf013b700
f012877e:	68 7f 0b 00 00       	push   $0xb7f
f0128783:	68 1a b6 13 f0       	push   $0xf013b61a
f0128788:	e8 78 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012878d:	e8 36 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128792:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128795:	74 17                	je     f01287ae <test_kexpand+0x7eb>
f0128797:	83 ec 04             	sub    $0x4,%esp
f012879a:	68 34 b6 13 f0       	push   $0xf013b634
f012879f:	68 80 0b 00 00       	push   $0xb80
f01287a4:	68 1a b6 13 f0       	push   $0xf013b61a
f01287a9:	e8 57 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287ae:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287b1:	e8 f1 46 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01287b6:	29 c3                	sub    %eax,%ebx
f01287b8:	89 d8                	mov    %ebx,%eax
f01287ba:	3d 00 03 00 00       	cmp    $0x300,%eax
f01287bf:	74 17                	je     f01287d8 <test_kexpand+0x815>
f01287c1:	83 ec 04             	sub    $0x4,%esp
f01287c4:	68 9c b6 13 f0       	push   $0xf013b69c
f01287c9:	68 81 0b 00 00       	push   $0xb81
f01287ce:	68 1a b6 13 f0       	push   $0xf013b61a
f01287d3:	e8 2d 7a fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01287d8:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01287df:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01287e2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01287e8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01287eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287f2:	eb 0e                	jmp    f0128802 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01287f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01287fa:	01 d0                	add    %edx,%eax
f01287fc:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01287ff:	ff 45 f4             	incl   -0xc(%ebp)
f0128802:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128808:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012880b:	7f e7                	jg     f01287f4 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012880d:	e8 95 46 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128812:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128815:	e8 ae b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012881a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012881d:	83 ec 0c             	sub    $0xc,%esp
f0128820:	68 00 00 60 00       	push   $0x600000
f0128825:	e8 65 f3 fd ff       	call   f0107b8f <kmalloc>
f012882a:	83 c4 10             	add    $0x10,%esp
f012882d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128833:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128839:	89 c1                	mov    %eax,%ecx
f012883b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128842:	10 00 00 
f0128845:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012884b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128850:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128856:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012885c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128861:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128867:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012886d:	29 d0                	sub    %edx,%eax
f012886f:	89 c3                	mov    %eax,%ebx
f0128871:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128878:	10 00 00 
f012887b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128880:	0f b6 d0             	movzbl %al,%edx
f0128883:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128889:	01 d0                	add    %edx,%eax
f012888b:	48                   	dec    %eax
f012888c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128892:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128898:	ba 00 00 00 00       	mov    $0x0,%edx
f012889d:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01288a3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01288a9:	29 d0                	sub    %edx,%eax
f01288ab:	01 c3                	add    %eax,%ebx
f01288ad:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01288b4:	10 00 00 
f01288b7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01288bc:	0f b6 c0             	movzbl %al,%eax
f01288bf:	c1 e0 04             	shl    $0x4,%eax
f01288c2:	89 c2                	mov    %eax,%edx
f01288c4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01288ca:	01 d0                	add    %edx,%eax
f01288cc:	48                   	dec    %eax
f01288cd:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01288d3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01288d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01288de:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01288e4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01288ea:	29 d0                	sub    %edx,%eax
f01288ec:	01 d8                	add    %ebx,%eax
f01288ee:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01288f3:	39 c1                	cmp    %eax,%ecx
f01288f5:	74 17                	je     f012890e <test_kexpand+0x94b>
f01288f7:	83 ec 04             	sub    $0x4,%esp
f01288fa:	68 00 b7 13 f0       	push   $0xf013b700
f01288ff:	68 8d 0b 00 00       	push   $0xb8d
f0128904:	68 1a b6 13 f0       	push   $0xf013b61a
f0128909:	e8 f7 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012890e:	e8 b5 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128913:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128916:	74 17                	je     f012892f <test_kexpand+0x96c>
f0128918:	83 ec 04             	sub    $0x4,%esp
f012891b:	68 34 b6 13 f0       	push   $0xf013b634
f0128920:	68 8e 0b 00 00       	push   $0xb8e
f0128925:	68 1a b6 13 f0       	push   $0xf013b61a
f012892a:	e8 d6 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012892f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128932:	e8 70 45 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128937:	29 c3                	sub    %eax,%ebx
f0128939:	89 d8                	mov    %ebx,%eax
f012893b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128940:	74 17                	je     f0128959 <test_kexpand+0x996>
f0128942:	83 ec 04             	sub    $0x4,%esp
f0128945:	68 9c b6 13 f0       	push   $0xf013b69c
f012894a:	68 8f 0b 00 00       	push   $0xb8f
f012894f:	68 1a b6 13 f0       	push   $0xf013b61a
f0128954:	e8 ac 78 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128959:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128960:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128963:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128969:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012896f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128976:	eb 1a                	jmp    f0128992 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012897b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128982:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128988:	01 c2                	add    %eax,%edx
f012898a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012898d:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012898f:	ff 45 f4             	incl   -0xc(%ebp)
f0128992:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128998:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012899b:	7d db                	jge    f0128978 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f012899d:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f01289a4:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01289a7:	e8 fb 44 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01289ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289af:	e8 14 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289b4:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01289b7:	83 ec 0c             	sub    $0xc,%esp
f01289ba:	68 00 00 70 00       	push   $0x700000
f01289bf:	e8 6e f4 fd ff       	call   f0107e32 <kexpand>
f01289c4:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01289c7:	e8 fc b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289cf:	74 19                	je     f01289ea <test_kexpand+0xa27>
f01289d1:	68 b4 c3 13 f0       	push   $0xf013c3b4
f01289d6:	68 e5 c3 13 f0       	push   $0xf013c3e5
f01289db:	68 a0 0b 00 00       	push   $0xba0
f01289e0:	68 1a b6 13 f0       	push   $0xf013b61a
f01289e5:	e8 1b 78 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01289ea:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289ed:	e8 b5 44 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01289f2:	29 c3                	sub    %eax,%ebx
f01289f4:	89 d8                	mov    %ebx,%eax
f01289f6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01289fb:	74 19                	je     f0128a16 <test_kexpand+0xa53>
f01289fd:	68 fc c3 13 f0       	push   $0xf013c3fc
f0128a02:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128a07:	68 a1 0b 00 00       	push   $0xba1
f0128a0c:	68 1a b6 13 f0       	push   $0xf013b61a
f0128a11:	e8 ef 77 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a16:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128a1f:	eb 1a                	jmp    f0128a3b <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a2b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a31:	01 c2                	add    %eax,%edx
f0128a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a36:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a38:	ff 45 f4             	incl   -0xc(%ebp)
f0128a3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a3e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128a44:	7c db                	jl     f0128a21 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128a46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a4d:	eb 37                	jmp    f0128a86 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a52:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a59:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a5f:	01 d0                	add    %edx,%eax
f0128a61:	8b 10                	mov    (%eax),%edx
f0128a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a66:	39 c2                	cmp    %eax,%edx
f0128a68:	74 19                	je     f0128a83 <test_kexpand+0xac0>
f0128a6a:	68 2c c4 13 f0       	push   $0xf013c42c
f0128a6f:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128a74:	68 ad 0b 00 00       	push   $0xbad
f0128a79:	68 1a b6 13 f0       	push   $0xf013b61a
f0128a7e:	e8 82 77 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128a83:	ff 45 f4             	incl   -0xc(%ebp)
f0128a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a89:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128a8f:	7c be                	jl     f0128a4f <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128a91:	e8 11 44 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128a96:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a99:	e8 2a b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128a9e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128aa1:	83 ec 0c             	sub    $0xc,%esp
f0128aa4:	68 00 00 a0 00       	push   $0xa00000
f0128aa9:	e8 84 f3 fd ff       	call   f0107e32 <kexpand>
f0128aae:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128ab1:	e8 12 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ab6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ab9:	74 19                	je     f0128ad4 <test_kexpand+0xb11>
f0128abb:	68 b4 c3 13 f0       	push   $0xf013c3b4
f0128ac0:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128ac5:	68 b8 0b 00 00       	push   $0xbb8
f0128aca:	68 1a b6 13 f0       	push   $0xf013b61a
f0128acf:	e8 31 77 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128ad4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128ad7:	e8 cb 43 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128adc:	29 c3                	sub    %eax,%ebx
f0128ade:	89 d8                	mov    %ebx,%eax
f0128ae0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128ae5:	74 19                	je     f0128b00 <test_kexpand+0xb3d>
f0128ae7:	68 38 c4 13 f0       	push   $0xf013c438
f0128aec:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128af1:	68 b9 0b 00 00       	push   $0xbb9
f0128af6:	68 1a b6 13 f0       	push   $0xf013b61a
f0128afb:	e8 05 77 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b00:	e8 a2 43 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128b05:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b08:	e8 bb b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128b10:	83 ec 0c             	sub    $0xc,%esp
f0128b13:	68 00 00 40 00       	push   $0x400000
f0128b18:	e8 72 f0 fd ff       	call   f0107b8f <kmalloc>
f0128b1d:	83 c4 10             	add    $0x10,%esp
f0128b20:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128b26:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128b2c:	89 c1                	mov    %eax,%ecx
f0128b2e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128b35:	10 00 00 
f0128b38:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128b3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b43:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128b49:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128b4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b54:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128b5a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128b60:	29 d0                	sub    %edx,%eax
f0128b62:	89 c3                	mov    %eax,%ebx
f0128b64:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128b6b:	10 00 00 
f0128b6e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128b73:	0f b6 d0             	movzbl %al,%edx
f0128b76:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128b7c:	01 d0                	add    %edx,%eax
f0128b7e:	48                   	dec    %eax
f0128b7f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128b85:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128b8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b90:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128b96:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128b9c:	29 d0                	sub    %edx,%eax
f0128b9e:	01 c3                	add    %eax,%ebx
f0128ba0:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128ba7:	10 00 00 
f0128baa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128baf:	0f b6 c0             	movzbl %al,%eax
f0128bb2:	c1 e0 04             	shl    $0x4,%eax
f0128bb5:	89 c2                	mov    %eax,%edx
f0128bb7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128bbd:	01 d0                	add    %edx,%eax
f0128bbf:	48                   	dec    %eax
f0128bc0:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128bc6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bd1:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128bd7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128bdd:	29 d0                	sub    %edx,%eax
f0128bdf:	01 d8                	add    %ebx,%eax
f0128be1:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128be6:	39 c1                	cmp    %eax,%ecx
f0128be8:	74 17                	je     f0128c01 <test_kexpand+0xc3e>
f0128bea:	83 ec 04             	sub    $0x4,%esp
f0128bed:	68 68 c4 13 f0       	push   $0xf013c468
f0128bf2:	68 c4 0b 00 00       	push   $0xbc4
f0128bf7:	68 1a b6 13 f0       	push   $0xf013b61a
f0128bfc:	e8 04 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c01:	e8 c2 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c06:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c09:	74 17                	je     f0128c22 <test_kexpand+0xc5f>
f0128c0b:	83 ec 04             	sub    $0x4,%esp
f0128c0e:	68 34 b6 13 f0       	push   $0xf013b634
f0128c13:	68 c5 0b 00 00       	push   $0xbc5
f0128c18:	68 1a b6 13 f0       	push   $0xf013b61a
f0128c1d:	e8 e3 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c22:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c25:	e8 7d 42 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128c2a:	29 c3                	sub    %eax,%ebx
f0128c2c:	89 d8                	mov    %ebx,%eax
f0128c2e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128c33:	74 17                	je     f0128c4c <test_kexpand+0xc89>
f0128c35:	83 ec 04             	sub    $0x4,%esp
f0128c38:	68 9c b6 13 f0       	push   $0xf013b69c
f0128c3d:	68 c6 0b 00 00       	push   $0xbc6
f0128c42:	68 1a b6 13 f0       	push   $0xf013b61a
f0128c47:	e8 b9 75 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128c4c:	e8 56 42 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128c51:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c54:	e8 6f b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c59:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128c5c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128c62:	83 ec 0c             	sub    $0xc,%esp
f0128c65:	50                   	push   %eax
f0128c66:	e8 ef ef fd ff       	call   f0107c5a <kfree>
f0128c6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c6e:	e8 55 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c76:	74 17                	je     f0128c8f <test_kexpand+0xccc>
f0128c78:	83 ec 04             	sub    $0x4,%esp
f0128c7b:	68 34 b6 13 f0       	push   $0xf013b634
f0128c80:	68 cf 0b 00 00       	push   $0xbcf
f0128c85:	68 1a b6 13 f0       	push   $0xf013b61a
f0128c8a:	e8 76 75 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128c8f:	e8 13 42 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128c94:	89 c2                	mov    %eax,%edx
f0128c96:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c99:	29 c2                	sub    %eax,%edx
f0128c9b:	89 d0                	mov    %edx,%eax
f0128c9d:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128ca2:	74 17                	je     f0128cbb <test_kexpand+0xcf8>
f0128ca4:	83 ec 04             	sub    $0x4,%esp
f0128ca7:	68 cc be 13 f0       	push   $0xf013becc
f0128cac:	68 d0 0b 00 00       	push   $0xbd0
f0128cb1:	68 1a b6 13 f0       	push   $0xf013b61a
f0128cb6:	e8 4a 75 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128cbb:	e8 e7 41 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128cc0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cc3:	e8 00 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cc8:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128ccb:	83 ec 0c             	sub    $0xc,%esp
f0128cce:	68 00 50 40 00       	push   $0x405000
f0128cd3:	e8 5a f1 fd ff       	call   f0107e32 <kexpand>
f0128cd8:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128cdb:	e8 e8 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ce0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ce3:	74 19                	je     f0128cfe <test_kexpand+0xd3b>
f0128ce5:	68 b4 c3 13 f0       	push   $0xf013c3b4
f0128cea:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128cef:	68 da 0b 00 00       	push   $0xbda
f0128cf4:	68 1a b6 13 f0       	push   $0xf013b61a
f0128cf9:	e8 07 75 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128cfe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d01:	e8 a1 41 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128d06:	29 c3                	sub    %eax,%ebx
f0128d08:	89 d8                	mov    %ebx,%eax
f0128d0a:	83 f8 05             	cmp    $0x5,%eax
f0128d0d:	74 19                	je     f0128d28 <test_kexpand+0xd65>
f0128d0f:	68 90 c4 13 f0       	push   $0xf013c490
f0128d14:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0128d19:	68 db 0b 00 00       	push   $0xbdb
f0128d1e:	68 1a b6 13 f0       	push   $0xf013b61a
f0128d23:	e8 dd 74 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128d28:	83 ec 0c             	sub    $0xc,%esp
f0128d2b:	68 78 c3 13 f0       	push   $0xf013c378
f0128d30:	e8 d9 7f fd ff       	call   f0100d0e <cprintf>
f0128d35:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128d38:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128d3d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128d40:	5b                   	pop    %ebx
f0128d41:	5f                   	pop    %edi
f0128d42:	5d                   	pop    %ebp
f0128d43:	c3                   	ret    

f0128d44 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128d44:	55                   	push   %ebp
f0128d45:	89 e5                	mov    %esp,%ebp
f0128d47:	57                   	push   %edi
f0128d48:	53                   	push   %ebx
f0128d49:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128d4f:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128d53:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128d57:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128d5d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128d63:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128d6a:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128d71:	e8 31 41 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128d76:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128d79:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128d7f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d84:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d89:	89 d7                	mov    %edx,%edi
f0128d8b:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128d8d:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128d93:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d9d:	89 d7                	mov    %edx,%edi
f0128d9f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128da1:	e8 01 41 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128da6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128da9:	e8 1a b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128dae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128db1:	83 ec 0c             	sub    $0xc,%esp
f0128db4:	68 00 fc 1f 00       	push   $0x1ffc00
f0128db9:	e8 d1 ed fd ff       	call   f0107b8f <kmalloc>
f0128dbe:	83 c4 10             	add    $0x10,%esp
f0128dc1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128dc7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128dcd:	89 c1                	mov    %eax,%ecx
f0128dcf:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128dd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128dd9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128dde:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128de1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128de4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128de9:	f7 75 d4             	divl   -0x2c(%ebp)
f0128dec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128def:	29 d0                	sub    %edx,%eax
f0128df1:	89 c3                	mov    %eax,%ebx
f0128df3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128dfa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128dff:	0f b6 d0             	movzbl %al,%edx
f0128e02:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128e05:	01 d0                	add    %edx,%eax
f0128e07:	48                   	dec    %eax
f0128e08:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128e0b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e13:	f7 75 cc             	divl   -0x34(%ebp)
f0128e16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e19:	29 d0                	sub    %edx,%eax
f0128e1b:	01 c3                	add    %eax,%ebx
f0128e1d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128e24:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128e29:	0f b6 c0             	movzbl %al,%eax
f0128e2c:	c1 e0 04             	shl    $0x4,%eax
f0128e2f:	89 c2                	mov    %eax,%edx
f0128e31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128e34:	01 d0                	add    %edx,%eax
f0128e36:	48                   	dec    %eax
f0128e37:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128e3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128e3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e42:	f7 75 c4             	divl   -0x3c(%ebp)
f0128e45:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128e48:	29 d0                	sub    %edx,%eax
f0128e4a:	01 d8                	add    %ebx,%eax
f0128e4c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128e51:	39 c1                	cmp    %eax,%ecx
f0128e53:	74 17                	je     f0128e6c <test_kshrink+0x128>
f0128e55:	83 ec 04             	sub    $0x4,%esp
f0128e58:	68 00 b7 13 f0       	push   $0xf013b700
f0128e5d:	68 01 0c 00 00       	push   $0xc01
f0128e62:	68 1a b6 13 f0       	push   $0xf013b61a
f0128e67:	e8 99 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e6c:	e8 57 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e74:	74 17                	je     f0128e8d <test_kshrink+0x149>
f0128e76:	83 ec 04             	sub    $0x4,%esp
f0128e79:	68 34 b6 13 f0       	push   $0xf013b634
f0128e7e:	68 02 0c 00 00       	push   $0xc02
f0128e83:	68 1a b6 13 f0       	push   $0xf013b61a
f0128e88:	e8 78 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e8d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e90:	e8 12 40 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128e95:	29 c3                	sub    %eax,%ebx
f0128e97:	89 d8                	mov    %ebx,%eax
f0128e99:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128e9e:	74 17                	je     f0128eb7 <test_kshrink+0x173>
f0128ea0:	83 ec 04             	sub    $0x4,%esp
f0128ea3:	68 9c b6 13 f0       	push   $0xf013b69c
f0128ea8:	68 03 0c 00 00       	push   $0xc03
f0128ead:	68 1a b6 13 f0       	push   $0xf013b61a
f0128eb2:	e8 4e 73 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128eb7:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128ebe:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ec1:	e8 e1 3f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128ec6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ec9:	e8 fa ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ece:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128ed1:	83 ec 0c             	sub    $0xc,%esp
f0128ed4:	68 00 fc 1f 00       	push   $0x1ffc00
f0128ed9:	e8 b1 ec fd ff       	call   f0107b8f <kmalloc>
f0128ede:	83 c4 10             	add    $0x10,%esp
f0128ee1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ee7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128eed:	89 c1                	mov    %eax,%ecx
f0128eef:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128ef6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128ef9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128efe:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128f01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f04:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f09:	f7 75 bc             	divl   -0x44(%ebp)
f0128f0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f0f:	29 d0                	sub    %edx,%eax
f0128f11:	89 c3                	mov    %eax,%ebx
f0128f13:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128f1a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128f1f:	0f b6 d0             	movzbl %al,%edx
f0128f22:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128f25:	01 d0                	add    %edx,%eax
f0128f27:	48                   	dec    %eax
f0128f28:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128f2b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f33:	f7 75 b4             	divl   -0x4c(%ebp)
f0128f36:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f39:	29 d0                	sub    %edx,%eax
f0128f3b:	01 c3                	add    %eax,%ebx
f0128f3d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128f44:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128f49:	0f b6 c0             	movzbl %al,%eax
f0128f4c:	c1 e0 04             	shl    $0x4,%eax
f0128f4f:	89 c2                	mov    %eax,%edx
f0128f51:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128f54:	01 d0                	add    %edx,%eax
f0128f56:	48                   	dec    %eax
f0128f57:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128f5a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f62:	f7 75 ac             	divl   -0x54(%ebp)
f0128f65:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128f68:	29 d0                	sub    %edx,%eax
f0128f6a:	01 d8                	add    %ebx,%eax
f0128f6c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128f71:	39 c1                	cmp    %eax,%ecx
f0128f73:	74 17                	je     f0128f8c <test_kshrink+0x248>
f0128f75:	83 ec 04             	sub    $0x4,%esp
f0128f78:	68 00 b7 13 f0       	push   $0xf013b700
f0128f7d:	68 0a 0c 00 00       	push   $0xc0a
f0128f82:	68 1a b6 13 f0       	push   $0xf013b61a
f0128f87:	e8 79 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f8c:	e8 37 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f91:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f94:	74 17                	je     f0128fad <test_kshrink+0x269>
f0128f96:	83 ec 04             	sub    $0x4,%esp
f0128f99:	68 34 b6 13 f0       	push   $0xf013b634
f0128f9e:	68 0b 0c 00 00       	push   $0xc0b
f0128fa3:	68 1a b6 13 f0       	push   $0xf013b61a
f0128fa8:	e8 58 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fad:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128fb0:	e8 f2 3e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128fb5:	29 c3                	sub    %eax,%ebx
f0128fb7:	89 d8                	mov    %ebx,%eax
f0128fb9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128fbe:	74 17                	je     f0128fd7 <test_kshrink+0x293>
f0128fc0:	83 ec 04             	sub    $0x4,%esp
f0128fc3:	68 9c b6 13 f0       	push   $0xf013b69c
f0128fc8:	68 0c 0c 00 00       	push   $0xc0c
f0128fcd:	68 1a b6 13 f0       	push   $0xf013b61a
f0128fd2:	e8 2e 72 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128fd7:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128fde:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128fe1:	e8 c1 3e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0128fe6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fe9:	e8 da ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128fee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128ff1:	83 ec 0c             	sub    $0xc,%esp
f0128ff4:	68 00 08 00 00       	push   $0x800
f0128ff9:	e8 91 eb fd ff       	call   f0107b8f <kmalloc>
f0128ffe:	83 c4 10             	add    $0x10,%esp
f0129001:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129007:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012900d:	89 c1                	mov    %eax,%ecx
f012900f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129016:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129019:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012901e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129021:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129024:	ba 00 00 00 00       	mov    $0x0,%edx
f0129029:	f7 75 a4             	divl   -0x5c(%ebp)
f012902c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012902f:	29 d0                	sub    %edx,%eax
f0129031:	89 c3                	mov    %eax,%ebx
f0129033:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012903a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012903f:	0f b6 d0             	movzbl %al,%edx
f0129042:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129045:	01 d0                	add    %edx,%eax
f0129047:	48                   	dec    %eax
f0129048:	89 45 98             	mov    %eax,-0x68(%ebp)
f012904b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012904e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129053:	f7 75 9c             	divl   -0x64(%ebp)
f0129056:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129059:	29 d0                	sub    %edx,%eax
f012905b:	01 c3                	add    %eax,%ebx
f012905d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129064:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129069:	0f b6 c0             	movzbl %al,%eax
f012906c:	c1 e0 04             	shl    $0x4,%eax
f012906f:	89 c2                	mov    %eax,%edx
f0129071:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129074:	01 d0                	add    %edx,%eax
f0129076:	48                   	dec    %eax
f0129077:	89 45 90             	mov    %eax,-0x70(%ebp)
f012907a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012907d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129082:	f7 75 94             	divl   -0x6c(%ebp)
f0129085:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129088:	29 d0                	sub    %edx,%eax
f012908a:	01 d8                	add    %ebx,%eax
f012908c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129091:	39 c1                	cmp    %eax,%ecx
f0129093:	74 17                	je     f01290ac <test_kshrink+0x368>
f0129095:	83 ec 04             	sub    $0x4,%esp
f0129098:	68 00 b7 13 f0       	push   $0xf013b700
f012909d:	68 13 0c 00 00       	push   $0xc13
f01290a2:	68 1a b6 13 f0       	push   $0xf013b61a
f01290a7:	e8 59 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290ac:	e8 17 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01290b1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290b4:	74 17                	je     f01290cd <test_kshrink+0x389>
f01290b6:	83 ec 04             	sub    $0x4,%esp
f01290b9:	68 34 b6 13 f0       	push   $0xf013b634
f01290be:	68 14 0c 00 00       	push   $0xc14
f01290c3:	68 1a b6 13 f0       	push   $0xf013b61a
f01290c8:	e8 38 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290cd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290d0:	e8 d2 3d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01290d5:	29 c3                	sub    %eax,%ebx
f01290d7:	89 d8                	mov    %ebx,%eax
f01290d9:	83 f8 01             	cmp    $0x1,%eax
f01290dc:	74 17                	je     f01290f5 <test_kshrink+0x3b1>
f01290de:	83 ec 04             	sub    $0x4,%esp
f01290e1:	68 9c b6 13 f0       	push   $0xf013b69c
f01290e6:	68 15 0c 00 00       	push   $0xc15
f01290eb:	68 1a b6 13 f0       	push   $0xf013b61a
f01290f0:	e8 10 71 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01290f5:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01290fc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01290ff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129105:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129108:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012910f:	eb 0e                	jmp    f012911f <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0129111:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129114:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129117:	01 d0                	add    %edx,%eax
f0129119:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012911c:	ff 45 f4             	incl   -0xc(%ebp)
f012911f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129125:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129128:	7f e7                	jg     f0129111 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012912a:	e8 78 3d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012912f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129132:	e8 91 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129137:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012913a:	83 ec 0c             	sub    $0xc,%esp
f012913d:	68 00 08 00 00       	push   $0x800
f0129142:	e8 48 ea fd ff       	call   f0107b8f <kmalloc>
f0129147:	83 c4 10             	add    $0x10,%esp
f012914a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129150:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129156:	89 c1                	mov    %eax,%ecx
f0129158:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012915f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129162:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129167:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012916a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012916d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129172:	f7 75 88             	divl   -0x78(%ebp)
f0129175:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129178:	29 d0                	sub    %edx,%eax
f012917a:	89 c3                	mov    %eax,%ebx
f012917c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129183:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129188:	0f b6 d0             	movzbl %al,%edx
f012918b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012918e:	01 d0                	add    %edx,%eax
f0129190:	48                   	dec    %eax
f0129191:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129197:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012919d:	ba 00 00 00 00       	mov    $0x0,%edx
f01291a2:	f7 75 80             	divl   -0x80(%ebp)
f01291a5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01291ab:	29 d0                	sub    %edx,%eax
f01291ad:	01 c3                	add    %eax,%ebx
f01291af:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01291b6:	10 00 00 
f01291b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01291be:	0f b6 c0             	movzbl %al,%eax
f01291c1:	c1 e0 04             	shl    $0x4,%eax
f01291c4:	89 c2                	mov    %eax,%edx
f01291c6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01291cc:	01 d0                	add    %edx,%eax
f01291ce:	48                   	dec    %eax
f01291cf:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01291d5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01291db:	ba 00 00 00 00       	mov    $0x0,%edx
f01291e0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01291e6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01291ec:	29 d0                	sub    %edx,%eax
f01291ee:	01 d8                	add    %ebx,%eax
f01291f0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01291f5:	39 c1                	cmp    %eax,%ecx
f01291f7:	74 17                	je     f0129210 <test_kshrink+0x4cc>
f01291f9:	83 ec 04             	sub    $0x4,%esp
f01291fc:	68 00 b7 13 f0       	push   $0xf013b700
f0129201:	68 21 0c 00 00       	push   $0xc21
f0129206:	68 1a b6 13 f0       	push   $0xf013b61a
f012920b:	e8 f5 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129210:	e8 b3 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129215:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129218:	74 17                	je     f0129231 <test_kshrink+0x4ed>
f012921a:	83 ec 04             	sub    $0x4,%esp
f012921d:	68 34 b6 13 f0       	push   $0xf013b634
f0129222:	68 22 0c 00 00       	push   $0xc22
f0129227:	68 1a b6 13 f0       	push   $0xf013b61a
f012922c:	e8 d4 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129231:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129234:	e8 6e 3c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129239:	29 c3                	sub    %eax,%ebx
f012923b:	89 d8                	mov    %ebx,%eax
f012923d:	83 f8 01             	cmp    $0x1,%eax
f0129240:	74 17                	je     f0129259 <test_kshrink+0x515>
f0129242:	83 ec 04             	sub    $0x4,%esp
f0129245:	68 9c b6 13 f0       	push   $0xf013b69c
f012924a:	68 23 0c 00 00       	push   $0xc23
f012924f:	68 1a b6 13 f0       	push   $0xf013b61a
f0129254:	e8 ac 6f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129259:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0129260:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129263:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129269:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012926c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129273:	eb 0e                	jmp    f0129283 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0129275:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129278:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012927b:	01 d0                	add    %edx,%eax
f012927d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129280:	ff 45 f4             	incl   -0xc(%ebp)
f0129283:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129289:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012928c:	7f e7                	jg     f0129275 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012928e:	e8 14 3c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129293:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129296:	e8 2d ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012929b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012929e:	83 ec 0c             	sub    $0xc,%esp
f01292a1:	68 00 1c 00 00       	push   $0x1c00
f01292a6:	e8 e4 e8 fd ff       	call   f0107b8f <kmalloc>
f01292ab:	83 c4 10             	add    $0x10,%esp
f01292ae:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292b4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01292ba:	89 c1                	mov    %eax,%ecx
f01292bc:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01292c3:	10 00 00 
f01292c6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01292cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01292d7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01292dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01292e2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01292e8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01292ee:	29 d0                	sub    %edx,%eax
f01292f0:	89 c3                	mov    %eax,%ebx
f01292f2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01292f9:	10 00 00 
f01292fc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129301:	0f b6 d0             	movzbl %al,%edx
f0129304:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012930a:	01 d0                	add    %edx,%eax
f012930c:	48                   	dec    %eax
f012930d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129313:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129319:	ba 00 00 00 00       	mov    $0x0,%edx
f012931e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129324:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012932a:	29 d0                	sub    %edx,%eax
f012932c:	01 c3                	add    %eax,%ebx
f012932e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129335:	10 00 00 
f0129338:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012933d:	0f b6 c0             	movzbl %al,%eax
f0129340:	c1 e0 04             	shl    $0x4,%eax
f0129343:	89 c2                	mov    %eax,%edx
f0129345:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012934b:	01 d0                	add    %edx,%eax
f012934d:	48                   	dec    %eax
f012934e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129354:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012935a:	ba 00 00 00 00       	mov    $0x0,%edx
f012935f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129365:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012936b:	29 d0                	sub    %edx,%eax
f012936d:	01 d8                	add    %ebx,%eax
f012936f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129374:	39 c1                	cmp    %eax,%ecx
f0129376:	74 17                	je     f012938f <test_kshrink+0x64b>
f0129378:	83 ec 04             	sub    $0x4,%esp
f012937b:	68 00 b7 13 f0       	push   $0xf013b700
f0129380:	68 2f 0c 00 00       	push   $0xc2f
f0129385:	68 1a b6 13 f0       	push   $0xf013b61a
f012938a:	e8 76 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012938f:	e8 34 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129394:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129397:	74 17                	je     f01293b0 <test_kshrink+0x66c>
f0129399:	83 ec 04             	sub    $0x4,%esp
f012939c:	68 34 b6 13 f0       	push   $0xf013b634
f01293a1:	68 30 0c 00 00       	push   $0xc30
f01293a6:	68 1a b6 13 f0       	push   $0xf013b61a
f01293ab:	e8 55 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293b0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01293b3:	e8 ef 3a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01293b8:	29 c3                	sub    %eax,%ebx
f01293ba:	89 d8                	mov    %ebx,%eax
f01293bc:	83 f8 02             	cmp    $0x2,%eax
f01293bf:	74 17                	je     f01293d8 <test_kshrink+0x694>
f01293c1:	83 ec 04             	sub    $0x4,%esp
f01293c4:	68 9c b6 13 f0       	push   $0xf013b69c
f01293c9:	68 31 0c 00 00       	push   $0xc31
f01293ce:	68 1a b6 13 f0       	push   $0xf013b61a
f01293d3:	e8 2d 6e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01293d8:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01293df:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01293e2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01293e8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01293eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293f2:	eb 0e                	jmp    f0129402 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01293f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01293fa:	01 d0                	add    %edx,%eax
f01293fc:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01293ff:	ff 45 f4             	incl   -0xc(%ebp)
f0129402:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129408:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012940b:	7f e7                	jg     f01293f4 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012940d:	e8 95 3a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129412:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129415:	e8 ae a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012941a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012941d:	83 ec 0c             	sub    $0xc,%esp
f0129420:	68 00 fc 2f 00       	push   $0x2ffc00
f0129425:	e8 65 e7 fd ff       	call   f0107b8f <kmalloc>
f012942a:	83 c4 10             	add    $0x10,%esp
f012942d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129433:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129439:	89 c1                	mov    %eax,%ecx
f012943b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129442:	10 00 00 
f0129445:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012944b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129450:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129456:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012945c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129461:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129467:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012946d:	29 d0                	sub    %edx,%eax
f012946f:	89 c3                	mov    %eax,%ebx
f0129471:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129478:	10 00 00 
f012947b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129480:	0f b6 d0             	movzbl %al,%edx
f0129483:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129489:	01 d0                	add    %edx,%eax
f012948b:	48                   	dec    %eax
f012948c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129492:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129498:	ba 00 00 00 00       	mov    $0x0,%edx
f012949d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01294a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01294a9:	29 d0                	sub    %edx,%eax
f01294ab:	01 c3                	add    %eax,%ebx
f01294ad:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01294b4:	10 00 00 
f01294b7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01294bc:	0f b6 c0             	movzbl %al,%eax
f01294bf:	c1 e0 04             	shl    $0x4,%eax
f01294c2:	89 c2                	mov    %eax,%edx
f01294c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01294ca:	01 d0                	add    %edx,%eax
f01294cc:	48                   	dec    %eax
f01294cd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01294d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01294d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01294de:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01294e4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01294ea:	29 d0                	sub    %edx,%eax
f01294ec:	01 d8                	add    %ebx,%eax
f01294ee:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01294f3:	39 c1                	cmp    %eax,%ecx
f01294f5:	74 17                	je     f012950e <test_kshrink+0x7ca>
f01294f7:	83 ec 04             	sub    $0x4,%esp
f01294fa:	68 00 b7 13 f0       	push   $0xf013b700
f01294ff:	68 3d 0c 00 00       	push   $0xc3d
f0129504:	68 1a b6 13 f0       	push   $0xf013b61a
f0129509:	e8 f7 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012950e:	e8 b5 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129513:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129516:	74 17                	je     f012952f <test_kshrink+0x7eb>
f0129518:	83 ec 04             	sub    $0x4,%esp
f012951b:	68 34 b6 13 f0       	push   $0xf013b634
f0129520:	68 3e 0c 00 00       	push   $0xc3e
f0129525:	68 1a b6 13 f0       	push   $0xf013b61a
f012952a:	e8 d6 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012952f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129532:	e8 70 39 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129537:	29 c3                	sub    %eax,%ebx
f0129539:	89 d8                	mov    %ebx,%eax
f012953b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129540:	74 17                	je     f0129559 <test_kshrink+0x815>
f0129542:	83 ec 04             	sub    $0x4,%esp
f0129545:	68 9c b6 13 f0       	push   $0xf013b69c
f012954a:	68 3f 0c 00 00       	push   $0xc3f
f012954f:	68 1a b6 13 f0       	push   $0xf013b61a
f0129554:	e8 ac 6c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129559:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0129560:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129563:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129569:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012956c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129573:	eb 0e                	jmp    f0129583 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0129575:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129578:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012957b:	01 d0                	add    %edx,%eax
f012957d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129580:	ff 45 f4             	incl   -0xc(%ebp)
f0129583:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129589:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012958c:	7f e7                	jg     f0129575 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012958e:	e8 14 39 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129593:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129596:	e8 2d a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012959b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012959e:	83 ec 0c             	sub    $0xc,%esp
f01295a1:	68 00 00 60 00       	push   $0x600000
f01295a6:	e8 e4 e5 fd ff       	call   f0107b8f <kmalloc>
f01295ab:	83 c4 10             	add    $0x10,%esp
f01295ae:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295b4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01295ba:	89 c1                	mov    %eax,%ecx
f01295bc:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01295c3:	10 00 00 
f01295c6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01295cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295d1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01295d7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01295dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01295e2:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01295e8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01295ee:	29 d0                	sub    %edx,%eax
f01295f0:	89 c3                	mov    %eax,%ebx
f01295f2:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01295f9:	10 00 00 
f01295fc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129601:	0f b6 d0             	movzbl %al,%edx
f0129604:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012960a:	01 d0                	add    %edx,%eax
f012960c:	48                   	dec    %eax
f012960d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129613:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129619:	ba 00 00 00 00       	mov    $0x0,%edx
f012961e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129624:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012962a:	29 d0                	sub    %edx,%eax
f012962c:	01 c3                	add    %eax,%ebx
f012962e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129635:	10 00 00 
f0129638:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012963d:	0f b6 c0             	movzbl %al,%eax
f0129640:	c1 e0 04             	shl    $0x4,%eax
f0129643:	89 c2                	mov    %eax,%edx
f0129645:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012964b:	01 d0                	add    %edx,%eax
f012964d:	48                   	dec    %eax
f012964e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129654:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012965a:	ba 00 00 00 00       	mov    $0x0,%edx
f012965f:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129665:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012966b:	29 d0                	sub    %edx,%eax
f012966d:	01 d8                	add    %ebx,%eax
f012966f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129674:	39 c1                	cmp    %eax,%ecx
f0129676:	74 17                	je     f012968f <test_kshrink+0x94b>
f0129678:	83 ec 04             	sub    $0x4,%esp
f012967b:	68 00 b7 13 f0       	push   $0xf013b700
f0129680:	68 4b 0c 00 00       	push   $0xc4b
f0129685:	68 1a b6 13 f0       	push   $0xf013b61a
f012968a:	e8 76 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012968f:	e8 34 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129694:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129697:	74 17                	je     f01296b0 <test_kshrink+0x96c>
f0129699:	83 ec 04             	sub    $0x4,%esp
f012969c:	68 34 b6 13 f0       	push   $0xf013b634
f01296a1:	68 4c 0c 00 00       	push   $0xc4c
f01296a6:	68 1a b6 13 f0       	push   $0xf013b61a
f01296ab:	e8 55 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296b0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01296b3:	e8 ef 37 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01296b8:	29 c3                	sub    %eax,%ebx
f01296ba:	89 d8                	mov    %ebx,%eax
f01296bc:	3d 00 06 00 00       	cmp    $0x600,%eax
f01296c1:	74 17                	je     f01296da <test_kshrink+0x996>
f01296c3:	83 ec 04             	sub    $0x4,%esp
f01296c6:	68 9c b6 13 f0       	push   $0xf013b69c
f01296cb:	68 4d 0c 00 00       	push   $0xc4d
f01296d0:	68 1a b6 13 f0       	push   $0xf013b61a
f01296d5:	e8 2b 6b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01296da:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01296e1:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01296e4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01296ea:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01296f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296f7:	eb 1a                	jmp    f0129713 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01296f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01296fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129703:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129709:	01 c2                	add    %eax,%edx
f012970b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012970e:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129710:	ff 45 f4             	incl   -0xc(%ebp)
f0129713:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129719:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012971c:	7d db                	jge    f01296f9 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012971e:	e8 84 37 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129723:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129726:	e8 9d a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012972b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f012972e:	83 ec 0c             	sub    $0xc,%esp
f0129731:	68 00 00 50 00       	push   $0x500000
f0129736:	e8 da e6 fd ff       	call   f0107e15 <kshrink>
f012973b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012973e:	e8 85 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129743:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129746:	74 19                	je     f0129761 <test_kshrink+0xa1d>
f0129748:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012974d:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129752:	68 5d 0c 00 00       	push   $0xc5d
f0129757:	68 1a b6 13 f0       	push   $0xf013b61a
f012975c:	e8 a4 6a fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129761:	e8 41 37 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129766:	89 c2                	mov    %eax,%edx
f0129768:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012976b:	29 c2                	sub    %eax,%edx
f012976d:	89 d0                	mov    %edx,%eax
f012976f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129774:	74 19                	je     f012978f <test_kshrink+0xa4b>
f0129776:	68 c0 c4 13 f0       	push   $0xf013c4c0
f012977b:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129780:	68 5e 0c 00 00       	push   $0xc5e
f0129785:	68 1a b6 13 f0       	push   $0xf013b61a
f012978a:	e8 76 6a fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f012978f:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129796:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129799:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297a0:	eb 37                	jmp    f01297d9 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01297a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01297ac:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01297b2:	01 d0                	add    %edx,%eax
f01297b4:	8b 10                	mov    (%eax),%edx
f01297b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297b9:	39 c2                	cmp    %eax,%edx
f01297bb:	74 19                	je     f01297d6 <test_kshrink+0xa92>
f01297bd:	68 f0 c4 13 f0       	push   $0xf013c4f0
f01297c2:	68 e5 c3 13 f0       	push   $0xf013c3e5
f01297c7:	68 66 0c 00 00       	push   $0xc66
f01297cc:	68 1a b6 13 f0       	push   $0xf013b61a
f01297d1:	e8 2f 6a fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01297d6:	ff 45 f4             	incl   -0xc(%ebp)
f01297d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297dc:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01297e2:	7e be                	jle    f01297a2 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01297e4:	83 ec 0c             	sub    $0xc,%esp
f01297e7:	6a 03                	push   $0x3
f01297e9:	e8 59 3b fe ff       	call   f010d347 <sys_bypassPageFault>
f01297ee:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01297f1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01297f7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f01297fa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01297fd:	05 00 00 50 00       	add    $0x500000,%eax
f0129802:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129805:	e8 2b 3b fe ff       	call   f010d335 <sys_rcr2>
f012980a:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012980d:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129813:	39 d0                	cmp    %edx,%eax
f0129815:	74 19                	je     f0129830 <test_kshrink+0xaec>
f0129817:	68 fc c4 13 f0       	push   $0xf013c4fc
f012981c:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129821:	68 6f 0c 00 00       	push   $0xc6f
f0129826:	68 1a b6 13 f0       	push   $0xf013b61a
f012982b:	e8 d5 69 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129830:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129833:	05 00 10 50 00       	add    $0x501000,%eax
f0129838:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f012983b:	e8 f5 3a fe ff       	call   f010d335 <sys_rcr2>
f0129840:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129843:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129849:	39 d0                	cmp    %edx,%eax
f012984b:	74 19                	je     f0129866 <test_kshrink+0xb22>
f012984d:	68 24 c5 13 f0       	push   $0xf013c524
f0129852:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129857:	68 72 0c 00 00       	push   $0xc72
f012985c:	68 1a b6 13 f0       	push   $0xf013b61a
f0129861:	e8 9f 69 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129866:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129869:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f012986e:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129871:	e8 bf 3a fe ff       	call   f010d335 <sys_rcr2>
f0129876:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129879:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f012987f:	39 d0                	cmp    %edx,%eax
f0129881:	74 19                	je     f012989c <test_kshrink+0xb58>
f0129883:	68 50 c5 13 f0       	push   $0xf013c550
f0129888:	68 e5 c3 13 f0       	push   $0xf013c3e5
f012988d:	68 75 0c 00 00       	push   $0xc75
f0129892:	68 1a b6 13 f0       	push   $0xf013b61a
f0129897:	e8 69 69 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012989c:	83 ec 0c             	sub    $0xc,%esp
f012989f:	6a 00                	push   $0x0
f01298a1:	e8 a1 3a fe ff       	call   f010d347 <sys_bypassPageFault>
f01298a6:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01298a9:	e8 f9 35 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01298ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298b1:	e8 12 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298b6:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01298b9:	83 ec 0c             	sub    $0xc,%esp
f01298bc:	68 00 00 20 00       	push   $0x200000
f01298c1:	e8 4f e5 fd ff       	call   f0107e15 <kshrink>
f01298c6:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01298c9:	e8 fa a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01298d1:	74 19                	je     f01298ec <test_kshrink+0xba8>
f01298d3:	68 b4 c3 13 f0       	push   $0xf013c3b4
f01298d8:	68 e5 c3 13 f0       	push   $0xf013c3e5
f01298dd:	68 82 0c 00 00       	push   $0xc82
f01298e2:	68 1a b6 13 f0       	push   $0xf013b61a
f01298e7:	e8 19 69 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01298ec:	e8 b6 35 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f01298f1:	89 c2                	mov    %eax,%edx
f01298f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01298f6:	29 c2                	sub    %eax,%edx
f01298f8:	89 d0                	mov    %edx,%eax
f01298fa:	3d 00 03 00 00       	cmp    $0x300,%eax
f01298ff:	74 19                	je     f012991a <test_kshrink+0xbd6>
f0129901:	68 7c c5 13 f0       	push   $0xf013c57c
f0129906:	68 e5 c3 13 f0       	push   $0xf013c3e5
f012990b:	68 83 0c 00 00       	push   $0xc83
f0129910:	68 1a b6 13 f0       	push   $0xf013b61a
f0129915:	e8 eb 68 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012991a:	e8 88 35 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012991f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129922:	e8 a1 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129927:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012992a:	83 ec 0c             	sub    $0xc,%esp
f012992d:	68 00 00 40 00       	push   $0x400000
f0129932:	e8 58 e2 fd ff       	call   f0107b8f <kmalloc>
f0129937:	83 c4 10             	add    $0x10,%esp
f012993a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129940:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129947:	10 00 00 
f012994a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129950:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129955:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012995b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129961:	ba 00 00 00 00       	mov    $0x0,%edx
f0129966:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012996c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129972:	29 d0                	sub    %edx,%eax
f0129974:	89 c1                	mov    %eax,%ecx
f0129976:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012997d:	10 00 00 
f0129980:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129985:	0f b6 d0             	movzbl %al,%edx
f0129988:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012998e:	01 d0                	add    %edx,%eax
f0129990:	48                   	dec    %eax
f0129991:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129997:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012999d:	ba 00 00 00 00       	mov    $0x0,%edx
f01299a2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01299a8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01299ae:	29 d0                	sub    %edx,%eax
f01299b0:	01 c1                	add    %eax,%ecx
f01299b2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01299b9:	10 00 00 
f01299bc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01299c1:	0f b6 c0             	movzbl %al,%eax
f01299c4:	c1 e0 04             	shl    $0x4,%eax
f01299c7:	89 c2                	mov    %eax,%edx
f01299c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01299cf:	01 d0                	add    %edx,%eax
f01299d1:	48                   	dec    %eax
f01299d2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01299d8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01299de:	ba 00 00 00 00       	mov    $0x0,%edx
f01299e3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01299e9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01299ef:	29 d0                	sub    %edx,%eax
f01299f1:	01 c8                	add    %ecx,%eax
f01299f3:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01299f9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01299ff:	83 ec 04             	sub    $0x4,%esp
f0129a02:	52                   	push   %edx
f0129a03:	50                   	push   %eax
f0129a04:	68 ac c5 13 f0       	push   $0xf013c5ac
f0129a09:	e8 00 73 fd ff       	call   f0100d0e <cprintf>
f0129a0e:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129a11:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129a17:	89 c1                	mov    %eax,%ecx
f0129a19:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129a20:	10 00 00 
f0129a23:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129a29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a2e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129a34:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129a3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a3f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129a45:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129a4b:	29 d0                	sub    %edx,%eax
f0129a4d:	89 c3                	mov    %eax,%ebx
f0129a4f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129a56:	10 00 00 
f0129a59:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129a5e:	0f b6 d0             	movzbl %al,%edx
f0129a61:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129a67:	01 d0                	add    %edx,%eax
f0129a69:	48                   	dec    %eax
f0129a6a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129a70:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129a76:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a7b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129a81:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129a87:	29 d0                	sub    %edx,%eax
f0129a89:	01 c3                	add    %eax,%ebx
f0129a8b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129a92:	10 00 00 
f0129a95:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129a9a:	0f b6 c0             	movzbl %al,%eax
f0129a9d:	c1 e0 04             	shl    $0x4,%eax
f0129aa0:	89 c2                	mov    %eax,%edx
f0129aa2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129aa8:	01 d0                	add    %edx,%eax
f0129aaa:	48                   	dec    %eax
f0129aab:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129ab1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129abc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129ac2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129ac8:	29 d0                	sub    %edx,%eax
f0129aca:	01 d8                	add    %ebx,%eax
f0129acc:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129ad1:	39 c1                	cmp    %eax,%ecx
f0129ad3:	74 17                	je     f0129aec <test_kshrink+0xda8>
f0129ad5:	83 ec 04             	sub    $0x4,%esp
f0129ad8:	68 c8 c5 13 f0       	push   $0xf013c5c8
f0129add:	68 8e 0c 00 00       	push   $0xc8e
f0129ae2:	68 1a b6 13 f0       	push   $0xf013b61a
f0129ae7:	e8 19 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129aec:	e8 d7 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129af1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129af4:	74 17                	je     f0129b0d <test_kshrink+0xdc9>
f0129af6:	83 ec 04             	sub    $0x4,%esp
f0129af9:	68 34 b6 13 f0       	push   $0xf013b634
f0129afe:	68 8f 0c 00 00       	push   $0xc8f
f0129b03:	68 1a b6 13 f0       	push   $0xf013b61a
f0129b08:	e8 f8 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b0d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b10:	e8 92 33 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129b15:	29 c3                	sub    %eax,%ebx
f0129b17:	89 d8                	mov    %ebx,%eax
f0129b19:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129b1e:	74 17                	je     f0129b37 <test_kshrink+0xdf3>
f0129b20:	83 ec 04             	sub    $0x4,%esp
f0129b23:	68 9c b6 13 f0       	push   $0xf013b69c
f0129b28:	68 90 0c 00 00       	push   $0xc90
f0129b2d:	68 1a b6 13 f0       	push   $0xf013b61a
f0129b32:	e8 ce 66 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129b37:	e8 6b 33 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129b3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b3f:	e8 84 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b44:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129b47:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b4d:	83 ec 0c             	sub    $0xc,%esp
f0129b50:	50                   	push   %eax
f0129b51:	e8 04 e1 fd ff       	call   f0107c5a <kfree>
f0129b56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b59:	e8 6a a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b61:	74 17                	je     f0129b7a <test_kshrink+0xe36>
f0129b63:	83 ec 04             	sub    $0x4,%esp
f0129b66:	68 34 b6 13 f0       	push   $0xf013b634
f0129b6b:	68 9a 0c 00 00       	push   $0xc9a
f0129b70:	68 1a b6 13 f0       	push   $0xf013b61a
f0129b75:	e8 8b 66 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129b7a:	e8 28 33 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129b7f:	89 c2                	mov    %eax,%edx
f0129b81:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129b84:	29 c2                	sub    %eax,%edx
f0129b86:	89 d0                	mov    %edx,%eax
f0129b88:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129b8d:	74 17                	je     f0129ba6 <test_kshrink+0xe62>
f0129b8f:	83 ec 04             	sub    $0x4,%esp
f0129b92:	68 cc be 13 f0       	push   $0xf013becc
f0129b97:	68 9b 0c 00 00       	push   $0xc9b
f0129b9c:	68 1a b6 13 f0       	push   $0xf013b61a
f0129ba1:	e8 5f 66 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129ba6:	e8 fc 32 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129bab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bae:	e8 15 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bb3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129bb6:	83 ec 0c             	sub    $0xc,%esp
f0129bb9:	68 00 b0 3f 00       	push   $0x3fb000
f0129bbe:	e8 52 e2 fd ff       	call   f0107e15 <kshrink>
f0129bc3:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129bc6:	e8 fd a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bcb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129bce:	74 19                	je     f0129be9 <test_kshrink+0xea5>
f0129bd0:	68 b4 c3 13 f0       	push   $0xf013c3b4
f0129bd5:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129bda:	68 a5 0c 00 00       	push   $0xca5
f0129bdf:	68 1a b6 13 f0       	push   $0xf013b61a
f0129be4:	e8 1c 66 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129be9:	e8 b9 32 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129bee:	89 c2                	mov    %eax,%edx
f0129bf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129bf3:	29 c2                	sub    %eax,%edx
f0129bf5:	89 d0                	mov    %edx,%eax
f0129bf7:	83 f8 05             	cmp    $0x5,%eax
f0129bfa:	74 19                	je     f0129c15 <test_kshrink+0xed1>
f0129bfc:	68 1c c6 13 f0       	push   $0xf013c61c
f0129c01:	68 e5 c3 13 f0       	push   $0xf013c3e5
f0129c06:	68 a6 0c 00 00       	push   $0xca6
f0129c0b:	68 1a b6 13 f0       	push   $0xf013b61a
f0129c10:	e8 f0 65 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129c15:	83 ec 0c             	sub    $0xc,%esp
f0129c18:	68 78 c3 13 f0       	push   $0xf013c378
f0129c1d:	e8 ec 70 fd ff       	call   f0100d0e <cprintf>
f0129c22:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129c25:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129c2a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129c2d:	5b                   	pop    %ebx
f0129c2e:	5f                   	pop    %edi
f0129c2f:	5d                   	pop    %ebp
f0129c30:	c3                   	ret    

f0129c31 <test_kfreelast>:


int test_kfreelast()
{
f0129c31:	55                   	push   %ebp
f0129c32:	89 e5                	mov    %esp,%ebp
f0129c34:	57                   	push   %edi
f0129c35:	53                   	push   %ebx
f0129c36:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129c3c:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129c40:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129c44:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129c4a:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129c50:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129c57:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129c5e:	e8 44 32 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129c63:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129c66:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129c6c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129c71:	b8 00 00 00 00       	mov    $0x0,%eax
f0129c76:	89 d7                	mov    %edx,%edi
f0129c78:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129c7a:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129c80:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129c85:	b8 00 00 00 00       	mov    $0x0,%eax
f0129c8a:	89 d7                	mov    %edx,%edi
f0129c8c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129c8e:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129c94:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129c99:	b8 00 00 00 00       	mov    $0x0,%eax
f0129c9e:	89 d7                	mov    %edx,%edi
f0129ca0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ca2:	e8 00 32 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129ca7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129caa:	e8 19 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129caf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129cb2:	83 ec 0c             	sub    $0xc,%esp
f0129cb5:	68 00 fc 1f 00       	push   $0x1ffc00
f0129cba:	e8 d0 de fd ff       	call   f0107b8f <kmalloc>
f0129cbf:	83 c4 10             	add    $0x10,%esp
f0129cc2:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129cc8:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129cce:	89 c1                	mov    %eax,%ecx
f0129cd0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129cd7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129cda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129cdf:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129ce2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cea:	f7 75 cc             	divl   -0x34(%ebp)
f0129ced:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129cf0:	29 d0                	sub    %edx,%eax
f0129cf2:	89 c3                	mov    %eax,%ebx
f0129cf4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129cfb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129d00:	0f b6 d0             	movzbl %al,%edx
f0129d03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129d06:	01 d0                	add    %edx,%eax
f0129d08:	48                   	dec    %eax
f0129d09:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129d0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d14:	f7 75 c4             	divl   -0x3c(%ebp)
f0129d17:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d1a:	29 d0                	sub    %edx,%eax
f0129d1c:	01 c3                	add    %eax,%ebx
f0129d1e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129d25:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129d2a:	0f b6 c0             	movzbl %al,%eax
f0129d2d:	c1 e0 04             	shl    $0x4,%eax
f0129d30:	89 c2                	mov    %eax,%edx
f0129d32:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129d35:	01 d0                	add    %edx,%eax
f0129d37:	48                   	dec    %eax
f0129d38:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129d3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129d3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d43:	f7 75 bc             	divl   -0x44(%ebp)
f0129d46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129d49:	29 d0                	sub    %edx,%eax
f0129d4b:	01 d8                	add    %ebx,%eax
f0129d4d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129d52:	39 c1                	cmp    %eax,%ecx
f0129d54:	74 17                	je     f0129d6d <test_kfreelast+0x13c>
f0129d56:	83 ec 04             	sub    $0x4,%esp
f0129d59:	68 00 b7 13 f0       	push   $0xf013b700
f0129d5e:	68 ca 0c 00 00       	push   $0xcca
f0129d63:	68 1a b6 13 f0       	push   $0xf013b61a
f0129d68:	e8 98 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d6d:	e8 56 a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d72:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d75:	74 17                	je     f0129d8e <test_kfreelast+0x15d>
f0129d77:	83 ec 04             	sub    $0x4,%esp
f0129d7a:	68 34 b6 13 f0       	push   $0xf013b634
f0129d7f:	68 cb 0c 00 00       	push   $0xccb
f0129d84:	68 1a b6 13 f0       	push   $0xf013b61a
f0129d89:	e8 77 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d8e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d91:	e8 11 31 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129d96:	29 c3                	sub    %eax,%ebx
f0129d98:	89 d8                	mov    %ebx,%eax
f0129d9a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129d9f:	74 17                	je     f0129db8 <test_kfreelast+0x187>
f0129da1:	83 ec 04             	sub    $0x4,%esp
f0129da4:	68 9c b6 13 f0       	push   $0xf013b69c
f0129da9:	68 cc 0c 00 00       	push   $0xccc
f0129dae:	68 1a b6 13 f0       	push   $0xf013b61a
f0129db3:	e8 4d 64 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129db8:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129dbf:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dc2:	e8 e0 30 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129dc7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dca:	e8 f9 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129dcf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129dd2:	83 ec 0c             	sub    $0xc,%esp
f0129dd5:	68 00 fc 1f 00       	push   $0x1ffc00
f0129dda:	e8 b0 dd fd ff       	call   f0107b8f <kmalloc>
f0129ddf:	83 c4 10             	add    $0x10,%esp
f0129de2:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129de8:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129dee:	89 c1                	mov    %eax,%ecx
f0129df0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129df7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129dfa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129dff:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129e02:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e05:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e0a:	f7 75 b4             	divl   -0x4c(%ebp)
f0129e0d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e10:	29 d0                	sub    %edx,%eax
f0129e12:	89 c3                	mov    %eax,%ebx
f0129e14:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129e1b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129e20:	0f b6 d0             	movzbl %al,%edx
f0129e23:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129e26:	01 d0                	add    %edx,%eax
f0129e28:	48                   	dec    %eax
f0129e29:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129e2c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e34:	f7 75 ac             	divl   -0x54(%ebp)
f0129e37:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e3a:	29 d0                	sub    %edx,%eax
f0129e3c:	01 c3                	add    %eax,%ebx
f0129e3e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129e45:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129e4a:	0f b6 c0             	movzbl %al,%eax
f0129e4d:	c1 e0 04             	shl    $0x4,%eax
f0129e50:	89 c2                	mov    %eax,%edx
f0129e52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129e55:	01 d0                	add    %edx,%eax
f0129e57:	48                   	dec    %eax
f0129e58:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129e5b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129e5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e63:	f7 75 a4             	divl   -0x5c(%ebp)
f0129e66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129e69:	29 d0                	sub    %edx,%eax
f0129e6b:	01 d8                	add    %ebx,%eax
f0129e6d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129e72:	39 c1                	cmp    %eax,%ecx
f0129e74:	74 17                	je     f0129e8d <test_kfreelast+0x25c>
f0129e76:	83 ec 04             	sub    $0x4,%esp
f0129e79:	68 00 b7 13 f0       	push   $0xf013b700
f0129e7e:	68 d3 0c 00 00       	push   $0xcd3
f0129e83:	68 1a b6 13 f0       	push   $0xf013b61a
f0129e88:	e8 78 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e8d:	e8 36 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e92:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e95:	74 17                	je     f0129eae <test_kfreelast+0x27d>
f0129e97:	83 ec 04             	sub    $0x4,%esp
f0129e9a:	68 34 b6 13 f0       	push   $0xf013b634
f0129e9f:	68 d4 0c 00 00       	push   $0xcd4
f0129ea4:	68 1a b6 13 f0       	push   $0xf013b61a
f0129ea9:	e8 57 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129eae:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129eb1:	e8 f1 2f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129eb6:	29 c3                	sub    %eax,%ebx
f0129eb8:	89 d8                	mov    %ebx,%eax
f0129eba:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ebf:	74 17                	je     f0129ed8 <test_kfreelast+0x2a7>
f0129ec1:	83 ec 04             	sub    $0x4,%esp
f0129ec4:	68 9c b6 13 f0       	push   $0xf013b69c
f0129ec9:	68 d5 0c 00 00       	push   $0xcd5
f0129ece:	68 1a b6 13 f0       	push   $0xf013b61a
f0129ed3:	e8 2d 63 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129ed8:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129edf:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ee2:	e8 c0 2f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129ee7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129eea:	e8 d9 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129eef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129ef2:	83 ec 0c             	sub    $0xc,%esp
f0129ef5:	68 00 08 00 00       	push   $0x800
f0129efa:	e8 90 dc fd ff       	call   f0107b8f <kmalloc>
f0129eff:	83 c4 10             	add    $0x10,%esp
f0129f02:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f08:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129f0e:	89 c1                	mov    %eax,%ecx
f0129f10:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129f17:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129f1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f1f:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129f22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f25:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f2a:	f7 75 9c             	divl   -0x64(%ebp)
f0129f2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f30:	29 d0                	sub    %edx,%eax
f0129f32:	89 c3                	mov    %eax,%ebx
f0129f34:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129f3b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129f40:	0f b6 d0             	movzbl %al,%edx
f0129f43:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129f46:	01 d0                	add    %edx,%eax
f0129f48:	48                   	dec    %eax
f0129f49:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129f4c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f54:	f7 75 94             	divl   -0x6c(%ebp)
f0129f57:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129f5a:	29 d0                	sub    %edx,%eax
f0129f5c:	01 c3                	add    %eax,%ebx
f0129f5e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129f65:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129f6a:	0f b6 c0             	movzbl %al,%eax
f0129f6d:	c1 e0 04             	shl    $0x4,%eax
f0129f70:	89 c2                	mov    %eax,%edx
f0129f72:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129f75:	01 d0                	add    %edx,%eax
f0129f77:	48                   	dec    %eax
f0129f78:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129f7b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129f7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f83:	f7 75 8c             	divl   -0x74(%ebp)
f0129f86:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129f89:	29 d0                	sub    %edx,%eax
f0129f8b:	01 d8                	add    %ebx,%eax
f0129f8d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129f92:	39 c1                	cmp    %eax,%ecx
f0129f94:	74 17                	je     f0129fad <test_kfreelast+0x37c>
f0129f96:	83 ec 04             	sub    $0x4,%esp
f0129f99:	68 00 b7 13 f0       	push   $0xf013b700
f0129f9e:	68 dc 0c 00 00       	push   $0xcdc
f0129fa3:	68 1a b6 13 f0       	push   $0xf013b61a
f0129fa8:	e8 58 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129fad:	e8 16 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129fb2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fb5:	74 17                	je     f0129fce <test_kfreelast+0x39d>
f0129fb7:	83 ec 04             	sub    $0x4,%esp
f0129fba:	68 34 b6 13 f0       	push   $0xf013b634
f0129fbf:	68 dd 0c 00 00       	push   $0xcdd
f0129fc4:	68 1a b6 13 f0       	push   $0xf013b61a
f0129fc9:	e8 37 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fce:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fd1:	e8 d1 2e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f0129fd6:	29 c3                	sub    %eax,%ebx
f0129fd8:	89 d8                	mov    %ebx,%eax
f0129fda:	83 f8 01             	cmp    $0x1,%eax
f0129fdd:	74 17                	je     f0129ff6 <test_kfreelast+0x3c5>
f0129fdf:	83 ec 04             	sub    $0x4,%esp
f0129fe2:	68 9c b6 13 f0       	push   $0xf013b69c
f0129fe7:	68 de 0c 00 00       	push   $0xcde
f0129fec:	68 1a b6 13 f0       	push   $0xf013b61a
f0129ff1:	e8 0f 62 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129ff6:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129ffd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a000:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a006:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a009:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a010:	eb 0e                	jmp    f012a020 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a012:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a015:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a018:	01 d0                	add    %edx,%eax
f012a01a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a01d:	ff 45 f4             	incl   -0xc(%ebp)
f012a020:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a026:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a029:	7f e7                	jg     f012a012 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a02b:	e8 77 2e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a030:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a033:	e8 90 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a038:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a03b:	83 ec 0c             	sub    $0xc,%esp
f012a03e:	68 00 08 00 00       	push   $0x800
f012a043:	e8 47 db fd ff       	call   f0107b8f <kmalloc>
f012a048:	83 c4 10             	add    $0x10,%esp
f012a04b:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a051:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a057:	89 c1                	mov    %eax,%ecx
f012a059:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a060:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a063:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a068:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a06e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a074:	ba 00 00 00 00       	mov    $0x0,%edx
f012a079:	f7 75 80             	divl   -0x80(%ebp)
f012a07c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a082:	29 d0                	sub    %edx,%eax
f012a084:	89 c3                	mov    %eax,%ebx
f012a086:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a08d:	10 00 00 
f012a090:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a095:	0f b6 d0             	movzbl %al,%edx
f012a098:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a09e:	01 d0                	add    %edx,%eax
f012a0a0:	48                   	dec    %eax
f012a0a1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a0a7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a0ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0b2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a0b8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a0be:	29 d0                	sub    %edx,%eax
f012a0c0:	01 c3                	add    %eax,%ebx
f012a0c2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a0c9:	10 00 00 
f012a0cc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a0d1:	0f b6 c0             	movzbl %al,%eax
f012a0d4:	c1 e0 04             	shl    $0x4,%eax
f012a0d7:	89 c2                	mov    %eax,%edx
f012a0d9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a0df:	01 d0                	add    %edx,%eax
f012a0e1:	48                   	dec    %eax
f012a0e2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a0e8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a0ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0f3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a0f9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a0ff:	29 d0                	sub    %edx,%eax
f012a101:	01 d8                	add    %ebx,%eax
f012a103:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a108:	39 c1                	cmp    %eax,%ecx
f012a10a:	74 17                	je     f012a123 <test_kfreelast+0x4f2>
f012a10c:	83 ec 04             	sub    $0x4,%esp
f012a10f:	68 00 b7 13 f0       	push   $0xf013b700
f012a114:	68 ea 0c 00 00       	push   $0xcea
f012a119:	68 1a b6 13 f0       	push   $0xf013b61a
f012a11e:	e8 e2 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a123:	e8 a0 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a128:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a12b:	74 17                	je     f012a144 <test_kfreelast+0x513>
f012a12d:	83 ec 04             	sub    $0x4,%esp
f012a130:	68 34 b6 13 f0       	push   $0xf013b634
f012a135:	68 eb 0c 00 00       	push   $0xceb
f012a13a:	68 1a b6 13 f0       	push   $0xf013b61a
f012a13f:	e8 c1 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a144:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a147:	e8 5b 2d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a14c:	29 c3                	sub    %eax,%ebx
f012a14e:	89 d8                	mov    %ebx,%eax
f012a150:	83 f8 01             	cmp    $0x1,%eax
f012a153:	74 17                	je     f012a16c <test_kfreelast+0x53b>
f012a155:	83 ec 04             	sub    $0x4,%esp
f012a158:	68 9c b6 13 f0       	push   $0xf013b69c
f012a15d:	68 ec 0c 00 00       	push   $0xcec
f012a162:	68 1a b6 13 f0       	push   $0xf013b61a
f012a167:	e8 99 60 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a16c:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a173:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a176:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a17c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a17f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a186:	eb 0e                	jmp    f012a196 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a188:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a18b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a18e:	01 d0                	add    %edx,%eax
f012a190:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a193:	ff 45 f4             	incl   -0xc(%ebp)
f012a196:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a19c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a19f:	7f e7                	jg     f012a188 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a1a1:	e8 01 2d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a1a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1a9:	e8 1a 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a1b1:	83 ec 0c             	sub    $0xc,%esp
f012a1b4:	68 00 1c 00 00       	push   $0x1c00
f012a1b9:	e8 d1 d9 fd ff       	call   f0107b8f <kmalloc>
f012a1be:	83 c4 10             	add    $0x10,%esp
f012a1c1:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a1c7:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a1cd:	89 c1                	mov    %eax,%ecx
f012a1cf:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a1d6:	10 00 00 
f012a1d9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a1df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a1e4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a1ea:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a1f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1f5:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a1fb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a201:	29 d0                	sub    %edx,%eax
f012a203:	89 c3                	mov    %eax,%ebx
f012a205:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a20c:	10 00 00 
f012a20f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a214:	0f b6 d0             	movzbl %al,%edx
f012a217:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a21d:	01 d0                	add    %edx,%eax
f012a21f:	48                   	dec    %eax
f012a220:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a226:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a22c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a231:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a237:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a23d:	29 d0                	sub    %edx,%eax
f012a23f:	01 c3                	add    %eax,%ebx
f012a241:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a248:	10 00 00 
f012a24b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a250:	0f b6 c0             	movzbl %al,%eax
f012a253:	c1 e0 04             	shl    $0x4,%eax
f012a256:	89 c2                	mov    %eax,%edx
f012a258:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a25e:	01 d0                	add    %edx,%eax
f012a260:	48                   	dec    %eax
f012a261:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a267:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a26d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a272:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a278:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a27e:	29 d0                	sub    %edx,%eax
f012a280:	01 d8                	add    %ebx,%eax
f012a282:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a287:	39 c1                	cmp    %eax,%ecx
f012a289:	74 17                	je     f012a2a2 <test_kfreelast+0x671>
f012a28b:	83 ec 04             	sub    $0x4,%esp
f012a28e:	68 00 b7 13 f0       	push   $0xf013b700
f012a293:	68 f8 0c 00 00       	push   $0xcf8
f012a298:	68 1a b6 13 f0       	push   $0xf013b61a
f012a29d:	e8 63 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2a2:	e8 21 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2a7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2aa:	74 17                	je     f012a2c3 <test_kfreelast+0x692>
f012a2ac:	83 ec 04             	sub    $0x4,%esp
f012a2af:	68 34 b6 13 f0       	push   $0xf013b634
f012a2b4:	68 f9 0c 00 00       	push   $0xcf9
f012a2b9:	68 1a b6 13 f0       	push   $0xf013b61a
f012a2be:	e8 42 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2c6:	e8 dc 2b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a2cb:	29 c3                	sub    %eax,%ebx
f012a2cd:	89 d8                	mov    %ebx,%eax
f012a2cf:	83 f8 02             	cmp    $0x2,%eax
f012a2d2:	74 17                	je     f012a2eb <test_kfreelast+0x6ba>
f012a2d4:	83 ec 04             	sub    $0x4,%esp
f012a2d7:	68 9c b6 13 f0       	push   $0xf013b69c
f012a2dc:	68 fa 0c 00 00       	push   $0xcfa
f012a2e1:	68 1a b6 13 f0       	push   $0xf013b61a
f012a2e6:	e8 1a 5f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a2eb:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a2f2:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a2f5:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a2fb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a2fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a305:	eb 0e                	jmp    f012a315 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a307:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a30a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a30d:	01 d0                	add    %edx,%eax
f012a30f:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a312:	ff 45 f4             	incl   -0xc(%ebp)
f012a315:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a31b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a31e:	7f e7                	jg     f012a307 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a320:	e8 82 2b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a325:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a328:	e8 9b 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a32d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a330:	83 ec 0c             	sub    $0xc,%esp
f012a333:	68 00 fc 2f 00       	push   $0x2ffc00
f012a338:	e8 52 d8 fd ff       	call   f0107b8f <kmalloc>
f012a33d:	83 c4 10             	add    $0x10,%esp
f012a340:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a346:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a34c:	89 c1                	mov    %eax,%ecx
f012a34e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a355:	10 00 00 
f012a358:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a35e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a363:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a369:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a36f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a374:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a37a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a380:	29 d0                	sub    %edx,%eax
f012a382:	89 c3                	mov    %eax,%ebx
f012a384:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a38b:	10 00 00 
f012a38e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a393:	0f b6 d0             	movzbl %al,%edx
f012a396:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a39c:	01 d0                	add    %edx,%eax
f012a39e:	48                   	dec    %eax
f012a39f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a3a5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a3ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3b0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a3b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a3bc:	29 d0                	sub    %edx,%eax
f012a3be:	01 c3                	add    %eax,%ebx
f012a3c0:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a3c7:	10 00 00 
f012a3ca:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a3cf:	0f b6 c0             	movzbl %al,%eax
f012a3d2:	c1 e0 04             	shl    $0x4,%eax
f012a3d5:	89 c2                	mov    %eax,%edx
f012a3d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a3dd:	01 d0                	add    %edx,%eax
f012a3df:	48                   	dec    %eax
f012a3e0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a3e6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a3ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3f1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a3f7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a3fd:	29 d0                	sub    %edx,%eax
f012a3ff:	01 d8                	add    %ebx,%eax
f012a401:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a406:	39 c1                	cmp    %eax,%ecx
f012a408:	74 17                	je     f012a421 <test_kfreelast+0x7f0>
f012a40a:	83 ec 04             	sub    $0x4,%esp
f012a40d:	68 00 b7 13 f0       	push   $0xf013b700
f012a412:	68 06 0d 00 00       	push   $0xd06
f012a417:	68 1a b6 13 f0       	push   $0xf013b61a
f012a41c:	e8 e4 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a421:	e8 a2 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a426:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a429:	74 17                	je     f012a442 <test_kfreelast+0x811>
f012a42b:	83 ec 04             	sub    $0x4,%esp
f012a42e:	68 34 b6 13 f0       	push   $0xf013b634
f012a433:	68 07 0d 00 00       	push   $0xd07
f012a438:	68 1a b6 13 f0       	push   $0xf013b61a
f012a43d:	e8 c3 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a442:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a445:	e8 5d 2a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a44a:	29 c3                	sub    %eax,%ebx
f012a44c:	89 d8                	mov    %ebx,%eax
f012a44e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a453:	74 17                	je     f012a46c <test_kfreelast+0x83b>
f012a455:	83 ec 04             	sub    $0x4,%esp
f012a458:	68 9c b6 13 f0       	push   $0xf013b69c
f012a45d:	68 08 0d 00 00       	push   $0xd08
f012a462:	68 1a b6 13 f0       	push   $0xf013b61a
f012a467:	e8 99 5d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a46c:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a473:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a476:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a47c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a47f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a486:	eb 0e                	jmp    f012a496 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a488:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a48b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a48e:	01 d0                	add    %edx,%eax
f012a490:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a493:	ff 45 f4             	incl   -0xc(%ebp)
f012a496:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a49c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a49f:	7f e7                	jg     f012a488 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4a1:	e8 01 2a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a4a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4a9:	e8 1a 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a4b1:	83 ec 0c             	sub    $0xc,%esp
f012a4b4:	68 00 fc 5f 00       	push   $0x5ffc00
f012a4b9:	e8 d1 d6 fd ff       	call   f0107b8f <kmalloc>
f012a4be:	83 c4 10             	add    $0x10,%esp
f012a4c1:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4c7:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a4cd:	89 c1                	mov    %eax,%ecx
f012a4cf:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a4d6:	10 00 00 
f012a4d9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a4df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4e4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a4ea:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a4f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4f5:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a4fb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a501:	29 d0                	sub    %edx,%eax
f012a503:	89 c3                	mov    %eax,%ebx
f012a505:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a50c:	10 00 00 
f012a50f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a514:	0f b6 d0             	movzbl %al,%edx
f012a517:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a51d:	01 d0                	add    %edx,%eax
f012a51f:	48                   	dec    %eax
f012a520:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a526:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a52c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a531:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a537:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a53d:	29 d0                	sub    %edx,%eax
f012a53f:	01 c3                	add    %eax,%ebx
f012a541:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a548:	10 00 00 
f012a54b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a550:	0f b6 c0             	movzbl %al,%eax
f012a553:	c1 e0 04             	shl    $0x4,%eax
f012a556:	89 c2                	mov    %eax,%edx
f012a558:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a55e:	01 d0                	add    %edx,%eax
f012a560:	48                   	dec    %eax
f012a561:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a567:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a56d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a572:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a578:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a57e:	29 d0                	sub    %edx,%eax
f012a580:	01 d8                	add    %ebx,%eax
f012a582:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a587:	39 c1                	cmp    %eax,%ecx
f012a589:	74 17                	je     f012a5a2 <test_kfreelast+0x971>
f012a58b:	83 ec 04             	sub    $0x4,%esp
f012a58e:	68 00 b7 13 f0       	push   $0xf013b700
f012a593:	68 14 0d 00 00       	push   $0xd14
f012a598:	68 1a b6 13 f0       	push   $0xf013b61a
f012a59d:	e8 63 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5a2:	e8 21 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5a7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5aa:	74 17                	je     f012a5c3 <test_kfreelast+0x992>
f012a5ac:	83 ec 04             	sub    $0x4,%esp
f012a5af:	68 34 b6 13 f0       	push   $0xf013b634
f012a5b4:	68 15 0d 00 00       	push   $0xd15
f012a5b9:	68 1a b6 13 f0       	push   $0xf013b61a
f012a5be:	e8 42 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5c6:	e8 dc 28 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a5cb:	29 c3                	sub    %eax,%ebx
f012a5cd:	89 d8                	mov    %ebx,%eax
f012a5cf:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a5d4:	74 17                	je     f012a5ed <test_kfreelast+0x9bc>
f012a5d6:	83 ec 04             	sub    $0x4,%esp
f012a5d9:	68 9c b6 13 f0       	push   $0xf013b69c
f012a5de:	68 16 0d 00 00       	push   $0xd16
f012a5e3:	68 1a b6 13 f0       	push   $0xf013b61a
f012a5e8:	e8 18 5c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a5ed:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a5f4:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5f7:	e8 ab 28 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a5fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5ff:	e8 c4 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a604:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a607:	83 ec 0c             	sub    $0xc,%esp
f012a60a:	68 00 38 00 00       	push   $0x3800
f012a60f:	e8 7b d5 fd ff       	call   f0107b8f <kmalloc>
f012a614:	83 c4 10             	add    $0x10,%esp
f012a617:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a61d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a623:	89 c1                	mov    %eax,%ecx
f012a625:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a62c:	10 00 00 
f012a62f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a635:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a63a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a640:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a646:	ba 00 00 00 00       	mov    $0x0,%edx
f012a64b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a651:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a657:	29 d0                	sub    %edx,%eax
f012a659:	89 c3                	mov    %eax,%ebx
f012a65b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a662:	10 00 00 
f012a665:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a66a:	0f b6 d0             	movzbl %al,%edx
f012a66d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a673:	01 d0                	add    %edx,%eax
f012a675:	48                   	dec    %eax
f012a676:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a67c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a682:	ba 00 00 00 00       	mov    $0x0,%edx
f012a687:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a68d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a693:	29 d0                	sub    %edx,%eax
f012a695:	01 c3                	add    %eax,%ebx
f012a697:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a69e:	10 00 00 
f012a6a1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a6a6:	0f b6 c0             	movzbl %al,%eax
f012a6a9:	c1 e0 04             	shl    $0x4,%eax
f012a6ac:	89 c2                	mov    %eax,%edx
f012a6ae:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a6b4:	01 d0                	add    %edx,%eax
f012a6b6:	48                   	dec    %eax
f012a6b7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a6bd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6c8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a6ce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a6d4:	29 d0                	sub    %edx,%eax
f012a6d6:	01 d8                	add    %ebx,%eax
f012a6d8:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a6dd:	39 c1                	cmp    %eax,%ecx
f012a6df:	74 17                	je     f012a6f8 <test_kfreelast+0xac7>
f012a6e1:	83 ec 04             	sub    $0x4,%esp
f012a6e4:	68 00 b7 13 f0       	push   $0xf013b700
f012a6e9:	68 1d 0d 00 00       	push   $0xd1d
f012a6ee:	68 1a b6 13 f0       	push   $0xf013b61a
f012a6f3:	e8 0d 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a6f8:	e8 cb 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a6fd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a700:	74 17                	je     f012a719 <test_kfreelast+0xae8>
f012a702:	83 ec 04             	sub    $0x4,%esp
f012a705:	68 34 b6 13 f0       	push   $0xf013b634
f012a70a:	68 1e 0d 00 00       	push   $0xd1e
f012a70f:	68 1a b6 13 f0       	push   $0xf013b61a
f012a714:	e8 ec 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a719:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a71c:	e8 86 27 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a721:	29 c3                	sub    %eax,%ebx
f012a723:	89 d8                	mov    %ebx,%eax
f012a725:	83 f8 04             	cmp    $0x4,%eax
f012a728:	74 17                	je     f012a741 <test_kfreelast+0xb10>
f012a72a:	83 ec 04             	sub    $0x4,%esp
f012a72d:	68 9c b6 13 f0       	push   $0xf013b69c
f012a732:	68 1f 0d 00 00       	push   $0xd1f
f012a737:	68 1a b6 13 f0       	push   $0xf013b61a
f012a73c:	e8 c4 5a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a741:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a748:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a74b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a751:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a754:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a75b:	eb 0e                	jmp    f012a76b <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a75d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a760:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a763:	01 d0                	add    %edx,%eax
f012a765:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a768:	ff 45 f4             	incl   -0xc(%ebp)
f012a76b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a771:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a774:	7f e7                	jg     f012a75d <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a776:	e8 2c 27 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a77b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a781:	e8 42 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a786:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a78c:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a792:	83 ec 0c             	sub    $0xc,%esp
f012a795:	50                   	push   %eax
f012a796:	e8 bf d4 fd ff       	call   f0107c5a <kfree>
f012a79b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a79e:	e8 25 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a7a3:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a7a9:	74 17                	je     f012a7c2 <test_kfreelast+0xb91>
f012a7ab:	83 ec 04             	sub    $0x4,%esp
f012a7ae:	68 34 b6 13 f0       	push   $0xf013b634
f012a7b3:	68 2e 0d 00 00       	push   $0xd2e
f012a7b8:	68 1a b6 13 f0       	push   $0xf013b61a
f012a7bd:	e8 43 5a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a7c2:	e8 e0 26 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a7c7:	89 c2                	mov    %eax,%edx
f012a7c9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a7cf:	29 c2                	sub    %eax,%edx
f012a7d1:	89 d0                	mov    %edx,%eax
f012a7d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a7d8:	74 17                	je     f012a7f1 <test_kfreelast+0xbc0>
f012a7da:	83 ec 04             	sub    $0x4,%esp
f012a7dd:	68 a4 bd 13 f0       	push   $0xf013bda4
f012a7e2:	68 2f 0d 00 00       	push   $0xd2f
f012a7e7:	68 1a b6 13 f0       	push   $0xf013b61a
f012a7ec:	e8 14 5a fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7f1:	e8 b1 26 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a7f6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7fc:	e8 c7 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a801:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a807:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a80d:	83 ec 0c             	sub    $0xc,%esp
f012a810:	50                   	push   %eax
f012a811:	e8 44 d4 fd ff       	call   f0107c5a <kfree>
f012a816:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a819:	e8 aa 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a81e:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a824:	74 17                	je     f012a83d <test_kfreelast+0xc0c>
f012a826:	83 ec 04             	sub    $0x4,%esp
f012a829:	68 34 b6 13 f0       	push   $0xf013b634
f012a82e:	68 35 0d 00 00       	push   $0xd35
f012a833:	68 1a b6 13 f0       	push   $0xf013b61a
f012a838:	e8 c8 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a83d:	e8 65 26 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a842:	89 c2                	mov    %eax,%edx
f012a844:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a84a:	29 c2                	sub    %eax,%edx
f012a84c:	89 d0                	mov    %edx,%eax
f012a84e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a853:	74 17                	je     f012a86c <test_kfreelast+0xc3b>
f012a855:	83 ec 04             	sub    $0x4,%esp
f012a858:	68 a4 bd 13 f0       	push   $0xf013bda4
f012a85d:	68 36 0d 00 00       	push   $0xd36
f012a862:	68 1a b6 13 f0       	push   $0xf013b61a
f012a867:	e8 99 59 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a86c:	e8 36 26 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a871:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a877:	e8 4c 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a87c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a882:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a888:	83 ec 0c             	sub    $0xc,%esp
f012a88b:	50                   	push   %eax
f012a88c:	e8 c9 d3 fd ff       	call   f0107c5a <kfree>
f012a891:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a894:	e8 2f 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a899:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a89f:	74 17                	je     f012a8b8 <test_kfreelast+0xc87>
f012a8a1:	83 ec 04             	sub    $0x4,%esp
f012a8a4:	68 34 b6 13 f0       	push   $0xf013b634
f012a8a9:	68 3c 0d 00 00       	push   $0xd3c
f012a8ae:	68 1a b6 13 f0       	push   $0xf013b61a
f012a8b3:	e8 4d 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a8b8:	e8 ea 25 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012a8bd:	89 c2                	mov    %eax,%edx
f012a8bf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a8c5:	29 c2                	sub    %eax,%edx
f012a8c7:	89 d0                	mov    %edx,%eax
f012a8c9:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a8ce:	74 17                	je     f012a8e7 <test_kfreelast+0xcb6>
f012a8d0:	83 ec 04             	sub    $0x4,%esp
f012a8d3:	68 a4 bd 13 f0       	push   $0xf013bda4
f012a8d8:	68 3d 0d 00 00       	push   $0xd3d
f012a8dd:	68 1a b6 13 f0       	push   $0xf013b61a
f012a8e2:	e8 1e 59 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a8e7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a8ed:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a8f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8f7:	eb 1e                	jmp    f012a917 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a8f9:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a8ff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a902:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a905:	01 c8                	add    %ecx,%eax
f012a907:	8a 00                	mov    (%eax),%al
f012a909:	0f be c0             	movsbl %al,%eax
f012a90c:	01 d0                	add    %edx,%eax
f012a90e:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a914:	ff 45 f4             	incl   -0xc(%ebp)
f012a917:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a91d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a920:	7f d7                	jg     f012a8f9 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a922:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a928:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a92e:	01 c0                	add    %eax,%eax
f012a930:	39 c2                	cmp    %eax,%edx
f012a932:	74 17                	je     f012a94b <test_kfreelast+0xd1a>
f012a934:	83 ec 04             	sub    $0x4,%esp
f012a937:	68 00 be 13 f0       	push   $0xf013be00
f012a93c:	68 48 0d 00 00       	push   $0xd48
f012a941:	68 1a b6 13 f0       	push   $0xf013b61a
f012a946:	e8 ba 58 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a94b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a951:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a954:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a95b:	eb 1e                	jmp    f012a97b <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a95d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a963:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a966:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a969:	01 c8                	add    %ecx,%eax
f012a96b:	8a 00                	mov    (%eax),%al
f012a96d:	0f be c0             	movsbl %al,%eax
f012a970:	01 d0                	add    %edx,%eax
f012a972:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a978:	ff 45 f4             	incl   -0xc(%ebp)
f012a97b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a981:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a984:	7f d7                	jg     f012a95d <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a986:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a98c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a992:	89 c1                	mov    %eax,%ecx
f012a994:	01 c9                	add    %ecx,%ecx
f012a996:	01 c8                	add    %ecx,%eax
f012a998:	39 c2                	cmp    %eax,%edx
f012a99a:	74 17                	je     f012a9b3 <test_kfreelast+0xd82>
f012a99c:	83 ec 04             	sub    $0x4,%esp
f012a99f:	68 00 be 13 f0       	push   $0xf013be00
f012a9a4:	68 50 0d 00 00       	push   $0xd50
f012a9a9:	68 1a b6 13 f0       	push   $0xf013b61a
f012a9ae:	e8 52 58 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a9b3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a9b9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a9bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a9c3:	eb 1e                	jmp    f012a9e3 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a9c5:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a9cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a9ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a9d1:	01 c8                	add    %ecx,%eax
f012a9d3:	8a 00                	mov    (%eax),%al
f012a9d5:	0f be c0             	movsbl %al,%eax
f012a9d8:	01 d0                	add    %edx,%eax
f012a9da:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a9e0:	ff 45 f4             	incl   -0xc(%ebp)
f012a9e3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a9e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a9ec:	7f d7                	jg     f012a9c5 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a9ee:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a9f4:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a9fa:	c1 e2 02             	shl    $0x2,%edx
f012a9fd:	39 d0                	cmp    %edx,%eax
f012a9ff:	74 17                	je     f012aa18 <test_kfreelast+0xde7>
f012aa01:	83 ec 04             	sub    $0x4,%esp
f012aa04:	68 00 be 13 f0       	push   $0xf013be00
f012aa09:	68 58 0d 00 00       	push   $0xd58
f012aa0e:	68 1a b6 13 f0       	push   $0xf013b61a
f012aa13:	e8 ed 57 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012aa18:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012aa1e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012aa21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa28:	eb 1e                	jmp    f012aa48 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012aa2a:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012aa30:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa33:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa36:	01 c8                	add    %ecx,%eax
f012aa38:	8a 00                	mov    (%eax),%al
f012aa3a:	0f be c0             	movsbl %al,%eax
f012aa3d:	01 d0                	add    %edx,%eax
f012aa3f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012aa45:	ff 45 f4             	incl   -0xc(%ebp)
f012aa48:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012aa4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa51:	7f d7                	jg     f012aa2a <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012aa53:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012aa59:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012aa5f:	89 d0                	mov    %edx,%eax
f012aa61:	c1 e0 02             	shl    $0x2,%eax
f012aa64:	01 d0                	add    %edx,%eax
f012aa66:	39 c1                	cmp    %eax,%ecx
f012aa68:	74 17                	je     f012aa81 <test_kfreelast+0xe50>
f012aa6a:	83 ec 04             	sub    $0x4,%esp
f012aa6d:	68 00 be 13 f0       	push   $0xf013be00
f012aa72:	68 60 0d 00 00       	push   $0xd60
f012aa77:	68 1a b6 13 f0       	push   $0xf013b61a
f012aa7c:	e8 84 57 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aa81:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa87:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aa8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa91:	eb 1e                	jmp    f012aab1 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aa93:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aa99:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa9c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa9f:	01 c8                	add    %ecx,%eax
f012aaa1:	8a 00                	mov    (%eax),%al
f012aaa3:	0f be c0             	movsbl %al,%eax
f012aaa6:	01 d0                	add    %edx,%eax
f012aaa8:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012aaae:	ff 45 f4             	incl   -0xc(%ebp)
f012aab1:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012aab7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aaba:	7f d7                	jg     f012aa93 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012aabc:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012aac2:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012aac8:	89 d0                	mov    %edx,%eax
f012aaca:	01 c0                	add    %eax,%eax
f012aacc:	01 d0                	add    %edx,%eax
f012aace:	01 c0                	add    %eax,%eax
f012aad0:	01 d0                	add    %edx,%eax
f012aad2:	39 c1                	cmp    %eax,%ecx
f012aad4:	74 17                	je     f012aaed <test_kfreelast+0xebc>
f012aad6:	83 ec 04             	sub    $0x4,%esp
f012aad9:	68 00 be 13 f0       	push   $0xf013be00
f012aade:	68 68 0d 00 00       	push   $0xd68
f012aae3:	68 1a b6 13 f0       	push   $0xf013b61a
f012aae8:	e8 18 57 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012aaed:	e8 b5 23 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012aaf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aaf5:	e8 ce 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aafa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012aafd:	83 ec 0c             	sub    $0xc,%esp
f012ab00:	68 00 50 00 00       	push   $0x5000
f012ab05:	e8 85 d0 fd ff       	call   f0107b8f <kmalloc>
f012ab0a:	83 c4 10             	add    $0x10,%esp
f012ab0d:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab13:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ab19:	89 c1                	mov    %eax,%ecx
f012ab1b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012ab22:	10 00 00 
f012ab25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ab2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab30:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012ab36:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ab3c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab41:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012ab47:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ab4d:	29 d0                	sub    %edx,%eax
f012ab4f:	89 c3                	mov    %eax,%ebx
f012ab51:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012ab58:	10 00 00 
f012ab5b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ab60:	0f b6 d0             	movzbl %al,%edx
f012ab63:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ab69:	01 d0                	add    %edx,%eax
f012ab6b:	48                   	dec    %eax
f012ab6c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012ab72:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ab78:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab7d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012ab83:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ab89:	29 d0                	sub    %edx,%eax
f012ab8b:	01 c3                	add    %eax,%ebx
f012ab8d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012ab94:	10 00 00 
f012ab97:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ab9c:	0f b6 c0             	movzbl %al,%eax
f012ab9f:	c1 e0 04             	shl    $0x4,%eax
f012aba2:	89 c2                	mov    %eax,%edx
f012aba4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012abaa:	01 d0                	add    %edx,%eax
f012abac:	48                   	dec    %eax
f012abad:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012abb3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012abb9:	ba 00 00 00 00       	mov    $0x0,%edx
f012abbe:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012abc4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012abca:	29 d0                	sub    %edx,%eax
f012abcc:	01 d8                	add    %ebx,%eax
f012abce:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012abd3:	39 c1                	cmp    %eax,%ecx
f012abd5:	74 17                	je     f012abee <test_kfreelast+0xfbd>
f012abd7:	83 ec 04             	sub    $0x4,%esp
f012abda:	68 00 b7 13 f0       	push   $0xf013b700
f012abdf:	68 71 0d 00 00       	push   $0xd71
f012abe4:	68 1a b6 13 f0       	push   $0xf013b61a
f012abe9:	e8 17 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abee:	e8 d5 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abf3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abf6:	74 17                	je     f012ac0f <test_kfreelast+0xfde>
f012abf8:	83 ec 04             	sub    $0x4,%esp
f012abfb:	68 34 b6 13 f0       	push   $0xf013b634
f012ac00:	68 72 0d 00 00       	push   $0xd72
f012ac05:	68 1a b6 13 f0       	push   $0xf013b61a
f012ac0a:	e8 f6 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac0f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac12:	e8 90 22 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ac17:	29 c3                	sub    %eax,%ebx
f012ac19:	89 d8                	mov    %ebx,%eax
f012ac1b:	83 f8 05             	cmp    $0x5,%eax
f012ac1e:	74 17                	je     f012ac37 <test_kfreelast+0x1006>
f012ac20:	83 ec 04             	sub    $0x4,%esp
f012ac23:	68 9c b6 13 f0       	push   $0xf013b69c
f012ac28:	68 73 0d 00 00       	push   $0xd73
f012ac2d:	68 1a b6 13 f0       	push   $0xf013b61a
f012ac32:	e8 ce 55 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012ac37:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012ac3e:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012ac41:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac47:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012ac4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac51:	eb 0e                	jmp    f012ac61 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012ac53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ac56:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac59:	01 d0                	add    %edx,%eax
f012ac5b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012ac5e:	ff 45 f4             	incl   -0xc(%ebp)
f012ac61:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012ac67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac6a:	7f e7                	jg     f012ac53 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac6c:	e8 36 22 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ac71:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac74:	e8 4f 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012ac7c:	83 ec 0c             	sub    $0xc,%esp
f012ac7f:	68 00 00 10 00       	push   $0x100000
f012ac84:	e8 06 cf fd ff       	call   f0107b8f <kmalloc>
f012ac89:	83 c4 10             	add    $0x10,%esp
f012ac8c:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ac92:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ac98:	89 c1                	mov    %eax,%ecx
f012ac9a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012aca1:	10 00 00 
f012aca4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012acaa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012acaf:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012acb5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012acbb:	ba 00 00 00 00       	mov    $0x0,%edx
f012acc0:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012acc6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012accc:	29 d0                	sub    %edx,%eax
f012acce:	89 c3                	mov    %eax,%ebx
f012acd0:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012acd7:	10 00 00 
f012acda:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012acdf:	0f b6 d0             	movzbl %al,%edx
f012ace2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ace8:	01 d0                	add    %edx,%eax
f012acea:	48                   	dec    %eax
f012aceb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012acf1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012acf7:	ba 00 00 00 00       	mov    $0x0,%edx
f012acfc:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012ad02:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ad08:	29 d0                	sub    %edx,%eax
f012ad0a:	01 c3                	add    %eax,%ebx
f012ad0c:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012ad13:	10 00 00 
f012ad16:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ad1b:	0f b6 c0             	movzbl %al,%eax
f012ad1e:	c1 e0 04             	shl    $0x4,%eax
f012ad21:	89 c2                	mov    %eax,%edx
f012ad23:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ad29:	01 d0                	add    %edx,%eax
f012ad2b:	48                   	dec    %eax
f012ad2c:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012ad32:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ad38:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad3d:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012ad43:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ad49:	29 d0                	sub    %edx,%eax
f012ad4b:	01 d8                	add    %ebx,%eax
f012ad4d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ad52:	39 c1                	cmp    %eax,%ecx
f012ad54:	74 17                	je     f012ad6d <test_kfreelast+0x113c>
f012ad56:	83 ec 04             	sub    $0x4,%esp
f012ad59:	68 00 b7 13 f0       	push   $0xf013b700
f012ad5e:	68 7f 0d 00 00       	push   $0xd7f
f012ad63:	68 1a b6 13 f0       	push   $0xf013b61a
f012ad68:	e8 98 54 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ad6d:	e8 56 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad72:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad75:	74 17                	je     f012ad8e <test_kfreelast+0x115d>
f012ad77:	83 ec 04             	sub    $0x4,%esp
f012ad7a:	68 34 b6 13 f0       	push   $0xf013b634
f012ad7f:	68 80 0d 00 00       	push   $0xd80
f012ad84:	68 1a b6 13 f0       	push   $0xf013b61a
f012ad89:	e8 77 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ad8e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ad91:	e8 11 21 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ad96:	29 c3                	sub    %eax,%ebx
f012ad98:	89 d8                	mov    %ebx,%eax
f012ad9a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad9f:	74 17                	je     f012adb8 <test_kfreelast+0x1187>
f012ada1:	83 ec 04             	sub    $0x4,%esp
f012ada4:	68 9c b6 13 f0       	push   $0xf013b69c
f012ada9:	68 81 0d 00 00       	push   $0xd81
f012adae:	68 1a b6 13 f0       	push   $0xf013b61a
f012adb3:	e8 4d 54 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012adb8:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012adbf:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012adc2:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012adc8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012adcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012add2:	eb 0e                	jmp    f012ade2 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012add4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012add7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012adda:	01 d0                	add    %edx,%eax
f012addc:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012addf:	ff 45 f4             	incl   -0xc(%ebp)
f012ade2:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012ade8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012adeb:	7f e7                	jg     f012add4 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012aded:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012adf4:	e8 ae 20 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012adf9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012adfc:	e8 c7 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae01:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012ae04:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ae0a:	83 ec 0c             	sub    $0xc,%esp
f012ae0d:	50                   	push   %eax
f012ae0e:	e8 47 ce fd ff       	call   f0107c5a <kfree>
f012ae13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ae16:	e8 ad 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae1b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae1e:	74 17                	je     f012ae37 <test_kfreelast+0x1206>
f012ae20:	83 ec 04             	sub    $0x4,%esp
f012ae23:	68 34 b6 13 f0       	push   $0xf013b634
f012ae28:	68 91 0d 00 00       	push   $0xd91
f012ae2d:	68 1a b6 13 f0       	push   $0xf013b61a
f012ae32:	e8 ce 53 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012ae37:	e8 6b 20 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ae3c:	89 c2                	mov    %eax,%edx
f012ae3e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae41:	29 c2                	sub    %eax,%edx
f012ae43:	89 d0                	mov    %edx,%eax
f012ae45:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae4a:	74 17                	je     f012ae63 <test_kfreelast+0x1232>
f012ae4c:	83 ec 04             	sub    $0x4,%esp
f012ae4f:	68 a4 bd 13 f0       	push   $0xf013bda4
f012ae54:	68 92 0d 00 00       	push   $0xd92
f012ae59:	68 1a b6 13 f0       	push   $0xf013b61a
f012ae5e:	e8 a2 53 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae63:	e8 3f 20 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ae68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae6b:	e8 58 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012ae73:	83 ec 0c             	sub    $0xc,%esp
f012ae76:	68 00 78 00 00       	push   $0x7800
f012ae7b:	e8 0f cd fd ff       	call   f0107b8f <kmalloc>
f012ae80:	83 c4 10             	add    $0x10,%esp
f012ae83:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ae89:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ae8f:	89 c1                	mov    %eax,%ecx
f012ae91:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012ae98:	10 00 00 
f012ae9b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012aea1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aea6:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012aeac:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aeb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012aeb7:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012aebd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aec3:	29 d0                	sub    %edx,%eax
f012aec5:	89 c3                	mov    %eax,%ebx
f012aec7:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012aece:	10 00 00 
f012aed1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012aed6:	0f b6 d0             	movzbl %al,%edx
f012aed9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012aedf:	01 d0                	add    %edx,%eax
f012aee1:	48                   	dec    %eax
f012aee2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012aee8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aeee:	ba 00 00 00 00       	mov    $0x0,%edx
f012aef3:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012aef9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aeff:	29 d0                	sub    %edx,%eax
f012af01:	01 c3                	add    %eax,%ebx
f012af03:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012af0a:	10 00 00 
f012af0d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012af12:	0f b6 c0             	movzbl %al,%eax
f012af15:	c1 e0 04             	shl    $0x4,%eax
f012af18:	89 c2                	mov    %eax,%edx
f012af1a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012af20:	01 d0                	add    %edx,%eax
f012af22:	48                   	dec    %eax
f012af23:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012af29:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af2f:	ba 00 00 00 00       	mov    $0x0,%edx
f012af34:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012af3a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af40:	29 d0                	sub    %edx,%eax
f012af42:	01 d8                	add    %ebx,%eax
f012af44:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012af49:	39 c1                	cmp    %eax,%ecx
f012af4b:	74 17                	je     f012af64 <test_kfreelast+0x1333>
f012af4d:	83 ec 04             	sub    $0x4,%esp
f012af50:	68 00 b7 13 f0       	push   $0xf013b700
f012af55:	68 9b 0d 00 00       	push   $0xd9b
f012af5a:	68 1a b6 13 f0       	push   $0xf013b61a
f012af5f:	e8 a1 52 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012af64:	e8 5f 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af69:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af6c:	74 17                	je     f012af85 <test_kfreelast+0x1354>
f012af6e:	83 ec 04             	sub    $0x4,%esp
f012af71:	68 34 b6 13 f0       	push   $0xf013b634
f012af76:	68 9c 0d 00 00       	push   $0xd9c
f012af7b:	68 1a b6 13 f0       	push   $0xf013b61a
f012af80:	e8 80 52 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012af85:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012af88:	e8 1a 1f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012af8d:	29 c3                	sub    %eax,%ebx
f012af8f:	89 d8                	mov    %ebx,%eax
f012af91:	83 f8 08             	cmp    $0x8,%eax
f012af94:	74 17                	je     f012afad <test_kfreelast+0x137c>
f012af96:	83 ec 04             	sub    $0x4,%esp
f012af99:	68 9c b6 13 f0       	push   $0xf013b69c
f012af9e:	68 9d 0d 00 00       	push   $0xd9d
f012afa3:	68 1a b6 13 f0       	push   $0xf013b61a
f012afa8:	e8 58 52 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012afad:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012afb4:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012afb7:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012afbd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012afc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012afc7:	eb 0e                	jmp    f012afd7 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012afc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012afcc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012afcf:	01 d0                	add    %edx,%eax
f012afd1:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012afd4:	ff 45 f4             	incl   -0xc(%ebp)
f012afd7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012afdd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012afe0:	7f e7                	jg     f012afc9 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012afe2:	e8 c0 1e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012afe7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afea:	e8 d9 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012afef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012aff2:	83 ec 0c             	sub    $0xc,%esp
f012aff5:	68 00 00 10 00       	push   $0x100000
f012affa:	e8 90 cb fd ff       	call   f0107b8f <kmalloc>
f012afff:	83 c4 10             	add    $0x10,%esp
f012b002:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b008:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b00e:	89 c1                	mov    %eax,%ecx
f012b010:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b017:	10 00 00 
f012b01a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b020:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b025:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b02b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b031:	ba 00 00 00 00       	mov    $0x0,%edx
f012b036:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b03c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b042:	29 d0                	sub    %edx,%eax
f012b044:	89 c3                	mov    %eax,%ebx
f012b046:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b04d:	10 00 00 
f012b050:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b055:	0f b6 d0             	movzbl %al,%edx
f012b058:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b05e:	01 d0                	add    %edx,%eax
f012b060:	48                   	dec    %eax
f012b061:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b067:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b06d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b072:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b078:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b07e:	29 d0                	sub    %edx,%eax
f012b080:	01 c3                	add    %eax,%ebx
f012b082:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b089:	10 00 00 
f012b08c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b091:	0f b6 c0             	movzbl %al,%eax
f012b094:	c1 e0 04             	shl    $0x4,%eax
f012b097:	89 c2                	mov    %eax,%edx
f012b099:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b09f:	01 d0                	add    %edx,%eax
f012b0a1:	48                   	dec    %eax
f012b0a2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b0a8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b0ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0b3:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b0b9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b0bf:	29 d0                	sub    %edx,%eax
f012b0c1:	01 d8                	add    %ebx,%eax
f012b0c3:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b0c8:	39 c1                	cmp    %eax,%ecx
f012b0ca:	74 17                	je     f012b0e3 <test_kfreelast+0x14b2>
f012b0cc:	83 ec 04             	sub    $0x4,%esp
f012b0cf:	68 00 b7 13 f0       	push   $0xf013b700
f012b0d4:	68 a9 0d 00 00       	push   $0xda9
f012b0d9:	68 1a b6 13 f0       	push   $0xf013b61a
f012b0de:	e8 22 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b0e3:	e8 e0 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0e8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0eb:	74 17                	je     f012b104 <test_kfreelast+0x14d3>
f012b0ed:	83 ec 04             	sub    $0x4,%esp
f012b0f0:	68 34 b6 13 f0       	push   $0xf013b634
f012b0f5:	68 aa 0d 00 00       	push   $0xdaa
f012b0fa:	68 1a b6 13 f0       	push   $0xf013b61a
f012b0ff:	e8 01 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b104:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b107:	e8 9b 1d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b10c:	29 c3                	sub    %eax,%ebx
f012b10e:	89 d8                	mov    %ebx,%eax
f012b110:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b115:	74 17                	je     f012b12e <test_kfreelast+0x14fd>
f012b117:	83 ec 04             	sub    $0x4,%esp
f012b11a:	68 9c b6 13 f0       	push   $0xf013b69c
f012b11f:	68 ab 0d 00 00       	push   $0xdab
f012b124:	68 1a b6 13 f0       	push   $0xf013b61a
f012b129:	e8 d7 50 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b12e:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b135:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b138:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b13e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b141:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b148:	eb 0e                	jmp    f012b158 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b14a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b14d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b150:	01 d0                	add    %edx,%eax
f012b152:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b155:	ff 45 f4             	incl   -0xc(%ebp)
f012b158:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b15e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b161:	7f e7                	jg     f012b14a <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b163:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b167:	83 ec 08             	sub    $0x8,%esp
f012b16a:	ff 75 f0             	pushl  -0x10(%ebp)
f012b16d:	68 4c c6 13 f0       	push   $0xf013c64c
f012b172:	e8 97 5b fd ff       	call   f0100d0e <cprintf>
f012b177:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b17a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b181:	e8 21 1d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b186:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b189:	e8 3a 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b18e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b191:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b197:	83 ec 0c             	sub    $0xc,%esp
f012b19a:	50                   	push   %eax
f012b19b:	e8 ba ca fd ff       	call   f0107c5a <kfree>
f012b1a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1a3:	e8 20 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1a8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1ab:	74 1d                	je     f012b1ca <test_kfreelast+0x1599>
f012b1ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1b1:	75 17                	jne    f012b1ca <test_kfreelast+0x1599>
f012b1b3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1ba:	83 ec 0c             	sub    $0xc,%esp
f012b1bd:	68 74 c6 13 f0       	push   $0xf013c674
f012b1c2:	e8 47 5b fd ff       	call   f0100d0e <cprintf>
f012b1c7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1ca:	e8 d8 1c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b1cf:	89 c2                	mov    %eax,%edx
f012b1d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b1d4:	29 c2                	sub    %eax,%edx
f012b1d6:	89 d0                	mov    %edx,%eax
f012b1d8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b1dd:	74 1d                	je     f012b1fc <test_kfreelast+0x15cb>
f012b1df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1e3:	75 17                	jne    f012b1fc <test_kfreelast+0x15cb>
f012b1e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1ec:	83 ec 0c             	sub    $0xc,%esp
f012b1ef:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b1f4:	e8 15 5b fd ff       	call   f0100d0e <cprintf>
f012b1f9:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1fc:	e8 a6 1c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b201:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b204:	e8 bf 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b209:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b20c:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b212:	83 ec 0c             	sub    $0xc,%esp
f012b215:	50                   	push   %eax
f012b216:	e8 3f ca fd ff       	call   f0107c5a <kfree>
f012b21b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b21e:	e8 a5 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b223:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b226:	74 1d                	je     f012b245 <test_kfreelast+0x1614>
f012b228:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b22c:	75 17                	jne    f012b245 <test_kfreelast+0x1614>
f012b22e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b235:	83 ec 0c             	sub    $0xc,%esp
f012b238:	68 74 c6 13 f0       	push   $0xf013c674
f012b23d:	e8 cc 5a fd ff       	call   f0100d0e <cprintf>
f012b242:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b245:	e8 5d 1c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b24a:	89 c2                	mov    %eax,%edx
f012b24c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b24f:	29 c2                	sub    %eax,%edx
f012b251:	89 d0                	mov    %edx,%eax
f012b253:	83 f8 08             	cmp    $0x8,%eax
f012b256:	74 1d                	je     f012b275 <test_kfreelast+0x1644>
f012b258:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b25c:	75 17                	jne    f012b275 <test_kfreelast+0x1644>
f012b25e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b265:	83 ec 0c             	sub    $0xc,%esp
f012b268:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b26d:	e8 9c 5a fd ff       	call   f0100d0e <cprintf>
f012b272:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b275:	e8 2d 1c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b27a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b27d:	e8 46 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b282:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b285:	83 ec 0c             	sub    $0xc,%esp
f012b288:	68 00 28 00 00       	push   $0x2800
f012b28d:	e8 fd c8 fd ff       	call   f0107b8f <kmalloc>
f012b292:	83 c4 10             	add    $0x10,%esp
f012b295:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b29b:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b2a1:	89 c1                	mov    %eax,%ecx
f012b2a3:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b2aa:	10 00 00 
f012b2ad:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b2b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b2b8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b2be:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b2c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2c9:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b2cf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b2d5:	29 d0                	sub    %edx,%eax
f012b2d7:	89 c3                	mov    %eax,%ebx
f012b2d9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b2e0:	10 00 00 
f012b2e3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b2e8:	0f b6 d0             	movzbl %al,%edx
f012b2eb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b2f1:	01 d0                	add    %edx,%eax
f012b2f3:	48                   	dec    %eax
f012b2f4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b2fa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b300:	ba 00 00 00 00       	mov    $0x0,%edx
f012b305:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b30b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b311:	29 d0                	sub    %edx,%eax
f012b313:	01 c3                	add    %eax,%ebx
f012b315:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b31c:	10 00 00 
f012b31f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b324:	0f b6 c0             	movzbl %al,%eax
f012b327:	c1 e0 04             	shl    $0x4,%eax
f012b32a:	89 c2                	mov    %eax,%edx
f012b32c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b332:	01 d0                	add    %edx,%eax
f012b334:	48                   	dec    %eax
f012b335:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b33b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b341:	ba 00 00 00 00       	mov    $0x0,%edx
f012b346:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b34c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b352:	29 d0                	sub    %edx,%eax
f012b354:	01 d8                	add    %ebx,%eax
f012b356:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b35b:	39 c1                	cmp    %eax,%ecx
f012b35d:	74 1d                	je     f012b37c <test_kfreelast+0x174b>
f012b35f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b363:	75 17                	jne    f012b37c <test_kfreelast+0x174b>
f012b365:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b36c:	83 ec 0c             	sub    $0xc,%esp
f012b36f:	68 18 c7 13 f0       	push   $0xf013c718
f012b374:	e8 95 59 fd ff       	call   f0100d0e <cprintf>
f012b379:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b37c:	e8 47 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b381:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b384:	74 1d                	je     f012b3a3 <test_kfreelast+0x1772>
f012b386:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b38a:	75 17                	jne    f012b3a3 <test_kfreelast+0x1772>
f012b38c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b393:	83 ec 0c             	sub    $0xc,%esp
f012b396:	68 74 c6 13 f0       	push   $0xf013c674
f012b39b:	e8 6e 59 fd ff       	call   f0100d0e <cprintf>
f012b3a0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b3a3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b3a6:	e8 fc 1a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b3ab:	29 c3                	sub    %eax,%ebx
f012b3ad:	89 d8                	mov    %ebx,%eax
f012b3af:	83 f8 03             	cmp    $0x3,%eax
f012b3b2:	74 1d                	je     f012b3d1 <test_kfreelast+0x17a0>
f012b3b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3b8:	75 17                	jne    f012b3d1 <test_kfreelast+0x17a0>
f012b3ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3c1:	83 ec 0c             	sub    $0xc,%esp
f012b3c4:	68 80 c7 13 f0       	push   $0xf013c780
f012b3c9:	e8 40 59 fd ff       	call   f0100d0e <cprintf>
f012b3ce:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b3d1:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b3d8:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b3db:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b3e1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b3e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b3eb:	eb 0e                	jmp    f012b3fb <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b3ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b3f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b3f3:	01 d0                	add    %edx,%eax
f012b3f5:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b3f8:	ff 45 f4             	incl   -0xc(%ebp)
f012b3fb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b401:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b404:	7f e7                	jg     f012b3ed <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b406:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b40a:	75 17                	jne    f012b423 <test_kfreelast+0x17f2>
f012b40c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b410:	83 ec 08             	sub    $0x8,%esp
f012b413:	ff 75 f0             	pushl  -0x10(%ebp)
f012b416:	68 4c c6 13 f0       	push   $0xf013c64c
f012b41b:	e8 ee 58 fd ff       	call   f0100d0e <cprintf>
f012b420:	83 c4 10             	add    $0x10,%esp
f012b423:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b42a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b430:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b433:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b43a:	eb 1e                	jmp    f012b45a <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b43c:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b442:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b445:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b448:	01 c8                	add    %ecx,%eax
f012b44a:	8a 00                	mov    (%eax),%al
f012b44c:	0f be c0             	movsbl %al,%eax
f012b44f:	01 d0                	add    %edx,%eax
f012b451:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b457:	ff 45 f4             	incl   -0xc(%ebp)
f012b45a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b460:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b463:	7f d7                	jg     f012b43c <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b465:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b46b:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b471:	89 d0                	mov    %edx,%eax
f012b473:	01 c0                	add    %eax,%eax
f012b475:	01 d0                	add    %edx,%eax
f012b477:	c1 e0 02             	shl    $0x2,%eax
f012b47a:	39 c1                	cmp    %eax,%ecx
f012b47c:	74 1d                	je     f012b49b <test_kfreelast+0x186a>
f012b47e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b482:	75 17                	jne    f012b49b <test_kfreelast+0x186a>
f012b484:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b48b:	83 ec 0c             	sub    $0xc,%esp
f012b48e:	68 c4 c7 13 f0       	push   $0xf013c7c4
f012b493:	e8 76 58 fd ff       	call   f0100d0e <cprintf>
f012b498:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b49b:	83 ec 0c             	sub    $0xc,%esp
f012b49e:	6a 03                	push   $0x3
f012b4a0:	e8 a2 1e fe ff       	call   f010d347 <sys_bypassPageFault>
f012b4a5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b4a8:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b4ae:	05 00 30 00 00       	add    $0x3000,%eax
f012b4b3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b4b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b4bd:	eb 3c                	jmp    f012b4fb <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b4bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b4c2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4c5:	01 d0                	add    %edx,%eax
f012b4c7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b4ca:	e8 66 1e fe ff       	call   f010d335 <sys_rcr2>
f012b4cf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b4d2:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b4d5:	01 ca                	add    %ecx,%edx
f012b4d7:	39 d0                	cmp    %edx,%eax
f012b4d9:	74 1d                	je     f012b4f8 <test_kfreelast+0x18c7>
f012b4db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4df:	75 17                	jne    f012b4f8 <test_kfreelast+0x18c7>
f012b4e1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4e8:	83 ec 0c             	sub    $0xc,%esp
f012b4eb:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012b4f0:	e8 19 58 fd ff       	call   f0100d0e <cprintf>
f012b4f5:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b4f8:	ff 45 f4             	incl   -0xc(%ebp)
f012b4fb:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b502:	7e bb                	jle    f012b4bf <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b504:	83 ec 0c             	sub    $0xc,%esp
f012b507:	6a 00                	push   $0x0
f012b509:	e8 39 1e fe ff       	call   f010d347 <sys_bypassPageFault>
f012b50e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b511:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b515:	75 17                	jne    f012b52e <test_kfreelast+0x18fd>
f012b517:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b51b:	83 ec 08             	sub    $0x8,%esp
f012b51e:	ff 75 f0             	pushl  -0x10(%ebp)
f012b521:	68 4c c6 13 f0       	push   $0xf013c64c
f012b526:	e8 e3 57 fd ff       	call   f0100d0e <cprintf>
f012b52b:	83 c4 10             	add    $0x10,%esp
f012b52e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b535:	e8 6d 19 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b53a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b53d:	e8 86 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b542:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b545:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b54b:	83 ec 0c             	sub    $0xc,%esp
f012b54e:	50                   	push   %eax
f012b54f:	e8 06 c7 fd ff       	call   f0107c5a <kfree>
f012b554:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b557:	e8 6c 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b55c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b55f:	74 1d                	je     f012b57e <test_kfreelast+0x194d>
f012b561:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b565:	75 17                	jne    f012b57e <test_kfreelast+0x194d>
f012b567:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b56e:	83 ec 0c             	sub    $0xc,%esp
f012b571:	68 74 c6 13 f0       	push   $0xf013c674
f012b576:	e8 93 57 fd ff       	call   f0100d0e <cprintf>
f012b57b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b57e:	e8 24 19 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b583:	89 c2                	mov    %eax,%edx
f012b585:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b588:	29 c2                	sub    %eax,%edx
f012b58a:	89 d0                	mov    %edx,%eax
f012b58c:	83 f8 03             	cmp    $0x3,%eax
f012b58f:	74 1d                	je     f012b5ae <test_kfreelast+0x197d>
f012b591:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b595:	75 17                	jne    f012b5ae <test_kfreelast+0x197d>
f012b597:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b59e:	83 ec 0c             	sub    $0xc,%esp
f012b5a1:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b5a6:	e8 63 57 fd ff       	call   f0100d0e <cprintf>
f012b5ab:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b5ae:	e8 f4 18 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b5b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5b6:	e8 0d 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b5be:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b5c4:	83 ec 0c             	sub    $0xc,%esp
f012b5c7:	50                   	push   %eax
f012b5c8:	e8 8d c6 fd ff       	call   f0107c5a <kfree>
f012b5cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5d0:	e8 f3 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5d8:	74 1d                	je     f012b5f7 <test_kfreelast+0x19c6>
f012b5da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5de:	75 17                	jne    f012b5f7 <test_kfreelast+0x19c6>
f012b5e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5e7:	83 ec 0c             	sub    $0xc,%esp
f012b5ea:	68 74 c6 13 f0       	push   $0xf013c674
f012b5ef:	e8 1a 57 fd ff       	call   f0100d0e <cprintf>
f012b5f4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b5f7:	e8 ab 18 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b5fc:	89 c2                	mov    %eax,%edx
f012b5fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b601:	29 c2                	sub    %eax,%edx
f012b603:	89 d0                	mov    %edx,%eax
f012b605:	83 f8 04             	cmp    $0x4,%eax
f012b608:	74 1d                	je     f012b627 <test_kfreelast+0x19f6>
f012b60a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b60e:	75 17                	jne    f012b627 <test_kfreelast+0x19f6>
f012b610:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b617:	83 ec 0c             	sub    $0xc,%esp
f012b61a:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b61f:	e8 ea 56 fd ff       	call   f0100d0e <cprintf>
f012b624:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b627:	e8 7b 18 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b62c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b62f:	e8 94 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b634:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b637:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b63d:	83 ec 0c             	sub    $0xc,%esp
f012b640:	50                   	push   %eax
f012b641:	e8 14 c6 fd ff       	call   f0107c5a <kfree>
f012b646:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b649:	e8 7a 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b64e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b651:	74 1d                	je     f012b670 <test_kfreelast+0x1a3f>
f012b653:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b657:	75 17                	jne    f012b670 <test_kfreelast+0x1a3f>
f012b659:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b660:	83 ec 0c             	sub    $0xc,%esp
f012b663:	68 74 c6 13 f0       	push   $0xf013c674
f012b668:	e8 a1 56 fd ff       	call   f0100d0e <cprintf>
f012b66d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b670:	e8 32 18 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b675:	89 c2                	mov    %eax,%edx
f012b677:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b67a:	29 c2                	sub    %eax,%edx
f012b67c:	89 d0                	mov    %edx,%eax
f012b67e:	83 f8 05             	cmp    $0x5,%eax
f012b681:	74 1d                	je     f012b6a0 <test_kfreelast+0x1a6f>
f012b683:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b687:	75 17                	jne    f012b6a0 <test_kfreelast+0x1a6f>
f012b689:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b690:	83 ec 0c             	sub    $0xc,%esp
f012b693:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b698:	e8 71 56 fd ff       	call   f0100d0e <cprintf>
f012b69d:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6a0:	e8 02 18 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b6a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6a8:	e8 1b 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b6b0:	83 ec 0c             	sub    $0xc,%esp
f012b6b3:	68 00 c8 00 00       	push   $0xc800
f012b6b8:	e8 d2 c4 fd ff       	call   f0107b8f <kmalloc>
f012b6bd:	83 c4 10             	add    $0x10,%esp
f012b6c0:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b6c6:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b6cc:	89 c1                	mov    %eax,%ecx
f012b6ce:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b6d5:	10 00 00 
f012b6d8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b6de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b6e3:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b6e9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b6ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6f4:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b6fa:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b700:	29 d0                	sub    %edx,%eax
f012b702:	89 c3                	mov    %eax,%ebx
f012b704:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b70b:	10 00 00 
f012b70e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b713:	0f b6 d0             	movzbl %al,%edx
f012b716:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b71c:	01 d0                	add    %edx,%eax
f012b71e:	48                   	dec    %eax
f012b71f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b725:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b72b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b730:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b736:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b73c:	29 d0                	sub    %edx,%eax
f012b73e:	01 c3                	add    %eax,%ebx
f012b740:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b747:	10 00 00 
f012b74a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b74f:	0f b6 c0             	movzbl %al,%eax
f012b752:	c1 e0 04             	shl    $0x4,%eax
f012b755:	89 c2                	mov    %eax,%edx
f012b757:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b75d:	01 d0                	add    %edx,%eax
f012b75f:	48                   	dec    %eax
f012b760:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b766:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b76c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b771:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b777:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b77d:	29 d0                	sub    %edx,%eax
f012b77f:	01 d8                	add    %ebx,%eax
f012b781:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b786:	39 c1                	cmp    %eax,%ecx
f012b788:	74 1d                	je     f012b7a7 <test_kfreelast+0x1b76>
f012b78a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b78e:	75 17                	jne    f012b7a7 <test_kfreelast+0x1b76>
f012b790:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b797:	83 ec 0c             	sub    $0xc,%esp
f012b79a:	68 18 c7 13 f0       	push   $0xf013c718
f012b79f:	e8 6a 55 fd ff       	call   f0100d0e <cprintf>
f012b7a4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7a7:	e8 1c 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7ac:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7af:	74 1d                	je     f012b7ce <test_kfreelast+0x1b9d>
f012b7b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7b5:	75 17                	jne    f012b7ce <test_kfreelast+0x1b9d>
f012b7b7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7be:	83 ec 0c             	sub    $0xc,%esp
f012b7c1:	68 74 c6 13 f0       	push   $0xf013c674
f012b7c6:	e8 43 55 fd ff       	call   f0100d0e <cprintf>
f012b7cb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b7ce:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b7d1:	e8 d1 16 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b7d6:	29 c3                	sub    %eax,%ebx
f012b7d8:	89 d8                	mov    %ebx,%eax
f012b7da:	83 f8 0d             	cmp    $0xd,%eax
f012b7dd:	74 1d                	je     f012b7fc <test_kfreelast+0x1bcb>
f012b7df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7e3:	75 17                	jne    f012b7fc <test_kfreelast+0x1bcb>
f012b7e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7ec:	83 ec 0c             	sub    $0xc,%esp
f012b7ef:	68 80 c7 13 f0       	push   $0xf013c780
f012b7f4:	e8 15 55 fd ff       	call   f0100d0e <cprintf>
f012b7f9:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b7fc:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b803:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b806:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b80c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b80f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b816:	eb 0e                	jmp    f012b826 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b818:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b81b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b81e:	01 d0                	add    %edx,%eax
f012b820:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b823:	ff 45 f4             	incl   -0xc(%ebp)
f012b826:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b82c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b82f:	7f e7                	jg     f012b818 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b831:	e8 71 16 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b836:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b839:	e8 8a 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b83e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b841:	83 ec 0c             	sub    $0xc,%esp
f012b844:	68 00 fc 2f 00       	push   $0x2ffc00
f012b849:	e8 41 c3 fd ff       	call   f0107b8f <kmalloc>
f012b84e:	83 c4 10             	add    $0x10,%esp
f012b851:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b857:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b85d:	89 c1                	mov    %eax,%ecx
f012b85f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b866:	10 00 00 
f012b869:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b86f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b874:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b87a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b880:	ba 00 00 00 00       	mov    $0x0,%edx
f012b885:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b88b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b891:	29 d0                	sub    %edx,%eax
f012b893:	89 c3                	mov    %eax,%ebx
f012b895:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b89c:	10 00 00 
f012b89f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b8a4:	0f b6 d0             	movzbl %al,%edx
f012b8a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b8ad:	01 d0                	add    %edx,%eax
f012b8af:	48                   	dec    %eax
f012b8b0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b8b6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8c1:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b8c7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8cd:	29 d0                	sub    %edx,%eax
f012b8cf:	01 c3                	add    %eax,%ebx
f012b8d1:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b8d8:	10 00 00 
f012b8db:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b8e0:	0f b6 c0             	movzbl %al,%eax
f012b8e3:	c1 e0 04             	shl    $0x4,%eax
f012b8e6:	89 c2                	mov    %eax,%edx
f012b8e8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b8ee:	01 d0                	add    %edx,%eax
f012b8f0:	48                   	dec    %eax
f012b8f1:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b8f7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012b902:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b908:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b90e:	29 d0                	sub    %edx,%eax
f012b910:	01 d8                	add    %ebx,%eax
f012b912:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b917:	39 c1                	cmp    %eax,%ecx
f012b919:	74 1d                	je     f012b938 <test_kfreelast+0x1d07>
f012b91b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b91f:	75 17                	jne    f012b938 <test_kfreelast+0x1d07>
f012b921:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b928:	83 ec 0c             	sub    $0xc,%esp
f012b92b:	68 18 c7 13 f0       	push   $0xf013c718
f012b930:	e8 d9 53 fd ff       	call   f0100d0e <cprintf>
f012b935:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b938:	e8 8b 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b93d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b940:	74 1d                	je     f012b95f <test_kfreelast+0x1d2e>
f012b942:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b946:	75 17                	jne    f012b95f <test_kfreelast+0x1d2e>
f012b948:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b94f:	83 ec 0c             	sub    $0xc,%esp
f012b952:	68 74 c6 13 f0       	push   $0xf013c674
f012b957:	e8 b2 53 fd ff       	call   f0100d0e <cprintf>
f012b95c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b95f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b962:	e8 40 15 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b967:	29 c3                	sub    %eax,%ebx
f012b969:	89 d8                	mov    %ebx,%eax
f012b96b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b970:	74 1d                	je     f012b98f <test_kfreelast+0x1d5e>
f012b972:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b976:	75 17                	jne    f012b98f <test_kfreelast+0x1d5e>
f012b978:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b97f:	83 ec 0c             	sub    $0xc,%esp
f012b982:	68 80 c7 13 f0       	push   $0xf013c780
f012b987:	e8 82 53 fd ff       	call   f0100d0e <cprintf>
f012b98c:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b98f:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b996:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b999:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b99f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b9a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b9a9:	eb 0e                	jmp    f012b9b9 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b9ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b9ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9b1:	01 d0                	add    %edx,%eax
f012b9b3:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b9b6:	ff 45 f4             	incl   -0xc(%ebp)
f012b9b9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b9bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b9c2:	7f e7                	jg     f012b9ab <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b9c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9c8:	75 17                	jne    f012b9e1 <test_kfreelast+0x1db0>
f012b9ca:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b9ce:	83 ec 08             	sub    $0x8,%esp
f012b9d1:	ff 75 f0             	pushl  -0x10(%ebp)
f012b9d4:	68 4c c6 13 f0       	push   $0xf013c64c
f012b9d9:	e8 30 53 fd ff       	call   f0100d0e <cprintf>
f012b9de:	83 c4 10             	add    $0x10,%esp
f012b9e1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9e8:	e8 ba 14 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012b9ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9f0:	e8 d3 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b9f8:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b9fe:	83 ec 0c             	sub    $0xc,%esp
f012ba01:	50                   	push   %eax
f012ba02:	e8 53 c2 fd ff       	call   f0107c5a <kfree>
f012ba07:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba0a:	e8 b9 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba0f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba12:	74 1d                	je     f012ba31 <test_kfreelast+0x1e00>
f012ba14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba18:	75 17                	jne    f012ba31 <test_kfreelast+0x1e00>
f012ba1a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba21:	83 ec 0c             	sub    $0xc,%esp
f012ba24:	68 74 c6 13 f0       	push   $0xf013c674
f012ba29:	e8 e0 52 fd ff       	call   f0100d0e <cprintf>
f012ba2e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba31:	e8 71 14 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ba36:	89 c2                	mov    %eax,%edx
f012ba38:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba3b:	29 c2                	sub    %eax,%edx
f012ba3d:	89 d0                	mov    %edx,%eax
f012ba3f:	83 f8 0d             	cmp    $0xd,%eax
f012ba42:	74 1d                	je     f012ba61 <test_kfreelast+0x1e30>
f012ba44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba48:	75 17                	jne    f012ba61 <test_kfreelast+0x1e30>
f012ba4a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba51:	83 ec 0c             	sub    $0xc,%esp
f012ba54:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012ba59:	e8 b0 52 fd ff       	call   f0100d0e <cprintf>
f012ba5e:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ba61:	83 ec 0c             	sub    $0xc,%esp
f012ba64:	6a 03                	push   $0x3
f012ba66:	e8 dc 18 fe ff       	call   f010d347 <sys_bypassPageFault>
f012ba6b:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012ba6e:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ba74:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012ba77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ba7e:	eb 3c                	jmp    f012babc <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012ba80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ba83:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba86:	01 d0                	add    %edx,%eax
f012ba88:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ba8b:	e8 a5 18 fe ff       	call   f010d335 <sys_rcr2>
f012ba90:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ba93:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ba96:	01 ca                	add    %ecx,%edx
f012ba98:	39 d0                	cmp    %edx,%eax
f012ba9a:	74 1d                	je     f012bab9 <test_kfreelast+0x1e88>
f012ba9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baa0:	75 17                	jne    f012bab9 <test_kfreelast+0x1e88>
f012baa2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012baa9:	83 ec 0c             	sub    $0xc,%esp
f012baac:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012bab1:	e8 58 52 fd ff       	call   f0100d0e <cprintf>
f012bab6:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bab9:	ff 45 f4             	incl   -0xc(%ebp)
f012babc:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bac3:	7e bb                	jle    f012ba80 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bac5:	83 ec 0c             	sub    $0xc,%esp
f012bac8:	6a 00                	push   $0x0
f012baca:	e8 78 18 fe ff       	call   f010d347 <sys_bypassPageFault>
f012bacf:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bad2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bad8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012badb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bae2:	eb 1e                	jmp    f012bb02 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bae4:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012baea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012baed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012baf0:	01 c8                	add    %ecx,%eax
f012baf2:	8a 00                	mov    (%eax),%al
f012baf4:	0f be c0             	movsbl %al,%eax
f012baf7:	01 d0                	add    %edx,%eax
f012baf9:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012baff:	ff 45 f4             	incl   -0xc(%ebp)
f012bb02:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bb08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bb0b:	7f d7                	jg     f012bae4 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bb0d:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bb13:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bb19:	89 d0                	mov    %edx,%eax
f012bb1b:	01 c0                	add    %eax,%eax
f012bb1d:	01 d0                	add    %edx,%eax
f012bb1f:	01 c0                	add    %eax,%eax
f012bb21:	01 d0                	add    %edx,%eax
f012bb23:	01 c0                	add    %eax,%eax
f012bb25:	39 c1                	cmp    %eax,%ecx
f012bb27:	74 1d                	je     f012bb46 <test_kfreelast+0x1f15>
f012bb29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb2d:	75 17                	jne    f012bb46 <test_kfreelast+0x1f15>
f012bb2f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb36:	83 ec 0c             	sub    $0xc,%esp
f012bb39:	68 c4 c7 13 f0       	push   $0xf013c7c4
f012bb3e:	e8 cb 51 fd ff       	call   f0100d0e <cprintf>
f012bb43:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bb46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb4a:	75 17                	jne    f012bb63 <test_kfreelast+0x1f32>
f012bb4c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bb50:	83 ec 08             	sub    $0x8,%esp
f012bb53:	ff 75 f0             	pushl  -0x10(%ebp)
f012bb56:	68 4c c6 13 f0       	push   $0xf013c64c
f012bb5b:	e8 ae 51 fd ff       	call   f0100d0e <cprintf>
f012bb60:	83 c4 10             	add    $0x10,%esp
f012bb63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb6a:	e8 38 13 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bb6f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb72:	e8 51 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bb7a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bb80:	83 ec 0c             	sub    $0xc,%esp
f012bb83:	50                   	push   %eax
f012bb84:	e8 d1 c0 fd ff       	call   f0107c5a <kfree>
f012bb89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb8c:	e8 37 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb91:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb94:	74 1d                	je     f012bbb3 <test_kfreelast+0x1f82>
f012bb96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb9a:	75 17                	jne    f012bbb3 <test_kfreelast+0x1f82>
f012bb9c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bba3:	83 ec 0c             	sub    $0xc,%esp
f012bba6:	68 74 c6 13 f0       	push   $0xf013c674
f012bbab:	e8 5e 51 fd ff       	call   f0100d0e <cprintf>
f012bbb0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bbb3:	e8 ef 12 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bbb8:	89 c2                	mov    %eax,%edx
f012bbba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bbbd:	29 c2                	sub    %eax,%edx
f012bbbf:	89 d0                	mov    %edx,%eax
f012bbc1:	83 f8 02             	cmp    $0x2,%eax
f012bbc4:	74 1d                	je     f012bbe3 <test_kfreelast+0x1fb2>
f012bbc6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbca:	75 17                	jne    f012bbe3 <test_kfreelast+0x1fb2>
f012bbcc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbd3:	83 ec 0c             	sub    $0xc,%esp
f012bbd6:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bbdb:	e8 2e 51 fd ff       	call   f0100d0e <cprintf>
f012bbe0:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bbe3:	e8 bf 12 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bbe8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbeb:	e8 d8 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbf0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012bbf3:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bbf9:	83 ec 0c             	sub    $0xc,%esp
f012bbfc:	50                   	push   %eax
f012bbfd:	e8 58 c0 fd ff       	call   f0107c5a <kfree>
f012bc02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc05:	e8 be 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc0a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc0d:	74 1d                	je     f012bc2c <test_kfreelast+0x1ffb>
f012bc0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc13:	75 17                	jne    f012bc2c <test_kfreelast+0x1ffb>
f012bc15:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc1c:	83 ec 0c             	sub    $0xc,%esp
f012bc1f:	68 74 c6 13 f0       	push   $0xf013c674
f012bc24:	e8 e5 50 fd ff       	call   f0100d0e <cprintf>
f012bc29:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc2c:	e8 76 12 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bc31:	89 c2                	mov    %eax,%edx
f012bc33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc36:	29 c2                	sub    %eax,%edx
f012bc38:	89 d0                	mov    %edx,%eax
f012bc3a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bc3f:	74 1d                	je     f012bc5e <test_kfreelast+0x202d>
f012bc41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc45:	75 17                	jne    f012bc5e <test_kfreelast+0x202d>
f012bc47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc4e:	83 ec 0c             	sub    $0xc,%esp
f012bc51:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bc56:	e8 b3 50 fd ff       	call   f0100d0e <cprintf>
f012bc5b:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc5e:	e8 44 12 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bc63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc66:	e8 5d 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bc6e:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bc74:	83 ec 0c             	sub    $0xc,%esp
f012bc77:	50                   	push   %eax
f012bc78:	e8 dd bf fd ff       	call   f0107c5a <kfree>
f012bc7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc80:	e8 43 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc85:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc88:	74 1d                	je     f012bca7 <test_kfreelast+0x2076>
f012bc8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc8e:	75 17                	jne    f012bca7 <test_kfreelast+0x2076>
f012bc90:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc97:	83 ec 0c             	sub    $0xc,%esp
f012bc9a:	68 74 c6 13 f0       	push   $0xf013c674
f012bc9f:	e8 6a 50 fd ff       	call   f0100d0e <cprintf>
f012bca4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bca7:	e8 fb 11 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bcac:	89 c2                	mov    %eax,%edx
f012bcae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bcb1:	29 c2                	sub    %eax,%edx
f012bcb3:	89 d0                	mov    %edx,%eax
f012bcb5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bcba:	74 1d                	je     f012bcd9 <test_kfreelast+0x20a8>
f012bcbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcc0:	75 17                	jne    f012bcd9 <test_kfreelast+0x20a8>
f012bcc2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcc9:	83 ec 0c             	sub    $0xc,%esp
f012bccc:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bcd1:	e8 38 50 fd ff       	call   f0100d0e <cprintf>
f012bcd6:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bcd9:	e8 c9 11 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bcde:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bce1:	e8 e2 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bce6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bce9:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bcef:	83 ec 0c             	sub    $0xc,%esp
f012bcf2:	50                   	push   %eax
f012bcf3:	e8 62 bf fd ff       	call   f0107c5a <kfree>
f012bcf8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bcfb:	e8 c8 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd00:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd03:	74 1d                	je     f012bd22 <test_kfreelast+0x20f1>
f012bd05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd09:	75 17                	jne    f012bd22 <test_kfreelast+0x20f1>
f012bd0b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd12:	83 ec 0c             	sub    $0xc,%esp
f012bd15:	68 74 c6 13 f0       	push   $0xf013c674
f012bd1a:	e8 ef 4f fd ff       	call   f0100d0e <cprintf>
f012bd1f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd22:	e8 80 11 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bd27:	89 c2                	mov    %eax,%edx
f012bd29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd2c:	29 c2                	sub    %eax,%edx
f012bd2e:	89 d0                	mov    %edx,%eax
f012bd30:	83 f8 01             	cmp    $0x1,%eax
f012bd33:	74 1d                	je     f012bd52 <test_kfreelast+0x2121>
f012bd35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd39:	75 17                	jne    f012bd52 <test_kfreelast+0x2121>
f012bd3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd42:	83 ec 0c             	sub    $0xc,%esp
f012bd45:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bd4a:	e8 bf 4f fd ff       	call   f0100d0e <cprintf>
f012bd4f:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bd52:	e8 50 11 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bd57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd5a:	e8 69 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012bd62:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012bd68:	83 ec 0c             	sub    $0xc,%esp
f012bd6b:	50                   	push   %eax
f012bd6c:	e8 e9 be fd ff       	call   f0107c5a <kfree>
f012bd71:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd74:	e8 4f 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd79:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd7c:	74 1d                	je     f012bd9b <test_kfreelast+0x216a>
f012bd7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd82:	75 17                	jne    f012bd9b <test_kfreelast+0x216a>
f012bd84:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd8b:	83 ec 0c             	sub    $0xc,%esp
f012bd8e:	68 74 c6 13 f0       	push   $0xf013c674
f012bd93:	e8 76 4f fd ff       	call   f0100d0e <cprintf>
f012bd98:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd9b:	e8 07 11 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bda0:	89 c2                	mov    %eax,%edx
f012bda2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bda5:	29 c2                	sub    %eax,%edx
f012bda7:	89 d0                	mov    %edx,%eax
f012bda9:	83 f8 01             	cmp    $0x1,%eax
f012bdac:	74 1d                	je     f012bdcb <test_kfreelast+0x219a>
f012bdae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdb2:	75 17                	jne    f012bdcb <test_kfreelast+0x219a>
f012bdb4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdbb:	83 ec 0c             	sub    $0xc,%esp
f012bdbe:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bdc3:	e8 46 4f fd ff       	call   f0100d0e <cprintf>
f012bdc8:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012bdcb:	e8 d7 10 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bdd0:	89 c2                	mov    %eax,%edx
f012bdd2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bdd5:	39 c2                	cmp    %eax,%edx
f012bdd7:	74 1d                	je     f012bdf6 <test_kfreelast+0x21c5>
f012bdd9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bddd:	75 17                	jne    f012bdf6 <test_kfreelast+0x21c5>
f012bddf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bde6:	83 ec 0c             	sub    $0xc,%esp
f012bde9:	68 40 c8 13 f0       	push   $0xf013c840
f012bdee:	e8 1b 4f fd ff       	call   f0100d0e <cprintf>
f012bdf3:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bdf6:	83 ec 0c             	sub    $0xc,%esp
f012bdf9:	6a 03                	push   $0x3
f012bdfb:	e8 47 15 fe ff       	call   f010d347 <sys_bypassPageFault>
f012be00:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012be03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be0a:	e9 8e 00 00 00       	jmp    f012be9d <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012be0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be12:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012be19:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012be1c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be1f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012be22:	e8 0e 15 fe ff       	call   f010d335 <sys_rcr2>
f012be27:	89 c2                	mov    %eax,%edx
f012be29:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be2c:	39 c2                	cmp    %eax,%edx
f012be2e:	74 1d                	je     f012be4d <test_kfreelast+0x221c>
f012be30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be34:	75 17                	jne    f012be4d <test_kfreelast+0x221c>
f012be36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be3d:	83 ec 0c             	sub    $0xc,%esp
f012be40:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012be45:	e8 c4 4e fd ff       	call   f0100d0e <cprintf>
f012be4a:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012be4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be50:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012be57:	89 c2                	mov    %eax,%edx
f012be59:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be5c:	01 d0                	add    %edx,%eax
f012be5e:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012be61:	e8 cf 14 fe ff       	call   f010d335 <sys_rcr2>
f012be66:	89 c2                	mov    %eax,%edx
f012be68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be6b:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012be72:	89 c1                	mov    %eax,%ecx
f012be74:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be77:	01 c8                	add    %ecx,%eax
f012be79:	39 c2                	cmp    %eax,%edx
f012be7b:	74 1d                	je     f012be9a <test_kfreelast+0x2269>
f012be7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be81:	75 17                	jne    f012be9a <test_kfreelast+0x2269>
f012be83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be8a:	83 ec 0c             	sub    $0xc,%esp
f012be8d:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012be92:	e8 77 4e fd ff       	call   f0100d0e <cprintf>
f012be97:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012be9a:	ff 45 f4             	incl   -0xc(%ebp)
f012be9d:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bea1:	0f 8e 68 ff ff ff    	jle    f012be0f <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bea7:	83 ec 0c             	sub    $0xc,%esp
f012beaa:	6a 00                	push   $0x0
f012beac:	e8 96 14 fe ff       	call   f010d347 <sys_bypassPageFault>
f012beb1:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012beb4:	e8 ee 0f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012beb9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bebc:	e8 07 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bec1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bec4:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012beca:	83 ec 0c             	sub    $0xc,%esp
f012becd:	50                   	push   %eax
f012bece:	e8 87 bd fd ff       	call   f0107c5a <kfree>
f012bed3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bed6:	e8 ed 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bedb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bede:	74 1d                	je     f012befd <test_kfreelast+0x22cc>
f012bee0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bee4:	75 17                	jne    f012befd <test_kfreelast+0x22cc>
f012bee6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012beed:	83 ec 0c             	sub    $0xc,%esp
f012bef0:	68 74 c6 13 f0       	push   $0xf013c674
f012bef5:	e8 14 4e fd ff       	call   f0100d0e <cprintf>
f012befa:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012befd:	e8 a5 0f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bf02:	89 c2                	mov    %eax,%edx
f012bf04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf07:	39 c2                	cmp    %eax,%edx
f012bf09:	74 1d                	je     f012bf28 <test_kfreelast+0x22f7>
f012bf0b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf0f:	75 17                	jne    f012bf28 <test_kfreelast+0x22f7>
f012bf11:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf18:	83 ec 0c             	sub    $0xc,%esp
f012bf1b:	68 78 c8 13 f0       	push   $0xf013c878
f012bf20:	e8 e9 4d fd ff       	call   f0100d0e <cprintf>
f012bf25:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bf28:	e8 7a 0f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bf2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf30:	e8 93 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bf38:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bf3e:	83 ec 0c             	sub    $0xc,%esp
f012bf41:	50                   	push   %eax
f012bf42:	e8 13 bd fd ff       	call   f0107c5a <kfree>
f012bf47:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bf4a:	e8 79 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf4f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bf52:	74 1d                	je     f012bf71 <test_kfreelast+0x2340>
f012bf54:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf58:	75 17                	jne    f012bf71 <test_kfreelast+0x2340>
f012bf5a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf61:	83 ec 0c             	sub    $0xc,%esp
f012bf64:	68 74 c6 13 f0       	push   $0xf013c674
f012bf69:	e8 a0 4d fd ff       	call   f0100d0e <cprintf>
f012bf6e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bf71:	e8 31 0f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bf76:	89 c2                	mov    %eax,%edx
f012bf78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf7b:	39 c2                	cmp    %eax,%edx
f012bf7d:	74 1d                	je     f012bf9c <test_kfreelast+0x236b>
f012bf7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf83:	75 17                	jne    f012bf9c <test_kfreelast+0x236b>
f012bf85:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf8c:	83 ec 0c             	sub    $0xc,%esp
f012bf8f:	68 78 c8 13 f0       	push   $0xf013c878
f012bf94:	e8 75 4d fd ff       	call   f0100d0e <cprintf>
f012bf99:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012bf9c:	e8 06 0f fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bfa1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfa4:	e8 1f 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfa9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bfac:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bfb2:	83 ec 0c             	sub    $0xc,%esp
f012bfb5:	50                   	push   %eax
f012bfb6:	e8 9f bc fd ff       	call   f0107c5a <kfree>
f012bfbb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfbe:	e8 05 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfc3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfc6:	74 1d                	je     f012bfe5 <test_kfreelast+0x23b4>
f012bfc8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfcc:	75 17                	jne    f012bfe5 <test_kfreelast+0x23b4>
f012bfce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bfd5:	83 ec 0c             	sub    $0xc,%esp
f012bfd8:	68 74 c6 13 f0       	push   $0xf013c674
f012bfdd:	e8 2c 4d fd ff       	call   f0100d0e <cprintf>
f012bfe2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bfe5:	e8 bd 0e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012bfea:	89 c2                	mov    %eax,%edx
f012bfec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bfef:	39 c2                	cmp    %eax,%edx
f012bff1:	74 1d                	je     f012c010 <test_kfreelast+0x23df>
f012bff3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bff7:	75 17                	jne    f012c010 <test_kfreelast+0x23df>
f012bff9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c000:	83 ec 0c             	sub    $0xc,%esp
f012c003:	68 78 c8 13 f0       	push   $0xf013c878
f012c008:	e8 01 4d fd ff       	call   f0100d0e <cprintf>
f012c00d:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c010:	e8 92 0e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c015:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c018:	e8 ab 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c01d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c020:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c026:	83 ec 0c             	sub    $0xc,%esp
f012c029:	50                   	push   %eax
f012c02a:	e8 2b bc fd ff       	call   f0107c5a <kfree>
f012c02f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c032:	e8 91 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c037:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c03a:	74 1d                	je     f012c059 <test_kfreelast+0x2428>
f012c03c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c040:	75 17                	jne    f012c059 <test_kfreelast+0x2428>
f012c042:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c049:	83 ec 0c             	sub    $0xc,%esp
f012c04c:	68 74 c6 13 f0       	push   $0xf013c674
f012c051:	e8 b8 4c fd ff       	call   f0100d0e <cprintf>
f012c056:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c059:	e8 49 0e fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c05e:	89 c2                	mov    %eax,%edx
f012c060:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c063:	39 c2                	cmp    %eax,%edx
f012c065:	74 1d                	je     f012c084 <test_kfreelast+0x2453>
f012c067:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c06b:	75 17                	jne    f012c084 <test_kfreelast+0x2453>
f012c06d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c074:	83 ec 0c             	sub    $0xc,%esp
f012c077:	68 78 c8 13 f0       	push   $0xf013c878
f012c07c:	e8 8d 4c fd ff       	call   f0100d0e <cprintf>
f012c081:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c084:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c088:	75 17                	jne    f012c0a1 <test_kfreelast+0x2470>
f012c08a:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c08e:	83 ec 08             	sub    $0x8,%esp
f012c091:	ff 75 f0             	pushl  -0x10(%ebp)
f012c094:	68 4c c6 13 f0       	push   $0xf013c64c
f012c099:	e8 70 4c fd ff       	call   f0100d0e <cprintf>
f012c09e:	83 c4 10             	add    $0x10,%esp
f012c0a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c0a8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c0ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c0b0:	5b                   	pop    %ebx
f012c0b1:	5f                   	pop    %edi
f012c0b2:	5d                   	pop    %ebp
f012c0b3:	c3                   	ret    

f012c0b4 <test_krealloc>:

int test_krealloc() {
f012c0b4:	55                   	push   %ebp
f012c0b5:	89 e5                	mov    %esp,%ebp
f012c0b7:	57                   	push   %edi
f012c0b8:	53                   	push   %ebx
f012c0b9:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c0bf:	83 ec 0c             	sub    $0xc,%esp
f012c0c2:	68 5c b5 13 f0       	push   $0xf013b55c
f012c0c7:	e8 42 4c fd ff       	call   f0100d0e <cprintf>
f012c0cc:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c0cf:	83 ec 0c             	sub    $0xc,%esp
f012c0d2:	68 8c b5 13 f0       	push   $0xf013b58c
f012c0d7:	e8 32 4c fd ff       	call   f0100d0e <cprintf>
f012c0dc:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c0df:	83 ec 0c             	sub    $0xc,%esp
f012c0e2:	68 5c b5 13 f0       	push   $0xf013b55c
f012c0e7:	e8 22 4c fd ff       	call   f0100d0e <cprintf>
f012c0ec:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c0ef:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c0f3:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c0f7:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c0fd:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c103:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c10a:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c111:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c117:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c11c:	b8 00 00 00 00       	mov    $0x0,%eax
f012c121:	89 d7                	mov    %edx,%edi
f012c123:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c125:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c12c:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c132:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c137:	b8 00 00 00 00       	mov    $0x0,%eax
f012c13c:	89 d7                	mov    %edx,%edi
f012c13e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c140:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c146:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c14b:	b8 00 00 00 00       	mov    $0x0,%eax
f012c150:	89 d7                	mov    %edx,%edi
f012c152:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c154:	e8 4e 0d fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c159:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c15c:	83 ec 08             	sub    $0x8,%esp
f012c15f:	68 00 fc 0f 00       	push   $0xffc00
f012c164:	6a 00                	push   $0x0
f012c166:	e8 e4 bc fd ff       	call   f0107e4f <krealloc>
f012c16b:	83 c4 10             	add    $0x10,%esp
f012c16e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c174:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c17a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c17f:	77 17                	ja     f012c198 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c181:	83 ec 04             	sub    $0x4,%esp
f012c184:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c189:	68 e2 0e 00 00       	push   $0xee2
f012c18e:	68 1a b6 13 f0       	push   $0xf013b61a
f012c193:	e8 6d 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c198:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c19e:	89 c1                	mov    %eax,%ecx
f012c1a0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c1a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c1aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c1af:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c1b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c1b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1ba:	f7 75 b4             	divl   -0x4c(%ebp)
f012c1bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c1c0:	29 d0                	sub    %edx,%eax
f012c1c2:	89 c3                	mov    %eax,%ebx
f012c1c4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c1cb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c1d0:	0f b6 d0             	movzbl %al,%edx
f012c1d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c1d6:	01 d0                	add    %edx,%eax
f012c1d8:	48                   	dec    %eax
f012c1d9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c1dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c1df:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1e4:	f7 75 ac             	divl   -0x54(%ebp)
f012c1e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c1ea:	29 d0                	sub    %edx,%eax
f012c1ec:	01 c3                	add    %eax,%ebx
f012c1ee:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c1f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c1fa:	0f b6 c0             	movzbl %al,%eax
f012c1fd:	c1 e0 04             	shl    $0x4,%eax
f012c200:	89 c2                	mov    %eax,%edx
f012c202:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c205:	01 d0                	add    %edx,%eax
f012c207:	48                   	dec    %eax
f012c208:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c20b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c20e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c213:	f7 75 a4             	divl   -0x5c(%ebp)
f012c216:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c219:	29 d0                	sub    %edx,%eax
f012c21b:	01 d8                	add    %ebx,%eax
f012c21d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c222:	39 c1                	cmp    %eax,%ecx
f012c224:	74 17                	je     f012c23d <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c226:	83 ec 04             	sub    $0x4,%esp
f012c229:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c22e:	68 e4 0e 00 00       	push   $0xee4
f012c233:	68 1a b6 13 f0       	push   $0xf013b61a
f012c238:	e8 c8 3f fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c23d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c240:	e8 62 0c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c245:	29 c3                	sub    %eax,%ebx
f012c247:	89 d8                	mov    %ebx,%eax
f012c249:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c24e:	74 17                	je     f012c267 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c250:	83 ec 04             	sub    $0x4,%esp
f012c253:	68 2e c9 13 f0       	push   $0xf013c92e
f012c258:	68 e7 0e 00 00       	push   $0xee7
f012c25d:	68 1a b6 13 f0       	push   $0xf013b61a
f012c262:	e8 9e 3f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c267:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c26e:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c271:	e8 31 0c fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c276:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c279:	83 ec 08             	sub    $0x8,%esp
f012c27c:	68 00 fc 0f 00       	push   $0xffc00
f012c281:	6a 00                	push   $0x0
f012c283:	e8 c7 bb fd ff       	call   f0107e4f <krealloc>
f012c288:	83 c4 10             	add    $0x10,%esp
f012c28b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c291:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c297:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c29c:	77 17                	ja     f012c2b5 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c29e:	83 ec 04             	sub    $0x4,%esp
f012c2a1:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c2a6:	68 ef 0e 00 00       	push   $0xeef
f012c2ab:	68 1a b6 13 f0       	push   $0xf013b61a
f012c2b0:	e8 50 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c2b5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2bb:	89 c1                	mov    %eax,%ecx
f012c2bd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c2c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c2c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c2cc:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c2cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c2d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2d7:	f7 75 9c             	divl   -0x64(%ebp)
f012c2da:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c2dd:	29 d0                	sub    %edx,%eax
f012c2df:	89 c3                	mov    %eax,%ebx
f012c2e1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c2e8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c2ed:	0f b6 d0             	movzbl %al,%edx
f012c2f0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c2f3:	01 d0                	add    %edx,%eax
f012c2f5:	48                   	dec    %eax
f012c2f6:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c2f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c2fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c301:	f7 75 94             	divl   -0x6c(%ebp)
f012c304:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c307:	29 d0                	sub    %edx,%eax
f012c309:	01 c3                	add    %eax,%ebx
f012c30b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c312:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c317:	0f b6 c0             	movzbl %al,%eax
f012c31a:	c1 e0 04             	shl    $0x4,%eax
f012c31d:	89 c2                	mov    %eax,%edx
f012c31f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c322:	01 d0                	add    %edx,%eax
f012c324:	48                   	dec    %eax
f012c325:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c328:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c32b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c330:	f7 75 8c             	divl   -0x74(%ebp)
f012c333:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c336:	29 d0                	sub    %edx,%eax
f012c338:	01 d8                	add    %ebx,%eax
f012c33a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c33f:	39 c1                	cmp    %eax,%ecx
f012c341:	74 17                	je     f012c35a <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c343:	83 ec 04             	sub    $0x4,%esp
f012c346:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c34b:	68 f1 0e 00 00       	push   $0xef1
f012c350:	68 1a b6 13 f0       	push   $0xf013b61a
f012c355:	e8 ab 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c35a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c35d:	e8 45 0b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c362:	29 c3                	sub    %eax,%ebx
f012c364:	89 d8                	mov    %ebx,%eax
f012c366:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c36b:	74 17                	je     f012c384 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c36d:	83 ec 04             	sub    $0x4,%esp
f012c370:	68 2e c9 13 f0       	push   $0xf013c92e
f012c375:	68 f3 0e 00 00       	push   $0xef3
f012c37a:	68 1a b6 13 f0       	push   $0xf013b61a
f012c37f:	e8 81 3e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c384:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c38b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c38e:	e8 14 0b fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c393:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c396:	83 ec 08             	sub    $0x8,%esp
f012c399:	68 00 fc 0f 00       	push   $0xffc00
f012c39e:	6a 00                	push   $0x0
f012c3a0:	e8 aa ba fd ff       	call   f0107e4f <krealloc>
f012c3a5:	83 c4 10             	add    $0x10,%esp
f012c3a8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c3ae:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c3b4:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c3b9:	77 17                	ja     f012c3d2 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3bb:	83 ec 04             	sub    $0x4,%esp
f012c3be:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c3c3:	68 fb 0e 00 00       	push   $0xefb
f012c3c8:	68 1a b6 13 f0       	push   $0xf013b61a
f012c3cd:	e8 33 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c3d2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c3d8:	89 c1                	mov    %eax,%ecx
f012c3da:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c3e1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c3e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c3e9:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c3ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c3ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3f4:	f7 75 84             	divl   -0x7c(%ebp)
f012c3f7:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c3fa:	29 d0                	sub    %edx,%eax
f012c3fc:	89 c3                	mov    %eax,%ebx
f012c3fe:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c405:	10 00 00 
f012c408:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c40d:	0f b6 d0             	movzbl %al,%edx
f012c410:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c416:	01 d0                	add    %edx,%eax
f012c418:	48                   	dec    %eax
f012c419:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c41f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c425:	ba 00 00 00 00       	mov    $0x0,%edx
f012c42a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c430:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c436:	29 d0                	sub    %edx,%eax
f012c438:	01 c3                	add    %eax,%ebx
f012c43a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c441:	10 00 00 
f012c444:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c449:	0f b6 c0             	movzbl %al,%eax
f012c44c:	c1 e0 04             	shl    $0x4,%eax
f012c44f:	89 c2                	mov    %eax,%edx
f012c451:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c457:	01 d0                	add    %edx,%eax
f012c459:	48                   	dec    %eax
f012c45a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c460:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c466:	ba 00 00 00 00       	mov    $0x0,%edx
f012c46b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c471:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c477:	29 d0                	sub    %edx,%eax
f012c479:	01 d8                	add    %ebx,%eax
f012c47b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c480:	39 c1                	cmp    %eax,%ecx
f012c482:	74 17                	je     f012c49b <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c484:	83 ec 04             	sub    $0x4,%esp
f012c487:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c48c:	68 fd 0e 00 00       	push   $0xefd
f012c491:	68 1a b6 13 f0       	push   $0xf013b61a
f012c496:	e8 6a 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c49b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c49e:	e8 04 0a fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c4a3:	29 c3                	sub    %eax,%ebx
f012c4a5:	89 d8                	mov    %ebx,%eax
f012c4a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c4ac:	74 17                	je     f012c4c5 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c4ae:	83 ec 04             	sub    $0x4,%esp
f012c4b1:	68 2e c9 13 f0       	push   $0xf013c92e
f012c4b6:	68 ff 0e 00 00       	push   $0xeff
f012c4bb:	68 1a b6 13 f0       	push   $0xf013b61a
f012c4c0:	e8 40 3d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c4c5:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c4cc:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c4cf:	e8 d3 09 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c4d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c4d7:	83 ec 08             	sub    $0x8,%esp
f012c4da:	68 00 fc 0f 00       	push   $0xffc00
f012c4df:	6a 00                	push   $0x0
f012c4e1:	e8 69 b9 fd ff       	call   f0107e4f <krealloc>
f012c4e6:	83 c4 10             	add    $0x10,%esp
f012c4e9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c4ef:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4f5:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c4fa:	77 17                	ja     f012c513 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4fc:	83 ec 04             	sub    $0x4,%esp
f012c4ff:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c504:	68 06 0f 00 00       	push   $0xf06
f012c509:	68 1a b6 13 f0       	push   $0xf013b61a
f012c50e:	e8 f2 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c513:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c519:	89 c1                	mov    %eax,%ecx
f012c51b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c522:	10 00 00 
f012c525:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c52b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c530:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c536:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c53c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c541:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c547:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c54d:	29 d0                	sub    %edx,%eax
f012c54f:	89 c3                	mov    %eax,%ebx
f012c551:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c558:	10 00 00 
f012c55b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c560:	0f b6 d0             	movzbl %al,%edx
f012c563:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c569:	01 d0                	add    %edx,%eax
f012c56b:	48                   	dec    %eax
f012c56c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c572:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c578:	ba 00 00 00 00       	mov    $0x0,%edx
f012c57d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c583:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c589:	29 d0                	sub    %edx,%eax
f012c58b:	01 c3                	add    %eax,%ebx
f012c58d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c594:	10 00 00 
f012c597:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c59c:	0f b6 c0             	movzbl %al,%eax
f012c59f:	c1 e0 04             	shl    $0x4,%eax
f012c5a2:	89 c2                	mov    %eax,%edx
f012c5a4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c5aa:	01 d0                	add    %edx,%eax
f012c5ac:	48                   	dec    %eax
f012c5ad:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c5b3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c5b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5be:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c5c4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c5ca:	29 d0                	sub    %edx,%eax
f012c5cc:	01 d8                	add    %ebx,%eax
f012c5ce:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c5d3:	39 c1                	cmp    %eax,%ecx
f012c5d5:	74 17                	je     f012c5ee <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c5d7:	83 ec 04             	sub    $0x4,%esp
f012c5da:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c5df:	68 08 0f 00 00       	push   $0xf08
f012c5e4:	68 1a b6 13 f0       	push   $0xf013b61a
f012c5e9:	e8 17 3c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c5ee:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5f1:	e8 b1 08 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c5f6:	29 c3                	sub    %eax,%ebx
f012c5f8:	89 d8                	mov    %ebx,%eax
f012c5fa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c5ff:	74 17                	je     f012c618 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c601:	83 ec 04             	sub    $0x4,%esp
f012c604:	68 2e c9 13 f0       	push   $0xf013c92e
f012c609:	68 0a 0f 00 00       	push   $0xf0a
f012c60e:	68 1a b6 13 f0       	push   $0xf013b61a
f012c613:	e8 ed 3b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c618:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c61f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c622:	e8 80 08 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c627:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c62a:	83 ec 08             	sub    $0x8,%esp
f012c62d:	68 00 fc 1f 00       	push   $0x1ffc00
f012c632:	6a 00                	push   $0x0
f012c634:	e8 16 b8 fd ff       	call   f0107e4f <krealloc>
f012c639:	83 c4 10             	add    $0x10,%esp
f012c63c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c642:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c648:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c64d:	77 17                	ja     f012c666 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c64f:	83 ec 04             	sub    $0x4,%esp
f012c652:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c657:	68 11 0f 00 00       	push   $0xf11
f012c65c:	68 1a b6 13 f0       	push   $0xf013b61a
f012c661:	e8 9f 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c666:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c66c:	89 c1                	mov    %eax,%ecx
f012c66e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c675:	10 00 00 
f012c678:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c67e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c683:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c689:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c68f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c694:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c69a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c6a0:	29 d0                	sub    %edx,%eax
f012c6a2:	89 c3                	mov    %eax,%ebx
f012c6a4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c6ab:	10 00 00 
f012c6ae:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c6b3:	0f b6 d0             	movzbl %al,%edx
f012c6b6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c6bc:	01 d0                	add    %edx,%eax
f012c6be:	48                   	dec    %eax
f012c6bf:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c6c5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c6cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6d0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c6d6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c6dc:	29 d0                	sub    %edx,%eax
f012c6de:	01 c3                	add    %eax,%ebx
f012c6e0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c6e7:	10 00 00 
f012c6ea:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c6ef:	0f b6 c0             	movzbl %al,%eax
f012c6f2:	c1 e0 04             	shl    $0x4,%eax
f012c6f5:	89 c2                	mov    %eax,%edx
f012c6f7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c6fd:	01 d0                	add    %edx,%eax
f012c6ff:	48                   	dec    %eax
f012c700:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c706:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c70c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c711:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c717:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c71d:	29 d0                	sub    %edx,%eax
f012c71f:	01 d8                	add    %ebx,%eax
f012c721:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c726:	39 c1                	cmp    %eax,%ecx
f012c728:	74 17                	je     f012c741 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c72a:	83 ec 04             	sub    $0x4,%esp
f012c72d:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c732:	68 13 0f 00 00       	push   $0xf13
f012c737:	68 1a b6 13 f0       	push   $0xf013b61a
f012c73c:	e8 c4 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c741:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c744:	e8 5e 07 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c749:	29 c3                	sub    %eax,%ebx
f012c74b:	89 d8                	mov    %ebx,%eax
f012c74d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c752:	74 17                	je     f012c76b <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c754:	83 ec 04             	sub    $0x4,%esp
f012c757:	68 2e c9 13 f0       	push   $0xf013c92e
f012c75c:	68 15 0f 00 00       	push   $0xf15
f012c761:	68 1a b6 13 f0       	push   $0xf013b61a
f012c766:	e8 9a 3a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c76b:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c772:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c775:	e8 2d 07 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c77a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c77d:	83 ec 08             	sub    $0x8,%esp
f012c780:	68 00 fc 1f 00       	push   $0x1ffc00
f012c785:	6a 00                	push   $0x0
f012c787:	e8 c3 b6 fd ff       	call   f0107e4f <krealloc>
f012c78c:	83 c4 10             	add    $0x10,%esp
f012c78f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c795:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c79b:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c7a0:	77 17                	ja     f012c7b9 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7a2:	83 ec 04             	sub    $0x4,%esp
f012c7a5:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c7aa:	68 1c 0f 00 00       	push   $0xf1c
f012c7af:	68 1a b6 13 f0       	push   $0xf013b61a
f012c7b4:	e8 4c 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c7b9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c7bf:	89 c1                	mov    %eax,%ecx
f012c7c1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c7c8:	10 00 00 
f012c7cb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c7d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c7d6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c7dc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c7e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7e7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c7ed:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c7f3:	29 d0                	sub    %edx,%eax
f012c7f5:	89 c3                	mov    %eax,%ebx
f012c7f7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c7fe:	10 00 00 
f012c801:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c806:	0f b6 d0             	movzbl %al,%edx
f012c809:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c80f:	01 d0                	add    %edx,%eax
f012c811:	48                   	dec    %eax
f012c812:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c818:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c81e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c823:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c829:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c82f:	29 d0                	sub    %edx,%eax
f012c831:	01 c3                	add    %eax,%ebx
f012c833:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c83a:	10 00 00 
f012c83d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c842:	0f b6 c0             	movzbl %al,%eax
f012c845:	c1 e0 04             	shl    $0x4,%eax
f012c848:	89 c2                	mov    %eax,%edx
f012c84a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c850:	01 d0                	add    %edx,%eax
f012c852:	48                   	dec    %eax
f012c853:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c859:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c85f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c864:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c86a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c870:	29 d0                	sub    %edx,%eax
f012c872:	01 d8                	add    %ebx,%eax
f012c874:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c879:	39 c1                	cmp    %eax,%ecx
f012c87b:	74 17                	je     f012c894 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c87d:	83 ec 04             	sub    $0x4,%esp
f012c880:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c885:	68 1e 0f 00 00       	push   $0xf1e
f012c88a:	68 1a b6 13 f0       	push   $0xf013b61a
f012c88f:	e8 71 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c894:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c897:	e8 0b 06 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c89c:	29 c3                	sub    %eax,%ebx
f012c89e:	89 d8                	mov    %ebx,%eax
f012c8a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c8a5:	74 17                	je     f012c8be <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c8a7:	83 ec 04             	sub    $0x4,%esp
f012c8aa:	68 2e c9 13 f0       	push   $0xf013c92e
f012c8af:	68 20 0f 00 00       	push   $0xf20
f012c8b4:	68 1a b6 13 f0       	push   $0xf013b61a
f012c8b9:	e8 47 39 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c8be:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c8c5:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c8c8:	e8 da 05 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c8cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c8d0:	83 ec 08             	sub    $0x8,%esp
f012c8d3:	68 00 fc 2f 00       	push   $0x2ffc00
f012c8d8:	6a 00                	push   $0x0
f012c8da:	e8 70 b5 fd ff       	call   f0107e4f <krealloc>
f012c8df:	83 c4 10             	add    $0x10,%esp
f012c8e2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c8e8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c8ee:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c8f3:	77 17                	ja     f012c90c <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c8f5:	83 ec 04             	sub    $0x4,%esp
f012c8f8:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012c8fd:	68 27 0f 00 00       	push   $0xf27
f012c902:	68 1a b6 13 f0       	push   $0xf013b61a
f012c907:	e8 f9 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c90c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c912:	89 c1                	mov    %eax,%ecx
f012c914:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c91b:	10 00 00 
f012c91e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c924:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c929:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c92f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c935:	ba 00 00 00 00       	mov    $0x0,%edx
f012c93a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c940:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c946:	29 d0                	sub    %edx,%eax
f012c948:	89 c3                	mov    %eax,%ebx
f012c94a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c951:	10 00 00 
f012c954:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c959:	0f b6 d0             	movzbl %al,%edx
f012c95c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c962:	01 d0                	add    %edx,%eax
f012c964:	48                   	dec    %eax
f012c965:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c96b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c971:	ba 00 00 00 00       	mov    $0x0,%edx
f012c976:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c97c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c982:	29 d0                	sub    %edx,%eax
f012c984:	01 c3                	add    %eax,%ebx
f012c986:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c98d:	10 00 00 
f012c990:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c995:	0f b6 c0             	movzbl %al,%eax
f012c998:	c1 e0 04             	shl    $0x4,%eax
f012c99b:	89 c2                	mov    %eax,%edx
f012c99d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c9a3:	01 d0                	add    %edx,%eax
f012c9a5:	48                   	dec    %eax
f012c9a6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c9ac:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c9b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9b7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c9bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c9c3:	29 d0                	sub    %edx,%eax
f012c9c5:	01 d8                	add    %ebx,%eax
f012c9c7:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c9cc:	39 c1                	cmp    %eax,%ecx
f012c9ce:	74 17                	je     f012c9e7 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c9d0:	83 ec 04             	sub    $0x4,%esp
f012c9d3:	68 fc c8 13 f0       	push   $0xf013c8fc
f012c9d8:	68 29 0f 00 00       	push   $0xf29
f012c9dd:	68 1a b6 13 f0       	push   $0xf013b61a
f012c9e2:	e8 1e 38 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c9e7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9ea:	e8 b8 04 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012c9ef:	29 c3                	sub    %eax,%ebx
f012c9f1:	89 d8                	mov    %ebx,%eax
f012c9f3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c9f8:	74 17                	je     f012ca11 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c9fa:	83 ec 04             	sub    $0x4,%esp
f012c9fd:	68 64 ba 13 f0       	push   $0xf013ba64
f012ca02:	68 2b 0f 00 00       	push   $0xf2b
f012ca07:	68 1a b6 13 f0       	push   $0xf013b61a
f012ca0c:	e8 f4 37 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ca11:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ca18:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ca1b:	e8 87 04 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012ca20:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ca23:	83 ec 08             	sub    $0x8,%esp
f012ca26:	68 00 fc 2f 00       	push   $0x2ffc00
f012ca2b:	6a 00                	push   $0x0
f012ca2d:	e8 1d b4 fd ff       	call   f0107e4f <krealloc>
f012ca32:	83 c4 10             	add    $0x10,%esp
f012ca35:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ca3b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca41:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ca46:	77 17                	ja     f012ca5f <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca48:	83 ec 04             	sub    $0x4,%esp
f012ca4b:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012ca50:	68 32 0f 00 00       	push   $0xf32
f012ca55:	68 1a b6 13 f0       	push   $0xf013b61a
f012ca5a:	e8 a6 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ca5f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca65:	89 c1                	mov    %eax,%ecx
f012ca67:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ca6e:	10 00 00 
f012ca71:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ca77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ca7c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ca82:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ca88:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca8d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ca93:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ca99:	29 d0                	sub    %edx,%eax
f012ca9b:	89 c3                	mov    %eax,%ebx
f012ca9d:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012caa4:	10 00 00 
f012caa7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012caac:	0f b6 d0             	movzbl %al,%edx
f012caaf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cab5:	01 d0                	add    %edx,%eax
f012cab7:	48                   	dec    %eax
f012cab8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cabe:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cac4:	ba 00 00 00 00       	mov    $0x0,%edx
f012cac9:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cacf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cad5:	29 d0                	sub    %edx,%eax
f012cad7:	01 c3                	add    %eax,%ebx
f012cad9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cae0:	10 00 00 
f012cae3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012cae8:	0f b6 c0             	movzbl %al,%eax
f012caeb:	c1 e0 04             	shl    $0x4,%eax
f012caee:	89 c2                	mov    %eax,%edx
f012caf0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012caf6:	01 d0                	add    %edx,%eax
f012caf8:	48                   	dec    %eax
f012caf9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012caff:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb05:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb0a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cb10:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb16:	29 d0                	sub    %edx,%eax
f012cb18:	01 d8                	add    %ebx,%eax
f012cb1a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cb1f:	39 c1                	cmp    %eax,%ecx
f012cb21:	74 17                	je     f012cb3a <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cb23:	83 ec 04             	sub    $0x4,%esp
f012cb26:	68 fc c8 13 f0       	push   $0xf013c8fc
f012cb2b:	68 34 0f 00 00       	push   $0xf34
f012cb30:	68 1a b6 13 f0       	push   $0xf013b61a
f012cb35:	e8 cb 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cb3a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb3d:	e8 65 03 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012cb42:	29 c3                	sub    %eax,%ebx
f012cb44:	89 d8                	mov    %ebx,%eax
f012cb46:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cb4b:	74 17                	je     f012cb64 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cb4d:	83 ec 04             	sub    $0x4,%esp
f012cb50:	68 2e c9 13 f0       	push   $0xf013c92e
f012cb55:	68 36 0f 00 00       	push   $0xf36
f012cb5a:	68 1a b6 13 f0       	push   $0xf013b61a
f012cb5f:	e8 a1 36 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cb64:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cb6b:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb6e:	e8 34 03 fe ff       	call   f010cea7 <sys_calculate_free_frames>
f012cb73:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cb76:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cb7d:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cb80:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cb86:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cb8c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cb92:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cb95:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cb97:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cb9d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cba3:	01 c2                	add    %eax,%edx
f012cba5:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cba8:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cbaa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cbb0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cbbd:	eb 11                	jmp    f012cbd0 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012cbbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cbc2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cbc8:	01 d0                	add    %edx,%eax
f012cbca:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbcd:	ff 45 f4             	incl   -0xc(%ebp)
f012cbd0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cbd6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cbd9:	7d e4                	jge    f012cbbf <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cbdb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cbe1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012cbe7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cbed:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cbf3:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cbf9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc00:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc06:	01 d0                	add    %edx,%eax
f012cc08:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cc0e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc14:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cc21:	eb 1b                	jmp    f012cc3e <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cc23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cc26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc2d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc33:	01 d0                	add    %edx,%eax
f012cc35:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc3b:	ff 45 f0             	incl   -0x10(%ebp)
f012cc3e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cc44:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cc47:	7d da                	jge    f012cc23 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cc49:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc4f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc55:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cc5c:	eb 17                	jmp    f012cc75 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012cc5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cc61:	01 c0                	add    %eax,%eax
f012cc63:	89 c2                	mov    %eax,%edx
f012cc65:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc6b:	01 d0                	add    %edx,%eax
f012cc6d:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc72:	ff 45 ec             	incl   -0x14(%ebp)
f012cc75:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cc7b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cc7e:	7d de                	jge    f012cc5e <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cc80:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc86:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012cc8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc92:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cc97:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cc9d:	01 c0                	add    %eax,%eax
f012cc9f:	89 c2                	mov    %eax,%edx
f012cca1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cca7:	01 d0                	add    %edx,%eax
f012cca9:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ccae:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ccb4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ccba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ccc1:	eb 49                	jmp    f012cd0c <test_krealloc+0xc58>
			structArr[i].a = 7;
f012ccc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cccd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccd3:	01 d0                	add    %edx,%eax
f012ccd5:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012ccd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccdb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cce2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cce8:	01 d0                	add    %edx,%eax
f012ccea:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ccf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccf3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccfa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd00:	01 d0                	add    %edx,%eax
f012cd02:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cd09:	ff 45 e8             	incl   -0x18(%ebp)
f012cd0c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd12:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012cd15:	7d ac                	jge    f012ccc3 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012cd17:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cd1d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012cd23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd29:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012cd2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd32:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012cd38:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd3e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012cd45:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd4b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd52:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd58:	01 d0                	add    %edx,%eax
f012cd5a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012cd5d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd63:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd70:	01 d0                	add    %edx,%eax
f012cd72:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012cd78:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd7e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd8b:	01 d0                	add    %edx,%eax
f012cd8d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012cd94:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cd9a:	8a 00                	mov    (%eax),%al
f012cd9c:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012cd9f:	75 17                	jne    f012cdb8 <test_krealloc+0xd04>
f012cda1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012cda7:	89 c2                	mov    %eax,%edx
f012cda9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cdaf:	01 d0                	add    %edx,%eax
f012cdb1:	8a 00                	mov    (%eax),%al
f012cdb3:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012cdb6:	74 17                	je     f012cdcf <test_krealloc+0xd1b>
			panic(
f012cdb8:	83 ec 04             	sub    $0x4,%esp
f012cdbb:	68 4c c9 13 f0       	push   $0xf013c94c
f012cdc0:	68 79 0f 00 00       	push   $0xf79
f012cdc5:	68 1a b6 13 f0       	push   $0xf013b61a
f012cdca:	e8 36 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012cdcf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cdd5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012cddb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cde1:	8a 00                	mov    (%eax),%al
f012cde3:	3c 02                	cmp    $0x2,%al
f012cde5:	75 16                	jne    f012cdfd <test_krealloc+0xd49>
f012cde7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cded:	89 c2                	mov    %eax,%edx
f012cdef:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cdf5:	01 d0                	add    %edx,%eax
f012cdf7:	8a 00                	mov    (%eax),%al
f012cdf9:	3c 02                	cmp    $0x2,%al
f012cdfb:	74 20                	je     f012ce1d <test_krealloc+0xd69>
			panic(
f012cdfd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce03:	8a 00                	mov    (%eax),%al
f012ce05:	0f be c0             	movsbl %al,%eax
f012ce08:	50                   	push   %eax
f012ce09:	68 8c c9 13 f0       	push   $0xf013c98c
f012ce0e:	68 7f 0f 00 00       	push   $0xf7f
f012ce13:	68 1a b6 13 f0       	push   $0xf013b61a
f012ce18:	e8 e8 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ce1d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ce23:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ce29:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce2f:	8b 00                	mov    (%eax),%eax
f012ce31:	83 f8 03             	cmp    $0x3,%eax
f012ce34:	75 1c                	jne    f012ce52 <test_krealloc+0xd9e>
f012ce36:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012ce3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce43:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce49:	01 d0                	add    %edx,%eax
f012ce4b:	8b 00                	mov    (%eax),%eax
f012ce4d:	83 f8 03             	cmp    $0x3,%eax
f012ce50:	74 17                	je     f012ce69 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ce52:	83 ec 04             	sub    $0x4,%esp
f012ce55:	68 d8 c9 13 f0       	push   $0xf013c9d8
f012ce5a:	68 83 0f 00 00       	push   $0xf83
f012ce5f:	68 1a b6 13 f0       	push   $0xf013b61a
f012ce64:	e8 9c 33 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ce69:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ce6f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ce75:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce7b:	8b 00                	mov    (%eax),%eax
f012ce7d:	83 f8 04             	cmp    $0x4,%eax
f012ce80:	75 1c                	jne    f012ce9e <test_krealloc+0xdea>
f012ce82:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ce88:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce8f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce95:	01 d0                	add    %edx,%eax
f012ce97:	8b 00                	mov    (%eax),%eax
f012ce99:	83 f8 04             	cmp    $0x4,%eax
f012ce9c:	74 17                	je     f012ceb5 <test_krealloc+0xe01>
			panic(
f012ce9e:	83 ec 04             	sub    $0x4,%esp
f012cea1:	68 4c c9 13 f0       	push   $0xf013c94c
f012cea6:	68 88 0f 00 00       	push   $0xf88
f012ceab:	68 1a b6 13 f0       	push   $0xf013b61a
f012ceb0:	e8 50 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ceb5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cebb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cec1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cec7:	66 8b 00             	mov    (%eax),%ax
f012ceca:	66 83 f8 05          	cmp    $0x5,%ax
f012cece:	75 1b                	jne    f012ceeb <test_krealloc+0xe37>
f012ced0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012ced6:	01 c0                	add    %eax,%eax
f012ced8:	89 c2                	mov    %eax,%edx
f012ceda:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cee0:	01 d0                	add    %edx,%eax
f012cee2:	66 8b 00             	mov    (%eax),%ax
f012cee5:	66 83 f8 05          	cmp    $0x5,%ax
f012cee9:	74 17                	je     f012cf02 <test_krealloc+0xe4e>
			panic(
f012ceeb:	83 ec 04             	sub    $0x4,%esp
f012ceee:	68 4c c9 13 f0       	push   $0xf013c94c
f012cef3:	68 8d 0f 00 00       	push   $0xf8d
f012cef8:	68 1a b6 13 f0       	push   $0xf013b61a
f012cefd:	e8 03 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cf02:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cf08:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cf0e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf14:	66 8b 00             	mov    (%eax),%ax
f012cf17:	66 83 f8 06          	cmp    $0x6,%ax
f012cf1b:	75 1b                	jne    f012cf38 <test_krealloc+0xe84>
f012cf1d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cf23:	01 c0                	add    %eax,%eax
f012cf25:	89 c2                	mov    %eax,%edx
f012cf27:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf2d:	01 d0                	add    %edx,%eax
f012cf2f:	66 8b 00             	mov    (%eax),%ax
f012cf32:	66 83 f8 06          	cmp    $0x6,%ax
f012cf36:	74 17                	je     f012cf4f <test_krealloc+0xe9b>
			panic(
f012cf38:	83 ec 04             	sub    $0x4,%esp
f012cf3b:	68 4c c9 13 f0       	push   $0xf013c94c
f012cf40:	68 92 0f 00 00       	push   $0xf92
f012cf45:	68 1a b6 13 f0       	push   $0xf013b61a
f012cf4a:	e8 b6 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cf4f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cf55:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cf5b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf61:	8a 00                	mov    (%eax),%al
f012cf63:	3c 07                	cmp    $0x7,%al
f012cf65:	75 1b                	jne    f012cf82 <test_krealloc+0xece>
f012cf67:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cf6d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cf74:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf7a:	01 d0                	add    %edx,%eax
f012cf7c:	8a 00                	mov    (%eax),%al
f012cf7e:	3c 07                	cmp    $0x7,%al
f012cf80:	74 17                	je     f012cf99 <test_krealloc+0xee5>
			panic(
f012cf82:	83 ec 04             	sub    $0x4,%esp
f012cf85:	68 4c c9 13 f0       	push   $0xf013c94c
f012cf8a:	68 97 0f 00 00       	push   $0xf97
f012cf8f:	68 1a b6 13 f0       	push   $0xf013b61a
f012cf94:	e8 6c 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cf99:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf9f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfa3:	66 83 f8 07          	cmp    $0x7,%ax
f012cfa7:	75 1f                	jne    f012cfc8 <test_krealloc+0xf14>
f012cfa9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cfaf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cfb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfbc:	01 d0                	add    %edx,%eax
f012cfbe:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfc2:	66 83 f8 07          	cmp    $0x7,%ax
f012cfc6:	74 17                	je     f012cfdf <test_krealloc+0xf2b>
			panic(
f012cfc8:	83 ec 04             	sub    $0x4,%esp
f012cfcb:	68 4c c9 13 f0       	push   $0xf013c94c
f012cfd0:	68 9a 0f 00 00       	push   $0xf9a
f012cfd5:	68 1a b6 13 f0       	push   $0xf013b61a
f012cfda:	e8 26 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cfdf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfe5:	8b 40 04             	mov    0x4(%eax),%eax
f012cfe8:	83 f8 07             	cmp    $0x7,%eax
f012cfeb:	75 1d                	jne    f012d00a <test_krealloc+0xf56>
f012cfed:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cff3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cffa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d000:	01 d0                	add    %edx,%eax
f012d002:	8b 40 04             	mov    0x4(%eax),%eax
f012d005:	83 f8 07             	cmp    $0x7,%eax
f012d008:	74 17                	je     f012d021 <test_krealloc+0xf6d>
			panic(
f012d00a:	83 ec 04             	sub    $0x4,%esp
f012d00d:	68 4c c9 13 f0       	push   $0xf013c94c
f012d012:	68 9d 0f 00 00       	push   $0xf9d
f012d017:	68 1a b6 13 f0       	push   $0xf013b61a
f012d01c:	e8 e4 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d021:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d027:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d02d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d033:	8a 00                	mov    (%eax),%al
f012d035:	3c 08                	cmp    $0x8,%al
f012d037:	75 1b                	jne    f012d054 <test_krealloc+0xfa0>
f012d039:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d03f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d046:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d04c:	01 d0                	add    %edx,%eax
f012d04e:	8a 00                	mov    (%eax),%al
f012d050:	3c 08                	cmp    $0x8,%al
f012d052:	74 17                	je     f012d06b <test_krealloc+0xfb7>
			panic(
f012d054:	83 ec 04             	sub    $0x4,%esp
f012d057:	68 4c c9 13 f0       	push   $0xf013c94c
f012d05c:	68 a2 0f 00 00       	push   $0xfa2
f012d061:	68 1a b6 13 f0       	push   $0xf013b61a
f012d066:	e8 9a 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d06b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d071:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d075:	66 83 f8 08          	cmp    $0x8,%ax
f012d079:	75 1f                	jne    f012d09a <test_krealloc+0xfe6>
f012d07b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d081:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d088:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d08e:	01 d0                	add    %edx,%eax
f012d090:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d094:	66 83 f8 08          	cmp    $0x8,%ax
f012d098:	74 17                	je     f012d0b1 <test_krealloc+0xffd>
			panic(
f012d09a:	83 ec 04             	sub    $0x4,%esp
f012d09d:	68 4c c9 13 f0       	push   $0xf013c94c
f012d0a2:	68 a5 0f 00 00       	push   $0xfa5
f012d0a7:	68 1a b6 13 f0       	push   $0xf013b61a
f012d0ac:	e8 54 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d0b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0b7:	8b 40 04             	mov    0x4(%eax),%eax
f012d0ba:	83 f8 08             	cmp    $0x8,%eax
f012d0bd:	75 1d                	jne    f012d0dc <test_krealloc+0x1028>
f012d0bf:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0d2:	01 d0                	add    %edx,%eax
f012d0d4:	8b 40 04             	mov    0x4(%eax),%eax
f012d0d7:	83 f8 08             	cmp    $0x8,%eax
f012d0da:	74 17                	je     f012d0f3 <test_krealloc+0x103f>
			panic(
f012d0dc:	83 ec 04             	sub    $0x4,%esp
f012d0df:	68 4c c9 13 f0       	push   $0xf013c94c
f012d0e4:	68 a8 0f 00 00       	push   $0xfa8
f012d0e9:	68 1a b6 13 f0       	push   $0xf013b61a
f012d0ee:	e8 12 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d0f3:	e8 af fd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d0f8:	89 c2                	mov    %eax,%edx
f012d0fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0fd:	39 c2                	cmp    %eax,%edx
f012d0ff:	74 17                	je     f012d118 <test_krealloc+0x1064>
			panic(
f012d101:	83 ec 04             	sub    $0x4,%esp
f012d104:	68 0c ca 13 f0       	push   $0xf013ca0c
f012d109:	68 ac 0f 00 00       	push   $0xfac
f012d10e:	68 1a b6 13 f0       	push   $0xf013b61a
f012d113:	e8 ed 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d118:	83 ec 0c             	sub    $0xc,%esp
f012d11b:	68 58 ca 13 f0       	push   $0xf013ca58
f012d120:	e8 e9 3b fd ff       	call   f0100d0e <cprintf>
f012d125:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d128:	e8 7a fd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d12d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d130:	e8 93 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d135:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d13b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d141:	83 ec 08             	sub    $0x8,%esp
f012d144:	6a 00                	push   $0x0
f012d146:	50                   	push   %eax
f012d147:	e8 03 ad fd ff       	call   f0107e4f <krealloc>
f012d14c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d14f:	e8 74 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d154:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d15a:	74 17                	je     f012d173 <test_krealloc+0x10bf>
			panic(
f012d15c:	83 ec 04             	sub    $0x4,%esp
f012d15f:	68 7c ca 13 f0       	push   $0xf013ca7c
f012d164:	68 b9 0f 00 00       	push   $0xfb9
f012d169:	68 1a b6 13 f0       	push   $0xf013b61a
f012d16e:	e8 92 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d173:	e8 2f fd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d178:	89 c2                	mov    %eax,%edx
f012d17a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d17d:	29 c2                	sub    %eax,%edx
f012d17f:	89 d0                	mov    %edx,%eax
f012d181:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d186:	74 17                	je     f012d19f <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d188:	83 ec 04             	sub    $0x4,%esp
f012d18b:	68 f0 ca 13 f0       	push   $0xf013caf0
f012d190:	68 bb 0f 00 00       	push   $0xfbb
f012d195:	68 1a b6 13 f0       	push   $0xf013b61a
f012d19a:	e8 66 30 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d19f:	e8 03 fd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d1a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d1a7:	e8 1c 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d1ac:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d1b2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d1b8:	83 ec 08             	sub    $0x8,%esp
f012d1bb:	6a 00                	push   $0x0
f012d1bd:	50                   	push   %eax
f012d1be:	e8 8c ac fd ff       	call   f0107e4f <krealloc>
f012d1c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d1c6:	e8 fd 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d1cb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d1d1:	74 17                	je     f012d1ea <test_krealloc+0x1136>
			panic(
f012d1d3:	83 ec 04             	sub    $0x4,%esp
f012d1d6:	68 7c ca 13 f0       	push   $0xf013ca7c
f012d1db:	68 c4 0f 00 00       	push   $0xfc4
f012d1e0:	68 1a b6 13 f0       	push   $0xf013b61a
f012d1e5:	e8 1b 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d1ea:	e8 b8 fc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d1ef:	89 c2                	mov    %eax,%edx
f012d1f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1f4:	29 c2                	sub    %eax,%edx
f012d1f6:	89 d0                	mov    %edx,%eax
f012d1f8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d1fd:	74 17                	je     f012d216 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d1ff:	83 ec 04             	sub    $0x4,%esp
f012d202:	68 f0 ca 13 f0       	push   $0xf013caf0
f012d207:	68 c6 0f 00 00       	push   $0xfc6
f012d20c:	68 1a b6 13 f0       	push   $0xf013b61a
f012d211:	e8 ef 2f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d216:	e8 8c fc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d21b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d21e:	e8 a5 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d223:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d229:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d22f:	83 ec 08             	sub    $0x8,%esp
f012d232:	6a 00                	push   $0x0
f012d234:	50                   	push   %eax
f012d235:	e8 15 ac fd ff       	call   f0107e4f <krealloc>
f012d23a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d23d:	e8 86 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d242:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d248:	74 17                	je     f012d261 <test_krealloc+0x11ad>
			panic(
f012d24a:	83 ec 04             	sub    $0x4,%esp
f012d24d:	68 34 b6 13 f0       	push   $0xf013b634
f012d252:	68 ce 0f 00 00       	push   $0xfce
f012d257:	68 1a b6 13 f0       	push   $0xf013b61a
f012d25c:	e8 a4 2f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d261:	e8 41 fc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d266:	89 c2                	mov    %eax,%edx
f012d268:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d26b:	29 c2                	sub    %eax,%edx
f012d26d:	89 d0                	mov    %edx,%eax
f012d26f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d274:	74 17                	je     f012d28d <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d276:	83 ec 04             	sub    $0x4,%esp
f012d279:	68 f0 ca 13 f0       	push   $0xf013caf0
f012d27e:	68 d0 0f 00 00       	push   $0xfd0
f012d283:	68 1a b6 13 f0       	push   $0xf013b61a
f012d288:	e8 78 2f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d28d:	e8 15 fc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d292:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d295:	e8 2e 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d29a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d2a0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d2a6:	83 ec 08             	sub    $0x8,%esp
f012d2a9:	6a 00                	push   $0x0
f012d2ab:	50                   	push   %eax
f012d2ac:	e8 9e ab fd ff       	call   f0107e4f <krealloc>
f012d2b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2b4:	e8 0f 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d2b9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d2bf:	74 17                	je     f012d2d8 <test_krealloc+0x1224>
			panic(
f012d2c1:	83 ec 04             	sub    $0x4,%esp
f012d2c4:	68 7c ca 13 f0       	push   $0xf013ca7c
f012d2c9:	68 d8 0f 00 00       	push   $0xfd8
f012d2ce:	68 1a b6 13 f0       	push   $0xf013b61a
f012d2d3:	e8 2d 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d2d8:	e8 ca fb fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d2dd:	89 c2                	mov    %eax,%edx
f012d2df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2e2:	29 c2                	sub    %eax,%edx
f012d2e4:	89 d0                	mov    %edx,%eax
f012d2e6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d2eb:	74 17                	je     f012d304 <test_krealloc+0x1250>
			panic(
f012d2ed:	83 ec 04             	sub    $0x4,%esp
f012d2f0:	68 24 cb 13 f0       	push   $0xf013cb24
f012d2f5:	68 db 0f 00 00       	push   $0xfdb
f012d2fa:	68 1a b6 13 f0       	push   $0xf013b61a
f012d2ff:	e8 01 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d304:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d30b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d312:	eb 48                	jmp    f012d35c <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d314:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d317:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012d31c:	83 ec 04             	sub    $0x4,%esp
f012d31f:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d325:	51                   	push   %ecx
f012d326:	52                   	push   %edx
f012d327:	50                   	push   %eax
f012d328:	e8 84 97 fd ff       	call   f0106ab1 <get_page_table>
f012d32d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d330:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d336:	85 c0                	test   %eax,%eax
f012d338:	75 17                	jne    f012d351 <test_krealloc+0x129d>
					panic(
f012d33a:	83 ec 04             	sub    $0x4,%esp
f012d33d:	68 1c bf 13 f0       	push   $0xf013bf1c
f012d342:	68 e7 0f 00 00       	push   $0xfe7
f012d347:	68 1a b6 13 f0       	push   $0xf013b61a
f012d34c:	e8 b4 2e fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d351:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d358:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d35c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d360:	78 b2                	js     f012d314 <test_krealloc+0x1260>
f012d362:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d366:	7f 09                	jg     f012d371 <test_krealloc+0x12bd>
f012d368:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d36f:	76 a3                	jbe    f012d314 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d371:	83 ec 0c             	sub    $0xc,%esp
f012d374:	68 63 cb 13 f0       	push   $0xf013cb63
f012d379:	e8 90 39 fd ff       	call   f0100d0e <cprintf>
f012d37e:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d381:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d387:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d38d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d394:	eb 21                	jmp    f012d3b7 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d396:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d39c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d39f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d3a5:	01 c8                	add    %ecx,%eax
f012d3a7:	8a 00                	mov    (%eax),%al
f012d3a9:	0f be c0             	movsbl %al,%eax
f012d3ac:	01 d0                	add    %edx,%eax
f012d3ae:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3b4:	ff 45 dc             	incl   -0x24(%ebp)
f012d3b7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d3bd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d3c0:	7d d4                	jge    f012d396 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d3c2:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d3c8:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d3ce:	42                   	inc    %edx
f012d3cf:	01 d2                	add    %edx,%edx
f012d3d1:	39 d0                	cmp    %edx,%eax
f012d3d3:	74 17                	je     f012d3ec <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d3d5:	83 ec 04             	sub    $0x4,%esp
f012d3d8:	68 6c cb 13 f0       	push   $0xf013cb6c
f012d3dd:	68 f9 0f 00 00       	push   $0xff9
f012d3e2:	68 1a b6 13 f0       	push   $0xf013b61a
f012d3e7:	e8 19 2e fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d3ec:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d3f2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d3f8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d3ff:	eb 25                	jmp    f012d426 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d401:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d407:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d40a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d411:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d417:	01 c8                	add    %ecx,%eax
f012d419:	8b 00                	mov    (%eax),%eax
f012d41b:	01 d0                	add    %edx,%eax
f012d41d:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d423:	ff 45 dc             	incl   -0x24(%ebp)
f012d426:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d42c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d42f:	7d d0                	jge    f012d401 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d431:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d437:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d43d:	42                   	inc    %edx
f012d43e:	c1 e2 02             	shl    $0x2,%edx
f012d441:	39 d0                	cmp    %edx,%eax
f012d443:	74 17                	je     f012d45c <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d445:	83 ec 04             	sub    $0x4,%esp
f012d448:	68 6c cb 13 f0       	push   $0xf013cb6c
f012d44d:	68 03 10 00 00       	push   $0x1003
f012d452:	68 1a b6 13 f0       	push   $0xf013b61a
f012d457:	e8 a9 2d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d45c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d462:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d468:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d46f:	eb 24                	jmp    f012d495 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d471:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d477:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d47a:	01 c0                	add    %eax,%eax
f012d47c:	89 c1                	mov    %eax,%ecx
f012d47e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d484:	01 c8                	add    %ecx,%eax
f012d486:	66 8b 00             	mov    (%eax),%ax
f012d489:	98                   	cwtl   
f012d48a:	01 d0                	add    %edx,%eax
f012d48c:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d492:	ff 45 dc             	incl   -0x24(%ebp)
f012d495:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d49b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d49e:	7d d1                	jge    f012d471 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d4a0:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d4a6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d4ac:	8d 48 01             	lea    0x1(%eax),%ecx
f012d4af:	89 c8                	mov    %ecx,%eax
f012d4b1:	c1 e0 02             	shl    $0x2,%eax
f012d4b4:	01 c8                	add    %ecx,%eax
f012d4b6:	39 c2                	cmp    %eax,%edx
f012d4b8:	74 17                	je     f012d4d1 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d4ba:	83 ec 04             	sub    $0x4,%esp
f012d4bd:	68 6c cb 13 f0       	push   $0xf013cb6c
f012d4c2:	68 0d 10 00 00       	push   $0x100d
f012d4c7:	68 1a b6 13 f0       	push   $0xf013b61a
f012d4cc:	e8 34 2d fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d4d1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d4d7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d4dd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d4e4:	eb 70                	jmp    f012d556 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d4e6:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d4ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d4ef:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d4f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4fc:	01 c8                	add    %ecx,%eax
f012d4fe:	8a 00                	mov    (%eax),%al
f012d500:	0f be c0             	movsbl %al,%eax
f012d503:	01 d0                	add    %edx,%eax
f012d505:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d50b:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d511:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d514:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d51b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d521:	01 c8                	add    %ecx,%eax
f012d523:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d527:	98                   	cwtl   
f012d528:	01 d0                	add    %edx,%eax
f012d52a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d530:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d536:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d539:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d540:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d546:	01 c8                	add    %ecx,%eax
f012d548:	8b 40 04             	mov    0x4(%eax),%eax
f012d54b:	01 d0                	add    %edx,%eax
f012d54d:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d553:	ff 45 dc             	incl   -0x24(%ebp)
f012d556:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d55c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d55f:	7d 85                	jge    f012d4e6 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d561:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d567:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d56d:	8d 50 01             	lea    0x1(%eax),%edx
f012d570:	89 d0                	mov    %edx,%eax
f012d572:	01 c0                	add    %eax,%eax
f012d574:	01 d0                	add    %edx,%eax
f012d576:	01 c0                	add    %eax,%eax
f012d578:	01 d0                	add    %edx,%eax
f012d57a:	39 c1                	cmp    %eax,%ecx
f012d57c:	75 3a                	jne    f012d5b8 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d57e:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d584:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d58a:	8d 50 01             	lea    0x1(%eax),%edx
f012d58d:	89 d0                	mov    %edx,%eax
f012d58f:	01 c0                	add    %eax,%eax
f012d591:	01 d0                	add    %edx,%eax
f012d593:	01 c0                	add    %eax,%eax
f012d595:	01 d0                	add    %edx,%eax
f012d597:	39 c1                	cmp    %eax,%ecx
f012d599:	75 1d                	jne    f012d5b8 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d59b:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d5a1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5a7:	8d 50 01             	lea    0x1(%eax),%edx
f012d5aa:	89 d0                	mov    %edx,%eax
f012d5ac:	01 c0                	add    %eax,%eax
f012d5ae:	01 d0                	add    %edx,%eax
f012d5b0:	01 c0                	add    %eax,%eax
f012d5b2:	01 d0                	add    %edx,%eax
f012d5b4:	39 c1                	cmp    %eax,%ecx
f012d5b6:	74 17                	je     f012d5cf <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d5b8:	83 ec 04             	sub    $0x4,%esp
f012d5bb:	68 6c cb 13 f0       	push   $0xf013cb6c
f012d5c0:	68 1b 10 00 00       	push   $0x101b
f012d5c5:	68 1a b6 13 f0       	push   $0xf013b61a
f012d5ca:	e8 36 2c fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d5cf:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d5d6:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d5d9:	e8 c9 f8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d5de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d5e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d5e7:	83 ec 08             	sub    $0x8,%esp
f012d5ea:	68 00 3c 00 00       	push   $0x3c00
f012d5ef:	50                   	push   %eax
f012d5f0:	e8 5a a8 fd ff       	call   f0107e4f <krealloc>
f012d5f5:	83 c4 10             	add    $0x10,%esp
f012d5f8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d5fe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d604:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d609:	77 17                	ja     f012d622 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d60b:	83 ec 04             	sub    $0x4,%esp
f012d60e:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d613:	68 27 10 00 00       	push   $0x1027
f012d618:	68 1a b6 13 f0       	push   $0xf013b61a
f012d61d:	e8 e3 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d622:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d628:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d62e:	74 17                	je     f012d647 <test_krealloc+0x1593>
			panic(
f012d630:	83 ec 04             	sub    $0x4,%esp
f012d633:	68 a4 cb 13 f0       	push   $0xf013cba4
f012d638:	68 2a 10 00 00       	push   $0x102a
f012d63d:	68 1a b6 13 f0       	push   $0xf013b61a
f012d642:	e8 be 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d647:	e8 5b f8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d64c:	89 c2                	mov    %eax,%edx
f012d64e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d651:	39 c2                	cmp    %eax,%edx
f012d653:	74 17                	je     f012d66c <test_krealloc+0x15b8>
			panic(
f012d655:	83 ec 04             	sub    $0x4,%esp
f012d658:	68 10 cc 13 f0       	push   $0xf013cc10
f012d65d:	68 2d 10 00 00       	push   $0x102d
f012d662:	68 1a b6 13 f0       	push   $0xf013b61a
f012d667:	e8 99 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d66c:	e8 36 f8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d671:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d674:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d67a:	83 ec 08             	sub    $0x8,%esp
f012d67d:	68 00 fc 0f 00       	push   $0xffc00
f012d682:	50                   	push   %eax
f012d683:	e8 c7 a7 fd ff       	call   f0107e4f <krealloc>
f012d688:	83 c4 10             	add    $0x10,%esp
f012d68b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d691:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d697:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d69c:	77 17                	ja     f012d6b5 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d69e:	83 ec 04             	sub    $0x4,%esp
f012d6a1:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d6a6:	68 33 10 00 00       	push   $0x1033
f012d6ab:	68 1a b6 13 f0       	push   $0xf013b61a
f012d6b0:	e8 50 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d6b5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d6bb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d6c1:	74 17                	je     f012d6da <test_krealloc+0x1626>
			panic(
f012d6c3:	83 ec 04             	sub    $0x4,%esp
f012d6c6:	68 a4 cb 13 f0       	push   $0xf013cba4
f012d6cb:	68 36 10 00 00       	push   $0x1036
f012d6d0:	68 1a b6 13 f0       	push   $0xf013b61a
f012d6d5:	e8 2b 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d6da:	e8 c8 f7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d6df:	89 c2                	mov    %eax,%edx
f012d6e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6e4:	39 c2                	cmp    %eax,%edx
f012d6e6:	74 17                	je     f012d6ff <test_krealloc+0x164b>
			panic(
f012d6e8:	83 ec 04             	sub    $0x4,%esp
f012d6eb:	68 10 cc 13 f0       	push   $0xf013cc10
f012d6f0:	68 39 10 00 00       	push   $0x1039
f012d6f5:	68 1a b6 13 f0       	push   $0xf013b61a
f012d6fa:	e8 06 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d6ff:	e8 a3 f7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d704:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d707:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d70d:	83 ec 08             	sub    $0x8,%esp
f012d710:	68 00 fc 0f 00       	push   $0xffc00
f012d715:	50                   	push   %eax
f012d716:	e8 34 a7 fd ff       	call   f0107e4f <krealloc>
f012d71b:	83 c4 10             	add    $0x10,%esp
f012d71e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d724:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d72a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d72f:	77 17                	ja     f012d748 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d731:	83 ec 04             	sub    $0x4,%esp
f012d734:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d739:	68 3f 10 00 00       	push   $0x103f
f012d73e:	68 1a b6 13 f0       	push   $0xf013b61a
f012d743:	e8 bd 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d748:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d74e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d754:	74 17                	je     f012d76d <test_krealloc+0x16b9>
			panic(
f012d756:	83 ec 04             	sub    $0x4,%esp
f012d759:	68 a4 cb 13 f0       	push   $0xf013cba4
f012d75e:	68 42 10 00 00       	push   $0x1042
f012d763:	68 1a b6 13 f0       	push   $0xf013b61a
f012d768:	e8 98 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d76d:	e8 35 f7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d772:	89 c2                	mov    %eax,%edx
f012d774:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d777:	39 c2                	cmp    %eax,%edx
f012d779:	74 17                	je     f012d792 <test_krealloc+0x16de>
			panic(
f012d77b:	83 ec 04             	sub    $0x4,%esp
f012d77e:	68 10 cc 13 f0       	push   $0xf013cc10
f012d783:	68 45 10 00 00       	push   $0x1045
f012d788:	68 1a b6 13 f0       	push   $0xf013b61a
f012d78d:	e8 73 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d792:	e8 10 f7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d797:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d79a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d7a0:	83 ec 08             	sub    $0x8,%esp
f012d7a3:	68 00 fc 0f 00       	push   $0xffc00
f012d7a8:	50                   	push   %eax
f012d7a9:	e8 a1 a6 fd ff       	call   f0107e4f <krealloc>
f012d7ae:	83 c4 10             	add    $0x10,%esp
f012d7b1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7b7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d7bd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7c2:	77 17                	ja     f012d7db <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7c4:	83 ec 04             	sub    $0x4,%esp
f012d7c7:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d7cc:	68 4d 10 00 00       	push   $0x104d
f012d7d1:	68 1a b6 13 f0       	push   $0xf013b61a
f012d7d6:	e8 2a 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d7db:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d7e1:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d7e7:	74 17                	je     f012d800 <test_krealloc+0x174c>
			panic(
f012d7e9:	83 ec 04             	sub    $0x4,%esp
f012d7ec:	68 54 cc 13 f0       	push   $0xf013cc54
f012d7f1:	68 50 10 00 00       	push   $0x1050
f012d7f6:	68 1a b6 13 f0       	push   $0xf013b61a
f012d7fb:	e8 05 2a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d800:	e8 a2 f6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d805:	89 c2                	mov    %eax,%edx
f012d807:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d80a:	39 c2                	cmp    %eax,%edx
f012d80c:	74 17                	je     f012d825 <test_krealloc+0x1771>
			panic(
f012d80e:	83 ec 04             	sub    $0x4,%esp
f012d811:	68 10 cc 13 f0       	push   $0xf013cc10
f012d816:	68 53 10 00 00       	push   $0x1053
f012d81b:	68 1a b6 13 f0       	push   $0xf013b61a
f012d820:	e8 e0 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d825:	83 ec 0c             	sub    $0xc,%esp
f012d828:	68 33 be 13 f0       	push   $0xf013be33
f012d82d:	e8 dc 34 fd ff       	call   f0100d0e <cprintf>
f012d832:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d835:	e8 6d f6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d83a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d83d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d843:	83 ec 08             	sub    $0x8,%esp
f012d846:	68 00 18 10 00       	push   $0x101800
f012d84b:	50                   	push   %eax
f012d84c:	e8 fe a5 fd ff       	call   f0107e4f <krealloc>
f012d851:	83 c4 10             	add    $0x10,%esp
f012d854:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d857:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d85a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d85f:	77 17                	ja     f012d878 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d861:	83 ec 04             	sub    $0x4,%esp
f012d864:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d869:	68 5c 10 00 00       	push   $0x105c
f012d86e:	68 1a b6 13 f0       	push   $0xf013b61a
f012d873:	e8 8d 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d878:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d87e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d881:	74 17                	je     f012d89a <test_krealloc+0x17e6>
			panic(
f012d883:	83 ec 04             	sub    $0x4,%esp
f012d886:	68 b4 cc 13 f0       	push   $0xf013ccb4
f012d88b:	68 5f 10 00 00       	push   $0x105f
f012d890:	68 1a b6 13 f0       	push   $0xf013b61a
f012d895:	e8 6b 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d89a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d89d:	e8 05 f6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d8a2:	29 c3                	sub    %eax,%ebx
f012d8a4:	89 d8                	mov    %ebx,%eax
f012d8a6:	83 f8 02             	cmp    $0x2,%eax
f012d8a9:	74 17                	je     f012d8c2 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d8ab:	83 ec 04             	sub    $0x4,%esp
f012d8ae:	68 30 cd 13 f0       	push   $0xf013cd30
f012d8b3:	68 61 10 00 00       	push   $0x1061
f012d8b8:	68 1a b6 13 f0       	push   $0xf013b61a
f012d8bd:	e8 43 29 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d8c2:	e8 e0 f5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d8c7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d8ca:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d8d0:	83 ec 08             	sub    $0x8,%esp
f012d8d3:	68 00 fc 3f 00       	push   $0x3ffc00
f012d8d8:	50                   	push   %eax
f012d8d9:	e8 71 a5 fd ff       	call   f0107e4f <krealloc>
f012d8de:	83 c4 10             	add    $0x10,%esp
f012d8e1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d8e4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8e7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d8ec:	77 17                	ja     f012d905 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8ee:	83 ec 04             	sub    $0x4,%esp
f012d8f1:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d8f6:	68 67 10 00 00       	push   $0x1067
f012d8fb:	68 1a b6 13 f0       	push   $0xf013b61a
f012d900:	e8 00 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d905:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d90b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d90e:	74 17                	je     f012d927 <test_krealloc+0x1873>
			panic(
f012d910:	83 ec 04             	sub    $0x4,%esp
f012d913:	68 b4 cc 13 f0       	push   $0xf013ccb4
f012d918:	68 6a 10 00 00       	push   $0x106a
f012d91d:	68 1a b6 13 f0       	push   $0xf013b61a
f012d922:	e8 de 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d927:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d92a:	e8 78 f5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d92f:	29 c3                	sub    %eax,%ebx
f012d931:	89 d8                	mov    %ebx,%eax
f012d933:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d938:	74 17                	je     f012d951 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d93a:	83 ec 04             	sub    $0x4,%esp
f012d93d:	68 30 cd 13 f0       	push   $0xf013cd30
f012d942:	68 6d 10 00 00       	push   $0x106d
f012d947:	68 1a b6 13 f0       	push   $0xf013b61a
f012d94c:	e8 b4 28 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d951:	83 ec 0c             	sub    $0xc,%esp
f012d954:	68 78 be 13 f0       	push   $0xf013be78
f012d959:	e8 b0 33 fd ff       	call   f0100d0e <cprintf>
f012d95e:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d961:	e8 41 f5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012d966:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d969:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d96f:	83 ec 08             	sub    $0x8,%esp
f012d972:	68 00 fc 9f 00       	push   $0x9ffc00
f012d977:	50                   	push   %eax
f012d978:	e8 d2 a4 fd ff       	call   f0107e4f <krealloc>
f012d97d:	83 c4 10             	add    $0x10,%esp
f012d980:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d983:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d986:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d98b:	77 17                	ja     f012d9a4 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d98d:	83 ec 04             	sub    $0x4,%esp
f012d990:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012d995:	68 78 10 00 00       	push   $0x1078
f012d99a:	68 1a b6 13 f0       	push   $0xf013b61a
f012d99f:	e8 61 28 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d9a4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d9ab:	10 00 00 
f012d9ae:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d9b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9b9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d9bf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d9c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9ca:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d9d0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d9d6:	29 d0                	sub    %edx,%eax
f012d9d8:	89 c1                	mov    %eax,%ecx
f012d9da:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d9e1:	10 00 00 
f012d9e4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012d9e9:	0f b6 d0             	movzbl %al,%edx
f012d9ec:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d9f2:	01 d0                	add    %edx,%eax
f012d9f4:	48                   	dec    %eax
f012d9f5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d9fb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da01:	ba 00 00 00 00       	mov    $0x0,%edx
f012da06:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012da0c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da12:	29 d0                	sub    %edx,%eax
f012da14:	01 c1                	add    %eax,%ecx
f012da16:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012da1d:	10 00 00 
f012da20:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012da25:	0f b6 c0             	movzbl %al,%eax
f012da28:	c1 e0 04             	shl    $0x4,%eax
f012da2b:	89 c2                	mov    %eax,%edx
f012da2d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012da33:	01 d0                	add    %edx,%eax
f012da35:	48                   	dec    %eax
f012da36:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012da3c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012da42:	ba 00 00 00 00       	mov    $0x0,%edx
f012da47:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012da4d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012da53:	29 d0                	sub    %edx,%eax
f012da55:	01 c8                	add    %ecx,%eax
f012da57:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012da5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da60:	39 c2                	cmp    %eax,%edx
f012da62:	74 18                	je     f012da7c <test_krealloc+0x19c8>
			panic(
f012da64:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da67:	50                   	push   %eax
f012da68:	68 64 cd 13 f0       	push   $0xf013cd64
f012da6d:	68 7c 10 00 00       	push   $0x107c
f012da72:	68 1a b6 13 f0       	push   $0xf013b61a
f012da77:	e8 89 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012da7c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012da82:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da85:	75 17                	jne    f012da9e <test_krealloc+0x19ea>
			panic(
f012da87:	83 ec 04             	sub    $0x4,%esp
f012da8a:	68 a8 cd 13 f0       	push   $0xf013cda8
f012da8f:	68 7f 10 00 00       	push   $0x107f
f012da94:	68 1a b6 13 f0       	push   $0xf013b61a
f012da99:	e8 67 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012da9e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012daa1:	e8 01 f4 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012daa6:	29 c3                	sub    %eax,%ebx
f012daa8:	89 d8                	mov    %ebx,%eax
f012daaa:	3d 00 06 00 00       	cmp    $0x600,%eax
f012daaf:	74 17                	je     f012dac8 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012dab1:	83 ec 04             	sub    $0x4,%esp
f012dab4:	68 30 cd 13 f0       	push   $0xf013cd30
f012dab9:	68 82 10 00 00       	push   $0x1082
f012dabe:	68 1a b6 13 f0       	push   $0xf013b61a
f012dac3:	e8 3d 27 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012dac8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dacb:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012dad1:	e8 d1 f3 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012dad6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012dad9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dadf:	83 ec 08             	sub    $0x8,%esp
f012dae2:	68 00 fc 5f 00       	push   $0x5ffc00
f012dae7:	50                   	push   %eax
f012dae8:	e8 62 a3 fd ff       	call   f0107e4f <krealloc>
f012daed:	83 c4 10             	add    $0x10,%esp
f012daf0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012daf3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012daf6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dafb:	77 17                	ja     f012db14 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dafd:	83 ec 04             	sub    $0x4,%esp
f012db00:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012db05:	68 8b 10 00 00       	push   $0x108b
f012db0a:	68 1a b6 13 f0       	push   $0xf013b61a
f012db0f:	e8 f1 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012db14:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db1a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012db1d:	74 17                	je     f012db36 <test_krealloc+0x1a82>
			panic(
f012db1f:	83 ec 04             	sub    $0x4,%esp
f012db22:	68 b4 cc 13 f0       	push   $0xf013ccb4
f012db27:	68 8e 10 00 00       	push   $0x108e
f012db2c:	68 1a b6 13 f0       	push   $0xf013b61a
f012db31:	e8 cf 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012db36:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db39:	e8 69 f3 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012db3e:	29 c3                	sub    %eax,%ebx
f012db40:	89 d8                	mov    %ebx,%eax
f012db42:	3d 00 03 00 00       	cmp    $0x300,%eax
f012db47:	74 17                	je     f012db60 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012db49:	83 ec 04             	sub    $0x4,%esp
f012db4c:	68 30 cd 13 f0       	push   $0xf013cd30
f012db51:	68 91 10 00 00       	push   $0x1091
f012db56:	68 1a b6 13 f0       	push   $0xf013b61a
f012db5b:	e8 a5 26 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012db60:	e8 42 f3 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012db65:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012db68:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db6e:	83 ec 08             	sub    $0x8,%esp
f012db71:	68 00 fc 3f 01       	push   $0x13ffc00
f012db76:	50                   	push   %eax
f012db77:	e8 d3 a2 fd ff       	call   f0107e4f <krealloc>
f012db7c:	83 c4 10             	add    $0x10,%esp
f012db7f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db82:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db85:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db8a:	77 17                	ja     f012dba3 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db8c:	83 ec 04             	sub    $0x4,%esp
f012db8f:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012db94:	68 98 10 00 00       	push   $0x1098
f012db99:	68 1a b6 13 f0       	push   $0xf013b61a
f012db9e:	e8 62 26 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dba3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dba9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dbac:	75 17                	jne    f012dbc5 <test_krealloc+0x1b11>
			panic(
f012dbae:	83 ec 04             	sub    $0x4,%esp
f012dbb1:	68 a8 cd 13 f0       	push   $0xf013cda8
f012dbb6:	68 9b 10 00 00       	push   $0x109b
f012dbbb:	68 1a b6 13 f0       	push   $0xf013b61a
f012dbc0:	e8 40 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012dbc5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dbcc:	10 00 00 
f012dbcf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012dbd5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dbda:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012dbe0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dbe6:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbeb:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012dbf1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dbf7:	29 d0                	sub    %edx,%eax
f012dbf9:	89 c1                	mov    %eax,%ecx
f012dbfb:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012dc02:	10 00 00 
f012dc05:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012dc0a:	0f b6 d0             	movzbl %al,%edx
f012dc0d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012dc13:	01 d0                	add    %edx,%eax
f012dc15:	48                   	dec    %eax
f012dc16:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012dc1c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc22:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc27:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012dc2d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc33:	29 d0                	sub    %edx,%eax
f012dc35:	01 c1                	add    %eax,%ecx
f012dc37:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012dc3e:	10 00 00 
f012dc41:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012dc46:	0f b6 c0             	movzbl %al,%eax
f012dc49:	c1 e0 04             	shl    $0x4,%eax
f012dc4c:	89 c2                	mov    %eax,%edx
f012dc4e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012dc54:	01 d0                	add    %edx,%eax
f012dc56:	48                   	dec    %eax
f012dc57:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012dc5d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dc63:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc68:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012dc6e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dc74:	29 d0                	sub    %edx,%eax
f012dc76:	01 c8                	add    %ecx,%eax
f012dc78:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012dc7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc81:	39 c2                	cmp    %eax,%edx
f012dc83:	74 17                	je     f012dc9c <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012dc85:	83 ec 04             	sub    $0x4,%esp
f012dc88:	68 2c ce 13 f0       	push   $0xf013ce2c
f012dc8d:	68 9d 10 00 00       	push   $0x109d
f012dc92:	68 1a b6 13 f0       	push   $0xf013b61a
f012dc97:	e8 69 25 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012dc9c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc9f:	e8 03 f2 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012dca4:	29 c3                	sub    %eax,%ebx
f012dca6:	89 d8                	mov    %ebx,%eax
f012dca8:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012dcad:	74 17                	je     f012dcc6 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012dcaf:	83 ec 04             	sub    $0x4,%esp
f012dcb2:	68 30 cd 13 f0       	push   $0xf013cd30
f012dcb7:	68 a0 10 00 00       	push   $0x10a0
f012dcbc:	68 1a b6 13 f0       	push   $0xf013b61a
f012dcc1:	e8 3f 25 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012dcc6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dcc9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dccf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dcd5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012dcdb:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dce2:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dce5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dcec:	eb 21                	jmp    f012dd0f <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012dcee:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dcf4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012dcf7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dcfd:	01 c8                	add    %ecx,%eax
f012dcff:	8a 00                	mov    (%eax),%al
f012dd01:	0f be c0             	movsbl %al,%eax
f012dd04:	01 d0                	add    %edx,%eax
f012dd06:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd0c:	ff 45 d8             	incl   -0x28(%ebp)
f012dd0f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dd18:	7d d4                	jge    f012dcee <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012dd1a:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012dd20:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012dd26:	42                   	inc    %edx
f012dd27:	01 d2                	add    %edx,%edx
f012dd29:	39 d0                	cmp    %edx,%eax
f012dd2b:	74 17                	je     f012dd44 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012dd2d:	83 ec 04             	sub    $0x4,%esp
f012dd30:	68 60 ce 13 f0       	push   $0xf013ce60
f012dd35:	68 ae 10 00 00       	push   $0x10ae
f012dd3a:	68 1a b6 13 f0       	push   $0xf013b61a
f012dd3f:	e8 c1 24 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012dd44:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dd4a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012dd50:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dd57:	00 00 00 
		sums[1] = 0;
f012dd5a:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012dd61:	00 00 00 
		sums[2] = 0;
f012dd64:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012dd6b:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dd6e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dd75:	eb 70                	jmp    f012dde7 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012dd77:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dd80:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dd87:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd8d:	01 c8                	add    %ecx,%eax
f012dd8f:	8a 00                	mov    (%eax),%al
f012dd91:	0f be c0             	movsbl %al,%eax
f012dd94:	01 d0                	add    %edx,%eax
f012dd96:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012dd9c:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012dda2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dda5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddb2:	01 c8                	add    %ecx,%eax
f012ddb4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ddb8:	98                   	cwtl   
f012ddb9:	01 d0                	add    %edx,%eax
f012ddbb:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012ddc1:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012ddc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ddca:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddd1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddd7:	01 c8                	add    %ecx,%eax
f012ddd9:	8b 40 04             	mov    0x4(%eax),%eax
f012dddc:	01 d0                	add    %edx,%eax
f012ddde:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dde4:	ff 45 d8             	incl   -0x28(%ebp)
f012dde7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dded:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ddf0:	7d 85                	jge    f012dd77 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ddf2:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012ddf8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ddfe:	8d 50 01             	lea    0x1(%eax),%edx
f012de01:	89 d0                	mov    %edx,%eax
f012de03:	01 c0                	add    %eax,%eax
f012de05:	01 d0                	add    %edx,%eax
f012de07:	01 c0                	add    %eax,%eax
f012de09:	01 d0                	add    %edx,%eax
f012de0b:	39 c1                	cmp    %eax,%ecx
f012de0d:	75 3a                	jne    f012de49 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012de0f:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012de15:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de1b:	8d 50 01             	lea    0x1(%eax),%edx
f012de1e:	89 d0                	mov    %edx,%eax
f012de20:	01 c0                	add    %eax,%eax
f012de22:	01 d0                	add    %edx,%eax
f012de24:	01 c0                	add    %eax,%eax
f012de26:	01 d0                	add    %edx,%eax
f012de28:	39 c1                	cmp    %eax,%ecx
f012de2a:	75 1d                	jne    f012de49 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012de2c:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012de32:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de38:	8d 50 01             	lea    0x1(%eax),%edx
f012de3b:	89 d0                	mov    %edx,%eax
f012de3d:	01 c0                	add    %eax,%eax
f012de3f:	01 d0                	add    %edx,%eax
f012de41:	01 c0                	add    %eax,%eax
f012de43:	01 d0                	add    %edx,%eax
f012de45:	39 c1                	cmp    %eax,%ecx
f012de47:	74 17                	je     f012de60 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012de49:	83 ec 04             	sub    $0x4,%esp
f012de4c:	68 60 ce 13 f0       	push   $0xf013ce60
f012de51:	68 c0 10 00 00       	push   $0x10c0
f012de56:	68 1a b6 13 f0       	push   $0xf013b61a
f012de5b:	e8 a5 23 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012de60:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012de66:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012de6c:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012de73:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012de76:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012de7d:	eb 24                	jmp    f012dea3 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012de7f:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012de85:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de88:	01 c0                	add    %eax,%eax
f012de8a:	89 c1                	mov    %eax,%ecx
f012de8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012de92:	01 c8                	add    %ecx,%eax
f012de94:	66 8b 00             	mov    (%eax),%ax
f012de97:	98                   	cwtl   
f012de98:	01 d0                	add    %edx,%eax
f012de9a:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dea0:	ff 45 d8             	incl   -0x28(%ebp)
f012dea3:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dea9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012deac:	7d d1                	jge    f012de7f <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012deae:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012deb4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012deba:	8d 48 01             	lea    0x1(%eax),%ecx
f012debd:	89 c8                	mov    %ecx,%eax
f012debf:	c1 e0 02             	shl    $0x2,%eax
f012dec2:	01 c8                	add    %ecx,%eax
f012dec4:	39 c2                	cmp    %eax,%edx
f012dec6:	74 17                	je     f012dedf <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012dec8:	83 ec 04             	sub    $0x4,%esp
f012decb:	68 60 ce 13 f0       	push   $0xf013ce60
f012ded0:	68 ca 10 00 00       	push   $0x10ca
f012ded5:	68 1a b6 13 f0       	push   $0xf013b61a
f012deda:	e8 26 23 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012dedf:	e8 c3 ef fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012dee4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dee7:	e8 dc 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012deec:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012def2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012def8:	83 ec 08             	sub    $0x8,%esp
f012defb:	6a 00                	push   $0x0
f012defd:	50                   	push   %eax
f012defe:	e8 4c 9f fd ff       	call   f0107e4f <krealloc>
f012df03:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df06:	e8 bd 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df0b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df11:	74 17                	je     f012df2a <test_krealloc+0x1e76>
			panic(
f012df13:	83 ec 04             	sub    $0x4,%esp
f012df16:	68 34 b6 13 f0       	push   $0xf013b634
f012df1b:	68 d2 10 00 00       	push   $0x10d2
f012df20:	68 1a b6 13 f0       	push   $0xf013b61a
f012df25:	e8 db 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012df2a:	e8 78 ef fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012df2f:	89 c2                	mov    %eax,%edx
f012df31:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df34:	29 c2                	sub    %eax,%edx
f012df36:	89 d0                	mov    %edx,%eax
f012df38:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012df3d:	74 17                	je     f012df56 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012df3f:	83 ec 04             	sub    $0x4,%esp
f012df42:	68 f0 ca 13 f0       	push   $0xf013caf0
f012df47:	68 d4 10 00 00       	push   $0x10d4
f012df4c:	68 1a b6 13 f0       	push   $0xf013b61a
f012df51:	e8 af 22 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012df56:	e8 4c ef fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012df5b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df5e:	e8 65 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df63:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012df69:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012df6f:	83 ec 0c             	sub    $0xc,%esp
f012df72:	50                   	push   %eax
f012df73:	e8 e2 9c fd ff       	call   f0107c5a <kfree>
f012df78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df7b:	e8 48 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df80:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df86:	74 17                	je     f012df9f <test_krealloc+0x1eeb>
			panic(
f012df88:	83 ec 04             	sub    $0x4,%esp
f012df8b:	68 34 b6 13 f0       	push   $0xf013b634
f012df90:	68 dc 10 00 00       	push   $0x10dc
f012df95:	68 1a b6 13 f0       	push   $0xf013b61a
f012df9a:	e8 66 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012df9f:	e8 03 ef fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012dfa4:	89 c2                	mov    %eax,%edx
f012dfa6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dfa9:	29 c2                	sub    %eax,%edx
f012dfab:	89 d0                	mov    %edx,%eax
f012dfad:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012dfb2:	74 17                	je     f012dfcb <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012dfb4:	83 ec 04             	sub    $0x4,%esp
f012dfb7:	68 f0 ca 13 f0       	push   $0xf013caf0
f012dfbc:	68 de 10 00 00       	push   $0x10de
f012dfc1:	68 1a b6 13 f0       	push   $0xf013b61a
f012dfc6:	e8 3a 22 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dfcb:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dfd2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dfd9:	eb 48                	jmp    f012e023 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dfdb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dfde:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012dfe3:	83 ec 04             	sub    $0x4,%esp
f012dfe6:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012dfec:	51                   	push   %ecx
f012dfed:	52                   	push   %edx
f012dfee:	50                   	push   %eax
f012dfef:	e8 bd 8a fd ff       	call   f0106ab1 <get_page_table>
f012dff4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dff7:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012dffd:	85 c0                	test   %eax,%eax
f012dfff:	75 17                	jne    f012e018 <test_krealloc+0x1f64>
					panic(
f012e001:	83 ec 04             	sub    $0x4,%esp
f012e004:	68 1c bf 13 f0       	push   $0xf013bf1c
f012e009:	68 eb 10 00 00       	push   $0x10eb
f012e00e:	68 1a b6 13 f0       	push   $0xf013b61a
f012e013:	e8 ed 21 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e018:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e01f:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e023:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e027:	78 b2                	js     f012dfdb <test_krealloc+0x1f27>
f012e029:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e02d:	7f 09                	jg     f012e038 <test_krealloc+0x1f84>
f012e02f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e036:	76 a3                	jbe    f012dfdb <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e038:	83 ec 0c             	sub    $0xc,%esp
f012e03b:	68 fe b7 13 f0       	push   $0xf013b7fe
f012e040:	e8 c9 2c fd ff       	call   f0100d0e <cprintf>
f012e045:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e048:	83 ec 0c             	sub    $0xc,%esp
f012e04b:	68 8c ce 13 f0       	push   $0xf013ce8c
f012e050:	e8 b9 2c fd ff       	call   f0100d0e <cprintf>
f012e055:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e058:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e05d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e060:	5b                   	pop    %ebx
f012e061:	5f                   	pop    %edi
f012e062:	5d                   	pop    %ebp
f012e063:	c3                   	ret    

f012e064 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e064:	55                   	push   %ebp
f012e065:	89 e5                	mov    %esp,%ebp
f012e067:	57                   	push   %edi
f012e068:	53                   	push   %ebx
f012e069:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e06f:	83 ec 0c             	sub    $0xc,%esp
f012e072:	68 5c b5 13 f0       	push   $0xf013b55c
f012e077:	e8 92 2c fd ff       	call   f0100d0e <cprintf>
f012e07c:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e07f:	83 ec 0c             	sub    $0xc,%esp
f012e082:	68 8c b5 13 f0       	push   $0xf013b58c
f012e087:	e8 82 2c fd ff       	call   f0100d0e <cprintf>
f012e08c:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e08f:	83 ec 0c             	sub    $0xc,%esp
f012e092:	68 5c b5 13 f0       	push   $0xf013b55c
f012e097:	e8 72 2c fd ff       	call   f0100d0e <cprintf>
f012e09c:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e09f:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e0a3:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e0a7:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e0ad:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e0b3:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e0ba:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e0c1:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e0c7:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e0cc:	b8 00 00 00 00       	mov    $0x0,%eax
f012e0d1:	89 d7                	mov    %edx,%edi
f012e0d3:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e0d5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e0dc:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e0e2:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e0e7:	b8 00 00 00 00       	mov    $0x0,%eax
f012e0ec:	89 d7                	mov    %edx,%edi
f012e0ee:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e0f0:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e0f6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e0fb:	b8 00 00 00 00       	mov    $0x0,%eax
f012e100:	89 d7                	mov    %edx,%edi
f012e102:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e104:	e8 9e ed fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e109:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e10c:	83 ec 08             	sub    $0x8,%esp
f012e10f:	68 00 fc 0f 00       	push   $0xffc00
f012e114:	6a 00                	push   $0x0
f012e116:	e8 34 9d fd ff       	call   f0107e4f <krealloc>
f012e11b:	83 c4 10             	add    $0x10,%esp
f012e11e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e124:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e12a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e12f:	77 17                	ja     f012e148 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e131:	83 ec 04             	sub    $0x4,%esp
f012e134:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e139:	68 1a 11 00 00       	push   $0x111a
f012e13e:	68 1a b6 13 f0       	push   $0xf013b61a
f012e143:	e8 bd 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e148:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e14e:	89 c1                	mov    %eax,%ecx
f012e150:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e157:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e15a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e15f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e162:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e165:	ba 00 00 00 00       	mov    $0x0,%edx
f012e16a:	f7 75 b4             	divl   -0x4c(%ebp)
f012e16d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e170:	29 d0                	sub    %edx,%eax
f012e172:	89 c3                	mov    %eax,%ebx
f012e174:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e17b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e180:	0f b6 d0             	movzbl %al,%edx
f012e183:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e186:	01 d0                	add    %edx,%eax
f012e188:	48                   	dec    %eax
f012e189:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e18c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e18f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e194:	f7 75 ac             	divl   -0x54(%ebp)
f012e197:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e19a:	29 d0                	sub    %edx,%eax
f012e19c:	01 c3                	add    %eax,%ebx
f012e19e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e1a5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e1aa:	0f b6 c0             	movzbl %al,%eax
f012e1ad:	c1 e0 04             	shl    $0x4,%eax
f012e1b0:	89 c2                	mov    %eax,%edx
f012e1b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e1b5:	01 d0                	add    %edx,%eax
f012e1b7:	48                   	dec    %eax
f012e1b8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e1bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e1be:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1c3:	f7 75 a4             	divl   -0x5c(%ebp)
f012e1c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e1c9:	29 d0                	sub    %edx,%eax
f012e1cb:	01 d8                	add    %ebx,%eax
f012e1cd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e1d2:	39 c1                	cmp    %eax,%ecx
f012e1d4:	74 17                	je     f012e1ed <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e1d6:	83 ec 04             	sub    $0x4,%esp
f012e1d9:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e1de:	68 1c 11 00 00       	push   $0x111c
f012e1e3:	68 1a b6 13 f0       	push   $0xf013b61a
f012e1e8:	e8 18 20 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e1ed:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e1f0:	e8 b2 ec fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e1f5:	29 c3                	sub    %eax,%ebx
f012e1f7:	89 d8                	mov    %ebx,%eax
f012e1f9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e1fe:	74 17                	je     f012e217 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e200:	83 ec 04             	sub    $0x4,%esp
f012e203:	68 2e c9 13 f0       	push   $0xf013c92e
f012e208:	68 1f 11 00 00       	push   $0x111f
f012e20d:	68 1a b6 13 f0       	push   $0xf013b61a
f012e212:	e8 ee 1f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e217:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e21e:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e221:	e8 81 ec fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e226:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e229:	83 ec 08             	sub    $0x8,%esp
f012e22c:	68 00 fc 0f 00       	push   $0xffc00
f012e231:	6a 00                	push   $0x0
f012e233:	e8 17 9c fd ff       	call   f0107e4f <krealloc>
f012e238:	83 c4 10             	add    $0x10,%esp
f012e23b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e241:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e247:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e24c:	77 17                	ja     f012e265 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e24e:	83 ec 04             	sub    $0x4,%esp
f012e251:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e256:	68 27 11 00 00       	push   $0x1127
f012e25b:	68 1a b6 13 f0       	push   $0xf013b61a
f012e260:	e8 a0 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e265:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e26b:	89 c1                	mov    %eax,%ecx
f012e26d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e274:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e277:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e27c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e27f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e282:	ba 00 00 00 00       	mov    $0x0,%edx
f012e287:	f7 75 9c             	divl   -0x64(%ebp)
f012e28a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e28d:	29 d0                	sub    %edx,%eax
f012e28f:	89 c3                	mov    %eax,%ebx
f012e291:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e298:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e29d:	0f b6 d0             	movzbl %al,%edx
f012e2a0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e2a3:	01 d0                	add    %edx,%eax
f012e2a5:	48                   	dec    %eax
f012e2a6:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e2a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e2ac:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2b1:	f7 75 94             	divl   -0x6c(%ebp)
f012e2b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e2b7:	29 d0                	sub    %edx,%eax
f012e2b9:	01 c3                	add    %eax,%ebx
f012e2bb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e2c2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e2c7:	0f b6 c0             	movzbl %al,%eax
f012e2ca:	c1 e0 04             	shl    $0x4,%eax
f012e2cd:	89 c2                	mov    %eax,%edx
f012e2cf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e2d2:	01 d0                	add    %edx,%eax
f012e2d4:	48                   	dec    %eax
f012e2d5:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e2d8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e2db:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2e0:	f7 75 8c             	divl   -0x74(%ebp)
f012e2e3:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e2e6:	29 d0                	sub    %edx,%eax
f012e2e8:	01 d8                	add    %ebx,%eax
f012e2ea:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e2ef:	39 c1                	cmp    %eax,%ecx
f012e2f1:	74 17                	je     f012e30a <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e2f3:	83 ec 04             	sub    $0x4,%esp
f012e2f6:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e2fb:	68 29 11 00 00       	push   $0x1129
f012e300:	68 1a b6 13 f0       	push   $0xf013b61a
f012e305:	e8 fb 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e30a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e30d:	e8 95 eb fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e312:	29 c3                	sub    %eax,%ebx
f012e314:	89 d8                	mov    %ebx,%eax
f012e316:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e31b:	74 17                	je     f012e334 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e31d:	83 ec 04             	sub    $0x4,%esp
f012e320:	68 2e c9 13 f0       	push   $0xf013c92e
f012e325:	68 2b 11 00 00       	push   $0x112b
f012e32a:	68 1a b6 13 f0       	push   $0xf013b61a
f012e32f:	e8 d1 1e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e334:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e33b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e33e:	e8 64 eb fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e343:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e346:	83 ec 08             	sub    $0x8,%esp
f012e349:	68 00 fc 0f 00       	push   $0xffc00
f012e34e:	6a 00                	push   $0x0
f012e350:	e8 fa 9a fd ff       	call   f0107e4f <krealloc>
f012e355:	83 c4 10             	add    $0x10,%esp
f012e358:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e35e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e364:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e369:	77 17                	ja     f012e382 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e36b:	83 ec 04             	sub    $0x4,%esp
f012e36e:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e373:	68 33 11 00 00       	push   $0x1133
f012e378:	68 1a b6 13 f0       	push   $0xf013b61a
f012e37d:	e8 83 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e382:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e388:	89 c1                	mov    %eax,%ecx
f012e38a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e391:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e394:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e399:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e39c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e39f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3a4:	f7 75 84             	divl   -0x7c(%ebp)
f012e3a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e3aa:	29 d0                	sub    %edx,%eax
f012e3ac:	89 c3                	mov    %eax,%ebx
f012e3ae:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e3b5:	10 00 00 
f012e3b8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e3bd:	0f b6 d0             	movzbl %al,%edx
f012e3c0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e3c6:	01 d0                	add    %edx,%eax
f012e3c8:	48                   	dec    %eax
f012e3c9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e3cf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e3d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3da:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e3e0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e3e6:	29 d0                	sub    %edx,%eax
f012e3e8:	01 c3                	add    %eax,%ebx
f012e3ea:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e3f1:	10 00 00 
f012e3f4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e3f9:	0f b6 c0             	movzbl %al,%eax
f012e3fc:	c1 e0 04             	shl    $0x4,%eax
f012e3ff:	89 c2                	mov    %eax,%edx
f012e401:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e407:	01 d0                	add    %edx,%eax
f012e409:	48                   	dec    %eax
f012e40a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e410:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e416:	ba 00 00 00 00       	mov    $0x0,%edx
f012e41b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e421:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e427:	29 d0                	sub    %edx,%eax
f012e429:	01 d8                	add    %ebx,%eax
f012e42b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e430:	39 c1                	cmp    %eax,%ecx
f012e432:	74 17                	je     f012e44b <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e434:	83 ec 04             	sub    $0x4,%esp
f012e437:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e43c:	68 35 11 00 00       	push   $0x1135
f012e441:	68 1a b6 13 f0       	push   $0xf013b61a
f012e446:	e8 ba 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e44b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e44e:	e8 54 ea fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e453:	29 c3                	sub    %eax,%ebx
f012e455:	89 d8                	mov    %ebx,%eax
f012e457:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e45c:	74 17                	je     f012e475 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e45e:	83 ec 04             	sub    $0x4,%esp
f012e461:	68 2e c9 13 f0       	push   $0xf013c92e
f012e466:	68 37 11 00 00       	push   $0x1137
f012e46b:	68 1a b6 13 f0       	push   $0xf013b61a
f012e470:	e8 90 1d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e475:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e47c:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e47f:	e8 23 ea fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e484:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e487:	83 ec 08             	sub    $0x8,%esp
f012e48a:	68 00 fc 0f 00       	push   $0xffc00
f012e48f:	6a 00                	push   $0x0
f012e491:	e8 b9 99 fd ff       	call   f0107e4f <krealloc>
f012e496:	83 c4 10             	add    $0x10,%esp
f012e499:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e49f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4a5:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e4aa:	77 17                	ja     f012e4c3 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e4ac:	83 ec 04             	sub    $0x4,%esp
f012e4af:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e4b4:	68 3e 11 00 00       	push   $0x113e
f012e4b9:	68 1a b6 13 f0       	push   $0xf013b61a
f012e4be:	e8 42 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e4c3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4c9:	89 c1                	mov    %eax,%ecx
f012e4cb:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e4d2:	10 00 00 
f012e4d5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e4db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e4e0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e4e6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e4ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4f1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e4f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e4fd:	29 d0                	sub    %edx,%eax
f012e4ff:	89 c3                	mov    %eax,%ebx
f012e501:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e508:	10 00 00 
f012e50b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e510:	0f b6 d0             	movzbl %al,%edx
f012e513:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e519:	01 d0                	add    %edx,%eax
f012e51b:	48                   	dec    %eax
f012e51c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e522:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e528:	ba 00 00 00 00       	mov    $0x0,%edx
f012e52d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e533:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e539:	29 d0                	sub    %edx,%eax
f012e53b:	01 c3                	add    %eax,%ebx
f012e53d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e544:	10 00 00 
f012e547:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e54c:	0f b6 c0             	movzbl %al,%eax
f012e54f:	c1 e0 04             	shl    $0x4,%eax
f012e552:	89 c2                	mov    %eax,%edx
f012e554:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e55a:	01 d0                	add    %edx,%eax
f012e55c:	48                   	dec    %eax
f012e55d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e563:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e569:	ba 00 00 00 00       	mov    $0x0,%edx
f012e56e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e574:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e57a:	29 d0                	sub    %edx,%eax
f012e57c:	01 d8                	add    %ebx,%eax
f012e57e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e583:	39 c1                	cmp    %eax,%ecx
f012e585:	74 17                	je     f012e59e <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e587:	83 ec 04             	sub    $0x4,%esp
f012e58a:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e58f:	68 40 11 00 00       	push   $0x1140
f012e594:	68 1a b6 13 f0       	push   $0xf013b61a
f012e599:	e8 67 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e59e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5a1:	e8 01 e9 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e5a6:	29 c3                	sub    %eax,%ebx
f012e5a8:	89 d8                	mov    %ebx,%eax
f012e5aa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e5af:	74 17                	je     f012e5c8 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e5b1:	83 ec 04             	sub    $0x4,%esp
f012e5b4:	68 2e c9 13 f0       	push   $0xf013c92e
f012e5b9:	68 42 11 00 00       	push   $0x1142
f012e5be:	68 1a b6 13 f0       	push   $0xf013b61a
f012e5c3:	e8 3d 1c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e5c8:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e5cf:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e5d2:	e8 d0 e8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e5d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e5da:	83 ec 08             	sub    $0x8,%esp
f012e5dd:	68 00 fc 1f 00       	push   $0x1ffc00
f012e5e2:	6a 00                	push   $0x0
f012e5e4:	e8 66 98 fd ff       	call   f0107e4f <krealloc>
f012e5e9:	83 c4 10             	add    $0x10,%esp
f012e5ec:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e5f2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e5f8:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e5fd:	77 17                	ja     f012e616 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e5ff:	83 ec 04             	sub    $0x4,%esp
f012e602:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e607:	68 49 11 00 00       	push   $0x1149
f012e60c:	68 1a b6 13 f0       	push   $0xf013b61a
f012e611:	e8 ef 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e616:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e61c:	89 c1                	mov    %eax,%ecx
f012e61e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e625:	10 00 00 
f012e628:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e62e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e633:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e639:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e63f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e644:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e64a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e650:	29 d0                	sub    %edx,%eax
f012e652:	89 c3                	mov    %eax,%ebx
f012e654:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e65b:	10 00 00 
f012e65e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e663:	0f b6 d0             	movzbl %al,%edx
f012e666:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e66c:	01 d0                	add    %edx,%eax
f012e66e:	48                   	dec    %eax
f012e66f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e675:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e67b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e680:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e686:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e68c:	29 d0                	sub    %edx,%eax
f012e68e:	01 c3                	add    %eax,%ebx
f012e690:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e697:	10 00 00 
f012e69a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e69f:	0f b6 c0             	movzbl %al,%eax
f012e6a2:	c1 e0 04             	shl    $0x4,%eax
f012e6a5:	89 c2                	mov    %eax,%edx
f012e6a7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e6ad:	01 d0                	add    %edx,%eax
f012e6af:	48                   	dec    %eax
f012e6b0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e6b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e6bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6c1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e6c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e6cd:	29 d0                	sub    %edx,%eax
f012e6cf:	01 d8                	add    %ebx,%eax
f012e6d1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e6d6:	39 c1                	cmp    %eax,%ecx
f012e6d8:	74 17                	je     f012e6f1 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e6da:	83 ec 04             	sub    $0x4,%esp
f012e6dd:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e6e2:	68 4b 11 00 00       	push   $0x114b
f012e6e7:	68 1a b6 13 f0       	push   $0xf013b61a
f012e6ec:	e8 14 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e6f1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e6f4:	e8 ae e7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e6f9:	29 c3                	sub    %eax,%ebx
f012e6fb:	89 d8                	mov    %ebx,%eax
f012e6fd:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e702:	74 17                	je     f012e71b <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e704:	83 ec 04             	sub    $0x4,%esp
f012e707:	68 2e c9 13 f0       	push   $0xf013c92e
f012e70c:	68 4d 11 00 00       	push   $0x114d
f012e711:	68 1a b6 13 f0       	push   $0xf013b61a
f012e716:	e8 ea 1a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e71b:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e722:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e725:	e8 7d e7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e72a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e72d:	83 ec 08             	sub    $0x8,%esp
f012e730:	68 00 fc 1f 00       	push   $0x1ffc00
f012e735:	6a 00                	push   $0x0
f012e737:	e8 13 97 fd ff       	call   f0107e4f <krealloc>
f012e73c:	83 c4 10             	add    $0x10,%esp
f012e73f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e745:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e74b:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e750:	77 17                	ja     f012e769 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e752:	83 ec 04             	sub    $0x4,%esp
f012e755:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e75a:	68 54 11 00 00       	push   $0x1154
f012e75f:	68 1a b6 13 f0       	push   $0xf013b61a
f012e764:	e8 9c 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e769:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e76f:	89 c1                	mov    %eax,%ecx
f012e771:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e778:	10 00 00 
f012e77b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e781:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e786:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e78c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e792:	ba 00 00 00 00       	mov    $0x0,%edx
f012e797:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e79d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e7a3:	29 d0                	sub    %edx,%eax
f012e7a5:	89 c3                	mov    %eax,%ebx
f012e7a7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e7ae:	10 00 00 
f012e7b1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e7b6:	0f b6 d0             	movzbl %al,%edx
f012e7b9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e7bf:	01 d0                	add    %edx,%eax
f012e7c1:	48                   	dec    %eax
f012e7c2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e7c8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e7ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7d3:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e7d9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e7df:	29 d0                	sub    %edx,%eax
f012e7e1:	01 c3                	add    %eax,%ebx
f012e7e3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e7ea:	10 00 00 
f012e7ed:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e7f2:	0f b6 c0             	movzbl %al,%eax
f012e7f5:	c1 e0 04             	shl    $0x4,%eax
f012e7f8:	89 c2                	mov    %eax,%edx
f012e7fa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e800:	01 d0                	add    %edx,%eax
f012e802:	48                   	dec    %eax
f012e803:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e809:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e80f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e814:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e81a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e820:	29 d0                	sub    %edx,%eax
f012e822:	01 d8                	add    %ebx,%eax
f012e824:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e829:	39 c1                	cmp    %eax,%ecx
f012e82b:	74 17                	je     f012e844 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e82d:	83 ec 04             	sub    $0x4,%esp
f012e830:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e835:	68 56 11 00 00       	push   $0x1156
f012e83a:	68 1a b6 13 f0       	push   $0xf013b61a
f012e83f:	e8 c1 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e844:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e847:	e8 5b e6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e84c:	29 c3                	sub    %eax,%ebx
f012e84e:	89 d8                	mov    %ebx,%eax
f012e850:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e855:	74 17                	je     f012e86e <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e857:	83 ec 04             	sub    $0x4,%esp
f012e85a:	68 2e c9 13 f0       	push   $0xf013c92e
f012e85f:	68 58 11 00 00       	push   $0x1158
f012e864:	68 1a b6 13 f0       	push   $0xf013b61a
f012e869:	e8 97 19 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e86e:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e875:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e878:	e8 2a e6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e87d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e880:	83 ec 08             	sub    $0x8,%esp
f012e883:	68 00 fc 2f 00       	push   $0x2ffc00
f012e888:	6a 00                	push   $0x0
f012e88a:	e8 c0 95 fd ff       	call   f0107e4f <krealloc>
f012e88f:	83 c4 10             	add    $0x10,%esp
f012e892:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e898:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e89e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e8a3:	77 17                	ja     f012e8bc <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8a5:	83 ec 04             	sub    $0x4,%esp
f012e8a8:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012e8ad:	68 5f 11 00 00       	push   $0x115f
f012e8b2:	68 1a b6 13 f0       	push   $0xf013b61a
f012e8b7:	e8 49 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e8bc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e8c2:	89 c1                	mov    %eax,%ecx
f012e8c4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e8cb:	10 00 00 
f012e8ce:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e8d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e8d9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e8df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e8e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8ea:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e8f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e8f6:	29 d0                	sub    %edx,%eax
f012e8f8:	89 c3                	mov    %eax,%ebx
f012e8fa:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e901:	10 00 00 
f012e904:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e909:	0f b6 d0             	movzbl %al,%edx
f012e90c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e912:	01 d0                	add    %edx,%eax
f012e914:	48                   	dec    %eax
f012e915:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e91b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e921:	ba 00 00 00 00       	mov    $0x0,%edx
f012e926:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e92c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e932:	29 d0                	sub    %edx,%eax
f012e934:	01 c3                	add    %eax,%ebx
f012e936:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e93d:	10 00 00 
f012e940:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e945:	0f b6 c0             	movzbl %al,%eax
f012e948:	c1 e0 04             	shl    $0x4,%eax
f012e94b:	89 c2                	mov    %eax,%edx
f012e94d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e953:	01 d0                	add    %edx,%eax
f012e955:	48                   	dec    %eax
f012e956:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e95c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e962:	ba 00 00 00 00       	mov    $0x0,%edx
f012e967:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e96d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e973:	29 d0                	sub    %edx,%eax
f012e975:	01 d8                	add    %ebx,%eax
f012e977:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e97c:	39 c1                	cmp    %eax,%ecx
f012e97e:	74 17                	je     f012e997 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e980:	83 ec 04             	sub    $0x4,%esp
f012e983:	68 fc c8 13 f0       	push   $0xf013c8fc
f012e988:	68 61 11 00 00       	push   $0x1161
f012e98d:	68 1a b6 13 f0       	push   $0xf013b61a
f012e992:	e8 6e 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e997:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e99a:	e8 08 e5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e99f:	29 c3                	sub    %eax,%ebx
f012e9a1:	89 d8                	mov    %ebx,%eax
f012e9a3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e9a8:	74 17                	je     f012e9c1 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e9aa:	83 ec 04             	sub    $0x4,%esp
f012e9ad:	68 64 ba 13 f0       	push   $0xf013ba64
f012e9b2:	68 63 11 00 00       	push   $0x1163
f012e9b7:	68 1a b6 13 f0       	push   $0xf013b61a
f012e9bc:	e8 44 18 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e9c1:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e9c8:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e9cb:	e8 d7 e4 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012e9d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e9d3:	83 ec 08             	sub    $0x8,%esp
f012e9d6:	68 00 fc 2f 00       	push   $0x2ffc00
f012e9db:	6a 00                	push   $0x0
f012e9dd:	e8 6d 94 fd ff       	call   f0107e4f <krealloc>
f012e9e2:	83 c4 10             	add    $0x10,%esp
f012e9e5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e9eb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e9f1:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e9f6:	77 17                	ja     f012ea0f <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e9f8:	83 ec 04             	sub    $0x4,%esp
f012e9fb:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012ea00:	68 6a 11 00 00       	push   $0x116a
f012ea05:	68 1a b6 13 f0       	push   $0xf013b61a
f012ea0a:	e8 f6 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ea0f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ea15:	89 c1                	mov    %eax,%ecx
f012ea17:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ea1e:	10 00 00 
f012ea21:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ea27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea2c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ea32:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ea38:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea3d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ea43:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ea49:	29 d0                	sub    %edx,%eax
f012ea4b:	89 c3                	mov    %eax,%ebx
f012ea4d:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ea54:	10 00 00 
f012ea57:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ea5c:	0f b6 d0             	movzbl %al,%edx
f012ea5f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012ea65:	01 d0                	add    %edx,%eax
f012ea67:	48                   	dec    %eax
f012ea68:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012ea6e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ea74:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea79:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012ea7f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ea85:	29 d0                	sub    %edx,%eax
f012ea87:	01 c3                	add    %eax,%ebx
f012ea89:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012ea90:	10 00 00 
f012ea93:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ea98:	0f b6 c0             	movzbl %al,%eax
f012ea9b:	c1 e0 04             	shl    $0x4,%eax
f012ea9e:	89 c2                	mov    %eax,%edx
f012eaa0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012eaa6:	01 d0                	add    %edx,%eax
f012eaa8:	48                   	dec    %eax
f012eaa9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012eaaf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eab5:	ba 00 00 00 00       	mov    $0x0,%edx
f012eaba:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012eac0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eac6:	29 d0                	sub    %edx,%eax
f012eac8:	01 d8                	add    %ebx,%eax
f012eaca:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012eacf:	39 c1                	cmp    %eax,%ecx
f012ead1:	74 17                	je     f012eaea <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ead3:	83 ec 04             	sub    $0x4,%esp
f012ead6:	68 fc c8 13 f0       	push   $0xf013c8fc
f012eadb:	68 6c 11 00 00       	push   $0x116c
f012eae0:	68 1a b6 13 f0       	push   $0xf013b61a
f012eae5:	e8 1b 17 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012eaea:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eaed:	e8 b5 e3 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012eaf2:	29 c3                	sub    %eax,%ebx
f012eaf4:	89 d8                	mov    %ebx,%eax
f012eaf6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012eafb:	74 17                	je     f012eb14 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012eafd:	83 ec 04             	sub    $0x4,%esp
f012eb00:	68 2e c9 13 f0       	push   $0xf013c92e
f012eb05:	68 6e 11 00 00       	push   $0x116e
f012eb0a:	68 1a b6 13 f0       	push   $0xf013b61a
f012eb0f:	e8 f1 16 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012eb14:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012eb1b:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012eb1e:	e8 84 e3 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012eb23:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012eb26:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012eb2d:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012eb30:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012eb36:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012eb3c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012eb42:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012eb45:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012eb47:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012eb4d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012eb53:	01 c2                	add    %eax,%edx
f012eb55:	8a 45 ce             	mov    -0x32(%ebp),%al
f012eb58:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012eb5a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eb60:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eb66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012eb6d:	eb 11                	jmp    f012eb80 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012eb6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eb72:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eb78:	01 d0                	add    %edx,%eax
f012eb7a:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eb7d:	ff 45 f4             	incl   -0xc(%ebp)
f012eb80:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eb86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eb89:	7d e4                	jge    f012eb6f <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012eb8b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eb91:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012eb97:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eb9d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012eba3:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012eba9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ebb0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ebb6:	01 d0                	add    %edx,%eax
f012ebb8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012ebbe:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ebc4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ebca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ebd1:	eb 1b                	jmp    f012ebee <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012ebd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebd6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ebdd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ebe3:	01 d0                	add    %edx,%eax
f012ebe5:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ebeb:	ff 45 f0             	incl   -0x10(%ebp)
f012ebee:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ebf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ebf7:	7d da                	jge    f012ebd3 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ebf9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ebff:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ec0c:	eb 17                	jmp    f012ec25 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012ec0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ec11:	01 c0                	add    %eax,%eax
f012ec13:	89 c2                	mov    %eax,%edx
f012ec15:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec1b:	01 d0                	add    %edx,%eax
f012ec1d:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec22:	ff 45 ec             	incl   -0x14(%ebp)
f012ec25:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec2b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ec2e:	7d de                	jge    f012ec0e <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ec30:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ec36:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012ec3c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec42:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ec47:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ec4d:	01 c0                	add    %eax,%eax
f012ec4f:	89 c2                	mov    %eax,%edx
f012ec51:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec57:	01 d0                	add    %edx,%eax
f012ec59:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ec5e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec64:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ec6a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ec71:	eb 49                	jmp    f012ecbc <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012ec73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec76:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec7d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec83:	01 d0                	add    %edx,%eax
f012ec85:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012ec88:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec8b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec92:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec98:	01 d0                	add    %edx,%eax
f012ec9a:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012eca0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012eca3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ecaa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecb0:	01 d0                	add    %edx,%eax
f012ecb2:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ecb9:	ff 45 e8             	incl   -0x18(%ebp)
f012ecbc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ecc2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ecc5:	7d ac                	jge    f012ec73 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ecc7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eccd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ecd3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecd9:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ecdc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ece2:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ece8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecee:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ecf5:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ecfb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed02:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed08:	01 d0                	add    %edx,%eax
f012ed0a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ed0d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed1a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed20:	01 d0                	add    %edx,%eax
f012ed22:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ed28:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed2e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed35:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed3b:	01 d0                	add    %edx,%eax
f012ed3d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ed44:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ed4a:	8a 00                	mov    (%eax),%al
f012ed4c:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ed4f:	75 17                	jne    f012ed68 <test_krealloc_BF+0xd04>
f012ed51:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ed57:	89 c2                	mov    %eax,%edx
f012ed59:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ed5f:	01 d0                	add    %edx,%eax
f012ed61:	8a 00                	mov    (%eax),%al
f012ed63:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ed66:	74 17                	je     f012ed7f <test_krealloc_BF+0xd1b>
			panic(
f012ed68:	83 ec 04             	sub    $0x4,%esp
f012ed6b:	68 4c c9 13 f0       	push   $0xf013c94c
f012ed70:	68 b1 11 00 00       	push   $0x11b1
f012ed75:	68 1a b6 13 f0       	push   $0xf013b61a
f012ed7a:	e8 86 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ed7f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed85:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ed8b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ed91:	8a 00                	mov    (%eax),%al
f012ed93:	3c 02                	cmp    $0x2,%al
f012ed95:	75 16                	jne    f012edad <test_krealloc_BF+0xd49>
f012ed97:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ed9d:	89 c2                	mov    %eax,%edx
f012ed9f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eda5:	01 d0                	add    %edx,%eax
f012eda7:	8a 00                	mov    (%eax),%al
f012eda9:	3c 02                	cmp    $0x2,%al
f012edab:	74 20                	je     f012edcd <test_krealloc_BF+0xd69>
			panic(
f012edad:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012edb3:	8a 00                	mov    (%eax),%al
f012edb5:	0f be c0             	movsbl %al,%eax
f012edb8:	50                   	push   %eax
f012edb9:	68 8c c9 13 f0       	push   $0xf013c98c
f012edbe:	68 b7 11 00 00       	push   $0x11b7
f012edc3:	68 1a b6 13 f0       	push   $0xf013b61a
f012edc8:	e8 38 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012edcd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012edd3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012edd9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eddf:	8b 00                	mov    (%eax),%eax
f012ede1:	83 f8 03             	cmp    $0x3,%eax
f012ede4:	75 1c                	jne    f012ee02 <test_krealloc_BF+0xd9e>
f012ede6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012edec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012edf3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012edf9:	01 d0                	add    %edx,%eax
f012edfb:	8b 00                	mov    (%eax),%eax
f012edfd:	83 f8 03             	cmp    $0x3,%eax
f012ee00:	74 17                	je     f012ee19 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ee02:	83 ec 04             	sub    $0x4,%esp
f012ee05:	68 d8 c9 13 f0       	push   $0xf013c9d8
f012ee0a:	68 bb 11 00 00       	push   $0x11bb
f012ee0f:	68 1a b6 13 f0       	push   $0xf013b61a
f012ee14:	e8 ec 13 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ee19:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ee1f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ee25:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee2b:	8b 00                	mov    (%eax),%eax
f012ee2d:	83 f8 04             	cmp    $0x4,%eax
f012ee30:	75 1c                	jne    f012ee4e <test_krealloc_BF+0xdea>
f012ee32:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ee38:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ee3f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee45:	01 d0                	add    %edx,%eax
f012ee47:	8b 00                	mov    (%eax),%eax
f012ee49:	83 f8 04             	cmp    $0x4,%eax
f012ee4c:	74 17                	je     f012ee65 <test_krealloc_BF+0xe01>
			panic(
f012ee4e:	83 ec 04             	sub    $0x4,%esp
f012ee51:	68 4c c9 13 f0       	push   $0xf013c94c
f012ee56:	68 c0 11 00 00       	push   $0x11c0
f012ee5b:	68 1a b6 13 f0       	push   $0xf013b61a
f012ee60:	e8 a0 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ee65:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ee6b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ee71:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ee77:	66 8b 00             	mov    (%eax),%ax
f012ee7a:	66 83 f8 05          	cmp    $0x5,%ax
f012ee7e:	75 1b                	jne    f012ee9b <test_krealloc_BF+0xe37>
f012ee80:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ee86:	01 c0                	add    %eax,%eax
f012ee88:	89 c2                	mov    %eax,%edx
f012ee8a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ee90:	01 d0                	add    %edx,%eax
f012ee92:	66 8b 00             	mov    (%eax),%ax
f012ee95:	66 83 f8 05          	cmp    $0x5,%ax
f012ee99:	74 17                	je     f012eeb2 <test_krealloc_BF+0xe4e>
			panic(
f012ee9b:	83 ec 04             	sub    $0x4,%esp
f012ee9e:	68 4c c9 13 f0       	push   $0xf013c94c
f012eea3:	68 c5 11 00 00       	push   $0x11c5
f012eea8:	68 1a b6 13 f0       	push   $0xf013b61a
f012eead:	e8 53 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012eeb2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eeb8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012eebe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eec4:	66 8b 00             	mov    (%eax),%ax
f012eec7:	66 83 f8 06          	cmp    $0x6,%ax
f012eecb:	75 1b                	jne    f012eee8 <test_krealloc_BF+0xe84>
f012eecd:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012eed3:	01 c0                	add    %eax,%eax
f012eed5:	89 c2                	mov    %eax,%edx
f012eed7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eedd:	01 d0                	add    %edx,%eax
f012eedf:	66 8b 00             	mov    (%eax),%ax
f012eee2:	66 83 f8 06          	cmp    $0x6,%ax
f012eee6:	74 17                	je     f012eeff <test_krealloc_BF+0xe9b>
			panic(
f012eee8:	83 ec 04             	sub    $0x4,%esp
f012eeeb:	68 4c c9 13 f0       	push   $0xf013c94c
f012eef0:	68 ca 11 00 00       	push   $0x11ca
f012eef5:	68 1a b6 13 f0       	push   $0xf013b61a
f012eefa:	e8 06 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012eeff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ef05:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ef0b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef11:	8a 00                	mov    (%eax),%al
f012ef13:	3c 07                	cmp    $0x7,%al
f012ef15:	75 1b                	jne    f012ef32 <test_krealloc_BF+0xece>
f012ef17:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef1d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef24:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef2a:	01 d0                	add    %edx,%eax
f012ef2c:	8a 00                	mov    (%eax),%al
f012ef2e:	3c 07                	cmp    $0x7,%al
f012ef30:	74 17                	je     f012ef49 <test_krealloc_BF+0xee5>
			panic(
f012ef32:	83 ec 04             	sub    $0x4,%esp
f012ef35:	68 4c c9 13 f0       	push   $0xf013c94c
f012ef3a:	68 cf 11 00 00       	push   $0x11cf
f012ef3f:	68 1a b6 13 f0       	push   $0xf013b61a
f012ef44:	e8 bc 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ef49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef4f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef53:	66 83 f8 07          	cmp    $0x7,%ax
f012ef57:	75 1f                	jne    f012ef78 <test_krealloc_BF+0xf14>
f012ef59:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef5f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef6c:	01 d0                	add    %edx,%eax
f012ef6e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef72:	66 83 f8 07          	cmp    $0x7,%ax
f012ef76:	74 17                	je     f012ef8f <test_krealloc_BF+0xf2b>
			panic(
f012ef78:	83 ec 04             	sub    $0x4,%esp
f012ef7b:	68 4c c9 13 f0       	push   $0xf013c94c
f012ef80:	68 d2 11 00 00       	push   $0x11d2
f012ef85:	68 1a b6 13 f0       	push   $0xf013b61a
f012ef8a:	e8 76 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ef8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef95:	8b 40 04             	mov    0x4(%eax),%eax
f012ef98:	83 f8 07             	cmp    $0x7,%eax
f012ef9b:	75 1d                	jne    f012efba <test_krealloc_BF+0xf56>
f012ef9d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012efa3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efaa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efb0:	01 d0                	add    %edx,%eax
f012efb2:	8b 40 04             	mov    0x4(%eax),%eax
f012efb5:	83 f8 07             	cmp    $0x7,%eax
f012efb8:	74 17                	je     f012efd1 <test_krealloc_BF+0xf6d>
			panic(
f012efba:	83 ec 04             	sub    $0x4,%esp
f012efbd:	68 4c c9 13 f0       	push   $0xf013c94c
f012efc2:	68 d5 11 00 00       	push   $0x11d5
f012efc7:	68 1a b6 13 f0       	push   $0xf013b61a
f012efcc:	e8 34 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012efd1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012efd7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012efdd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efe3:	8a 00                	mov    (%eax),%al
f012efe5:	3c 08                	cmp    $0x8,%al
f012efe7:	75 1b                	jne    f012f004 <test_krealloc_BF+0xfa0>
f012efe9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012efef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eff6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012effc:	01 d0                	add    %edx,%eax
f012effe:	8a 00                	mov    (%eax),%al
f012f000:	3c 08                	cmp    $0x8,%al
f012f002:	74 17                	je     f012f01b <test_krealloc_BF+0xfb7>
			panic(
f012f004:	83 ec 04             	sub    $0x4,%esp
f012f007:	68 4c c9 13 f0       	push   $0xf013c94c
f012f00c:	68 da 11 00 00       	push   $0x11da
f012f011:	68 1a b6 13 f0       	push   $0xf013b61a
f012f016:	e8 ea 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f01b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f021:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f025:	66 83 f8 08          	cmp    $0x8,%ax
f012f029:	75 1f                	jne    f012f04a <test_krealloc_BF+0xfe6>
f012f02b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f031:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f038:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f03e:	01 d0                	add    %edx,%eax
f012f040:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f044:	66 83 f8 08          	cmp    $0x8,%ax
f012f048:	74 17                	je     f012f061 <test_krealloc_BF+0xffd>
			panic(
f012f04a:	83 ec 04             	sub    $0x4,%esp
f012f04d:	68 4c c9 13 f0       	push   $0xf013c94c
f012f052:	68 dd 11 00 00       	push   $0x11dd
f012f057:	68 1a b6 13 f0       	push   $0xf013b61a
f012f05c:	e8 a4 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f061:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f067:	8b 40 04             	mov    0x4(%eax),%eax
f012f06a:	83 f8 08             	cmp    $0x8,%eax
f012f06d:	75 1d                	jne    f012f08c <test_krealloc_BF+0x1028>
f012f06f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f075:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f07c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f082:	01 d0                	add    %edx,%eax
f012f084:	8b 40 04             	mov    0x4(%eax),%eax
f012f087:	83 f8 08             	cmp    $0x8,%eax
f012f08a:	74 17                	je     f012f0a3 <test_krealloc_BF+0x103f>
			panic(
f012f08c:	83 ec 04             	sub    $0x4,%esp
f012f08f:	68 4c c9 13 f0       	push   $0xf013c94c
f012f094:	68 e0 11 00 00       	push   $0x11e0
f012f099:	68 1a b6 13 f0       	push   $0xf013b61a
f012f09e:	e8 62 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f0a3:	e8 ff dd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f0a8:	89 c2                	mov    %eax,%edx
f012f0aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f0ad:	39 c2                	cmp    %eax,%edx
f012f0af:	74 17                	je     f012f0c8 <test_krealloc_BF+0x1064>
			panic(
f012f0b1:	83 ec 04             	sub    $0x4,%esp
f012f0b4:	68 0c ca 13 f0       	push   $0xf013ca0c
f012f0b9:	68 e4 11 00 00       	push   $0x11e4
f012f0be:	68 1a b6 13 f0       	push   $0xf013b61a
f012f0c3:	e8 3d 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f0c8:	83 ec 0c             	sub    $0xc,%esp
f012f0cb:	68 58 ca 13 f0       	push   $0xf013ca58
f012f0d0:	e8 39 1c fd ff       	call   f0100d0e <cprintf>
f012f0d5:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f0d8:	e8 ca dd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f0dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f0e0:	e8 e3 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f0e5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f0eb:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f0f1:	83 ec 08             	sub    $0x8,%esp
f012f0f4:	6a 00                	push   $0x0
f012f0f6:	50                   	push   %eax
f012f0f7:	e8 53 8d fd ff       	call   f0107e4f <krealloc>
f012f0fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f0ff:	e8 c4 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f104:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f10a:	74 17                	je     f012f123 <test_krealloc_BF+0x10bf>
			panic(
f012f10c:	83 ec 04             	sub    $0x4,%esp
f012f10f:	68 7c ca 13 f0       	push   $0xf013ca7c
f012f114:	68 f1 11 00 00       	push   $0x11f1
f012f119:	68 1a b6 13 f0       	push   $0xf013b61a
f012f11e:	e8 e2 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f123:	e8 7f dd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f128:	89 c2                	mov    %eax,%edx
f012f12a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f12d:	29 c2                	sub    %eax,%edx
f012f12f:	89 d0                	mov    %edx,%eax
f012f131:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f136:	74 17                	je     f012f14f <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f138:	83 ec 04             	sub    $0x4,%esp
f012f13b:	68 f0 ca 13 f0       	push   $0xf013caf0
f012f140:	68 f3 11 00 00       	push   $0x11f3
f012f145:	68 1a b6 13 f0       	push   $0xf013b61a
f012f14a:	e8 b6 10 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f14f:	e8 53 dd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f154:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f157:	e8 6c 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f15c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f162:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f168:	83 ec 08             	sub    $0x8,%esp
f012f16b:	6a 00                	push   $0x0
f012f16d:	50                   	push   %eax
f012f16e:	e8 dc 8c fd ff       	call   f0107e4f <krealloc>
f012f173:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f176:	e8 4d 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f17b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f181:	74 17                	je     f012f19a <test_krealloc_BF+0x1136>
			panic(
f012f183:	83 ec 04             	sub    $0x4,%esp
f012f186:	68 7c ca 13 f0       	push   $0xf013ca7c
f012f18b:	68 fc 11 00 00       	push   $0x11fc
f012f190:	68 1a b6 13 f0       	push   $0xf013b61a
f012f195:	e8 6b 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f19a:	e8 08 dd fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f19f:	89 c2                	mov    %eax,%edx
f012f1a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f1a4:	29 c2                	sub    %eax,%edx
f012f1a6:	89 d0                	mov    %edx,%eax
f012f1a8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f1ad:	74 17                	je     f012f1c6 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f1af:	83 ec 04             	sub    $0x4,%esp
f012f1b2:	68 f0 ca 13 f0       	push   $0xf013caf0
f012f1b7:	68 fe 11 00 00       	push   $0x11fe
f012f1bc:	68 1a b6 13 f0       	push   $0xf013b61a
f012f1c1:	e8 3f 10 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f1c6:	e8 dc dc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f1cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f1ce:	e8 f5 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f1d3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f1d9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f1df:	83 ec 08             	sub    $0x8,%esp
f012f1e2:	6a 00                	push   $0x0
f012f1e4:	50                   	push   %eax
f012f1e5:	e8 65 8c fd ff       	call   f0107e4f <krealloc>
f012f1ea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f1ed:	e8 d6 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f1f2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f1f8:	74 17                	je     f012f211 <test_krealloc_BF+0x11ad>
			panic(
f012f1fa:	83 ec 04             	sub    $0x4,%esp
f012f1fd:	68 34 b6 13 f0       	push   $0xf013b634
f012f202:	68 06 12 00 00       	push   $0x1206
f012f207:	68 1a b6 13 f0       	push   $0xf013b61a
f012f20c:	e8 f4 0f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f211:	e8 91 dc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f216:	89 c2                	mov    %eax,%edx
f012f218:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f21b:	29 c2                	sub    %eax,%edx
f012f21d:	89 d0                	mov    %edx,%eax
f012f21f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f224:	74 17                	je     f012f23d <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f226:	83 ec 04             	sub    $0x4,%esp
f012f229:	68 f0 ca 13 f0       	push   $0xf013caf0
f012f22e:	68 08 12 00 00       	push   $0x1208
f012f233:	68 1a b6 13 f0       	push   $0xf013b61a
f012f238:	e8 c8 0f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f23d:	e8 65 dc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f242:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f245:	e8 7e 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f24a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f250:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f256:	83 ec 08             	sub    $0x8,%esp
f012f259:	6a 00                	push   $0x0
f012f25b:	50                   	push   %eax
f012f25c:	e8 ee 8b fd ff       	call   f0107e4f <krealloc>
f012f261:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f264:	e8 5f 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f269:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f26f:	74 17                	je     f012f288 <test_krealloc_BF+0x1224>
			panic(
f012f271:	83 ec 04             	sub    $0x4,%esp
f012f274:	68 7c ca 13 f0       	push   $0xf013ca7c
f012f279:	68 10 12 00 00       	push   $0x1210
f012f27e:	68 1a b6 13 f0       	push   $0xf013b61a
f012f283:	e8 7d 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f288:	e8 1a dc fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f28d:	89 c2                	mov    %eax,%edx
f012f28f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f292:	29 c2                	sub    %eax,%edx
f012f294:	89 d0                	mov    %edx,%eax
f012f296:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f29b:	74 17                	je     f012f2b4 <test_krealloc_BF+0x1250>
			panic(
f012f29d:	83 ec 04             	sub    $0x4,%esp
f012f2a0:	68 24 cb 13 f0       	push   $0xf013cb24
f012f2a5:	68 13 12 00 00       	push   $0x1213
f012f2aa:	68 1a b6 13 f0       	push   $0xf013b61a
f012f2af:	e8 51 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f2b4:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f2bb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f2c2:	eb 48                	jmp    f012f30c <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f2c4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f2c7:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012f2cc:	83 ec 04             	sub    $0x4,%esp
f012f2cf:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f2d5:	51                   	push   %ecx
f012f2d6:	52                   	push   %edx
f012f2d7:	50                   	push   %eax
f012f2d8:	e8 d4 77 fd ff       	call   f0106ab1 <get_page_table>
f012f2dd:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f2e0:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f2e6:	85 c0                	test   %eax,%eax
f012f2e8:	75 17                	jne    f012f301 <test_krealloc_BF+0x129d>
					panic(
f012f2ea:	83 ec 04             	sub    $0x4,%esp
f012f2ed:	68 1c bf 13 f0       	push   $0xf013bf1c
f012f2f2:	68 1f 12 00 00       	push   $0x121f
f012f2f7:	68 1a b6 13 f0       	push   $0xf013b61a
f012f2fc:	e8 04 0f fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f301:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f308:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f30c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f310:	78 b2                	js     f012f2c4 <test_krealloc_BF+0x1260>
f012f312:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f316:	7f 09                	jg     f012f321 <test_krealloc_BF+0x12bd>
f012f318:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f31f:	76 a3                	jbe    f012f2c4 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f321:	83 ec 0c             	sub    $0xc,%esp
f012f324:	68 63 cb 13 f0       	push   $0xf013cb63
f012f329:	e8 e0 19 fd ff       	call   f0100d0e <cprintf>
f012f32e:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f331:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f337:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f33d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f344:	eb 21                	jmp    f012f367 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f346:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f34c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f34f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f355:	01 c8                	add    %ecx,%eax
f012f357:	8a 00                	mov    (%eax),%al
f012f359:	0f be c0             	movsbl %al,%eax
f012f35c:	01 d0                	add    %edx,%eax
f012f35e:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f364:	ff 45 dc             	incl   -0x24(%ebp)
f012f367:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f36d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f370:	7d d4                	jge    f012f346 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f372:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f378:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f37e:	42                   	inc    %edx
f012f37f:	01 d2                	add    %edx,%edx
f012f381:	39 d0                	cmp    %edx,%eax
f012f383:	74 17                	je     f012f39c <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f385:	83 ec 04             	sub    $0x4,%esp
f012f388:	68 6c cb 13 f0       	push   $0xf013cb6c
f012f38d:	68 31 12 00 00       	push   $0x1231
f012f392:	68 1a b6 13 f0       	push   $0xf013b61a
f012f397:	e8 69 0e fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f39c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f3a2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f3a8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f3af:	eb 25                	jmp    f012f3d6 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f3b1:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f3b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f3ba:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f3c1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f3c7:	01 c8                	add    %ecx,%eax
f012f3c9:	8b 00                	mov    (%eax),%eax
f012f3cb:	01 d0                	add    %edx,%eax
f012f3cd:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f3d3:	ff 45 dc             	incl   -0x24(%ebp)
f012f3d6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f3dc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f3df:	7d d0                	jge    f012f3b1 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f3e1:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f3e7:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f3ed:	42                   	inc    %edx
f012f3ee:	c1 e2 02             	shl    $0x2,%edx
f012f3f1:	39 d0                	cmp    %edx,%eax
f012f3f3:	74 17                	je     f012f40c <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f3f5:	83 ec 04             	sub    $0x4,%esp
f012f3f8:	68 6c cb 13 f0       	push   $0xf013cb6c
f012f3fd:	68 3b 12 00 00       	push   $0x123b
f012f402:	68 1a b6 13 f0       	push   $0xf013b61a
f012f407:	e8 f9 0d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f40c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f412:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f418:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f41f:	eb 24                	jmp    f012f445 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f421:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f427:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f42a:	01 c0                	add    %eax,%eax
f012f42c:	89 c1                	mov    %eax,%ecx
f012f42e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f434:	01 c8                	add    %ecx,%eax
f012f436:	66 8b 00             	mov    (%eax),%ax
f012f439:	98                   	cwtl   
f012f43a:	01 d0                	add    %edx,%eax
f012f43c:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f442:	ff 45 dc             	incl   -0x24(%ebp)
f012f445:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f44b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f44e:	7d d1                	jge    f012f421 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f450:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f456:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f45c:	8d 48 01             	lea    0x1(%eax),%ecx
f012f45f:	89 c8                	mov    %ecx,%eax
f012f461:	c1 e0 02             	shl    $0x2,%eax
f012f464:	01 c8                	add    %ecx,%eax
f012f466:	39 c2                	cmp    %eax,%edx
f012f468:	74 17                	je     f012f481 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f46a:	83 ec 04             	sub    $0x4,%esp
f012f46d:	68 6c cb 13 f0       	push   $0xf013cb6c
f012f472:	68 45 12 00 00       	push   $0x1245
f012f477:	68 1a b6 13 f0       	push   $0xf013b61a
f012f47c:	e8 84 0d fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f481:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f487:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f48d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f494:	eb 70                	jmp    f012f506 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f496:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f49c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f49f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4ac:	01 c8                	add    %ecx,%eax
f012f4ae:	8a 00                	mov    (%eax),%al
f012f4b0:	0f be c0             	movsbl %al,%eax
f012f4b3:	01 d0                	add    %edx,%eax
f012f4b5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f4bb:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f4c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4c4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4cb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4d1:	01 c8                	add    %ecx,%eax
f012f4d3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f4d7:	98                   	cwtl   
f012f4d8:	01 d0                	add    %edx,%eax
f012f4da:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f4e0:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f4e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4e9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4f6:	01 c8                	add    %ecx,%eax
f012f4f8:	8b 40 04             	mov    0x4(%eax),%eax
f012f4fb:	01 d0                	add    %edx,%eax
f012f4fd:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f503:	ff 45 dc             	incl   -0x24(%ebp)
f012f506:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f50c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f50f:	7d 85                	jge    f012f496 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f511:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f517:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f51d:	8d 50 01             	lea    0x1(%eax),%edx
f012f520:	89 d0                	mov    %edx,%eax
f012f522:	01 c0                	add    %eax,%eax
f012f524:	01 d0                	add    %edx,%eax
f012f526:	01 c0                	add    %eax,%eax
f012f528:	01 d0                	add    %edx,%eax
f012f52a:	39 c1                	cmp    %eax,%ecx
f012f52c:	75 3a                	jne    f012f568 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f52e:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f534:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f53a:	8d 50 01             	lea    0x1(%eax),%edx
f012f53d:	89 d0                	mov    %edx,%eax
f012f53f:	01 c0                	add    %eax,%eax
f012f541:	01 d0                	add    %edx,%eax
f012f543:	01 c0                	add    %eax,%eax
f012f545:	01 d0                	add    %edx,%eax
f012f547:	39 c1                	cmp    %eax,%ecx
f012f549:	75 1d                	jne    f012f568 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f54b:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f551:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f557:	8d 50 01             	lea    0x1(%eax),%edx
f012f55a:	89 d0                	mov    %edx,%eax
f012f55c:	01 c0                	add    %eax,%eax
f012f55e:	01 d0                	add    %edx,%eax
f012f560:	01 c0                	add    %eax,%eax
f012f562:	01 d0                	add    %edx,%eax
f012f564:	39 c1                	cmp    %eax,%ecx
f012f566:	74 17                	je     f012f57f <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f568:	83 ec 04             	sub    $0x4,%esp
f012f56b:	68 6c cb 13 f0       	push   $0xf013cb6c
f012f570:	68 53 12 00 00       	push   $0x1253
f012f575:	68 1a b6 13 f0       	push   $0xf013b61a
f012f57a:	e8 86 0c fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f57f:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f586:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f589:	e8 19 d9 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f58e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f591:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f597:	83 ec 08             	sub    $0x8,%esp
f012f59a:	68 00 3c 00 00       	push   $0x3c00
f012f59f:	50                   	push   %eax
f012f5a0:	e8 aa 88 fd ff       	call   f0107e4f <krealloc>
f012f5a5:	83 c4 10             	add    $0x10,%esp
f012f5a8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f5ae:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f5b4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f5b9:	77 17                	ja     f012f5d2 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f5bb:	83 ec 04             	sub    $0x4,%esp
f012f5be:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f5c3:	68 5f 12 00 00       	push   $0x125f
f012f5c8:	68 1a b6 13 f0       	push   $0xf013b61a
f012f5cd:	e8 33 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f5d2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5d8:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f5de:	74 17                	je     f012f5f7 <test_krealloc_BF+0x1593>
			panic(
f012f5e0:	83 ec 04             	sub    $0x4,%esp
f012f5e3:	68 a4 cb 13 f0       	push   $0xf013cba4
f012f5e8:	68 62 12 00 00       	push   $0x1262
f012f5ed:	68 1a b6 13 f0       	push   $0xf013b61a
f012f5f2:	e8 0e 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f5f7:	e8 ab d8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f5fc:	89 c2                	mov    %eax,%edx
f012f5fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f601:	39 c2                	cmp    %eax,%edx
f012f603:	74 17                	je     f012f61c <test_krealloc_BF+0x15b8>
			panic(
f012f605:	83 ec 04             	sub    $0x4,%esp
f012f608:	68 10 cc 13 f0       	push   $0xf013cc10
f012f60d:	68 65 12 00 00       	push   $0x1265
f012f612:	68 1a b6 13 f0       	push   $0xf013b61a
f012f617:	e8 e9 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f61c:	e8 86 d8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f621:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f624:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f62a:	83 ec 08             	sub    $0x8,%esp
f012f62d:	68 00 fc 0f 00       	push   $0xffc00
f012f632:	50                   	push   %eax
f012f633:	e8 17 88 fd ff       	call   f0107e4f <krealloc>
f012f638:	83 c4 10             	add    $0x10,%esp
f012f63b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f641:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f647:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f64c:	77 17                	ja     f012f665 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f64e:	83 ec 04             	sub    $0x4,%esp
f012f651:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f656:	68 6b 12 00 00       	push   $0x126b
f012f65b:	68 1a b6 13 f0       	push   $0xf013b61a
f012f660:	e8 a0 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f665:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f66b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f671:	74 17                	je     f012f68a <test_krealloc_BF+0x1626>
			panic(
f012f673:	83 ec 04             	sub    $0x4,%esp
f012f676:	68 a4 cb 13 f0       	push   $0xf013cba4
f012f67b:	68 6e 12 00 00       	push   $0x126e
f012f680:	68 1a b6 13 f0       	push   $0xf013b61a
f012f685:	e8 7b 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f68a:	e8 18 d8 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f68f:	89 c2                	mov    %eax,%edx
f012f691:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f694:	39 c2                	cmp    %eax,%edx
f012f696:	74 17                	je     f012f6af <test_krealloc_BF+0x164b>
			panic(
f012f698:	83 ec 04             	sub    $0x4,%esp
f012f69b:	68 10 cc 13 f0       	push   $0xf013cc10
f012f6a0:	68 71 12 00 00       	push   $0x1271
f012f6a5:	68 1a b6 13 f0       	push   $0xf013b61a
f012f6aa:	e8 56 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f6af:	e8 f3 d7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f6b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f6b7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6bd:	83 ec 08             	sub    $0x8,%esp
f012f6c0:	68 00 fc 0f 00       	push   $0xffc00
f012f6c5:	50                   	push   %eax
f012f6c6:	e8 84 87 fd ff       	call   f0107e4f <krealloc>
f012f6cb:	83 c4 10             	add    $0x10,%esp
f012f6ce:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6d4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f6da:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6df:	77 17                	ja     f012f6f8 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6e1:	83 ec 04             	sub    $0x4,%esp
f012f6e4:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f6e9:	68 77 12 00 00       	push   $0x1277
f012f6ee:	68 1a b6 13 f0       	push   $0xf013b61a
f012f6f3:	e8 0d 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f6f8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6fe:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f704:	74 17                	je     f012f71d <test_krealloc_BF+0x16b9>
			panic(
f012f706:	83 ec 04             	sub    $0x4,%esp
f012f709:	68 a4 cb 13 f0       	push   $0xf013cba4
f012f70e:	68 7a 12 00 00       	push   $0x127a
f012f713:	68 1a b6 13 f0       	push   $0xf013b61a
f012f718:	e8 e8 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f71d:	e8 85 d7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f722:	89 c2                	mov    %eax,%edx
f012f724:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f727:	39 c2                	cmp    %eax,%edx
f012f729:	74 17                	je     f012f742 <test_krealloc_BF+0x16de>
			panic(
f012f72b:	83 ec 04             	sub    $0x4,%esp
f012f72e:	68 10 cc 13 f0       	push   $0xf013cc10
f012f733:	68 7d 12 00 00       	push   $0x127d
f012f738:	68 1a b6 13 f0       	push   $0xf013b61a
f012f73d:	e8 c3 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f742:	e8 60 d7 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f747:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f74a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f750:	83 ec 08             	sub    $0x8,%esp
f012f753:	68 00 fc 0f 00       	push   $0xffc00
f012f758:	50                   	push   %eax
f012f759:	e8 f1 86 fd ff       	call   f0107e4f <krealloc>
f012f75e:	83 c4 10             	add    $0x10,%esp
f012f761:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f767:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f76d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f772:	77 17                	ja     f012f78b <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f774:	83 ec 04             	sub    $0x4,%esp
f012f777:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f77c:	68 85 12 00 00       	push   $0x1285
f012f781:	68 1a b6 13 f0       	push   $0xf013b61a
f012f786:	e8 7a 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f78b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f791:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f797:	74 17                	je     f012f7b0 <test_krealloc_BF+0x174c>
			panic(
f012f799:	83 ec 04             	sub    $0x4,%esp
f012f79c:	68 54 cc 13 f0       	push   $0xf013cc54
f012f7a1:	68 88 12 00 00       	push   $0x1288
f012f7a6:	68 1a b6 13 f0       	push   $0xf013b61a
f012f7ab:	e8 55 0a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f7b0:	e8 f2 d6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f7b5:	89 c2                	mov    %eax,%edx
f012f7b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f7ba:	39 c2                	cmp    %eax,%edx
f012f7bc:	74 17                	je     f012f7d5 <test_krealloc_BF+0x1771>
			panic(
f012f7be:	83 ec 04             	sub    $0x4,%esp
f012f7c1:	68 10 cc 13 f0       	push   $0xf013cc10
f012f7c6:	68 8b 12 00 00       	push   $0x128b
f012f7cb:	68 1a b6 13 f0       	push   $0xf013b61a
f012f7d0:	e8 30 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f7d5:	83 ec 0c             	sub    $0xc,%esp
f012f7d8:	68 33 be 13 f0       	push   $0xf013be33
f012f7dd:	e8 2c 15 fd ff       	call   f0100d0e <cprintf>
f012f7e2:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f7e5:	e8 bd d6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f7ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f7ed:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f7f3:	83 ec 08             	sub    $0x8,%esp
f012f7f6:	68 00 18 10 00       	push   $0x101800
f012f7fb:	50                   	push   %eax
f012f7fc:	e8 4e 86 fd ff       	call   f0107e4f <krealloc>
f012f801:	83 c4 10             	add    $0x10,%esp
f012f804:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f807:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f80a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f80f:	77 17                	ja     f012f828 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f811:	83 ec 04             	sub    $0x4,%esp
f012f814:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f819:	68 93 12 00 00       	push   $0x1293
f012f81e:	68 1a b6 13 f0       	push   $0xf013b61a
f012f823:	e8 dd 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f828:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f82e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f831:	74 17                	je     f012f84a <test_krealloc_BF+0x17e6>
			panic(
f012f833:	83 ec 04             	sub    $0x4,%esp
f012f836:	68 b4 cc 13 f0       	push   $0xf013ccb4
f012f83b:	68 96 12 00 00       	push   $0x1296
f012f840:	68 1a b6 13 f0       	push   $0xf013b61a
f012f845:	e8 bb 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f84a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f84d:	e8 55 d6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f852:	29 c3                	sub    %eax,%ebx
f012f854:	89 d8                	mov    %ebx,%eax
f012f856:	83 f8 02             	cmp    $0x2,%eax
f012f859:	74 17                	je     f012f872 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f85b:	83 ec 04             	sub    $0x4,%esp
f012f85e:	68 30 cd 13 f0       	push   $0xf013cd30
f012f863:	68 98 12 00 00       	push   $0x1298
f012f868:	68 1a b6 13 f0       	push   $0xf013b61a
f012f86d:	e8 93 09 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f872:	e8 30 d6 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f877:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f87a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f880:	83 ec 08             	sub    $0x8,%esp
f012f883:	68 00 fc 3f 00       	push   $0x3ffc00
f012f888:	50                   	push   %eax
f012f889:	e8 c1 85 fd ff       	call   f0107e4f <krealloc>
f012f88e:	83 c4 10             	add    $0x10,%esp
f012f891:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f894:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f897:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f89c:	77 17                	ja     f012f8b5 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f89e:	83 ec 04             	sub    $0x4,%esp
f012f8a1:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f8a6:	68 9e 12 00 00       	push   $0x129e
f012f8ab:	68 1a b6 13 f0       	push   $0xf013b61a
f012f8b0:	e8 50 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f8b5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f8bb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f8be:	74 17                	je     f012f8d7 <test_krealloc_BF+0x1873>
			panic(
f012f8c0:	83 ec 04             	sub    $0x4,%esp
f012f8c3:	68 b4 cc 13 f0       	push   $0xf013ccb4
f012f8c8:	68 a1 12 00 00       	push   $0x12a1
f012f8cd:	68 1a b6 13 f0       	push   $0xf013b61a
f012f8d2:	e8 2e 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f8d7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f8da:	e8 c8 d5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f8df:	29 c3                	sub    %eax,%ebx
f012f8e1:	89 d8                	mov    %ebx,%eax
f012f8e3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f8e8:	74 17                	je     f012f901 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f8ea:	83 ec 04             	sub    $0x4,%esp
f012f8ed:	68 30 cd 13 f0       	push   $0xf013cd30
f012f8f2:	68 a4 12 00 00       	push   $0x12a4
f012f8f7:	68 1a b6 13 f0       	push   $0xf013b61a
f012f8fc:	e8 04 09 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f901:	83 ec 0c             	sub    $0xc,%esp
f012f904:	68 78 be 13 f0       	push   $0xf013be78
f012f909:	e8 00 14 fd ff       	call   f0100d0e <cprintf>
f012f90e:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f911:	e8 91 d5 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012f916:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f919:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f91f:	83 ec 08             	sub    $0x8,%esp
f012f922:	68 00 fc 9f 00       	push   $0x9ffc00
f012f927:	50                   	push   %eax
f012f928:	e8 22 85 fd ff       	call   f0107e4f <krealloc>
f012f92d:	83 c4 10             	add    $0x10,%esp
f012f930:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f933:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f936:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f93b:	77 17                	ja     f012f954 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f93d:	83 ec 04             	sub    $0x4,%esp
f012f940:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012f945:	68 af 12 00 00       	push   $0x12af
f012f94a:	68 1a b6 13 f0       	push   $0xf013b61a
f012f94f:	e8 b1 08 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f954:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f95b:	10 00 00 
f012f95e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f964:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f969:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f96f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f975:	ba 00 00 00 00       	mov    $0x0,%edx
f012f97a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f980:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f986:	29 d0                	sub    %edx,%eax
f012f988:	89 c1                	mov    %eax,%ecx
f012f98a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f991:	10 00 00 
f012f994:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012f999:	0f b6 d0             	movzbl %al,%edx
f012f99c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f9a2:	01 d0                	add    %edx,%eax
f012f9a4:	48                   	dec    %eax
f012f9a5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f9ab:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f9b1:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9b6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f9bc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f9c2:	29 d0                	sub    %edx,%eax
f012f9c4:	01 c1                	add    %eax,%ecx
f012f9c6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f9cd:	10 00 00 
f012f9d0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012f9d5:	0f b6 c0             	movzbl %al,%eax
f012f9d8:	c1 e0 04             	shl    $0x4,%eax
f012f9db:	89 c2                	mov    %eax,%edx
f012f9dd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f9e3:	01 d0                	add    %edx,%eax
f012f9e5:	48                   	dec    %eax
f012f9e6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f9ec:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f9f2:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9f7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f9fd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fa03:	29 d0                	sub    %edx,%eax
f012fa05:	01 c8                	add    %ecx,%eax
f012fa07:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fa0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa10:	39 c2                	cmp    %eax,%edx
f012fa12:	74 18                	je     f012fa2c <test_krealloc_BF+0x19c8>
			panic(
f012fa14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa17:	50                   	push   %eax
f012fa18:	68 64 cd 13 f0       	push   $0xf013cd64
f012fa1d:	68 b3 12 00 00       	push   $0x12b3
f012fa22:	68 1a b6 13 f0       	push   $0xf013b61a
f012fa27:	e8 d9 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fa2c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa32:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fa35:	75 17                	jne    f012fa4e <test_krealloc_BF+0x19ea>
			panic(
f012fa37:	83 ec 04             	sub    $0x4,%esp
f012fa3a:	68 a8 cd 13 f0       	push   $0xf013cda8
f012fa3f:	68 b6 12 00 00       	push   $0x12b6
f012fa44:	68 1a b6 13 f0       	push   $0xf013b61a
f012fa49:	e8 b7 07 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fa4e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fa51:	e8 51 d4 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012fa56:	29 c3                	sub    %eax,%ebx
f012fa58:	89 d8                	mov    %ebx,%eax
f012fa5a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fa5f:	74 17                	je     f012fa78 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fa61:	83 ec 04             	sub    $0x4,%esp
f012fa64:	68 30 cd 13 f0       	push   $0xf013cd30
f012fa69:	68 b9 12 00 00       	push   $0x12b9
f012fa6e:	68 1a b6 13 f0       	push   $0xf013b61a
f012fa73:	e8 8d 07 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fa78:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa7b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fa81:	e8 21 d4 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012fa86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012fa89:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fa8f:	83 ec 08             	sub    $0x8,%esp
f012fa92:	68 00 fc 3f 00       	push   $0x3ffc00
f012fa97:	50                   	push   %eax
f012fa98:	e8 b2 83 fd ff       	call   f0107e4f <krealloc>
f012fa9d:	83 c4 10             	add    $0x10,%esp
f012faa0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012faa3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012faa6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012faab:	77 17                	ja     f012fac4 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012faad:	83 ec 04             	sub    $0x4,%esp
f012fab0:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012fab5:	68 c2 12 00 00       	push   $0x12c2
f012faba:	68 1a b6 13 f0       	push   $0xf013b61a
f012fabf:	e8 41 07 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fac4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012faca:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012facd:	75 17                	jne    f012fae6 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012facf:	83 ec 04             	sub    $0x4,%esp
f012fad2:	68 a8 cd 13 f0       	push   $0xf013cda8
f012fad7:	68 c4 12 00 00       	push   $0x12c4
f012fadc:	68 1a b6 13 f0       	push   $0xf013b61a
f012fae1:	e8 1f 07 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012fae6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012faed:	10 00 00 
f012faf0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012faf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fafb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012fb01:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb07:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb0c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012fb12:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb18:	29 d0                	sub    %edx,%eax
f012fb1a:	89 c1                	mov    %eax,%ecx
f012fb1c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fb23:	10 00 00 
f012fb26:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fb2b:	0f b6 d0             	movzbl %al,%edx
f012fb2e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fb34:	01 d0                	add    %edx,%eax
f012fb36:	48                   	dec    %eax
f012fb37:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fb3d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fb43:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb48:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fb4e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fb54:	29 d0                	sub    %edx,%eax
f012fb56:	01 c1                	add    %eax,%ecx
f012fb58:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fb5f:	10 00 00 
f012fb62:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fb67:	0f b6 c0             	movzbl %al,%eax
f012fb6a:	c1 e0 04             	shl    $0x4,%eax
f012fb6d:	89 c2                	mov    %eax,%edx
f012fb6f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012fb75:	01 d0                	add    %edx,%eax
f012fb77:	48                   	dec    %eax
f012fb78:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012fb7e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fb84:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb89:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fb8f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fb95:	29 d0                	sub    %edx,%eax
f012fb97:	01 c8                	add    %ecx,%eax
f012fb99:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fb9f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fba2:	39 c2                	cmp    %eax,%edx
f012fba4:	74 17                	je     f012fbbd <test_krealloc_BF+0x1b59>
f012fba6:	83 ec 04             	sub    $0x4,%esp
f012fba9:	68 fc c8 13 f0       	push   $0xf013c8fc
f012fbae:	68 c5 12 00 00       	push   $0x12c5
f012fbb3:	68 1a b6 13 f0       	push   $0xf013b61a
f012fbb8:	e8 48 06 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012fbbd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fbc0:	e8 e2 d2 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012fbc5:	29 c3                	sub    %eax,%ebx
f012fbc7:	89 d8                	mov    %ebx,%eax
f012fbc9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012fbce:	74 17                	je     f012fbe7 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012fbd0:	83 ec 04             	sub    $0x4,%esp
f012fbd3:	68 30 cd 13 f0       	push   $0xf013cd30
f012fbd8:	68 c9 12 00 00       	push   $0x12c9
f012fbdd:	68 1a b6 13 f0       	push   $0xf013b61a
f012fbe2:	e8 1e 06 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012fbe7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbea:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fbf0:	e8 b2 d2 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012fbf5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012fbf8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fbfe:	83 ec 08             	sub    $0x8,%esp
f012fc01:	68 00 fc 3f 01       	push   $0x13ffc00
f012fc06:	50                   	push   %eax
f012fc07:	e8 43 82 fd ff       	call   f0107e4f <krealloc>
f012fc0c:	83 c4 10             	add    $0x10,%esp
f012fc0f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc12:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc15:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc1a:	77 17                	ja     f012fc33 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc1c:	83 ec 04             	sub    $0x4,%esp
f012fc1f:	68 c0 c8 13 f0       	push   $0xf013c8c0
f012fc24:	68 cf 12 00 00       	push   $0x12cf
f012fc29:	68 1a b6 13 f0       	push   $0xf013b61a
f012fc2e:	e8 d2 05 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fc33:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc39:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fc3c:	75 17                	jne    f012fc55 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fc3e:	83 ec 04             	sub    $0x4,%esp
f012fc41:	68 a8 cd 13 f0       	push   $0xf013cda8
f012fc46:	68 d1 12 00 00       	push   $0x12d1
f012fc4b:	68 1a b6 13 f0       	push   $0xf013b61a
f012fc50:	e8 b0 05 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012fc55:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012fc5c:	10 00 00 
f012fc5f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012fc65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fc6a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012fc70:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fc76:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc7b:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012fc81:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fc87:	29 d0                	sub    %edx,%eax
f012fc89:	89 c1                	mov    %eax,%ecx
f012fc8b:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012fc92:	10 00 00 
f012fc95:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fc9a:	0f b6 d0             	movzbl %al,%edx
f012fc9d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012fca3:	01 d0                	add    %edx,%eax
f012fca5:	48                   	dec    %eax
f012fca6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012fcac:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fcb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcb7:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fcbd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fcc3:	29 d0                	sub    %edx,%eax
f012fcc5:	01 c1                	add    %eax,%ecx
f012fcc7:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012fcce:	10 00 00 
f012fcd1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fcd6:	0f b6 c0             	movzbl %al,%eax
f012fcd9:	c1 e0 04             	shl    $0x4,%eax
f012fcdc:	89 c2                	mov    %eax,%edx
f012fcde:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012fce4:	01 d0                	add    %edx,%eax
f012fce6:	48                   	dec    %eax
f012fce7:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012fced:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fcf3:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcf8:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012fcfe:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fd04:	29 d0                	sub    %edx,%eax
f012fd06:	01 c8                	add    %ecx,%eax
f012fd08:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fd0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd11:	39 c2                	cmp    %eax,%edx
f012fd13:	74 17                	je     f012fd2c <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fd15:	83 ec 04             	sub    $0x4,%esp
f012fd18:	68 c8 ce 13 f0       	push   $0xf013cec8
f012fd1d:	68 d3 12 00 00       	push   $0x12d3
f012fd22:	68 1a b6 13 f0       	push   $0xf013b61a
f012fd27:	e8 d9 04 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fd2c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd2f:	e8 73 d1 fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012fd34:	29 c3                	sub    %eax,%ebx
f012fd36:	89 d8                	mov    %ebx,%eax
f012fd38:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fd3d:	74 17                	je     f012fd56 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd3f:	83 ec 04             	sub    $0x4,%esp
f012fd42:	68 30 cd 13 f0       	push   $0xf013cd30
f012fd47:	68 d6 12 00 00       	push   $0x12d6
f012fd4c:	68 1a b6 13 f0       	push   $0xf013b61a
f012fd51:	e8 af 04 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fd56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd59:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fd5f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fd65:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fd6b:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fd72:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fd75:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fd7c:	eb 21                	jmp    f012fd9f <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fd7e:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fd84:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fd87:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fd8d:	01 c8                	add    %ecx,%eax
f012fd8f:	8a 00                	mov    (%eax),%al
f012fd91:	0f be c0             	movsbl %al,%eax
f012fd94:	01 d0                	add    %edx,%eax
f012fd96:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fd9c:	ff 45 d8             	incl   -0x28(%ebp)
f012fd9f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012fda5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fda8:	7d d4                	jge    f012fd7e <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012fdaa:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012fdb0:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fdb6:	42                   	inc    %edx
f012fdb7:	01 d2                	add    %edx,%edx
f012fdb9:	39 d0                	cmp    %edx,%eax
f012fdbb:	74 17                	je     f012fdd4 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fdbd:	83 ec 04             	sub    $0x4,%esp
f012fdc0:	68 60 ce 13 f0       	push   $0xf013ce60
f012fdc5:	68 e4 12 00 00       	push   $0x12e4
f012fdca:	68 1a b6 13 f0       	push   $0xf013b61a
f012fdcf:	e8 31 04 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fdd4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fdda:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fde0:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fde7:	00 00 00 
		sums[1] = 0;
f012fdea:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fdf1:	00 00 00 
		sums[2] = 0;
f012fdf4:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012fdfb:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fdfe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fe05:	eb 70                	jmp    f012fe77 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fe07:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fe0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe10:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe17:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe1d:	01 c8                	add    %ecx,%eax
f012fe1f:	8a 00                	mov    (%eax),%al
f012fe21:	0f be c0             	movsbl %al,%eax
f012fe24:	01 d0                	add    %edx,%eax
f012fe26:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fe2c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fe32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe35:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe42:	01 c8                	add    %ecx,%eax
f012fe44:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fe48:	98                   	cwtl   
f012fe49:	01 d0                	add    %edx,%eax
f012fe4b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012fe51:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012fe57:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe5a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe61:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe67:	01 c8                	add    %ecx,%eax
f012fe69:	8b 40 04             	mov    0x4(%eax),%eax
f012fe6c:	01 d0                	add    %edx,%eax
f012fe6e:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fe74:	ff 45 d8             	incl   -0x28(%ebp)
f012fe77:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fe7d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fe80:	7d 85                	jge    f012fe07 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fe82:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012fe88:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fe8e:	8d 50 01             	lea    0x1(%eax),%edx
f012fe91:	89 d0                	mov    %edx,%eax
f012fe93:	01 c0                	add    %eax,%eax
f012fe95:	01 d0                	add    %edx,%eax
f012fe97:	01 c0                	add    %eax,%eax
f012fe99:	01 d0                	add    %edx,%eax
f012fe9b:	39 c1                	cmp    %eax,%ecx
f012fe9d:	75 3a                	jne    f012fed9 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012fe9f:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012fea5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012feab:	8d 50 01             	lea    0x1(%eax),%edx
f012feae:	89 d0                	mov    %edx,%eax
f012feb0:	01 c0                	add    %eax,%eax
f012feb2:	01 d0                	add    %edx,%eax
f012feb4:	01 c0                	add    %eax,%eax
f012feb6:	01 d0                	add    %edx,%eax
f012feb8:	39 c1                	cmp    %eax,%ecx
f012feba:	75 1d                	jne    f012fed9 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012febc:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fec2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fec8:	8d 50 01             	lea    0x1(%eax),%edx
f012fecb:	89 d0                	mov    %edx,%eax
f012fecd:	01 c0                	add    %eax,%eax
f012fecf:	01 d0                	add    %edx,%eax
f012fed1:	01 c0                	add    %eax,%eax
f012fed3:	01 d0                	add    %edx,%eax
f012fed5:	39 c1                	cmp    %eax,%ecx
f012fed7:	74 17                	je     f012fef0 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fed9:	83 ec 04             	sub    $0x4,%esp
f012fedc:	68 60 ce 13 f0       	push   $0xf013ce60
f012fee1:	68 f6 12 00 00       	push   $0x12f6
f012fee6:	68 1a b6 13 f0       	push   $0xf013b61a
f012feeb:	e8 15 03 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fef0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fef6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012fefc:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ff03:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff06:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ff0d:	eb 24                	jmp    f012ff33 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012ff0f:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff18:	01 c0                	add    %eax,%eax
f012ff1a:	89 c1                	mov    %eax,%ecx
f012ff1c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ff22:	01 c8                	add    %ecx,%eax
f012ff24:	66 8b 00             	mov    (%eax),%ax
f012ff27:	98                   	cwtl   
f012ff28:	01 d0                	add    %edx,%eax
f012ff2a:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff30:	ff 45 d8             	incl   -0x28(%ebp)
f012ff33:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ff39:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ff3c:	7d d1                	jge    f012ff0f <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ff3e:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff44:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ff4a:	8d 48 01             	lea    0x1(%eax),%ecx
f012ff4d:	89 c8                	mov    %ecx,%eax
f012ff4f:	c1 e0 02             	shl    $0x2,%eax
f012ff52:	01 c8                	add    %ecx,%eax
f012ff54:	39 c2                	cmp    %eax,%edx
f012ff56:	74 17                	je     f012ff6f <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012ff58:	83 ec 04             	sub    $0x4,%esp
f012ff5b:	68 60 ce 13 f0       	push   $0xf013ce60
f012ff60:	68 00 13 00 00       	push   $0x1300
f012ff65:	68 1a b6 13 f0       	push   $0xf013b61a
f012ff6a:	e8 96 02 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ff6f:	e8 33 cf fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012ff74:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ff77:	e8 4c 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ff7c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ff82:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff88:	83 ec 08             	sub    $0x8,%esp
f012ff8b:	6a 00                	push   $0x0
f012ff8d:	50                   	push   %eax
f012ff8e:	e8 bc 7e fd ff       	call   f0107e4f <krealloc>
f012ff93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ff96:	e8 2d 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ff9b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ffa1:	74 17                	je     f012ffba <test_krealloc_BF+0x1f56>
			panic(
f012ffa3:	83 ec 04             	sub    $0x4,%esp
f012ffa6:	68 34 b6 13 f0       	push   $0xf013b634
f012ffab:	68 08 13 00 00       	push   $0x1308
f012ffb0:	68 1a b6 13 f0       	push   $0xf013b61a
f012ffb5:	e8 4b 02 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012ffba:	e8 e8 ce fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012ffbf:	89 c2                	mov    %eax,%edx
f012ffc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ffc4:	29 c2                	sub    %eax,%edx
f012ffc6:	89 d0                	mov    %edx,%eax
f012ffc8:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012ffcd:	74 17                	je     f012ffe6 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012ffcf:	83 ec 04             	sub    $0x4,%esp
f012ffd2:	68 f0 ca 13 f0       	push   $0xf013caf0
f012ffd7:	68 0a 13 00 00       	push   $0x130a
f012ffdc:	68 1a b6 13 f0       	push   $0xf013b61a
f012ffe1:	e8 1f 02 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012ffe6:	e8 bc ce fd ff       	call   f010cea7 <sys_calculate_free_frames>
f012ffeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ffee:	e8 d5 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fff3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012fff9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ffff:	83 ec 0c             	sub    $0xc,%esp
f0130002:	50                   	push   %eax
f0130003:	e8 52 7c fd ff       	call   f0107c5a <kfree>
f0130008:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f013000b:	e8 b8 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0130010:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130016:	74 17                	je     f013002f <test_krealloc_BF+0x1fcb>
			panic(
f0130018:	83 ec 04             	sub    $0x4,%esp
f013001b:	68 34 b6 13 f0       	push   $0xf013b634
f0130020:	68 12 13 00 00       	push   $0x1312
f0130025:	68 1a b6 13 f0       	push   $0xf013b61a
f013002a:	e8 d6 01 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f013002f:	e8 73 ce fd ff       	call   f010cea7 <sys_calculate_free_frames>
f0130034:	89 c2                	mov    %eax,%edx
f0130036:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130039:	29 c2                	sub    %eax,%edx
f013003b:	89 d0                	mov    %edx,%eax
f013003d:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0130042:	74 17                	je     f013005b <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130044:	83 ec 04             	sub    $0x4,%esp
f0130047:	68 f0 ca 13 f0       	push   $0xf013caf0
f013004c:	68 14 13 00 00       	push   $0x1314
f0130051:	68 1a b6 13 f0       	push   $0xf013b61a
f0130056:	e8 aa 01 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013005b:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0130062:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0130069:	eb 48                	jmp    f01300b3 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f013006b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f013006e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130073:	83 ec 04             	sub    $0x4,%esp
f0130076:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f013007c:	51                   	push   %ecx
f013007d:	52                   	push   %edx
f013007e:	50                   	push   %eax
f013007f:	e8 2d 6a fd ff       	call   f0106ab1 <get_page_table>
f0130084:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f0130087:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f013008d:	85 c0                	test   %eax,%eax
f013008f:	75 17                	jne    f01300a8 <test_krealloc_BF+0x2044>
					panic(
f0130091:	83 ec 04             	sub    $0x4,%esp
f0130094:	68 1c bf 13 f0       	push   $0xf013bf1c
f0130099:	68 21 13 00 00       	push   $0x1321
f013009e:	68 1a b6 13 f0       	push   $0xf013b61a
f01300a3:	e8 5d 01 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01300a8:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01300af:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01300b3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01300b7:	78 b2                	js     f013006b <test_krealloc_BF+0x2007>
f01300b9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01300bd:	7f 09                	jg     f01300c8 <test_krealloc_BF+0x2064>
f01300bf:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01300c6:	76 a3                	jbe    f013006b <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01300c8:	83 ec 0c             	sub    $0xc,%esp
f01300cb:	68 fe b7 13 f0       	push   $0xf013b7fe
f01300d0:	e8 39 0c fd ff       	call   f0100d0e <cprintf>
f01300d5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f01300d8:	83 ec 0c             	sub    $0xc,%esp
f01300db:	68 00 cf 13 f0       	push   $0xf013cf00
f01300e0:	e8 29 0c fd ff       	call   f0100d0e <cprintf>
f01300e5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01300e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01300ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01300f0:	5b                   	pop    %ebx
f01300f1:	5f                   	pop    %edi
f01300f2:	5d                   	pop    %ebp
f01300f3:	c3                   	ret    

f01300f4 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f01300f4:	55                   	push   %ebp
f01300f5:	89 e5                	mov    %esp,%ebp
f01300f7:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f01300fa:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f01300ff:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130104:	74 17                	je     f013011d <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130106:	83 ec 04             	sub    $0x4,%esp
f0130109:	68 40 cf 13 f0       	push   $0xf013cf40
f013010e:	68 39 13 00 00       	push   $0x1339
f0130113:	68 1a b6 13 f0       	push   $0xf013b61a
f0130118:	e8 e8 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f013011d:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0130122:	8b 15 04 ed 88 f0    	mov    0xf088ed04,%edx
f0130128:	4a                   	dec    %edx
f0130129:	39 d0                	cmp    %edx,%eax
f013012b:	74 17                	je     f0130144 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f013012d:	83 ec 04             	sub    $0x4,%esp
f0130130:	68 94 cf 13 f0       	push   $0xf013cf94
f0130135:	68 3f 13 00 00       	push   $0x133f
f013013a:	68 1a b6 13 f0       	push   $0xf013b61a
f013013f:	e8 c1 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130144:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0130149:	85 c0                	test   %eax,%eax
f013014b:	74 17                	je     f0130164 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f013014d:	83 ec 04             	sub    $0x4,%esp
f0130150:	68 d0 cf 13 f0       	push   $0xf013cfd0
f0130155:	68 45 13 00 00       	push   $0x1345
f013015a:	68 1a b6 13 f0       	push   $0xf013b61a
f013015f:	e8 a1 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0130164:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0130169:	83 f8 01             	cmp    $0x1,%eax
f013016c:	74 17                	je     f0130185 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f013016e:	83 ec 04             	sub    $0x4,%esp
f0130171:	68 08 d0 13 f0       	push   $0xf013d008
f0130176:	68 4b 13 00 00       	push   $0x134b
f013017b:	68 1a b6 13 f0       	push   $0xf013b61a
f0130180:	e8 80 00 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f0130185:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f013018a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f013018d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130191:	74 66                	je     f01301f9 <test_initialize_dyn_block_system+0x105>
f0130193:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130196:	8b 48 0c             	mov    0xc(%eax),%ecx
f0130199:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01301a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01301a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01301a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01301ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01301b3:	f7 75 ec             	divl   -0x14(%ebp)
f01301b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301b9:	29 d0                	sub    %edx,%eax
f01301bb:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01301c0:	29 c2                	sub    %eax,%edx
f01301c2:	89 d0                	mov    %edx,%eax
f01301c4:	39 c1                	cmp    %eax,%ecx
f01301c6:	75 31                	jne    f01301f9 <test_initialize_dyn_block_system+0x105>
f01301c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301cb:	8b 48 08             	mov    0x8(%eax),%ecx
f01301ce:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01301d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01301d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01301dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01301e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01301e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01301e8:	f7 75 e4             	divl   -0x1c(%ebp)
f01301eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01301ee:	29 d0                	sub    %edx,%eax
f01301f0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01301f5:	39 c1                	cmp    %eax,%ecx
f01301f7:	74 17                	je     f0130210 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f01301f9:	83 ec 04             	sub    $0x4,%esp
f01301fc:	68 40 d0 13 f0       	push   $0xf013d040
f0130201:	68 52 13 00 00       	push   $0x1352
f0130206:	68 1a b6 13 f0       	push   $0xf013b61a
f013020b:	e8 f5 ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0130210:	8b 45 14             	mov    0x14(%ebp),%eax
f0130213:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130216:	74 17                	je     f013022f <test_initialize_dyn_block_system+0x13b>
f0130218:	83 ec 04             	sub    $0x4,%esp
f013021b:	68 34 b6 13 f0       	push   $0xf013b634
f0130220:	68 56 13 00 00       	push   $0x1356
f0130225:	68 1a b6 13 f0       	push   $0xf013b61a
f013022a:	e8 d6 ff fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f013022f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130232:	2b 45 10             	sub    0x10(%ebp),%eax
f0130235:	3d a0 00 00 00       	cmp    $0xa0,%eax
f013023a:	74 1b                	je     f0130257 <test_initialize_dyn_block_system+0x163>
f013023c:	8b 45 08             	mov    0x8(%ebp),%eax
f013023f:	2b 45 10             	sub    0x10(%ebp),%eax
f0130242:	50                   	push   %eax
f0130243:	68 7c d0 13 f0       	push   $0xf013d07c
f0130248:	68 57 13 00 00       	push   $0x1357
f013024d:	68 1a b6 13 f0       	push   $0xf013b61a
f0130252:	e8 ae ff fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130257:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f013025e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130263:	83 ec 04             	sub    $0x4,%esp
f0130266:	6a 00                	push   $0x0
f0130268:	ff 75 f4             	pushl  -0xc(%ebp)
f013026b:	50                   	push   %eax
f013026c:	e8 e9 5f fe ff       	call   f011625a <CB>
f0130271:	83 c4 10             	add    $0x10,%esp
f0130274:	83 f8 01             	cmp    $0x1,%eax
f0130277:	75 35                	jne    f01302ae <test_initialize_dyn_block_system+0x1ba>
f0130279:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f013027e:	83 ec 04             	sub    $0x4,%esp
f0130281:	6a 01                	push   $0x1
f0130283:	ff 75 f4             	pushl  -0xc(%ebp)
f0130286:	50                   	push   %eax
f0130287:	e8 ce 5f fe ff       	call   f011625a <CB>
f013028c:	83 c4 10             	add    $0x10,%esp
f013028f:	83 f8 01             	cmp    $0x1,%eax
f0130292:	75 1a                	jne    f01302ae <test_initialize_dyn_block_system+0x1ba>
f0130294:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130299:	83 ec 04             	sub    $0x4,%esp
f013029c:	6a 02                	push   $0x2
f013029e:	ff 75 f4             	pushl  -0xc(%ebp)
f01302a1:	50                   	push   %eax
f01302a2:	e8 b3 5f fe ff       	call   f011625a <CB>
f01302a7:	83 c4 10             	add    $0x10,%esp
f01302aa:	85 c0                	test   %eax,%eax
f01302ac:	74 17                	je     f01302c5 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01302ae:	83 ec 04             	sub    $0x4,%esp
f01302b1:	68 c0 d0 13 f0       	push   $0xf013d0c0
f01302b6:	68 5f 13 00 00       	push   $0x135f
f01302bb:	68 1a b6 13 f0       	push   $0xf013b61a
f01302c0:	e8 40 ff fc ff       	call   f0100205 <_panic>

			a+=4096;
f01302c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f01302cc:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01302d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01302d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01302db:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01302de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01302e6:	f7 75 dc             	divl   -0x24(%ebp)
f01302e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302ec:	29 d0                	sub    %edx,%eax
f01302ee:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01302f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01302f6:	74 05                	je     f01302fd <test_initialize_dyn_block_system+0x209>
				break;
		}
f01302f8:	e9 61 ff ff ff       	jmp    f013025e <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f01302fd:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f01302fe:	83 ec 0c             	sub    $0xc,%esp
f0130301:	68 20 d1 13 f0       	push   $0xf013d120
f0130306:	e8 03 0a fd ff       	call   f0100d0e <cprintf>
f013030b:	83 c4 10             	add    $0x10,%esp
	return 0;
f013030e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130313:	c9                   	leave  
f0130314:	c3                   	ret    

f0130315 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130315:	55                   	push   %ebp
f0130316:	89 e5                	mov    %esp,%ebp
f0130318:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013031b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013031f:	77 07                	ja     f0130328 <nearest_pow2_ceil+0x13>
f0130321:	b8 01 00 00 00       	mov    $0x1,%eax
f0130326:	eb 20                	jmp    f0130348 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130328:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013032f:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130332:	eb 08                	jmp    f013033c <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130334:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130337:	01 c0                	add    %eax,%eax
f0130339:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f013033c:	d1 6d 08             	shrl   0x8(%ebp)
f013033f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130343:	75 ef                	jne    f0130334 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130345:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130348:	c9                   	leave  
f0130349:	c3                   	ret    

f013034a <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f013034a:	55                   	push   %ebp
f013034b:	89 e5                	mov    %esp,%ebp
f013034d:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130350:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130354:	77 07                	ja     f013035d <log2_ceil+0x13>
f0130356:	b8 01 00 00 00       	mov    $0x1,%eax
f013035b:	eb 1b                	jmp    f0130378 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f013035d:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130364:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130367:	eb 03                	jmp    f013036c <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f0130369:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f013036c:	d1 6d 08             	shrl   0x8(%ebp)
f013036f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130373:	75 f4                	jne    f0130369 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f0130375:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130378:	c9                   	leave  
f0130379:	c3                   	ret    

f013037a <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f013037a:	55                   	push   %ebp
f013037b:	89 e5                	mov    %esp,%ebp
f013037d:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0130380:	8b 45 08             	mov    0x8(%ebp),%eax
f0130383:	8b 00                	mov    (%eax),%eax
f0130385:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0130388:	8b 45 08             	mov    0x8(%ebp),%eax
f013038b:	8b 00                	mov    (%eax),%eax
f013038d:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0130390:	eb 52                	jmp    f01303e4 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0130392:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130395:	8b 00                	mov    (%eax),%eax
f0130397:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f013039a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013039d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303a0:	75 12                	jne    f01303b4 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01303a2:	83 ec 0c             	sub    $0xc,%esp
f01303a5:	68 78 d1 13 f0       	push   $0xf013d178
f01303aa:	e8 5f 09 fd ff       	call   f0100d0e <cprintf>
f01303af:	83 c4 10             	add    $0x10,%esp
			break;
f01303b2:	eb 3f                	jmp    f01303f3 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01303b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303b8:	74 38                	je     f01303f2 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01303ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303bd:	8b 00                	mov    (%eax),%eax
f01303bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01303c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303c8:	75 12                	jne    f01303dc <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01303ca:	83 ec 0c             	sub    $0xc,%esp
f01303cd:	68 94 d1 13 f0       	push   $0xf013d194
f01303d2:	e8 37 09 fd ff       	call   f0100d0e <cprintf>
f01303d7:	83 c4 10             	add    $0x10,%esp
			break;
f01303da:	eb 17                	jmp    f01303f3 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01303dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303df:	8b 00                	mov    (%eax),%eax
f01303e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01303e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01303e8:	74 09                	je     f01303f3 <detect_loop_in_FrameInfo_list+0x79>
f01303ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303ee:	75 a2                	jne    f0130392 <detect_loop_in_FrameInfo_list+0x18>
f01303f0:	eb 01                	jmp    f01303f3 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01303f2:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01303f3:	83 ec 0c             	sub    $0xc,%esp
f01303f6:	68 ab d1 13 f0       	push   $0xf013d1ab
f01303fb:	e8 0e 09 fd ff       	call   f0100d0e <cprintf>
f0130400:	83 c4 10             	add    $0x10,%esp
}
f0130403:	90                   	nop
f0130404:	c9                   	leave  
f0130405:	c3                   	ret    

f0130406 <scarce_memory>:

void scarce_memory()
{
f0130406:	55                   	push   %ebp
f0130407:	89 e5                	mov    %esp,%ebp
f0130409:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f013040c:	a1 f0 ec 88 f0       	mov    0xf088ecf0,%eax
f0130411:	ba 64 00 00 00       	mov    $0x64,%edx
f0130416:	29 c2                	sub    %eax,%edx
f0130418:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f013041d:	0f af c2             	imul   %edx,%eax
f0130420:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130425:	f7 e2                	mul    %edx
f0130427:	89 d0                	mov    %edx,%eax
f0130429:	c1 e8 05             	shr    $0x5,%eax
f013042c:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f013042f:	a1 f0 ec 88 f0       	mov    0xf088ecf0,%eax
f0130434:	ba 64 00 00 00       	mov    $0x64,%edx
f0130439:	29 c2                	sub    %eax,%edx
f013043b:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0130440:	89 d1                	mov    %edx,%ecx
f0130442:	0f af c8             	imul   %eax,%ecx
f0130445:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013044a:	f7 e1                	mul    %ecx
f013044c:	c1 ea 05             	shr    $0x5,%edx
f013044f:	89 d0                	mov    %edx,%eax
f0130451:	c1 e0 02             	shl    $0x2,%eax
f0130454:	01 d0                	add    %edx,%eax
f0130456:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013045d:	01 d0                	add    %edx,%eax
f013045f:	c1 e0 02             	shl    $0x2,%eax
f0130462:	29 c1                	sub    %eax,%ecx
f0130464:	89 ca                	mov    %ecx,%edx
f0130466:	85 d2                	test   %edx,%edx
f0130468:	74 03                	je     f013046d <scarce_memory+0x67>
		total_size_tobe_allocated++;
f013046a:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f013046d:	8b 15 10 ed 88 f0    	mov    0xf088ed10,%edx
f0130473:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f0130478:	29 c2                	sub    %eax,%edx
f013047a:	89 d0                	mov    %edx,%eax
f013047c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f013047f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130482:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0130485:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f0130488:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f013048f:	eb 12                	jmp    f01304a3 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f0130491:	83 ec 0c             	sub    $0xc,%esp
f0130494:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0130497:	50                   	push   %eax
f0130498:	e8 55 64 fd ff       	call   f01068f2 <allocate_frame>
f013049d:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01304a0:	ff 45 f0             	incl   -0x10(%ebp)
f01304a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304a6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01304a9:	76 e6                	jbe    f0130491 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01304ab:	90                   	nop
f01304ac:	c9                   	leave  
f01304ad:	c3                   	ret    

f01304ae <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01304ae:	55                   	push   %ebp
f01304af:	89 e5                	mov    %esp,%ebp
f01304b1:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01304b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01304bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01304c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01304c9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01304cd:	0f 85 d0 01 00 00    	jne    f01306a3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01304d3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01304da:	e9 de 00 00 00       	jmp    f01305bd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01304df:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01304e6:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01304eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01304ee:	c1 e2 04             	shl    $0x4,%edx
f01304f1:	01 d0                	add    %edx,%eax
f01304f3:	8b 00                	mov    (%eax),%eax
f01304f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01304f8:	e9 85 00 00 00       	jmp    f0130582 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f01304fd:	83 ec 0c             	sub    $0xc,%esp
f0130500:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130503:	e8 18 7c fd ff       	call   f0108120 <env_page_ws_get_size>
f0130508:	83 c4 10             	add    $0x10,%esp
f013050b:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013050e:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130513:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130519:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013051c:	0f af c2             	imul   %edx,%eax
f013051f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130524:	f7 e2                	mul    %edx
f0130526:	89 d0                	mov    %edx,%eax
f0130528:	c1 e8 05             	shr    $0x5,%eax
f013052b:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013052e:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130533:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130539:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013053c:	89 d1                	mov    %edx,%ecx
f013053e:	0f af c8             	imul   %eax,%ecx
f0130541:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130546:	f7 e1                	mul    %ecx
f0130548:	c1 ea 05             	shr    $0x5,%edx
f013054b:	89 d0                	mov    %edx,%eax
f013054d:	c1 e0 02             	shl    $0x2,%eax
f0130550:	01 d0                	add    %edx,%eax
f0130552:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130559:	01 d0                	add    %edx,%eax
f013055b:	c1 e0 02             	shl    $0x2,%eax
f013055e:	29 c1                	sub    %eax,%ecx
f0130560:	89 ca                	mov    %ecx,%edx
f0130562:	85 d2                	test   %edx,%edx
f0130564:	74 03                	je     f0130569 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130566:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0130569:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013056c:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f013056f:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130574:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130577:	c1 e2 04             	shl    $0x4,%edx
f013057a:	01 d0                	add    %edx,%eax
f013057c:	8b 40 08             	mov    0x8(%eax),%eax
f013057f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130582:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130587:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013058a:	c1 e2 04             	shl    $0x4,%edx
f013058d:	01 d0                	add    %edx,%eax
f013058f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130593:	74 08                	je     f013059d <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f0130595:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130598:	8b 52 44             	mov    0x44(%edx),%edx
f013059b:	eb 05                	jmp    f01305a2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f013059d:	ba 00 00 00 00       	mov    $0x0,%edx
f01305a2:	89 50 08             	mov    %edx,0x8(%eax)
f01305a5:	8b 40 08             	mov    0x8(%eax),%eax
f01305a8:	85 c0                	test   %eax,%eax
f01305aa:	0f 85 4d ff ff ff    	jne    f01304fd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01305b0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01305b4:	0f 85 43 ff ff ff    	jne    f01304fd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01305ba:	ff 45 e8             	incl   -0x18(%ebp)
f01305bd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01305c2:	0f b6 c0             	movzbl %al,%eax
f01305c5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01305c8:	0f 8f 11 ff ff ff    	jg     f01304df <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f01305ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01305d5:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f01305da:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01305dd:	eb 19                	jmp    f01305f8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f01305df:	83 ec 0c             	sub    $0xc,%esp
f01305e2:	ff 75 dc             	pushl  -0x24(%ebp)
f01305e5:	e8 36 7b fd ff       	call   f0108120 <env_page_ws_get_size>
f01305ea:	83 c4 10             	add    $0x10,%esp
f01305ed:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01305f0:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01305f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01305f8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01305fc:	74 08                	je     f0130606 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f01305fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130601:	8b 40 44             	mov    0x44(%eax),%eax
f0130604:	eb 05                	jmp    f013060b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130606:	b8 00 00 00 00       	mov    $0x0,%eax
f013060b:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0130610:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0130615:	85 c0                	test   %eax,%eax
f0130617:	75 c6                	jne    f01305df <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130619:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013061d:	75 c0                	jne    f01305df <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f013061f:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130624:	85 c0                	test   %eax,%eax
f0130626:	0f 84 ec 00 00 00    	je     f0130718 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f013062c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130631:	83 ec 0c             	sub    $0xc,%esp
f0130634:	50                   	push   %eax
f0130635:	e8 e6 7a fd ff       	call   f0108120 <env_page_ws_get_size>
f013063a:	83 c4 10             	add    $0x10,%esp
f013063d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130640:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130645:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013064b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013064e:	0f af c2             	imul   %edx,%eax
f0130651:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130656:	f7 e2                	mul    %edx
f0130658:	89 d0                	mov    %edx,%eax
f013065a:	c1 e8 05             	shr    $0x5,%eax
f013065d:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130660:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130665:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013066b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013066e:	89 d1                	mov    %edx,%ecx
f0130670:	0f af c8             	imul   %eax,%ecx
f0130673:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130678:	f7 e1                	mul    %ecx
f013067a:	c1 ea 05             	shr    $0x5,%edx
f013067d:	89 d0                	mov    %edx,%eax
f013067f:	c1 e0 02             	shl    $0x2,%eax
f0130682:	01 d0                	add    %edx,%eax
f0130684:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013068b:	01 d0                	add    %edx,%eax
f013068d:	c1 e0 02             	shl    $0x2,%eax
f0130690:	29 c1                	sub    %eax,%ecx
f0130692:	89 ca                	mov    %ecx,%edx
f0130694:	85 d2                	test   %edx,%edx
f0130696:	74 03                	je     f013069b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130698:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f013069b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013069e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01306a1:	eb 75                	jmp    f0130718 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01306a3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306a8:	83 ec 0c             	sub    $0xc,%esp
f01306ab:	50                   	push   %eax
f01306ac:	e8 6f 7a fd ff       	call   f0108120 <env_page_ws_get_size>
f01306b1:	83 c4 10             	add    $0x10,%esp
f01306b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01306b7:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306bc:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01306c5:	0f af c2             	imul   %edx,%eax
f01306c8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01306cd:	f7 e2                	mul    %edx
f01306cf:	89 d0                	mov    %edx,%eax
f01306d1:	c1 e8 05             	shr    $0x5,%eax
f01306d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01306d7:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306dc:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01306e5:	89 d1                	mov    %edx,%ecx
f01306e7:	0f af c8             	imul   %eax,%ecx
f01306ea:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01306ef:	f7 e1                	mul    %ecx
f01306f1:	c1 ea 05             	shr    $0x5,%edx
f01306f4:	89 d0                	mov    %edx,%eax
f01306f6:	c1 e0 02             	shl    $0x2,%eax
f01306f9:	01 d0                	add    %edx,%eax
f01306fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130702:	01 d0                	add    %edx,%eax
f0130704:	c1 e0 02             	shl    $0x2,%eax
f0130707:	29 c1                	sub    %eax,%ecx
f0130709:	89 ca                	mov    %ecx,%edx
f013070b:	85 d2                	test   %edx,%edx
f013070d:	74 03                	je     f0130712 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f013070f:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130712:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130715:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013071b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013071e:	01 c2                	add    %eax,%edx
f0130720:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130723:	01 d0                	add    %edx,%eax
}
f0130725:	c9                   	leave  
f0130726:	c3                   	ret    

f0130727 <schenv>:


void schenv()
{
f0130727:	55                   	push   %ebp
f0130728:	89 e5                	mov    %esp,%ebp
f013072a:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f013072d:	c6 05 a8 ed 88 f0 00 	movb   $0x0,0xf088eda8
	__ne = NULL;
f0130734:	c7 05 38 ed 88 f0 00 	movl   $0x0,0xf088ed38
f013073b:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f013073e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130745:	eb 3f                	jmp    f0130786 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130747:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f013074c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013074f:	c1 e2 04             	shl    $0x4,%edx
f0130752:	01 d0                	add    %edx,%eax
f0130754:	83 ec 0c             	sub    $0xc,%esp
f0130757:	50                   	push   %eax
f0130758:	e8 28 3d fd ff       	call   f0104485 <queue_size>
f013075d:	83 c4 10             	add    $0x10,%esp
f0130760:	85 c0                	test   %eax,%eax
f0130762:	74 1f                	je     f0130783 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130764:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130769:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013076c:	c1 e2 04             	shl    $0x4,%edx
f013076f:	01 d0                	add    %edx,%eax
f0130771:	8b 40 04             	mov    0x4(%eax),%eax
f0130774:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
			__nl = i;
f0130779:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013077c:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
			break;
f0130781:	eb 10                	jmp    f0130793 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130783:	ff 45 f4             	incl   -0xc(%ebp)
f0130786:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f013078b:	0f b6 c0             	movzbl %al,%eax
f013078e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130791:	7f b4                	jg     f0130747 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130793:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130798:	85 c0                	test   %eax,%eax
f013079a:	0f 84 86 00 00 00    	je     f0130826 <schenv+0xff>
	{
		if (__ne != NULL)
f01307a0:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01307a5:	85 c0                	test   %eax,%eax
f01307a7:	74 4b                	je     f01307f4 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01307a9:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307ae:	0f b6 c0             	movzbl %al,%eax
f01307b1:	8d 50 01             	lea    0x1(%eax),%edx
f01307b4:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f01307b9:	0f b6 c0             	movzbl %al,%eax
f01307bc:	39 c2                	cmp    %eax,%edx
f01307be:	7d 66                	jge    f0130826 <schenv+0xff>
			{
				__ne = curenv;
f01307c0:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01307c5:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01307ca:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307cf:	0f b6 c0             	movzbl %al,%eax
f01307d2:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f01307d8:	0f b6 d2             	movzbl %dl,%edx
f01307db:	4a                   	dec    %edx
f01307dc:	39 d0                	cmp    %edx,%eax
f01307de:	7d 08                	jge    f01307e8 <schenv+0xc1>
f01307e0:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307e5:	40                   	inc    %eax
f01307e6:	eb 05                	jmp    f01307ed <schenv+0xc6>
f01307e8:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307ed:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01307f2:	eb 32                	jmp    f0130826 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f01307f4:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01307f9:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01307fe:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130803:	0f b6 c0             	movzbl %al,%eax
f0130806:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f013080c:	0f b6 d2             	movzbl %dl,%edx
f013080f:	4a                   	dec    %edx
f0130810:	39 d0                	cmp    %edx,%eax
f0130812:	7d 08                	jge    f013081c <schenv+0xf5>
f0130814:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130819:	40                   	inc    %eax
f013081a:	eb 05                	jmp    f0130821 <schenv+0xfa>
f013081c:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130821:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
		}
	}
}
f0130826:	90                   	nop
f0130827:	c9                   	leave  
f0130828:	c3                   	ret    

f0130829 <chksch>:

void chksch(uint8 onoff)
{
f0130829:	55                   	push   %ebp
f013082a:	89 e5                	mov    %esp,%ebp
f013082c:	83 ec 04             	sub    $0x4,%esp
f013082f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130832:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130835:	c7 05 94 ed 88 f0 00 	movl   $0x0,0xf088ed94
f013083c:	00 00 00 
	__ne = NULL;
f013083f:	c7 05 38 ed 88 f0 00 	movl   $0x0,0xf088ed38
f0130846:	00 00 00 
	__pl = 0 ;
f0130849:	c6 05 e0 ec 88 f0 00 	movb   $0x0,0xf088ece0
	__nl = 0 ;
f0130850:	c6 05 a8 ed 88 f0 00 	movb   $0x0,0xf088eda8
	__chkstatus = onoff;
f0130857:	8a 45 fc             	mov    -0x4(%ebp),%al
f013085a:	a2 34 ed 88 f0       	mov    %al,0xf088ed34
}
f013085f:	90                   	nop
f0130860:	c9                   	leave  
f0130861:	c3                   	ret    

f0130862 <chk1>:
void chk1()
{
f0130862:	55                   	push   %ebp
f0130863:	89 e5                	mov    %esp,%ebp
f0130865:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130868:	a0 34 ed 88 f0       	mov    0xf088ed34,%al
f013086d:	84 c0                	test   %al,%al
f013086f:	74 2b                	je     f013089c <chk1+0x3a>
		return ;
	__pe = curenv;
f0130871:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130876:	a3 94 ed 88 f0       	mov    %eax,0xf088ed94
	__pl = __nl ;
f013087b:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f0130880:	a2 e0 ec 88 f0       	mov    %al,0xf088ece0
	if (__pe == NULL)
f0130885:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f013088a:	85 c0                	test   %eax,%eax
f013088c:	75 07                	jne    f0130895 <chk1+0x33>
	{
		__pl = 0;
f013088e:	c6 05 e0 ec 88 f0 00 	movb   $0x0,0xf088ece0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130895:	e8 8d fe ff ff       	call   f0130727 <schenv>
f013089a:	eb 01                	jmp    f013089d <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f013089c:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f013089d:	c9                   	leave  
f013089e:	c3                   	ret    

f013089f <chk2>:
void chk2(struct Env* __se)
{
f013089f:	55                   	push   %ebp
f01308a0:	89 e5                	mov    %esp,%ebp
f01308a2:	53                   	push   %ebx
f01308a3:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01308a6:	a0 34 ed 88 f0       	mov    0xf088ed34,%al
f01308ab:	84 c0                	test   %al,%al
f01308ad:	0f 84 43 02 00 00    	je     f0130af6 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01308b3:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01308b8:	39 45 08             	cmp    %eax,0x8(%ebp)
f01308bb:	74 19                	je     f01308d6 <chk2+0x37>
f01308bd:	68 c5 d1 13 f0       	push   $0xf013d1c5
f01308c2:	68 d2 d1 13 f0       	push   $0xf013d1d2
f01308c7:	68 c0 00 00 00       	push   $0xc0
f01308cc:	68 e7 d1 13 f0       	push   $0xf013d1e7
f01308d1:	e8 e5 f9 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01308d6:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01308db:	85 c0                	test   %eax,%eax
f01308dd:	0f 84 25 01 00 00    	je     f0130a08 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01308e3:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f01308e9:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f01308ee:	0f b6 c0             	movzbl %al,%eax
f01308f1:	01 d0                	add    %edx,%eax
f01308f3:	8a 00                	mov    (%eax),%al
f01308f5:	0f b6 d8             	movzbl %al,%ebx
f01308f8:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01308fd:	99                   	cltd   
f01308fe:	f7 fb                	idiv   %ebx
f0130900:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130906:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f013090c:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f0130911:	0f b6 c0             	movzbl %al,%eax
f0130914:	01 d0                	add    %edx,%eax
f0130916:	8a 00                	mov    (%eax),%al
f0130918:	0f b6 d8             	movzbl %al,%ebx
f013091b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130920:	99                   	cltd   
f0130921:	f7 fb                	idiv   %ebx
f0130923:	89 c3                	mov    %eax,%ebx
f0130925:	89 c8                	mov    %ecx,%eax
f0130927:	99                   	cltd   
f0130928:	f7 fb                	idiv   %ebx
f013092a:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f013092e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130932:	83 e0 01             	and    $0x1,%eax
f0130935:	66 85 c0             	test   %ax,%ax
f0130938:	74 07                	je     f0130941 <chk2+0xa2>
f013093a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013093e:	40                   	inc    %eax
f013093f:	eb 04                	jmp    f0130945 <chk2+0xa6>
f0130941:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130945:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130949:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f013094d:	89 d0                	mov    %edx,%eax
f013094f:	c1 e0 02             	shl    $0x2,%eax
f0130952:	01 d0                	add    %edx,%eax
f0130954:	01 c0                	add    %eax,%eax
f0130956:	01 d0                	add    %edx,%eax
f0130958:	c1 e0 02             	shl    $0x2,%eax
f013095b:	01 d0                	add    %edx,%eax
f013095d:	01 c0                	add    %eax,%eax
f013095f:	89 c1                	mov    %eax,%ecx
f0130961:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130966:	f7 e9                	imul   %ecx
f0130968:	c1 fa 05             	sar    $0x5,%edx
f013096b:	89 c8                	mov    %ecx,%eax
f013096d:	c1 f8 1f             	sar    $0x1f,%eax
f0130970:	29 c2                	sub    %eax,%edx
f0130972:	89 d0                	mov    %edx,%eax
f0130974:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130978:	e8 d9 39 fd ff       	call   f0104356 <kclock_read_cnt0>
f013097d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130981:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130985:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130989:	76 0a                	jbe    f0130995 <chk2+0xf6>
f013098b:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013098f:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130993:	76 19                	jbe    f01309ae <chk2+0x10f>
f0130995:	68 00 d2 13 f0       	push   $0xf013d200
f013099a:	68 d2 d1 13 f0       	push   $0xf013d1d2
f013099f:	68 ca 00 00 00       	push   $0xca
f01309a4:	68 e7 d1 13 f0       	push   $0xf013d1e7
f01309a9:	e8 0d f9 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01309ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01309b5:	eb 44                	jmp    f01309fb <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01309b7:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01309bc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01309bf:	89 c2                	mov    %eax,%edx
f01309c1:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01309c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01309c9:	c1 e1 04             	shl    $0x4,%ecx
f01309cc:	01 c8                	add    %ecx,%eax
f01309ce:	83 ec 08             	sub    $0x8,%esp
f01309d1:	52                   	push   %edx
f01309d2:	50                   	push   %eax
f01309d3:	e8 c7 3c fd ff       	call   f010469f <find_env_in_queue>
f01309d8:	83 c4 10             	add    $0x10,%esp
f01309db:	85 c0                	test   %eax,%eax
f01309dd:	74 19                	je     f01309f8 <chk2+0x159>
f01309df:	68 24 d2 13 f0       	push   $0xf013d224
f01309e4:	68 d2 d1 13 f0       	push   $0xf013d1d2
f01309e9:	68 ce 00 00 00       	push   $0xce
f01309ee:	68 e7 d1 13 f0       	push   $0xf013d1e7
f01309f3:	e8 c3 f8 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01309f8:	ff 45 f4             	incl   -0xc(%ebp)
f01309fb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0130a00:	0f b6 c0             	movzbl %al,%eax
f0130a03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a06:	7f af                	jg     f01309b7 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130a08:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130a0d:	85 c0                	test   %eax,%eax
f0130a0f:	0f 84 e2 00 00 00    	je     f0130af7 <chk2+0x258>
f0130a15:	8b 15 94 ed 88 f0    	mov    0xf088ed94,%edx
f0130a1b:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f0130a20:	39 c2                	cmp    %eax,%edx
f0130a22:	0f 84 cf 00 00 00    	je     f0130af7 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130a28:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a2d:	0f b6 c0             	movzbl %al,%eax
f0130a30:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f0130a36:	0f b6 d2             	movzbl %dl,%edx
f0130a39:	4a                   	dec    %edx
f0130a3a:	39 d0                	cmp    %edx,%eax
f0130a3c:	74 08                	je     f0130a46 <chk2+0x1a7>
f0130a3e:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a43:	40                   	inc    %eax
f0130a44:	eb 05                	jmp    f0130a4b <chk2+0x1ac>
f0130a46:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a4b:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130a4e:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130a53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130a56:	89 c2                	mov    %eax,%edx
f0130a58:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130a5d:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130a61:	c1 e1 04             	shl    $0x4,%ecx
f0130a64:	01 c8                	add    %ecx,%eax
f0130a66:	83 ec 08             	sub    $0x8,%esp
f0130a69:	52                   	push   %edx
f0130a6a:	50                   	push   %eax
f0130a6b:	e8 2f 3c fd ff       	call   f010469f <find_env_in_queue>
f0130a70:	83 c4 10             	add    $0x10,%esp
f0130a73:	85 c0                	test   %eax,%eax
f0130a75:	75 19                	jne    f0130a90 <chk2+0x1f1>
f0130a77:	68 64 d2 13 f0       	push   $0xf013d264
f0130a7c:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130a81:	68 d4 00 00 00       	push   $0xd4
f0130a86:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130a8b:	e8 2b f8 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130a90:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130a97:	eb 4e                	jmp    f0130ae7 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130a99:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130a9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130aa0:	74 41                	je     f0130ae3 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130aa2:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130aa7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130aaa:	89 c2                	mov    %eax,%edx
f0130aac:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130ab1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130ab4:	c1 e1 04             	shl    $0x4,%ecx
f0130ab7:	01 c8                	add    %ecx,%eax
f0130ab9:	83 ec 08             	sub    $0x8,%esp
f0130abc:	52                   	push   %edx
f0130abd:	50                   	push   %eax
f0130abe:	e8 dc 3b fd ff       	call   f010469f <find_env_in_queue>
f0130ac3:	83 c4 10             	add    $0x10,%esp
f0130ac6:	85 c0                	test   %eax,%eax
f0130ac8:	74 1a                	je     f0130ae4 <chk2+0x245>
f0130aca:	68 a8 d2 13 f0       	push   $0xf013d2a8
f0130acf:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130ad4:	68 d8 00 00 00       	push   $0xd8
f0130ad9:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130ade:	e8 d8 f7 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130ae3:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130ae4:	ff 45 f0             	incl   -0x10(%ebp)
f0130ae7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0130aec:	0f b6 c0             	movzbl %al,%eax
f0130aef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130af2:	7f a5                	jg     f0130a99 <chk2+0x1fa>
f0130af4:	eb 01                	jmp    f0130af7 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130af6:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130af7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130afa:	c9                   	leave  
f0130afb:	c3                   	ret    

f0130afc <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130afc:	55                   	push   %ebp
f0130afd:	89 e5                	mov    %esp,%ebp
f0130aff:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b09:	eb 40                	jmp    f0130b4b <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b0e:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130b14:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130b19:	83 ec 08             	sub    $0x8,%esp
f0130b1c:	52                   	push   %edx
f0130b1d:	50                   	push   %eax
f0130b1e:	e8 9b 01 00 00       	call   f0130cbe <check_va2pa>
f0130b23:	83 c4 10             	add    $0x10,%esp
f0130b26:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130b29:	74 19                	je     f0130b44 <check_boot_pgdir+0x48>
f0130b2b:	68 e8 d2 13 f0       	push   $0xf013d2e8
f0130b30:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130b35:	68 fa 00 00 00       	push   $0xfa
f0130b3a:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130b3f:	e8 c1 f6 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130b44:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b4e:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130b54:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0130b59:	39 c2                	cmp    %eax,%edx
f0130b5b:	72 ae                	jb     f0130b0b <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130b5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b64:	eb 74                	jmp    f0130bda <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b69:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130b6f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130b74:	83 ec 08             	sub    $0x8,%esp
f0130b77:	52                   	push   %edx
f0130b78:	50                   	push   %eax
f0130b79:	e8 40 01 00 00       	call   f0130cbe <check_va2pa>
f0130b7e:	83 c4 10             	add    $0x10,%esp
f0130b81:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130b88:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130b8f:	77 17                	ja     f0130ba8 <check_boot_pgdir+0xac>
f0130b91:	ff 75 f0             	pushl  -0x10(%ebp)
f0130b94:	68 20 d3 13 f0       	push   $0xf013d320
f0130b99:	68 04 01 00 00       	push   $0x104
f0130b9e:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130ba3:	e8 5d f6 fc ff       	call   f0100205 <_panic>
f0130ba8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130bab:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130bb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bb4:	01 ca                	add    %ecx,%edx
f0130bb6:	39 d0                	cmp    %edx,%eax
f0130bb8:	74 19                	je     f0130bd3 <check_boot_pgdir+0xd7>
f0130bba:	68 54 d3 13 f0       	push   $0xf013d354
f0130bbf:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130bc4:	68 04 01 00 00       	push   $0x104
f0130bc9:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130bce:	e8 32 f6 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130bd3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130bda:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130be1:	76 83                	jbe    f0130b66 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130be3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130bea:	e9 af 00 00 00       	jmp    f0130c9e <check_boot_pgdir+0x1a2>
		switch (i) {
f0130bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bf2:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130bf7:	74 11                	je     f0130c0a <check_boot_pgdir+0x10e>
f0130bf9:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130bfe:	72 36                	jb     f0130c36 <check_boot_pgdir+0x13a>
f0130c00:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130c05:	83 f8 02             	cmp    $0x2,%eax
f0130c08:	77 2c                	ja     f0130c36 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130c0a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c12:	c1 e2 02             	shl    $0x2,%edx
f0130c15:	01 d0                	add    %edx,%eax
f0130c17:	8b 00                	mov    (%eax),%eax
f0130c19:	85 c0                	test   %eax,%eax
f0130c1b:	75 7a                	jne    f0130c97 <check_boot_pgdir+0x19b>
f0130c1d:	68 d6 d3 13 f0       	push   $0xf013d3d6
f0130c22:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130c27:	68 0f 01 00 00       	push   $0x10f
f0130c2c:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130c31:	e8 cf f5 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130c36:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130c3d:	76 2c                	jbe    f0130c6b <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130c3f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c47:	c1 e2 02             	shl    $0x2,%edx
f0130c4a:	01 d0                	add    %edx,%eax
f0130c4c:	8b 00                	mov    (%eax),%eax
f0130c4e:	85 c0                	test   %eax,%eax
f0130c50:	75 48                	jne    f0130c9a <check_boot_pgdir+0x19e>
f0130c52:	68 d6 d3 13 f0       	push   $0xf013d3d6
f0130c57:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130c5c:	68 13 01 00 00       	push   $0x113
f0130c61:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130c66:	e8 9a f5 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130c6b:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c73:	c1 e2 02             	shl    $0x2,%edx
f0130c76:	01 d0                	add    %edx,%eax
f0130c78:	8b 00                	mov    (%eax),%eax
f0130c7a:	85 c0                	test   %eax,%eax
f0130c7c:	74 1c                	je     f0130c9a <check_boot_pgdir+0x19e>
f0130c7e:	68 ec d3 13 f0       	push   $0xf013d3ec
f0130c83:	68 d2 d1 13 f0       	push   $0xf013d1d2
f0130c88:	68 15 01 00 00       	push   $0x115
f0130c8d:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130c92:	e8 6e f5 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130c97:	90                   	nop
f0130c98:	eb 01                	jmp    f0130c9b <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130c9a:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130c9b:	ff 45 f4             	incl   -0xc(%ebp)
f0130c9e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130ca5:	0f 86 44 ff ff ff    	jbe    f0130bef <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130cab:	83 ec 0c             	sub    $0xc,%esp
f0130cae:	68 08 d4 13 f0       	push   $0xf013d408
f0130cb3:	e8 56 00 fd ff       	call   f0100d0e <cprintf>
f0130cb8:	83 c4 10             	add    $0x10,%esp
}
f0130cbb:	90                   	nop
f0130cbc:	c9                   	leave  
f0130cbd:	c3                   	ret    

f0130cbe <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130cbe:	55                   	push   %ebp
f0130cbf:	89 e5                	mov    %esp,%ebp
f0130cc1:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130cc7:	c1 e8 16             	shr    $0x16,%eax
f0130cca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130cd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cd4:	01 d0                	add    %edx,%eax
f0130cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cdc:	8b 00                	mov    (%eax),%eax
f0130cde:	83 e0 01             	and    $0x1,%eax
f0130ce1:	85 c0                	test   %eax,%eax
f0130ce3:	75 0a                	jne    f0130cef <check_va2pa+0x31>
		return ~0;
f0130ce5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130cea:	e9 87 00 00 00       	jmp    f0130d76 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cf2:	8b 00                	mov    (%eax),%eax
f0130cf4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130cf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130cfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130cff:	c1 e8 0c             	shr    $0xc,%eax
f0130d02:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130d05:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0130d0a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130d0d:	72 17                	jb     f0130d26 <check_va2pa+0x68>
f0130d0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0130d12:	68 28 d4 13 f0       	push   $0xf013d428
f0130d17:	68 2b 01 00 00       	push   $0x12b
f0130d1c:	68 e7 d1 13 f0       	push   $0xf013d1e7
f0130d21:	e8 df f4 fc ff       	call   f0100205 <_panic>
f0130d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d29:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130d2e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130d31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d34:	c1 e8 0c             	shr    $0xc,%eax
f0130d37:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130d3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130d46:	01 d0                	add    %edx,%eax
f0130d48:	8b 00                	mov    (%eax),%eax
f0130d4a:	83 e0 01             	and    $0x1,%eax
f0130d4d:	85 c0                	test   %eax,%eax
f0130d4f:	75 07                	jne    f0130d58 <check_va2pa+0x9a>
		return ~0;
f0130d51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130d56:	eb 1e                	jmp    f0130d76 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130d58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d5b:	c1 e8 0c             	shr    $0xc,%eax
f0130d5e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130d63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130d6d:	01 d0                	add    %edx,%eax
f0130d6f:	8b 00                	mov    (%eax),%eax
f0130d71:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130d76:	c9                   	leave  
f0130d77:	c3                   	ret    

f0130d78 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130d78:	55                   	push   %ebp
f0130d79:	89 e5                	mov    %esp,%ebp
f0130d7b:	53                   	push   %ebx
f0130d7c:	83 ec 14             	sub    $0x14,%esp
f0130d7f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d82:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d85:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d88:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130d8b:	8b 45 18             	mov    0x18(%ebp),%eax
f0130d8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0130d93:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130d96:	77 55                	ja     f0130ded <printnum+0x75>
f0130d98:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130d9b:	72 05                	jb     f0130da2 <printnum+0x2a>
f0130d9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130da0:	77 4b                	ja     f0130ded <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130da2:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130da5:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130da8:	8b 45 18             	mov    0x18(%ebp),%eax
f0130dab:	ba 00 00 00 00       	mov    $0x0,%edx
f0130db0:	52                   	push   %edx
f0130db1:	50                   	push   %eax
f0130db2:	ff 75 f4             	pushl  -0xc(%ebp)
f0130db5:	ff 75 f0             	pushl  -0x10(%ebp)
f0130db8:	e8 0b 28 00 00       	call   f01335c8 <__udivdi3>
f0130dbd:	83 c4 10             	add    $0x10,%esp
f0130dc0:	83 ec 04             	sub    $0x4,%esp
f0130dc3:	ff 75 20             	pushl  0x20(%ebp)
f0130dc6:	53                   	push   %ebx
f0130dc7:	ff 75 18             	pushl  0x18(%ebp)
f0130dca:	52                   	push   %edx
f0130dcb:	50                   	push   %eax
f0130dcc:	ff 75 0c             	pushl  0xc(%ebp)
f0130dcf:	ff 75 08             	pushl  0x8(%ebp)
f0130dd2:	e8 a1 ff ff ff       	call   f0130d78 <printnum>
f0130dd7:	83 c4 20             	add    $0x20,%esp
f0130dda:	eb 1a                	jmp    f0130df6 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130ddc:	83 ec 08             	sub    $0x8,%esp
f0130ddf:	ff 75 0c             	pushl  0xc(%ebp)
f0130de2:	ff 75 20             	pushl  0x20(%ebp)
f0130de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130de8:	ff d0                	call   *%eax
f0130dea:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130ded:	ff 4d 1c             	decl   0x1c(%ebp)
f0130df0:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130df4:	7f e6                	jg     f0130ddc <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130df6:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130df9:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130e04:	53                   	push   %ebx
f0130e05:	51                   	push   %ecx
f0130e06:	52                   	push   %edx
f0130e07:	50                   	push   %eax
f0130e08:	e8 cb 28 00 00       	call   f01336d8 <__umoddi3>
f0130e0d:	83 c4 10             	add    $0x10,%esp
f0130e10:	05 74 d6 13 f0       	add    $0xf013d674,%eax
f0130e15:	8a 00                	mov    (%eax),%al
f0130e17:	0f be c0             	movsbl %al,%eax
f0130e1a:	83 ec 08             	sub    $0x8,%esp
f0130e1d:	ff 75 0c             	pushl  0xc(%ebp)
f0130e20:	50                   	push   %eax
f0130e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e24:	ff d0                	call   *%eax
f0130e26:	83 c4 10             	add    $0x10,%esp
}
f0130e29:	90                   	nop
f0130e2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130e2d:	c9                   	leave  
f0130e2e:	c3                   	ret    

f0130e2f <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130e2f:	55                   	push   %ebp
f0130e30:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130e32:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130e36:	7e 1c                	jle    f0130e54 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130e38:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e3b:	8b 00                	mov    (%eax),%eax
f0130e3d:	8d 50 08             	lea    0x8(%eax),%edx
f0130e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e43:	89 10                	mov    %edx,(%eax)
f0130e45:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e48:	8b 00                	mov    (%eax),%eax
f0130e4a:	83 e8 08             	sub    $0x8,%eax
f0130e4d:	8b 50 04             	mov    0x4(%eax),%edx
f0130e50:	8b 00                	mov    (%eax),%eax
f0130e52:	eb 40                	jmp    f0130e94 <getuint+0x65>
	else if (lflag)
f0130e54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130e58:	74 1e                	je     f0130e78 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130e5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e5d:	8b 00                	mov    (%eax),%eax
f0130e5f:	8d 50 04             	lea    0x4(%eax),%edx
f0130e62:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e65:	89 10                	mov    %edx,(%eax)
f0130e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e6a:	8b 00                	mov    (%eax),%eax
f0130e6c:	83 e8 04             	sub    $0x4,%eax
f0130e6f:	8b 00                	mov    (%eax),%eax
f0130e71:	ba 00 00 00 00       	mov    $0x0,%edx
f0130e76:	eb 1c                	jmp    f0130e94 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130e78:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e7b:	8b 00                	mov    (%eax),%eax
f0130e7d:	8d 50 04             	lea    0x4(%eax),%edx
f0130e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e83:	89 10                	mov    %edx,(%eax)
f0130e85:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e88:	8b 00                	mov    (%eax),%eax
f0130e8a:	83 e8 04             	sub    $0x4,%eax
f0130e8d:	8b 00                	mov    (%eax),%eax
f0130e8f:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130e94:	5d                   	pop    %ebp
f0130e95:	c3                   	ret    

f0130e96 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130e96:	55                   	push   %ebp
f0130e97:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130e99:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130e9d:	7e 1c                	jle    f0130ebb <getint+0x25>
		return va_arg(*ap, long long);
f0130e9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea2:	8b 00                	mov    (%eax),%eax
f0130ea4:	8d 50 08             	lea    0x8(%eax),%edx
f0130ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eaa:	89 10                	mov    %edx,(%eax)
f0130eac:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eaf:	8b 00                	mov    (%eax),%eax
f0130eb1:	83 e8 08             	sub    $0x8,%eax
f0130eb4:	8b 50 04             	mov    0x4(%eax),%edx
f0130eb7:	8b 00                	mov    (%eax),%eax
f0130eb9:	eb 38                	jmp    f0130ef3 <getint+0x5d>
	else if (lflag)
f0130ebb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130ebf:	74 1a                	je     f0130edb <getint+0x45>
		return va_arg(*ap, long);
f0130ec1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ec4:	8b 00                	mov    (%eax),%eax
f0130ec6:	8d 50 04             	lea    0x4(%eax),%edx
f0130ec9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ecc:	89 10                	mov    %edx,(%eax)
f0130ece:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed1:	8b 00                	mov    (%eax),%eax
f0130ed3:	83 e8 04             	sub    $0x4,%eax
f0130ed6:	8b 00                	mov    (%eax),%eax
f0130ed8:	99                   	cltd   
f0130ed9:	eb 18                	jmp    f0130ef3 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ede:	8b 00                	mov    (%eax),%eax
f0130ee0:	8d 50 04             	lea    0x4(%eax),%edx
f0130ee3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee6:	89 10                	mov    %edx,(%eax)
f0130ee8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eeb:	8b 00                	mov    (%eax),%eax
f0130eed:	83 e8 04             	sub    $0x4,%eax
f0130ef0:	8b 00                	mov    (%eax),%eax
f0130ef2:	99                   	cltd   
}
f0130ef3:	5d                   	pop    %ebp
f0130ef4:	c3                   	ret    

f0130ef5 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130ef5:	55                   	push   %ebp
f0130ef6:	89 e5                	mov    %esp,%ebp
f0130ef8:	56                   	push   %esi
f0130ef9:	53                   	push   %ebx
f0130efa:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130efd:	eb 17                	jmp    f0130f16 <vprintfmt+0x21>
			if (ch == '\0')
f0130eff:	85 db                	test   %ebx,%ebx
f0130f01:	0f 84 af 03 00 00    	je     f01312b6 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130f07:	83 ec 08             	sub    $0x8,%esp
f0130f0a:	ff 75 0c             	pushl  0xc(%ebp)
f0130f0d:	53                   	push   %ebx
f0130f0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f11:	ff d0                	call   *%eax
f0130f13:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130f16:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f19:	8d 50 01             	lea    0x1(%eax),%edx
f0130f1c:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f1f:	8a 00                	mov    (%eax),%al
f0130f21:	0f b6 d8             	movzbl %al,%ebx
f0130f24:	83 fb 25             	cmp    $0x25,%ebx
f0130f27:	75 d6                	jne    f0130eff <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130f29:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130f2d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130f34:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130f3b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130f42:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130f49:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f4c:	8d 50 01             	lea    0x1(%eax),%edx
f0130f4f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f52:	8a 00                	mov    (%eax),%al
f0130f54:	0f b6 d8             	movzbl %al,%ebx
f0130f57:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130f5a:	83 f8 55             	cmp    $0x55,%eax
f0130f5d:	0f 87 2b 03 00 00    	ja     f013128e <vprintfmt+0x399>
f0130f63:	8b 04 85 98 d6 13 f0 	mov    -0xfec2968(,%eax,4),%eax
f0130f6a:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130f6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130f70:	eb d7                	jmp    f0130f49 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130f72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130f76:	eb d1                	jmp    f0130f49 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130f78:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130f7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130f82:	89 d0                	mov    %edx,%eax
f0130f84:	c1 e0 02             	shl    $0x2,%eax
f0130f87:	01 d0                	add    %edx,%eax
f0130f89:	01 c0                	add    %eax,%eax
f0130f8b:	01 d8                	add    %ebx,%eax
f0130f8d:	83 e8 30             	sub    $0x30,%eax
f0130f90:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130f93:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f96:	8a 00                	mov    (%eax),%al
f0130f98:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130f9b:	83 fb 2f             	cmp    $0x2f,%ebx
f0130f9e:	7e 3e                	jle    f0130fde <vprintfmt+0xe9>
f0130fa0:	83 fb 39             	cmp    $0x39,%ebx
f0130fa3:	7f 39                	jg     f0130fde <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130fa5:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130fa8:	eb d5                	jmp    f0130f7f <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130faa:	8b 45 14             	mov    0x14(%ebp),%eax
f0130fad:	83 c0 04             	add    $0x4,%eax
f0130fb0:	89 45 14             	mov    %eax,0x14(%ebp)
f0130fb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0130fb6:	83 e8 04             	sub    $0x4,%eax
f0130fb9:	8b 00                	mov    (%eax),%eax
f0130fbb:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130fbe:	eb 1f                	jmp    f0130fdf <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130fc0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130fc4:	79 83                	jns    f0130f49 <vprintfmt+0x54>
				width = 0;
f0130fc6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130fcd:	e9 77 ff ff ff       	jmp    f0130f49 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130fd2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130fd9:	e9 6b ff ff ff       	jmp    f0130f49 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130fde:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130fdf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130fe3:	0f 89 60 ff ff ff    	jns    f0130f49 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130fe9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130fec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130fef:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130ff6:	e9 4e ff ff ff       	jmp    f0130f49 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130ffb:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130ffe:	e9 46 ff ff ff       	jmp    f0130f49 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131003:	8b 45 14             	mov    0x14(%ebp),%eax
f0131006:	83 c0 04             	add    $0x4,%eax
f0131009:	89 45 14             	mov    %eax,0x14(%ebp)
f013100c:	8b 45 14             	mov    0x14(%ebp),%eax
f013100f:	83 e8 04             	sub    $0x4,%eax
f0131012:	8b 00                	mov    (%eax),%eax
f0131014:	83 ec 08             	sub    $0x8,%esp
f0131017:	ff 75 0c             	pushl  0xc(%ebp)
f013101a:	50                   	push   %eax
f013101b:	8b 45 08             	mov    0x8(%ebp),%eax
f013101e:	ff d0                	call   *%eax
f0131020:	83 c4 10             	add    $0x10,%esp
			break;
f0131023:	e9 89 02 00 00       	jmp    f01312b1 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0131028:	8b 45 14             	mov    0x14(%ebp),%eax
f013102b:	83 c0 04             	add    $0x4,%eax
f013102e:	89 45 14             	mov    %eax,0x14(%ebp)
f0131031:	8b 45 14             	mov    0x14(%ebp),%eax
f0131034:	83 e8 04             	sub    $0x4,%eax
f0131037:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0131039:	85 db                	test   %ebx,%ebx
f013103b:	79 02                	jns    f013103f <vprintfmt+0x14a>
				err = -err;
f013103d:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013103f:	83 fb 64             	cmp    $0x64,%ebx
f0131042:	7f 0b                	jg     f013104f <vprintfmt+0x15a>
f0131044:	8b 34 9d e0 d4 13 f0 	mov    -0xfec2b20(,%ebx,4),%esi
f013104b:	85 f6                	test   %esi,%esi
f013104d:	75 19                	jne    f0131068 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013104f:	53                   	push   %ebx
f0131050:	68 85 d6 13 f0       	push   $0xf013d685
f0131055:	ff 75 0c             	pushl  0xc(%ebp)
f0131058:	ff 75 08             	pushl  0x8(%ebp)
f013105b:	e8 5e 02 00 00       	call   f01312be <printfmt>
f0131060:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0131063:	e9 49 02 00 00       	jmp    f01312b1 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0131068:	56                   	push   %esi
f0131069:	68 8e d6 13 f0       	push   $0xf013d68e
f013106e:	ff 75 0c             	pushl  0xc(%ebp)
f0131071:	ff 75 08             	pushl  0x8(%ebp)
f0131074:	e8 45 02 00 00       	call   f01312be <printfmt>
f0131079:	83 c4 10             	add    $0x10,%esp
			break;
f013107c:	e9 30 02 00 00       	jmp    f01312b1 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0131081:	8b 45 14             	mov    0x14(%ebp),%eax
f0131084:	83 c0 04             	add    $0x4,%eax
f0131087:	89 45 14             	mov    %eax,0x14(%ebp)
f013108a:	8b 45 14             	mov    0x14(%ebp),%eax
f013108d:	83 e8 04             	sub    $0x4,%eax
f0131090:	8b 30                	mov    (%eax),%esi
f0131092:	85 f6                	test   %esi,%esi
f0131094:	75 05                	jne    f013109b <vprintfmt+0x1a6>
				p = "(null)";
f0131096:	be 91 d6 13 f0       	mov    $0xf013d691,%esi
			if (width > 0 && padc != '-')
f013109b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013109f:	7e 6d                	jle    f013110e <vprintfmt+0x219>
f01310a1:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01310a5:	74 67                	je     f013110e <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01310a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01310aa:	83 ec 08             	sub    $0x8,%esp
f01310ad:	50                   	push   %eax
f01310ae:	56                   	push   %esi
f01310af:	e8 12 05 00 00       	call   f01315c6 <strnlen>
f01310b4:	83 c4 10             	add    $0x10,%esp
f01310b7:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01310ba:	eb 16                	jmp    f01310d2 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01310bc:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01310c0:	83 ec 08             	sub    $0x8,%esp
f01310c3:	ff 75 0c             	pushl  0xc(%ebp)
f01310c6:	50                   	push   %eax
f01310c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01310ca:	ff d0                	call   *%eax
f01310cc:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01310cf:	ff 4d e4             	decl   -0x1c(%ebp)
f01310d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01310d6:	7f e4                	jg     f01310bc <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01310d8:	eb 34                	jmp    f013110e <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01310da:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01310de:	74 1c                	je     f01310fc <vprintfmt+0x207>
f01310e0:	83 fb 1f             	cmp    $0x1f,%ebx
f01310e3:	7e 05                	jle    f01310ea <vprintfmt+0x1f5>
f01310e5:	83 fb 7e             	cmp    $0x7e,%ebx
f01310e8:	7e 12                	jle    f01310fc <vprintfmt+0x207>
					putch('?', putdat);
f01310ea:	83 ec 08             	sub    $0x8,%esp
f01310ed:	ff 75 0c             	pushl  0xc(%ebp)
f01310f0:	6a 3f                	push   $0x3f
f01310f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01310f5:	ff d0                	call   *%eax
f01310f7:	83 c4 10             	add    $0x10,%esp
f01310fa:	eb 0f                	jmp    f013110b <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01310fc:	83 ec 08             	sub    $0x8,%esp
f01310ff:	ff 75 0c             	pushl  0xc(%ebp)
f0131102:	53                   	push   %ebx
f0131103:	8b 45 08             	mov    0x8(%ebp),%eax
f0131106:	ff d0                	call   *%eax
f0131108:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013110b:	ff 4d e4             	decl   -0x1c(%ebp)
f013110e:	89 f0                	mov    %esi,%eax
f0131110:	8d 70 01             	lea    0x1(%eax),%esi
f0131113:	8a 00                	mov    (%eax),%al
f0131115:	0f be d8             	movsbl %al,%ebx
f0131118:	85 db                	test   %ebx,%ebx
f013111a:	74 24                	je     f0131140 <vprintfmt+0x24b>
f013111c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131120:	78 b8                	js     f01310da <vprintfmt+0x1e5>
f0131122:	ff 4d e0             	decl   -0x20(%ebp)
f0131125:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131129:	79 af                	jns    f01310da <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013112b:	eb 13                	jmp    f0131140 <vprintfmt+0x24b>
				putch(' ', putdat);
f013112d:	83 ec 08             	sub    $0x8,%esp
f0131130:	ff 75 0c             	pushl  0xc(%ebp)
f0131133:	6a 20                	push   $0x20
f0131135:	8b 45 08             	mov    0x8(%ebp),%eax
f0131138:	ff d0                	call   *%eax
f013113a:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013113d:	ff 4d e4             	decl   -0x1c(%ebp)
f0131140:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131144:	7f e7                	jg     f013112d <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131146:	e9 66 01 00 00       	jmp    f01312b1 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f013114b:	83 ec 08             	sub    $0x8,%esp
f013114e:	ff 75 e8             	pushl  -0x18(%ebp)
f0131151:	8d 45 14             	lea    0x14(%ebp),%eax
f0131154:	50                   	push   %eax
f0131155:	e8 3c fd ff ff       	call   f0130e96 <getint>
f013115a:	83 c4 10             	add    $0x10,%esp
f013115d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131160:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0131163:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131166:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131169:	85 d2                	test   %edx,%edx
f013116b:	79 23                	jns    f0131190 <vprintfmt+0x29b>
				putch('-', putdat);
f013116d:	83 ec 08             	sub    $0x8,%esp
f0131170:	ff 75 0c             	pushl  0xc(%ebp)
f0131173:	6a 2d                	push   $0x2d
f0131175:	8b 45 08             	mov    0x8(%ebp),%eax
f0131178:	ff d0                	call   *%eax
f013117a:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f013117d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131180:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131183:	f7 d8                	neg    %eax
f0131185:	83 d2 00             	adc    $0x0,%edx
f0131188:	f7 da                	neg    %edx
f013118a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013118d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0131190:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0131197:	e9 bc 00 00 00       	jmp    f0131258 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f013119c:	83 ec 08             	sub    $0x8,%esp
f013119f:	ff 75 e8             	pushl  -0x18(%ebp)
f01311a2:	8d 45 14             	lea    0x14(%ebp),%eax
f01311a5:	50                   	push   %eax
f01311a6:	e8 84 fc ff ff       	call   f0130e2f <getuint>
f01311ab:	83 c4 10             	add    $0x10,%esp
f01311ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311b1:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01311b4:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01311bb:	e9 98 00 00 00       	jmp    f0131258 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01311c0:	83 ec 08             	sub    $0x8,%esp
f01311c3:	ff 75 0c             	pushl  0xc(%ebp)
f01311c6:	6a 58                	push   $0x58
f01311c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01311cb:	ff d0                	call   *%eax
f01311cd:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01311d0:	83 ec 08             	sub    $0x8,%esp
f01311d3:	ff 75 0c             	pushl  0xc(%ebp)
f01311d6:	6a 58                	push   $0x58
f01311d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01311db:	ff d0                	call   *%eax
f01311dd:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01311e0:	83 ec 08             	sub    $0x8,%esp
f01311e3:	ff 75 0c             	pushl  0xc(%ebp)
f01311e6:	6a 58                	push   $0x58
f01311e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01311eb:	ff d0                	call   *%eax
f01311ed:	83 c4 10             	add    $0x10,%esp
			break;
f01311f0:	e9 bc 00 00 00       	jmp    f01312b1 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01311f5:	83 ec 08             	sub    $0x8,%esp
f01311f8:	ff 75 0c             	pushl  0xc(%ebp)
f01311fb:	6a 30                	push   $0x30
f01311fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131200:	ff d0                	call   *%eax
f0131202:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131205:	83 ec 08             	sub    $0x8,%esp
f0131208:	ff 75 0c             	pushl  0xc(%ebp)
f013120b:	6a 78                	push   $0x78
f013120d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131210:	ff d0                	call   *%eax
f0131212:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131215:	8b 45 14             	mov    0x14(%ebp),%eax
f0131218:	83 c0 04             	add    $0x4,%eax
f013121b:	89 45 14             	mov    %eax,0x14(%ebp)
f013121e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131221:	83 e8 04             	sub    $0x4,%eax
f0131224:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131226:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131229:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0131230:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131237:	eb 1f                	jmp    f0131258 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131239:	83 ec 08             	sub    $0x8,%esp
f013123c:	ff 75 e8             	pushl  -0x18(%ebp)
f013123f:	8d 45 14             	lea    0x14(%ebp),%eax
f0131242:	50                   	push   %eax
f0131243:	e8 e7 fb ff ff       	call   f0130e2f <getuint>
f0131248:	83 c4 10             	add    $0x10,%esp
f013124b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013124e:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0131251:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0131258:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f013125c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013125f:	83 ec 04             	sub    $0x4,%esp
f0131262:	52                   	push   %edx
f0131263:	ff 75 e4             	pushl  -0x1c(%ebp)
f0131266:	50                   	push   %eax
f0131267:	ff 75 f4             	pushl  -0xc(%ebp)
f013126a:	ff 75 f0             	pushl  -0x10(%ebp)
f013126d:	ff 75 0c             	pushl  0xc(%ebp)
f0131270:	ff 75 08             	pushl  0x8(%ebp)
f0131273:	e8 00 fb ff ff       	call   f0130d78 <printnum>
f0131278:	83 c4 20             	add    $0x20,%esp
			break;
f013127b:	eb 34                	jmp    f01312b1 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f013127d:	83 ec 08             	sub    $0x8,%esp
f0131280:	ff 75 0c             	pushl  0xc(%ebp)
f0131283:	53                   	push   %ebx
f0131284:	8b 45 08             	mov    0x8(%ebp),%eax
f0131287:	ff d0                	call   *%eax
f0131289:	83 c4 10             	add    $0x10,%esp
			break;
f013128c:	eb 23                	jmp    f01312b1 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f013128e:	83 ec 08             	sub    $0x8,%esp
f0131291:	ff 75 0c             	pushl  0xc(%ebp)
f0131294:	6a 25                	push   $0x25
f0131296:	8b 45 08             	mov    0x8(%ebp),%eax
f0131299:	ff d0                	call   *%eax
f013129b:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f013129e:	ff 4d 10             	decl   0x10(%ebp)
f01312a1:	eb 03                	jmp    f01312a6 <vprintfmt+0x3b1>
f01312a3:	ff 4d 10             	decl   0x10(%ebp)
f01312a6:	8b 45 10             	mov    0x10(%ebp),%eax
f01312a9:	48                   	dec    %eax
f01312aa:	8a 00                	mov    (%eax),%al
f01312ac:	3c 25                	cmp    $0x25,%al
f01312ae:	75 f3                	jne    f01312a3 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01312b0:	90                   	nop
		}
	}
f01312b1:	e9 47 fc ff ff       	jmp    f0130efd <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01312b6:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01312b7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01312ba:	5b                   	pop    %ebx
f01312bb:	5e                   	pop    %esi
f01312bc:	5d                   	pop    %ebp
f01312bd:	c3                   	ret    

f01312be <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01312be:	55                   	push   %ebp
f01312bf:	89 e5                	mov    %esp,%ebp
f01312c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01312c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01312c7:	83 c0 04             	add    $0x4,%eax
f01312ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01312cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01312d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01312d3:	50                   	push   %eax
f01312d4:	ff 75 0c             	pushl  0xc(%ebp)
f01312d7:	ff 75 08             	pushl  0x8(%ebp)
f01312da:	e8 16 fc ff ff       	call   f0130ef5 <vprintfmt>
f01312df:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01312e2:	90                   	nop
f01312e3:	c9                   	leave  
f01312e4:	c3                   	ret    

f01312e5 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01312e5:	55                   	push   %ebp
f01312e6:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01312e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312eb:	8b 40 08             	mov    0x8(%eax),%eax
f01312ee:	8d 50 01             	lea    0x1(%eax),%edx
f01312f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312f4:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01312f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312fa:	8b 10                	mov    (%eax),%edx
f01312fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312ff:	8b 40 04             	mov    0x4(%eax),%eax
f0131302:	39 c2                	cmp    %eax,%edx
f0131304:	73 12                	jae    f0131318 <sprintputch+0x33>
		*b->buf++ = ch;
f0131306:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131309:	8b 00                	mov    (%eax),%eax
f013130b:	8d 48 01             	lea    0x1(%eax),%ecx
f013130e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131311:	89 0a                	mov    %ecx,(%edx)
f0131313:	8b 55 08             	mov    0x8(%ebp),%edx
f0131316:	88 10                	mov    %dl,(%eax)
}
f0131318:	90                   	nop
f0131319:	5d                   	pop    %ebp
f013131a:	c3                   	ret    

f013131b <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f013131b:	55                   	push   %ebp
f013131c:	89 e5                	mov    %esp,%ebp
f013131e:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131321:	8b 45 08             	mov    0x8(%ebp),%eax
f0131324:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131327:	8b 45 0c             	mov    0xc(%ebp),%eax
f013132a:	8d 50 ff             	lea    -0x1(%eax),%edx
f013132d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131330:	01 d0                	add    %edx,%eax
f0131332:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131335:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f013133c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131340:	74 06                	je     f0131348 <vsnprintf+0x2d>
f0131342:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131346:	7f 07                	jg     f013134f <vsnprintf+0x34>
		return -E_INVAL;
f0131348:	b8 03 00 00 00       	mov    $0x3,%eax
f013134d:	eb 20                	jmp    f013136f <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f013134f:	ff 75 14             	pushl  0x14(%ebp)
f0131352:	ff 75 10             	pushl  0x10(%ebp)
f0131355:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0131358:	50                   	push   %eax
f0131359:	68 e5 12 13 f0       	push   $0xf01312e5
f013135e:	e8 92 fb ff ff       	call   f0130ef5 <vprintfmt>
f0131363:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0131366:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131369:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f013136c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f013136f:	c9                   	leave  
f0131370:	c3                   	ret    

f0131371 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0131371:	55                   	push   %ebp
f0131372:	89 e5                	mov    %esp,%ebp
f0131374:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0131377:	8d 45 10             	lea    0x10(%ebp),%eax
f013137a:	83 c0 04             	add    $0x4,%eax
f013137d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0131380:	8b 45 10             	mov    0x10(%ebp),%eax
f0131383:	ff 75 f4             	pushl  -0xc(%ebp)
f0131386:	50                   	push   %eax
f0131387:	ff 75 0c             	pushl  0xc(%ebp)
f013138a:	ff 75 08             	pushl  0x8(%ebp)
f013138d:	e8 89 ff ff ff       	call   f013131b <vsnprintf>
f0131392:	83 c4 10             	add    $0x10,%esp
f0131395:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0131398:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f013139b:	c9                   	leave  
f013139c:	c3                   	ret    

f013139d <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f013139d:	55                   	push   %ebp
f013139e:	89 e5                	mov    %esp,%ebp
f01313a0:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01313a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01313a7:	74 13                	je     f01313bc <readline+0x1f>
		cprintf("%s", prompt);
f01313a9:	83 ec 08             	sub    $0x8,%esp
f01313ac:	ff 75 08             	pushl  0x8(%ebp)
f01313af:	68 f0 d7 13 f0       	push   $0xf013d7f0
f01313b4:	e8 55 f9 fc ff       	call   f0100d0e <cprintf>
f01313b9:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01313bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01313c3:	83 ec 0c             	sub    $0xc,%esp
f01313c6:	6a 00                	push   $0x0
f01313c8:	e8 ee f8 fc ff       	call   f0100cbb <iscons>
f01313cd:	83 c4 10             	add    $0x10,%esp
f01313d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01313d3:	e8 ca f8 fc ff       	call   f0100ca2 <getchar>
f01313d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01313db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01313df:	79 22                	jns    f0131403 <readline+0x66>
			if (c != -E_EOF)
f01313e1:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01313e5:	0f 84 ad 00 00 00    	je     f0131498 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01313eb:	83 ec 08             	sub    $0x8,%esp
f01313ee:	ff 75 ec             	pushl  -0x14(%ebp)
f01313f1:	68 f3 d7 13 f0       	push   $0xf013d7f3
f01313f6:	e8 13 f9 fc ff       	call   f0100d0e <cprintf>
f01313fb:	83 c4 10             	add    $0x10,%esp
			return;
f01313fe:	e9 95 00 00 00       	jmp    f0131498 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131403:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131407:	7e 34                	jle    f013143d <readline+0xa0>
f0131409:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131410:	7f 2b                	jg     f013143d <readline+0xa0>
			if (echoing)
f0131412:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131416:	74 0e                	je     f0131426 <readline+0x89>
				cputchar(c);
f0131418:	83 ec 0c             	sub    $0xc,%esp
f013141b:	ff 75 ec             	pushl  -0x14(%ebp)
f013141e:	e8 68 f8 fc ff       	call   f0100c8b <cputchar>
f0131423:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131426:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131429:	8d 50 01             	lea    0x1(%eax),%edx
f013142c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013142f:	89 c2                	mov    %eax,%edx
f0131431:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131434:	01 d0                	add    %edx,%eax
f0131436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131439:	88 10                	mov    %dl,(%eax)
f013143b:	eb 56                	jmp    f0131493 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013143d:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131441:	75 1f                	jne    f0131462 <readline+0xc5>
f0131443:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131447:	7e 19                	jle    f0131462 <readline+0xc5>
			if (echoing)
f0131449:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013144d:	74 0e                	je     f013145d <readline+0xc0>
				cputchar(c);
f013144f:	83 ec 0c             	sub    $0xc,%esp
f0131452:	ff 75 ec             	pushl  -0x14(%ebp)
f0131455:	e8 31 f8 fc ff       	call   f0100c8b <cputchar>
f013145a:	83 c4 10             	add    $0x10,%esp

			i--;
f013145d:	ff 4d f4             	decl   -0xc(%ebp)
f0131460:	eb 31                	jmp    f0131493 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0131462:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131466:	74 0a                	je     f0131472 <readline+0xd5>
f0131468:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013146c:	0f 85 61 ff ff ff    	jne    f01313d3 <readline+0x36>
			if (echoing)
f0131472:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131476:	74 0e                	je     f0131486 <readline+0xe9>
				cputchar(c);
f0131478:	83 ec 0c             	sub    $0xc,%esp
f013147b:	ff 75 ec             	pushl  -0x14(%ebp)
f013147e:	e8 08 f8 fc ff       	call   f0100c8b <cputchar>
f0131483:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0131486:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131489:	8b 45 0c             	mov    0xc(%ebp),%eax
f013148c:	01 d0                	add    %edx,%eax
f013148e:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0131491:	eb 06                	jmp    f0131499 <readline+0xfc>
		}
	}
f0131493:	e9 3b ff ff ff       	jmp    f01313d3 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0131498:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0131499:	c9                   	leave  
f013149a:	c3                   	ret    

f013149b <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f013149b:	55                   	push   %ebp
f013149c:	89 e5                	mov    %esp,%ebp
f013149e:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01314a1:	e8 82 bb fd ff       	call   f010d028 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01314a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01314aa:	74 13                	je     f01314bf <atomic_readline+0x24>
		cprintf("%s", prompt);
f01314ac:	83 ec 08             	sub    $0x8,%esp
f01314af:	ff 75 08             	pushl  0x8(%ebp)
f01314b2:	68 f0 d7 13 f0       	push   $0xf013d7f0
f01314b7:	e8 52 f8 fc ff       	call   f0100d0e <cprintf>
f01314bc:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01314bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01314c6:	83 ec 0c             	sub    $0xc,%esp
f01314c9:	6a 00                	push   $0x0
f01314cb:	e8 eb f7 fc ff       	call   f0100cbb <iscons>
f01314d0:	83 c4 10             	add    $0x10,%esp
f01314d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01314d6:	e8 c7 f7 fc ff       	call   f0100ca2 <getchar>
f01314db:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01314de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01314e2:	79 23                	jns    f0131507 <atomic_readline+0x6c>
			if (c != -E_EOF)
f01314e4:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01314e8:	74 13                	je     f01314fd <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01314ea:	83 ec 08             	sub    $0x8,%esp
f01314ed:	ff 75 ec             	pushl  -0x14(%ebp)
f01314f0:	68 f3 d7 13 f0       	push   $0xf013d7f3
f01314f5:	e8 14 f8 fc ff       	call   f0100d0e <cprintf>
f01314fa:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01314fd:	e8 40 bb fd ff       	call   f010d042 <sys_enable_interrupt>
			return;
f0131502:	e9 9a 00 00 00       	jmp    f01315a1 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131507:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013150b:	7e 34                	jle    f0131541 <atomic_readline+0xa6>
f013150d:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131514:	7f 2b                	jg     f0131541 <atomic_readline+0xa6>
			if (echoing)
f0131516:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013151a:	74 0e                	je     f013152a <atomic_readline+0x8f>
				cputchar(c);
f013151c:	83 ec 0c             	sub    $0xc,%esp
f013151f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131522:	e8 64 f7 fc ff       	call   f0100c8b <cputchar>
f0131527:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013152a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013152d:	8d 50 01             	lea    0x1(%eax),%edx
f0131530:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131533:	89 c2                	mov    %eax,%edx
f0131535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131538:	01 d0                	add    %edx,%eax
f013153a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013153d:	88 10                	mov    %dl,(%eax)
f013153f:	eb 5b                	jmp    f013159c <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131541:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131545:	75 1f                	jne    f0131566 <atomic_readline+0xcb>
f0131547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013154b:	7e 19                	jle    f0131566 <atomic_readline+0xcb>
			if (echoing)
f013154d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131551:	74 0e                	je     f0131561 <atomic_readline+0xc6>
				cputchar(c);
f0131553:	83 ec 0c             	sub    $0xc,%esp
f0131556:	ff 75 ec             	pushl  -0x14(%ebp)
f0131559:	e8 2d f7 fc ff       	call   f0100c8b <cputchar>
f013155e:	83 c4 10             	add    $0x10,%esp
			i--;
f0131561:	ff 4d f4             	decl   -0xc(%ebp)
f0131564:	eb 36                	jmp    f013159c <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131566:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013156a:	74 0a                	je     f0131576 <atomic_readline+0xdb>
f013156c:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131570:	0f 85 60 ff ff ff    	jne    f01314d6 <atomic_readline+0x3b>
			if (echoing)
f0131576:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013157a:	74 0e                	je     f013158a <atomic_readline+0xef>
				cputchar(c);
f013157c:	83 ec 0c             	sub    $0xc,%esp
f013157f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131582:	e8 04 f7 fc ff       	call   f0100c8b <cputchar>
f0131587:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f013158a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013158d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131590:	01 d0                	add    %edx,%eax
f0131592:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0131595:	e8 a8 ba fd ff       	call   f010d042 <sys_enable_interrupt>
			return;
f013159a:	eb 05                	jmp    f01315a1 <atomic_readline+0x106>
		}
	}
f013159c:	e9 35 ff ff ff       	jmp    f01314d6 <atomic_readline+0x3b>
}
f01315a1:	c9                   	leave  
f01315a2:	c3                   	ret    

f01315a3 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01315a3:	55                   	push   %ebp
f01315a4:	89 e5                	mov    %esp,%ebp
f01315a6:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01315a9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01315b0:	eb 06                	jmp    f01315b8 <strlen+0x15>
		n++;
f01315b2:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01315b5:	ff 45 08             	incl   0x8(%ebp)
f01315b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01315bb:	8a 00                	mov    (%eax),%al
f01315bd:	84 c0                	test   %al,%al
f01315bf:	75 f1                	jne    f01315b2 <strlen+0xf>
		n++;
	return n;
f01315c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01315c4:	c9                   	leave  
f01315c5:	c3                   	ret    

f01315c6 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01315c6:	55                   	push   %ebp
f01315c7:	89 e5                	mov    %esp,%ebp
f01315c9:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01315cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01315d3:	eb 09                	jmp    f01315de <strnlen+0x18>
		n++;
f01315d5:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01315d8:	ff 45 08             	incl   0x8(%ebp)
f01315db:	ff 4d 0c             	decl   0xc(%ebp)
f01315de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01315e2:	74 09                	je     f01315ed <strnlen+0x27>
f01315e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315e7:	8a 00                	mov    (%eax),%al
f01315e9:	84 c0                	test   %al,%al
f01315eb:	75 e8                	jne    f01315d5 <strnlen+0xf>
		n++;
	return n;
f01315ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01315f0:	c9                   	leave  
f01315f1:	c3                   	ret    

f01315f2 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01315f2:	55                   	push   %ebp
f01315f3:	89 e5                	mov    %esp,%ebp
f01315f5:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01315f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01315fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01315fe:	90                   	nop
f01315ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131602:	8d 50 01             	lea    0x1(%eax),%edx
f0131605:	89 55 08             	mov    %edx,0x8(%ebp)
f0131608:	8b 55 0c             	mov    0xc(%ebp),%edx
f013160b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013160e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131611:	8a 12                	mov    (%edx),%dl
f0131613:	88 10                	mov    %dl,(%eax)
f0131615:	8a 00                	mov    (%eax),%al
f0131617:	84 c0                	test   %al,%al
f0131619:	75 e4                	jne    f01315ff <strcpy+0xd>
		/* do nothing */;
	return ret;
f013161b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013161e:	c9                   	leave  
f013161f:	c3                   	ret    

f0131620 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131620:	55                   	push   %ebp
f0131621:	89 e5                	mov    %esp,%ebp
f0131623:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131626:	8b 45 08             	mov    0x8(%ebp),%eax
f0131629:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f013162c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131633:	eb 1f                	jmp    f0131654 <strncpy+0x34>
		*dst++ = *src;
f0131635:	8b 45 08             	mov    0x8(%ebp),%eax
f0131638:	8d 50 01             	lea    0x1(%eax),%edx
f013163b:	89 55 08             	mov    %edx,0x8(%ebp)
f013163e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131641:	8a 12                	mov    (%edx),%dl
f0131643:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131645:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131648:	8a 00                	mov    (%eax),%al
f013164a:	84 c0                	test   %al,%al
f013164c:	74 03                	je     f0131651 <strncpy+0x31>
			src++;
f013164e:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131651:	ff 45 fc             	incl   -0x4(%ebp)
f0131654:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131657:	3b 45 10             	cmp    0x10(%ebp),%eax
f013165a:	72 d9                	jb     f0131635 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f013165c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013165f:	c9                   	leave  
f0131660:	c3                   	ret    

f0131661 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131661:	55                   	push   %ebp
f0131662:	89 e5                	mov    %esp,%ebp
f0131664:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131667:	8b 45 08             	mov    0x8(%ebp),%eax
f013166a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f013166d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131671:	74 30                	je     f01316a3 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131673:	eb 16                	jmp    f013168b <strlcpy+0x2a>
			*dst++ = *src++;
f0131675:	8b 45 08             	mov    0x8(%ebp),%eax
f0131678:	8d 50 01             	lea    0x1(%eax),%edx
f013167b:	89 55 08             	mov    %edx,0x8(%ebp)
f013167e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131681:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131684:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131687:	8a 12                	mov    (%edx),%dl
f0131689:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f013168b:	ff 4d 10             	decl   0x10(%ebp)
f013168e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131692:	74 09                	je     f013169d <strlcpy+0x3c>
f0131694:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131697:	8a 00                	mov    (%eax),%al
f0131699:	84 c0                	test   %al,%al
f013169b:	75 d8                	jne    f0131675 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f013169d:	8b 45 08             	mov    0x8(%ebp),%eax
f01316a0:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01316a3:	8b 55 08             	mov    0x8(%ebp),%edx
f01316a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01316a9:	29 c2                	sub    %eax,%edx
f01316ab:	89 d0                	mov    %edx,%eax
}
f01316ad:	c9                   	leave  
f01316ae:	c3                   	ret    

f01316af <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01316af:	55                   	push   %ebp
f01316b0:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01316b2:	eb 06                	jmp    f01316ba <strcmp+0xb>
		p++, q++;
f01316b4:	ff 45 08             	incl   0x8(%ebp)
f01316b7:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01316ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01316bd:	8a 00                	mov    (%eax),%al
f01316bf:	84 c0                	test   %al,%al
f01316c1:	74 0e                	je     f01316d1 <strcmp+0x22>
f01316c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c6:	8a 10                	mov    (%eax),%dl
f01316c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316cb:	8a 00                	mov    (%eax),%al
f01316cd:	38 c2                	cmp    %al,%dl
f01316cf:	74 e3                	je     f01316b4 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01316d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01316d4:	8a 00                	mov    (%eax),%al
f01316d6:	0f b6 d0             	movzbl %al,%edx
f01316d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316dc:	8a 00                	mov    (%eax),%al
f01316de:	0f b6 c0             	movzbl %al,%eax
f01316e1:	29 c2                	sub    %eax,%edx
f01316e3:	89 d0                	mov    %edx,%eax
}
f01316e5:	5d                   	pop    %ebp
f01316e6:	c3                   	ret    

f01316e7 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01316e7:	55                   	push   %ebp
f01316e8:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01316ea:	eb 09                	jmp    f01316f5 <strncmp+0xe>
		n--, p++, q++;
f01316ec:	ff 4d 10             	decl   0x10(%ebp)
f01316ef:	ff 45 08             	incl   0x8(%ebp)
f01316f2:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01316f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01316f9:	74 17                	je     f0131712 <strncmp+0x2b>
f01316fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01316fe:	8a 00                	mov    (%eax),%al
f0131700:	84 c0                	test   %al,%al
f0131702:	74 0e                	je     f0131712 <strncmp+0x2b>
f0131704:	8b 45 08             	mov    0x8(%ebp),%eax
f0131707:	8a 10                	mov    (%eax),%dl
f0131709:	8b 45 0c             	mov    0xc(%ebp),%eax
f013170c:	8a 00                	mov    (%eax),%al
f013170e:	38 c2                	cmp    %al,%dl
f0131710:	74 da                	je     f01316ec <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131712:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131716:	75 07                	jne    f013171f <strncmp+0x38>
		return 0;
f0131718:	b8 00 00 00 00       	mov    $0x0,%eax
f013171d:	eb 14                	jmp    f0131733 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f013171f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131722:	8a 00                	mov    (%eax),%al
f0131724:	0f b6 d0             	movzbl %al,%edx
f0131727:	8b 45 0c             	mov    0xc(%ebp),%eax
f013172a:	8a 00                	mov    (%eax),%al
f013172c:	0f b6 c0             	movzbl %al,%eax
f013172f:	29 c2                	sub    %eax,%edx
f0131731:	89 d0                	mov    %edx,%eax
}
f0131733:	5d                   	pop    %ebp
f0131734:	c3                   	ret    

f0131735 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131735:	55                   	push   %ebp
f0131736:	89 e5                	mov    %esp,%ebp
f0131738:	83 ec 04             	sub    $0x4,%esp
f013173b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013173e:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131741:	eb 12                	jmp    f0131755 <strchr+0x20>
		if (*s == c)
f0131743:	8b 45 08             	mov    0x8(%ebp),%eax
f0131746:	8a 00                	mov    (%eax),%al
f0131748:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013174b:	75 05                	jne    f0131752 <strchr+0x1d>
			return (char *) s;
f013174d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131750:	eb 11                	jmp    f0131763 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131752:	ff 45 08             	incl   0x8(%ebp)
f0131755:	8b 45 08             	mov    0x8(%ebp),%eax
f0131758:	8a 00                	mov    (%eax),%al
f013175a:	84 c0                	test   %al,%al
f013175c:	75 e5                	jne    f0131743 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f013175e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131763:	c9                   	leave  
f0131764:	c3                   	ret    

f0131765 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131765:	55                   	push   %ebp
f0131766:	89 e5                	mov    %esp,%ebp
f0131768:	83 ec 04             	sub    $0x4,%esp
f013176b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013176e:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131771:	eb 0d                	jmp    f0131780 <strfind+0x1b>
		if (*s == c)
f0131773:	8b 45 08             	mov    0x8(%ebp),%eax
f0131776:	8a 00                	mov    (%eax),%al
f0131778:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013177b:	74 0e                	je     f013178b <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f013177d:	ff 45 08             	incl   0x8(%ebp)
f0131780:	8b 45 08             	mov    0x8(%ebp),%eax
f0131783:	8a 00                	mov    (%eax),%al
f0131785:	84 c0                	test   %al,%al
f0131787:	75 ea                	jne    f0131773 <strfind+0xe>
f0131789:	eb 01                	jmp    f013178c <strfind+0x27>
		if (*s == c)
			break;
f013178b:	90                   	nop
	return (char *) s;
f013178c:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013178f:	c9                   	leave  
f0131790:	c3                   	ret    

f0131791 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131791:	55                   	push   %ebp
f0131792:	89 e5                	mov    %esp,%ebp
f0131794:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131797:	8b 45 08             	mov    0x8(%ebp),%eax
f013179a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f013179d:	8b 45 10             	mov    0x10(%ebp),%eax
f01317a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01317a3:	eb 0e                	jmp    f01317b3 <memset+0x22>
		*p++ = c;
f01317a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01317a8:	8d 50 01             	lea    0x1(%eax),%edx
f01317ab:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01317ae:	8b 55 0c             	mov    0xc(%ebp),%edx
f01317b1:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01317b3:	ff 4d f8             	decl   -0x8(%ebp)
f01317b6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01317ba:	79 e9                	jns    f01317a5 <memset+0x14>
		*p++ = c;

	return v;
f01317bc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01317bf:	c9                   	leave  
f01317c0:	c3                   	ret    

f01317c1 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01317c1:	55                   	push   %ebp
f01317c2:	89 e5                	mov    %esp,%ebp
f01317c4:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01317c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01317cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01317d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01317d3:	eb 16                	jmp    f01317eb <memcpy+0x2a>
		*d++ = *s++;
f01317d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01317d8:	8d 50 01             	lea    0x1(%eax),%edx
f01317db:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01317de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01317e1:	8d 4a 01             	lea    0x1(%edx),%ecx
f01317e4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01317e7:	8a 12                	mov    (%edx),%dl
f01317e9:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01317eb:	8b 45 10             	mov    0x10(%ebp),%eax
f01317ee:	8d 50 ff             	lea    -0x1(%eax),%edx
f01317f1:	89 55 10             	mov    %edx,0x10(%ebp)
f01317f4:	85 c0                	test   %eax,%eax
f01317f6:	75 dd                	jne    f01317d5 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f01317f8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01317fb:	c9                   	leave  
f01317fc:	c3                   	ret    

f01317fd <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f01317fd:	55                   	push   %ebp
f01317fe:	89 e5                	mov    %esp,%ebp
f0131800:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131803:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131806:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131809:	8b 45 08             	mov    0x8(%ebp),%eax
f013180c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f013180f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131812:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131815:	73 50                	jae    f0131867 <memmove+0x6a>
f0131817:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013181a:	8b 45 10             	mov    0x10(%ebp),%eax
f013181d:	01 d0                	add    %edx,%eax
f013181f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131822:	76 43                	jbe    f0131867 <memmove+0x6a>
		s += n;
f0131824:	8b 45 10             	mov    0x10(%ebp),%eax
f0131827:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f013182a:	8b 45 10             	mov    0x10(%ebp),%eax
f013182d:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131830:	eb 10                	jmp    f0131842 <memmove+0x45>
			*--d = *--s;
f0131832:	ff 4d f8             	decl   -0x8(%ebp)
f0131835:	ff 4d fc             	decl   -0x4(%ebp)
f0131838:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013183b:	8a 10                	mov    (%eax),%dl
f013183d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131840:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131842:	8b 45 10             	mov    0x10(%ebp),%eax
f0131845:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131848:	89 55 10             	mov    %edx,0x10(%ebp)
f013184b:	85 c0                	test   %eax,%eax
f013184d:	75 e3                	jne    f0131832 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f013184f:	eb 23                	jmp    f0131874 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131851:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131854:	8d 50 01             	lea    0x1(%eax),%edx
f0131857:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013185a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013185d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131860:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131863:	8a 12                	mov    (%edx),%dl
f0131865:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131867:	8b 45 10             	mov    0x10(%ebp),%eax
f013186a:	8d 50 ff             	lea    -0x1(%eax),%edx
f013186d:	89 55 10             	mov    %edx,0x10(%ebp)
f0131870:	85 c0                	test   %eax,%eax
f0131872:	75 dd                	jne    f0131851 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131874:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131877:	c9                   	leave  
f0131878:	c3                   	ret    

f0131879 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131879:	55                   	push   %ebp
f013187a:	89 e5                	mov    %esp,%ebp
f013187c:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f013187f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131882:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131885:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131888:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f013188b:	eb 2a                	jmp    f01318b7 <memcmp+0x3e>
		if (*s1 != *s2)
f013188d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131890:	8a 10                	mov    (%eax),%dl
f0131892:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131895:	8a 00                	mov    (%eax),%al
f0131897:	38 c2                	cmp    %al,%dl
f0131899:	74 16                	je     f01318b1 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f013189b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013189e:	8a 00                	mov    (%eax),%al
f01318a0:	0f b6 d0             	movzbl %al,%edx
f01318a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318a6:	8a 00                	mov    (%eax),%al
f01318a8:	0f b6 c0             	movzbl %al,%eax
f01318ab:	29 c2                	sub    %eax,%edx
f01318ad:	89 d0                	mov    %edx,%eax
f01318af:	eb 18                	jmp    f01318c9 <memcmp+0x50>
		s1++, s2++;
f01318b1:	ff 45 fc             	incl   -0x4(%ebp)
f01318b4:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01318b7:	8b 45 10             	mov    0x10(%ebp),%eax
f01318ba:	8d 50 ff             	lea    -0x1(%eax),%edx
f01318bd:	89 55 10             	mov    %edx,0x10(%ebp)
f01318c0:	85 c0                	test   %eax,%eax
f01318c2:	75 c9                	jne    f013188d <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01318c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01318c9:	c9                   	leave  
f01318ca:	c3                   	ret    

f01318cb <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01318cb:	55                   	push   %ebp
f01318cc:	89 e5                	mov    %esp,%ebp
f01318ce:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01318d1:	8b 55 08             	mov    0x8(%ebp),%edx
f01318d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01318d7:	01 d0                	add    %edx,%eax
f01318d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01318dc:	eb 15                	jmp    f01318f3 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01318de:	8b 45 08             	mov    0x8(%ebp),%eax
f01318e1:	8a 00                	mov    (%eax),%al
f01318e3:	0f b6 d0             	movzbl %al,%edx
f01318e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318e9:	0f b6 c0             	movzbl %al,%eax
f01318ec:	39 c2                	cmp    %eax,%edx
f01318ee:	74 0d                	je     f01318fd <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01318f0:	ff 45 08             	incl   0x8(%ebp)
f01318f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01318f6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01318f9:	72 e3                	jb     f01318de <memfind+0x13>
f01318fb:	eb 01                	jmp    f01318fe <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01318fd:	90                   	nop
	return (void *) s;
f01318fe:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131901:	c9                   	leave  
f0131902:	c3                   	ret    

f0131903 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131903:	55                   	push   %ebp
f0131904:	89 e5                	mov    %esp,%ebp
f0131906:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131909:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131910:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131917:	eb 03                	jmp    f013191c <strtol+0x19>
		s++;
f0131919:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013191c:	8b 45 08             	mov    0x8(%ebp),%eax
f013191f:	8a 00                	mov    (%eax),%al
f0131921:	3c 20                	cmp    $0x20,%al
f0131923:	74 f4                	je     f0131919 <strtol+0x16>
f0131925:	8b 45 08             	mov    0x8(%ebp),%eax
f0131928:	8a 00                	mov    (%eax),%al
f013192a:	3c 09                	cmp    $0x9,%al
f013192c:	74 eb                	je     f0131919 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f013192e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131931:	8a 00                	mov    (%eax),%al
f0131933:	3c 2b                	cmp    $0x2b,%al
f0131935:	75 05                	jne    f013193c <strtol+0x39>
		s++;
f0131937:	ff 45 08             	incl   0x8(%ebp)
f013193a:	eb 13                	jmp    f013194f <strtol+0x4c>
	else if (*s == '-')
f013193c:	8b 45 08             	mov    0x8(%ebp),%eax
f013193f:	8a 00                	mov    (%eax),%al
f0131941:	3c 2d                	cmp    $0x2d,%al
f0131943:	75 0a                	jne    f013194f <strtol+0x4c>
		s++, neg = 1;
f0131945:	ff 45 08             	incl   0x8(%ebp)
f0131948:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f013194f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131953:	74 06                	je     f013195b <strtol+0x58>
f0131955:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131959:	75 20                	jne    f013197b <strtol+0x78>
f013195b:	8b 45 08             	mov    0x8(%ebp),%eax
f013195e:	8a 00                	mov    (%eax),%al
f0131960:	3c 30                	cmp    $0x30,%al
f0131962:	75 17                	jne    f013197b <strtol+0x78>
f0131964:	8b 45 08             	mov    0x8(%ebp),%eax
f0131967:	40                   	inc    %eax
f0131968:	8a 00                	mov    (%eax),%al
f013196a:	3c 78                	cmp    $0x78,%al
f013196c:	75 0d                	jne    f013197b <strtol+0x78>
		s += 2, base = 16;
f013196e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131972:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131979:	eb 28                	jmp    f01319a3 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f013197b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013197f:	75 15                	jne    f0131996 <strtol+0x93>
f0131981:	8b 45 08             	mov    0x8(%ebp),%eax
f0131984:	8a 00                	mov    (%eax),%al
f0131986:	3c 30                	cmp    $0x30,%al
f0131988:	75 0c                	jne    f0131996 <strtol+0x93>
		s++, base = 8;
f013198a:	ff 45 08             	incl   0x8(%ebp)
f013198d:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131994:	eb 0d                	jmp    f01319a3 <strtol+0xa0>
	else if (base == 0)
f0131996:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013199a:	75 07                	jne    f01319a3 <strtol+0xa0>
		base = 10;
f013199c:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01319a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01319a6:	8a 00                	mov    (%eax),%al
f01319a8:	3c 2f                	cmp    $0x2f,%al
f01319aa:	7e 19                	jle    f01319c5 <strtol+0xc2>
f01319ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01319af:	8a 00                	mov    (%eax),%al
f01319b1:	3c 39                	cmp    $0x39,%al
f01319b3:	7f 10                	jg     f01319c5 <strtol+0xc2>
			dig = *s - '0';
f01319b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b8:	8a 00                	mov    (%eax),%al
f01319ba:	0f be c0             	movsbl %al,%eax
f01319bd:	83 e8 30             	sub    $0x30,%eax
f01319c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01319c3:	eb 42                	jmp    f0131a07 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01319c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c8:	8a 00                	mov    (%eax),%al
f01319ca:	3c 60                	cmp    $0x60,%al
f01319cc:	7e 19                	jle    f01319e7 <strtol+0xe4>
f01319ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01319d1:	8a 00                	mov    (%eax),%al
f01319d3:	3c 7a                	cmp    $0x7a,%al
f01319d5:	7f 10                	jg     f01319e7 <strtol+0xe4>
			dig = *s - 'a' + 10;
f01319d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319da:	8a 00                	mov    (%eax),%al
f01319dc:	0f be c0             	movsbl %al,%eax
f01319df:	83 e8 57             	sub    $0x57,%eax
f01319e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01319e5:	eb 20                	jmp    f0131a07 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01319e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ea:	8a 00                	mov    (%eax),%al
f01319ec:	3c 40                	cmp    $0x40,%al
f01319ee:	7e 39                	jle    f0131a29 <strtol+0x126>
f01319f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01319f3:	8a 00                	mov    (%eax),%al
f01319f5:	3c 5a                	cmp    $0x5a,%al
f01319f7:	7f 30                	jg     f0131a29 <strtol+0x126>
			dig = *s - 'A' + 10;
f01319f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01319fc:	8a 00                	mov    (%eax),%al
f01319fe:	0f be c0             	movsbl %al,%eax
f0131a01:	83 e8 37             	sub    $0x37,%eax
f0131a04:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a0a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131a0d:	7d 19                	jge    f0131a28 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131a0f:	ff 45 08             	incl   0x8(%ebp)
f0131a12:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a15:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131a19:	89 c2                	mov    %eax,%edx
f0131a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a1e:	01 d0                	add    %edx,%eax
f0131a20:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131a23:	e9 7b ff ff ff       	jmp    f01319a3 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131a28:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131a29:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a2d:	74 08                	je     f0131a37 <strtol+0x134>
		*endptr = (char *) s;
f0131a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a32:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a35:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131a37:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131a3b:	74 07                	je     f0131a44 <strtol+0x141>
f0131a3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a40:	f7 d8                	neg    %eax
f0131a42:	eb 03                	jmp    f0131a47 <strtol+0x144>
f0131a44:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131a47:	c9                   	leave  
f0131a48:	c3                   	ret    

f0131a49 <ltostr>:

void
ltostr(long value, char *str)
{
f0131a49:	55                   	push   %ebp
f0131a4a:	89 e5                	mov    %esp,%ebp
f0131a4c:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131a4f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131a56:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131a5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a61:	79 13                	jns    f0131a76 <ltostr+0x2d>
	{
		neg = 1;
f0131a63:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131a6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a6d:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131a70:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131a73:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a79:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131a7e:	99                   	cltd   
f0131a7f:	f7 f9                	idiv   %ecx
f0131a81:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131a84:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a87:	8d 50 01             	lea    0x1(%eax),%edx
f0131a8a:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131a8d:	89 c2                	mov    %eax,%edx
f0131a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a92:	01 d0                	add    %edx,%eax
f0131a94:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131a97:	83 c2 30             	add    $0x30,%edx
f0131a9a:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131a9c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131a9f:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131aa4:	f7 e9                	imul   %ecx
f0131aa6:	c1 fa 02             	sar    $0x2,%edx
f0131aa9:	89 c8                	mov    %ecx,%eax
f0131aab:	c1 f8 1f             	sar    $0x1f,%eax
f0131aae:	29 c2                	sub    %eax,%edx
f0131ab0:	89 d0                	mov    %edx,%eax
f0131ab2:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131ab5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131ab8:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131abd:	f7 e9                	imul   %ecx
f0131abf:	c1 fa 02             	sar    $0x2,%edx
f0131ac2:	89 c8                	mov    %ecx,%eax
f0131ac4:	c1 f8 1f             	sar    $0x1f,%eax
f0131ac7:	29 c2                	sub    %eax,%edx
f0131ac9:	89 d0                	mov    %edx,%eax
f0131acb:	c1 e0 02             	shl    $0x2,%eax
f0131ace:	01 d0                	add    %edx,%eax
f0131ad0:	01 c0                	add    %eax,%eax
f0131ad2:	29 c1                	sub    %eax,%ecx
f0131ad4:	89 ca                	mov    %ecx,%edx
f0131ad6:	85 d2                	test   %edx,%edx
f0131ad8:	75 9c                	jne    f0131a76 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131ada:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131ae1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ae4:	48                   	dec    %eax
f0131ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131ae8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131aec:	74 3d                	je     f0131b2b <ltostr+0xe2>
		start = 1 ;
f0131aee:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131af5:	eb 34                	jmp    f0131b2b <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131afa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131afd:	01 d0                	add    %edx,%eax
f0131aff:	8a 00                	mov    (%eax),%al
f0131b01:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131b04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b0a:	01 c2                	add    %eax,%edx
f0131b0c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b12:	01 c8                	add    %ecx,%eax
f0131b14:	8a 00                	mov    (%eax),%al
f0131b16:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b1e:	01 c2                	add    %eax,%edx
f0131b20:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131b23:	88 02                	mov    %al,(%edx)
		start++ ;
f0131b25:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131b28:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131b31:	7c c4                	jl     f0131af7 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131b33:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131b36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b39:	01 d0                	add    %edx,%eax
f0131b3b:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131b3e:	90                   	nop
f0131b3f:	c9                   	leave  
f0131b40:	c3                   	ret    

f0131b41 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131b41:	55                   	push   %ebp
f0131b42:	89 e5                	mov    %esp,%ebp
f0131b44:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131b47:	ff 75 08             	pushl  0x8(%ebp)
f0131b4a:	e8 54 fa ff ff       	call   f01315a3 <strlen>
f0131b4f:	83 c4 04             	add    $0x4,%esp
f0131b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131b55:	ff 75 0c             	pushl  0xc(%ebp)
f0131b58:	e8 46 fa ff ff       	call   f01315a3 <strlen>
f0131b5d:	83 c4 04             	add    $0x4,%esp
f0131b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131b63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131b6a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131b71:	eb 17                	jmp    f0131b8a <strcconcat+0x49>
		final[s] = str1[s] ;
f0131b73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131b76:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b79:	01 c2                	add    %eax,%edx
f0131b7b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131b7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b81:	01 c8                	add    %ecx,%eax
f0131b83:	8a 00                	mov    (%eax),%al
f0131b85:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131b87:	ff 45 fc             	incl   -0x4(%ebp)
f0131b8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b8d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131b90:	7c e1                	jl     f0131b73 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131b92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131b99:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131ba0:	eb 1f                	jmp    f0131bc1 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131ba2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ba5:	8d 50 01             	lea    0x1(%eax),%edx
f0131ba8:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131bab:	89 c2                	mov    %eax,%edx
f0131bad:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bb0:	01 c2                	add    %eax,%edx
f0131bb2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bb8:	01 c8                	add    %ecx,%eax
f0131bba:	8a 00                	mov    (%eax),%al
f0131bbc:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131bbe:	ff 45 f8             	incl   -0x8(%ebp)
f0131bc1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131bc4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131bc7:	7c d9                	jl     f0131ba2 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131bc9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131bcc:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bcf:	01 d0                	add    %edx,%eax
f0131bd1:	c6 00 00             	movb   $0x0,(%eax)
}
f0131bd4:	90                   	nop
f0131bd5:	c9                   	leave  
f0131bd6:	c3                   	ret    

f0131bd7 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131bd7:	55                   	push   %ebp
f0131bd8:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131bda:	8b 45 14             	mov    0x14(%ebp),%eax
f0131bdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131be3:	8b 45 14             	mov    0x14(%ebp),%eax
f0131be6:	8b 00                	mov    (%eax),%eax
f0131be8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131bef:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bf2:	01 d0                	add    %edx,%eax
f0131bf4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131bfa:	eb 0c                	jmp    f0131c08 <strsplit+0x31>
			*string++ = 0;
f0131bfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bff:	8d 50 01             	lea    0x1(%eax),%edx
f0131c02:	89 55 08             	mov    %edx,0x8(%ebp)
f0131c05:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131c08:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c0b:	8a 00                	mov    (%eax),%al
f0131c0d:	84 c0                	test   %al,%al
f0131c0f:	74 18                	je     f0131c29 <strsplit+0x52>
f0131c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c14:	8a 00                	mov    (%eax),%al
f0131c16:	0f be c0             	movsbl %al,%eax
f0131c19:	50                   	push   %eax
f0131c1a:	ff 75 0c             	pushl  0xc(%ebp)
f0131c1d:	e8 13 fb ff ff       	call   f0131735 <strchr>
f0131c22:	83 c4 08             	add    $0x8,%esp
f0131c25:	85 c0                	test   %eax,%eax
f0131c27:	75 d3                	jne    f0131bfc <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c2c:	8a 00                	mov    (%eax),%al
f0131c2e:	84 c0                	test   %al,%al
f0131c30:	74 5a                	je     f0131c8c <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131c32:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c35:	8b 00                	mov    (%eax),%eax
f0131c37:	83 f8 0f             	cmp    $0xf,%eax
f0131c3a:	75 07                	jne    f0131c43 <strsplit+0x6c>
		{
			return 0;
f0131c3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c41:	eb 66                	jmp    f0131ca9 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131c43:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c46:	8b 00                	mov    (%eax),%eax
f0131c48:	8d 48 01             	lea    0x1(%eax),%ecx
f0131c4b:	8b 55 14             	mov    0x14(%ebp),%edx
f0131c4e:	89 0a                	mov    %ecx,(%edx)
f0131c50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131c57:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c5a:	01 c2                	add    %eax,%edx
f0131c5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c5f:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131c61:	eb 03                	jmp    f0131c66 <strsplit+0x8f>
			string++;
f0131c63:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131c66:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c69:	8a 00                	mov    (%eax),%al
f0131c6b:	84 c0                	test   %al,%al
f0131c6d:	74 8b                	je     f0131bfa <strsplit+0x23>
f0131c6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c72:	8a 00                	mov    (%eax),%al
f0131c74:	0f be c0             	movsbl %al,%eax
f0131c77:	50                   	push   %eax
f0131c78:	ff 75 0c             	pushl  0xc(%ebp)
f0131c7b:	e8 b5 fa ff ff       	call   f0131735 <strchr>
f0131c80:	83 c4 08             	add    $0x8,%esp
f0131c83:	85 c0                	test   %eax,%eax
f0131c85:	74 dc                	je     f0131c63 <strsplit+0x8c>
			string++;
	}
f0131c87:	e9 6e ff ff ff       	jmp    f0131bfa <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131c8c:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131c8d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c90:	8b 00                	mov    (%eax),%eax
f0131c92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131c99:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c9c:	01 d0                	add    %edx,%eax
f0131c9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131ca4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131ca9:	c9                   	leave  
f0131caa:	c3                   	ret    

f0131cab <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131cab:	55                   	push   %ebp
f0131cac:	89 e5                	mov    %esp,%ebp
f0131cae:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131cb1:	90                   	nop
f0131cb2:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131cb9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cbc:	89 c2                	mov    %eax,%edx
f0131cbe:	ec                   	in     (%dx),%al
f0131cbf:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131cc2:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131cc5:	0f b6 c0             	movzbl %al,%eax
f0131cc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131ccb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cce:	25 c0 00 00 00       	and    $0xc0,%eax
f0131cd3:	83 f8 40             	cmp    $0x40,%eax
f0131cd6:	75 da                	jne    f0131cb2 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131cd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131cdc:	74 11                	je     f0131cef <ide_wait_ready+0x44>
f0131cde:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ce1:	83 e0 21             	and    $0x21,%eax
f0131ce4:	85 c0                	test   %eax,%eax
f0131ce6:	74 07                	je     f0131cef <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131ce8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131ced:	eb 05                	jmp    f0131cf4 <ide_wait_ready+0x49>
	}
	return 0;
f0131cef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131cf4:	c9                   	leave  
f0131cf5:	c3                   	ret    

f0131cf6 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131cf6:	55                   	push   %ebp
f0131cf7:	89 e5                	mov    %esp,%ebp
f0131cf9:	57                   	push   %edi
f0131cfa:	53                   	push   %ebx
f0131cfb:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131cfe:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131d05:	76 16                	jbe    f0131d1d <ide_read+0x27>
f0131d07:	68 03 d8 13 f0       	push   $0xf013d803
f0131d0c:	68 10 d8 13 f0       	push   $0xf013d810
f0131d11:	6a 25                	push   $0x25
f0131d13:	68 25 d8 13 f0       	push   $0xf013d825
f0131d18:	e8 e8 e4 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131d1d:	83 ec 0c             	sub    $0xc,%esp
f0131d20:	6a 00                	push   $0x0
f0131d22:	e8 84 ff ff ff       	call   f0131cab <ide_wait_ready>
f0131d27:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131d2a:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d2d:	0f b6 c0             	movzbl %al,%eax
f0131d30:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131d37:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131d3a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131d3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131d40:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131d41:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d44:	0f b6 c0             	movzbl %al,%eax
f0131d47:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131d4e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131d51:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131d54:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131d57:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131d58:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d5b:	c1 e8 08             	shr    $0x8,%eax
f0131d5e:	0f b6 c0             	movzbl %al,%eax
f0131d61:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131d68:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131d6b:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131d6e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d71:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131d72:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d75:	c1 e8 10             	shr    $0x10,%eax
f0131d78:	0f b6 c0             	movzbl %al,%eax
f0131d7b:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131d82:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131d85:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131d88:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131d8b:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131d8c:	a1 ac ec 88 f0       	mov    0xf088ecac,%eax
f0131d91:	83 e0 01             	and    $0x1,%eax
f0131d94:	c1 e0 04             	shl    $0x4,%eax
f0131d97:	88 c2                	mov    %al,%dl
f0131d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d9c:	c1 e8 18             	shr    $0x18,%eax
f0131d9f:	83 e0 0f             	and    $0xf,%eax
f0131da2:	09 d0                	or     %edx,%eax
f0131da4:	83 c8 e0             	or     $0xffffffe0,%eax
f0131da7:	0f b6 c0             	movzbl %al,%eax
f0131daa:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131db1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131db4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131db7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131dba:	ee                   	out    %al,(%dx)
f0131dbb:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131dc2:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131dc6:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131dc9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131dcc:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131dcd:	eb 55                	jmp    f0131e24 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131dcf:	83 ec 0c             	sub    $0xc,%esp
f0131dd2:	6a 01                	push   $0x1
f0131dd4:	e8 d2 fe ff ff       	call   f0131cab <ide_wait_ready>
f0131dd9:	83 c4 10             	add    $0x10,%esp
f0131ddc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131ddf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131de3:	79 05                	jns    f0131dea <ide_read+0xf4>
			return r;
f0131de5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131de8:	eb 45                	jmp    f0131e2f <ide_read+0x139>
f0131dea:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131df1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131df4:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131df7:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131dfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e01:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131e04:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131e07:	89 cb                	mov    %ecx,%ebx
f0131e09:	89 df                	mov    %ebx,%edi
f0131e0b:	89 c1                	mov    %eax,%ecx
f0131e0d:	fc                   	cld    
f0131e0e:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131e10:	89 c8                	mov    %ecx,%eax
f0131e12:	89 fb                	mov    %edi,%ebx
f0131e14:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131e17:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131e1a:	ff 4d 10             	decl   0x10(%ebp)
f0131e1d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131e24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e28:	75 a5                	jne    f0131dcf <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131e2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e2f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131e32:	5b                   	pop    %ebx
f0131e33:	5f                   	pop    %edi
f0131e34:	5d                   	pop    %ebp
f0131e35:	c3                   	ret    

f0131e36 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131e36:	55                   	push   %ebp
f0131e37:	89 e5                	mov    %esp,%ebp
f0131e39:	56                   	push   %esi
f0131e3a:	53                   	push   %ebx
f0131e3b:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131e3e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131e45:	76 16                	jbe    f0131e5d <ide_write+0x27>
f0131e47:	68 03 d8 13 f0       	push   $0xf013d803
f0131e4c:	68 10 d8 13 f0       	push   $0xf013d810
f0131e51:	6a 3e                	push   $0x3e
f0131e53:	68 25 d8 13 f0       	push   $0xf013d825
f0131e58:	e8 a8 e3 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131e5d:	83 ec 0c             	sub    $0xc,%esp
f0131e60:	6a 00                	push   $0x0
f0131e62:	e8 44 fe ff ff       	call   f0131cab <ide_wait_ready>
f0131e67:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131e6a:	8b 45 10             	mov    0x10(%ebp),%eax
f0131e6d:	0f b6 c0             	movzbl %al,%eax
f0131e70:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131e77:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131e7a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131e7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131e80:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131e81:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e84:	0f b6 c0             	movzbl %al,%eax
f0131e87:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131e8e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131e91:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131e94:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131e97:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131e98:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e9b:	c1 e8 08             	shr    $0x8,%eax
f0131e9e:	0f b6 c0             	movzbl %al,%eax
f0131ea1:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131ea8:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131eab:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131eae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131eb1:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eb5:	c1 e8 10             	shr    $0x10,%eax
f0131eb8:	0f b6 c0             	movzbl %al,%eax
f0131ebb:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131ec2:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131ec5:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131ec8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131ecb:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131ecc:	a1 ac ec 88 f0       	mov    0xf088ecac,%eax
f0131ed1:	83 e0 01             	and    $0x1,%eax
f0131ed4:	c1 e0 04             	shl    $0x4,%eax
f0131ed7:	88 c2                	mov    %al,%dl
f0131ed9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131edc:	c1 e8 18             	shr    $0x18,%eax
f0131edf:	83 e0 0f             	and    $0xf,%eax
f0131ee2:	09 d0                	or     %edx,%eax
f0131ee4:	83 c8 e0             	or     $0xffffffe0,%eax
f0131ee7:	0f b6 c0             	movzbl %al,%eax
f0131eea:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131ef1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131ef4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131ef7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131efa:	ee                   	out    %al,(%dx)
f0131efb:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131f02:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131f06:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131f09:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131f0c:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131f0d:	eb 55                	jmp    f0131f64 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131f0f:	83 ec 0c             	sub    $0xc,%esp
f0131f12:	6a 01                	push   $0x1
f0131f14:	e8 92 fd ff ff       	call   f0131cab <ide_wait_ready>
f0131f19:	83 c4 10             	add    $0x10,%esp
f0131f1c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131f1f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131f23:	79 05                	jns    f0131f2a <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131f25:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131f28:	eb 45                	jmp    f0131f6f <ide_write+0x139>
f0131f2a:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131f31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f34:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131f37:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131f3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f41:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131f44:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131f47:	89 cb                	mov    %ecx,%ebx
f0131f49:	89 de                	mov    %ebx,%esi
f0131f4b:	89 c1                	mov    %eax,%ecx
f0131f4d:	fc                   	cld    
f0131f4e:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131f50:	89 c8                	mov    %ecx,%eax
f0131f52:	89 f3                	mov    %esi,%ebx
f0131f54:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131f57:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131f5a:	ff 4d 10             	decl   0x10(%ebp)
f0131f5d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131f64:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131f68:	75 a5                	jne    f0131f0f <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131f6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131f72:	5b                   	pop    %ebx
f0131f73:	5e                   	pop    %esi
f0131f74:	5d                   	pop    %ebp
f0131f75:	c3                   	ret    

f0131f76 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131f76:	55                   	push   %ebp
f0131f77:	89 e5                	mov    %esp,%ebp
f0131f79:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131f7c:	83 ec 0c             	sub    $0xc,%esp
f0131f7f:	68 30 d8 13 f0       	push   $0xf013d830
f0131f84:	e8 85 ed fc ff       	call   f0100d0e <cprintf>
f0131f89:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131f8c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131f93:	83 ec 0c             	sub    $0xc,%esp
f0131f96:	68 5c d8 13 f0       	push   $0xf013d85c
f0131f9b:	e8 6e ed fc ff       	call   f0100d0e <cprintf>
f0131fa0:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131fa3:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131fa7:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0131fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131faf:	eb 56                	jmp    f0132007 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131fb1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131fb5:	74 1c                	je     f0131fd3 <print_mem_block_lists+0x5d>
f0131fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fba:	8b 50 08             	mov    0x8(%eax),%edx
f0131fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fc0:	8b 48 08             	mov    0x8(%eax),%ecx
f0131fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fc9:	01 c8                	add    %ecx,%eax
f0131fcb:	39 c2                	cmp    %eax,%edx
f0131fcd:	73 04                	jae    f0131fd3 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131fcf:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd6:	8b 50 08             	mov    0x8(%eax),%edx
f0131fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fdf:	01 c2                	add    %eax,%edx
f0131fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe4:	8b 40 08             	mov    0x8(%eax),%eax
f0131fe7:	83 ec 04             	sub    $0x4,%esp
f0131fea:	52                   	push   %edx
f0131feb:	50                   	push   %eax
f0131fec:	68 71 d8 13 f0       	push   $0xf013d871
f0131ff1:	e8 18 ed fc ff       	call   f0100d0e <cprintf>
f0131ff6:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ffc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131fff:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132004:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013200b:	74 07                	je     f0132014 <print_mem_block_lists+0x9e>
f013200d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132010:	8b 00                	mov    (%eax),%eax
f0132012:	eb 05                	jmp    f0132019 <print_mem_block_lists+0xa3>
f0132014:	b8 00 00 00 00       	mov    $0x0,%eax
f0132019:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f013201e:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132023:	85 c0                	test   %eax,%eax
f0132025:	75 8a                	jne    f0131fb1 <print_mem_block_lists+0x3b>
f0132027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013202b:	75 84                	jne    f0131fb1 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013202d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132031:	75 10                	jne    f0132043 <print_mem_block_lists+0xcd>
f0132033:	83 ec 0c             	sub    $0xc,%esp
f0132036:	68 80 d8 13 f0       	push   $0xf013d880
f013203b:	e8 ce ec fc ff       	call   f0100d0e <cprintf>
f0132040:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0132043:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f013204a:	83 ec 0c             	sub    $0xc,%esp
f013204d:	68 a4 d8 13 f0       	push   $0xf013d8a4
f0132052:	e8 b7 ec fc ff       	call   f0100d0e <cprintf>
f0132057:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f013205a:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013205e:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f0132063:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132066:	eb 56                	jmp    f01320be <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132068:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013206c:	74 1c                	je     f013208a <print_mem_block_lists+0x114>
f013206e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132071:	8b 50 08             	mov    0x8(%eax),%edx
f0132074:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132077:	8b 48 08             	mov    0x8(%eax),%ecx
f013207a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013207d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132080:	01 c8                	add    %ecx,%eax
f0132082:	39 c2                	cmp    %eax,%edx
f0132084:	73 04                	jae    f013208a <print_mem_block_lists+0x114>
			sorted = 0 ;
f0132086:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f013208a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013208d:	8b 50 08             	mov    0x8(%eax),%edx
f0132090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132093:	8b 40 0c             	mov    0xc(%eax),%eax
f0132096:	01 c2                	add    %eax,%edx
f0132098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013209b:	8b 40 08             	mov    0x8(%eax),%eax
f013209e:	83 ec 04             	sub    $0x4,%esp
f01320a1:	52                   	push   %edx
f01320a2:	50                   	push   %eax
f01320a3:	68 71 d8 13 f0       	push   $0xf013d871
f01320a8:	e8 61 ec fc ff       	call   f0100d0e <cprintf>
f01320ad:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01320b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01320b6:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01320bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320c2:	74 07                	je     f01320cb <print_mem_block_lists+0x155>
f01320c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c7:	8b 00                	mov    (%eax),%eax
f01320c9:	eb 05                	jmp    f01320d0 <print_mem_block_lists+0x15a>
f01320cb:	b8 00 00 00 00       	mov    $0x0,%eax
f01320d0:	a3 d0 ec 88 f0       	mov    %eax,0xf088ecd0
f01320d5:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01320da:	85 c0                	test   %eax,%eax
f01320dc:	75 8a                	jne    f0132068 <print_mem_block_lists+0xf2>
f01320de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320e2:	75 84                	jne    f0132068 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01320e4:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01320e8:	75 10                	jne    f01320fa <print_mem_block_lists+0x184>
f01320ea:	83 ec 0c             	sub    $0xc,%esp
f01320ed:	68 bc d8 13 f0       	push   $0xf013d8bc
f01320f2:	e8 17 ec fc ff       	call   f0100d0e <cprintf>
f01320f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f01320fa:	83 ec 0c             	sub    $0xc,%esp
f01320fd:	68 30 d8 13 f0       	push   $0xf013d830
f0132102:	e8 07 ec fc ff       	call   f0100d0e <cprintf>
f0132107:	83 c4 10             	add    $0x10,%esp

}
f013210a:	90                   	nop
f013210b:	c9                   	leave  
f013210c:	c3                   	ret    

f013210d <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f013210d:	55                   	push   %ebp
f013210e:	89 e5                	mov    %esp,%ebp
f0132110:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0132113:	c7 05 98 ed 88 f0 00 	movl   $0x0,0xf088ed98
f013211a:	00 00 00 
f013211d:	c7 05 9c ed 88 f0 00 	movl   $0x0,0xf088ed9c
f0132124:	00 00 00 
f0132127:	c7 05 a4 ed 88 f0 00 	movl   $0x0,0xf088eda4
f013212e:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0132131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132138:	e9 9e 00 00 00       	jmp    f01321db <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f013213d:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f0132142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132145:	c1 e2 04             	shl    $0x4,%edx
f0132148:	01 d0                	add    %edx,%eax
f013214a:	85 c0                	test   %eax,%eax
f013214c:	75 14                	jne    f0132162 <initialize_MemBlocksList+0x55>
f013214e:	83 ec 04             	sub    $0x4,%esp
f0132151:	68 e4 d8 13 f0       	push   $0xf013d8e4
f0132156:	6a 46                	push   $0x46
f0132158:	68 07 d9 13 f0       	push   $0xf013d907
f013215d:	e8 a3 e0 fc ff       	call   f0100205 <_panic>
f0132162:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f0132167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013216a:	c1 e2 04             	shl    $0x4,%edx
f013216d:	01 d0                	add    %edx,%eax
f013216f:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f0132175:	89 10                	mov    %edx,(%eax)
f0132177:	8b 00                	mov    (%eax),%eax
f0132179:	85 c0                	test   %eax,%eax
f013217b:	74 18                	je     f0132195 <initialize_MemBlocksList+0x88>
f013217d:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132182:	8b 15 d8 ec 88 f0    	mov    0xf088ecd8,%edx
f0132188:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013218b:	c1 e1 04             	shl    $0x4,%ecx
f013218e:	01 ca                	add    %ecx,%edx
f0132190:	89 50 04             	mov    %edx,0x4(%eax)
f0132193:	eb 12                	jmp    f01321a7 <initialize_MemBlocksList+0x9a>
f0132195:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f013219a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013219d:	c1 e2 04             	shl    $0x4,%edx
f01321a0:	01 d0                	add    %edx,%eax
f01321a2:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01321a7:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f01321ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321af:	c1 e2 04             	shl    $0x4,%edx
f01321b2:	01 d0                	add    %edx,%eax
f01321b4:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01321b9:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f01321be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321c1:	c1 e2 04             	shl    $0x4,%edx
f01321c4:	01 d0                	add    %edx,%eax
f01321c6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321cd:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01321d2:	40                   	inc    %eax
f01321d3:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01321d8:	ff 45 f4             	incl   -0xc(%ebp)
f01321db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321de:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321e1:	0f 82 56 ff ff ff    	jb     f013213d <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01321e7:	90                   	nop
f01321e8:	c9                   	leave  
f01321e9:	c3                   	ret    

f01321ea <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01321ea:	55                   	push   %ebp
f01321eb:	89 e5                	mov    %esp,%ebp
f01321ed:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01321f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01321f3:	8b 00                	mov    (%eax),%eax
f01321f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01321f8:	eb 19                	jmp    f0132213 <find_block+0x29>
	{
		if(va==point->sva)
f01321fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01321fd:	8b 40 08             	mov    0x8(%eax),%eax
f0132200:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132203:	75 05                	jne    f013220a <find_block+0x20>
		   return point;
f0132205:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132208:	eb 36                	jmp    f0132240 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f013220a:	8b 45 08             	mov    0x8(%ebp),%eax
f013220d:	8b 40 08             	mov    0x8(%eax),%eax
f0132210:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132213:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132217:	74 07                	je     f0132220 <find_block+0x36>
f0132219:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013221c:	8b 00                	mov    (%eax),%eax
f013221e:	eb 05                	jmp    f0132225 <find_block+0x3b>
f0132220:	b8 00 00 00 00       	mov    $0x0,%eax
f0132225:	8b 55 08             	mov    0x8(%ebp),%edx
f0132228:	89 42 08             	mov    %eax,0x8(%edx)
f013222b:	8b 45 08             	mov    0x8(%ebp),%eax
f013222e:	8b 40 08             	mov    0x8(%eax),%eax
f0132231:	85 c0                	test   %eax,%eax
f0132233:	75 c5                	jne    f01321fa <find_block+0x10>
f0132235:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132239:	75 bf                	jne    f01321fa <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f013223b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132240:	c9                   	leave  
f0132241:	c3                   	ret    

f0132242 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0132242:	55                   	push   %ebp
f0132243:	89 e5                	mov    %esp,%ebp
f0132245:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0132248:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f013224d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0132250:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f0132255:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0132258:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013225b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f013225e:	74 24                	je     f0132284 <insert_sorted_allocList+0x42>
f0132260:	8b 45 08             	mov    0x8(%ebp),%eax
f0132263:	8b 50 08             	mov    0x8(%eax),%edx
f0132266:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132269:	8b 40 08             	mov    0x8(%eax),%eax
f013226c:	39 c2                	cmp    %eax,%edx
f013226e:	76 14                	jbe    f0132284 <insert_sorted_allocList+0x42>
f0132270:	8b 45 08             	mov    0x8(%ebp),%eax
f0132273:	8b 50 08             	mov    0x8(%eax),%edx
f0132276:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132279:	8b 40 08             	mov    0x8(%eax),%eax
f013227c:	39 c2                	cmp    %eax,%edx
f013227e:	0f 82 60 01 00 00    	jb     f01323e4 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0132284:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132288:	75 65                	jne    f01322ef <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f013228a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013228e:	75 14                	jne    f01322a4 <insert_sorted_allocList+0x62>
f0132290:	83 ec 04             	sub    $0x4,%esp
f0132293:	68 e4 d8 13 f0       	push   $0xf013d8e4
f0132298:	6a 6b                	push   $0x6b
f013229a:	68 07 d9 13 f0       	push   $0xf013d907
f013229f:	e8 61 df fc ff       	call   f0100205 <_panic>
f01322a4:	8b 15 c8 ec 88 f0    	mov    0xf088ecc8,%edx
f01322aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01322ad:	89 10                	mov    %edx,(%eax)
f01322af:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b2:	8b 00                	mov    (%eax),%eax
f01322b4:	85 c0                	test   %eax,%eax
f01322b6:	74 0d                	je     f01322c5 <insert_sorted_allocList+0x83>
f01322b8:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f01322bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01322c0:	89 50 04             	mov    %edx,0x4(%eax)
f01322c3:	eb 08                	jmp    f01322cd <insert_sorted_allocList+0x8b>
f01322c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01322c8:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f01322cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d0:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f01322d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322df:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01322e4:	40                   	inc    %eax
f01322e5:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01322ea:	e9 dc 01 00 00       	jmp    f01324cb <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01322ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01322f2:	8b 50 08             	mov    0x8(%eax),%edx
f01322f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322f8:	8b 40 08             	mov    0x8(%eax),%eax
f01322fb:	39 c2                	cmp    %eax,%edx
f01322fd:	77 6c                	ja     f013236b <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f01322ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132303:	74 06                	je     f013230b <insert_sorted_allocList+0xc9>
f0132305:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132309:	75 14                	jne    f013231f <insert_sorted_allocList+0xdd>
f013230b:	83 ec 04             	sub    $0x4,%esp
f013230e:	68 20 d9 13 f0       	push   $0xf013d920
f0132313:	6a 6f                	push   $0x6f
f0132315:	68 07 d9 13 f0       	push   $0xf013d907
f013231a:	e8 e6 de fc ff       	call   f0100205 <_panic>
f013231f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132322:	8b 50 04             	mov    0x4(%eax),%edx
f0132325:	8b 45 08             	mov    0x8(%ebp),%eax
f0132328:	89 50 04             	mov    %edx,0x4(%eax)
f013232b:	8b 45 08             	mov    0x8(%ebp),%eax
f013232e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132331:	89 10                	mov    %edx,(%eax)
f0132333:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132336:	8b 40 04             	mov    0x4(%eax),%eax
f0132339:	85 c0                	test   %eax,%eax
f013233b:	74 0d                	je     f013234a <insert_sorted_allocList+0x108>
f013233d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132340:	8b 40 04             	mov    0x4(%eax),%eax
f0132343:	8b 55 08             	mov    0x8(%ebp),%edx
f0132346:	89 10                	mov    %edx,(%eax)
f0132348:	eb 08                	jmp    f0132352 <insert_sorted_allocList+0x110>
f013234a:	8b 45 08             	mov    0x8(%ebp),%eax
f013234d:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f0132352:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132355:	8b 55 08             	mov    0x8(%ebp),%edx
f0132358:	89 50 04             	mov    %edx,0x4(%eax)
f013235b:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0132360:	40                   	inc    %eax
f0132361:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0132366:	e9 60 01 00 00       	jmp    f01324cb <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f013236b:	8b 45 08             	mov    0x8(%ebp),%eax
f013236e:	8b 50 08             	mov    0x8(%eax),%edx
f0132371:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132374:	8b 40 08             	mov    0x8(%eax),%eax
f0132377:	39 c2                	cmp    %eax,%edx
f0132379:	0f 82 4c 01 00 00    	jb     f01324cb <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f013237f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132383:	75 14                	jne    f0132399 <insert_sorted_allocList+0x157>
f0132385:	83 ec 04             	sub    $0x4,%esp
f0132388:	68 58 d9 13 f0       	push   $0xf013d958
f013238d:	6a 73                	push   $0x73
f013238f:	68 07 d9 13 f0       	push   $0xf013d907
f0132394:	e8 6c de fc ff       	call   f0100205 <_panic>
f0132399:	8b 15 cc ec 88 f0    	mov    0xf088eccc,%edx
f013239f:	8b 45 08             	mov    0x8(%ebp),%eax
f01323a2:	89 50 04             	mov    %edx,0x4(%eax)
f01323a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01323a8:	8b 40 04             	mov    0x4(%eax),%eax
f01323ab:	85 c0                	test   %eax,%eax
f01323ad:	74 0c                	je     f01323bb <insert_sorted_allocList+0x179>
f01323af:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f01323b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01323b7:	89 10                	mov    %edx,(%eax)
f01323b9:	eb 08                	jmp    f01323c3 <insert_sorted_allocList+0x181>
f01323bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01323be:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f01323c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01323c6:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f01323cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01323ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01323d4:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01323d9:	40                   	inc    %eax
f01323da:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01323df:	e9 e7 00 00 00       	jmp    f01324cb <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f01323e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f01323ea:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01323f1:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f01323f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323f9:	e9 9d 00 00 00       	jmp    f013249b <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f01323fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132401:	8b 00                	mov    (%eax),%eax
f0132403:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0132406:	8b 45 08             	mov    0x8(%ebp),%eax
f0132409:	8b 50 08             	mov    0x8(%eax),%edx
f013240c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240f:	8b 40 08             	mov    0x8(%eax),%eax
f0132412:	39 c2                	cmp    %eax,%edx
f0132414:	76 7d                	jbe    f0132493 <insert_sorted_allocList+0x251>
f0132416:	8b 45 08             	mov    0x8(%ebp),%eax
f0132419:	8b 50 08             	mov    0x8(%eax),%edx
f013241c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013241f:	8b 40 08             	mov    0x8(%eax),%eax
f0132422:	39 c2                	cmp    %eax,%edx
f0132424:	73 6d                	jae    f0132493 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132426:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013242a:	74 06                	je     f0132432 <insert_sorted_allocList+0x1f0>
f013242c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132430:	75 14                	jne    f0132446 <insert_sorted_allocList+0x204>
f0132432:	83 ec 04             	sub    $0x4,%esp
f0132435:	68 7c d9 13 f0       	push   $0xf013d97c
f013243a:	6a 7f                	push   $0x7f
f013243c:	68 07 d9 13 f0       	push   $0xf013d907
f0132441:	e8 bf dd fc ff       	call   f0100205 <_panic>
f0132446:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132449:	8b 10                	mov    (%eax),%edx
f013244b:	8b 45 08             	mov    0x8(%ebp),%eax
f013244e:	89 10                	mov    %edx,(%eax)
f0132450:	8b 45 08             	mov    0x8(%ebp),%eax
f0132453:	8b 00                	mov    (%eax),%eax
f0132455:	85 c0                	test   %eax,%eax
f0132457:	74 0b                	je     f0132464 <insert_sorted_allocList+0x222>
f0132459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013245c:	8b 00                	mov    (%eax),%eax
f013245e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132461:	89 50 04             	mov    %edx,0x4(%eax)
f0132464:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132467:	8b 55 08             	mov    0x8(%ebp),%edx
f013246a:	89 10                	mov    %edx,(%eax)
f013246c:	8b 45 08             	mov    0x8(%ebp),%eax
f013246f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132472:	89 50 04             	mov    %edx,0x4(%eax)
f0132475:	8b 45 08             	mov    0x8(%ebp),%eax
f0132478:	8b 00                	mov    (%eax),%eax
f013247a:	85 c0                	test   %eax,%eax
f013247c:	75 08                	jne    f0132486 <insert_sorted_allocList+0x244>
f013247e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132481:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f0132486:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f013248b:	40                   	inc    %eax
f013248c:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
				break;
f0132491:	eb 39                	jmp    f01324cc <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0132493:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f0132498:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013249b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013249f:	74 07                	je     f01324a8 <insert_sorted_allocList+0x266>
f01324a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a4:	8b 00                	mov    (%eax),%eax
f01324a6:	eb 05                	jmp    f01324ad <insert_sorted_allocList+0x26b>
f01324a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01324ad:	a3 d0 ec 88 f0       	mov    %eax,0xf088ecd0
f01324b2:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01324b7:	85 c0                	test   %eax,%eax
f01324b9:	0f 85 3f ff ff ff    	jne    f01323fe <insert_sorted_allocList+0x1bc>
f01324bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324c3:	0f 85 35 ff ff ff    	jne    f01323fe <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01324c9:	eb 01                	jmp    f01324cc <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01324cb:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01324cc:	90                   	nop
f01324cd:	c9                   	leave  
f01324ce:	c3                   	ret    

f01324cf <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f01324cf:	55                   	push   %ebp
f01324d0:	89 e5                	mov    %esp,%ebp
f01324d2:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01324d5:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01324da:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324dd:	e9 85 01 00 00       	jmp    f0132667 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f01324e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01324e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01324eb:	0f 82 6e 01 00 00    	jb     f013265f <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01324f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f4:	8b 40 0c             	mov    0xc(%eax),%eax
f01324f7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01324fa:	0f 85 8a 00 00 00    	jne    f013258a <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0132500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132504:	75 17                	jne    f013251d <alloc_block_FF+0x4e>
f0132506:	83 ec 04             	sub    $0x4,%esp
f0132509:	68 b0 d9 13 f0       	push   $0xf013d9b0
f013250e:	68 93 00 00 00       	push   $0x93
f0132513:	68 07 d9 13 f0       	push   $0xf013d907
f0132518:	e8 e8 dc fc ff       	call   f0100205 <_panic>
f013251d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132520:	8b 00                	mov    (%eax),%eax
f0132522:	85 c0                	test   %eax,%eax
f0132524:	74 10                	je     f0132536 <alloc_block_FF+0x67>
f0132526:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132529:	8b 00                	mov    (%eax),%eax
f013252b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013252e:	8b 52 04             	mov    0x4(%edx),%edx
f0132531:	89 50 04             	mov    %edx,0x4(%eax)
f0132534:	eb 0b                	jmp    f0132541 <alloc_block_FF+0x72>
f0132536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132539:	8b 40 04             	mov    0x4(%eax),%eax
f013253c:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132541:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132544:	8b 40 04             	mov    0x4(%eax),%eax
f0132547:	85 c0                	test   %eax,%eax
f0132549:	74 0f                	je     f013255a <alloc_block_FF+0x8b>
f013254b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013254e:	8b 40 04             	mov    0x4(%eax),%eax
f0132551:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132554:	8b 12                	mov    (%edx),%edx
f0132556:	89 10                	mov    %edx,(%eax)
f0132558:	eb 0a                	jmp    f0132564 <alloc_block_FF+0x95>
f013255a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255d:	8b 00                	mov    (%eax),%eax
f013255f:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132564:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132567:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013256d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132570:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132577:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f013257c:	48                   	dec    %eax
f013257d:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			   return  point;
f0132582:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132585:	e9 10 01 00 00       	jmp    f013269a <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f013258a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013258d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132590:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132593:	0f 86 c6 00 00 00    	jbe    f013265f <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132599:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f013259e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01325a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325a4:	8b 50 08             	mov    0x8(%eax),%edx
f01325a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325aa:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01325ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325b0:	8b 55 08             	mov    0x8(%ebp),%edx
f01325b3:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01325b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325ba:	75 17                	jne    f01325d3 <alloc_block_FF+0x104>
f01325bc:	83 ec 04             	sub    $0x4,%esp
f01325bf:	68 b0 d9 13 f0       	push   $0xf013d9b0
f01325c4:	68 9b 00 00 00       	push   $0x9b
f01325c9:	68 07 d9 13 f0       	push   $0xf013d907
f01325ce:	e8 32 dc fc ff       	call   f0100205 <_panic>
f01325d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325d6:	8b 00                	mov    (%eax),%eax
f01325d8:	85 c0                	test   %eax,%eax
f01325da:	74 10                	je     f01325ec <alloc_block_FF+0x11d>
f01325dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325df:	8b 00                	mov    (%eax),%eax
f01325e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325e4:	8b 52 04             	mov    0x4(%edx),%edx
f01325e7:	89 50 04             	mov    %edx,0x4(%eax)
f01325ea:	eb 0b                	jmp    f01325f7 <alloc_block_FF+0x128>
f01325ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325ef:	8b 40 04             	mov    0x4(%eax),%eax
f01325f2:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01325f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325fa:	8b 40 04             	mov    0x4(%eax),%eax
f01325fd:	85 c0                	test   %eax,%eax
f01325ff:	74 0f                	je     f0132610 <alloc_block_FF+0x141>
f0132601:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132604:	8b 40 04             	mov    0x4(%eax),%eax
f0132607:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013260a:	8b 12                	mov    (%edx),%edx
f013260c:	89 10                	mov    %edx,(%eax)
f013260e:	eb 0a                	jmp    f013261a <alloc_block_FF+0x14b>
f0132610:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132613:	8b 00                	mov    (%eax),%eax
f0132615:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f013261a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013261d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132623:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132626:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013262d:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132632:	48                   	dec    %eax
f0132633:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
			   point->sva += size;
f0132638:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013263b:	8b 50 08             	mov    0x8(%eax),%edx
f013263e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132641:	01 c2                	add    %eax,%edx
f0132643:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132646:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132649:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013264c:	8b 40 0c             	mov    0xc(%eax),%eax
f013264f:	2b 45 08             	sub    0x8(%ebp),%eax
f0132652:	89 c2                	mov    %eax,%edx
f0132654:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132657:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f013265a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013265d:	eb 3b                	jmp    f013269a <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013265f:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132664:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132667:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013266b:	74 07                	je     f0132674 <alloc_block_FF+0x1a5>
f013266d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132670:	8b 00                	mov    (%eax),%eax
f0132672:	eb 05                	jmp    f0132679 <alloc_block_FF+0x1aa>
f0132674:	b8 00 00 00 00       	mov    $0x0,%eax
f0132679:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f013267e:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132683:	85 c0                	test   %eax,%eax
f0132685:	0f 85 57 fe ff ff    	jne    f01324e2 <alloc_block_FF+0x13>
f013268b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013268f:	0f 85 4d fe ff ff    	jne    f01324e2 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0132695:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013269a:	c9                   	leave  
f013269b:	c3                   	ret    

f013269c <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f013269c:	55                   	push   %ebp
f013269d:	89 e5                	mov    %esp,%ebp
f013269f:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01326a2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01326a9:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01326ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01326b1:	e9 df 00 00 00       	jmp    f0132795 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01326b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326b9:	8b 40 0c             	mov    0xc(%eax),%eax
f01326bc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01326bf:	0f 82 c8 00 00 00    	jb     f013278d <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f01326c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326c8:	8b 40 0c             	mov    0xc(%eax),%eax
f01326cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01326ce:	0f 85 8a 00 00 00    	jne    f013275e <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01326d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326d8:	75 17                	jne    f01326f1 <alloc_block_BF+0x55>
f01326da:	83 ec 04             	sub    $0x4,%esp
f01326dd:	68 b0 d9 13 f0       	push   $0xf013d9b0
f01326e2:	68 b7 00 00 00       	push   $0xb7
f01326e7:	68 07 d9 13 f0       	push   $0xf013d907
f01326ec:	e8 14 db fc ff       	call   f0100205 <_panic>
f01326f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326f4:	8b 00                	mov    (%eax),%eax
f01326f6:	85 c0                	test   %eax,%eax
f01326f8:	74 10                	je     f013270a <alloc_block_BF+0x6e>
f01326fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326fd:	8b 00                	mov    (%eax),%eax
f01326ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132702:	8b 52 04             	mov    0x4(%edx),%edx
f0132705:	89 50 04             	mov    %edx,0x4(%eax)
f0132708:	eb 0b                	jmp    f0132715 <alloc_block_BF+0x79>
f013270a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013270d:	8b 40 04             	mov    0x4(%eax),%eax
f0132710:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132715:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132718:	8b 40 04             	mov    0x4(%eax),%eax
f013271b:	85 c0                	test   %eax,%eax
f013271d:	74 0f                	je     f013272e <alloc_block_BF+0x92>
f013271f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132722:	8b 40 04             	mov    0x4(%eax),%eax
f0132725:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132728:	8b 12                	mov    (%edx),%edx
f013272a:	89 10                	mov    %edx,(%eax)
f013272c:	eb 0a                	jmp    f0132738 <alloc_block_BF+0x9c>
f013272e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132731:	8b 00                	mov    (%eax),%eax
f0132733:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132738:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013273b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132741:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132744:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013274b:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132750:	48                   	dec    %eax
f0132751:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			   return currentMemBlock;
f0132756:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132759:	e9 4d 01 00 00       	jmp    f01328ab <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f013275e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132761:	8b 40 0c             	mov    0xc(%eax),%eax
f0132764:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132767:	76 24                	jbe    f013278d <alloc_block_BF+0xf1>
f0132769:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013276c:	8b 40 0c             	mov    0xc(%eax),%eax
f013276f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132772:	73 19                	jae    f013278d <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0132774:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f013277b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013277e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132781:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0132784:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132787:	8b 40 08             	mov    0x8(%eax),%eax
f013278a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f013278d:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132792:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132795:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132799:	74 07                	je     f01327a2 <alloc_block_BF+0x106>
f013279b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013279e:	8b 00                	mov    (%eax),%eax
f01327a0:	eb 05                	jmp    f01327a7 <alloc_block_BF+0x10b>
f01327a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01327a7:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f01327ac:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f01327b1:	85 c0                	test   %eax,%eax
f01327b3:	0f 85 fd fe ff ff    	jne    f01326b6 <alloc_block_BF+0x1a>
f01327b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327bd:	0f 85 f3 fe ff ff    	jne    f01326b6 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01327c3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01327c7:	0f 84 d9 00 00 00    	je     f01328a6 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01327cd:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01327d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01327d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01327d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01327db:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01327de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01327e1:	8b 55 08             	mov    0x8(%ebp),%edx
f01327e4:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01327e7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01327eb:	75 17                	jne    f0132804 <alloc_block_BF+0x168>
f01327ed:	83 ec 04             	sub    $0x4,%esp
f01327f0:	68 b0 d9 13 f0       	push   $0xf013d9b0
f01327f5:	68 c7 00 00 00       	push   $0xc7
f01327fa:	68 07 d9 13 f0       	push   $0xf013d907
f01327ff:	e8 01 da fc ff       	call   f0100205 <_panic>
f0132804:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132807:	8b 00                	mov    (%eax),%eax
f0132809:	85 c0                	test   %eax,%eax
f013280b:	74 10                	je     f013281d <alloc_block_BF+0x181>
f013280d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132810:	8b 00                	mov    (%eax),%eax
f0132812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132815:	8b 52 04             	mov    0x4(%edx),%edx
f0132818:	89 50 04             	mov    %edx,0x4(%eax)
f013281b:	eb 0b                	jmp    f0132828 <alloc_block_BF+0x18c>
f013281d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132820:	8b 40 04             	mov    0x4(%eax),%eax
f0132823:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132828:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013282b:	8b 40 04             	mov    0x4(%eax),%eax
f013282e:	85 c0                	test   %eax,%eax
f0132830:	74 0f                	je     f0132841 <alloc_block_BF+0x1a5>
f0132832:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132835:	8b 40 04             	mov    0x4(%eax),%eax
f0132838:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013283b:	8b 12                	mov    (%edx),%edx
f013283d:	89 10                	mov    %edx,(%eax)
f013283f:	eb 0a                	jmp    f013284b <alloc_block_BF+0x1af>
f0132841:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132844:	8b 00                	mov    (%eax),%eax
f0132846:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f013284b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013284e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132854:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132857:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013285e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132863:	48                   	dec    %eax
f0132864:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132869:	83 ec 08             	sub    $0x8,%esp
f013286c:	ff 75 ec             	pushl  -0x14(%ebp)
f013286f:	68 64 ed 88 f0       	push   $0xf088ed64
f0132874:	e8 71 f9 ff ff       	call   f01321ea <find_block>
f0132879:	83 c4 10             	add    $0x10,%esp
f013287c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f013287f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132882:	8b 50 08             	mov    0x8(%eax),%edx
f0132885:	8b 45 08             	mov    0x8(%ebp),%eax
f0132888:	01 c2                	add    %eax,%edx
f013288a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013288d:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0132890:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132893:	8b 40 0c             	mov    0xc(%eax),%eax
f0132896:	2b 45 08             	sub    0x8(%ebp),%eax
f0132899:	89 c2                	mov    %eax,%edx
f013289b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013289e:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01328a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01328a4:	eb 05                	jmp    f01328ab <alloc_block_BF+0x20f>
	}
	return NULL;
f01328a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01328ab:	c9                   	leave  
f01328ac:	c3                   	ret    

f01328ad <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01328ad:	55                   	push   %ebp
f01328ae:	89 e5                	mov    %esp,%ebp
f01328b0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f01328b3:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f01328b8:	85 c0                	test   %eax,%eax
f01328ba:	0f 85 de 01 00 00    	jne    f0132a9e <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01328c0:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01328c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328c8:	e9 9e 01 00 00       	jmp    f0132a6b <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01328cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328d0:	8b 40 0c             	mov    0xc(%eax),%eax
f01328d3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328d6:	0f 82 87 01 00 00    	jb     f0132a63 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01328dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328df:	8b 40 0c             	mov    0xc(%eax),%eax
f01328e2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328e5:	0f 85 95 00 00 00    	jne    f0132980 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01328eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328ef:	75 17                	jne    f0132908 <alloc_block_NF+0x5b>
f01328f1:	83 ec 04             	sub    $0x4,%esp
f01328f4:	68 b0 d9 13 f0       	push   $0xf013d9b0
f01328f9:	68 e0 00 00 00       	push   $0xe0
f01328fe:	68 07 d9 13 f0       	push   $0xf013d907
f0132903:	e8 fd d8 fc ff       	call   f0100205 <_panic>
f0132908:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013290b:	8b 00                	mov    (%eax),%eax
f013290d:	85 c0                	test   %eax,%eax
f013290f:	74 10                	je     f0132921 <alloc_block_NF+0x74>
f0132911:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132914:	8b 00                	mov    (%eax),%eax
f0132916:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132919:	8b 52 04             	mov    0x4(%edx),%edx
f013291c:	89 50 04             	mov    %edx,0x4(%eax)
f013291f:	eb 0b                	jmp    f013292c <alloc_block_NF+0x7f>
f0132921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132924:	8b 40 04             	mov    0x4(%eax),%eax
f0132927:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f013292c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013292f:	8b 40 04             	mov    0x4(%eax),%eax
f0132932:	85 c0                	test   %eax,%eax
f0132934:	74 0f                	je     f0132945 <alloc_block_NF+0x98>
f0132936:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132939:	8b 40 04             	mov    0x4(%eax),%eax
f013293c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013293f:	8b 12                	mov    (%edx),%edx
f0132941:	89 10                	mov    %edx,(%eax)
f0132943:	eb 0a                	jmp    f013294f <alloc_block_NF+0xa2>
f0132945:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132948:	8b 00                	mov    (%eax),%eax
f013294a:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013294f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132952:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132958:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132962:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132967:	48                   	dec    %eax
f0132968:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
				   svaOfNF = point->sva;
f013296d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132970:	8b 40 08             	mov    0x8(%eax),%eax
f0132973:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
				   return  point;
f0132978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013297b:	e9 f8 04 00 00       	jmp    f0132e78 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0132980:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132983:	8b 40 0c             	mov    0xc(%eax),%eax
f0132986:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132989:	0f 86 d4 00 00 00    	jbe    f0132a63 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013298f:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132994:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0132997:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013299a:	8b 50 08             	mov    0x8(%eax),%edx
f013299d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329a0:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f01329a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329a6:	8b 55 08             	mov    0x8(%ebp),%edx
f01329a9:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01329ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01329b0:	75 17                	jne    f01329c9 <alloc_block_NF+0x11c>
f01329b2:	83 ec 04             	sub    $0x4,%esp
f01329b5:	68 b0 d9 13 f0       	push   $0xf013d9b0
f01329ba:	68 e9 00 00 00       	push   $0xe9
f01329bf:	68 07 d9 13 f0       	push   $0xf013d907
f01329c4:	e8 3c d8 fc ff       	call   f0100205 <_panic>
f01329c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329cc:	8b 00                	mov    (%eax),%eax
f01329ce:	85 c0                	test   %eax,%eax
f01329d0:	74 10                	je     f01329e2 <alloc_block_NF+0x135>
f01329d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329d5:	8b 00                	mov    (%eax),%eax
f01329d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01329da:	8b 52 04             	mov    0x4(%edx),%edx
f01329dd:	89 50 04             	mov    %edx,0x4(%eax)
f01329e0:	eb 0b                	jmp    f01329ed <alloc_block_NF+0x140>
f01329e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329e5:	8b 40 04             	mov    0x4(%eax),%eax
f01329e8:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01329ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329f0:	8b 40 04             	mov    0x4(%eax),%eax
f01329f3:	85 c0                	test   %eax,%eax
f01329f5:	74 0f                	je     f0132a06 <alloc_block_NF+0x159>
f01329f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329fa:	8b 40 04             	mov    0x4(%eax),%eax
f01329fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132a00:	8b 12                	mov    (%edx),%edx
f0132a02:	89 10                	mov    %edx,(%eax)
f0132a04:	eb 0a                	jmp    f0132a10 <alloc_block_NF+0x163>
f0132a06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a09:	8b 00                	mov    (%eax),%eax
f0132a0b:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a13:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a1c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a23:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132a28:	48                   	dec    %eax
f0132a29:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
				   svaOfNF = ReturnedBlock->sva;
f0132a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a31:	8b 40 08             	mov    0x8(%eax),%eax
f0132a34:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
				   point->sva += size;
f0132a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a3c:	8b 50 08             	mov    0x8(%eax),%edx
f0132a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a42:	01 c2                	add    %eax,%edx
f0132a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a47:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a4d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a50:	2b 45 08             	sub    0x8(%ebp),%eax
f0132a53:	89 c2                	mov    %eax,%edx
f0132a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a58:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132a5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a5e:	e9 15 04 00 00       	jmp    f0132e78 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132a63:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132a68:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132a6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a6f:	74 07                	je     f0132a78 <alloc_block_NF+0x1cb>
f0132a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a74:	8b 00                	mov    (%eax),%eax
f0132a76:	eb 05                	jmp    f0132a7d <alloc_block_NF+0x1d0>
f0132a78:	b8 00 00 00 00       	mov    $0x0,%eax
f0132a7d:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132a82:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132a87:	85 c0                	test   %eax,%eax
f0132a89:	0f 85 3e fe ff ff    	jne    f01328cd <alloc_block_NF+0x20>
f0132a8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a93:	0f 85 34 fe ff ff    	jne    f01328cd <alloc_block_NF+0x20>
f0132a99:	e9 d5 03 00 00       	jmp    f0132e73 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132a9e:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132aa6:	e9 b1 01 00 00       	jmp    f0132c5c <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aae:	8b 50 08             	mov    0x8(%eax),%edx
f0132ab1:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f0132ab6:	39 c2                	cmp    %eax,%edx
f0132ab8:	0f 82 96 01 00 00    	jb     f0132c54 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ac1:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ac4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ac7:	0f 82 87 01 00 00    	jb     f0132c54 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad0:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ad3:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ad6:	0f 85 95 00 00 00    	jne    f0132b71 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ae0:	75 17                	jne    f0132af9 <alloc_block_NF+0x24c>
f0132ae2:	83 ec 04             	sub    $0x4,%esp
f0132ae5:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0132aea:	68 fc 00 00 00       	push   $0xfc
f0132aef:	68 07 d9 13 f0       	push   $0xf013d907
f0132af4:	e8 0c d7 fc ff       	call   f0100205 <_panic>
f0132af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132afc:	8b 00                	mov    (%eax),%eax
f0132afe:	85 c0                	test   %eax,%eax
f0132b00:	74 10                	je     f0132b12 <alloc_block_NF+0x265>
f0132b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b05:	8b 00                	mov    (%eax),%eax
f0132b07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b0a:	8b 52 04             	mov    0x4(%edx),%edx
f0132b0d:	89 50 04             	mov    %edx,0x4(%eax)
f0132b10:	eb 0b                	jmp    f0132b1d <alloc_block_NF+0x270>
f0132b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b15:	8b 40 04             	mov    0x4(%eax),%eax
f0132b18:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b20:	8b 40 04             	mov    0x4(%eax),%eax
f0132b23:	85 c0                	test   %eax,%eax
f0132b25:	74 0f                	je     f0132b36 <alloc_block_NF+0x289>
f0132b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b2a:	8b 40 04             	mov    0x4(%eax),%eax
f0132b2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b30:	8b 12                	mov    (%edx),%edx
f0132b32:	89 10                	mov    %edx,(%eax)
f0132b34:	eb 0a                	jmp    f0132b40 <alloc_block_NF+0x293>
f0132b36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b39:	8b 00                	mov    (%eax),%eax
f0132b3b:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b53:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132b58:	48                   	dec    %eax
f0132b59:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					   svaOfNF = point->sva;
f0132b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b61:	8b 40 08             	mov    0x8(%eax),%eax
f0132b64:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   return  point;
f0132b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b6c:	e9 07 03 00 00       	jmp    f0132e78 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b74:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132b7a:	0f 86 d4 00 00 00    	jbe    f0132c54 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132b80:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132b85:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b8b:	8b 50 08             	mov    0x8(%eax),%edx
f0132b8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b91:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132b94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b97:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b9a:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ba1:	75 17                	jne    f0132bba <alloc_block_NF+0x30d>
f0132ba3:	83 ec 04             	sub    $0x4,%esp
f0132ba6:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0132bab:	68 04 01 00 00       	push   $0x104
f0132bb0:	68 07 d9 13 f0       	push   $0xf013d907
f0132bb5:	e8 4b d6 fc ff       	call   f0100205 <_panic>
f0132bba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bbd:	8b 00                	mov    (%eax),%eax
f0132bbf:	85 c0                	test   %eax,%eax
f0132bc1:	74 10                	je     f0132bd3 <alloc_block_NF+0x326>
f0132bc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bc6:	8b 00                	mov    (%eax),%eax
f0132bc8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bcb:	8b 52 04             	mov    0x4(%edx),%edx
f0132bce:	89 50 04             	mov    %edx,0x4(%eax)
f0132bd1:	eb 0b                	jmp    f0132bde <alloc_block_NF+0x331>
f0132bd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bd6:	8b 40 04             	mov    0x4(%eax),%eax
f0132bd9:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132bde:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132be1:	8b 40 04             	mov    0x4(%eax),%eax
f0132be4:	85 c0                	test   %eax,%eax
f0132be6:	74 0f                	je     f0132bf7 <alloc_block_NF+0x34a>
f0132be8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132beb:	8b 40 04             	mov    0x4(%eax),%eax
f0132bee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bf1:	8b 12                	mov    (%edx),%edx
f0132bf3:	89 10                	mov    %edx,(%eax)
f0132bf5:	eb 0a                	jmp    f0132c01 <alloc_block_NF+0x354>
f0132bf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bfa:	8b 00                	mov    (%eax),%eax
f0132bfc:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132c01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c0d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c14:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132c19:	48                   	dec    %eax
f0132c1a:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					   svaOfNF = ReturnedBlock->sva;
f0132c1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c22:	8b 40 08             	mov    0x8(%eax),%eax
f0132c25:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   point->sva += size;
f0132c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c2d:	8b 50 08             	mov    0x8(%eax),%edx
f0132c30:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c33:	01 c2                	add    %eax,%edx
f0132c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c38:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c3e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c41:	2b 45 08             	sub    0x8(%ebp),%eax
f0132c44:	89 c2                	mov    %eax,%edx
f0132c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c49:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132c4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c4f:	e9 24 02 00 00       	jmp    f0132e78 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132c54:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132c59:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c60:	74 07                	je     f0132c69 <alloc_block_NF+0x3bc>
f0132c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c65:	8b 00                	mov    (%eax),%eax
f0132c67:	eb 05                	jmp    f0132c6e <alloc_block_NF+0x3c1>
f0132c69:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c6e:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132c73:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132c78:	85 c0                	test   %eax,%eax
f0132c7a:	0f 85 2b fe ff ff    	jne    f0132aab <alloc_block_NF+0x1fe>
f0132c80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c84:	0f 85 21 fe ff ff    	jne    f0132aab <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132c8a:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132c8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c92:	e9 ae 01 00 00       	jmp    f0132e45 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c9a:	8b 50 08             	mov    0x8(%eax),%edx
f0132c9d:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f0132ca2:	39 c2                	cmp    %eax,%edx
f0132ca4:	0f 83 93 01 00 00    	jae    f0132e3d <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cad:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cb0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cb3:	0f 82 84 01 00 00    	jb     f0132e3d <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cbc:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cbf:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cc2:	0f 85 95 00 00 00    	jne    f0132d5d <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132cc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ccc:	75 17                	jne    f0132ce5 <alloc_block_NF+0x438>
f0132cce:	83 ec 04             	sub    $0x4,%esp
f0132cd1:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0132cd6:	68 14 01 00 00       	push   $0x114
f0132cdb:	68 07 d9 13 f0       	push   $0xf013d907
f0132ce0:	e8 20 d5 fc ff       	call   f0100205 <_panic>
f0132ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ce8:	8b 00                	mov    (%eax),%eax
f0132cea:	85 c0                	test   %eax,%eax
f0132cec:	74 10                	je     f0132cfe <alloc_block_NF+0x451>
f0132cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cf1:	8b 00                	mov    (%eax),%eax
f0132cf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132cf6:	8b 52 04             	mov    0x4(%edx),%edx
f0132cf9:	89 50 04             	mov    %edx,0x4(%eax)
f0132cfc:	eb 0b                	jmp    f0132d09 <alloc_block_NF+0x45c>
f0132cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d01:	8b 40 04             	mov    0x4(%eax),%eax
f0132d04:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d0c:	8b 40 04             	mov    0x4(%eax),%eax
f0132d0f:	85 c0                	test   %eax,%eax
f0132d11:	74 0f                	je     f0132d22 <alloc_block_NF+0x475>
f0132d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d16:	8b 40 04             	mov    0x4(%eax),%eax
f0132d19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132d1c:	8b 12                	mov    (%edx),%edx
f0132d1e:	89 10                	mov    %edx,(%eax)
f0132d20:	eb 0a                	jmp    f0132d2c <alloc_block_NF+0x47f>
f0132d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d25:	8b 00                	mov    (%eax),%eax
f0132d27:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d38:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d3f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132d44:	48                   	dec    %eax
f0132d45:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					   svaOfNF = point->sva;
f0132d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d4d:	8b 40 08             	mov    0x8(%eax),%eax
f0132d50:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   return  point;
f0132d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d58:	e9 1b 01 00 00       	jmp    f0132e78 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132d5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d60:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d63:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132d66:	0f 86 d1 00 00 00    	jbe    f0132e3d <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132d6c:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132d71:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d77:	8b 50 08             	mov    0x8(%eax),%edx
f0132d7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d7d:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d83:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d86:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132d89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132d8d:	75 17                	jne    f0132da6 <alloc_block_NF+0x4f9>
f0132d8f:	83 ec 04             	sub    $0x4,%esp
f0132d92:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0132d97:	68 1c 01 00 00       	push   $0x11c
f0132d9c:	68 07 d9 13 f0       	push   $0xf013d907
f0132da1:	e8 5f d4 fc ff       	call   f0100205 <_panic>
f0132da6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132da9:	8b 00                	mov    (%eax),%eax
f0132dab:	85 c0                	test   %eax,%eax
f0132dad:	74 10                	je     f0132dbf <alloc_block_NF+0x512>
f0132daf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132db2:	8b 00                	mov    (%eax),%eax
f0132db4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132db7:	8b 52 04             	mov    0x4(%edx),%edx
f0132dba:	89 50 04             	mov    %edx,0x4(%eax)
f0132dbd:	eb 0b                	jmp    f0132dca <alloc_block_NF+0x51d>
f0132dbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dc2:	8b 40 04             	mov    0x4(%eax),%eax
f0132dc5:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132dca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dcd:	8b 40 04             	mov    0x4(%eax),%eax
f0132dd0:	85 c0                	test   %eax,%eax
f0132dd2:	74 0f                	je     f0132de3 <alloc_block_NF+0x536>
f0132dd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dd7:	8b 40 04             	mov    0x4(%eax),%eax
f0132dda:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ddd:	8b 12                	mov    (%edx),%edx
f0132ddf:	89 10                	mov    %edx,(%eax)
f0132de1:	eb 0a                	jmp    f0132ded <alloc_block_NF+0x540>
f0132de3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132de6:	8b 00                	mov    (%eax),%eax
f0132de8:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132ded:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132df0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132df9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e00:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132e05:	48                   	dec    %eax
f0132e06:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					   svaOfNF = ReturnedBlock->sva;
f0132e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e0e:	8b 40 08             	mov    0x8(%eax),%eax
f0132e11:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   point->sva += size;
f0132e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e19:	8b 50 08             	mov    0x8(%eax),%edx
f0132e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e1f:	01 c2                	add    %eax,%edx
f0132e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e24:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e2a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e2d:	2b 45 08             	sub    0x8(%ebp),%eax
f0132e30:	89 c2                	mov    %eax,%edx
f0132e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e35:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e3b:	eb 3b                	jmp    f0132e78 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132e3d:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132e45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e49:	74 07                	je     f0132e52 <alloc_block_NF+0x5a5>
f0132e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e4e:	8b 00                	mov    (%eax),%eax
f0132e50:	eb 05                	jmp    f0132e57 <alloc_block_NF+0x5aa>
f0132e52:	b8 00 00 00 00       	mov    $0x0,%eax
f0132e57:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132e5c:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132e61:	85 c0                	test   %eax,%eax
f0132e63:	0f 85 2e fe ff ff    	jne    f0132c97 <alloc_block_NF+0x3ea>
f0132e69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e6d:	0f 85 24 fe ff ff    	jne    f0132c97 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132e73:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132e78:	c9                   	leave  
f0132e79:	c3                   	ret    

f0132e7a <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132e7a:	55                   	push   %ebp
f0132e7b:	89 e5                	mov    %esp,%ebp
f0132e7d:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132e80:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132e88:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f0132e8d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132e90:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132e95:	85 c0                	test   %eax,%eax
f0132e97:	74 14                	je     f0132ead <insert_sorted_with_merge_freeList+0x33>
f0132e99:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e9c:	8b 50 08             	mov    0x8(%eax),%edx
f0132e9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ea2:	8b 40 08             	mov    0x8(%eax),%eax
f0132ea5:	39 c2                	cmp    %eax,%edx
f0132ea7:	0f 87 9b 01 00 00    	ja     f0133048 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132ead:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132eb1:	75 17                	jne    f0132eca <insert_sorted_with_merge_freeList+0x50>
f0132eb3:	83 ec 04             	sub    $0x4,%esp
f0132eb6:	68 e4 d8 13 f0       	push   $0xf013d8e4
f0132ebb:	68 38 01 00 00       	push   $0x138
f0132ec0:	68 07 d9 13 f0       	push   $0xf013d907
f0132ec5:	e8 3b d3 fc ff       	call   f0100205 <_panic>
f0132eca:	8b 15 64 ed 88 f0    	mov    0xf088ed64,%edx
f0132ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed3:	89 10                	mov    %edx,(%eax)
f0132ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed8:	8b 00                	mov    (%eax),%eax
f0132eda:	85 c0                	test   %eax,%eax
f0132edc:	74 0d                	je     f0132eeb <insert_sorted_with_merge_freeList+0x71>
f0132ede:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132ee3:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ee6:	89 50 04             	mov    %edx,0x4(%eax)
f0132ee9:	eb 08                	jmp    f0132ef3 <insert_sorted_with_merge_freeList+0x79>
f0132eeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eee:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ef6:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132efb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132efe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f05:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132f0a:	40                   	inc    %eax
f0132f0b:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132f10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132f14:	0f 84 a8 06 00 00    	je     f01335c2 <insert_sorted_with_merge_freeList+0x748>
f0132f1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f1d:	8b 50 08             	mov    0x8(%eax),%edx
f0132f20:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f23:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f26:	01 c2                	add    %eax,%edx
f0132f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f2b:	8b 40 08             	mov    0x8(%eax),%eax
f0132f2e:	39 c2                	cmp    %eax,%edx
f0132f30:	0f 85 8c 06 00 00    	jne    f01335c2 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132f36:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f39:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f3f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f42:	01 c2                	add    %eax,%edx
f0132f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f47:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132f4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132f4e:	75 17                	jne    f0132f67 <insert_sorted_with_merge_freeList+0xed>
f0132f50:	83 ec 04             	sub    $0x4,%esp
f0132f53:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0132f58:	68 3c 01 00 00       	push   $0x13c
f0132f5d:	68 07 d9 13 f0       	push   $0xf013d907
f0132f62:	e8 9e d2 fc ff       	call   f0100205 <_panic>
f0132f67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f6a:	8b 00                	mov    (%eax),%eax
f0132f6c:	85 c0                	test   %eax,%eax
f0132f6e:	74 10                	je     f0132f80 <insert_sorted_with_merge_freeList+0x106>
f0132f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f73:	8b 00                	mov    (%eax),%eax
f0132f75:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132f78:	8b 52 04             	mov    0x4(%edx),%edx
f0132f7b:	89 50 04             	mov    %edx,0x4(%eax)
f0132f7e:	eb 0b                	jmp    f0132f8b <insert_sorted_with_merge_freeList+0x111>
f0132f80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f83:	8b 40 04             	mov    0x4(%eax),%eax
f0132f86:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132f8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f8e:	8b 40 04             	mov    0x4(%eax),%eax
f0132f91:	85 c0                	test   %eax,%eax
f0132f93:	74 0f                	je     f0132fa4 <insert_sorted_with_merge_freeList+0x12a>
f0132f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f98:	8b 40 04             	mov    0x4(%eax),%eax
f0132f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132f9e:	8b 12                	mov    (%edx),%edx
f0132fa0:	89 10                	mov    %edx,(%eax)
f0132fa2:	eb 0a                	jmp    f0132fae <insert_sorted_with_merge_freeList+0x134>
f0132fa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fa7:	8b 00                	mov    (%eax),%eax
f0132fa9:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fc1:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132fc6:	48                   	dec    %eax
f0132fc7:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			head->size = 0;
f0132fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fcf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132fd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fd9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132fe0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132fe4:	75 17                	jne    f0132ffd <insert_sorted_with_merge_freeList+0x183>
f0132fe6:	83 ec 04             	sub    $0x4,%esp
f0132fe9:	68 e4 d8 13 f0       	push   $0xf013d8e4
f0132fee:	68 3f 01 00 00       	push   $0x13f
f0132ff3:	68 07 d9 13 f0       	push   $0xf013d907
f0132ff8:	e8 08 d2 fc ff       	call   f0100205 <_panic>
f0132ffd:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f0133003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133006:	89 10                	mov    %edx,(%eax)
f0133008:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013300b:	8b 00                	mov    (%eax),%eax
f013300d:	85 c0                	test   %eax,%eax
f013300f:	74 0d                	je     f013301e <insert_sorted_with_merge_freeList+0x1a4>
f0133011:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0133016:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0133019:	89 50 04             	mov    %edx,0x4(%eax)
f013301c:	eb 08                	jmp    f0133026 <insert_sorted_with_merge_freeList+0x1ac>
f013301e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133021:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0133026:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133029:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f013302e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133031:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133038:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013303d:	40                   	inc    %eax
f013303e:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133043:	e9 7a 05 00 00       	jmp    f01335c2 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0133048:	8b 45 08             	mov    0x8(%ebp),%eax
f013304b:	8b 50 08             	mov    0x8(%eax),%edx
f013304e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133051:	8b 40 08             	mov    0x8(%eax),%eax
f0133054:	39 c2                	cmp    %eax,%edx
f0133056:	0f 82 14 01 00 00    	jb     f0133170 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f013305c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013305f:	8b 50 08             	mov    0x8(%eax),%edx
f0133062:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133065:	8b 40 0c             	mov    0xc(%eax),%eax
f0133068:	01 c2                	add    %eax,%edx
f013306a:	8b 45 08             	mov    0x8(%ebp),%eax
f013306d:	8b 40 08             	mov    0x8(%eax),%eax
f0133070:	39 c2                	cmp    %eax,%edx
f0133072:	0f 85 90 00 00 00    	jne    f0133108 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0133078:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013307b:	8b 50 0c             	mov    0xc(%eax),%edx
f013307e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133081:	8b 40 0c             	mov    0xc(%eax),%eax
f0133084:	01 c2                	add    %eax,%edx
f0133086:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133089:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f013308c:	8b 45 08             	mov    0x8(%ebp),%eax
f013308f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0133096:	8b 45 08             	mov    0x8(%ebp),%eax
f0133099:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01330a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01330a4:	75 17                	jne    f01330bd <insert_sorted_with_merge_freeList+0x243>
f01330a6:	83 ec 04             	sub    $0x4,%esp
f01330a9:	68 e4 d8 13 f0       	push   $0xf013d8e4
f01330ae:	68 49 01 00 00       	push   $0x149
f01330b3:	68 07 d9 13 f0       	push   $0xf013d907
f01330b8:	e8 48 d1 fc ff       	call   f0100205 <_panic>
f01330bd:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01330c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01330c6:	89 10                	mov    %edx,(%eax)
f01330c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01330cb:	8b 00                	mov    (%eax),%eax
f01330cd:	85 c0                	test   %eax,%eax
f01330cf:	74 0d                	je     f01330de <insert_sorted_with_merge_freeList+0x264>
f01330d1:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01330d6:	8b 55 08             	mov    0x8(%ebp),%edx
f01330d9:	89 50 04             	mov    %edx,0x4(%eax)
f01330dc:	eb 08                	jmp    f01330e6 <insert_sorted_with_merge_freeList+0x26c>
f01330de:	8b 45 08             	mov    0x8(%ebp),%eax
f01330e1:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01330e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01330e9:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01330ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01330f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330f8:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01330fd:	40                   	inc    %eax
f01330fe:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133103:	e9 bb 04 00 00       	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0133108:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013310c:	75 17                	jne    f0133125 <insert_sorted_with_merge_freeList+0x2ab>
f013310e:	83 ec 04             	sub    $0x4,%esp
f0133111:	68 58 d9 13 f0       	push   $0xf013d958
f0133116:	68 4c 01 00 00       	push   $0x14c
f013311b:	68 07 d9 13 f0       	push   $0xf013d907
f0133120:	e8 e0 d0 fc ff       	call   f0100205 <_panic>
f0133125:	8b 15 68 ed 88 f0    	mov    0xf088ed68,%edx
f013312b:	8b 45 08             	mov    0x8(%ebp),%eax
f013312e:	89 50 04             	mov    %edx,0x4(%eax)
f0133131:	8b 45 08             	mov    0x8(%ebp),%eax
f0133134:	8b 40 04             	mov    0x4(%eax),%eax
f0133137:	85 c0                	test   %eax,%eax
f0133139:	74 0c                	je     f0133147 <insert_sorted_with_merge_freeList+0x2cd>
f013313b:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f0133140:	8b 55 08             	mov    0x8(%ebp),%edx
f0133143:	89 10                	mov    %edx,(%eax)
f0133145:	eb 08                	jmp    f013314f <insert_sorted_with_merge_freeList+0x2d5>
f0133147:	8b 45 08             	mov    0x8(%ebp),%eax
f013314a:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013314f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133152:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0133157:	8b 45 08             	mov    0x8(%ebp),%eax
f013315a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133160:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133165:	40                   	inc    %eax
f0133166:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013316b:	e9 53 04 00 00       	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133170:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0133175:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133178:	e9 15 04 00 00       	jmp    f0133592 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f013317d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133180:	8b 00                	mov    (%eax),%eax
f0133182:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0133185:	8b 45 08             	mov    0x8(%ebp),%eax
f0133188:	8b 50 08             	mov    0x8(%eax),%edx
f013318b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013318e:	8b 40 08             	mov    0x8(%eax),%eax
f0133191:	39 c2                	cmp    %eax,%edx
f0133193:	0f 86 f1 03 00 00    	jbe    f013358a <insert_sorted_with_merge_freeList+0x710>
f0133199:	8b 45 08             	mov    0x8(%ebp),%eax
f013319c:	8b 50 08             	mov    0x8(%eax),%edx
f013319f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331a2:	8b 40 08             	mov    0x8(%eax),%eax
f01331a5:	39 c2                	cmp    %eax,%edx
f01331a7:	0f 83 dd 03 00 00    	jae    f013358a <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f01331ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331b0:	8b 50 08             	mov    0x8(%eax),%edx
f01331b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331b6:	8b 40 0c             	mov    0xc(%eax),%eax
f01331b9:	01 c2                	add    %eax,%edx
f01331bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01331be:	8b 40 08             	mov    0x8(%eax),%eax
f01331c1:	39 c2                	cmp    %eax,%edx
f01331c3:	0f 85 b9 01 00 00    	jne    f0133382 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01331c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01331cc:	8b 50 08             	mov    0x8(%eax),%edx
f01331cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01331d2:	8b 40 0c             	mov    0xc(%eax),%eax
f01331d5:	01 c2                	add    %eax,%edx
f01331d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331da:	8b 40 08             	mov    0x8(%eax),%eax
f01331dd:	39 c2                	cmp    %eax,%edx
f01331df:	0f 85 0d 01 00 00    	jne    f01332f2 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01331e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331e8:	8b 50 0c             	mov    0xc(%eax),%edx
f01331eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331ee:	8b 40 0c             	mov    0xc(%eax),%eax
f01331f1:	01 c2                	add    %eax,%edx
f01331f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331f6:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01331f9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01331fd:	75 17                	jne    f0133216 <insert_sorted_with_merge_freeList+0x39c>
f01331ff:	83 ec 04             	sub    $0x4,%esp
f0133202:	68 b0 d9 13 f0       	push   $0xf013d9b0
f0133207:	68 5c 01 00 00       	push   $0x15c
f013320c:	68 07 d9 13 f0       	push   $0xf013d907
f0133211:	e8 ef cf fc ff       	call   f0100205 <_panic>
f0133216:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133219:	8b 00                	mov    (%eax),%eax
f013321b:	85 c0                	test   %eax,%eax
f013321d:	74 10                	je     f013322f <insert_sorted_with_merge_freeList+0x3b5>
f013321f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133222:	8b 00                	mov    (%eax),%eax
f0133224:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133227:	8b 52 04             	mov    0x4(%edx),%edx
f013322a:	89 50 04             	mov    %edx,0x4(%eax)
f013322d:	eb 0b                	jmp    f013323a <insert_sorted_with_merge_freeList+0x3c0>
f013322f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133232:	8b 40 04             	mov    0x4(%eax),%eax
f0133235:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f013323a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013323d:	8b 40 04             	mov    0x4(%eax),%eax
f0133240:	85 c0                	test   %eax,%eax
f0133242:	74 0f                	je     f0133253 <insert_sorted_with_merge_freeList+0x3d9>
f0133244:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133247:	8b 40 04             	mov    0x4(%eax),%eax
f013324a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013324d:	8b 12                	mov    (%edx),%edx
f013324f:	89 10                	mov    %edx,(%eax)
f0133251:	eb 0a                	jmp    f013325d <insert_sorted_with_merge_freeList+0x3e3>
f0133253:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133256:	8b 00                	mov    (%eax),%eax
f0133258:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013325d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133260:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133266:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133269:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133270:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133275:	48                   	dec    %eax
f0133276:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
						nextBlock->sva = 0;
f013327b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013327e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0133285:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133288:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f013328f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133293:	75 17                	jne    f01332ac <insert_sorted_with_merge_freeList+0x432>
f0133295:	83 ec 04             	sub    $0x4,%esp
f0133298:	68 e4 d8 13 f0       	push   $0xf013d8e4
f013329d:	68 5f 01 00 00       	push   $0x15f
f01332a2:	68 07 d9 13 f0       	push   $0xf013d907
f01332a7:	e8 59 cf fc ff       	call   f0100205 <_panic>
f01332ac:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01332b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332b5:	89 10                	mov    %edx,(%eax)
f01332b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332ba:	8b 00                	mov    (%eax),%eax
f01332bc:	85 c0                	test   %eax,%eax
f01332be:	74 0d                	je     f01332cd <insert_sorted_with_merge_freeList+0x453>
f01332c0:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01332c5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01332c8:	89 50 04             	mov    %edx,0x4(%eax)
f01332cb:	eb 08                	jmp    f01332d5 <insert_sorted_with_merge_freeList+0x45b>
f01332cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332d0:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01332d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332d8:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01332dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01332e7:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01332ec:	40                   	inc    %eax
f01332ed:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					}
					currentBlock->size += blockToInsert->size;
f01332f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332f5:	8b 50 0c             	mov    0xc(%eax),%edx
f01332f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01332fb:	8b 40 0c             	mov    0xc(%eax),%eax
f01332fe:	01 c2                	add    %eax,%edx
f0133300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133303:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0133306:	8b 45 08             	mov    0x8(%ebp),%eax
f0133309:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0133310:	8b 45 08             	mov    0x8(%ebp),%eax
f0133313:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013331a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013331e:	75 17                	jne    f0133337 <insert_sorted_with_merge_freeList+0x4bd>
f0133320:	83 ec 04             	sub    $0x4,%esp
f0133323:	68 e4 d8 13 f0       	push   $0xf013d8e4
f0133328:	68 64 01 00 00       	push   $0x164
f013332d:	68 07 d9 13 f0       	push   $0xf013d907
f0133332:	e8 ce ce fc ff       	call   f0100205 <_panic>
f0133337:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f013333d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133340:	89 10                	mov    %edx,(%eax)
f0133342:	8b 45 08             	mov    0x8(%ebp),%eax
f0133345:	8b 00                	mov    (%eax),%eax
f0133347:	85 c0                	test   %eax,%eax
f0133349:	74 0d                	je     f0133358 <insert_sorted_with_merge_freeList+0x4de>
f013334b:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0133350:	8b 55 08             	mov    0x8(%ebp),%edx
f0133353:	89 50 04             	mov    %edx,0x4(%eax)
f0133356:	eb 08                	jmp    f0133360 <insert_sorted_with_merge_freeList+0x4e6>
f0133358:	8b 45 08             	mov    0x8(%ebp),%eax
f013335b:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0133360:	8b 45 08             	mov    0x8(%ebp),%eax
f0133363:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0133368:	8b 45 08             	mov    0x8(%ebp),%eax
f013336b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133372:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0133377:	40                   	inc    %eax
f0133378:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					break;
f013337d:	e9 41 02 00 00       	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0133382:	8b 45 08             	mov    0x8(%ebp),%eax
f0133385:	8b 50 08             	mov    0x8(%eax),%edx
f0133388:	8b 45 08             	mov    0x8(%ebp),%eax
f013338b:	8b 40 0c             	mov    0xc(%eax),%eax
f013338e:	01 c2                	add    %eax,%edx
f0133390:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133393:	8b 40 08             	mov    0x8(%eax),%eax
f0133396:	39 c2                	cmp    %eax,%edx
f0133398:	0f 85 7c 01 00 00    	jne    f013351a <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f013339e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01333a2:	74 06                	je     f01333aa <insert_sorted_with_merge_freeList+0x530>
f01333a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01333a8:	75 17                	jne    f01333c1 <insert_sorted_with_merge_freeList+0x547>
f01333aa:	83 ec 04             	sub    $0x4,%esp
f01333ad:	68 20 d9 13 f0       	push   $0xf013d920
f01333b2:	68 69 01 00 00       	push   $0x169
f01333b7:	68 07 d9 13 f0       	push   $0xf013d907
f01333bc:	e8 44 ce fc ff       	call   f0100205 <_panic>
f01333c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333c4:	8b 50 04             	mov    0x4(%eax),%edx
f01333c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01333ca:	89 50 04             	mov    %edx,0x4(%eax)
f01333cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01333d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01333d3:	89 10                	mov    %edx,(%eax)
f01333d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333d8:	8b 40 04             	mov    0x4(%eax),%eax
f01333db:	85 c0                	test   %eax,%eax
f01333dd:	74 0d                	je     f01333ec <insert_sorted_with_merge_freeList+0x572>
f01333df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333e2:	8b 40 04             	mov    0x4(%eax),%eax
f01333e5:	8b 55 08             	mov    0x8(%ebp),%edx
f01333e8:	89 10                	mov    %edx,(%eax)
f01333ea:	eb 08                	jmp    f01333f4 <insert_sorted_with_merge_freeList+0x57a>
f01333ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01333ef:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f01333f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333f7:	8b 55 08             	mov    0x8(%ebp),%edx
f01333fa:	89 50 04             	mov    %edx,0x4(%eax)
f01333fd:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133402:	40                   	inc    %eax
f0133403:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					blockToInsert->size += nextBlock->size;
f0133408:	8b 45 08             	mov    0x8(%ebp),%eax
f013340b:	8b 50 0c             	mov    0xc(%eax),%edx
f013340e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133411:	8b 40 0c             	mov    0xc(%eax),%eax
f0133414:	01 c2                	add    %eax,%edx
f0133416:	8b 45 08             	mov    0x8(%ebp),%eax
f0133419:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f013341c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133420:	75 17                	jne    f0133439 <insert_sorted_with_merge_freeList+0x5bf>
f0133422:	83 ec 04             	sub    $0x4,%esp
f0133425:	68 b0 d9 13 f0       	push   $0xf013d9b0
f013342a:	68 6b 01 00 00       	push   $0x16b
f013342f:	68 07 d9 13 f0       	push   $0xf013d907
f0133434:	e8 cc cd fc ff       	call   f0100205 <_panic>
f0133439:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013343c:	8b 00                	mov    (%eax),%eax
f013343e:	85 c0                	test   %eax,%eax
f0133440:	74 10                	je     f0133452 <insert_sorted_with_merge_freeList+0x5d8>
f0133442:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133445:	8b 00                	mov    (%eax),%eax
f0133447:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013344a:	8b 52 04             	mov    0x4(%edx),%edx
f013344d:	89 50 04             	mov    %edx,0x4(%eax)
f0133450:	eb 0b                	jmp    f013345d <insert_sorted_with_merge_freeList+0x5e3>
f0133452:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133455:	8b 40 04             	mov    0x4(%eax),%eax
f0133458:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f013345d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133460:	8b 40 04             	mov    0x4(%eax),%eax
f0133463:	85 c0                	test   %eax,%eax
f0133465:	74 0f                	je     f0133476 <insert_sorted_with_merge_freeList+0x5fc>
f0133467:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013346a:	8b 40 04             	mov    0x4(%eax),%eax
f013346d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133470:	8b 12                	mov    (%edx),%edx
f0133472:	89 10                	mov    %edx,(%eax)
f0133474:	eb 0a                	jmp    f0133480 <insert_sorted_with_merge_freeList+0x606>
f0133476:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133479:	8b 00                	mov    (%eax),%eax
f013347b:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0133480:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133489:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013348c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133493:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133498:	48                   	dec    %eax
f0133499:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					nextBlock->sva = 0;
f013349e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01334a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334ab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01334b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01334b6:	75 17                	jne    f01334cf <insert_sorted_with_merge_freeList+0x655>
f01334b8:	83 ec 04             	sub    $0x4,%esp
f01334bb:	68 e4 d8 13 f0       	push   $0xf013d8e4
f01334c0:	68 6e 01 00 00       	push   $0x16e
f01334c5:	68 07 d9 13 f0       	push   $0xf013d907
f01334ca:	e8 36 cd fc ff       	call   f0100205 <_panic>
f01334cf:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01334d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334d8:	89 10                	mov    %edx,(%eax)
f01334da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334dd:	8b 00                	mov    (%eax),%eax
f01334df:	85 c0                	test   %eax,%eax
f01334e1:	74 0d                	je     f01334f0 <insert_sorted_with_merge_freeList+0x676>
f01334e3:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01334e8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01334eb:	89 50 04             	mov    %edx,0x4(%eax)
f01334ee:	eb 08                	jmp    f01334f8 <insert_sorted_with_merge_freeList+0x67e>
f01334f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334f3:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01334f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334fb:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0133500:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133503:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013350a:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013350f:	40                   	inc    %eax
f0133510:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					break;
f0133515:	e9 a9 00 00 00       	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f013351a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013351e:	74 06                	je     f0133526 <insert_sorted_with_merge_freeList+0x6ac>
f0133520:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133524:	75 17                	jne    f013353d <insert_sorted_with_merge_freeList+0x6c3>
f0133526:	83 ec 04             	sub    $0x4,%esp
f0133529:	68 7c d9 13 f0       	push   $0xf013d97c
f013352e:	68 73 01 00 00       	push   $0x173
f0133533:	68 07 d9 13 f0       	push   $0xf013d907
f0133538:	e8 c8 cc fc ff       	call   f0100205 <_panic>
f013353d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133540:	8b 10                	mov    (%eax),%edx
f0133542:	8b 45 08             	mov    0x8(%ebp),%eax
f0133545:	89 10                	mov    %edx,(%eax)
f0133547:	8b 45 08             	mov    0x8(%ebp),%eax
f013354a:	8b 00                	mov    (%eax),%eax
f013354c:	85 c0                	test   %eax,%eax
f013354e:	74 0b                	je     f013355b <insert_sorted_with_merge_freeList+0x6e1>
f0133550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133553:	8b 00                	mov    (%eax),%eax
f0133555:	8b 55 08             	mov    0x8(%ebp),%edx
f0133558:	89 50 04             	mov    %edx,0x4(%eax)
f013355b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013355e:	8b 55 08             	mov    0x8(%ebp),%edx
f0133561:	89 10                	mov    %edx,(%eax)
f0133563:	8b 45 08             	mov    0x8(%ebp),%eax
f0133566:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133569:	89 50 04             	mov    %edx,0x4(%eax)
f013356c:	8b 45 08             	mov    0x8(%ebp),%eax
f013356f:	8b 00                	mov    (%eax),%eax
f0133571:	85 c0                	test   %eax,%eax
f0133573:	75 08                	jne    f013357d <insert_sorted_with_merge_freeList+0x703>
f0133575:	8b 45 08             	mov    0x8(%ebp),%eax
f0133578:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f013357d:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133582:	40                   	inc    %eax
f0133583:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					break;
f0133588:	eb 39                	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013358a:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f013358f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133592:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133596:	74 07                	je     f013359f <insert_sorted_with_merge_freeList+0x725>
f0133598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013359b:	8b 00                	mov    (%eax),%eax
f013359d:	eb 05                	jmp    f01335a4 <insert_sorted_with_merge_freeList+0x72a>
f013359f:	b8 00 00 00 00       	mov    $0x0,%eax
f01335a4:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f01335a9:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f01335ae:	85 c0                	test   %eax,%eax
f01335b0:	0f 85 c7 fb ff ff    	jne    f013317d <insert_sorted_with_merge_freeList+0x303>
f01335b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01335ba:	0f 85 bd fb ff ff    	jne    f013317d <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01335c0:	eb 01                	jmp    f01335c3 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01335c2:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01335c3:	90                   	nop
f01335c4:	c9                   	leave  
f01335c5:	c3                   	ret    
f01335c6:	66 90                	xchg   %ax,%ax

f01335c8 <__udivdi3>:
f01335c8:	55                   	push   %ebp
f01335c9:	57                   	push   %edi
f01335ca:	56                   	push   %esi
f01335cb:	53                   	push   %ebx
f01335cc:	83 ec 1c             	sub    $0x1c,%esp
f01335cf:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01335d3:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01335d7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01335db:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01335df:	89 ca                	mov    %ecx,%edx
f01335e1:	89 f8                	mov    %edi,%eax
f01335e3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01335e7:	85 f6                	test   %esi,%esi
f01335e9:	75 2d                	jne    f0133618 <__udivdi3+0x50>
f01335eb:	39 cf                	cmp    %ecx,%edi
f01335ed:	77 65                	ja     f0133654 <__udivdi3+0x8c>
f01335ef:	89 fd                	mov    %edi,%ebp
f01335f1:	85 ff                	test   %edi,%edi
f01335f3:	75 0b                	jne    f0133600 <__udivdi3+0x38>
f01335f5:	b8 01 00 00 00       	mov    $0x1,%eax
f01335fa:	31 d2                	xor    %edx,%edx
f01335fc:	f7 f7                	div    %edi
f01335fe:	89 c5                	mov    %eax,%ebp
f0133600:	31 d2                	xor    %edx,%edx
f0133602:	89 c8                	mov    %ecx,%eax
f0133604:	f7 f5                	div    %ebp
f0133606:	89 c1                	mov    %eax,%ecx
f0133608:	89 d8                	mov    %ebx,%eax
f013360a:	f7 f5                	div    %ebp
f013360c:	89 cf                	mov    %ecx,%edi
f013360e:	89 fa                	mov    %edi,%edx
f0133610:	83 c4 1c             	add    $0x1c,%esp
f0133613:	5b                   	pop    %ebx
f0133614:	5e                   	pop    %esi
f0133615:	5f                   	pop    %edi
f0133616:	5d                   	pop    %ebp
f0133617:	c3                   	ret    
f0133618:	39 ce                	cmp    %ecx,%esi
f013361a:	77 28                	ja     f0133644 <__udivdi3+0x7c>
f013361c:	0f bd fe             	bsr    %esi,%edi
f013361f:	83 f7 1f             	xor    $0x1f,%edi
f0133622:	75 40                	jne    f0133664 <__udivdi3+0x9c>
f0133624:	39 ce                	cmp    %ecx,%esi
f0133626:	72 0a                	jb     f0133632 <__udivdi3+0x6a>
f0133628:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013362c:	0f 87 9e 00 00 00    	ja     f01336d0 <__udivdi3+0x108>
f0133632:	b8 01 00 00 00       	mov    $0x1,%eax
f0133637:	89 fa                	mov    %edi,%edx
f0133639:	83 c4 1c             	add    $0x1c,%esp
f013363c:	5b                   	pop    %ebx
f013363d:	5e                   	pop    %esi
f013363e:	5f                   	pop    %edi
f013363f:	5d                   	pop    %ebp
f0133640:	c3                   	ret    
f0133641:	8d 76 00             	lea    0x0(%esi),%esi
f0133644:	31 ff                	xor    %edi,%edi
f0133646:	31 c0                	xor    %eax,%eax
f0133648:	89 fa                	mov    %edi,%edx
f013364a:	83 c4 1c             	add    $0x1c,%esp
f013364d:	5b                   	pop    %ebx
f013364e:	5e                   	pop    %esi
f013364f:	5f                   	pop    %edi
f0133650:	5d                   	pop    %ebp
f0133651:	c3                   	ret    
f0133652:	66 90                	xchg   %ax,%ax
f0133654:	89 d8                	mov    %ebx,%eax
f0133656:	f7 f7                	div    %edi
f0133658:	31 ff                	xor    %edi,%edi
f013365a:	89 fa                	mov    %edi,%edx
f013365c:	83 c4 1c             	add    $0x1c,%esp
f013365f:	5b                   	pop    %ebx
f0133660:	5e                   	pop    %esi
f0133661:	5f                   	pop    %edi
f0133662:	5d                   	pop    %ebp
f0133663:	c3                   	ret    
f0133664:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133669:	89 eb                	mov    %ebp,%ebx
f013366b:	29 fb                	sub    %edi,%ebx
f013366d:	89 f9                	mov    %edi,%ecx
f013366f:	d3 e6                	shl    %cl,%esi
f0133671:	89 c5                	mov    %eax,%ebp
f0133673:	88 d9                	mov    %bl,%cl
f0133675:	d3 ed                	shr    %cl,%ebp
f0133677:	89 e9                	mov    %ebp,%ecx
f0133679:	09 f1                	or     %esi,%ecx
f013367b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013367f:	89 f9                	mov    %edi,%ecx
f0133681:	d3 e0                	shl    %cl,%eax
f0133683:	89 c5                	mov    %eax,%ebp
f0133685:	89 d6                	mov    %edx,%esi
f0133687:	88 d9                	mov    %bl,%cl
f0133689:	d3 ee                	shr    %cl,%esi
f013368b:	89 f9                	mov    %edi,%ecx
f013368d:	d3 e2                	shl    %cl,%edx
f013368f:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133693:	88 d9                	mov    %bl,%cl
f0133695:	d3 e8                	shr    %cl,%eax
f0133697:	09 c2                	or     %eax,%edx
f0133699:	89 d0                	mov    %edx,%eax
f013369b:	89 f2                	mov    %esi,%edx
f013369d:	f7 74 24 0c          	divl   0xc(%esp)
f01336a1:	89 d6                	mov    %edx,%esi
f01336a3:	89 c3                	mov    %eax,%ebx
f01336a5:	f7 e5                	mul    %ebp
f01336a7:	39 d6                	cmp    %edx,%esi
f01336a9:	72 19                	jb     f01336c4 <__udivdi3+0xfc>
f01336ab:	74 0b                	je     f01336b8 <__udivdi3+0xf0>
f01336ad:	89 d8                	mov    %ebx,%eax
f01336af:	31 ff                	xor    %edi,%edi
f01336b1:	e9 58 ff ff ff       	jmp    f013360e <__udivdi3+0x46>
f01336b6:	66 90                	xchg   %ax,%ax
f01336b8:	8b 54 24 08          	mov    0x8(%esp),%edx
f01336bc:	89 f9                	mov    %edi,%ecx
f01336be:	d3 e2                	shl    %cl,%edx
f01336c0:	39 c2                	cmp    %eax,%edx
f01336c2:	73 e9                	jae    f01336ad <__udivdi3+0xe5>
f01336c4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01336c7:	31 ff                	xor    %edi,%edi
f01336c9:	e9 40 ff ff ff       	jmp    f013360e <__udivdi3+0x46>
f01336ce:	66 90                	xchg   %ax,%ax
f01336d0:	31 c0                	xor    %eax,%eax
f01336d2:	e9 37 ff ff ff       	jmp    f013360e <__udivdi3+0x46>
f01336d7:	90                   	nop

f01336d8 <__umoddi3>:
f01336d8:	55                   	push   %ebp
f01336d9:	57                   	push   %edi
f01336da:	56                   	push   %esi
f01336db:	53                   	push   %ebx
f01336dc:	83 ec 1c             	sub    $0x1c,%esp
f01336df:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01336e3:	8b 74 24 34          	mov    0x34(%esp),%esi
f01336e7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01336eb:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01336ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01336f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01336f7:	89 f3                	mov    %esi,%ebx
f01336f9:	89 fa                	mov    %edi,%edx
f01336fb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01336ff:	89 34 24             	mov    %esi,(%esp)
f0133702:	85 c0                	test   %eax,%eax
f0133704:	75 1a                	jne    f0133720 <__umoddi3+0x48>
f0133706:	39 f7                	cmp    %esi,%edi
f0133708:	0f 86 a2 00 00 00    	jbe    f01337b0 <__umoddi3+0xd8>
f013370e:	89 c8                	mov    %ecx,%eax
f0133710:	89 f2                	mov    %esi,%edx
f0133712:	f7 f7                	div    %edi
f0133714:	89 d0                	mov    %edx,%eax
f0133716:	31 d2                	xor    %edx,%edx
f0133718:	83 c4 1c             	add    $0x1c,%esp
f013371b:	5b                   	pop    %ebx
f013371c:	5e                   	pop    %esi
f013371d:	5f                   	pop    %edi
f013371e:	5d                   	pop    %ebp
f013371f:	c3                   	ret    
f0133720:	39 f0                	cmp    %esi,%eax
f0133722:	0f 87 ac 00 00 00    	ja     f01337d4 <__umoddi3+0xfc>
f0133728:	0f bd e8             	bsr    %eax,%ebp
f013372b:	83 f5 1f             	xor    $0x1f,%ebp
f013372e:	0f 84 ac 00 00 00    	je     f01337e0 <__umoddi3+0x108>
f0133734:	bf 20 00 00 00       	mov    $0x20,%edi
f0133739:	29 ef                	sub    %ebp,%edi
f013373b:	89 fe                	mov    %edi,%esi
f013373d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133741:	89 e9                	mov    %ebp,%ecx
f0133743:	d3 e0                	shl    %cl,%eax
f0133745:	89 d7                	mov    %edx,%edi
f0133747:	89 f1                	mov    %esi,%ecx
f0133749:	d3 ef                	shr    %cl,%edi
f013374b:	09 c7                	or     %eax,%edi
f013374d:	89 e9                	mov    %ebp,%ecx
f013374f:	d3 e2                	shl    %cl,%edx
f0133751:	89 14 24             	mov    %edx,(%esp)
f0133754:	89 d8                	mov    %ebx,%eax
f0133756:	d3 e0                	shl    %cl,%eax
f0133758:	89 c2                	mov    %eax,%edx
f013375a:	8b 44 24 08          	mov    0x8(%esp),%eax
f013375e:	d3 e0                	shl    %cl,%eax
f0133760:	89 44 24 04          	mov    %eax,0x4(%esp)
f0133764:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133768:	89 f1                	mov    %esi,%ecx
f013376a:	d3 e8                	shr    %cl,%eax
f013376c:	09 d0                	or     %edx,%eax
f013376e:	d3 eb                	shr    %cl,%ebx
f0133770:	89 da                	mov    %ebx,%edx
f0133772:	f7 f7                	div    %edi
f0133774:	89 d3                	mov    %edx,%ebx
f0133776:	f7 24 24             	mull   (%esp)
f0133779:	89 c6                	mov    %eax,%esi
f013377b:	89 d1                	mov    %edx,%ecx
f013377d:	39 d3                	cmp    %edx,%ebx
f013377f:	0f 82 87 00 00 00    	jb     f013380c <__umoddi3+0x134>
f0133785:	0f 84 91 00 00 00    	je     f013381c <__umoddi3+0x144>
f013378b:	8b 54 24 04          	mov    0x4(%esp),%edx
f013378f:	29 f2                	sub    %esi,%edx
f0133791:	19 cb                	sbb    %ecx,%ebx
f0133793:	89 d8                	mov    %ebx,%eax
f0133795:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133799:	d3 e0                	shl    %cl,%eax
f013379b:	89 e9                	mov    %ebp,%ecx
f013379d:	d3 ea                	shr    %cl,%edx
f013379f:	09 d0                	or     %edx,%eax
f01337a1:	89 e9                	mov    %ebp,%ecx
f01337a3:	d3 eb                	shr    %cl,%ebx
f01337a5:	89 da                	mov    %ebx,%edx
f01337a7:	83 c4 1c             	add    $0x1c,%esp
f01337aa:	5b                   	pop    %ebx
f01337ab:	5e                   	pop    %esi
f01337ac:	5f                   	pop    %edi
f01337ad:	5d                   	pop    %ebp
f01337ae:	c3                   	ret    
f01337af:	90                   	nop
f01337b0:	89 fd                	mov    %edi,%ebp
f01337b2:	85 ff                	test   %edi,%edi
f01337b4:	75 0b                	jne    f01337c1 <__umoddi3+0xe9>
f01337b6:	b8 01 00 00 00       	mov    $0x1,%eax
f01337bb:	31 d2                	xor    %edx,%edx
f01337bd:	f7 f7                	div    %edi
f01337bf:	89 c5                	mov    %eax,%ebp
f01337c1:	89 f0                	mov    %esi,%eax
f01337c3:	31 d2                	xor    %edx,%edx
f01337c5:	f7 f5                	div    %ebp
f01337c7:	89 c8                	mov    %ecx,%eax
f01337c9:	f7 f5                	div    %ebp
f01337cb:	89 d0                	mov    %edx,%eax
f01337cd:	e9 44 ff ff ff       	jmp    f0133716 <__umoddi3+0x3e>
f01337d2:	66 90                	xchg   %ax,%ax
f01337d4:	89 c8                	mov    %ecx,%eax
f01337d6:	89 f2                	mov    %esi,%edx
f01337d8:	83 c4 1c             	add    $0x1c,%esp
f01337db:	5b                   	pop    %ebx
f01337dc:	5e                   	pop    %esi
f01337dd:	5f                   	pop    %edi
f01337de:	5d                   	pop    %ebp
f01337df:	c3                   	ret    
f01337e0:	3b 04 24             	cmp    (%esp),%eax
f01337e3:	72 06                	jb     f01337eb <__umoddi3+0x113>
f01337e5:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01337e9:	77 0f                	ja     f01337fa <__umoddi3+0x122>
f01337eb:	89 f2                	mov    %esi,%edx
f01337ed:	29 f9                	sub    %edi,%ecx
f01337ef:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01337f3:	89 14 24             	mov    %edx,(%esp)
f01337f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01337fa:	8b 44 24 04          	mov    0x4(%esp),%eax
f01337fe:	8b 14 24             	mov    (%esp),%edx
f0133801:	83 c4 1c             	add    $0x1c,%esp
f0133804:	5b                   	pop    %ebx
f0133805:	5e                   	pop    %esi
f0133806:	5f                   	pop    %edi
f0133807:	5d                   	pop    %ebp
f0133808:	c3                   	ret    
f0133809:	8d 76 00             	lea    0x0(%esi),%esi
f013380c:	2b 04 24             	sub    (%esp),%eax
f013380f:	19 fa                	sbb    %edi,%edx
f0133811:	89 d1                	mov    %edx,%ecx
f0133813:	89 c6                	mov    %eax,%esi
f0133815:	e9 71 ff ff ff       	jmp    f013378b <__umoddi3+0xb3>
f013381a:	66 90                	xchg   %ax,%ax
f013381c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133820:	72 ea                	jb     f013380c <__umoddi3+0x134>
f0133822:	89 d9                	mov    %ebx,%ecx
f0133824:	e9 62 ff ff ff       	jmp    f013378b <__umoddi3+0xb3>
